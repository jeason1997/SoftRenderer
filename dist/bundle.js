(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
exports.__esModule = true;
exports.Color = void 0;
var Color = /** @class */ (function () {
    function Color(r, g, b, a) {
        if (a === void 0) { a = 255; }
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
    Color.prototype.ToUint32 = function () {
        return (this.a << 24) | (this.b << 16) | (this.g << 8) | this.r;
    };
    Color.FromUint32 = function (uint32) {
        return new Color(uint32 & 0xFF, (uint32 >> 8) & 0xFF, (uint32 >> 16) & 0xFF, (uint32 >> 24) & 0xFF);
    };
    Color.WHITE = new Color(255, 255, 255).ToUint32();
    Color.BLACK = new Color(0, 0, 0).ToUint32();
    Color.GRAY = new Color(128, 128, 128).ToUint32();
    Color.RED = new Color(255, 0, 0).ToUint32();
    Color.GREEN = new Color(0, 255, 0).ToUint32();
    Color.BLUE = new Color(0, 0, 255).ToUint32();
    Color.YELLOW = new Color(255, 255, 0).ToUint32();
    Color.CYAN = new Color(0, 255, 255).ToUint32();
    Color.MAGENTA = new Color(255, 0, 255).ToUint32();
    Color.ORANGE = new Color(255, 165, 0).ToUint32();
    Color.PURPLE = new Color(128, 0, 128).ToUint32();
    return Color;
}());
exports.Color = Color;
},{}],2:[function(require,module,exports){
"use strict";
exports.__esModule = true;
exports.Renderer = void 0;
var Color_1 = require("./Color");
var Renderer = /** @class */ (function () {
    function Renderer(uint32View, canvasWidth, canvasHeight) {
        this.angle = 0;
        this.uint32View = uint32View;
        this.canvasWidth = canvasWidth;
        this.canvasHeight = canvasHeight;
    }
    Renderer.prototype.Render = function () {
        // for (let x = 0; x < this.canvasWidth; x++) {
        //     // 每列一种随机颜色
        //     const color = Math.random() * 0xFFFFFFFF;
        //     for (let y = 0; y < this.canvasHeight; y++) {
        //         this.SetPixel(x, y, color);
        //     }
        // }
        this.Clear(Color_1.Color.GRAY);
        // 圆心
        // const centerX = this.canvasWidth / 2;
        // const centerY = this.canvasHeight / 2;
        // // 半径
        // const radius = 100;
        // // 绘制圆心到半径的线（绕一圈）
        // const x = centerX + radius * Math.cos(this.angle * Math.PI / 180);
        // const y = centerY + radius * Math.sin(this.angle * Math.PI / 180);
        // this.DrawLine(centerX, centerY, x, y, Color.WHITE);
        // this.angle++;
        this.DrawLine(200, 200, 200, 0, Color_1.Color.WHITE);
        this.DrawLine(200, 200, 300, 0, Color_1.Color.RED);
        this.DrawLine(200, 200, 300, 200, Color_1.Color.GREEN);
        this.DrawLine(200, 200, 300, 400, Color_1.Color.BLUE);
        this.DrawLine(200, 200, 200, 300, Color_1.Color.BLACK);
        this.DrawLine(200, 200, 100, 300, Color_1.Color.YELLOW);
        this.DrawLine(200, 200, 100, 100, Color_1.Color.ORANGE);
    };
    Renderer.prototype.Clear = function (color) {
        // 使用 fill 方法替代循环，性能更好
        this.uint32View.fill(color);
        // 或者使用循环，但性能较差
        // for (let x = 0; x < this.canvasWidth; x++) {
        //     for (let y = 0; y < this.canvasHeight; y++) {
        //         this.SetPixel(x, y, color);
        //     }
        // }
    };
    Renderer.prototype.SetPixel = function (x, y, color) {
        this.uint32View[y * this.canvasWidth + x] = color;
    };
    Renderer.prototype.DrawLine = function (x1, y1, x2, y2, color) {
        var _a, _b, _c, _d;
        var dx = x2 - x1;
        var dy = y2 - y1;
        // 为何要区分斜率是否偏水平还是垂直呢？因为如果不区分，例如当斜率大于1时，会导致直线绘制不连续，因为y会跳变，而不是连续的增加。
        // 只有斜率刚好为1时，x跟y才是连续同步自增的，x+1，则y也+1
        // 所以，当斜率大于1时，我们需要使用y作为循环变量，而当斜率小于1时，我们需要使用x作为循环变量。
        // 举个极端例子，当斜率为0时，直线就是一条垂直直线，如果这时候还用x作为循环变量，则会导致这条直线上所有y点都对应一个x，也就是说这条线变成一个点了。
        // 斜率小于1，直线偏水平情况，使用x作为循环变量
        if (Math.abs(dx) > Math.abs(dy)) {
            // 下面的循环绘制函数是从左往右的，这里要确保结束点在开始点的右边
            if (x2 < x1) {
                _a = [x2, x1], x1 = _a[0], x2 = _a[1];
                _b = [y2, y1], y1 = _b[0], y2 = _b[1];
            }
            // 斜率
            var a = dy / dx;
            // 截距（y=ax+b，b=y-ax）
            // const b = y1 - a * x1;
            var y = y1;
            // 绘制直线
            for (var x = x1; x <= x2; x++) {
                this.SetPixel(x, y, color);
                // 直线公式y=ax+b，这里不必计算这个公式，因为当x加1自增时，y也会加a，所以可以直接用y+a代替ax+b，算是一个性能优化点
                // y = a * x + b;
                y = y + a;
            }
        }
        // 斜率大于1，直线偏垂直情况，使用y作为循环变量
        else {
            if (y2 < y1) {
                _c = [x2, x1], x1 = _c[0], x2 = _c[1];
                _d = [y2, y1], y1 = _d[0], y2 = _d[1];
            }
            var a = dx / dy;
            var x = x1;
            for (var y = y1; y <= y2; y++) {
                this.SetPixel(x, y, color);
                x = x + a;
            }
        }
    };
    return Renderer;
}());
exports.Renderer = Renderer;
},{"./Color":1}],3:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var Renderer_1 = require("./Renderer");
// 画布尺寸
var canvasWidth = 400;
var canvasHeight = 400;
// 当DOM内容加载完成后执行
document.addEventListener('DOMContentLoaded', function () {
    // 获取canvas元素和2D渲染上下文
    var canvas = document.getElementById('canvas');
    var ctx = canvas.getContext('2d');
    // 设置canvas尺寸
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
    // 创建图像数据对象
    var imageData = ctx.createImageData(canvasWidth, canvasHeight);
    // 创建32位无符号整型数组视图，用于直接操作像素数据
    var uint32View = new Uint32Array(imageData.data.buffer);
    // 创建渲染器实例
    var renderer = new Renderer_1.Renderer(uint32View, canvasWidth, canvasHeight);
    // 渲染函数
    function render() {
        // 渲染
        renderer.Render();
        // 将图像数据绘制到canvas上
        ctx.putImageData(imageData, 0, 0);
        // 请求下一帧动画
        requestAnimationFrame(render);
    }
    // 开始动画循环
    requestAnimationFrame(render);
});
},{"./Renderer":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
