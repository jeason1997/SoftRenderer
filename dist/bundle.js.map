{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@tweenjs/tween.js/dist/tween.cjs","node_modules/cannon/build/cannon.js","node_modules/reflect-metadata/Reflect.js","src/Component/BoxCollider.ts","src/Component/Camera.ts","src/Component/Collider.ts","src/Component/Component.ts","src/Component/Light.ts","src/Component/MeshRenderer.ts","src/Component/Renderer.ts","src/Component/RigidBody.ts","src/Component/SphereCollider.ts","src/Component/TestComp/CameraController.ts","src/Component/TestComp/ObjAutoRotate.ts","src/Component/TestComp/ObjRotate.ts","src/Core/Decorators.ts","src/Core/Engine.ts","src/Core/GameObject.ts","src/Core/Input.ts","src/Core/Setting.ts","src/Core/Time.ts","src/Core/Transform.ts","src/Core/TweenManager.ts","src/Core/UObject.ts","src/Math/BVHTree.ts","src/Math/Bounds.ts","src/Math/Color.ts","src/Math/Matrix4x4.ts","src/Math/Panel.ts","src/Math/Quaternion.ts","src/Math/Ray.ts","src/Math/TransformTools.ts","src/Math/Vector2.ts","src/Math/Vector3.ts","src/Math/Vector4.ts","src/Physics/Physics.ts","src/Physics/RaycastHit.ts","src/Renderer/BarycentricTriangleRasterizer.ts","src/Renderer/RasterizationPipeline.ts","src/Renderer/RendererDefine.ts","src/Renderer/TriangleRasterizer.ts","src/Resources/CubeMap.ts","src/Resources/Material.ts","src/Resources/Mesh.ts","src/Resources/Resources.ts","src/Resources/Texture.ts","src/Resources/TextureCreator.ts","src/Scene/MainScene.ts","src/Scene/Scene.ts","src/Scene/SceneManager.ts","src/Shader/LitShader.ts","src/Shader/Shader.ts","src/Shader/StencilOutlineShader.ts","src/Shader/ToonShader.ts","src/Shader/TransparentShader.ts","src/Utils/Debug.ts","src/Utils/Gizmo.ts","src/Utils/ObjParser.ts","src/index.ts"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC33CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACt3av4CA,2CAAwC;AACxC,6CAA0C;AAC1C,yCAAsC;AACtC,iDAA8C;AAM9C,MAAa,WAAY,SAAQ,mBAAQ;IAGrC,IAAW,IAAI;;QACX,OAAO,MAAA,IAAI,CAAC,KAAK,0C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C,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrF,MAAM;gBACN,IAAI,aAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrF,MAAM;gBACN,IAAI,aAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrF,MAAM;gBACN,IAAI,aAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC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,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * The Ease class provides a collection of easing functions for use with tween.js.\n */\nvar Easing = Object.freeze({\n    Linear: Object.freeze({\n        None: function (amount) {\n            return amount;\n        },\n        In: function (amount) {\n            return amount;\n        },\n        Out: function (amount) {\n            return amount;\n        },\n        InOut: function (amount) {\n            return amount;\n        },\n    }),\n    Quadratic: Object.freeze({\n        In: function (amount) {\n            return amount * amount;\n        },\n        Out: function (amount) {\n            return amount * (2 - amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount;\n            }\n            return -0.5 * (--amount * (amount - 2) - 1);\n        },\n    }),\n    Cubic: Object.freeze({\n        In: function (amount) {\n            return amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount + 2);\n        },\n    }),\n    Quartic: Object.freeze({\n        In: function (amount) {\n            return amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return 1 - --amount * amount * amount * amount;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount;\n            }\n            return -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n        },\n    }),\n    Quintic: Object.freeze({\n        In: function (amount) {\n            return amount * amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n        },\n    }),\n    Sinusoidal: Object.freeze({\n        In: function (amount) {\n            return 1 - Math.sin(((1.0 - amount) * Math.PI) / 2);\n        },\n        Out: function (amount) {\n            return Math.sin((amount * Math.PI) / 2);\n        },\n        InOut: function (amount) {\n            return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));\n        },\n    }),\n    Exponential: Object.freeze({\n        In: function (amount) {\n            return amount === 0 ? 0 : Math.pow(1024, amount - 1);\n        },\n        Out: function (amount) {\n            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            if ((amount *= 2) < 1) {\n                return 0.5 * Math.pow(1024, amount - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n        },\n    }),\n    Circular: Object.freeze({\n        In: function (amount) {\n            return 1 - Math.sqrt(1 - amount * amount);\n        },\n        Out: function (amount) {\n            return Math.sqrt(1 - --amount * amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n        },\n    }),\n    Elastic: Object.freeze({\n        In: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n        },\n        Out: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            amount *= 2;\n            if (amount < 1) {\n                return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n            }\n            return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n        },\n    }),\n    Back: Object.freeze({\n        In: function (amount) {\n            var s = 1.70158;\n            return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);\n        },\n        Out: function (amount) {\n            var s = 1.70158;\n            return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;\n        },\n        InOut: function (amount) {\n            var s = 1.70158 * 1.525;\n            if ((amount *= 2) < 1) {\n                return 0.5 * (amount * amount * ((s + 1) * amount - s));\n            }\n            return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n        },\n    }),\n    Bounce: Object.freeze({\n        In: function (amount) {\n            return 1 - Easing.Bounce.Out(1 - amount);\n        },\n        Out: function (amount) {\n            if (amount < 1 / 2.75) {\n                return 7.5625 * amount * amount;\n            }\n            else if (amount < 2 / 2.75) {\n                return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n            }\n            else if (amount < 2.5 / 2.75) {\n                return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n            }\n            else {\n                return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n            }\n        },\n        InOut: function (amount) {\n            if (amount < 0.5) {\n                return Easing.Bounce.In(amount * 2) * 0.5;\n            }\n            return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n        },\n    }),\n    generatePow: function (power) {\n        if (power === void 0) { power = 4; }\n        power = power < Number.EPSILON ? Number.EPSILON : power;\n        power = power > 10000 ? 10000 : power;\n        return {\n            In: function (amount) {\n                return Math.pow(amount, power);\n            },\n            Out: function (amount) {\n                return 1 - Math.pow((1 - amount), power);\n            },\n            InOut: function (amount) {\n                if (amount < 0.5) {\n                    return Math.pow((amount * 2), power) / 2;\n                }\n                return (1 - Math.pow((2 - amount * 2), power)) / 2 + 0.5;\n            },\n        };\n    },\n});\n\nvar now = function () { return performance.now(); };\n\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tween\n */\nvar Group = /** @class */ (function () {\n    function Group() {\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        this._tweens = {};\n        this._tweensAddedDuringUpdate = {};\n        this.add.apply(this, tweens);\n    }\n    Group.prototype.getAll = function () {\n        var _this = this;\n        return Object.keys(this._tweens).map(function (tweenId) { return _this._tweens[tweenId]; });\n    };\n    Group.prototype.removeAll = function () {\n        this._tweens = {};\n    };\n    Group.prototype.add = function () {\n        var _a;\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        for (var _b = 0, tweens_1 = tweens; _b < tweens_1.length; _b++) {\n            var tween = tweens_1[_b];\n            // Remove from any other group first, a tween can only be in one group at a time.\n            // @ts-expect-error library internal access\n            (_a = tween._group) === null || _a === void 0 ? void 0 : _a.remove(tween);\n            // @ts-expect-error library internal access\n            tween._group = this;\n            this._tweens[tween.getId()] = tween;\n            this._tweensAddedDuringUpdate[tween.getId()] = tween;\n        }\n    };\n    Group.prototype.remove = function () {\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        for (var _a = 0, tweens_2 = tweens; _a < tweens_2.length; _a++) {\n            var tween = tweens_2[_a];\n            // @ts-expect-error library internal access\n            tween._group = undefined;\n            delete this._tweens[tween.getId()];\n            delete this._tweensAddedDuringUpdate[tween.getId()];\n        }\n    };\n    /** Return true if all tweens in the group are not paused or playing. */\n    Group.prototype.allStopped = function () {\n        return this.getAll().every(function (tween) { return !tween.isPlaying(); });\n    };\n    Group.prototype.update = function (time, preserve) {\n        if (time === void 0) { time = now(); }\n        if (preserve === void 0) { preserve = true; }\n        var tweenIds = Object.keys(this._tweens);\n        if (tweenIds.length === 0)\n            return;\n        // Tweens are updated in \"batches\". If you add a new tween during an\n        // update, then the new tween will be updated in the next batch.\n        // If you remove a tween during an update, it may or may not be updated.\n        // However, if the removed tween was added during the current batch,\n        // then it will not be updated.\n        while (tweenIds.length > 0) {\n            this._tweensAddedDuringUpdate = {};\n            for (var i = 0; i < tweenIds.length; i++) {\n                var tween = this._tweens[tweenIds[i]];\n                var autoStart = !preserve;\n                if (tween && tween.update(time, autoStart) === false && !preserve)\n                    this.remove(tween);\n            }\n            tweenIds = Object.keys(this._tweensAddedDuringUpdate);\n        }\n    };\n    return Group;\n}());\n\n/**\n *\n */\nvar Interpolation = {\n    Linear: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.Linear;\n        if (k < 0) {\n            return fn(v[0], v[1], f);\n        }\n        if (k > 1) {\n            return fn(v[m], v[m - 1], m - f);\n        }\n        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n    },\n    Bezier: function (v, k) {\n        var b = 0;\n        var n = v.length - 1;\n        var pw = Math.pow;\n        var bn = Interpolation.Utils.Bernstein;\n        for (var i = 0; i <= n; i++) {\n            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n        }\n        return b;\n    },\n    CatmullRom: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.CatmullRom;\n        if (v[0] === v[m]) {\n            if (k < 0) {\n                i = Math.floor((f = m * (1 + k)));\n            }\n            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n        }\n        else {\n            if (k < 0) {\n                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n            }\n            if (k > 1) {\n                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n            }\n            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n        }\n    },\n    Utils: {\n        Linear: function (p0, p1, t) {\n            return (p1 - p0) * t + p0;\n        },\n        Bernstein: function (n, i) {\n            var fc = Interpolation.Utils.Factorial;\n            return fc(n) / fc(i) / fc(n - i);\n        },\n        Factorial: (function () {\n            var a = [1];\n            return function (n) {\n                var s = 1;\n                if (a[n]) {\n                    return a[n];\n                }\n                for (var i = n; i > 1; i--) {\n                    s *= i;\n                }\n                a[n] = s;\n                return s;\n            };\n        })(),\n        CatmullRom: function (p0, p1, p2, p3, t) {\n            var v0 = (p2 - p0) * 0.5;\n            var v1 = (p3 - p1) * 0.5;\n            var t2 = t * t;\n            var t3 = t * t2;\n            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n        },\n    },\n};\n\n/**\n * Utils\n */\nvar Sequence = /** @class */ (function () {\n    function Sequence() {\n    }\n    Sequence.nextId = function () {\n        return Sequence._nextId++;\n    };\n    Sequence._nextId = 0;\n    return Sequence;\n}());\n\nvar mainGroup = new Group();\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar Tween = /** @class */ (function () {\n    function Tween(object, group) {\n        this._isPaused = false;\n        this._pauseStart = 0;\n        this._valuesStart = {};\n        this._valuesEnd = {};\n        this._valuesStartRepeat = {};\n        this._duration = 1000;\n        this._isDynamic = false;\n        this._initialRepeat = 0;\n        this._repeat = 0;\n        this._yoyo = false;\n        this._isPlaying = false;\n        this._reversed = false;\n        this._delayTime = 0;\n        this._startTime = 0;\n        this._easingFunction = Easing.Linear.None;\n        this._interpolationFunction = Interpolation.Linear;\n        // eslint-disable-next-line\n        this._chainedTweens = [];\n        this._onStartCallbackFired = false;\n        this._onEveryStartCallbackFired = false;\n        this._id = Sequence.nextId();\n        this._isChainStopped = false;\n        this._propertiesAreSetUp = false;\n        this._goToEnd = false;\n        this._object = object;\n        if (typeof group === 'object') {\n            this._group = group;\n            group.add(this);\n        }\n        // Use \"true\" to restore old behavior (will be removed in future release).\n        else if (group === true) {\n            this._group = mainGroup;\n            mainGroup.add(this);\n        }\n    }\n    Tween.prototype.getId = function () {\n        return this._id;\n    };\n    Tween.prototype.isPlaying = function () {\n        return this._isPlaying;\n    };\n    Tween.prototype.isPaused = function () {\n        return this._isPaused;\n    };\n    Tween.prototype.getDuration = function () {\n        return this._duration;\n    };\n    Tween.prototype.to = function (target, duration) {\n        if (duration === void 0) { duration = 1000; }\n        if (this._isPlaying)\n            throw new Error('Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.');\n        this._valuesEnd = target;\n        this._propertiesAreSetUp = false;\n        this._duration = duration < 0 ? 0 : duration;\n        return this;\n    };\n    Tween.prototype.duration = function (duration) {\n        if (duration === void 0) { duration = 1000; }\n        this._duration = duration < 0 ? 0 : duration;\n        return this;\n    };\n    Tween.prototype.dynamic = function (dynamic) {\n        if (dynamic === void 0) { dynamic = false; }\n        this._isDynamic = dynamic;\n        return this;\n    };\n    Tween.prototype.start = function (time, overrideStartingValues) {\n        if (time === void 0) { time = now(); }\n        if (overrideStartingValues === void 0) { overrideStartingValues = false; }\n        if (this._isPlaying) {\n            return this;\n        }\n        this._repeat = this._initialRepeat;\n        if (this._reversed) {\n            // If we were reversed (f.e. using the yoyo feature) then we need to\n            // flip the tween direction back to forward.\n            this._reversed = false;\n            for (var property in this._valuesStartRepeat) {\n                this._swapEndStartRepeatValues(property);\n                this._valuesStart[property] = this._valuesStartRepeat[property];\n            }\n        }\n        this._isPlaying = true;\n        this._isPaused = false;\n        this._onStartCallbackFired = false;\n        this._onEveryStartCallbackFired = false;\n        this._isChainStopped = false;\n        this._startTime = time;\n        this._startTime += this._delayTime;\n        if (!this._propertiesAreSetUp || overrideStartingValues) {\n            this._propertiesAreSetUp = true;\n            // If dynamic is not enabled, clone the end values instead of using the passed-in end values.\n            if (!this._isDynamic) {\n                var tmp = {};\n                for (var prop in this._valuesEnd)\n                    tmp[prop] = this._valuesEnd[prop];\n                this._valuesEnd = tmp;\n            }\n            this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, overrideStartingValues);\n        }\n        return this;\n    };\n    Tween.prototype.startFromCurrentValues = function (time) {\n        return this.start(time, true);\n    };\n    Tween.prototype._setupProperties = function (_object, _valuesStart, _valuesEnd, _valuesStartRepeat, overrideStartingValues) {\n        for (var property in _valuesEnd) {\n            var startValue = _object[property];\n            var startValueIsArray = Array.isArray(startValue);\n            var propType = startValueIsArray ? 'array' : typeof startValue;\n            var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n            // If `to()` specifies a property that doesn't exist in the source object,\n            // we should not set that property in the object\n            if (propType === 'undefined' || propType === 'function') {\n                continue;\n            }\n            // Check if an Array was provided as property value\n            if (isInterpolationList) {\n                var endValues = _valuesEnd[property];\n                if (endValues.length === 0) {\n                    continue;\n                }\n                // Handle an array of relative values.\n                // Creates a local copy of the Array with the start value at the front\n                var temp = [startValue];\n                for (var i = 0, l = endValues.length; i < l; i += 1) {\n                    var value = this._handleRelativeValue(startValue, endValues[i]);\n                    if (isNaN(value)) {\n                        isInterpolationList = false;\n                        console.warn('Found invalid interpolation list. Skipping.');\n                        break;\n                    }\n                    temp.push(value);\n                }\n                if (isInterpolationList) {\n                    // if (_valuesStart[property] === undefined) { // handle end values only the first time. NOT NEEDED? setupProperties is now guarded by _propertiesAreSetUp.\n                    _valuesEnd[property] = temp;\n                    // }\n                }\n            }\n            // handle the deepness of the values\n            if ((propType === 'object' || startValueIsArray) && startValue && !isInterpolationList) {\n                _valuesStart[property] = startValueIsArray ? [] : {};\n                var nestedObject = startValue;\n                for (var prop in nestedObject) {\n                    _valuesStart[property][prop] = nestedObject[prop];\n                }\n                // TODO? repeat nested values? And yoyo? And array values?\n                _valuesStartRepeat[property] = startValueIsArray ? [] : {};\n                var endValues = _valuesEnd[property];\n                // If dynamic is not enabled, clone the end values instead of using the passed-in end values.\n                if (!this._isDynamic) {\n                    var tmp = {};\n                    for (var prop in endValues)\n                        tmp[prop] = endValues[prop];\n                    _valuesEnd[property] = endValues = tmp;\n                }\n                this._setupProperties(nestedObject, _valuesStart[property], endValues, _valuesStartRepeat[property], overrideStartingValues);\n            }\n            else {\n                // Save the starting value, but only once unless override is requested.\n                if (typeof _valuesStart[property] === 'undefined' || overrideStartingValues) {\n                    _valuesStart[property] = startValue;\n                }\n                if (!startValueIsArray) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n                }\n                if (isInterpolationList) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();\n                }\n                else {\n                    _valuesStartRepeat[property] = _valuesStart[property] || 0;\n                }\n            }\n        }\n    };\n    Tween.prototype.stop = function () {\n        if (!this._isChainStopped) {\n            this._isChainStopped = true;\n            this.stopChainedTweens();\n        }\n        if (!this._isPlaying) {\n            return this;\n        }\n        this._isPlaying = false;\n        this._isPaused = false;\n        if (this._onStopCallback) {\n            this._onStopCallback(this._object);\n        }\n        return this;\n    };\n    Tween.prototype.end = function () {\n        this._goToEnd = true;\n        this.update(this._startTime + this._duration);\n        return this;\n    };\n    Tween.prototype.pause = function (time) {\n        if (time === void 0) { time = now(); }\n        if (this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = true;\n        this._pauseStart = time;\n        return this;\n    };\n    Tween.prototype.resume = function (time) {\n        if (time === void 0) { time = now(); }\n        if (!this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = false;\n        this._startTime += time - this._pauseStart;\n        this._pauseStart = 0;\n        return this;\n    };\n    Tween.prototype.stopChainedTweens = function () {\n        for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n            this._chainedTweens[i].stop();\n        }\n        return this;\n    };\n    Tween.prototype.group = function (group) {\n        if (!group) {\n            console.warn('tween.group() without args has been removed, use group.add(tween) instead.');\n            return this;\n        }\n        group.add(this);\n        return this;\n    };\n    /**\n     * Removes the tween from whichever group it is in.\n     */\n    Tween.prototype.remove = function () {\n        var _a;\n        (_a = this._group) === null || _a === void 0 ? void 0 : _a.remove(this);\n        return this;\n    };\n    Tween.prototype.delay = function (amount) {\n        if (amount === void 0) { amount = 0; }\n        this._delayTime = amount;\n        return this;\n    };\n    Tween.prototype.repeat = function (times) {\n        if (times === void 0) { times = 0; }\n        this._initialRepeat = times;\n        this._repeat = times;\n        return this;\n    };\n    Tween.prototype.repeatDelay = function (amount) {\n        this._repeatDelayTime = amount;\n        return this;\n    };\n    Tween.prototype.yoyo = function (yoyo) {\n        if (yoyo === void 0) { yoyo = false; }\n        this._yoyo = yoyo;\n        return this;\n    };\n    Tween.prototype.easing = function (easingFunction) {\n        if (easingFunction === void 0) { easingFunction = Easing.Linear.None; }\n        this._easingFunction = easingFunction;\n        return this;\n    };\n    Tween.prototype.interpolation = function (interpolationFunction) {\n        if (interpolationFunction === void 0) { interpolationFunction = Interpolation.Linear; }\n        this._interpolationFunction = interpolationFunction;\n        return this;\n    };\n    // eslint-disable-next-line\n    Tween.prototype.chain = function () {\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        this._chainedTweens = tweens;\n        return this;\n    };\n    Tween.prototype.onStart = function (callback) {\n        this._onStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onEveryStart = function (callback) {\n        this._onEveryStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onUpdate = function (callback) {\n        this._onUpdateCallback = callback;\n        return this;\n    };\n    Tween.prototype.onRepeat = function (callback) {\n        this._onRepeatCallback = callback;\n        return this;\n    };\n    Tween.prototype.onComplete = function (callback) {\n        this._onCompleteCallback = callback;\n        return this;\n    };\n    Tween.prototype.onStop = function (callback) {\n        this._onStopCallback = callback;\n        return this;\n    };\n    /**\n     * @returns true if the tween is still playing after the update, false\n     * otherwise (calling update on a paused tween still returns true because\n     * it is still playing, just paused).\n     *\n     * @param autoStart - When true, calling update will implicitly call start()\n     * as well. Note, if you stop() or end() the tween, but are still calling\n     * update(), it will start again!\n     */\n    Tween.prototype.update = function (time, autoStart) {\n        var _this = this;\n        var _a;\n        if (time === void 0) { time = now(); }\n        if (autoStart === void 0) { autoStart = Tween.autoStartOnUpdate; }\n        if (this._isPaused)\n            return true;\n        var property;\n        if (!this._goToEnd && !this._isPlaying) {\n            if (autoStart)\n                this.start(time, true);\n            else\n                return false;\n        }\n        this._goToEnd = false;\n        if (time < this._startTime) {\n            return true;\n        }\n        if (this._onStartCallbackFired === false) {\n            if (this._onStartCallback) {\n                this._onStartCallback(this._object);\n            }\n            this._onStartCallbackFired = true;\n        }\n        if (this._onEveryStartCallbackFired === false) {\n            if (this._onEveryStartCallback) {\n                this._onEveryStartCallback(this._object);\n            }\n            this._onEveryStartCallbackFired = true;\n        }\n        var elapsedTime = time - this._startTime;\n        var durationAndDelay = this._duration + ((_a = this._repeatDelayTime) !== null && _a !== void 0 ? _a : this._delayTime);\n        var totalTime = this._duration + this._repeat * durationAndDelay;\n        var calculateElapsedPortion = function () {\n            if (_this._duration === 0)\n                return 1;\n            if (elapsedTime > totalTime) {\n                return 1;\n            }\n            var timesRepeated = Math.trunc(elapsedTime / durationAndDelay);\n            var timeIntoCurrentRepeat = elapsedTime - timesRepeated * durationAndDelay;\n            // TODO use %?\n            // const timeIntoCurrentRepeat = elapsedTime % durationAndDelay\n            var portion = Math.min(timeIntoCurrentRepeat / _this._duration, 1);\n            if (portion === 0 && elapsedTime === _this._duration) {\n                return 1;\n            }\n            return portion;\n        };\n        var elapsed = calculateElapsedPortion();\n        var value = this._easingFunction(elapsed);\n        // properties transformations\n        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n        if (this._onUpdateCallback) {\n            this._onUpdateCallback(this._object, elapsed);\n        }\n        if (this._duration === 0 || elapsedTime >= this._duration) {\n            if (this._repeat > 0) {\n                var completeCount = Math.min(Math.trunc((elapsedTime - this._duration) / durationAndDelay) + 1, this._repeat);\n                if (isFinite(this._repeat)) {\n                    this._repeat -= completeCount;\n                }\n                // Reassign starting values, restart by making startTime = now\n                for (property in this._valuesStartRepeat) {\n                    if (!this._yoyo && typeof this._valuesEnd[property] === 'string') {\n                        this._valuesStartRepeat[property] =\n                            // eslint-disable-next-line\n                            // @ts-ignore FIXME?\n                            this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);\n                    }\n                    if (this._yoyo) {\n                        this._swapEndStartRepeatValues(property);\n                    }\n                    this._valuesStart[property] = this._valuesStartRepeat[property];\n                }\n                if (this._yoyo) {\n                    this._reversed = !this._reversed;\n                }\n                this._startTime += durationAndDelay * completeCount;\n                if (this._onRepeatCallback) {\n                    this._onRepeatCallback(this._object);\n                }\n                this._onEveryStartCallbackFired = false;\n                return true;\n            }\n            else {\n                if (this._onCompleteCallback) {\n                    this._onCompleteCallback(this._object);\n                }\n                for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n                    // Make the chained tweens start exactly at the time they should,\n                    // even if the `update()` method was called way past the duration of the tween\n                    this._chainedTweens[i].start(this._startTime + this._duration, false);\n                }\n                this._isPlaying = false;\n                return false;\n            }\n        }\n        return true;\n    };\n    Tween.prototype._updateProperties = function (_object, _valuesStart, _valuesEnd, value) {\n        for (var property in _valuesEnd) {\n            // Don't update properties that do not exist in the source object\n            if (_valuesStart[property] === undefined) {\n                continue;\n            }\n            var start = _valuesStart[property] || 0;\n            var end = _valuesEnd[property];\n            var startIsArray = Array.isArray(_object[property]);\n            var endIsArray = Array.isArray(end);\n            var isInterpolationList = !startIsArray && endIsArray;\n            if (isInterpolationList) {\n                _object[property] = this._interpolationFunction(end, value);\n            }\n            else if (typeof end === 'object' && end) {\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._updateProperties(_object[property], start, end, value);\n            }\n            else {\n                // Parses relative end values with start as base (e.g.: +10, -3)\n                end = this._handleRelativeValue(start, end);\n                // Protect against non numeric properties.\n                if (typeof end === 'number') {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _object[property] = start + (end - start) * value;\n                }\n            }\n        }\n    };\n    Tween.prototype._handleRelativeValue = function (start, end) {\n        if (typeof end !== 'string') {\n            return end;\n        }\n        if (end.charAt(0) === '+' || end.charAt(0) === '-') {\n            return start + parseFloat(end);\n        }\n        return parseFloat(end);\n    };\n    Tween.prototype._swapEndStartRepeatValues = function (property) {\n        var tmp = this._valuesStartRepeat[property];\n        var endValue = this._valuesEnd[property];\n        if (typeof endValue === 'string') {\n            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);\n        }\n        else {\n            this._valuesStartRepeat[property] = this._valuesEnd[property];\n        }\n        this._valuesEnd[property] = tmp;\n    };\n    Tween.autoStartOnUpdate = false;\n    return Tween;\n}());\n\nvar VERSION = '25.0.0';\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar nextId = Sequence.nextId;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tweens.\n */\nvar TWEEN = mainGroup;\n// This is the best way to export things in a way that's compatible with both ES\n// Modules and CommonJS, without build hacks, and so as not to break the\n// existing API.\n// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar getAll = TWEEN.getAll.bind(TWEEN);\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar removeAll = TWEEN.removeAll.bind(TWEEN);\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar add = TWEEN.add.bind(TWEEN);\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar remove = TWEEN.remove.bind(TWEEN);\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar update = TWEEN.update.bind(TWEEN);\nvar exports$1 = {\n    Easing: Easing,\n    Group: Group,\n    Interpolation: Interpolation,\n    now: now,\n    Sequence: Sequence,\n    nextId: nextId,\n    Tween: Tween,\n    VERSION: VERSION,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    getAll: getAll,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    removeAll: removeAll,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    add: add,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    remove: remove,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    update: update,\n};\n\nexports.Easing = Easing;\nexports.Group = Group;\nexports.Interpolation = Interpolation;\nexports.Sequence = Sequence;\nexports.Tween = Tween;\nexports.VERSION = VERSION;\nexports.add = add;\nexports.default = exports$1;\nexports.getAll = getAll;\nexports.nextId = nextId;\nexports.now = now;\nexports.remove = remove;\nexports.removeAll = removeAll;\nexports.update = update;\n","/*\n * Copyright (c) 2015 cannon.js Authors\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use, copy,\n * modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&false)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.CANNON=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\nmodule.exports={\n  \"name\": \"cannon\",\n  \"version\": \"0.6.2\",\n  \"description\": \"A lightweight 3D physics engine written in JavaScript.\",\n  \"homepage\": \"https://github.com/schteppe/cannon.js\",\n  \"author\": \"Stefan Hedman <schteppe@gmail.com> (http://steffe.se)\",\n  \"keywords\": [\n    \"cannon.js\",\n    \"cannon\",\n    \"physics\",\n    \"engine\",\n    \"3d\"\n  ],\n  \"main\": \"./build/cannon.js\",\n  \"engines\": {\n    \"node\": \"*\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/schteppe/cannon.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/schteppe/cannon.js/issues\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\"\n    }\n  ],\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"uglify-js\": \"latest\",\n    \"nodeunit\": \"^0.9.0\",\n    \"grunt\": \"~0.4.0\",\n    \"grunt-contrib-jshint\": \"~0.1.1\",\n    \"grunt-contrib-nodeunit\": \"^0.4.1\",\n    \"grunt-contrib-concat\": \"~0.1.3\",\n    \"grunt-contrib-uglify\": \"^0.5.1\",\n    \"grunt-browserify\": \"^2.1.4\",\n    \"grunt-contrib-yuidoc\": \"^0.5.2\",\n    \"browserify\": \"*\"\n  },\n  \"dependencies\": {}\n}\n\n},{}],2:[function(_dereq_,module,exports){\n// Export classes\nmodule.exports = {\n    version :                       _dereq_('../package.json').version,\n\n    AABB :                          _dereq_('./collision/AABB'),\n    ArrayCollisionMatrix :          _dereq_('./collision/ArrayCollisionMatrix'),\n    Body :                          _dereq_('./objects/Body'),\n    Box :                           _dereq_('./shapes/Box'),\n    Broadphase :                    _dereq_('./collision/Broadphase'),\n    Constraint :                    _dereq_('./constraints/Constraint'),\n    ContactEquation :               _dereq_('./equations/ContactEquation'),\n    Narrowphase :                   _dereq_('./world/Narrowphase'),\n    ConeTwistConstraint :           _dereq_('./constraints/ConeTwistConstraint'),\n    ContactMaterial :               _dereq_('./material/ContactMaterial'),\n    ConvexPolyhedron :              _dereq_('./shapes/ConvexPolyhedron'),\n    Cylinder :                      _dereq_('./shapes/Cylinder'),\n    DistanceConstraint :            _dereq_('./constraints/DistanceConstraint'),\n    Equation :                      _dereq_('./equations/Equation'),\n    EventTarget :                   _dereq_('./utils/EventTarget'),\n    FrictionEquation :              _dereq_('./equations/FrictionEquation'),\n    GSSolver :                      _dereq_('./solver/GSSolver'),\n    GridBroadphase :                _dereq_('./collision/GridBroadphase'),\n    Heightfield :                   _dereq_('./shapes/Heightfield'),\n    HingeConstraint :               _dereq_('./constraints/HingeConstraint'),\n    LockConstraint :                _dereq_('./constraints/LockConstraint'),\n    Mat3 :                          _dereq_('./math/Mat3'),\n    Material :                      _dereq_('./material/Material'),\n    NaiveBroadphase :               _dereq_('./collision/NaiveBroadphase'),\n    ObjectCollisionMatrix :         _dereq_('./collision/ObjectCollisionMatrix'),\n    Pool :                          _dereq_('./utils/Pool'),\n    Particle :                      _dereq_('./shapes/Particle'),\n    Plane :                         _dereq_('./shapes/Plane'),\n    PointToPointConstraint :        _dereq_('./constraints/PointToPointConstraint'),\n    Quaternion :                    _dereq_('./math/Quaternion'),\n    Ray :                           _dereq_('./collision/Ray'),\n    RaycastVehicle :                _dereq_('./objects/RaycastVehicle'),\n    RaycastResult :                 _dereq_('./collision/RaycastResult'),\n    RigidVehicle :                  _dereq_('./objects/RigidVehicle'),\n    RotationalEquation :            _dereq_('./equations/RotationalEquation'),\n    RotationalMotorEquation :       _dereq_('./equations/RotationalMotorEquation'),\n    SAPBroadphase :                 _dereq_('./collision/SAPBroadphase'),\n    SPHSystem :                     _dereq_('./objects/SPHSystem'),\n    Shape :                         _dereq_('./shapes/Shape'),\n    Solver :                        _dereq_('./solver/Solver'),\n    Sphere :                        _dereq_('./shapes/Sphere'),\n    SplitSolver :                   _dereq_('./solver/SplitSolver'),\n    Spring :                        _dereq_('./objects/Spring'),\n    Trimesh :                       _dereq_('./shapes/Trimesh'),\n    Vec3 :                          _dereq_('./math/Vec3'),\n    Vec3Pool :                      _dereq_('./utils/Vec3Pool'),\n    World :                         _dereq_('./world/World'),\n};\n\n},{\"../package.json\":1,\"./collision/AABB\":3,\"./collision/ArrayCollisionMatrix\":4,\"./collision/Broadphase\":5,\"./collision/GridBroadphase\":6,\"./collision/NaiveBroadphase\":7,\"./collision/ObjectCollisionMatrix\":8,\"./collision/Ray\":9,\"./collision/RaycastResult\":10,\"./collision/SAPBroadphase\":11,\"./constraints/ConeTwistConstraint\":12,\"./constraints/Constraint\":13,\"./constraints/DistanceConstraint\":14,\"./constraints/HingeConstraint\":15,\"./constraints/LockConstraint\":16,\"./constraints/PointToPointConstraint\":17,\"./equations/ContactEquation\":19,\"./equations/Equation\":20,\"./equations/FrictionEquation\":21,\"./equations/RotationalEquation\":22,\"./equations/RotationalMotorEquation\":23,\"./material/ContactMaterial\":24,\"./material/Material\":25,\"./math/Mat3\":27,\"./math/Quaternion\":28,\"./math/Vec3\":30,\"./objects/Body\":31,\"./objects/RaycastVehicle\":32,\"./objects/RigidVehicle\":33,\"./objects/SPHSystem\":34,\"./objects/Spring\":35,\"./shapes/Box\":37,\"./shapes/ConvexPolyhedron\":38,\"./shapes/Cylinder\":39,\"./shapes/Heightfield\":40,\"./shapes/Particle\":41,\"./shapes/Plane\":42,\"./shapes/Shape\":43,\"./shapes/Sphere\":44,\"./shapes/Trimesh\":45,\"./solver/GSSolver\":46,\"./solver/Solver\":47,\"./solver/SplitSolver\":48,\"./utils/EventTarget\":49,\"./utils/Pool\":51,\"./utils/Vec3Pool\":54,\"./world/Narrowphase\":55,\"./world/World\":56}],3:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = AABB;\n\n/**\n * Axis aligned bounding box class.\n * @class AABB\n * @constructor\n * @param {Object} [options]\n * @param {Vec3}   [options.upperBound]\n * @param {Vec3}   [options.lowerBound]\n */\nfunction AABB(options){\n    options = options || {};\n\n    /**\n     * The lower bound of the bounding box.\n     * @property lowerBound\n     * @type {Vec3}\n     */\n    this.lowerBound = new Vec3();\n    if(options.lowerBound){\n        this.lowerBound.copy(options.lowerBound);\n    }\n\n    /**\n     * The upper bound of the bounding box.\n     * @property upperBound\n     * @type {Vec3}\n     */\n    this.upperBound = new Vec3();\n    if(options.upperBound){\n        this.upperBound.copy(options.upperBound);\n    }\n}\n\nvar tmp = new Vec3();\n\n/**\n * Set the AABB bounds from a set of points.\n * @method setFromPoints\n * @param {Array} points An array of Vec3's.\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {number} skinSize\n * @return {AABB} The self object\n */\nAABB.prototype.setFromPoints = function(points, position, quaternion, skinSize){\n    var l = this.lowerBound,\n        u = this.upperBound,\n        q = quaternion;\n\n    // Set to the first point\n    l.copy(points[0]);\n    if(q){\n        q.vmult(l, l);\n    }\n    u.copy(l);\n\n    for(var i = 1; i<points.length; i++){\n        var p = points[i];\n\n        if(q){\n            q.vmult(p, tmp);\n            p = tmp;\n        }\n\n        if(p.x > u.x){ u.x = p.x; }\n        if(p.x < l.x){ l.x = p.x; }\n        if(p.y > u.y){ u.y = p.y; }\n        if(p.y < l.y){ l.y = p.y; }\n        if(p.z > u.z){ u.z = p.z; }\n        if(p.z < l.z){ l.z = p.z; }\n    }\n\n    // Add offset\n    if (position) {\n        position.vadd(l, l);\n        position.vadd(u, u);\n    }\n\n    if(skinSize){\n        l.x -= skinSize;\n        l.y -= skinSize;\n        l.z -= skinSize;\n        u.x += skinSize;\n        u.y += skinSize;\n        u.z += skinSize;\n    }\n\n    return this;\n};\n\n/**\n * Copy bounds from an AABB to this AABB\n * @method copy\n * @param  {AABB} aabb Source to copy from\n * @return {AABB} The this object, for chainability\n */\nAABB.prototype.copy = function(aabb){\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n};\n\n/**\n * Clone an AABB\n * @method clone\n */\nAABB.prototype.clone = function(){\n    return new AABB().copy(this);\n};\n\n/**\n * Extend this AABB so that it covers the given AABB too.\n * @method extend\n * @param  {AABB} aabb\n */\nAABB.prototype.extend = function(aabb){\n    // Extend lower bound\n    var l = aabb.lowerBound.x;\n    if(this.lowerBound.x > l){\n        this.lowerBound.x = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.x;\n    if(this.upperBound.x < u){\n        this.upperBound.x = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.y;\n    if(this.lowerBound.y > l){\n        this.lowerBound.y = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.y;\n    if(this.upperBound.y < u){\n        this.upperBound.y = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.z;\n    if(this.lowerBound.z > l){\n        this.lowerBound.z = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.z;\n    if(this.upperBound.z < u){\n        this.upperBound.z = u;\n    }\n};\n\n/**\n * Returns true if the given AABB overlaps this AABB.\n * @method overlaps\n * @param  {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.overlaps = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    return ((l2.x <= u1.x && u1.x <= u2.x) || (l1.x <= u2.x && u2.x <= u1.x)) &&\n           ((l2.y <= u1.y && u1.y <= u2.y) || (l1.y <= u2.y && u2.y <= u1.y)) &&\n           ((l2.z <= u1.z && u1.z <= u2.z) || (l1.z <= u2.z && u2.z <= u1.z));\n};\n\n/**\n * Returns true if the given AABB is fully contained in this AABB.\n * @method contains\n * @param {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.contains = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return (\n        (l1.x <= l2.x && u1.x >= u2.x) &&\n        (l1.y <= l2.y && u1.y >= u2.y) &&\n        (l1.z <= l2.z && u1.z >= u2.z)\n    );\n};\n\n/**\n * @method getCorners\n * @param {Vec3} a\n * @param {Vec3} b\n * @param {Vec3} c\n * @param {Vec3} d\n * @param {Vec3} e\n * @param {Vec3} f\n * @param {Vec3} g\n * @param {Vec3} h\n */\nAABB.prototype.getCorners = function(a, b, c, d, e, f, g, h){\n    var l = this.lowerBound,\n        u = this.upperBound;\n\n    a.copy(l);\n    b.set( u.x, l.y, l.z );\n    c.set( u.x, u.y, l.z );\n    d.set( l.x, u.y, u.z );\n    e.set( u.x, l.y, l.z );\n    f.set( l.x, u.y, l.z );\n    g.set( l.x, l.y, u.z );\n    h.copy(u);\n};\n\nvar transformIntoFrame_corners = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\n\n/**\n * Get the representation of an AABB in another frame.\n * @method toLocalFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toLocalFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n/**\n * Get the representation of an AABB in the global frame.\n * @method toWorldFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toWorldFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n},{\"../math/Vec3\":30,\"../utils/Utils\":53}],4:[function(_dereq_,module,exports){\nmodule.exports = ArrayCollisionMatrix;\n\n/**\n * Collision \"matrix\". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n * @class ArrayCollisionMatrix\n * @constructor\n */\nfunction ArrayCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Array}\n     */\n\tthis.matrix = [];\n}\n\n/**\n * Get an element\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nArrayCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn this.matrix[(i*(i + 1)>>1) + j-1];\n};\n\n/**\n * Set an element\n * @method set\n * @param {Number} i\n * @param {Number} j\n * @param {Number} value\n */\nArrayCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\tthis.matrix[(i*(i + 1)>>1) + j-1] = value ? 1 : 0;\n};\n\n/**\n * Sets all elements to zero\n * @method reset\n */\nArrayCollisionMatrix.prototype.reset = function() {\n\tfor (var i=0, l=this.matrix.length; i!==l; i++) {\n\t\tthis.matrix[i]=0;\n\t}\n};\n\n/**\n * Sets the max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nArrayCollisionMatrix.prototype.setNumObjects = function(n) {\n\tthis.matrix.length = n*(n-1)>>1;\n};\n\n},{}],5:[function(_dereq_,module,exports){\nvar Body = _dereq_('../objects/Body');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Shape = _dereq_('../shapes/Shape');\nvar Plane = _dereq_('../shapes/Plane');\n\nmodule.exports = Broadphase;\n\n/**\n * Base class for broadphase implementations\n * @class Broadphase\n * @constructor\n * @author schteppe\n */\nfunction Broadphase(){\n    /**\n    * The world to search for collisions in.\n    * @property world\n    * @type {World}\n    */\n    this.world = null;\n\n    /**\n     * If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.\n     * @property useBoundingBoxes\n     * @type {Boolean}\n     */\n    this.useBoundingBoxes = false;\n\n    /**\n     * Set to true if the objects in the world moved.\n     * @property {Boolean} dirty\n     */\n    this.dirty = true;\n}\n\n/**\n * Get the collision pairs from the world\n * @method collisionPairs\n * @param {World} world The world to search in\n * @param {Array} p1 Empty array to be filled with body objects\n * @param {Array} p2 Empty array to be filled with body objects\n */\nBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    throw new Error(\"collisionPairs not implemented for this BroadPhase class!\");\n};\n\n/**\n * Check if a body pair needs to be intersection tested at all.\n * @method needBroadphaseCollision\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {bool}\n */\nvar Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC = Body.STATIC | Body.KINEMATIC;\nBroadphase.prototype.needBroadphaseCollision = function(bodyA,bodyB){\n\n    // Check collision filter masks\n    if( (bodyA.collisionFilterGroup & bodyB.collisionFilterMask)===0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask)===0){\n        return false;\n    }\n\n    // Check types\n    if(((bodyA.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyA.sleepState === Body.SLEEPING) &&\n       ((bodyB.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyB.sleepState === Body.SLEEPING)) {\n        // Both bodies are static, kinematic or sleeping. Skip.\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Check if the bounding volumes of two bodies intersect.\n * @method intersectionTest\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {array} pairs1\n * @param {array} pairs2\n  */\nBroadphase.prototype.intersectionTest = function(bodyA, bodyB, pairs1, pairs2){\n    if(this.useBoundingBoxes){\n        this.doBoundingBoxBroadphase(bodyA,bodyB,pairs1,pairs2);\n    } else {\n        this.doBoundingSphereBroadphase(bodyA,bodyB,pairs1,pairs2);\n    }\n};\n\n/**\n * Check if the bounding spheres of two bodies are intersecting.\n * @method doBoundingSphereBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1 bodyA is appended to this array if intersection\n * @param {Array} pairs2 bodyB is appended to this array if intersection\n */\nvar Broadphase_collisionPairs_r = new Vec3(), // Temp objects\n    Broadphase_collisionPairs_normal =  new Vec3(),\n    Broadphase_collisionPairs_quat =  new Quaternion(),\n    Broadphase_collisionPairs_relpos  =  new Vec3();\nBroadphase.prototype.doBoundingSphereBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    var r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position,r);\n    var boundingRadiusSum2 = Math.pow(bodyA.boundingRadius + bodyB.boundingRadius, 2);\n    var norm2 = r.norm2();\n    if(norm2 < boundingRadiusSum2){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Check if the bounding boxes of two bodies are intersecting.\n * @method doBoundingBoxBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nBroadphase.prototype.doBoundingBoxBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    if(bodyA.aabbNeedsUpdate){\n        bodyA.computeAABB();\n    }\n    if(bodyB.aabbNeedsUpdate){\n        bodyB.computeAABB();\n    }\n\n    // Check AABB / AABB\n    if(bodyA.aabb.overlaps(bodyB.aabb)){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Removes duplicate pairs from the pair arrays.\n * @method makePairsUnique\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar Broadphase_makePairsUnique_temp = { keys:[] },\n    Broadphase_makePairsUnique_p1 = [],\n    Broadphase_makePairsUnique_p2 = [];\nBroadphase.prototype.makePairsUnique = function(pairs1,pairs2){\n    var t = Broadphase_makePairsUnique_temp,\n        p1 = Broadphase_makePairsUnique_p1,\n        p2 = Broadphase_makePairsUnique_p2,\n        N = pairs1.length;\n\n    for(var i=0; i!==N; i++){\n        p1[i] = pairs1[i];\n        p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for(var i=0; i!==N; i++){\n        var id1 = p1[i].id,\n            id2 = p2[i].id;\n        var key = id1 < id2 ? id1+\",\"+id2 :  id2+\",\"+id1;\n        t[key] = i;\n        t.keys.push(key);\n    }\n\n    for(var i=0; i!==t.keys.length; i++){\n        var key = t.keys.pop(),\n            pairIndex = t[key];\n        pairs1.push(p1[pairIndex]);\n        pairs2.push(p2[pairIndex]);\n        delete t[key];\n    }\n};\n\n/**\n * To be implemented by subcasses\n * @method setWorld\n * @param {World} world\n */\nBroadphase.prototype.setWorld = function(world){\n};\n\n/**\n * Check if the bounding spheres of two bodies overlap.\n * @method boundingSphereCheck\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {boolean}\n */\nvar bsc_dist = new Vec3();\nBroadphase.boundingSphereCheck = function(bodyA,bodyB){\n    var dist = bsc_dist;\n    bodyA.position.vsub(bodyB.position,dist);\n    return Math.pow(bodyA.shape.boundingSphereRadius + bodyB.shape.boundingSphereRadius,2) > dist.norm2();\n};\n\n/**\n * Returns all the bodies within the AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param  {array} result An array to store resulting bodies in.\n * @return {array}\n */\nBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n};\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Plane\":42,\"../shapes/Shape\":43}],6:[function(_dereq_,module,exports){\nmodule.exports = GridBroadphase;\n\nvar Broadphase = _dereq_('./Broadphase');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Shape = _dereq_('../shapes/Shape');\n\n/**\n * Axis aligned uniform grid broadphase.\n * @class GridBroadphase\n * @constructor\n * @extends Broadphase\n * @todo Needs support for more than just planes and spheres.\n * @param {Vec3} aabbMin\n * @param {Vec3} aabbMax\n * @param {Number} nx Number of boxes along x\n * @param {Number} ny Number of boxes along y\n * @param {Number} nz Number of boxes along z\n */\nfunction GridBroadphase(aabbMin,aabbMax,nx,ny,nz){\n    Broadphase.apply(this);\n    this.nx = nx || 10;\n    this.ny = ny || 10;\n    this.nz = nz || 10;\n    this.aabbMin = aabbMin || new Vec3(100,100,100);\n    this.aabbMax = aabbMax || new Vec3(-100,-100,-100);\n\tvar nbins = this.nx * this.ny * this.nz;\n\tif (nbins <= 0) {\n\t\tthrow \"GridBroadphase: Each dimension's n must be >0\";\n\t}\n    this.bins = [];\n\tthis.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\tthis.bins.length = nbins;\n\tthis.binLengths.length = nbins;\n\tfor (var i=0;i<nbins;i++) {\n\t\tthis.bins[i]=[];\n\t\tthis.binLengths[i]=0;\n\t}\n}\nGridBroadphase.prototype = new Broadphase();\nGridBroadphase.prototype.constructor = GridBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar GridBroadphase_collisionPairs_d = new Vec3();\nvar GridBroadphase_collisionPairs_binPos = new Vec3();\nGridBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var N = world.numObjects(),\n        bodies = world.bodies;\n\n    var max = this.aabbMax,\n        min = this.aabbMin,\n        nx = this.nx,\n        ny = this.ny,\n        nz = this.nz;\n\n\tvar xstep = ny*nz;\n\tvar ystep = nz;\n\tvar zstep = 1;\n\n    var xmax = max.x,\n        ymax = max.y,\n        zmax = max.z,\n        xmin = min.x,\n        ymin = min.y,\n        zmin = min.z;\n\n    var xmult = nx / (xmax-xmin),\n        ymult = ny / (ymax-ymin),\n        zmult = nz / (zmax-zmin);\n\n    var binsizeX = (xmax - xmin) / nx,\n        binsizeY = (ymax - ymin) / ny,\n        binsizeZ = (zmax - zmin) / nz;\n\n\tvar binRadius = Math.sqrt(binsizeX*binsizeX + binsizeY*binsizeY + binsizeZ*binsizeZ) * 0.5;\n\n    var types = Shape.types;\n    var SPHERE =            types.SPHERE,\n        PLANE =             types.PLANE,\n        BOX =               types.BOX,\n        COMPOUND =          types.COMPOUND,\n        CONVEXPOLYHEDRON =  types.CONVEXPOLYHEDRON;\n\n    var bins=this.bins,\n\t\tbinLengths=this.binLengths,\n        Nbins=this.bins.length;\n\n    // Reset bins\n    for(var i=0; i!==Nbins; i++){\n        binLengths[i] = 0;\n    }\n\n    var ceil = Math.ceil;\n\tvar min = Math.min;\n\tvar max = Math.max;\n\n\tfunction addBoxToBins(x0,y0,z0,x1,y1,z1,bi) {\n\t\tvar xoff0 = ((x0 - xmin) * xmult)|0,\n\t\t\tyoff0 = ((y0 - ymin) * ymult)|0,\n\t\t\tzoff0 = ((z0 - zmin) * zmult)|0,\n\t\t\txoff1 = ceil((x1 - xmin) * xmult),\n\t\t\tyoff1 = ceil((y1 - ymin) * ymult),\n\t\t\tzoff1 = ceil((z1 - zmin) * zmult);\n\n\t\tif (xoff0 < 0) { xoff0 = 0; } else if (xoff0 >= nx) { xoff0 = nx - 1; }\n\t\tif (yoff0 < 0) { yoff0 = 0; } else if (yoff0 >= ny) { yoff0 = ny - 1; }\n\t\tif (zoff0 < 0) { zoff0 = 0; } else if (zoff0 >= nz) { zoff0 = nz - 1; }\n\t\tif (xoff1 < 0) { xoff1 = 0; } else if (xoff1 >= nx) { xoff1 = nx - 1; }\n\t\tif (yoff1 < 0) { yoff1 = 0; } else if (yoff1 >= ny) { yoff1 = ny - 1; }\n\t\tif (zoff1 < 0) { zoff1 = 0; } else if (zoff1 >= nz) { zoff1 = nz - 1; }\n\n\t\txoff0 *= xstep;\n\t\tyoff0 *= ystep;\n\t\tzoff0 *= zstep;\n\t\txoff1 *= xstep;\n\t\tyoff1 *= ystep;\n\t\tzoff1 *= zstep;\n\n\t\tfor (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n\t\t\tfor (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n\t\t\t\tfor (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n\t\t\t\t\tvar idx = xoff+yoff+zoff;\n\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    // Put all bodies into the bins\n    for(var i=0; i!==N; i++){\n        var bi = bodies[i];\n        var si = bi.shape;\n\n        switch(si.type){\n        case SPHERE:\n            // Put in bin\n            // check if overlap with other bins\n            var x = bi.position.x,\n                y = bi.position.y,\n                z = bi.position.z;\n            var r = si.radius;\n\n\t\t\taddBoxToBins(x-r, y-r, z-r, x+r, y+r, z+r, bi);\n            break;\n\n        case PLANE:\n            if(si.worldNormalNeedsUpdate){\n                si.computeWorldNormal(bi.quaternion);\n            }\n            var planeNormal = si.worldNormal;\n\n\t\t\t//Relative position from origin of plane object to the first bin\n\t\t\t//Incremented as we iterate through the bins\n\t\t\tvar xreset = xmin + binsizeX*0.5 - bi.position.x,\n\t\t\t\tyreset = ymin + binsizeY*0.5 - bi.position.y,\n\t\t\t\tzreset = zmin + binsizeZ*0.5 - bi.position.z;\n\n            var d = GridBroadphase_collisionPairs_d;\n\t\t\td.set(xreset, yreset, zreset);\n\n\t\t\tfor (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n\t\t\t\tfor (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n\t\t\t\t\tfor (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n\t\t\t\t\t\tif (d.dot(planeNormal) < binRadius) {\n\t\t\t\t\t\t\tvar idx = xoff + yoff + zoff;\n\t\t\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n            break;\n\n        default:\n\t\t\tif (bi.aabbNeedsUpdate) {\n\t\t\t\tbi.computeAABB();\n\t\t\t}\n\n\t\t\taddBoxToBins(\n\t\t\t\tbi.aabb.lowerBound.x,\n\t\t\t\tbi.aabb.lowerBound.y,\n\t\t\t\tbi.aabb.lowerBound.z,\n\t\t\t\tbi.aabb.upperBound.x,\n\t\t\t\tbi.aabb.upperBound.y,\n\t\t\t\tbi.aabb.upperBound.z,\n\t\t\t\tbi);\n            break;\n        }\n    }\n\n    // Check each bin\n    for(var i=0; i!==Nbins; i++){\n\t\tvar binLength = binLengths[i];\n\t\t//Skip bins with no potential collisions\n\t\tif (binLength > 1) {\n\t\t\tvar bin = bins[i];\n\n\t\t\t// Do N^2 broadphase inside\n\t\t\tfor(var xi=0; xi!==binLength; xi++){\n\t\t\t\tvar bi = bin[xi];\n\t\t\t\tfor(var yi=0; yi!==xi; yi++){\n\t\t\t\t\tvar bj = bin[yi];\n\t\t\t\t\tif(this.needBroadphaseCollision(bi,bj)){\n\t\t\t\t\t\tthis.intersectionTest(bi,bj,pairs1,pairs2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n//\tfor (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n//\t\tconsole.log(\"layer \"+zi);\n//\t\tfor (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n//\t\t\tvar row = '';\n//\t\t\tfor (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n//\t\t\t\tvar idx = xoff + yoff + zoff;\n//\t\t\t\trow += ' ' + binLengths[idx];\n//\t\t\t}\n//\t\t\tconsole.log(row);\n//\t\t}\n//\t}\n\n    this.makePairsUnique(pairs1,pairs2);\n};\n\n},{\"../math/Vec3\":30,\"../shapes/Shape\":43,\"./Broadphase\":5}],7:[function(_dereq_,module,exports){\nmodule.exports = NaiveBroadphase;\n\nvar Broadphase = _dereq_('./Broadphase');\nvar AABB = _dereq_('./AABB');\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n * @class NaiveBroadphase\n * @constructor\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\n * @extends Broadphase\n */\nfunction NaiveBroadphase(){\n    Broadphase.apply(this);\n}\nNaiveBroadphase.prototype = new Broadphase();\nNaiveBroadphase.prototype.constructor = NaiveBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nNaiveBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var bodies = world.bodies,\n        n = bodies.length,\n        i,j,bi,bj;\n\n    // Naive N^2 ftw!\n    for(i=0; i!==n; i++){\n        for(j=0; j!==i; j++){\n\n            bi = bodies[i];\n            bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            this.intersectionTest(bi,bj,pairs1,pairs2);\n        }\n    }\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nNaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    for(var i = 0; i < world.bodies.length; i++){\n        var b = world.bodies[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        // Ugly hack until Body gets aabb\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n},{\"./AABB\":3,\"./Broadphase\":5}],8:[function(_dereq_,module,exports){\nmodule.exports = ObjectCollisionMatrix;\n\n/**\n * Records what objects are colliding with each other\n * @class ObjectCollisionMatrix\n * @constructor\n */\nfunction ObjectCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Object}\n     */\n\tthis.matrix = {};\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nObjectCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn i+'-'+j in this.matrix;\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nObjectCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n\t}\n\tif (value) {\n\t\tthis.matrix[i+'-'+j] = true;\n\t}\n\telse {\n\t\tdelete this.matrix[i+'-'+j];\n\t}\n};\n\n/**\n * Empty the matrix\n * @method reset\n */\nObjectCollisionMatrix.prototype.reset = function() {\n\tthis.matrix = {};\n};\n\n/**\n * Set max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nObjectCollisionMatrix.prototype.setNumObjects = function(n) {\n};\n\n},{}],9:[function(_dereq_,module,exports){\nmodule.exports = Ray;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\nvar ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');\nvar Box = _dereq_('../shapes/Box');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Shape = _dereq_('../shapes/Shape');\nvar AABB = _dereq_('../collision/AABB');\n\n/**\n * A line in 3D space that intersects bodies and return points.\n * @class Ray\n * @constructor\n * @param {Vec3} from\n * @param {Vec3} to\n */\nfunction Ray(from, to){\n    /**\n     * @property {Vec3} from\n     */\n    this.from = from ? from.clone() : new Vec3();\n\n    /**\n     * @property {Vec3} to\n     */\n    this.to = to ? to.clone() : new Vec3();\n\n    /**\n     * @private\n     * @property {Vec3} _direction\n     */\n    this._direction = new Vec3();\n\n    /**\n     * The precision of the ray. Used when checking parallelity etc.\n     * @property {Number} precision\n     */\n    this.precision = 0.0001;\n\n    /**\n     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n     * @property {Boolean} checkCollisionResponse\n     */\n    this.checkCollisionResponse = true;\n\n    /**\n     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n     * @property {Boolean} skipBackfaces\n     */\n    this.skipBackfaces = false;\n\n    /**\n     * @property {number} collisionFilterMask\n     * @default -1\n     */\n    this.collisionFilterMask = -1;\n\n    /**\n     * @property {number} collisionFilterGroup\n     * @default -1\n     */\n    this.collisionFilterGroup = -1;\n\n    /**\n     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n     * @property {number} mode\n     */\n    this.mode = Ray.ANY;\n\n    /**\n     * Current result object.\n     * @property {RaycastResult} result\n     */\n    this.result = new RaycastResult();\n\n    /**\n     * Will be set to true during intersectWorld() if the ray hit anything.\n     * @property {Boolean} hasHit\n     */\n    this.hasHit = false;\n\n    /**\n     * Current, user-provided result callback. Will be used if mode is Ray.ALL.\n     * @property {Function} callback\n     */\n    this.callback = function(result){};\n}\nRay.prototype.constructor = Ray;\n\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\n\nvar tmpAABB = new AABB();\nvar tmpArray = [];\n\n/**\n * Do itersection against all bodies in the given World.\n * @method intersectWorld\n * @param  {World} world\n * @param  {object} options\n * @return {Boolean} True if the ray hit anything, otherwise false.\n */\nRay.prototype.intersectWorld = function (world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof(options.collisionFilterMask) !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) !== 'undefined' ? options.collisionFilterGroup : -1;\n    if(options.from){\n        this.from.copy(options.from);\n    }\n    if(options.to){\n        this.to.copy(options.to);\n    }\n    this.callback = options.callback || function(){};\n    this.hasHit = false;\n\n    this.result.reset();\n    this._updateDirection();\n\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n\n    return this.hasHit;\n};\n\nvar v1 = new Vec3(),\n    v2 = new Vec3();\n\n/*\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\n */\nRay.pointInTriangle = pointInTriangle;\nfunction pointInTriangle(p, a, b, c) {\n    c.vsub(a,v0);\n    b.vsub(a,v1);\n    p.vsub(a,v2);\n\n    var dot00 = v0.dot( v0 );\n    var dot01 = v0.dot( v1 );\n    var dot02 = v0.dot( v2 );\n    var dot11 = v1.dot( v1 );\n    var dot12 = v1.dot( v2 );\n\n    var u,v;\n\n    return  ( (u = dot11 * dot02 - dot01 * dot12) >= 0 ) &&\n            ( (v = dot00 * dot12 - dot01 * dot02) >= 0 ) &&\n            ( u + v < ( dot00 * dot11 - dot01 * dot01 ) );\n}\n\n/**\n * Shoot a ray at a body, get back information about the hit.\n * @method intersectBody\n * @private\n * @param {Body} body\n * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\n */\nvar intersectBody_xi = new Vec3();\nvar intersectBody_qi = new Quaternion();\nRay.prototype.intersectBody = function (body, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n    var checkCollisionResponse = this.checkCollisionResponse;\n\n    if(checkCollisionResponse && !body.collisionResponse){\n        return;\n    }\n\n    if((this.collisionFilterGroup & body.collisionFilterMask)===0 || (body.collisionFilterGroup & this.collisionFilterMask)===0){\n        return;\n    }\n\n    var xi = intersectBody_xi;\n    var qi = intersectBody_qi;\n\n    for (var i = 0, N = body.shapes.length; i < N; i++) {\n        var shape = body.shapes[i];\n\n        if(checkCollisionResponse && !shape.collisionResponse){\n            continue; // Skip\n        }\n\n        body.quaternion.mult(body.shapeOrientations[i], qi);\n        body.quaternion.vmult(body.shapeOffsets[i], xi);\n        xi.vadd(body.position, xi);\n\n        this.intersectShape(\n            shape,\n            qi,\n            xi,\n            body\n        );\n\n        if(this.result._shouldStop){\n            break;\n        }\n    }\n};\n\n/**\n * @method intersectBodies\n * @param {Array} bodies An array of Body objects.\n * @param {RaycastResult} [result] Deprecated\n */\nRay.prototype.intersectBodies = function (bodies, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n\n    for ( var i = 0, l = bodies.length; !this.result._shouldStop && i < l; i ++ ) {\n        this.intersectBody(bodies[i]);\n    }\n};\n\n/**\n * Updates the _direction vector.\n * @private\n * @method _updateDirection\n */\nRay.prototype._updateDirection = function(){\n    this.to.vsub(this.from, this._direction);\n    this._direction.normalize();\n};\n\n/**\n * @method intersectShape\n * @private\n * @param {Shape} shape\n * @param {Quaternion} quat\n * @param {Vec3} position\n * @param {Body} body\n */\nRay.prototype.intersectShape = function(shape, quat, position, body){\n    var from = this.from;\n\n\n    // Checking boundingSphere\n    var distance = distanceFromIntersection(from, this._direction, position);\n    if ( distance > shape.boundingSphereRadius ) {\n        return;\n    }\n\n    var intersectMethod = this[shape.type];\n    if(intersectMethod){\n        intersectMethod.call(this, shape, quat, position, body);\n    }\n};\n\nvar vector = new Vec3();\nvar normal = new Vec3();\nvar intersectPoint = new Vec3();\n\nvar a = new Vec3();\nvar b = new Vec3();\nvar c = new Vec3();\nvar d = new Vec3();\n\nvar tmpRaycastResult = new RaycastResult();\n\n/**\n * @method intersectBox\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectBox = function(shape, quat, position, body){\n    return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body);\n};\nRay.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;\n\n/**\n * @method intersectPlane\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectPlane = function(shape, quat, position, body){\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    // Get plane normal\n    var worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n\n    var len = new Vec3();\n    from.vsub(position, len);\n    var planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    var planeToTo = len.dot(worldNormal);\n\n    if(planeToFrom * planeToTo > 0){\n        // \"from\" and \"to\" are on the same side of the plane... bail out\n        return;\n    }\n\n    if(from.distanceTo(to) < planeToFrom){\n        return;\n    }\n\n    var n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n        // No intersection\n        return;\n    }\n\n    var planePointToFrom = new Vec3();\n    var dir_scaled_with_t = new Vec3();\n    var hitPointWorld = new Vec3();\n\n    from.vsub(position, planePointToFrom);\n    var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n\n    this.reportIntersection(worldNormal, hitPointWorld, shape, body, -1);\n};\nRay.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;\n\n/**\n * Get the world AABB of the ray.\n * @method getAABB\n * @param  {AABB} aabb\n */\nRay.prototype.getAABB = function(result){\n    var to = this.to;\n    var from = this.from;\n    result.lowerBound.x = Math.min(to.x, from.x);\n    result.lowerBound.y = Math.min(to.y, from.y);\n    result.lowerBound.z = Math.min(to.z, from.z);\n    result.upperBound.x = Math.max(to.x, from.x);\n    result.upperBound.y = Math.max(to.y, from.y);\n    result.upperBound.z = Math.max(to.z, from.z);\n};\n\nvar intersectConvexOptions = {\n    faceList: [0]\n};\n\n/**\n * @method intersectHeightfield\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectHeightfield = function(shape, quat, position, body){\n    var data = shape.data,\n        w = shape.elementSize,\n        worldPillarOffset = new Vec3();\n\n    // Convert the ray to local heightfield coordinates\n    var localRay = new Ray(this.from, this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n\n    // Get the index of the data points to test against\n    var index = [];\n    var iMinX = null;\n    var iMinY = null;\n    var iMaxX = null;\n    var iMaxY = null;\n\n    var inside = shape.getIndexOfPosition(localRay.from.x, localRay.from.y, index, false);\n    if(inside){\n        iMinX = index[0];\n        iMinY = index[1];\n        iMaxX = index[0];\n        iMaxY = index[1];\n    }\n    inside = shape.getIndexOfPosition(localRay.to.x, localRay.to.y, index, false);\n    if(inside){\n        if (iMinX === null || index[0] < iMinX) { iMinX = index[0]; }\n        if (iMaxX === null || index[0] > iMaxX) { iMaxX = index[0]; }\n        if (iMinY === null || index[1] < iMinY) { iMinY = index[1]; }\n        if (iMaxY === null || index[1] > iMaxY) { iMaxY = index[1]; }\n    }\n\n    if(iMinX === null){\n        return;\n    }\n\n    var minMax = [];\n    shape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // // Bail out if the ray can't touch the bounding box\n    // // TODO\n    // var aabb = new AABB();\n    // this.getAABB(aabb);\n    // if(aabb.intersects()){\n    //     return;\n    // }\n\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Lower triangle\n            shape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Upper triangle\n            shape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n        }\n    }\n};\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;\n\nvar Ray_intersectSphere_intersectionPoint = new Vec3();\nvar Ray_intersectSphere_normal = new Vec3();\n\n/**\n * @method intersectSphere\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectSphere = function(shape, quat, position, body){\n    var from = this.from,\n        to = this.to,\n        r = shape.radius;\n\n    var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);\n    var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);\n\n    var delta = Math.pow(b, 2) - 4 * a * c;\n\n    var intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    var normal = Ray_intersectSphere_normal;\n\n    if(delta < 0){\n        // No intersection\n        return;\n\n    } else if(delta === 0){\n        // single intersection point\n        from.lerp(to, delta, intersectionPoint);\n\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n\n        this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n\n    } else {\n        var d1 = (- b - Math.sqrt(delta)) / (2 * a);\n        var d2 = (- b + Math.sqrt(delta)) / (2 * a);\n\n        if(d1 >= 0 && d1 <= 1){\n            from.lerp(to, d1, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n\n        if(this.result._shouldStop){\n            return;\n        }\n\n        if(d2 >= 0 && d2 <= 1){\n            from.lerp(to, d2, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n    }\n};\nRay.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;\n\n\nvar intersectConvex_normal = new Vec3();\nvar intersectConvex_minDistNormal = new Vec3();\nvar intersectConvex_minDistIntersect = new Vec3();\nvar intersectConvex_vector = new Vec3();\n\n/**\n * @method intersectConvex\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @param {array} [options.faceList]\n */\nRay.prototype.intersectConvex = function intersectConvex(\n    shape,\n    quat,\n    position,\n    body,\n    options\n){\n    var minDistNormal = intersectConvex_minDistNormal;\n    var normal = intersectConvex_normal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var faces = shape.faces,\n        vertices = shape.vertices,\n        normals = shape.faceNormals;\n    var direction = this._direction;\n\n    var from = this.from;\n    var to = this.to;\n    var fromToDistance = from.distanceTo(to);\n\n    var minDist = -1;\n    var Nfaces = faceList ? faceList.length : faces.length;\n    var result = this.result;\n\n    for (var j = 0; !result._shouldStop && j < Nfaces; j++) {\n        var fi = faceList ? faceList[j] : j;\n\n        var face = faces[fi];\n        var faceNormal = normals[fi];\n        var q = quat;\n        var x = position;\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        vector.copy(vertices[face[0]]);\n        q.vmult(vector,vector);\n        vector.vadd(x,vector);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        vector.vsub(from,vector);\n\n        // Get plane normal\n        q.vmult(faceNormal,normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = direction.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        if ( Math.abs( dot ) < this.precision ){\n            continue;\n        }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // if (dot < 0) {\n\n        // Intersection point is from + direction * scalar\n        direction.mult(scalar,intersectPoint);\n        intersectPoint.vadd(from,intersectPoint);\n\n        // a is the point we compare points b and c with.\n        a.copy(vertices[face[0]]);\n        q.vmult(a,a);\n        x.vadd(a,a);\n\n        for(var i = 1; !result._shouldStop && i < face.length - 1; i++){\n            // Transform 3 vertices to world coords\n            b.copy(vertices[face[i]]);\n            c.copy(vertices[face[i+1]]);\n            q.vmult(b,b);\n            q.vmult(c,c);\n            x.vadd(b,b);\n            x.vadd(c,c);\n\n            var distance = intersectPoint.distanceTo(from);\n\n            if(!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance){\n                continue;\n            }\n\n            this.reportIntersection(normal, intersectPoint, shape, body, fi);\n        }\n        // }\n    }\n};\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;\n\nvar intersectTrimesh_normal = new Vec3();\nvar intersectTrimesh_localDirection = new Vec3();\nvar intersectTrimesh_localFrom = new Vec3();\nvar intersectTrimesh_localTo = new Vec3();\nvar intersectTrimesh_worldNormal = new Vec3();\nvar intersectTrimesh_worldIntersectPoint = new Vec3();\nvar intersectTrimesh_localAABB = new AABB();\nvar intersectTrimesh_triangles = [];\nvar intersectTrimesh_treeTransform = new Transform();\n\n/**\n * @method intersectTrimesh\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @todo Optimize by transforming the world to local space first.\n * @todo Use Octree lookup\n */\nRay.prototype.intersectTrimesh = function intersectTrimesh(\n    mesh,\n    quat,\n    position,\n    body,\n    options\n){\n    var normal = intersectTrimesh_normal;\n    var triangles = intersectTrimesh_triangles;\n    var treeTransform = intersectTrimesh_treeTransform;\n    var minDistNormal = intersectConvex_minDistNormal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var localAABB = intersectTrimesh_localAABB;\n    var localDirection = intersectTrimesh_localDirection;\n    var localFrom = intersectTrimesh_localFrom;\n    var localTo = intersectTrimesh_localTo;\n    var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    var worldNormal = intersectTrimesh_worldNormal;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var indices = mesh.indices,\n        vertices = mesh.vertices,\n        normals = mesh.faceNormals;\n\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    var minDist = -1;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat);\n\n    // Transform ray to local space!\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    //body.vectorToLocalFrame(direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    //body.pointToLocalFrame(from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    //body.pointToLocalFrame(to, localTo);\n    var fromToDistanceSquared = localFrom.distanceSquared(localTo);\n\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (var i = 0, N = triangles.length; !this.result._shouldStop && i !== N; i++) {\n        var trianglesIndex = triangles[i];\n\n        mesh.getNormal(trianglesIndex, normal);\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        mesh.getVertex(indices[trianglesIndex * 3], a);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        a.vsub(localFrom,vector);\n\n        // Get plane normal\n        // quat.vmult(normal, normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = localDirection.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        // if (Math.abs( dot ) < this.precision){\n        //     continue;\n        // }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // Intersection point is from + direction * scalar\n        localDirection.scale(scalar,intersectPoint);\n        intersectPoint.vadd(localFrom,intersectPoint);\n\n        // Get triangle vertices\n        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n\n        var squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n        if(!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared){\n            continue;\n        }\n\n        // transform intersectpoint and normal to world\n        Transform.vectorToWorldFrame(quat, normal, worldNormal);\n        //body.vectorToWorldFrame(normal, worldNormal);\n        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n        //body.pointToWorldFrame(intersectPoint, worldIntersectPoint);\n        this.reportIntersection(worldNormal, worldIntersectPoint, mesh, body, trianglesIndex);\n    }\n    triangles.length = 0;\n};\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype.intersectTrimesh;\n\n\n/**\n * @method reportIntersection\n * @private\n * @param  {Vec3} normal\n * @param  {Vec3} hitPointWorld\n * @param  {Shape} shape\n * @param  {Body} body\n * @return {boolean} True if the intersections should continue\n */\nRay.prototype.reportIntersection = function(normal, hitPointWorld, shape, body, hitFaceIndex){\n    var from = this.from;\n    var to = this.to;\n    var distance = from.distanceTo(hitPointWorld);\n    var result = this.result;\n\n    // Skip back faces?\n    if(this.skipBackfaces && normal.dot(this._direction) > 0){\n        return;\n    }\n\n    result.hitFaceIndex = typeof(hitFaceIndex) !== 'undefined' ? hitFaceIndex : -1;\n\n    switch(this.mode){\n    case Ray.ALL:\n        this.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n    case Ray.CLOSEST:\n\n        // Store if closer than current closest\n        if(distance < result.distance || !result.hasHit){\n            this.hasHit = true;\n            result.hasHit = true;\n            result.set(\n                from,\n                to,\n                normal,\n                hitPointWorld,\n                shape,\n                body,\n                distance\n            );\n        }\n        break;\n\n    case Ray.ANY:\n\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result._shouldStop = true;\n        break;\n    }\n};\n\nvar v0 = new Vec3(),\n    intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n\n    // v0 is vector from from to position\n    position.vsub(from,v0);\n    var dot = v0.dot(direction);\n\n    // intersect = direction*dot + from\n    direction.mult(dot,intersect);\n    intersect.vadd(from,intersect);\n\n    var distance = position.distanceTo(intersect);\n\n    return distance;\n}\n\n\n},{\"../collision/AABB\":3,\"../collision/RaycastResult\":10,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/ConvexPolyhedron\":38,\"../shapes/Shape\":43}],10:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = RaycastResult;\n\n/**\n * Storage for Ray casting data.\n * @class RaycastResult\n * @constructor\n */\nfunction RaycastResult(){\n\n\t/**\n\t * @property {Vec3} rayFromWorld\n\t */\n\tthis.rayFromWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} rayToWorld\n\t */\n\tthis.rayToWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitNormalWorld\n\t */\n\tthis.hitNormalWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitPointWorld\n\t */\n\tthis.hitPointWorld = new Vec3();\n\n\t/**\n\t * @property {boolean} hasHit\n\t */\n\tthis.hasHit = false;\n\n\t/**\n\t * The hit shape, or null.\n\t * @property {Shape} shape\n\t */\n\tthis.shape = null;\n\n\t/**\n\t * The hit body, or null.\n\t * @property {Body} body\n\t */\n\tthis.body = null;\n\n\t/**\n\t * The index of the hit triangle, if the hit shape was a trimesh.\n\t * @property {number} hitFaceIndex\n\t * @default -1\n\t */\n\tthis.hitFaceIndex = -1;\n\n\t/**\n\t * Distance to the hit. Will be set to -1 if there was no hit.\n\t * @property {number} distance\n\t * @default -1\n\t */\n\tthis.distance = -1;\n\n\t/**\n\t * If the ray should stop traversing the bodies.\n\t * @private\n\t * @property {Boolean} _shouldStop\n\t * @default false\n\t */\n\tthis._shouldStop = false;\n}\n\n/**\n * Reset all result data.\n * @method reset\n */\nRaycastResult.prototype.reset = function () {\n\tthis.rayFromWorld.setZero();\n\tthis.rayToWorld.setZero();\n\tthis.hitNormalWorld.setZero();\n\tthis.hitPointWorld.setZero();\n\tthis.hasHit = false;\n\tthis.shape = null;\n\tthis.body = null;\n\tthis.hitFaceIndex = -1;\n\tthis.distance = -1;\n\tthis._shouldStop = false;\n};\n\n/**\n * @method abort\n */\nRaycastResult.prototype.abort = function(){\n\tthis._shouldStop = true;\n};\n\n/**\n * @method set\n * @param {Vec3} rayFromWorld\n * @param {Vec3} rayToWorld\n * @param {Vec3} hitNormalWorld\n * @param {Vec3} hitPointWorld\n * @param {Shape} shape\n * @param {Body} body\n * @param {number} distance\n */\nRaycastResult.prototype.set = function(\n\trayFromWorld,\n\trayToWorld,\n\thitNormalWorld,\n\thitPointWorld,\n\tshape,\n\tbody,\n\tdistance\n){\n\tthis.rayFromWorld.copy(rayFromWorld);\n\tthis.rayToWorld.copy(rayToWorld);\n\tthis.hitNormalWorld.copy(hitNormalWorld);\n\tthis.hitPointWorld.copy(hitPointWorld);\n\tthis.shape = shape;\n\tthis.body = body;\n\tthis.distance = distance;\n};\n},{\"../math/Vec3\":30}],11:[function(_dereq_,module,exports){\nvar Shape = _dereq_('../shapes/Shape');\nvar Broadphase = _dereq_('../collision/Broadphase');\n\nmodule.exports = SAPBroadphase;\n\n/**\n * Sweep and prune broadphase along one axis.\n *\n * @class SAPBroadphase\n * @constructor\n * @param {World} [world]\n * @extends Broadphase\n */\nfunction SAPBroadphase(world){\n    Broadphase.apply(this);\n\n    /**\n     * List of bodies currently in the broadphase.\n     * @property axisList\n     * @type {Array}\n     */\n    this.axisList = [];\n\n    /**\n     * The world to search in.\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n     * @property axisIndex\n     * @type {Number}\n     */\n    this.axisIndex = 0;\n\n    var axisList = this.axisList;\n\n    this._addBodyHandler = function(e){\n        axisList.push(e.body);\n    };\n\n    this._removeBodyHandler = function(e){\n        var idx = axisList.indexOf(e.body);\n        if(idx !== -1){\n            axisList.splice(idx,1);\n        }\n    };\n\n    if(world){\n        this.setWorld(world);\n    }\n}\nSAPBroadphase.prototype = new Broadphase();\n\n/**\n * Change the world\n * @method setWorld\n * @param  {World} world\n */\nSAPBroadphase.prototype.setWorld = function(world){\n    // Clear the old axis array\n    this.axisList.length = 0;\n\n    // Add all bodies from the new world\n    for(var i=0; i<world.bodies.length; i++){\n        this.axisList.push(world.bodies[i]);\n    }\n\n    // Remove old handlers, if any\n    world.removeEventListener(\"addBody\", this._addBodyHandler);\n    world.removeEventListener(\"removeBody\", this._removeBodyHandler);\n\n    // Add handlers to update the list of bodies.\n    world.addEventListener(\"addBody\", this._addBodyHandler);\n    world.addEventListener(\"removeBody\", this._removeBodyHandler);\n\n    this.world = world;\n    this.dirty = true;\n};\n\n/**\n * @static\n * @method insertionSortX\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortX = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortY\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortY = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortZ\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortZ = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * Collect all collision pairs\n * @method collisionPairs\n * @param  {World} world\n * @param  {Array} p1\n * @param  {Array} p2\n */\nSAPBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    var bodies = this.axisList,\n        N = bodies.length,\n        axisIndex = this.axisIndex,\n        i, j;\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    // Look through the list\n    for(i=0; i !== N; i++){\n        var bi = bodies[i];\n\n        for(j=i+1; j < N; j++){\n            var bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            if(!SAPBroadphase.checkBounds(bi,bj,axisIndex)){\n                break;\n            }\n\n            this.intersectionTest(bi,bj,p1,p2);\n        }\n    }\n};\n\nSAPBroadphase.prototype.sortList = function(){\n    var axisList = this.axisList;\n    var axisIndex = this.axisIndex;\n    var N = axisList.length;\n\n    // Update AABBs\n    for(var i = 0; i!==N; i++){\n        var bi = axisList[i];\n        if(bi.aabbNeedsUpdate){\n            bi.computeAABB();\n        }\n    }\n\n    // Sort the list\n    if(axisIndex === 0){\n        SAPBroadphase.insertionSortX(axisList);\n    } else if(axisIndex === 1){\n        SAPBroadphase.insertionSortY(axisList);\n    } else if(axisIndex === 2){\n        SAPBroadphase.insertionSortZ(axisList);\n    }\n};\n\n/**\n * Check if the bounds of two bodies overlap, along the given SAP axis.\n * @static\n * @method checkBounds\n * @param  {Body} bi\n * @param  {Body} bj\n * @param  {Number} axisIndex\n * @return {Boolean}\n */\nSAPBroadphase.checkBounds = function(bi, bj, axisIndex){\n    var biPos;\n    var bjPos;\n\n    if(axisIndex === 0){\n        biPos = bi.position.x;\n        bjPos = bj.position.x;\n    } else if(axisIndex === 1){\n        biPos = bi.position.y;\n        bjPos = bj.position.y;\n    } else if(axisIndex === 2){\n        biPos = bi.position.z;\n        bjPos = bj.position.z;\n    }\n\n    var ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        boundA1 = biPos - ri,\n        boundA2 = biPos + ri,\n        boundB1 = bjPos - rj,\n        boundB2 = bjPos + rj;\n\n    return boundB1 < boundA2;\n};\n\n/**\n * Computes the variance of the body positions and estimates the best\n * axis to use. Will automatically set property .axisIndex.\n * @method autoDetectAxis\n */\nSAPBroadphase.prototype.autoDetectAxis = function(){\n    var sumX=0,\n        sumX2=0,\n        sumY=0,\n        sumY2=0,\n        sumZ=0,\n        sumZ2=0,\n        bodies = this.axisList,\n        N = bodies.length,\n        invN=1/N;\n\n    for(var i=0; i!==N; i++){\n        var b = bodies[i];\n\n        var centerX = b.position.x;\n        sumX += centerX;\n        sumX2 += centerX*centerX;\n\n        var centerY = b.position.y;\n        sumY += centerY;\n        sumY2 += centerY*centerY;\n\n        var centerZ = b.position.z;\n        sumZ += centerZ;\n        sumZ2 += centerZ*centerZ;\n    }\n\n    var varianceX = sumX2 - sumX*sumX*invN,\n        varianceY = sumY2 - sumY*sumY*invN,\n        varianceZ = sumZ2 - sumZ*sumZ*invN;\n\n    if(varianceX > varianceY){\n        if(varianceX > varianceZ){\n            this.axisIndex = 0;\n        } else{\n            this.axisIndex = 2;\n        }\n    } else if(varianceY > varianceZ){\n        this.axisIndex = 1;\n    } else{\n        this.axisIndex = 2;\n    }\n};\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nSAPBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    var axisIndex = this.axisIndex, axis = 'x';\n    if(axisIndex === 1){ axis = 'y'; }\n    if(axisIndex === 2){ axis = 'z'; }\n\n    var axisList = this.axisList;\n    var lower = aabb.lowerBound[axis];\n    var upper = aabb.upperBound[axis];\n    for(var i = 0; i < axisList.length; i++){\n        var b = axisList[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n},{\"../collision/Broadphase\":5,\"../shapes/Shape\":43}],12:[function(_dereq_,module,exports){\nmodule.exports = ConeTwistConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar ConeEquation = _dereq_('../equations/ConeEquation');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * @class ConeTwistConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA]\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction ConeTwistConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    this.collideConnected = !!options.collideConnected;\n\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n\n    /**\n     * @property {ConeEquation} coneEquation\n     */\n    var c = this.coneEquation = new ConeEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} twistEquation\n     */\n    var t = this.twistEquation = new RotationalEquation(bodyA,bodyB,options);\n    this.twistAngle = typeof(options.twistAngle) !== 'undefined' ? options.twistAngle : 0;\n\n    // Make the cone equation push the bodies toward the cone axis, not outward\n    c.maxForce = 0;\n    c.minForce = -maxForce;\n\n    // Make the twist equation add torque toward the initial position\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n\n    this.equations.push(c, t);\n}\nConeTwistConstraint.prototype = new PointToPointConstraint();\nConeTwistConstraint.constructor = ConeTwistConstraint;\n\nvar ConeTwistConstraint_update_tmpVec1 = new Vec3();\nvar ConeTwistConstraint_update_tmpVec2 = new Vec3();\n\nConeTwistConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        cone = this.coneEquation,\n        twist = this.twistEquation;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Update the axes to the cone constraint\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB);\n\n    // Update the world axes in the twist constraint\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n};\n\n\n},{\"../equations/ConeEquation\":18,\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],13:[function(_dereq_,module,exports){\nmodule.exports = Constraint;\n\nvar Utils = _dereq_('../utils/Utils');\n\n/**\n * Constraint base class\n * @class Constraint\n * @author schteppe\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {boolean} [options.collideConnected=true]\n * @param {boolean} [options.wakeUpBodies=true]\n */\nfunction Constraint(bodyA, bodyB, options){\n    options = Utils.defaults(options,{\n        collideConnected : true,\n        wakeUpBodies : true,\n    });\n\n    /**\n     * Equations to be solved in this constraint\n     * @property equations\n     * @type {Array}\n     */\n    this.equations = [];\n\n    /**\n     * @property {Body} bodyA\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * @property {Body} bodyB\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * @property {Number} id\n     */\n    this.id = Constraint.idCounter++;\n\n    /**\n     * Set to true if you want the bodies to collide when they are connected.\n     * @property collideConnected\n     * @type {boolean}\n     */\n    this.collideConnected = options.collideConnected;\n\n    if(options.wakeUpBodies){\n        if(bodyA){\n            bodyA.wakeUp();\n        }\n        if(bodyB){\n            bodyB.wakeUp();\n        }\n    }\n}\n\n/**\n * Update all the equations with data.\n * @method update\n */\nConstraint.prototype.update = function(){\n    throw new Error(\"method update() not implmemented in this Constraint subclass!\");\n};\n\n/**\n * Enables all equations in the constraint.\n * @method enable\n */\nConstraint.prototype.enable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = true;\n    }\n};\n\n/**\n * Disables all equations in the constraint.\n * @method disable\n */\nConstraint.prototype.disable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = false;\n    }\n};\n\nConstraint.idCounter = 0;\n\n},{\"../utils/Utils\":53}],14:[function(_dereq_,module,exports){\nmodule.exports = DistanceConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\n\n/**\n * Constrains two bodies to be at a constant distance from each others center of mass.\n * @class DistanceConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n * @param {Number} [maxForce=1e6]\n * @extends Constraint\n */\nfunction DistanceConstraint(bodyA,bodyB,distance,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    if(typeof(distance)===\"undefined\") {\n        distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    if(typeof(maxForce)===\"undefined\") {\n        maxForce = 1e6;\n    }\n\n    /**\n     * @property {number} distance\n     */\n    this.distance = distance;\n\n    /**\n     * @property {ContactEquation} distanceEquation\n     */\n    var eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq);\n\n    // Make it bidirectional\n    eq.minForce = -maxForce;\n    eq.maxForce =  maxForce;\n}\nDistanceConstraint.prototype = new Constraint();\n\nDistanceConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var eq = this.distanceEquation;\n    var halfDist = this.distance * 0.5;\n    var normal = eq.ni;\n\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.mult(halfDist, eq.ri);\n    normal.mult(-halfDist, eq.rj);\n};\n},{\"../equations/ContactEquation\":19,\"./Constraint\":13}],15:[function(_dereq_,module,exports){\nmodule.exports = HingeConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n * @class HingeConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.\n * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction HingeConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * Rotation axis, defined locally in bodyA.\n     * @property {Vec3} axisA\n     */\n    var axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1,0,0);\n    axisA.normalize();\n\n    /**\n     * Rotation axis, defined locally in bodyB.\n     * @property {Vec3} axisB\n     */\n    var axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1,0,0);\n    axisB.normalize();\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalMotorEquation} motorEquation\n     */\n    var motor = this.motorEquation = new RotationalMotorEquation(bodyA,bodyB,maxForce);\n    motor.enabled = false; // Not enabled by default\n\n    // Equations to be fed to the solver\n    this.equations.push(\n        r1, // rotational1\n        r2, // rotational2\n        motor\n    );\n}\nHingeConstraint.prototype = new PointToPointConstraint();\nHingeConstraint.constructor = HingeConstraint;\n\n/**\n * @method enableMotor\n */\nHingeConstraint.prototype.enableMotor = function(){\n    this.motorEquation.enabled = true;\n};\n\n/**\n * @method disableMotor\n */\nHingeConstraint.prototype.disableMotor = function(){\n    this.motorEquation.enabled = false;\n};\n\n/**\n * @method setMotorSpeed\n * @param {number} speed\n */\nHingeConstraint.prototype.setMotorSpeed = function(speed){\n    this.motorEquation.targetVelocity = speed;\n};\n\n/**\n * @method setMotorMaxForce\n * @param {number} maxForce\n */\nHingeConstraint.prototype.setMotorMaxForce = function(maxForce){\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n};\n\nvar HingeConstraint_update_tmpVec1 = new Vec3();\nvar HingeConstraint_update_tmpVec2 = new Vec3();\n\nHingeConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        worldAxisA = HingeConstraint_update_tmpVec1,\n        worldAxisB = HingeConstraint_update_tmpVec2;\n\n    var axisA = this.axisA;\n    var axisB = this.axisB;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Get world axes\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if(this.motorEquation.enabled){\n        bodyA.quaternion.vmult(this.axisA, motor.axisA);\n        bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n};\n\n\n},{\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../equations/RotationalMotorEquation\":23,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],16:[function(_dereq_,module,exports){\nmodule.exports = LockConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Lock constraint. Will remove all degrees of freedom between the bodies.\n * @class LockConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction LockConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = new Vec3();\n    var pivotB = new Vec3();\n    var halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA);\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation3\n     */\n    var r3 = this.rotationalEquation3 = new RotationalEquation(bodyA,bodyB,options);\n\n    this.equations.push(r1, r2, r3);\n}\nLockConstraint.prototype = new PointToPointConstraint();\nLockConstraint.constructor = LockConstraint;\n\nvar LockConstraint_update_tmpVec1 = new Vec3();\nvar LockConstraint_update_tmpVec2 = new Vec3();\n\nLockConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        r3 = this.rotationalEquation3,\n        worldAxisA = LockConstraint_update_tmpVec1,\n        worldAxisB = LockConstraint_update_tmpVec2;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_X, r1.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Y, r1.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Y, r2.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Z, r2.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Z, r3.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_X, r3.axisB);\n};\n\n\n},{\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../equations/RotationalMotorEquation\":23,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],17:[function(_dereq_,module,exports){\nmodule.exports = PointToPointConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Connects two bodies at given offset points.\n * @class PointToPointConstraint\n * @extends Constraint\n * @constructor\n * @param {Body} bodyA\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n * @param {Vec3} pivotB See pivotA.\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\n *\n * @example\n *     var bodyA = new Body({ mass: 1 });\n *     var bodyB = new Body({ mass: 1 });\n *     bodyA.position.set(-1, 0, 0);\n *     bodyB.position.set(1, 0, 0);\n *     bodyA.addShape(shapeA);\n *     bodyB.addShape(shapeB);\n *     world.addBody(bodyA);\n *     world.addBody(bodyB);\n *     var localPivotA = new Vec3(1, 0, 0);\n *     var localPivotB = new Vec3(-1, 0, 0);\n *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\n *     world.addConstraint(constraint);\n */\nfunction PointToPointConstraint(bodyA,pivotA,bodyB,pivotB,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n\n    /**\n     * Pivot, defined locally in bodyA.\n     * @property {Vec3} pivotA\n     */\n    this.pivotA = pivotA ? pivotA.clone() : new Vec3();\n\n    /**\n     * Pivot, defined locally in bodyB.\n     * @property {Vec3} pivotB\n     */\n    this.pivotB = pivotB ? pivotB.clone() : new Vec3();\n\n    /**\n     * @property {ContactEquation} equationX\n     */\n    var x = this.equationX = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationY\n     */\n    var y = this.equationY = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationZ\n     */\n    var z = this.equationZ = new ContactEquation(bodyA,bodyB);\n\n    // Equations to be fed to the solver\n    this.equations.push(x, y, z);\n\n    // Make the equations bidirectional\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce =  maxForce;\n\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n}\nPointToPointConstraint.prototype = new Constraint();\n\nPointToPointConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var x = this.equationX;\n    var y = this.equationY;\n    var z = this.equationZ;\n\n    // Rotate the pivots to world space\n    bodyA.quaternion.vmult(this.pivotA,x.ri);\n    bodyB.quaternion.vmult(this.pivotB,x.rj);\n\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n};\n},{\"../equations/ContactEquation\":19,\"../math/Vec3\":30,\"./Constraint\":13}],18:[function(_dereq_,module,exports){\nmodule.exports = ConeEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n * @class ConeEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA] Local axis in A\n * @param {Vec3} [options.axisB] Local axis in B\n * @param {Vec3} [options.angle] The \"cone angle\" to keep\n * @param {number} [options.maxForce=1e6]\n * @extends Equation\n */\nfunction ConeEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    /**\n     * The cone angle to keep\n     * @property {number} angle\n     */\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n}\n\nConeEquation.prototype = new Equation();\nConeEquation.prototype.constructor = ConeEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nConeEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.angle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],19:[function(_dereq_,module,exports){\nmodule.exports = ContactEquation;\n\nvar Equation = _dereq_('./Equation');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\n\n/**\n * Contact/non-penetration constraint equation\n * @class ContactEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @extends Equation\n */\nfunction ContactEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n    Equation.call(this, bodyA, bodyB, 0, maxForce);\n\n    /**\n     * @property restitution\n     * @type {Number}\n     */\n    this.restitution = 0.0; // \"bounciness\": u1 = -e*u0\n\n    /**\n     * World-oriented vector that goes from the center of bi to the contact point.\n     * @property {Vec3} ri\n     */\n    this.ri = new Vec3();\n\n    /**\n     * World-oriented vector that starts in body j position and goes to the contact point.\n     * @property {Vec3} rj\n     */\n    this.rj = new Vec3();\n\n    /**\n     * Contact normal, pointing out of body i.\n     * @property {Vec3} ni\n     */\n    this.ni = new Vec3();\n}\n\nContactEquation.prototype = new Equation();\nContactEquation.prototype.constructor = ContactEquation;\n\nvar ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\nvar ContactEquation_computeB_temp2 = new Vec3();\nvar ContactEquation_computeB_temp3 = new Vec3();\nContactEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixn = ContactEquation_computeB_temp1,\n        rjxn = ContactEquation_computeB_temp2,\n\n        vi = bi.velocity,\n        wi = bi.angularVelocity,\n        fi = bi.force,\n        taui = bi.torque,\n\n        vj = bj.velocity,\n        wj = bj.angularVelocity,\n        fj = bj.force,\n        tauj = bj.torque,\n\n        penetrationVec = ContactEquation_computeB_temp3,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n\n        n = this.ni;\n\n    // Caluclate cross products\n    ri.cross(n,rixn);\n    rj.cross(n,rjxn);\n\n    // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn);\n\n    // Calculate the penetration vector\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj,penetrationVec);\n    penetrationVec.vsub(bi.position,penetrationVec);\n    penetrationVec.vsub(ri,penetrationVec);\n\n    var g = n.dot(penetrationVec);\n\n    // Compute iteration\n    var ePlusOne = this.restitution + 1;\n    var GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    var GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h*GiMf;\n\n    return B;\n};\n\nvar ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\n * Get the current relative velocity in the contact point.\n * @method getImpactVelocityAlongNormal\n * @return {number}\n */\nContactEquation.prototype.getImpactVelocityAlongNormal = function(){\n    var vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    var vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    var xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    var xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    var relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n\n    vi.vsub(vj, relVel);\n\n    return this.ni.dot(relVel);\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],20:[function(_dereq_,module,exports){\nmodule.exports = Equation;\n\nvar JacobianElement = _dereq_('../math/JacobianElement'),\n    Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Equation base class\n * @class Equation\n * @constructor\n * @author schteppe\n * @param {Body} bi\n * @param {Body} bj\n * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.\n * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.\n */\nfunction Equation(bi,bj,minForce,maxForce){\n    this.id = Equation.id++;\n\n    /**\n     * @property {number} minForce\n     */\n    this.minForce = typeof(minForce)===\"undefined\" ? -1e6 : minForce;\n\n    /**\n     * @property {number} maxForce\n     */\n    this.maxForce = typeof(maxForce)===\"undefined\" ? 1e6 : maxForce;\n\n    /**\n     * @property bi\n     * @type {Body}\n     */\n    this.bi = bi;\n\n    /**\n     * @property bj\n     * @type {Body}\n     */\n    this.bj = bj;\n\n    /**\n     * SPOOK parameter\n     * @property {number} a\n     */\n    this.a = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} b\n     */\n    this.b = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} eps\n     */\n    this.eps = 0.0;\n\n    /**\n     * @property {JacobianElement} jacobianElementA\n     */\n    this.jacobianElementA = new JacobianElement();\n\n    /**\n     * @property {JacobianElement} jacobianElementB\n     */\n    this.jacobianElementB = new JacobianElement();\n\n    /**\n     * @property {boolean} enabled\n     * @default true\n     */\n    this.enabled = true;\n\n    // Set typical spook params\n    this.setSpookParams(1e7,4,1/60);\n}\nEquation.prototype.constructor = Equation;\n\nEquation.id = 0;\n\n/**\n * Recalculates a,b,eps.\n * @method setSpookParams\n */\nEquation.prototype.setSpookParams = function(stiffness,relaxation,timeStep){\n    var d = relaxation,\n        k = stiffness,\n        h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = (4.0 * d) / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n};\n\n/**\n * Computes the RHS of the SPOOK equation\n * @method computeB\n * @return {Number}\n */\nEquation.prototype.computeB = function(a,b,h){\n    var GW = this.computeGW(),\n        Gq = this.computeGq(),\n        GiMf = this.computeGiMf();\n    return - Gq * a - GW * b - GiMf*h;\n};\n\n/**\n * Computes G*q, where q are the generalized body coordinates\n * @method computeGq\n * @return {Number}\n */\nEquation.prototype.computeGq = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        xi = bi.position,\n        xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n};\n\nvar zero = new Vec3();\n\n/**\n * Computes G*W, where W are the body velocities\n * @method computeGW\n * @return {Number}\n */\nEquation.prototype.computeGW = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.velocity,\n        vj = bj.velocity,\n        wi = bi.angularVelocity || zero,\n        wj = bj.angularVelocity || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n\n/**\n * Computes G*Wlambda, where W are the body velocities\n * @method computeGWlambda\n * @return {Number}\n */\nEquation.prototype.computeGWlambda = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.vlambda,\n        vj = bj.vlambda,\n        wi = bi.wlambda || zero,\n        wj = bj.wlambda || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n/**\n * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n * @method computeGiMf\n * @return {Number}\n */\nvar iMfi = new Vec3(),\n    iMfj = new Vec3(),\n    invIi_vmult_taui = new Vec3(),\n    invIj_vmult_tauj = new Vec3();\nEquation.prototype.computeGiMf = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        fi = bi.force,\n        ti = bi.torque,\n        fj = bj.force,\n        tj = bj.torque,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve;\n\n    if(bi.invInertiaWorldSolve){ bi.invInertiaWorldSolve.vmult(ti,invIi_vmult_taui); }\n    else { invIi_vmult_taui.set(0,0,0); }\n    if(bj.invInertiaWorldSolve){ bj.invInertiaWorldSolve.vmult(tj,invIj_vmult_tauj); }\n    else { invIj_vmult_tauj.set(0,0,0); }\n\n    fi.mult(invMassi,iMfi);\n    fj.mult(invMassj,iMfj);\n\n    return GA.multiplyVectors(iMfi,invIi_vmult_taui) + GB.multiplyVectors(iMfj,invIj_vmult_tauj);\n};\n\n/**\n * Computes G*inv(M)*G'\n * @method computeGiMGt\n * @return {Number}\n */\nvar tmp = new Vec3();\nEquation.prototype.computeGiMGt = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve,\n        invIi = bi.invInertiaWorldSolve,\n        invIj = bj.invInertiaWorldSolve,\n        result = invMassi + invMassj;\n\n    if(invIi){\n        invIi.vmult(GA.rotational,tmp);\n        result += tmp.dot(GA.rotational);\n    }\n\n    if(invIj){\n        invIj.vmult(GB.rotational,tmp);\n        result += tmp.dot(GB.rotational);\n    }\n\n    return  result;\n};\n\nvar addToWlambda_temp = new Vec3(),\n    addToWlambda_Gi = new Vec3(),\n    addToWlambda_Gj = new Vec3(),\n    addToWlambda_ri = new Vec3(),\n    addToWlambda_rj = new Vec3(),\n    addToWlambda_Mdiag = new Vec3();\n\n/**\n * Add constraint velocity to the bodies.\n * @method addToWlambda\n * @param {Number} deltalambda\n */\nEquation.prototype.addToWlambda = function(deltalambda){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        temp = addToWlambda_temp;\n\n    // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n    GA.spatial.mult(bi.invMassSolve * deltalambda,temp);\n    bi.vlambda.vadd(temp, bi.vlambda);\n\n    GB.spatial.mult(bj.invMassSolve * deltalambda,temp);\n    bj.vlambda.vadd(temp, bj.vlambda);\n\n    // Add to angular velocity\n    if(bi.invInertiaWorldSolve){\n        bi.invInertiaWorldSolve.vmult(GA.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bi.wlambda.vadd(temp,bi.wlambda);\n    }\n\n    if(bj.invInertiaWorldSolve){\n        bj.invInertiaWorldSolve.vmult(GB.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bj.wlambda.vadd(temp,bj.wlambda);\n    }\n};\n\n/**\n * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n * @method computeInvC\n * @param  {Number} eps\n * @return {Number}\n */\nEquation.prototype.computeC = function(){\n    return this.computeGiMGt() + this.eps;\n};\n\n},{\"../math/JacobianElement\":26,\"../math/Vec3\":30}],21:[function(_dereq_,module,exports){\nmodule.exports = FrictionEquation;\n\nvar Equation = _dereq_('./Equation');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\n\n/**\n * Constrains the slipping in a contact along a tangent\n * @class FrictionEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n * @extends Equation\n */\nfunction FrictionEquation(bodyA, bodyB, slipForce){\n    Equation.call(this,bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3(); // tangent\n}\n\nFrictionEquation.prototype = new Equation();\nFrictionEquation.prototype.constructor = FrictionEquation;\n\nvar FrictionEquation_computeB_temp1 = new Vec3();\nvar FrictionEquation_computeB_temp2 = new Vec3();\nFrictionEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixt = FrictionEquation_computeB_temp1,\n        rjxt = FrictionEquation_computeB_temp2,\n        t = this.t;\n\n    // Caluclate cross products\n    ri.cross(t,rixt);\n    rj.cross(t,rjxt);\n\n    // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n\n    var GW = this.computeGW();\n    var GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],22:[function(_dereq_,module,exports){\nmodule.exports = RotationalEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n * @class RotationalEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {number} [options.maxForce]\n * @extends Equation\n */\nfunction RotationalEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    this.maxAngle = Math.PI / 2;\n}\n\nRotationalEquation.prototype = new Equation();\nRotationalEquation.prototype.constructor = RotationalEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nRotationalEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.maxAngle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],23:[function(_dereq_,module,exports){\nmodule.exports = RotationalMotorEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n * @class RotationalMotorEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} maxForce\n * @extends Equation\n */\nfunction RotationalMotorEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce)!=='undefined' ? maxForce : 1e6;\n    Equation.call(this,bodyA,bodyB,-maxForce,maxForce);\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisA\n     */\n    this.axisA = new Vec3();\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisB\n     */\n    this.axisB = new Vec3(); // World oriented rotational axis\n\n    /**\n     * Motor velocity\n     * @property {Number} targetVelocity\n     */\n    this.targetVelocity = 0;\n}\n\nRotationalMotorEquation.prototype = new Equation();\nRotationalMotorEquation.prototype.constructor = RotationalMotorEquation;\n\nRotationalMotorEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n\n        axisA = this.axisA,\n        axisB = this.axisB,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n\n    var GW = this.computeGW() - this.targetVelocity,\n        GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],24:[function(_dereq_,module,exports){\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = ContactMaterial;\n\n/**\n * Defines what happens when two materials meet.\n * @class ContactMaterial\n * @constructor\n * @param {Material} m1\n * @param {Material} m2\n * @param {object} [options]\n * @param {Number} [options.friction=0.3]\n * @param {Number} [options.restitution=0.3]\n * @param {number} [options.contactEquationStiffness=1e7]\n * @param {number} [options.contactEquationRelaxation=3]\n * @param {number} [options.frictionEquationStiffness=1e7]\n * @param {Number} [options.frictionEquationRelaxation=3]\n */\nfunction ContactMaterial(m1, m2, options){\n    options = Utils.defaults(options, {\n        friction: 0.3,\n        restitution: 0.3,\n        contactEquationStiffness: 1e7,\n        contactEquationRelaxation: 3,\n        frictionEquationStiffness: 1e7,\n        frictionEquationRelaxation: 3\n    });\n\n    /**\n     * Identifier of this material\n     * @property {Number} id\n     */\n    this.id = ContactMaterial.idCounter++;\n\n    /**\n     * Participating materials\n     * @property {Array} materials\n     * @todo  Should be .materialA and .materialB instead\n     */\n    this.materials = [m1, m2];\n\n    /**\n     * Friction coefficient\n     * @property {Number} friction\n     */\n    this.friction = options.friction;\n\n    /**\n     * Restitution coefficient\n     * @property {Number} restitution\n     */\n    this.restitution = options.restitution;\n\n    /**\n     * Stiffness of the produced contact equations\n     * @property {Number} contactEquationStiffness\n     */\n    this.contactEquationStiffness = options.contactEquationStiffness;\n\n    /**\n     * Relaxation time of the produced contact equations\n     * @property {Number} contactEquationRelaxation\n     */\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n\n    /**\n     * Stiffness of the produced friction equations\n     * @property {Number} frictionEquationStiffness\n     */\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n\n    /**\n     * Relaxation time of the produced friction equations\n     * @property {Number} frictionEquationRelaxation\n     */\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n}\n\nContactMaterial.idCounter = 0;\n\n},{\"../utils/Utils\":53}],25:[function(_dereq_,module,exports){\nmodule.exports = Material;\n\n/**\n * Defines a physics material.\n * @class Material\n * @constructor\n * @param {object} [options]\n * @author schteppe\n */\nfunction Material(options){\n    var name = '';\n    options = options || {};\n\n    // Backwards compatibility fix\n    if(typeof(options) === 'string'){\n        name = options;\n        options = {};\n    } else if(typeof(options) === 'object') {\n        name = '';\n    }\n\n    /**\n     * @property name\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * material id.\n     * @property id\n     * @type {number}\n     */\n    this.id = Material.idCounter++;\n\n    /**\n     * Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} friction\n     */\n    this.friction = typeof(options.friction) !== 'undefined' ? options.friction : -1;\n\n    /**\n     * Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} restitution\n     */\n    this.restitution = typeof(options.restitution) !== 'undefined' ? options.restitution : -1;\n}\n\nMaterial.idCounter = 0;\n\n},{}],26:[function(_dereq_,module,exports){\nmodule.exports = JacobianElement;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n * @class JacobianElement\n * @constructor\n */\nfunction JacobianElement(){\n\n    /**\n     * @property {Vec3} spatial\n     */\n    this.spatial = new Vec3();\n\n    /**\n     * @property {Vec3} rotational\n     */\n    this.rotational = new Vec3();\n}\n\n/**\n * Multiply with other JacobianElement\n * @method multiplyElement\n * @param  {JacobianElement} element\n * @return {Number}\n */\nJacobianElement.prototype.multiplyElement = function(element){\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n};\n\n/**\n * Multiply with two vectors\n * @method multiplyVectors\n * @param  {Vec3} spatial\n * @param  {Vec3} rotational\n * @return {Number}\n */\nJacobianElement.prototype.multiplyVectors = function(spatial,rotational){\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n};\n\n},{\"./Vec3\":30}],27:[function(_dereq_,module,exports){\nmodule.exports = Mat3;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * A 3x3 matrix.\n * @class Mat3\n * @constructor\n * @param array elements Array of nine elements. Optional.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Mat3(elements){\n    /**\n     * A vector of length 9, containing all matrix elements\n     * @property {Array} elements\n     */\n    if(elements){\n        this.elements = elements;\n    } else {\n        this.elements = [0,0,0,0,0,0,0,0,0];\n    }\n}\n\n/**\n * Sets the matrix to identity\n * @method identity\n * @todo Should perhaps be renamed to setIdentity() to be more clear.\n * @todo Create another function that immediately creates an identity matrix eg. eye()\n */\nMat3.prototype.identity = function(){\n    var e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n};\n\n/**\n * Set all elements to zero\n * @method setZero\n */\nMat3.prototype.setZero = function(){\n    var e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n};\n\n/**\n * Sets the matrix diagonal elements from a Vec3\n * @method setTrace\n * @param {Vec3} vec3\n */\nMat3.prototype.setTrace = function(vec3){\n    var e = this.elements;\n    e[0] = vec3.x;\n    e[4] = vec3.y;\n    e[8] = vec3.z;\n};\n\n/**\n * Gets the matrix diagonal elements\n * @method getTrace\n * @return {Vec3}\n */\nMat3.prototype.getTrace = function(target){\n    var target = target || new Vec3();\n    var e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n};\n\n/**\n * Matrix-Vector multiplication\n * @method vmult\n * @param {Vec3} v The vector to multiply with\n * @param {Vec3} target Optional, target to save the result in.\n */\nMat3.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var e = this.elements,\n        x = v.x,\n        y = v.y,\n        z = v.z;\n    target.x = e[0]*x + e[1]*y + e[2]*z;\n    target.y = e[3]*x + e[4]*y + e[5]*z;\n    target.z = e[6]*x + e[7]*y + e[8]*z;\n\n    return target;\n};\n\n/**\n * Matrix-scalar multiplication\n * @method smult\n * @param {Number} s\n */\nMat3.prototype.smult = function(s){\n    for(var i=0; i<this.elements.length; i++){\n        this.elements[i] *= s;\n    }\n};\n\n/**\n * Matrix multiplication\n * @method mmult\n * @param {Mat3} m Matrix to multiply with from left side.\n * @return {Mat3} The result.\n */\nMat3.prototype.mmult = function(m,target){\n    var r = target || new Mat3();\n    for(var i=0; i<3; i++){\n        for(var j=0; j<3; j++){\n            var sum = 0.0;\n            for(var k=0; k<3; k++){\n                sum += m.elements[i+k*3] * this.elements[k+j*3];\n            }\n            r.elements[i+j*3] = sum;\n        }\n    }\n    return r;\n};\n\n/**\n * Scale each column of the matrix\n * @method scale\n * @param {Vec3} v\n * @return {Mat3} The result.\n */\nMat3.prototype.scale = function(v,target){\n    target = target || new Mat3();\n    var e = this.elements,\n        t = target.elements;\n    for(var i=0; i!==3; i++){\n        t[3*i + 0] = v.x * e[3*i + 0];\n        t[3*i + 1] = v.y * e[3*i + 1];\n        t[3*i + 2] = v.z * e[3*i + 2];\n    }\n    return target;\n};\n\n/**\n * Solve Ax=b\n * @method solve\n * @param {Vec3} b The right hand side\n * @param {Vec3} target Optional. Target vector to save in.\n * @return {Vec3} The solution x\n * @todo should reuse arrays\n */\nMat3.prototype.solve = function(b,target){\n    target = target || new Vec3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 4; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+4*0] = b.x;\n    eqns[3+4*1] = b.y;\n    eqns[3+4*2] = b.z;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = 4; // num rows\n    var p, els;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do {  // do ligne( i ) = ligne( i ) + ligne( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do {  // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // Get the solution\n    target.z = eqns[2*nc+3] / eqns[2*nc+2];\n    target.y = (eqns[1*nc+3] - eqns[1*nc+2]*target.z) / eqns[1*nc+1];\n    target.x = (eqns[0*nc+3] - eqns[0*nc+2]*target.z - eqns[0*nc+1]*target.y) / eqns[0*nc+0];\n\n    if(isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x===Infinity || target.y===Infinity || target.z===Infinity){\n        throw \"Could not solve equation! Got x=[\"+target.toString()+\"], b=[\"+b.toString()+\"], A=[\"+this.toString()+\"]\";\n    }\n\n    return target;\n};\n\n/**\n * Get an element in the matrix by index. Index starts at 0, not 1!!!\n * @method e\n * @param {Number} row\n * @param {Number} column\n * @param {Number} value Optional. If provided, the matrix element will be set to this value.\n * @return {Number}\n */\nMat3.prototype.e = function( row , column ,value){\n    if(value===undefined){\n        return this.elements[column+3*row];\n    } else {\n        // Set value\n        this.elements[column+3*row] = value;\n    }\n};\n\n/**\n * Copy another matrix into this matrix object.\n * @method copy\n * @param {Mat3} source\n * @return {Mat3} this\n */\nMat3.prototype.copy = function(source){\n    for(var i=0; i < source.elements.length; i++){\n        this.elements[i] = source.elements[i];\n    }\n    return this;\n};\n\n/**\n * Returns a string representation of the matrix.\n * @method toString\n * @return string\n */\nMat3.prototype.toString = function(){\n    var r = \"\";\n    var sep = \",\";\n    for(var i=0; i<9; i++){\n        r += this.elements[i] + sep;\n    }\n    return r;\n};\n\n/**\n * reverse the matrix\n * @method reverse\n * @param {Mat3} target Optional. Target matrix to save in.\n * @return {Mat3} The solution x\n */\nMat3.prototype.reverse = function(target){\n\n    target = target || new Mat3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 6; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+6*0] = 1;\n    eqns[3+6*1] = 0;\n    eqns[3+6*2] = 0;\n    eqns[4+6*0] = 0;\n    eqns[4+6*1] = 1;\n    eqns[4+6*2] = 0;\n    eqns[5+6*0] = 0;\n    eqns[5+6*1] = 0;\n    eqns[5+6*2] = 1;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = nc; // num rows\n    var p;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do { // do line( i ) = line( i ) + line( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do { // do line( k ) = line( k ) - multiplier * line( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // eliminate the upper left triangle of the matrix\n    i = 2;\n    do {\n        j = i-1;\n        do {\n            var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n            np = nc;\n            do {\n                p = nc - np;\n                eqns[p+nc*j] =  eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n            } while (--np);\n        } while (j--);\n    } while (--i);\n\n    // operations on the diagonal\n    i = 2;\n    do {\n        var multiplier = 1 / eqns[i+nc*i];\n        np = nc;\n        do {\n            p = nc - np;\n            eqns[p+nc*i] = eqns[p+nc*i] * multiplier ;\n        } while (--np);\n    } while (i--);\n\n    i = 2;\n    do {\n        j = 2;\n        do {\n            p = eqns[nr+j+nc*i];\n            if( isNaN( p ) || p ===Infinity ){\n                throw \"Could not reverse! A=[\"+this.toString()+\"]\";\n            }\n            target.e( i , j , p );\n        } while (j--);\n    } while (i--);\n\n    return target;\n};\n\n/**\n * Set the matrix from a quaterion\n * @method setRotationFromQuaternion\n * @param {Quaternion} q\n */\nMat3.prototype.setRotationFromQuaternion = function( q ) {\n    var x = q.x, y = q.y, z = q.z, w = q.w,\n        x2 = x + x, y2 = y + y, z2 = z + z,\n        xx = x * x2, xy = x * y2, xz = x * z2,\n        yy = y * y2, yz = y * z2, zz = z * z2,\n        wx = w * x2, wy = w * y2, wz = w * z2,\n        e = this.elements;\n\n    e[3*0 + 0] = 1 - ( yy + zz );\n    e[3*0 + 1] = xy - wz;\n    e[3*0 + 2] = xz + wy;\n\n    e[3*1 + 0] = xy + wz;\n    e[3*1 + 1] = 1 - ( xx + zz );\n    e[3*1 + 2] = yz - wx;\n\n    e[3*2 + 0] = xz - wy;\n    e[3*2 + 1] = yz + wx;\n    e[3*2 + 2] = 1 - ( xx + yy );\n\n    return this;\n};\n\n/**\n * Transpose the matrix\n * @method transpose\n * @param  {Mat3} target Where to store the result.\n * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\n */\nMat3.prototype.transpose = function( target ) {\n    target = target || new Mat3();\n\n    var Mt = target.elements,\n        M = this.elements;\n\n    for(var i=0; i!==3; i++){\n        for(var j=0; j!==3; j++){\n            Mt[3*i + j] = M[3*j + i];\n        }\n    }\n\n    return target;\n};\n\n},{\"./Vec3\":30}],28:[function(_dereq_,module,exports){\nmodule.exports = Quaternion;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @class Quaternion\n * @constructor\n * @param {Number} x Multiplier of the imaginary basis vector i.\n * @param {Number} y Multiplier of the imaginary basis vector j.\n * @param {Number} z Multiplier of the imaginary basis vector k.\n * @param {Number} w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\nfunction Quaternion(x,y,z,w){\n    /**\n     * @property {Number} x\n     */\n    this.x = x!==undefined ? x : 0;\n\n    /**\n     * @property {Number} y\n     */\n    this.y = y!==undefined ? y : 0;\n\n    /**\n     * @property {Number} z\n     */\n    this.z = z!==undefined ? z : 0;\n\n    /**\n     * The multiplier of the real quaternion basis vector.\n     * @property {Number} w\n     */\n    this.w = w!==undefined ? w : 1;\n}\n\n/**\n * Set the value of the quaternion.\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {Number} w\n */\nQuaternion.prototype.set = function(x,y,z,w){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n};\n\n/**\n * Convert to a readable format\n * @method toString\n * @return string\n */\nQuaternion.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z+\",\"+this.w;\n};\n\n/**\n * Convert to an Array\n * @method toArray\n * @return Array\n */\nQuaternion.prototype.toArray = function(){\n    return [this.x, this.y, this.z, this.w];\n};\n\n/**\n * Set the quaternion components given an axis and an angle.\n * @method setFromAxisAngle\n * @param {Vec3} axis\n * @param {Number} angle in radians\n */\nQuaternion.prototype.setFromAxisAngle = function(axis,angle){\n    var s = Math.sin(angle*0.5);\n    this.x = axis.x * s;\n    this.y = axis.y * s;\n    this.z = axis.z * s;\n    this.w = Math.cos(angle*0.5);\n};\n\n/**\n * Converts the quaternion to axis/angle representation.\n * @method toAxisAngle\n * @param {Vec3} targetAxis Optional. A vector object to reuse for storing the axis.\n * @return Array An array, first elemnt is the axis and the second is the angle in radians.\n */\nQuaternion.prototype.toAxisAngle = function(targetAxis){\n    targetAxis = targetAxis || new Vec3();\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n    var angle = 2 * Math.acos(this.w);\n    var s = Math.sqrt(1-this.w*this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n    if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n        // if s close to zero then direction of axis not important\n        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n        targetAxis.y = this.y;\n        targetAxis.z = this.z;\n    } else {\n        targetAxis.x = this.x / s; // normalise axis\n        targetAxis.y = this.y / s;\n        targetAxis.z = this.z / s;\n    }\n    return [targetAxis,angle];\n};\n\nvar sfv_t1 = new Vec3(),\n    sfv_t2 = new Vec3();\n\n/**\n * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n * @method setFromVectors\n * @param {Vec3} u\n * @param {Vec3} v\n */\nQuaternion.prototype.setFromVectors = function(u,v){\n    if(u.isAntiparallelTo(v)){\n        var t1 = sfv_t1;\n        var t2 = sfv_t2;\n\n        u.tangents(t1,t2);\n        this.setFromAxisAngle(t1,Math.PI);\n    } else {\n        var a = u.cross(v);\n        this.x = a.x;\n        this.y = a.y;\n        this.z = a.z;\n        this.w = Math.sqrt(Math.pow(u.norm(),2) * Math.pow(v.norm(),2)) + u.dot(v);\n        this.normalize();\n    }\n};\n\n/**\n * Quaternion multiplication\n * @method mult\n * @param {Quaternion} q\n * @param {Quaternion} target Optional.\n * @return {Quaternion}\n */\nvar Quaternion_mult_va = new Vec3();\nvar Quaternion_mult_vb = new Vec3();\nvar Quaternion_mult_vaxvb = new Vec3();\nQuaternion.prototype.mult = function(q,target){\n    target = target || new Quaternion();\n    var w = this.w,\n        va = Quaternion_mult_va,\n        vb = Quaternion_mult_vb,\n        vaxvb = Quaternion_mult_vaxvb;\n\n    va.set(this.x,this.y,this.z);\n    vb.set(q.x,q.y,q.z);\n    target.w = w*q.w - va.dot(vb);\n    va.cross(vb,vaxvb);\n\n    target.x = w * vb.x + q.w*va.x + vaxvb.x;\n    target.y = w * vb.y + q.w*va.y + vaxvb.y;\n    target.z = w * vb.z + q.w*va.z + vaxvb.z;\n\n    return target;\n};\n\n/**\n * Get the inverse quaternion rotation.\n * @method inverse\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.inverse = function(target){\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n    target = target || new Quaternion();\n\n    this.conjugate(target);\n    var inorm2 = 1/(x*x + y*y + z*z + w*w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n\n    return target;\n};\n\n/**\n * Get the quaternion conjugate\n * @method conjugate\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.conjugate = function(target){\n    target = target || new Quaternion();\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n\n    return target;\n};\n\n/**\n * Normalize the quaternion. Note that this changes the values of the quaternion.\n * @method normalize\n */\nQuaternion.prototype.normalize = function(){\n    var l = Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);\n    if ( l === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        l = 1 / l;\n        this.x *= l;\n        this.y *= l;\n        this.z *= l;\n        this.w *= l;\n    }\n};\n\n/**\n * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n * @method normalizeFast\n * @see http://jsperf.com/fast-quaternion-normalization\n * @author unphased, https://github.com/unphased\n */\nQuaternion.prototype.normalizeFast = function () {\n    var f = (3.0-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2.0;\n    if ( f === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        this.x *= f;\n        this.y *= f;\n        this.z *= f;\n        this.w *= f;\n    }\n};\n\n/**\n * Multiply the quaternion by a vector\n * @method vmult\n * @param {Vec3} v\n * @param {Vec3} target Optional\n * @return {Vec3}\n */\nQuaternion.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var x = v.x,\n        y = v.y,\n        z = v.z;\n\n    var qx = this.x,\n        qy = this.y,\n        qz = this.z,\n        qw = this.w;\n\n    // q*v\n    var ix =  qw * x + qy * z - qz * y,\n    iy =  qw * y + qz * x - qx * z,\n    iz =  qw * z + qx * y - qy * x,\n    iw = -qx * x - qy * y - qz * z;\n\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return target;\n};\n\n/**\n * Copies value of source to this quaternion.\n * @method copy\n * @param {Quaternion} source\n * @return {Quaternion} this\n */\nQuaternion.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    this.w = source.w;\n    return this;\n};\n\n/**\n * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n * @method toEuler\n * @param {Vec3} target\n * @param string order Three-character string e.g. \"YZX\", which also is default.\n */\nQuaternion.prototype.toEuler = function(target,order){\n    order = order || \"YZX\";\n\n    var heading, attitude, bank;\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n\n    switch(order){\n    case \"YZX\":\n        var test = x*y + z*w;\n        if (test > 0.499) { // singularity at north pole\n            heading = 2 * Math.atan2(x,w);\n            attitude = Math.PI/2;\n            bank = 0;\n        }\n        if (test < -0.499) { // singularity at south pole\n            heading = -2 * Math.atan2(x,w);\n            attitude = - Math.PI/2;\n            bank = 0;\n        }\n        if(isNaN(heading)){\n            var sqx = x*x;\n            var sqy = y*y;\n            var sqz = z*z;\n            heading = Math.atan2(2*y*w - 2*x*z , 1 - 2*sqy - 2*sqz); // Heading\n            attitude = Math.asin(2*test); // attitude\n            bank = Math.atan2(2*x*w - 2*y*z , 1 - 2*sqx - 2*sqz); // bank\n        }\n        break;\n    default:\n        throw new Error(\"Euler order \"+order+\" not supported yet.\");\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n};\n\n/**\n * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n * @method setFromEuler\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n */\nQuaternion.prototype.setFromEuler = function ( x, y, z, order ) {\n    order = order || \"XYZ\";\n\n    var c1 = Math.cos( x / 2 );\n    var c2 = Math.cos( y / 2 );\n    var c3 = Math.cos( z / 2 );\n    var s1 = Math.sin( x / 2 );\n    var s2 = Math.sin( y / 2 );\n    var s3 = Math.sin( z / 2 );\n\n    if ( order === 'XYZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'YXZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'ZXY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'ZYX' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'YZX' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'XZY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    }\n\n    return this;\n\n};\n\nQuaternion.prototype.clone = function(){\n    return new Quaternion(this.x, this.y, this.z, this.w);\n};\n},{\"./Vec3\":30}],29:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('./Vec3');\nvar Quaternion = _dereq_('./Quaternion');\n\nmodule.exports = Transform;\n\n/**\n * @class Transform\n * @constructor\n */\nfunction Transform(options) {\n    options = options || {};\n\n\t/**\n\t * @property {Vec3} position\n\t */\n\tthis.position = new Vec3();\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n\t/**\n\t * @property {Quaternion} quaternion\n\t */\n\tthis.quaternion = new Quaternion();\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n}\n\nvar tmpQuat = new Quaternion();\n\n/**\n * @static\n * @method pointToLocaFrame\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {Vec3} worldPoint\n * @param {Vec3} result\n */\nTransform.pointToLocalFrame = function(position, quaternion, worldPoint, result){\n    var result = result || new Vec3();\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat);\n    tmpQuat.vmult(result, result);\n    return result;\n};\n\n/**\n * Get a global point in local transform coordinates.\n * @method pointToLocal\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToLocal = function(worldPoint, result){\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n};\n\n/**\n * @static\n * @method pointToWorldFrame\n * @param {Vec3} position\n * @param {Vec3} quaternion\n * @param {Vec3} localPoint\n * @param {Vec3} result\n */\nTransform.pointToWorldFrame = function(position, quaternion, localPoint, result){\n    var result = result || new Vec3();\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n};\n\n/**\n * Get a local point in global transform coordinates.\n * @method pointToWorld\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToWorld = function(localPoint, result){\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n};\n\n\nTransform.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToWorldFrame = function(quaternion, localVector, result){\n    quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToLocalFrame = function(position, quaternion, worldVector, result){\n    var result = result || new Vec3();\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n};\n\n},{\"./Quaternion\":28,\"./Vec3\":30}],30:[function(_dereq_,module,exports){\nmodule.exports = Vec3;\n\nvar Mat3 = _dereq_('./Mat3');\n\n/**\n * 3-dimensional vector\n * @class Vec3\n * @constructor\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @author schteppe\n * @example\n *     var v = new Vec3(1, 2, 3);\n *     console.log('x=' + v.x); // x=1\n */\nfunction Vec3(x,y,z){\n    /**\n     * @property x\n     * @type {Number}\n     */\n    this.x = x||0.0;\n\n    /**\n     * @property y\n     * @type {Number}\n     */\n    this.y = y||0.0;\n\n    /**\n     * @property z\n     * @type {Number}\n     */\n    this.z = z||0.0;\n}\n\n/**\n * @static\n * @property {Vec3} ZERO\n */\nVec3.ZERO = new Vec3(0, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_X\n */\nVec3.UNIT_X = new Vec3(1, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Y\n */\nVec3.UNIT_Y = new Vec3(0, 1, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Z\n */\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n\n/**\n * Vector cross product\n * @method cross\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.cross = function(v,target){\n    var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;\n    target = target || new Vec3();\n\n    target.x = (y * vz) - (z * vy);\n    target.y = (z * vx) - (x * vz);\n    target.z = (x * vy) - (y * vx);\n\n    return target;\n};\n\n/**\n * Set the vectors' 3 elements\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @return Vec3\n */\nVec3.prototype.set = function(x,y,z){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n};\n\n/**\n * Set all components of the vector to zero.\n * @method setZero\n */\nVec3.prototype.setZero = function(){\n    this.x = this.y = this.z = 0;\n};\n\n/**\n * Vector addition\n * @method vadd\n * @param {Vec3} v\n * @param {Vec3} target Optional.\n * @return {Vec3}\n */\nVec3.prototype.vadd = function(v,target){\n    if(target){\n        target.x = v.x + this.x;\n        target.y = v.y + this.y;\n        target.z = v.z + this.z;\n    } else {\n        return new Vec3(this.x + v.x,\n                               this.y + v.y,\n                               this.z + v.z);\n    }\n};\n\n/**\n * Vector subtraction\n * @method vsub\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.vsub = function(v,target){\n    if(target){\n        target.x = this.x - v.x;\n        target.y = this.y - v.y;\n        target.z = this.z - v.z;\n    } else {\n        return new Vec3(this.x-v.x,\n                               this.y-v.y,\n                               this.z-v.z);\n    }\n};\n\n/**\n * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n * @method crossmat\n * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\n * @return {Mat3}\n */\nVec3.prototype.crossmat = function(){\n    return new Mat3([     0,  -this.z,   this.y,\n                            this.z,        0,  -this.x,\n                           -this.y,   this.x,        0]);\n};\n\n/**\n * Normalize the vector. Note that this changes the values in the vector.\n * @method normalize\n * @return {Number} Returns the norm of the vector\n */\nVec3.prototype.normalize = function(){\n    var x=this.x, y=this.y, z=this.z;\n    var n = Math.sqrt(x*x + y*y + z*z);\n    if(n>0.0){\n        var invN = 1/n;\n        this.x *= invN;\n        this.y *= invN;\n        this.z *= invN;\n    } else {\n        // Make something up\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n    return n;\n};\n\n/**\n * Get the version of this vector that is of length 1.\n * @method unit\n * @param {Vec3} target Optional target to save in\n * @return {Vec3} Returns the unit vector\n */\nVec3.prototype.unit = function(target){\n    target = target || new Vec3();\n    var x=this.x, y=this.y, z=this.z;\n    var ninv = Math.sqrt(x*x + y*y + z*z);\n    if(ninv>0.0){\n        ninv = 1.0/ninv;\n        target.x = x * ninv;\n        target.y = y * ninv;\n        target.z = z * ninv;\n    } else {\n        target.x = 1;\n        target.y = 0;\n        target.z = 0;\n    }\n    return target;\n};\n\n/**\n * Get the length of the vector\n * @method norm\n * @return {Number}\n * @deprecated Use .length() instead\n */\nVec3.prototype.norm = function(){\n    var x=this.x, y=this.y, z=this.z;\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Get the length of the vector\n * @method length\n * @return {Number}\n */\nVec3.prototype.length = Vec3.prototype.norm;\n\n/**\n * Get the squared length of the vector\n * @method norm2\n * @return {Number}\n * @deprecated Use .lengthSquared() instead.\n */\nVec3.prototype.norm2 = function(){\n    return this.dot(this);\n};\n\n/**\n * Get the squared length of the vector.\n * @method lengthSquared\n * @return {Number}\n */\nVec3.prototype.lengthSquared = Vec3.prototype.norm2;\n\n/**\n * Get distance from this point to another point\n * @method distanceTo\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceTo = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return Math.sqrt((px-x)*(px-x)+\n                     (py-y)*(py-y)+\n                     (pz-z)*(pz-z));\n};\n\n/**\n * Get squared distance from this point to another point\n * @method distanceSquared\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceSquared = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return (px-x)*(px-x) + (py-y)*(py-y) + (pz-z)*(pz-z);\n};\n\n/**\n * Multiply all the components of the vector with a scalar.\n * @deprecated Use .scale instead\n * @method mult\n * @param {Number} scalar\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n * @deprecated Use .scale() instead\n */\nVec3.prototype.mult = function(scalar,target){\n    target = target || new Vec3();\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n};\n\n/**\n * Multiply the vector with a scalar.\n * @method scale\n * @param {Number} scalar\n * @param {Vec3} target\n * @return {Vec3}\n */\nVec3.prototype.scale = Vec3.prototype.mult;\n\n/**\n * Calculate dot product\n * @method dot\n * @param {Vec3} v\n * @return {Number}\n */\nVec3.prototype.dot = function(v){\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n};\n\n/**\n * @method isZero\n * @return bool\n */\nVec3.prototype.isZero = function(){\n    return this.x===0 && this.y===0 && this.z===0;\n};\n\n/**\n * Make the vector point in the opposite direction.\n * @method negate\n * @param {Vec3} target Optional target to save in\n * @return {Vec3}\n */\nVec3.prototype.negate = function(target){\n    target = target || new Vec3();\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n};\n\n/**\n * Compute two artificial tangents to the vector\n * @method tangents\n * @param {Vec3} t1 Vector object to save the first tangent in\n * @param {Vec3} t2 Vector object to save the second tangent in\n */\nvar Vec3_tangents_n = new Vec3();\nvar Vec3_tangents_randVec = new Vec3();\nVec3.prototype.tangents = function(t1,t2){\n    var norm = this.norm();\n    if(norm>0.0){\n        var n = Vec3_tangents_n;\n        var inorm = 1/norm;\n        n.set(this.x*inorm,this.y*inorm,this.z*inorm);\n        var randVec = Vec3_tangents_randVec;\n        if(Math.abs(n.x) < 0.9){\n            randVec.set(1,0,0);\n            n.cross(randVec,t1);\n        } else {\n            randVec.set(0,1,0);\n            n.cross(randVec,t1);\n        }\n        n.cross(t1,t2);\n    } else {\n        // The normal length is zero, make something up\n        t1.set(1, 0, 0);\n        t2.set(0, 1, 0);\n    }\n};\n\n/**\n * Converts to a more readable format\n * @method toString\n * @return string\n */\nVec3.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z;\n};\n\n/**\n * Converts to an array\n * @method toArray\n * @return Array\n */\nVec3.prototype.toArray = function(){\n    return [this.x, this.y, this.z];\n};\n\n/**\n * Copies value of source to this vector.\n * @method copy\n * @param {Vec3} source\n * @return {Vec3} this\n */\nVec3.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    return this;\n};\n\n\n/**\n * Do a linear interpolation between two vectors\n * @method lerp\n * @param {Vec3} v\n * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n * @param {Vec3} target\n */\nVec3.prototype.lerp = function(v,t,target){\n    var x=this.x, y=this.y, z=this.z;\n    target.x = x + (v.x-x)*t;\n    target.y = y + (v.y-y)*t;\n    target.z = z + (v.z-z)*t;\n};\n\n/**\n * Check if a vector equals is almost equal to another one.\n * @method almostEquals\n * @param {Vec3} v\n * @param {Number} precision\n * @return bool\n */\nVec3.prototype.almostEquals = function(v,precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x-v.x)>precision ||\n        Math.abs(this.y-v.y)>precision ||\n        Math.abs(this.z-v.z)>precision){\n        return false;\n    }\n    return true;\n};\n\n/**\n * Check if a vector is almost zero\n * @method almostZero\n * @param {Number} precision\n */\nVec3.prototype.almostZero = function(precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x)>precision ||\n        Math.abs(this.y)>precision ||\n        Math.abs(this.z)>precision){\n        return false;\n    }\n    return true;\n};\n\nvar antip_neg = new Vec3();\n\n/**\n * Check if the vector is anti-parallel to another vector.\n * @method isAntiparallelTo\n * @param  {Vec3}  v\n * @param  {Number}  precision Set to zero for exact comparisons\n * @return {Boolean}\n */\nVec3.prototype.isAntiparallelTo = function(v,precision){\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(v,precision);\n};\n\n/**\n * Clone the vector\n * @method clone\n * @return {Vec3}\n */\nVec3.prototype.clone = function(){\n    return new Vec3(this.x, this.y, this.z);\n};\n},{\"./Mat3\":27}],31:[function(_dereq_,module,exports){\nmodule.exports = Body;\n\nvar EventTarget = _dereq_('../utils/EventTarget');\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Material = _dereq_('../material/Material');\nvar AABB = _dereq_('../collision/AABB');\nvar Box = _dereq_('../shapes/Box');\n\n/**\n * Base class for all body types.\n * @class Body\n * @constructor\n * @extends EventTarget\n * @param {object} [options]\n * @param {Vec3} [options.position]\n * @param {Vec3} [options.velocity]\n * @param {Vec3} [options.angularVelocity]\n * @param {Quaternion} [options.quaternion]\n * @param {number} [options.mass]\n * @param {Material} [options.material]\n * @param {number} [options.type]\n * @param {number} [options.linearDamping=0.01]\n * @param {number} [options.angularDamping=0.01]\n * @param {boolean} [options.allowSleep=true]\n * @param {number} [options.sleepSpeedLimit=0.1]\n * @param {number} [options.sleepTimeLimit=1]\n * @param {number} [options.collisionFilterGroup=1]\n * @param {number} [options.collisionFilterMask=1]\n * @param {boolean} [options.fixedRotation=false]\n * @param {Body} [options.shape]\n * @example\n *     var body = new Body({\n *         mass: 1\n *     });\n *     var shape = new Sphere(1);\n *     body.addShape(shape);\n *     world.add(body);\n */\nfunction Body(options){\n    options = options || {};\n\n    EventTarget.apply(this);\n\n    this.id = Body.idCounter++;\n\n    /**\n     * Reference to the world the body is living in\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, \"this\" will refer to this Body object.\n     * @property preStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.preStep = null;\n\n    /**\n     * Callback function that is used AFTER stepping the system. Inside the function, \"this\" will refer to this Body object.\n     * @property postStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.postStep = null;\n\n    this.vlambda = new Vec3();\n\n    /**\n     * @property {Number} collisionFilterGroup\n     */\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) === 'number' ? options.collisionFilterGroup : 1;\n\n    /**\n     * @property {Number} collisionFilterMask\n     */\n    this.collisionFilterMask = typeof(options.collisionFilterMask) === 'number' ? options.collisionFilterMask : 1;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {Number} collisionResponse\n     */\n\tthis.collisionResponse = true;\n\n    /**\n     * @property position\n     * @type {Vec3}\n     */\n    this.position = new Vec3();\n\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n    /**\n     * @property {Vec3} previousPosition\n     */\n    this.previousPosition = new Vec3();\n\n    /**\n     * Initial position of the body\n     * @property initPosition\n     * @type {Vec3}\n     */\n    this.initPosition = new Vec3();\n\n    /**\n     * @property velocity\n     * @type {Vec3}\n     */\n    this.velocity = new Vec3();\n\n    if(options.velocity){\n        this.velocity.copy(options.velocity);\n    }\n\n    /**\n     * @property initVelocity\n     * @type {Vec3}\n     */\n    this.initVelocity = new Vec3();\n\n    /**\n     * Linear force on the body\n     * @property force\n     * @type {Vec3}\n     */\n    this.force = new Vec3();\n\n    var mass = typeof(options.mass) === 'number' ? options.mass : 0;\n\n    /**\n     * @property mass\n     * @type {Number}\n     * @default 0\n     */\n    this.mass = mass;\n\n    /**\n     * @property invMass\n     * @type {Number}\n     */\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n\n    /**\n     * @property material\n     * @type {Material}\n     */\n    this.material = options.material || null;\n\n    /**\n     * @property linearDamping\n     * @type {Number}\n     */\n    this.linearDamping = typeof(options.linearDamping) === 'number' ? options.linearDamping : 0.01;\n\n    /**\n     * One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.\n     * @property type\n     * @type {Number}\n     */\n    this.type = (mass <= 0.0 ? Body.STATIC : Body.DYNAMIC);\n    if(typeof(options.type) === typeof(Body.STATIC)){\n        this.type = options.type;\n    }\n\n    /**\n     * If true, the body will automatically fall to sleep.\n     * @property allowSleep\n     * @type {Boolean}\n     * @default true\n     */\n    this.allowSleep = typeof(options.allowSleep) !== 'undefined' ? options.allowSleep : true;\n\n    /**\n     * Current sleep state.\n     * @property sleepState\n     * @type {Number}\n     */\n    this.sleepState = 0;\n\n    /**\n     * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.\n     * @property sleepSpeedLimit\n     * @type {Number}\n     * @default 0.1\n     */\n    this.sleepSpeedLimit = typeof(options.sleepSpeedLimit) !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n\n    /**\n     * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.\n     * @property sleepTimeLimit\n     * @type {Number}\n     * @default 1\n     */\n    this.sleepTimeLimit = typeof(options.sleepTimeLimit) !== 'undefined' ? options.sleepTimeLimit : 1;\n\n    this.timeLastSleepy = 0;\n\n    this._wakeUpAfterNarrowphase = false;\n\n\n    /**\n     * Rotational force on the body, around center of mass\n     * @property {Vec3} torque\n     */\n    this.torque = new Vec3();\n\n    /**\n     * Orientation of the body\n     * @property quaternion\n     * @type {Quaternion}\n     */\n    this.quaternion = new Quaternion();\n\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n\n    /**\n     * @property initQuaternion\n     * @type {Quaternion}\n     */\n    this.initQuaternion = new Quaternion();\n\n    /**\n     * @property angularVelocity\n     * @type {Vec3}\n     */\n    this.angularVelocity = new Vec3();\n\n    if(options.angularVelocity){\n        this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    /**\n     * @property initAngularVelocity\n     * @type {Vec3}\n     */\n    this.initAngularVelocity = new Vec3();\n\n    this.interpolatedPosition = new Vec3();\n    this.interpolatedQuaternion = new Quaternion();\n\n    /**\n     * @property shapes\n     * @type {array}\n     */\n    this.shapes = [];\n\n    /**\n     * @property shapeOffsets\n     * @type {array}\n     */\n    this.shapeOffsets = [];\n\n    /**\n     * @property shapeOrientations\n     * @type {array}\n     */\n    this.shapeOrientations = [];\n\n    /**\n     * @property inertia\n     * @type {Vec3}\n     */\n    this.inertia = new Vec3();\n\n    /**\n     * @property {Vec3} invInertia\n     */\n    this.invInertia = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorld\n     */\n    this.invInertiaWorld = new Mat3();\n\n    this.invMassSolve = 0;\n\n    /**\n     * @property {Vec3} invInertiaSolve\n     */\n    this.invInertiaSolve = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorldSolve\n     */\n    this.invInertiaWorldSolve = new Mat3();\n\n    /**\n     * Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.\n     * @property {Boolean} fixedRotation\n     * @default false\n     */\n    this.fixedRotation = typeof(options.fixedRotation) !== \"undefined\" ? options.fixedRotation : false;\n\n    /**\n     * @property {Number} angularDamping\n     */\n    this.angularDamping = typeof(options.angularDamping) !== 'undefined' ? options.angularDamping : 0.01;\n\n    /**\n     * @property aabb\n     * @type {AABB}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * Indicates if the AABB needs to be updated before use.\n     * @property aabbNeedsUpdate\n     * @type {Boolean}\n     */\n    this.aabbNeedsUpdate = true;\n\n    this.wlambda = new Vec3();\n\n    if(options.shape){\n        this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n}\nBody.prototype = new EventTarget();\nBody.prototype.constructor = Body;\n\n/**\n * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n * @static\n * @property DYNAMIC\n * @type {Number}\n */\nBody.DYNAMIC = 1;\n\n/**\n * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n * @static\n * @property STATIC\n * @type {Number}\n */\nBody.STATIC = 2;\n\n/**\n * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n * @static\n * @property KINEMATIC\n * @type {Number}\n */\nBody.KINEMATIC = 4;\n\n\n\n/**\n * @static\n * @property AWAKE\n * @type {number}\n */\nBody.AWAKE = 0;\n\n/**\n * @static\n * @property SLEEPY\n * @type {number}\n */\nBody.SLEEPY = 1;\n\n/**\n * @static\n * @property SLEEPING\n * @type {number}\n */\nBody.SLEEPING = 2;\n\nBody.idCounter = 0;\n\n/**\n * Wake the body up.\n * @method wakeUp\n */\nBody.prototype.wakeUp = function(){\n    var s = this.sleepState;\n    this.sleepState = 0;\n    if(s === Body.SLEEPING){\n        this.dispatchEvent({type:\"wakeup\"});\n    }\n};\n\n/**\n * Force body sleep\n * @method sleep\n */\nBody.prototype.sleep = function(){\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0,0,0);\n    this.angularVelocity.set(0,0,0);\n};\n\nBody.sleepyEvent = {\n    type: \"sleepy\"\n};\n\nBody.sleepEvent = {\n    type: \"sleep\"\n};\n\n/**\n * Called every timestep to update internal sleep timer and change sleep state if needed.\n * @method sleepTick\n * @param {Number} time The world time in seconds\n */\nBody.prototype.sleepTick = function(time){\n    if(this.allowSleep){\n        var sleepState = this.sleepState;\n        var speedSquared = this.velocity.norm2() + this.angularVelocity.norm2();\n        var speedLimitSquared = Math.pow(this.sleepSpeedLimit,2);\n        if(sleepState===Body.AWAKE && speedSquared < speedLimitSquared){\n            this.sleepState = Body.SLEEPY; // Sleepy\n            this.timeLastSleepy = time;\n            this.dispatchEvent(Body.sleepyEvent);\n        } else if(sleepState===Body.SLEEPY && speedSquared > speedLimitSquared){\n            this.wakeUp(); // Wake up\n        } else if(sleepState===Body.SLEEPY && (time - this.timeLastSleepy ) > this.sleepTimeLimit){\n            this.sleep(); // Sleeping\n            this.dispatchEvent(Body.sleepEvent);\n        }\n    }\n};\n\n/**\n * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n * @method updateSolveMassProperties\n */\nBody.prototype.updateSolveMassProperties = function(){\n    if(this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC){\n        this.invMassSolve = 0;\n        this.invInertiaSolve.setZero();\n        this.invInertiaWorldSolve.setZero();\n    } else {\n        this.invMassSolve = this.invMass;\n        this.invInertiaSolve.copy(this.invInertia);\n        this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n};\n\n/**\n * Convert a world point to local body frame.\n * @method pointToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToLocalFrame = function(worldPoint,result){\n    var result = result || new Vec3();\n    worldPoint.vsub(this.position,result);\n    this.quaternion.conjugate().vmult(result,result);\n    return result;\n};\n\n/**\n * Convert a world vector to local body frame.\n * @method vectorToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToLocalFrame = function(worldVector, result){\n    var result = result || new Vec3();\n    this.quaternion.conjugate().vmult(worldVector,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method pointToWorldFrame\n * @param  {Vec3} localPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToWorldFrame = function(localPoint,result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localPoint,result);\n    result.vadd(this.position,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method vectorToWorldFrame\n * @param  {Vec3} localVector\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nvar tmpVec = new Vec3();\nvar tmpQuat = new Quaternion();\n\n/**\n * Add a shape to the body with a local offset and orientation.\n * @method addShape\n * @param {Shape} shape\n * @param {Vec3} offset\n * @param {Quaternion} quaternion\n * @return {Body} The body object, for chainability.\n */\nBody.prototype.addShape = function(shape, _offset, _orientation){\n    var offset = new Vec3();\n    var orientation = new Quaternion();\n\n    if(_offset){\n        offset.copy(_offset);\n    }\n    if(_orientation){\n        orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n\n    this.aabbNeedsUpdate = true;\n\n    return this;\n};\n\n/**\n * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n * @method updateBoundingRadius\n */\nBody.prototype.updateBoundingRadius = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        N = shapes.length,\n        radius = 0;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n        shape.updateBoundingSphereRadius();\n        var offset = shapeOffsets[i].norm(),\n            r = shape.boundingSphereRadius;\n        if(offset + r > radius){\n            radius = offset + r;\n        }\n    }\n\n    this.boundingRadius = radius;\n};\n\nvar computeAABB_shapeAABB = new AABB();\n\n/**\n * Updates the .aabb\n * @method computeAABB\n * @todo rename to updateAABB()\n */\nBody.prototype.computeAABB = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        shapeOrientations = this.shapeOrientations,\n        N = shapes.length,\n        offset = tmpVec,\n        orientation = tmpQuat,\n        bodyQuat = this.quaternion,\n        aabb = this.aabb,\n        shapeAABB = computeAABB_shapeAABB;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n\n        // Get shape world quaternion\n        shapeOrientations[i].mult(bodyQuat, orientation);\n\n        // Get shape world position\n        orientation.vmult(shapeOffsets[i], offset);\n        offset.vadd(this.position, offset);\n\n        // vec2.rotate(offset, shapeOffsets[i], bodyAngle);\n        // vec2.add(offset, offset, this.position);\n\n        // Get shape AABB\n        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n        if(i === 0){\n            aabb.copy(shapeAABB);\n        } else {\n            aabb.extend(shapeAABB);\n        }\n    }\n\n    this.aabbNeedsUpdate = false;\n};\n\nvar uiw_m1 = new Mat3(),\n    uiw_m2 = new Mat3(),\n    uiw_m3 = new Mat3();\n\n/**\n * Update .inertiaWorld and .invInertiaWorld\n * @method updateInertiaWorld\n */\nBody.prototype.updateInertiaWorld = function(force){\n    var I = this.invInertia;\n    if (I.x === I.y && I.y === I.z && !force) {\n        // If inertia M = s*I, where I is identity and s a scalar, then\n        //    R*M*R' = R*(s*I)*R' = s*R*I*R' = s*R*R' = s*I = M\n        // where R is the rotation matrix.\n        // In other words, we don't have to transform the inertia if all\n        // inertia diagonal entries are equal.\n    } else {\n        var m1 = uiw_m1,\n            m2 = uiw_m2,\n            m3 = uiw_m3;\n        m1.setRotationFromQuaternion(this.quaternion);\n        m1.transpose(m2);\n        m1.scale(I,m1);\n        m1.mmult(m2,this.invInertiaWorld);\n        //m3.getTrace(this.invInertiaWorld);\n    }\n\n    /*\n    this.quaternion.vmult(this.inertia,this.inertiaWorld);\n    this.quaternion.vmult(this.invInertia,this.invInertiaWorld);\n    */\n};\n\n/**\n * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.\n * @method applyForce\n * @param  {Vec3} force The amount of force to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyForce_r = new Vec3();\nvar Body_applyForce_rotForce = new Vec3();\nBody.prototype.applyForce = function(force,worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyForce_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced rotational force\n    var rotForce = Body_applyForce_rotForce;\n    r.cross(force,rotForce);\n\n    // Add linear force\n    this.force.vadd(force,this.force);\n\n    // Add rotational force\n    this.torque.vadd(rotForce,this.torque);\n};\n\n/**\n * Apply force to a local point in the body.\n * @method applyLocalForce\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalForce_worldForce = new Vec3();\nvar Body_applyLocalForce_worldPoint = new Vec3();\nBody.prototype.applyLocalForce = function(localForce, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldForce = Body_applyLocalForce_worldForce;\n    var worldPoint = Body_applyLocalForce_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyForce(worldForce, worldPoint);\n};\n\n/**\n * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.\n * @method applyImpulse\n * @param  {Vec3} impulse The amount of impulse to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyImpulse_r = new Vec3();\nvar Body_applyImpulse_velo = new Vec3();\nvar Body_applyImpulse_rotVelo = new Vec3();\nBody.prototype.applyImpulse = function(impulse, worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyImpulse_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced central impulse velocity\n    var velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.mult(this.invMass,velo);\n\n    // Add linear impulse\n    this.velocity.vadd(velo, this.velocity);\n\n    // Compute produced rotational impulse velocity\n    var rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse,rotVelo);\n\n    /*\n    rotVelo.x *= this.invInertia.x;\n    rotVelo.y *= this.invInertia.y;\n    rotVelo.z *= this.invInertia.z;\n    */\n    this.invInertiaWorld.vmult(rotVelo,rotVelo);\n\n    // Add rotational Impulse\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n};\n\n/**\n * Apply locally-defined impulse to a local point in the body.\n * @method applyLocalImpulse\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalImpulse_worldImpulse = new Vec3();\nvar Body_applyLocalImpulse_worldPoint = new Vec3();\nBody.prototype.applyLocalImpulse = function(localImpulse, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    var worldPoint = Body_applyLocalImpulse_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyImpulse(worldImpulse, worldPoint);\n};\n\nvar Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Should be called whenever you change the body shape or mass.\n * @method updateMassProperties\n */\nBody.prototype.updateMassProperties = function(){\n    var halfExtents = Body_updateMassProperties_halfExtents;\n\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    var I = this.inertia;\n    var fixed = this.fixedRotation;\n\n    // Approximate with AABB box\n    this.computeAABB();\n    halfExtents.set(\n        (this.aabb.upperBound.x-this.aabb.lowerBound.x) / 2,\n        (this.aabb.upperBound.y-this.aabb.lowerBound.y) / 2,\n        (this.aabb.upperBound.z-this.aabb.lowerBound.z) / 2\n    );\n    Box.calculateInertia(halfExtents, this.mass, I);\n\n    this.invInertia.set(\n        I.x > 0 && !fixed ? 1.0 / I.x : 0,\n        I.y > 0 && !fixed ? 1.0 / I.y : 0,\n        I.z > 0 && !fixed ? 1.0 / I.z : 0\n    );\n    this.updateInertiaWorld(true);\n};\n\n/**\n * Get world velocity of a point in the body.\n * @method getVelocityAtWorldPoint\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3} The result vector.\n */\nBody.prototype.getVelocityAtWorldPoint = function(worldPoint, result){\n    var r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n};\n\n},{\"../collision/AABB\":3,\"../material/Material\":25,\"../math/Mat3\":27,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/Shape\":43,\"../utils/EventTarget\":49}],32:[function(_dereq_,module,exports){\nvar Body = _dereq_('./Body');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Ray = _dereq_('../collision/Ray');\nvar WheelInfo = _dereq_('../objects/WheelInfo');\n\nmodule.exports = RaycastVehicle;\n\n/**\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n * @class RaycastVehicle\n * @constructor\n * @param {object} [options]\n * @param {Body} [options.chassisBody] The car chassis body.\n * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2\n * @param {integer} [options.indexLeftAxis]\n * @param {integer} [options.indexUpAxis]\n */\nfunction RaycastVehicle(options){\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    /**\n     * An array of WheelInfo objects.\n     * @property {array} wheelInfos\n     */\n    this.wheelInfos = [];\n\n    /**\n     * Will be set to true if the car is sliding.\n     * @property {boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * @property {World} world\n     */\n    this.world = null;\n\n    /**\n     * Index of the right axis, 0=x, 1=y, 2=z\n     * @property {integer} indexRightAxis\n     * @default 1\n     */\n    this.indexRightAxis = typeof(options.indexRightAxis) !== 'undefined' ? options.indexRightAxis : 1;\n\n    /**\n     * Index of the forward axis, 0=x, 1=y, 2=z\n     * @property {integer} indexForwardAxis\n     * @default 0\n     */\n    this.indexForwardAxis = typeof(options.indexForwardAxis) !== 'undefined' ? options.indexForwardAxis : 0;\n\n    /**\n     * Index of the up axis, 0=x, 1=y, 2=z\n     * @property {integer} indexUpAxis\n     * @default 2\n     */\n    this.indexUpAxis = typeof(options.indexUpAxis) !== 'undefined' ? options.indexUpAxis : 2;\n}\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpVec3 = new Vec3();\nvar tmpVec4 = new Vec3();\nvar tmpVec5 = new Vec3();\nvar tmpVec6 = new Vec3();\nvar tmpRay = new Ray();\n\n/**\n * Add a wheel. For information about the options, see WheelInfo.\n * @method addWheel\n * @param {object} [options]\n */\nRaycastVehicle.prototype.addWheel = function(options){\n    options = options || {};\n\n    var info = new WheelInfo(options);\n    var index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n\n    return index;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    var wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method applyEngineForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRaycastVehicle.prototype.applyEngineForce = function(value, wheelIndex){\n    this.wheelInfos[wheelIndex].engineForce = value;\n};\n\n/**\n * Set the braking force of a wheel\n * @method setBrake\n * @param {number} brake\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setBrake = function(brake, wheelIndex){\n    this.wheelInfos[wheelIndex].brake = brake;\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    world.add(this.chassisBody);\n    var that = this;\n    this.preStepCallback = function(){\n        that.updateVehicle(world.dt);\n    };\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n};\n\n/**\n * Get one of the wheel axles, world-oriented.\n * @private\n * @method getVehicleAxisWorld\n * @param  {integer} axisIndex\n * @param  {Vec3} result\n */\nRaycastVehicle.prototype.getVehicleAxisWorld = function(axisIndex, result){\n    result.set(\n        axisIndex === 0 ? 1 : 0,\n        axisIndex === 1 ? 1 : 0,\n        axisIndex === 2 ? 1 : 0\n    );\n    this.chassisBody.vectorToWorldFrame(result, result);\n};\n\nRaycastVehicle.prototype.updateVehicle = function(timeStep){\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n\n    for (var i = 0; i < numWheels; i++) {\n        this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.norm();\n\n    var forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0){\n        this.currentVehicleSpeedKmHour *= -1;\n    }\n\n    // simulate suspension\n    for (var i = 0; i < numWheels; i++) {\n        this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n\n    var impulse = new Vec3();\n    var relpos = new Vec3();\n    for (var i = 0; i < numWheels; i++) {\n        //apply suspension force\n        var wheel = wheelInfos[i];\n        var suspensionForce = wheel.suspensionForce;\n        if (suspensionForce > wheel.maxSuspensionForce) {\n            suspensionForce = wheel.maxSuspensionForce;\n        }\n        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n\n        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.applyImpulse(impulse, wheel.raycastResult.hitPointWorld/*relpos*/);\n    }\n\n    this.updateFriction(timeStep);\n\n    var hitNormalWorldScaledWithProj = new Vec3();\n    var fwd  = new Vec3();\n    var vel = new Vec3();\n    for (i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        //var relpos = new Vec3();\n        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel);\n\n        // Hack to get the rotation in the correct direction\n        var m = 1;\n        switch(this.indexUpAxis){\n        case 1:\n            m = -1;\n            break;\n        }\n\n        if (wheel.isInContact) {\n\n            this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n            var proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n            wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n\n            fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n\n            var proj2 = fwd.dot(vel);\n            wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n        }\n\n        if((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed){\n            // Apply custom rotation when accelerating and sliding\n            wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n        }\n\n        // Lock wheels\n        if(Math.abs(wheel.brake) > Math.abs(wheel.engineForce)){\n            wheel.deltaRotation = 0;\n        }\n\n        wheel.rotation += wheel.deltaRotation; // Use the old value\n        wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n};\n\nRaycastVehicle.prototype.updateSuspension = function(deltaTime) {\n    var chassisBody = this.chassisBody;\n    var chassisMass = chassisBody.mass;\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n\n    for (var w_it = 0; w_it < numWheels; w_it++){\n        var wheel = wheelInfos[w_it];\n\n        if (wheel.isInContact){\n            var force;\n\n            // Spring\n            var susp_length = wheel.suspensionRestLength;\n            var current_length = wheel.suspensionLength;\n            var length_diff = (susp_length - current_length);\n\n            force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension;\n\n            // Damper\n            var projected_rel_vel = wheel.suspensionRelativeVelocity;\n            var susp_damping;\n            if (projected_rel_vel < 0) {\n                susp_damping = wheel.dampingCompression;\n            } else {\n                susp_damping = wheel.dampingRelaxation;\n            }\n            force -= susp_damping * projected_rel_vel;\n\n            wheel.suspensionForce = force * chassisMass;\n            if (wheel.suspensionForce < 0) {\n                wheel.suspensionForce = 0;\n            }\n        } else {\n            wheel.suspensionForce = 0;\n        }\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    world.remove(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n};\n\nvar castRay_rayvector = new Vec3();\nvar castRay_target = new Vec3();\nRaycastVehicle.prototype.castRay = function(wheel) {\n    var rayvector = castRay_rayvector;\n    var target = castRay_target;\n\n    this.updateWheelTransformWorld(wheel);\n    var chassisBody = this.chassisBody;\n\n    var depth = -1;\n\n    var raylen = wheel.suspensionRestLength + wheel.radius;\n\n    wheel.directionWorld.scale(raylen, rayvector);\n    var source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    var raycastResult = wheel.raycastResult;\n\n    var param = 0;\n\n    raycastResult.reset();\n    // Turn off ray collision with the chassis temporarily\n    var oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false;\n\n    // Cast ray against world\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n\n    var object = raycastResult.body;\n\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n        depth = raycastResult.distance;\n        wheel.raycastResult.hitNormalWorld  = raycastResult.hitNormalWorld;\n        wheel.isInContact = true;\n\n        var hitDistance = raycastResult.distance;\n        wheel.suspensionLength = hitDistance - wheel.radius;\n\n        // clamp on max suspension travel\n        var minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n        var maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n        if (wheel.suspensionLength < minSuspensionLength) {\n            wheel.suspensionLength = minSuspensionLength;\n        }\n        if (wheel.suspensionLength > maxSuspensionLength) {\n            wheel.suspensionLength = maxSuspensionLength;\n            wheel.raycastResult.reset();\n        }\n\n        var denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n\n        var chassis_velocity_at_contactPoint = new Vec3();\n        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n\n        var projVel = wheel.raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n\n        if (denominator >= -0.1) {\n            wheel.suspensionRelativeVelocity = 0;\n            wheel.clippedInvContactDotSuspension = 1 / 0.1;\n        } else {\n            var inv = -1 / denominator;\n            wheel.suspensionRelativeVelocity = projVel * inv;\n            wheel.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n\n        //put wheel info as in rest position\n        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n        wheel.suspensionRelativeVelocity = 0.0;\n        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n        wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n};\n\nRaycastVehicle.prototype.updateWheelTransformWorld = function(wheel){\n    wheel.isInContact = false;\n    var chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n};\n\n\n/**\n * Update one of the wheel transform.\n * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n * @method updateWheelTransform\n * @param {integer} wheelIndex The wheel index to update.\n */\nRaycastVehicle.prototype.updateWheelTransform = function(wheelIndex){\n    var up = tmpVec4;\n    var right = tmpVec5;\n    var fwd = tmpVec6;\n\n    var wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize();\n\n    // Rotate around steering over the wheelAxle\n    var steering = wheel.steering;\n    var steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n\n    var rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation);\n\n    // World rotation of the wheel\n    var q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n\n    q.normalize();\n\n    // world position of the wheel\n    var p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n};\n\nvar directions = [\n    new Vec3(1, 0, 0),\n    new Vec3(0, 1, 0),\n    new Vec3(0, 0, 1)\n];\n\n/**\n * Get the world transform of one of the wheels\n * @method getWheelTransformWorld\n * @param  {integer} wheelIndex\n * @return {Transform}\n */\nRaycastVehicle.prototype.getWheelTransformWorld = function(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n};\n\n\nvar updateFriction_surfNormalWS_scaled_proj = new Vec3();\nvar updateFriction_axle = [];\nvar updateFriction_forwardWS = [];\nvar sideFrictionStiffness2 = 1;\nRaycastVehicle.prototype.updateFriction = function(timeStep) {\n    var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj;\n\n    //calculate the impulse, so that the wheels don't move sidewards\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n    var forwardWS = updateFriction_forwardWS;\n    var axle = updateFriction_axle;\n\n    var numWheelsOnGround = 0;\n\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n        if (groundObject){\n            numWheelsOnGround++;\n        }\n\n        wheel.sideImpulse = 0;\n        wheel.forwardImpulse = 0;\n        if(!forwardWS[i]){\n            forwardWS[i] = new Vec3();\n        }\n        if(!axle[i]){\n            axle[i] = new Vec3();\n        }\n    }\n\n    for (var i = 0; i < numWheels; i++){\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n\n        if (groundObject) {\n            var axlei = axle[i];\n            var wheelTrans = this.getWheelTransformWorld(i);\n\n            // Get world axle\n            wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n\n            var surfNormalWS = wheel.raycastResult.hitNormalWorld;\n            var proj = axlei.dot(surfNormalWS);\n            surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n            axlei.vsub(surfNormalWS_scaled_proj, axlei);\n            axlei.normalize();\n\n            surfNormalWS.cross(axlei, forwardWS[i]);\n            forwardWS[i].normalize();\n\n            wheel.sideImpulse = resolveSingleBilateral(\n                chassisBody,\n                wheel.raycastResult.hitPointWorld,\n                groundObject,\n                wheel.raycastResult.hitPointWorld,\n                axlei\n            );\n\n            wheel.sideImpulse *= sideFrictionStiffness2;\n        }\n    }\n\n    var sideFactor = 1;\n    var fwdFactor = 0.5;\n\n    this.sliding = false;\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        var groundObject = wheel.raycastResult.body;\n\n        var rollingFriction = 0;\n\n        wheel.slipInfo = 1;\n        if (groundObject) {\n            var defaultRollingFrictionImpulse = 0;\n            var maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse;\n\n            // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n            // rollingFriction = calcRollingFriction(contactPt);\n            rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n\n            rollingFriction += wheel.engineForce * timeStep;\n\n            // rollingFriction = 0;\n            var factor = maxImpulse / rollingFriction;\n            wheel.slipInfo *= factor;\n        }\n\n        //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n        wheel.forwardImpulse = 0;\n        wheel.skidInfo = 1;\n\n        if (groundObject) {\n            wheel.skidInfo = 1;\n\n            var maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n            var maximpSide = maximp;\n\n            var maximpSquared = maximp * maximpSide;\n\n            wheel.forwardImpulse = rollingFriction;//wheelInfo.engineForce* timeStep;\n\n            var x = wheel.forwardImpulse * fwdFactor;\n            var y = wheel.sideImpulse * sideFactor;\n\n            var impulseSquared = x * x + y * y;\n\n            wheel.sliding = false;\n            if (impulseSquared > maximpSquared) {\n                this.sliding = true;\n                wheel.sliding = true;\n\n                var factor = maximp / Math.sqrt(impulseSquared);\n\n                wheel.skidInfo *= factor;\n            }\n        }\n    }\n\n    if (this.sliding) {\n        for (var i = 0; i < numWheels; i++) {\n            var wheel = wheelInfos[i];\n            if (wheel.sideImpulse !== 0) {\n                if (wheel.skidInfo < 1){\n                    wheel.forwardImpulse *= wheel.skidInfo;\n                    wheel.sideImpulse *= wheel.skidInfo;\n                }\n            }\n        }\n    }\n\n    // apply the impulses\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var rel_pos = new Vec3();\n        //wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos);\n        // cannons applyimpulse is using world coord for the position\n        rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n        if (wheel.forwardImpulse !== 0) {\n            var impulse = new Vec3();\n            forwardWS[i].scale(wheel.forwardImpulse, impulse);\n            chassisBody.applyImpulse(impulse, rel_pos);\n        }\n\n        if (wheel.sideImpulse !== 0){\n            var groundObject = wheel.raycastResult.body;\n\n            var rel_pos2 = new Vec3();\n            //wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2);\n            rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n            var sideImp = new Vec3();\n            axle[i].scale(wheel.sideImpulse, sideImp);\n\n            // Scale the relative position in the up direction with rollInfluence.\n            // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n            chassisBody.pointToLocalFrame(rel_pos, rel_pos);\n            rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n            chassisBody.pointToWorldFrame(rel_pos, rel_pos);\n            chassisBody.applyImpulse(sideImp, rel_pos);\n\n            //apply friction impulse on the ground\n            sideImp.scale(-1, sideImp);\n            groundObject.applyImpulse(sideImp, rel_pos2);\n        }\n    }\n};\n\nvar calcRollingFriction_vel1 = new Vec3();\nvar calcRollingFriction_vel2 = new Vec3();\nvar calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n    var j1 = 0;\n    var contactPosWorld = frictionPosWorld;\n\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    var vel1 = calcRollingFriction_vel1;\n    var vel2 = calcRollingFriction_vel2;\n    var vel = calcRollingFriction_vel;\n    // contactPosWorld.vsub(body0.position, rel_pos1);\n    // contactPosWorld.vsub(body1.position, rel_pos2);\n\n    body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n    body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n    vel1.vsub(vel2, vel);\n\n    var vrel = frictionDirectionWorld.dot(vel);\n\n    var denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n    var denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n    var relaxation = 1;\n    var jacDiagABInv = relaxation / (denom0 + denom1);\n\n    // calculate j that moves us to zero relative velocity\n    j1 = -vrel * jacDiagABInv;\n\n    if (maxImpulse < j1) {\n        j1 = maxImpulse;\n    }\n    if (j1 < -maxImpulse) {\n        j1 = -maxImpulse;\n    }\n\n    return j1;\n}\n\nvar computeImpulseDenominator_r0 = new Vec3();\nvar computeImpulseDenominator_c0 = new Vec3();\nvar computeImpulseDenominator_vec = new Vec3();\nvar computeImpulseDenominator_m = new Vec3();\nfunction computeImpulseDenominator(body, pos, normal) {\n    var r0 = computeImpulseDenominator_r0;\n    var c0 = computeImpulseDenominator_c0;\n    var vec = computeImpulseDenominator_vec;\n    var m = computeImpulseDenominator_m;\n\n    pos.vsub(body.position, r0);\n    r0.cross(normal, c0);\n    body.invInertiaWorld.vmult(c0, m);\n    m.cross(r0, vec);\n\n    return body.invMass + normal.dot(vec);\n}\n\n\nvar resolveSingleBilateral_vel1 = new Vec3();\nvar resolveSingleBilateral_vel2 = new Vec3();\nvar resolveSingleBilateral_vel = new Vec3();\n\n//bilateral constraint between two dynamic objects\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal, impulse){\n    var normalLenSqr = normal.norm2();\n    if (normalLenSqr > 1.1){\n        return 0; // no impulse\n    }\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    // pos1.vsub(body1.position, rel_pos1);\n    // pos2.vsub(body2.position, rel_pos2);\n\n    var vel1 = resolveSingleBilateral_vel1;\n    var vel2 = resolveSingleBilateral_vel2;\n    var vel = resolveSingleBilateral_vel;\n    body1.getVelocityAtWorldPoint(pos1, vel1);\n    body2.getVelocityAtWorldPoint(pos2, vel2);\n\n    vel1.vsub(vel2, vel);\n\n    var rel_vel = normal.dot(vel);\n\n    var contactDamping = 0.2;\n    var massTerm = 1 / (body1.invMass + body2.invMass);\n    var impulse = - contactDamping * rel_vel * massTerm;\n\n    return impulse;\n}\n},{\"../collision/Ray\":9,\"../collision/RaycastResult\":10,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/WheelInfo\":36,\"./Body\":31}],33:[function(_dereq_,module,exports){\nvar Body = _dereq_('./Body');\nvar Sphere = _dereq_('../shapes/Sphere');\nvar Box = _dereq_('../shapes/Box');\nvar Vec3 = _dereq_('../math/Vec3');\nvar HingeConstraint = _dereq_('../constraints/HingeConstraint');\n\nmodule.exports = RigidVehicle;\n\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n * @class RigidVehicle\n * @constructor\n * @param {Body} [options.chassisBody]\n */\nfunction RigidVehicle(options){\n    this.wheelBodies = [];\n\n    /**\n     * @property coordinateSystem\n     * @type {Vec3}\n     */\n    this.coordinateSystem = typeof(options.coordinateSystem)==='undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    if(!this.chassisBody){\n        // No chassis body given. Create it!\n        var chassisShape = new Box(new Vec3(5, 2, 0.5));\n        this.chassisBody = new Body(1, chassisShape);\n    }\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    this.wheelAxes = [];\n    this.wheelForces = [];\n}\n\n/**\n * Add a wheel\n * @method addWheel\n * @param {object} options\n * @param {boolean} [options.isFrontWheel]\n * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\n * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\n * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\n * @param {Body} [options.body] The wheel body.\n */\nRigidVehicle.prototype.addWheel = function(options){\n    options = options || {};\n    var wheelBody = options.body;\n    if(!wheelBody){\n        wheelBody =  new Body(1, new Sphere(1.2));\n    }\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0);\n\n    // Position constrain wheels\n    var zero = new Vec3();\n    var position = typeof(options.position) !== 'undefined' ? options.position.clone() : new Vec3();\n\n    // Set position locally to the chassis\n    var worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);\n\n    // Constrain wheel\n    var axis = typeof(options.axis) !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n    this.wheelAxes.push(axis);\n\n    var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n        pivotA: position,\n        axisA: axis,\n        pivotB: Vec3.ZERO,\n        axisB: axis,\n        collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n\n    return this.wheelBodies.length - 1;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n * @todo check coordinateSystem\n */\nRigidVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    // Set angle of the hinge axis\n    var axis = this.wheelAxes[wheelIndex];\n\n    var c = Math.cos(value),\n        s = Math.sin(value),\n        x = axis.x,\n        y = axis.y;\n    this.constraints[wheelIndex].axisA.set(\n        c*x -s*y,\n        s*x +c*y,\n        0\n    );\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method setMotorSpeed\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method disableMotor\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.disableMotor = function(wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method setWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.setWheelForce = function(value, wheelIndex){\n    this.wheelForces[wheelIndex] = value;\n};\n\n/**\n * Apply a torque on one of the wheels.\n * @method applyWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.applyWheelForce = function(value, wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var bodyTorque = wheelBody.torque;\n\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRigidVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.add(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n};\n\nRigidVehicle.prototype._update = function(){\n    var wheelForces = this.wheelForces;\n    for (var i = 0; i < wheelForces.length; i++) {\n        this.applyWheelForce(wheelForces[i], i);\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRigidVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.remove(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.removeConstraint(constraints[i]);\n    }\n};\n\nvar worldAxis = new Vec3();\n\n/**\n * Get current rotational velocity of a wheel\n * @method getWheelSpeed\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.getWheelSpeed = function(wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n};\n\n},{\"../constraints/HingeConstraint\":15,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/Sphere\":44,\"./Body\":31}],34:[function(_dereq_,module,exports){\nmodule.exports = SPHSystem;\n\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Particle = _dereq_('../shapes/Particle');\nvar Body = _dereq_('../objects/Body');\nvar Material = _dereq_('../material/Material');\n\n/**\n * Smoothed-particle hydrodynamics system\n * @class SPHSystem\n * @constructor\n */\nfunction SPHSystem(){\n    this.particles = [];\n\t\n    /**\n     * Density of the system (kg/m3).\n     * @property {number} density\n     */\n    this.density = 1;\n\t\n    /**\n     * Distance below which two particles are considered to be neighbors.\n     * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n     * @property {number} smoothingRadius\n     */\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n\t\n    /**\n     * Viscosity of the system.\n     * @property {number} viscosity\n     */\n    this.viscosity = 0.01;\n    this.eps = 0.000001;\n\n    // Stuff Computed per particle\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n}\n\n/**\n * Add a particle to the system.\n * @method add\n * @param {Body} particle\n */\nSPHSystem.prototype.add = function(particle){\n    this.particles.push(particle);\n    if(this.neighbors.length < this.particles.length){\n        this.neighbors.push([]);\n    }\n};\n\n/**\n * Remove a particle from the system.\n * @method remove\n * @param {Body} particle\n */\nSPHSystem.prototype.remove = function(particle){\n    var idx = this.particles.indexOf(particle);\n    if(idx !== -1){\n        this.particles.splice(idx,1);\n        if(this.neighbors.length > this.particles.length){\n            this.neighbors.pop();\n        }\n    }\n};\n\n/**\n * Get neighbors within smoothing volume, save in the array neighbors\n * @method getNeighbors\n * @param {Body} particle\n * @param {Array} neighbors\n */\nvar SPHSystem_getNeighbors_dist = new Vec3();\nSPHSystem.prototype.getNeighbors = function(particle,neighbors){\n    var N = this.particles.length,\n        id = particle.id,\n        R2 = this.smoothingRadius * this.smoothingRadius,\n        dist = SPHSystem_getNeighbors_dist;\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i];\n        p.position.vsub(particle.position,dist);\n        if(id!==p.id && dist.norm2() < R2){\n            neighbors.push(p);\n        }\n    }\n};\n\n// Temp vectors for calculation\nvar SPHSystem_update_dist = new Vec3(),\n    SPHSystem_update_a_pressure = new Vec3(),\n    SPHSystem_update_a_visc = new Vec3(),\n    SPHSystem_update_gradW = new Vec3(),\n    SPHSystem_update_r_vec = new Vec3(),\n    SPHSystem_update_u = new Vec3(); // Relative velocity\nSPHSystem.prototype.update = function(){\n    var N = this.particles.length,\n        dist = SPHSystem_update_dist,\n        cs = this.speedOfSound,\n        eps = this.eps;\n\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i]; // Current particle\n        var neighbors = this.neighbors[i];\n\n        // Get neighbors\n        neighbors.length = 0;\n        this.getNeighbors(p,neighbors);\n        neighbors.push(this.particles[i]); // Add current too\n        var numNeighbors = neighbors.length;\n\n        // Accumulate density for the particle\n        var sum = 0.0;\n        for(var j=0; j!==numNeighbors; j++){\n\n            //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n            p.position.vsub(neighbors[j].position, dist);\n            var len = dist.norm();\n\n            var weight = this.w(len);\n            sum += neighbors[j].mass * weight;\n        }\n\n        // Save\n        this.densities[i] = sum;\n        this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    }\n\n    // Add forces\n\n    // Sum to these accelerations\n    var a_pressure= SPHSystem_update_a_pressure;\n    var a_visc =    SPHSystem_update_a_visc;\n    var gradW =     SPHSystem_update_gradW;\n    var r_vec =     SPHSystem_update_r_vec;\n    var u =         SPHSystem_update_u;\n\n    for(var i=0; i!==N; i++){\n\n        var particle = this.particles[i];\n\n        a_pressure.set(0,0,0);\n        a_visc.set(0,0,0);\n\n        // Init vars\n        var Pij;\n        var nabla;\n        var Vij;\n\n        // Sum up for all other neighbors\n        var neighbors = this.neighbors[i];\n        var numNeighbors = neighbors.length;\n\n        //printf(\"Neighbors: \");\n        for(var j=0; j!==numNeighbors; j++){\n\n            var neighbor = neighbors[j];\n            //printf(\"%d \",nj);\n\n            // Get r once for all..\n            particle.position.vsub(neighbor.position,r_vec);\n            var r = r_vec.norm();\n\n            // Pressure contribution\n            Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i]*this.densities[i] + eps) + this.pressures[j] / (this.densities[j]*this.densities[j] + eps));\n            this.gradw(r_vec, gradW);\n            // Add to pressure acceleration\n            gradW.mult(Pij , gradW);\n            a_pressure.vadd(gradW, a_pressure);\n\n            // Viscosity contribution\n            neighbor.velocity.vsub(particle.velocity, u);\n            u.mult( 1.0 / (0.0001+this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass , u );\n            nabla = this.nablaw(r);\n            u.mult(nabla,u);\n            // Add to viscosity acceleration\n            a_visc.vadd( u, a_visc );\n        }\n\n        // Calculate force\n        a_visc.mult(particle.mass, a_visc);\n        a_pressure.mult(particle.mass, a_pressure);\n\n        // Add force to particles\n        particle.force.vadd(a_visc, particle.force);\n        particle.force.vadd(a_pressure, particle.force);\n    }\n};\n\n// Calculate the weight using the W(r) weightfunction\nSPHSystem.prototype.w = function(r){\n    // 315\n    var h = this.smoothingRadius;\n    return 315.0/(64.0*Math.PI*Math.pow(h,9)) * Math.pow(h*h-r*r,3);\n};\n\n// calculate gradient of the weight function\nSPHSystem.prototype.gradw = function(rVec,resultVec){\n    var r = rVec.norm(),\n        h = this.smoothingRadius;\n    rVec.mult(945.0/(32.0*Math.PI*Math.pow(h,9)) * Math.pow((h*h-r*r),2) , resultVec);\n};\n\n// Calculate nabla(W)\nSPHSystem.prototype.nablaw = function(r){\n    var h = this.smoothingRadius;\n    var nabla = 945.0/(32.0*Math.PI*Math.pow(h,9)) * (h*h-r*r)*(7*r*r - 3*h*h);\n    return nabla;\n};\n\n},{\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Particle\":41,\"../shapes/Shape\":43}],35:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = Spring;\n\n/**\n * A spring, connecting two bodies.\n *\n * @class Spring\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Object} [options]\n * @param {number} [options.restLength]   A number > 0. Default: 1\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\n * @param {number} [options.damping]      A number >= 0. Default: 1\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\n * @param {Vec3}  [options.worldAnchorB]\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\n * @param {Vec3}  [options.localAnchorB]\n */\nfunction Spring(bodyA,bodyB,options){\n    options = options || {};\n\n    /**\n     * Rest length of the spring.\n     * @property restLength\n     * @type {number}\n     */\n    this.restLength = typeof(options.restLength) === \"number\" ? options.restLength : 1;\n\n    /**\n     * Stiffness of the spring.\n     * @property stiffness\n     * @type {number}\n     */\n    this.stiffness = options.stiffness || 100;\n\n    /**\n     * Damping of the spring.\n     * @property damping\n     * @type {number}\n     */\n    this.damping = options.damping || 1;\n\n    /**\n     * First connected body.\n     * @property bodyA\n     * @type {Body}\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * Second connected body.\n     * @property bodyB\n     * @type {Body}\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * Anchor for bodyA in local bodyA coordinates.\n     * @property localAnchorA\n     * @type {Vec3}\n     */\n    this.localAnchorA = new Vec3();\n\n    /**\n     * Anchor for bodyB in local bodyB coordinates.\n     * @property localAnchorB\n     * @type {Vec3}\n     */\n    this.localAnchorB = new Vec3();\n\n    if(options.localAnchorA){\n        this.localAnchorA.copy(options.localAnchorA);\n    }\n    if(options.localAnchorB){\n        this.localAnchorB.copy(options.localAnchorB);\n    }\n    if(options.worldAnchorA){\n        this.setWorldAnchorA(options.worldAnchorA);\n    }\n    if(options.worldAnchorB){\n        this.setWorldAnchorB(options.worldAnchorB);\n    }\n}\n\n/**\n * Set the anchor point on body A, using world coordinates.\n * @method setWorldAnchorA\n * @param {Vec3} worldAnchorA\n */\nSpring.prototype.setWorldAnchorA = function(worldAnchorA){\n    this.bodyA.pointToLocalFrame(worldAnchorA,this.localAnchorA);\n};\n\n/**\n * Set the anchor point on body B, using world coordinates.\n * @method setWorldAnchorB\n * @param {Vec3} worldAnchorB\n */\nSpring.prototype.setWorldAnchorB = function(worldAnchorB){\n    this.bodyB.pointToLocalFrame(worldAnchorB,this.localAnchorB);\n};\n\n/**\n * Get the anchor point on body A, in world coordinates.\n * @method getWorldAnchorA\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorA = function(result){\n    this.bodyA.pointToWorldFrame(this.localAnchorA,result);\n};\n\n/**\n * Get the anchor point on body B, in world coordinates.\n * @method getWorldAnchorB\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorB = function(result){\n    this.bodyB.pointToWorldFrame(this.localAnchorB,result);\n};\n\nvar applyForce_r =              new Vec3(),\n    applyForce_r_unit =         new Vec3(),\n    applyForce_u =              new Vec3(),\n    applyForce_f =              new Vec3(),\n    applyForce_worldAnchorA =   new Vec3(),\n    applyForce_worldAnchorB =   new Vec3(),\n    applyForce_ri =             new Vec3(),\n    applyForce_rj =             new Vec3(),\n    applyForce_ri_x_f =         new Vec3(),\n    applyForce_rj_x_f =         new Vec3(),\n    applyForce_tmp =            new Vec3();\n\n/**\n * Apply the spring force to the connected bodies.\n * @method applyForce\n */\nSpring.prototype.applyForce = function(){\n    var k = this.stiffness,\n        d = this.damping,\n        l = this.restLength,\n        bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        r = applyForce_r,\n        r_unit = applyForce_r_unit,\n        u = applyForce_u,\n        f = applyForce_f,\n        tmp = applyForce_tmp;\n\n    var worldAnchorA = applyForce_worldAnchorA,\n        worldAnchorB = applyForce_worldAnchorB,\n        ri = applyForce_ri,\n        rj = applyForce_rj,\n        ri_x_f = applyForce_ri_x_f,\n        rj_x_f = applyForce_rj_x_f;\n\n    // Get world anchors\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB);\n\n    // Get offset points\n    worldAnchorA.vsub(bodyA.position,ri);\n    worldAnchorB.vsub(bodyB.position,rj);\n\n    // Compute distance vector between world anchor points\n    worldAnchorB.vsub(worldAnchorA,r);\n    var rlen = r.norm();\n    r_unit.copy(r);\n    r_unit.normalize();\n\n    // Compute relative velocity of the anchor points, u\n    bodyB.velocity.vsub(bodyA.velocity,u);\n    // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj,tmp);\n    u.vadd(tmp,u);\n    bodyA.angularVelocity.cross(ri,tmp);\n    u.vsub(tmp,u);\n\n    // F = - k * ( x - L ) - D * ( u )\n    r_unit.mult(-k*(rlen-l) - d*u.dot(r_unit), f);\n\n    // Add forces to bodies\n    bodyA.force.vsub(f,bodyA.force);\n    bodyB.force.vadd(f,bodyB.force);\n\n    // Angular force\n    ri.cross(f,ri_x_f);\n    rj.cross(f,rj_x_f);\n    bodyA.torque.vsub(ri_x_f,bodyA.torque);\n    bodyB.torque.vadd(rj_x_f,bodyB.torque);\n};\n\n},{\"../math/Vec3\":30}],36:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\nvar Transform = _dereq_('../math/Transform');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = WheelInfo;\n\n/**\n * @class WheelInfo\n * @constructor\n * @param {Object} [options]\n *\n * @param {Vec3} [options.chassisConnectionPointLocal]\n * @param {Vec3} [options.chassisConnectionPointWorld]\n * @param {Vec3} [options.directionLocal]\n * @param {Vec3} [options.directionWorld]\n * @param {Vec3} [options.axleLocal]\n * @param {Vec3} [options.axleWorld]\n * @param {number} [options.suspensionRestLength=1]\n * @param {number} [options.suspensionMaxLength=2]\n * @param {number} [options.radius=1]\n * @param {number} [options.suspensionStiffness=100]\n * @param {number} [options.dampingCompression=10]\n * @param {number} [options.dampingRelaxation=10]\n * @param {number} [options.frictionSlip=10000]\n * @param {number} [options.steering=0]\n * @param {number} [options.rotation=0]\n * @param {number} [options.deltaRotation=0]\n * @param {number} [options.rollInfluence=0.01]\n * @param {number} [options.maxSuspensionForce]\n * @param {boolean} [options.isFrontWheel=true]\n * @param {number} [options.clippedInvContactDotSuspension=1]\n * @param {number} [options.suspensionRelativeVelocity=0]\n * @param {number} [options.suspensionForce=0]\n * @param {number} [options.skidInfo=0]\n * @param {number} [options.suspensionLength=0]\n * @param {number} [options.maxSuspensionTravel=1]\n * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]\n * @param {number} [options.customSlidingRotationalSpeed=-0.1]\n */\nfunction WheelInfo(options){\n    options = Utils.defaults(options, {\n        chassisConnectionPointLocal: new Vec3(),\n        chassisConnectionPointWorld: new Vec3(),\n        directionLocal: new Vec3(),\n        directionWorld: new Vec3(),\n        axleLocal: new Vec3(),\n        axleWorld: new Vec3(),\n        suspensionRestLength: 1,\n        suspensionMaxLength: 2,\n        radius: 1,\n        suspensionStiffness: 100,\n        dampingCompression: 10,\n        dampingRelaxation: 10,\n        frictionSlip: 10000,\n        steering: 0,\n        rotation: 0,\n        deltaRotation: 0,\n        rollInfluence: 0.01,\n        maxSuspensionForce: Number.MAX_VALUE,\n        isFrontWheel: true,\n        clippedInvContactDotSuspension: 1,\n        suspensionRelativeVelocity: 0,\n        suspensionForce: 0,\n        skidInfo: 0,\n        suspensionLength: 0,\n        maxSuspensionTravel: 1,\n        useCustomSlidingRotationalSpeed: false,\n        customSlidingRotationalSpeed: -0.1\n    });\n\n    /**\n     * Max travel distance of the suspension, in meters.\n     * @property {number} maxSuspensionTravel\n     */\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n\n    /**\n     * Speed to apply to the wheel rotation when the wheel is sliding.\n     * @property {number} customSlidingRotationalSpeed\n     */\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n\n    /**\n     * If the customSlidingRotationalSpeed should be used.\n     * @property {Boolean} useCustomSlidingRotationalSpeed\n     */\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n\n    /**\n     * @property {Boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * Connection point, defined locally in the chassis body frame.\n     * @property {Vec3} chassisConnectionPointLocal\n     */\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n\n    /**\n     * @property {Vec3} chassisConnectionPointWorld\n     */\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n\n    /**\n     * @property {Vec3} directionLocal\n     */\n    this.directionLocal = options.directionLocal.clone();\n\n    /**\n     * @property {Vec3} directionWorld\n     */\n    this.directionWorld = options.directionWorld.clone();\n\n    /**\n     * @property {Vec3} axleLocal\n     */\n    this.axleLocal = options.axleLocal.clone();\n\n    /**\n     * @property {Vec3} axleWorld\n     */\n    this.axleWorld = options.axleWorld.clone();\n\n    /**\n     * @property {number} suspensionRestLength\n     */\n    this.suspensionRestLength = options.suspensionRestLength;\n\n    /**\n     * @property {number} suspensionMaxLength\n     */\n    this.suspensionMaxLength = options.suspensionMaxLength;\n\n    /**\n     * @property {number} radius\n     */\n    this.radius = options.radius;\n\n    /**\n     * @property {number} suspensionStiffness\n     */\n    this.suspensionStiffness = options.suspensionStiffness;\n\n    /**\n     * @property {number} dampingCompression\n     */\n    this.dampingCompression = options.dampingCompression;\n\n    /**\n     * @property {number} dampingRelaxation\n     */\n    this.dampingRelaxation = options.dampingRelaxation;\n\n    /**\n     * @property {number} frictionSlip\n     */\n    this.frictionSlip = options.frictionSlip;\n\n    /**\n     * @property {number} steering\n     */\n    this.steering = 0;\n\n    /**\n     * Rotation value, in radians.\n     * @property {number} rotation\n     */\n    this.rotation = 0;\n\n    /**\n     * @property {number} deltaRotation\n     */\n    this.deltaRotation = 0;\n\n    /**\n     * @property {number} rollInfluence\n     */\n    this.rollInfluence = options.rollInfluence;\n\n    /**\n     * @property {number} maxSuspensionForce\n     */\n    this.maxSuspensionForce = options.maxSuspensionForce;\n\n    /**\n     * @property {number} engineForce\n     */\n    this.engineForce = 0;\n\n    /**\n     * @property {number} brake\n     */\n    this.brake = 0;\n\n    /**\n     * @property {number} isFrontWheel\n     */\n    this.isFrontWheel = options.isFrontWheel;\n\n    /**\n     * @property {number} clippedInvContactDotSuspension\n     */\n    this.clippedInvContactDotSuspension = 1;\n\n    /**\n     * @property {number} suspensionRelativeVelocity\n     */\n    this.suspensionRelativeVelocity = 0;\n\n    /**\n     * @property {number} suspensionForce\n     */\n    this.suspensionForce = 0;\n\n    /**\n     * @property {number} skidInfo\n     */\n    this.skidInfo = 0;\n\n    /**\n     * @property {number} suspensionLength\n     */\n    this.suspensionLength = 0;\n\n    /**\n     * @property {number} sideImpulse\n     */\n    this.sideImpulse = 0;\n\n    /**\n     * @property {number} forwardImpulse\n     */\n    this.forwardImpulse = 0;\n\n    /**\n     * The result from raycasting\n     * @property {RaycastResult} raycastResult\n     */\n    this.raycastResult = new RaycastResult();\n\n    /**\n     * Wheel world transform\n     * @property {Transform} worldTransform\n     */\n    this.worldTransform = new Transform();\n\n    /**\n     * @property {boolean} isInContact\n     */\n    this.isInContact = false;\n}\n\nvar chassis_velocity_at_contactPoint = new Vec3();\nvar relpos = new Vec3();\nvar chassis_velocity_at_contactPoint = new Vec3();\nWheelInfo.prototype.updateWheel = function(chassis){\n    var raycastResult = this.raycastResult;\n\n    if (this.isInContact){\n        var project= raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n        raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n        var projVel = raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n        if (project >= -0.1) {\n            this.suspensionRelativeVelocity = 0.0;\n            this.clippedInvContactDotSuspension = 1.0 / 0.1;\n        } else {\n            var inv = -1 / project;\n            this.suspensionRelativeVelocity = projVel * inv;\n            this.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n        // Not in contact : position wheel in a nice (rest length) position\n        raycastResult.suspensionLength = this.suspensionRestLength;\n        this.suspensionRelativeVelocity = 0.0;\n        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n        this.clippedInvContactDotSuspension = 1.0;\n    }\n};\n},{\"../collision/RaycastResult\":10,\"../math/Transform\":29,\"../math/Vec3\":30,\"../utils/Utils\":53}],37:[function(_dereq_,module,exports){\nmodule.exports = Box;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\n\n/**\n * A 3d box shape.\n * @class Box\n * @constructor\n * @param {Vec3} halfExtents\n * @author schteppe\n * @extends Shape\n */\nfunction Box(halfExtents){\n    Shape.call(this);\n\n    this.type = Shape.types.BOX;\n\n    /**\n     * @property halfExtents\n     * @type {Vec3}\n     */\n    this.halfExtents = halfExtents;\n\n    /**\n     * Used by the contact generator to make contacts with other convex polyhedra for example\n     * @property convexPolyhedronRepresentation\n     * @type {ConvexPolyhedron}\n     */\n    this.convexPolyhedronRepresentation = null;\n\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n}\nBox.prototype = new Shape();\nBox.prototype.constructor = Box;\n\n/**\n * Updates the local convex polyhedron representation used for some collisions.\n * @method updateConvexPolyhedronRepresentation\n */\nBox.prototype.updateConvexPolyhedronRepresentation = function(){\n    var sx = this.halfExtents.x;\n    var sy = this.halfExtents.y;\n    var sz = this.halfExtents.z;\n    var V = Vec3;\n\n    var vertices = [\n        new V(-sx,-sy,-sz),\n        new V( sx,-sy,-sz),\n        new V( sx, sy,-sz),\n        new V(-sx, sy,-sz),\n        new V(-sx,-sy, sz),\n        new V( sx,-sy, sz),\n        new V( sx, sy, sz),\n        new V(-sx, sy, sz)\n    ];\n\n    var indices = [\n        [3,2,1,0], // -z\n        [4,5,6,7], // +z\n        [5,4,0,1], // -y\n        [2,3,7,6], // +y\n        [0,4,7,3], // -x\n        [1,2,6,5], // +x\n    ];\n\n    var axes = [\n        new V(0, 0, 1),\n        new V(0, 1, 0),\n        new V(1, 0, 0)\n    ];\n\n    var h = new ConvexPolyhedron(vertices, indices);\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n};\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nBox.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n};\n\nBox.calculateInertia = function(halfExtents,mass,target){\n    var e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.z*2*e.z );\n    target.y = 1.0 / 12.0 * mass * (   2*e.x*2*e.x + 2*e.z*2*e.z );\n    target.z = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.x*2*e.x );\n};\n\n/**\n * Get the box 6 side normals\n * @method getSideNormals\n * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n * @return {array}\n */\nBox.prototype.getSideNormals = function(sixTargetVectors,quat){\n    var sides = sixTargetVectors;\n    var ex = this.halfExtents;\n    sides[0].set(  ex.x,     0,     0);\n    sides[1].set(     0,  ex.y,     0);\n    sides[2].set(     0,     0,  ex.z);\n    sides[3].set( -ex.x,     0,     0);\n    sides[4].set(     0, -ex.y,     0);\n    sides[5].set(     0,     0, -ex.z);\n\n    if(quat!==undefined){\n        for(var i=0; i!==sides.length; i++){\n            quat.vmult(sides[i],sides[i]);\n        }\n    }\n\n    return sides;\n};\n\nBox.prototype.volume = function(){\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n};\n\nBox.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.halfExtents.norm();\n};\n\nvar worldCornerTempPos = new Vec3();\nvar worldCornerTempNeg = new Vec3();\nBox.prototype.forEachWorldCorner = function(pos,quat,callback){\n\n    var e = this.halfExtents;\n    var corners = [[  e.x,  e.y,  e.z],\n                   [ -e.x,  e.y,  e.z],\n                   [ -e.x, -e.y,  e.z],\n                   [ -e.x, -e.y, -e.z],\n                   [  e.x, -e.y, -e.z],\n                   [  e.x,  e.y, -e.z],\n                   [ -e.x,  e.y, -e.z],\n                   [  e.x, -e.y,  e.z]];\n    for(var i=0; i<corners.length; i++){\n        worldCornerTempPos.set(corners[i][0],corners[i][1],corners[i][2]);\n        quat.vmult(worldCornerTempPos,worldCornerTempPos);\n        pos.vadd(worldCornerTempPos,worldCornerTempPos);\n        callback(worldCornerTempPos.x,\n                 worldCornerTempPos.y,\n                 worldCornerTempPos.z);\n    }\n};\n\nvar worldCornersTemp = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\nBox.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\n    var e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x,  e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x,  e.y, -e.z);\n    worldCornersTemp[6].set(-e.x,  e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y,  e.z);\n\n    var wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n    for(var i=1; i<8; i++){\n        var wc = worldCornersTemp[i];\n        quat.vmult(wc, wc);\n        pos.vadd(wc, wc);\n        var x = wc.x;\n        var y = wc.y;\n        var z = wc.z;\n        if(x > max.x){\n            max.x = x;\n        }\n        if(y > max.y){\n            max.y = y;\n        }\n        if(z > max.z){\n            max.z = z;\n        }\n\n        if(x < min.x){\n            min.x = x;\n        }\n        if(y < min.y){\n            min.y = y;\n        }\n        if(z < min.z){\n            min.z = z;\n        }\n    }\n\n    // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n};\n\n},{\"../math/Vec3\":30,\"./ConvexPolyhedron\":38,\"./Shape\":43}],38:[function(_dereq_,module,exports){\nmodule.exports = ConvexPolyhedron;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\n\n/**\n * A set of polygons describing a convex shape.\n * @class ConvexPolyhedron\n * @constructor\n * @extends Shape\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @param {array} points An array of Vec3's\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n */\nfunction ConvexPolyhedron(points, faces, uniqueAxes) {\n    var that = this;\n    Shape.call(this);\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n\n    /**\n     * Array of Vec3\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = points||[];\n\n    this.worldVertices = []; // World transformed version of .vertices\n    this.worldVerticesNeedsUpdate = true;\n\n    /**\n     * Array of integer arrays, indicating which vertices each face consists of\n     * @property faces\n     * @type {Array}\n     */\n    this.faces = faces||[];\n\n    /**\n     * Array of Vec3\n     * @property faceNormals\n     * @type {Array}\n     */\n    this.faceNormals = [];\n    this.computeNormals();\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    /**\n     * Array of Vec3\n     * @property uniqueEdges\n     * @type {Array}\n     */\n    this.uniqueEdges = [];\n\n    /**\n     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n     * @property {Array} uniqueAxes\n     */\n    this.uniqueAxes = uniqueAxes ? uniqueAxes.slice() : null;\n\n    this.computeEdges();\n    this.updateBoundingSphereRadius();\n}\nConvexPolyhedron.prototype = new Shape();\nConvexPolyhedron.prototype.constructor = ConvexPolyhedron;\n\nvar computeEdges_tmpEdge = new Vec3();\n/**\n * Computes uniqueEdges\n * @method computeEdges\n */\nConvexPolyhedron.prototype.computeEdges = function(){\n    var faces = this.faces;\n    var vertices = this.vertices;\n    var nv = vertices.length;\n    var edges = this.uniqueEdges;\n\n    edges.length = 0;\n\n    var edge = computeEdges_tmpEdge;\n\n    for(var i=0; i !== faces.length; i++){\n        var face = faces[i];\n        var numVertices = face.length;\n        for(var j = 0; j !== numVertices; j++){\n            var k = ( j+1 ) % numVertices;\n            vertices[face[j]].vsub(vertices[face[k]], edge);\n            edge.normalize();\n            var found = false;\n            for(var p=0; p !== edges.length; p++){\n                if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)){\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found){\n                edges.push(edge.clone());\n            }\n        }\n    }\n};\n\n/**\n * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\n * @method computeNormals\n */\nConvexPolyhedron.prototype.computeNormals = function(){\n    this.faceNormals.length = this.faces.length;\n\n    // Generate normals\n    for(var i=0; i<this.faces.length; i++){\n\n        // Check so all vertices exists for this face\n        for(var j=0; j<this.faces[i].length; j++){\n            if(!this.vertices[this.faces[i][j]]){\n                throw new Error(\"Vertex \"+this.faces[i][j]+\" not found!\");\n            }\n        }\n\n        var n = this.faceNormals[i] || new Vec3();\n        this.getFaceNormal(i,n);\n        n.negate(n);\n        this.faceNormals[i] = n;\n        var vertex = this.vertices[this.faces[i][0]];\n        if(n.dot(vertex) < 0){\n            console.error(\".faceNormals[\" + i + \"] = Vec3(\"+n.toString()+\") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n            for(var j=0; j<this.faces[i].length; j++){\n                console.warn(\".vertices[\"+this.faces[i][j]+\"] = Vec3(\"+this.vertices[this.faces[i][j]].toString()+\")\");\n            }\n        }\n    }\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method getFaceNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nConvexPolyhedron.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\n/**\n * Compute the normal of a face from its vertices\n * @method getFaceNormal\n * @param  {Number} i\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.getFaceNormal = function(i,target){\n    var f = this.faces[i];\n    var va = this.vertices[f[0]];\n    var vb = this.vertices[f[1]];\n    var vc = this.vertices[f[2]];\n    return ConvexPolyhedron.computeNormal(va,vb,vc,target);\n};\n\n/**\n * @method clipAgainstHull\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} separatingNormal\n * @param {Number} minDist Clamp distance\n * @param {Number} maxDist\n * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n */\nvar cah_WorldNormal = new Vec3();\nConvexPolyhedron.prototype.clipAgainstHull = function(posA,quatA,hullB,posB,quatB,separatingNormal,minDist,maxDist,result){\n    var WorldNormal = cah_WorldNormal;\n    var hullA = this;\n    var curMaxDist = maxDist;\n    var closestFaceB = -1;\n    var dmax = -Number.MAX_VALUE;\n    for(var face=0; face < hullB.faces.length; face++){\n        WorldNormal.copy(hullB.faceNormals[face]);\n        quatB.vmult(WorldNormal,WorldNormal);\n        //posB.vadd(WorldNormal,WorldNormal);\n        var d = WorldNormal.dot(separatingNormal);\n        if (d > dmax){\n            dmax = d;\n            closestFaceB = face;\n        }\n    }\n    var worldVertsB1 = [];\n    var polyB = hullB.faces[closestFaceB];\n    var numVertices = polyB.length;\n    for(var e0=0; e0<numVertices; e0++){\n        var b = hullB.vertices[polyB[e0]];\n        var worldb = new Vec3();\n        worldb.copy(b);\n        quatB.vmult(worldb,worldb);\n        posB.vadd(worldb,worldb);\n        worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB>=0){\n        this.clipFaceAgainstHull(separatingNormal,\n                                 posA,\n                                 quatA,\n                                 worldVertsB1,\n                                 minDist,\n                                 maxDist,\n                                 result);\n    }\n};\n\n/**\n * Find the separating axis between this hull and another\n * @method findSeparatingAxis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} target The target vector to save the axis in\n * @return {bool} Returns false if a separation is found, else true\n */\nvar fsa_faceANormalWS3 = new Vec3(),\n    fsa_Worldnormal1 = new Vec3(),\n    fsa_deltaC = new Vec3(),\n    fsa_worldEdge0 = new Vec3(),\n    fsa_worldEdge1 = new Vec3(),\n    fsa_Cross = new Vec3();\nConvexPolyhedron.prototype.findSeparatingAxis = function(hullB,posA,quatA,posB,quatB,target, faceListA, faceListB){\n    var faceANormalWS3 = fsa_faceANormalWS3,\n        Worldnormal1 = fsa_Worldnormal1,\n        deltaC = fsa_deltaC,\n        worldEdge0 = fsa_worldEdge0,\n        worldEdge1 = fsa_worldEdge1,\n        Cross = fsa_Cross;\n\n    var dmin = Number.MAX_VALUE;\n    var hullA = this;\n    var curPlaneTests=0;\n\n    if(!hullA.uniqueAxes){\n\n        var numFacesA = faceListA ? faceListA.length : hullA.faces.length;\n\n        // Test face normals from hullA\n        for(var i=0; i<numFacesA; i++){\n            var fi = faceListA ? faceListA[i] : i;\n\n            // Get world face normal\n            faceANormalWS3.copy(hullA.faceNormals[fi]);\n            quatA.vmult(faceANormalWS3,faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n\n    } else {\n\n        // Test unique axes\n        for(var i = 0; i !== hullA.uniqueAxes.length; i++){\n\n            // Get world axis\n            quatA.vmult(hullA.uniqueAxes[i],faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n    }\n\n    if(!hullB.uniqueAxes){\n\n        // Test face normals from hullB\n        var numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n        for(var i=0;i<numFacesB;i++){\n\n            var fi = faceListB ? faceListB[i] : i;\n\n            Worldnormal1.copy(hullB.faceNormals[fi]);\n            quatB.vmult(Worldnormal1,Worldnormal1);\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    } else {\n\n        // Test unique axes in B\n        for(var i = 0; i !== hullB.uniqueAxes.length; i++){\n            quatB.vmult(hullB.uniqueAxes[i],Worldnormal1);\n\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    }\n\n    // Test edges\n    for(var e0=0; e0 !== hullA.uniqueEdges.length; e0++){\n\n        // Get world edge\n        quatA.vmult(hullA.uniqueEdges[e0],worldEdge0);\n\n        for(var e1=0; e1 !== hullB.uniqueEdges.length; e1++){\n\n            // Get world edge 2\n            quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n            worldEdge0.cross(worldEdge1,Cross);\n\n            if(!Cross.almostZero()){\n                Cross.normalize();\n                var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n                if(dist === false){\n                    return false;\n                }\n                if(dist < dmin){\n                    dmin = dist;\n                    target.copy(Cross);\n                }\n            }\n        }\n    }\n\n    posB.vsub(posA,deltaC);\n    if((deltaC.dot(target))>0.0){\n        target.negate(target);\n    }\n\n    return true;\n};\n\nvar maxminA=[], maxminB=[];\n\n/**\n * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n * @method testSepAxis\n * @param {Vec3} axis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @return {number} The overlap depth, or FALSE if no penetration.\n */\nConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB){\n    var hullA=this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    var maxA = maxminA[0];\n    var minA = maxminA[1];\n    var maxB = maxminB[0];\n    var minB = maxminB[1];\n    if(maxA<minB || maxB<minA){\n        return false; // Separated\n    }\n    var d0 = maxA - minB;\n    var d1 = maxB - minA;\n    var depth = d0<d1 ? d0:d1;\n    return depth;\n};\n\nvar cli_aabbmin = new Vec3(),\n    cli_aabbmax = new Vec3();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabbmin,cli_aabbmax);\n    var x = cli_aabbmax.x - cli_aabbmin.x,\n        y = cli_aabbmax.y - cli_aabbmin.y,\n        z = cli_aabbmax.z - cli_aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z );\n    target.y = 1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z );\n    target.z = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x );\n};\n\n/**\n * @method getPlaneConstantOfFace\n * @param  {Number} face_i Index of the face\n * @return {Number}\n */\nConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i){\n    var f = this.faces[face_i];\n    var n = this.faceNormals[face_i];\n    var v = this.vertices[f[0]];\n    var c = -n.dot(v);\n    return c;\n};\n\n/**\n * Clip a face against a hull.\n * @method clipFaceAgainstHull\n * @param {Vec3} separatingNormal\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\n * @param {Number} minDist Distance clamping\n * @param {Number} maxDist\n * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n */\nvar cfah_faceANormalWS = new Vec3(),\n    cfah_edge0 = new Vec3(),\n    cfah_WorldEdge0 = new Vec3(),\n    cfah_worldPlaneAnormal1 = new Vec3(),\n    cfah_planeNormalWS1 = new Vec3(),\n    cfah_worldA1 = new Vec3(),\n    cfah_localPlaneNormal = new Vec3(),\n    cfah_planeNormalWS = new Vec3();\nConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist,result){\n    var faceANormalWS = cfah_faceANormalWS,\n        edge0 = cfah_edge0,\n        WorldEdge0 = cfah_WorldEdge0,\n        worldPlaneAnormal1 = cfah_worldPlaneAnormal1,\n        planeNormalWS1 = cfah_planeNormalWS1,\n        worldA1 = cfah_worldA1,\n        localPlaneNormal = cfah_localPlaneNormal,\n        planeNormalWS = cfah_planeNormalWS;\n\n    var hullA = this;\n    var worldVertsB2 = [];\n    var pVtxIn = worldVertsB1;\n    var pVtxOut = worldVertsB2;\n    // Find the face with normal closest to the separating axis\n    var closestFaceA = -1;\n    var dmin = Number.MAX_VALUE;\n    for(var face=0; face<hullA.faces.length; face++){\n        faceANormalWS.copy(hullA.faceNormals[face]);\n        quatA.vmult(faceANormalWS,faceANormalWS);\n        //posA.vadd(faceANormalWS,faceANormalWS);\n        var d = faceANormalWS.dot(separatingNormal);\n        if (d < dmin){\n            dmin = d;\n            closestFaceA = face;\n        }\n    }\n    if (closestFaceA < 0){\n        // console.log(\"--- did not find any closest face... ---\");\n        return;\n    }\n    //console.log(\"closest A: \",closestFaceA);\n    // Get the face and construct connected faces\n    var polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n    for(var i=0; i<hullA.faces.length; i++){\n        for(var j=0; j<hullA.faces[i].length; j++){\n            if(polyA.indexOf(hullA.faces[i][j])!==-1 /* Sharing a vertex*/ && i!==closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i)===-1 /* Not already added */ ){\n                polyA.connectedFaces.push(i);\n            }\n        }\n    }\n    // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face\n    var numContacts = pVtxIn.length;\n    var numVerticesA = polyA.length;\n    var res = [];\n    for(var e0=0; e0<numVerticesA; e0++){\n        var a = hullA.vertices[polyA[e0]];\n        var b = hullA.vertices[polyA[(e0+1)%numVerticesA]];\n        a.vsub(b,edge0);\n        WorldEdge0.copy(edge0);\n        quatA.vmult(WorldEdge0,WorldEdge0);\n        posA.vadd(WorldEdge0,WorldEdge0);\n        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);\n        quatA.vmult(worldPlaneAnormal1,worldPlaneAnormal1);\n        posA.vadd(worldPlaneAnormal1,worldPlaneAnormal1);\n        WorldEdge0.cross(worldPlaneAnormal1,planeNormalWS1);\n        planeNormalWS1.negate(planeNormalWS1);\n        worldA1.copy(a);\n        quatA.vmult(worldA1,worldA1);\n        posA.vadd(worldA1,worldA1);\n        var planeEqWS1 = -worldA1.dot(planeNormalWS1);\n        var planeEqWS;\n        if(true){\n            var otherFace = polyA.connectedFaces[e0];\n            localPlaneNormal.copy(this.faceNormals[otherFace]);\n            var localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n\n            planeNormalWS.copy(localPlaneNormal);\n            quatA.vmult(planeNormalWS,planeNormalWS);\n            //posA.vadd(planeNormalWS,planeNormalWS);\n            var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n        } else  {\n            planeNormalWS.copy(planeNormalWS1);\n            planeEqWS = planeEqWS1;\n        }\n\n        // Clip face against our constructed plane\n        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);\n\n        // Throw away all clipped points, but save the reamining until next clip\n        while(pVtxIn.length){\n            pVtxIn.shift();\n        }\n        while(pVtxOut.length){\n            pVtxIn.push(pVtxOut.shift());\n        }\n    }\n\n    //console.log(\"Resulting points after clip:\",pVtxIn);\n\n    // only keep contact points that are behind the witness face\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n\n    var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS,planeNormalWS);\n\n    var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n    for (var i=0; i<pVtxIn.length; i++){\n        var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???\n        /*console.log(\"depth calc from normal=\",planeNormalWS.toString(),\" and constant \"+planeEqWS+\" and vertex \",pVtxIn[i].toString(),\" gives \"+depth);*/\n        if (depth <=minDist){\n            console.log(\"clamped: depth=\"+depth+\" to minDist=\"+(minDist+\"\"));\n            depth = minDist;\n        }\n\n        if (depth <=maxDist){\n            var point = pVtxIn[i];\n            if(depth<=0){\n                /*console.log(\"Got contact point \",point.toString(),\n                  \", depth=\",depth,\n                  \"contact normal=\",separatingNormal.toString(),\n                  \"plane\",planeNormalWS.toString(),\n                  \"planeConstant\",planeEqWS);*/\n                var p = {\n                    point:point,\n                    normal:planeNormalWS,\n                    depth: depth,\n                };\n                result.push(p);\n            }\n        }\n    }\n};\n\n/**\n * Clip a face in a hull against the back of a plane.\n * @method clipFaceAgainstPlane\n * @param {Array} inVertices\n * @param {Array} outVertices\n * @param {Vec3} planeNormal\n * @param {Number} planeConstant The constant in the mathematical plane equation\n */\nConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices,outVertices, planeNormal, planeConstant){\n    var n_dot_first, n_dot_last;\n    var numVerts = inVertices.length;\n\n    if(numVerts < 2){\n        return outVertices;\n    }\n\n    var firstVertex = inVertices[inVertices.length-1],\n        lastVertex =   inVertices[0];\n\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for(var vi = 0; vi < numVerts; vi++){\n        lastVertex = inVertices[vi];\n        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n        if(n_dot_first < 0){\n            if(n_dot_last < 0){\n                // Start < 0, end < 0, so output lastVertex\n                var newv = new Vec3();\n                newv.copy(lastVertex);\n                outVertices.push(newv);\n            } else {\n                // Start < 0, end >= 0, so output intersection\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n            }\n        } else {\n            if(n_dot_last<0){\n                // Start >= 0, end < 0 so output intersection and end\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n                outVertices.push(lastVertex);\n            }\n        }\n        firstVertex = lastVertex;\n        n_dot_first = n_dot_last;\n    }\n    return outVertices;\n};\n\n// Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\nConvexPolyhedron.prototype.computeWorldVertices = function(position,quat){\n    var N = this.vertices.length;\n    while(this.worldVertices.length < N){\n        this.worldVertices.push( new Vec3() );\n    }\n\n    var verts = this.vertices,\n        worldVerts = this.worldVertices;\n    for(var i=0; i!==N; i++){\n        quat.vmult( verts[i] , worldVerts[i] );\n        position.vadd( worldVerts[i] , worldVerts[i] );\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\nConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin,aabbmax){\n    var n = this.vertices.length,\n        vertices = this.vertices,\n        worldVert = computeLocalAABB_worldVert;\n\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for(var i=0; i<n; i++){\n        var v = vertices[i];\n        if     (v.x < aabbmin.x){\n            aabbmin.x = v.x;\n        } else if(v.x > aabbmax.x){\n            aabbmax.x = v.x;\n        }\n        if     (v.y < aabbmin.y){\n            aabbmin.y = v.y;\n        } else if(v.y > aabbmax.y){\n            aabbmax.y = v.y;\n        }\n        if     (v.z < aabbmin.z){\n            aabbmin.z = v.z;\n        } else if(v.z > aabbmax.z){\n            aabbmax.z = v.z;\n        }\n    }\n};\n\n/**\n * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n * @method computeWorldFaceNormals\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat){\n    var N = this.faceNormals.length;\n    while(this.worldFaceNormals.length < N){\n        this.worldFaceNormals.push( new Vec3() );\n    }\n\n    var normals = this.faceNormals,\n        worldNormals = this.worldFaceNormals;\n    for(var i=0; i!==N; i++){\n        quat.vmult( normals[i] , worldNormals[i] );\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n};\n\n/**\n * @method updateBoundingSphereRadius\n */\nConvexPolyhedron.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var verts = this.vertices;\n    for(var i=0, N=verts.length; i!==N; i++) {\n        var norm2 = verts[i].norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nConvexPolyhedron.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var n = this.vertices.length, verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n    for(var i=0; i<n; i++){\n        tempWorldVertex.copy(verts[i]);\n        quat.vmult(tempWorldVertex,tempWorldVertex);\n        pos.vadd(tempWorldVertex,tempWorldVertex);\n        var v = tempWorldVertex;\n        if     (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if     (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if     (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n};\n\n/**\n * Get approximate convex volume\n * @method volume\n * @return {Number}\n */\nConvexPolyhedron.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Get an average of all the vertices positions\n * @method getAveragePointLocal\n * @param  {Vec3} target\n * @return {Vec3}\n */\nConvexPolyhedron.prototype.getAveragePointLocal = function(target){\n    target = target || new Vec3();\n    var n = this.vertices.length,\n        verts = this.vertices;\n    for(var i=0; i<n; i++){\n        target.vadd(verts[i],target);\n    }\n    target.mult(1/n,target);\n    return target;\n};\n\n/**\n * Transform all local points. Will change the .vertices\n * @method transformAllPoints\n * @param  {Vec3} offset\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.transformAllPoints = function(offset,quat){\n    var n = this.vertices.length,\n        verts = this.vertices;\n\n    // Apply rotation\n    if(quat){\n        // Rotate vertices\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            quat.vmult(v,v);\n        }\n        // Rotate face normals\n        for(var i=0; i<this.faceNormals.length; i++){\n            var v = this.faceNormals[i];\n            quat.vmult(v,v);\n        }\n        /*\n        // Rotate edges\n        for(var i=0; i<this.uniqueEdges.length; i++){\n            var v = this.uniqueEdges[i];\n            quat.vmult(v,v);\n        }*/\n    }\n\n    // Apply offset\n    if(offset){\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            v.vadd(offset,v);\n        }\n    }\n};\n\n/**\n * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.\n * @method pointIsInside\n * @param  {Vec3} p      A point given in local coordinates\n * @return {Boolean}\n */\nvar ConvexPolyhedron_pointIsInside = new Vec3();\nvar ConvexPolyhedron_vToP = new Vec3();\nvar ConvexPolyhedron_vToPointInside = new Vec3();\nConvexPolyhedron.prototype.pointIsInside = function(p){\n    var n = this.vertices.length,\n        verts = this.vertices,\n        faces = this.faces,\n        normals = this.faceNormals;\n    var positiveResult = null;\n    var N = this.faces.length;\n    var pointInside = ConvexPolyhedron_pointIsInside;\n    this.getAveragePointLocal(pointInside);\n    for(var i=0; i<N; i++){\n        var numVertices = this.faces[i].length;\n        var n = normals[i];\n        var v = verts[faces[i][0]]; // We only need one point in the face\n\n        // This dot product determines which side of the edge the point is\n        var vToP = ConvexPolyhedron_vToP;\n        p.vsub(v,vToP);\n        var r1 = n.dot(vToP);\n\n        var vToPointInside = ConvexPolyhedron_vToPointInside;\n        pointInside.vsub(v,vToPointInside);\n        var r2 = n.dot(vToPointInside);\n\n        if((r1<0 && r2>0) || (r1>0 && r2<0)){\n            return false; // Encountered some other sign. Exit.\n        } else {\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return positiveResult ? 1 : -1;\n};\n\n/**\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.\n * @static\n * @method project\n * @param {ConvexPolyhedron} hull\n * @param {Vec3} axis\n * @param {Vec3} pos\n * @param {Quaternion} quat\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\n */\nvar project_worldVertex = new Vec3();\nvar project_localAxis = new Vec3();\nvar project_localOrigin = new Vec3();\nConvexPolyhedron.project = function(hull, axis, pos, quat, result){\n    var n = hull.vertices.length,\n        worldVertex = project_worldVertex,\n        localAxis = project_localAxis,\n        max = 0,\n        min = 0,\n        localOrigin = project_localOrigin,\n        vs = hull.vertices;\n\n    localOrigin.setZero();\n\n    // Transform the axis to local\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    var add = localOrigin.dot(localAxis);\n\n    min = max = vs[0].dot(localAxis);\n\n    for(var i = 1; i < n; i++){\n        var val = vs[i].dot(localAxis);\n\n        if(val > max){\n            max = val;\n        }\n\n        if(val < min){\n            min = val;\n        }\n    }\n\n    min -= add;\n    max -= add;\n\n    if(min > max){\n        // Inconsistent - swap\n        var temp = min;\n        min = max;\n        max = temp;\n    }\n    // Output\n    result[0] = max;\n    result[1] = min;\n};\n\n},{\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"./Shape\":43}],39:[function(_dereq_,module,exports){\nmodule.exports = Cylinder;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\n\n/**\n * @class Cylinder\n * @constructor\n * @extends ConvexPolyhedron\n * @author schteppe / https://github.com/schteppe\n * @param {Number} radiusTop\n * @param {Number} radiusBottom\n * @param {Number} height\n * @param {Number} numSegments The number of segments to build the cylinder out of\n */\nfunction Cylinder( radiusTop, radiusBottom, height , numSegments ) {\n    var N = numSegments,\n        verts = [],\n        axes = [],\n        faces = [],\n        bottomface = [],\n        topface = [],\n        cos = Math.cos,\n        sin = Math.sin;\n\n    // First bottom point\n    verts.push(new Vec3(radiusBottom*cos(0),\n                               radiusBottom*sin(0),\n                               -height*0.5));\n    bottomface.push(0);\n\n    // First top point\n    verts.push(new Vec3(radiusTop*cos(0),\n                               radiusTop*sin(0),\n                               height*0.5));\n    topface.push(1);\n\n    for(var i=0; i<N; i++){\n        var theta = 2*Math.PI/N * (i+1);\n        var thetaN = 2*Math.PI/N * (i+0.5);\n        if(i<N-1){\n            // Bottom\n            verts.push(new Vec3(radiusBottom*cos(theta),\n                                       radiusBottom*sin(theta),\n                                       -height*0.5));\n            bottomface.push(2*i+2);\n            // Top\n            verts.push(new Vec3(radiusTop*cos(theta),\n                                       radiusTop*sin(theta),\n                                       height*0.5));\n            topface.push(2*i+3);\n\n            // Face\n            faces.push([2*i+2, 2*i+3, 2*i+1,2*i]);\n        } else {\n            faces.push([0,1, 2*i+1, 2*i]); // Connect\n        }\n\n        // Axis: we can cut off half of them if we have even number of segments\n        if(N % 2 === 1 || i < N / 2){\n            axes.push(new Vec3(cos(thetaN), sin(thetaN), 0));\n        }\n    }\n    faces.push(topface);\n    axes.push(new Vec3(0,0,1));\n\n    // Reorder bottom face\n    var temp = [];\n    for(var i=0; i<bottomface.length; i++){\n        temp.push(bottomface[bottomface.length - i - 1]);\n    }\n    faces.push(temp);\n\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n    ConvexPolyhedron.call( this, verts, faces, axes );\n}\n\nCylinder.prototype = new ConvexPolyhedron();\n\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./ConvexPolyhedron\":38,\"./Shape\":43}],40:[function(_dereq_,module,exports){\nvar Shape = _dereq_('./Shape');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = Heightfield;\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @class Heightfield\n * @extends Shape\n * @constructor\n * @param {Array} data An array of Y values that will be used to construct the terrain.\n * @param {object} options\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n * @param {Number} [options.maxValue] Maximum value.\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n * @todo Should be possible to use along all axes, not just y\n *\n * @example\n *     // Generate some height data (y-values).\n *     var data = [];\n *     for(var i = 0; i < 1000; i++){\n *         var y = 0.5 * Math.cos(0.2 * i);\n *         data.push(y);\n *     }\n *\n *     // Create the heightfield shape\n *     var heightfieldShape = new Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     });\n *     var heightfieldBody = new Body();\n *     heightfieldBody.addShape(heightfieldShape);\n *     world.addBody(heightfieldBody);\n */\nfunction Heightfield(data, options){\n    options = Utils.defaults(options, {\n        maxValue : null,\n        minValue : null,\n        elementSize : 1\n    });\n\n    /**\n     * An array of numbers, or height values, that are spread out along the x axis.\n     * @property {array} data\n     */\n    this.data = data;\n\n    /**\n     * Max value of the data\n     * @property {number} maxValue\n     */\n    this.maxValue = options.maxValue;\n\n    /**\n     * Max value of the data\n     * @property {number} minValue\n     */\n    this.minValue = options.minValue;\n\n    /**\n     * The width of each element\n     * @property {number} elementSize\n     * @todo elementSizeX and Y\n     */\n    this.elementSize = options.elementSize;\n\n    if(options.minValue === null){\n        this.updateMinValue();\n    }\n    if(options.maxValue === null){\n        this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n\n    Shape.call(this);\n\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n\n    this.type = Shape.types.HEIGHTFIELD;\n    this.updateBoundingSphereRadius();\n\n    // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n    this._cachedPillars = {};\n}\nHeightfield.prototype = new Shape();\n\n/**\n * Call whenever you change the data array.\n * @method update\n */\nHeightfield.prototype.update = function(){\n    this._cachedPillars = {};\n};\n\n/**\n * Update the .minValue property\n * @method updateMinValue\n */\nHeightfield.prototype.updateMinValue = function(){\n    var data = this.data;\n    var minValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v < minValue){\n                minValue = v;\n            }\n        }\n    }\n    this.minValue = minValue;\n};\n\n/**\n * Update the .maxValue property\n * @method updateMaxValue\n */\nHeightfield.prototype.updateMaxValue = function(){\n    var data = this.data;\n    var maxValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v > maxValue){\n                maxValue = v;\n            }\n        }\n    }\n    this.maxValue = maxValue;\n};\n\n/**\n * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n * @method setHeightValueAtIndex\n * @param {integer} xi\n * @param {integer} yi\n * @param {number} value\n */\nHeightfield.prototype.setHeightValueAtIndex = function(xi, yi, value){\n    var data = this.data;\n    data[xi][yi] = value;\n\n    // Invalidate cache\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n    if(xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n    if(yi > 0){\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n    if(yi > 0 && xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n};\n\n/**\n * Get max/min in a rectangle in the matrix data\n * @method getRectMinMax\n * @param  {integer} iMinX\n * @param  {integer} iMinY\n * @param  {integer} iMaxX\n * @param  {integer} iMaxY\n * @param  {array} [result] An array to store the results in.\n * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n */\nHeightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {\n    result = result || [];\n\n    // Get max and min of the data\n    var data = this.data,\n        max = this.minValue; // Set first value\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n            var height = data[i][j];\n            if(height > max){\n                max = height;\n            }\n        }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n};\n\n/**\n * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n * @method getIndexOfPosition\n * @param  {number} x\n * @param  {number} y\n * @param  {array} result Two-element array\n * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n * @return {boolean}\n */\nHeightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {\n\n    // Get the index of the data points to test against\n    var w = this.elementSize;\n    var data = this.data;\n    var xi = Math.floor(x / w);\n    var yi = Math.floor(y / w);\n\n    result[0] = xi;\n    result[1] = yi;\n\n    if(clamp){\n        // Clamp index to edges\n        if(xi < 0){ xi = 0; }\n        if(yi < 0){ yi = 0; }\n        if(xi >= data.length - 1){ xi = data.length - 1; }\n        if(yi >= data[0].length - 1){ yi = data[0].length - 1; }\n    }\n\n    // Bail out if we are out of the terrain\n    if(xi < 0 || yi < 0 || xi >= data.length-1 || yi >= data[0].length-1){\n        return false;\n    }\n\n    return true;\n};\n\nHeightfield.prototype.getHeightAt = function(x, y, edgeClamp){\n    var idx = [];\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n\n    // TODO: get upper or lower triangle, then use barycentric interpolation to get the height in the triangle.\n    var minmax = [];\n    this.getRectMinMax(idx[0], idx[1] + 1, idx[0], idx[1] + 1, minmax);\n\n    return (minmax[0] + minmax[1]) / 2; // average\n};\n\nHeightfield.prototype.getCacheConvexTrianglePillarKey = function(xi, yi, getUpperTriangle){\n    return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);\n};\n\nHeightfield.prototype.getCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\nHeightfield.prototype.setCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle, convex, offset){\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n        convex: convex,\n        offset: offset\n    };\n};\n\nHeightfield.prototype.clearCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\n/**\n * Get a triangle in the terrain in the form of a triangular convex shape.\n * @method getConvexTrianglePillar\n * @param  {integer} i\n * @param  {integer} j\n * @param  {boolean} getUpperTriangle\n */\nHeightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    var result = this.pillarConvex;\n    var offsetResult = this.pillarOffset;\n\n    if(this.cacheEnabled){\n        var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n        if(data){\n            this.pillarConvex = data.convex;\n            this.pillarOffset = data.offset;\n            return;\n        }\n\n        result = new ConvexPolyhedron();\n        offsetResult = new Vec3();\n\n        this.pillarConvex = result;\n        this.pillarOffset = offsetResult;\n    }\n\n    var data = this.data;\n    var elementSize = this.elementSize;\n    var faces = result.faces;\n\n    // Reuse verts if possible\n    result.vertices.length = 6;\n    for (var i = 0; i < 6; i++) {\n        if(!result.vertices[i]){\n            result.vertices[i] = new Vec3();\n        }\n    }\n\n    // Reuse faces if possible\n    faces.length = 5;\n    for (var i = 0; i < 5; i++) {\n        if(!faces[i]){\n            faces[i] = [];\n        }\n    }\n\n    var verts = result.vertices;\n\n    var h = (Math.min(\n        data[xi][yi],\n        data[xi+1][yi],\n        data[xi][yi+1],\n        data[xi+1][yi+1]\n    ) - this.minValue ) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.25) * elementSize, // sort of center of a triangle\n            (yi + 0.25) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            data[xi][yi] - h\n        );\n        verts[1].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            data[xi + 1][yi] - h\n        );\n        verts[2].set(\n            -0.25 * elementSize,\n            0.75 * elementSize,\n            data[xi][yi + 1] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[4].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[5].set(\n            -0.25 * elementSize,\n            0.75  * elementSize,\n            -h-1\n        );\n\n        // top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // -x facing quad\n        faces[2][0] = 0;\n        faces[2][1] = 2;\n        faces[2][2] = 5;\n        faces[2][3] = 3;\n\n        // -y facing quad\n        faces[3][0] = 1;\n        faces[3][1] = 0;\n        faces[3][2] = 3;\n        faces[3][3] = 4;\n\n        // +xy facing quad\n        faces[4][0] = 4;\n        faces[4][1] = 5;\n        faces[4][2] = 2;\n        faces[4][3] = 1;\n\n\n    } else {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.75) * elementSize, // sort of center of a triangle\n            (yi + 0.75) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            data[xi + 1][yi + 1] - h\n        );\n        verts[1].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            data[xi][yi + 1] - h\n        );\n        verts[2].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            data[xi + 1][yi] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[4].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[5].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            - h-1\n        );\n\n        // Top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // +x facing quad\n        faces[2][0] = 2;\n        faces[2][1] = 5;\n        faces[2][2] = 3;\n        faces[2][3] = 0;\n\n        // +y facing quad\n        faces[3][0] = 3;\n        faces[3][1] = 4;\n        faces[3][2] = 1;\n        faces[3][3] = 0;\n\n        // -xy facing quad\n        faces[4][0] = 1;\n        faces[4][1] = 4;\n        faces[4][2] = 5;\n        faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n};\n\nHeightfield.prototype.calculateLocalInertia = function(mass, target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nHeightfield.prototype.volume = function(){\n    return Number.MAX_VALUE; // The terrain is infinite\n};\n\nHeightfield.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // TODO: do it properly\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n};\n\nHeightfield.prototype.updateBoundingSphereRadius = function(){\n    // Use the bounding box of the min/max values\n    var data = this.data,\n        s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();\n};\n\n},{\"../math/Vec3\":30,\"../utils/Utils\":53,\"./ConvexPolyhedron\":38,\"./Shape\":43}],41:[function(_dereq_,module,exports){\nmodule.exports = Particle;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Particle shape.\n * @class Particle\n * @constructor\n * @author schteppe\n * @extends Shape\n */\nfunction Particle(){\n    Shape.call(this);\n\n    this.type = Shape.types.PARTICLE;\n}\nParticle.prototype = new Shape();\nParticle.prototype.constructor = Particle;\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nParticle.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nParticle.prototype.volume = function(){\n    return 0;\n};\n\nParticle.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = 0;\n};\n\nParticle.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n};\n\n},{\"../math/Vec3\":30,\"./Shape\":43}],42:[function(_dereq_,module,exports){\nmodule.exports = Plane;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a RigidBody and rotate that body. See the demos.\n * @class Plane\n * @constructor\n * @extends Shape\n * @author schteppe\n */\nfunction Plane(){\n    Shape.call(this);\n    this.type = Shape.types.PLANE;\n\n    // World oriented normal\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n\n    this.boundingSphereRadius = Number.MAX_VALUE;\n}\nPlane.prototype = new Shape();\nPlane.prototype.constructor = Plane;\n\nPlane.prototype.computeWorldNormal = function(quat){\n    var n = this.worldNormal;\n    n.set(0,0,1);\n    quat.vmult(n,n);\n    this.worldNormalNeedsUpdate = false;\n};\n\nPlane.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    return target;\n};\n\nPlane.prototype.volume = function(){\n    return Number.MAX_VALUE; // The plane is infinite...\n};\n\nvar tempNormal = new Vec3();\nPlane.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0,0,1); // Default plane normal is z\n    quat.vmult(tempNormal,tempNormal);\n    var maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if(tempNormal.x === 1){ max.x = pos.x; }\n    if(tempNormal.y === 1){ max.y = pos.y; }\n    if(tempNormal.z === 1){ max.z = pos.z; }\n\n    if(tempNormal.x === -1){ min.x = pos.x; }\n    if(tempNormal.y === -1){ min.y = pos.y; }\n    if(tempNormal.z === -1){ min.z = pos.z; }\n};\n\nPlane.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = Number.MAX_VALUE;\n};\n},{\"../math/Vec3\":30,\"./Shape\":43}],43:[function(_dereq_,module,exports){\nmodule.exports = Shape;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Material = _dereq_('../material/Material');\n\n/**\n * Base class for shapes\n * @class Shape\n * @constructor\n * @author schteppe\n * @todo Should have a mechanism for caching bounding sphere radius instead of calculating it each time\n */\nfunction Shape(){\n\n    /**\n     * Identifyer of the Shape.\n     * @property {number} id\n     */\n    this.id = Shape.idCounter++;\n\n    /**\n     * The type of this shape. Must be set to an int > 0 by subclasses.\n     * @property type\n     * @type {Number}\n     * @see Shape.types\n     */\n    this.type = 0;\n\n    /**\n     * The local bounding sphere radius of this shape.\n     * @property {Number} boundingSphereRadius\n     */\n    this.boundingSphereRadius = 0;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {boolean} collisionResponse\n     */\n    this.collisionResponse = true;\n\n    /**\n     * @property {Material} material\n     */\n    this.material = null;\n}\nShape.prototype.constructor = Shape;\n\n/**\n * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n * @method updateBoundingSphereRadius\n * @return {Number}\n */\nShape.prototype.updateBoundingSphereRadius = function(){\n    throw \"computeBoundingSphereRadius() not implemented for shape type \"+this.type;\n};\n\n/**\n * Get the volume of this shape\n * @method volume\n * @return {Number}\n */\nShape.prototype.volume = function(){\n    throw \"volume() not implemented for shape type \"+this.type;\n};\n\n/**\n * Calculates the inertia in the local frame for this shape.\n * @method calculateLocalInertia\n * @return {Vec3}\n * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n */\nShape.prototype.calculateLocalInertia = function(mass,target){\n    throw \"calculateLocalInertia() not implemented for shape type \"+this.type;\n};\n\nShape.idCounter = 0;\n\n/**\n * The available shape types.\n * @static\n * @property types\n * @type {Object}\n */\nShape.types = {\n    SPHERE:1,\n    PLANE:2,\n    BOX:4,\n    COMPOUND:8,\n    CONVEXPOLYHEDRON:16,\n    HEIGHTFIELD:32,\n    PARTICLE:64,\n    CYLINDER:128,\n    TRIMESH:256\n};\n\n\n},{\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./Shape\":43}],44:[function(_dereq_,module,exports){\nmodule.exports = Sphere;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Spherical shape\n * @class Sphere\n * @constructor\n * @extends Shape\n * @param {Number} radius The radius of the sphere, a non-negative number.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Sphere(radius){\n    Shape.call(this);\n\n    /**\n     * @property {Number} radius\n     */\n    this.radius = radius!==undefined ? Number(radius) : 1.0;\n    this.type = Shape.types.SPHERE;\n\n    if(this.radius < 0){\n        throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n}\nSphere.prototype = new Shape();\nSphere.prototype.constructor = Sphere;\n\nSphere.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    var I = 2.0*mass*this.radius*this.radius/5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n};\n\nSphere.prototype.volume = function(){\n    return 4.0 * Math.PI * this.radius / 3.0;\n};\n\nSphere.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.radius;\n};\n\nSphere.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var r = this.radius;\n    var axes = ['x','y','z'];\n    for(var i=0; i<axes.length; i++){\n        var ax = axes[i];\n        min[ax] = pos[ax] - r;\n        max[ax] = pos[ax] + r;\n    }\n};\n\n},{\"../math/Vec3\":30,\"./Shape\":43}],45:[function(_dereq_,module,exports){\nmodule.exports = Trimesh;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\nvar AABB = _dereq_('../collision/AABB');\nvar Octree = _dereq_('../utils/Octree');\n\n/**\n * @class Trimesh\n * @constructor\n * @param {array} vertices\n * @param {array} indices\n * @extends Shape\n * @example\n *     // How to make a mesh with a single triangle\n *     var vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ];\n *     var indices = [\n *         0, 1, 2  // triangle 0\n *     ];\n *     var trimeshShape = new Trimesh(vertices, indices);\n */\nfunction Trimesh(vertices, indices) {\n    Shape.call(this);\n    this.type = Shape.types.TRIMESH;\n\n    /**\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = new Float32Array(vertices);\n\n    /**\n     * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n     * @property indices\n     * @type {Array}\n     */\n    this.indices = new Int16Array(indices);\n\n    /**\n     * The normals data.\n     * @property normals\n     * @type {Array}\n     */\n    this.normals = new Float32Array(indices.length);\n\n    /**\n     * The local AABB of the mesh.\n     * @property aabb\n     * @type {Array}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * References to vertex pairs, making up all unique edges in the trimesh.\n     * @property {array} edges\n     */\n    this.edges = null;\n\n    /**\n     * Local scaling of the mesh. Use .setScale() to set it.\n     * @property {Vec3} scale\n     */\n    this.scale = new Vec3(1, 1, 1);\n\n    /**\n     * The indexed triangles. Use .updateTree() to update it.\n     * @property {Octree} tree\n     */\n    this.tree = new Octree();\n\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n}\nTrimesh.prototype = new Shape();\nTrimesh.prototype.constructor = Trimesh;\n\nvar computeNormals_n = new Vec3();\n\n/**\n * @method updateTree\n */\nTrimesh.prototype.updateTree = function(){\n    var tree = this.tree;\n\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    var scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z;\n\n    // Insert all triangles\n    var triangleAABB = new AABB();\n    var a = new Vec3();\n    var b = new Vec3();\n    var c = new Vec3();\n    var points = [a, b, c];\n    for (var i = 0; i < this.indices.length / 3; i++) {\n        //this.getTriangleVertices(i, a, b, c);\n\n        // Get unscaled triangle verts\n        var i3 = i * 3;\n        this._getUnscaledVertex(this.indices[i3], a);\n        this._getUnscaledVertex(this.indices[i3 + 1], b);\n        this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n        triangleAABB.setFromPoints(points);\n        tree.insert(triangleAABB, i);\n    }\n    tree.removeEmptyNodes();\n};\n\nvar unscaledAABB = new AABB();\n\n/**\n * Get triangles in a local AABB from the trimesh.\n * @method getTrianglesInAABB\n * @param  {AABB} aabb\n * @param  {array} result An array of integers, referencing the queried triangles.\n */\nTrimesh.prototype.getTrianglesInAABB = function(aabb, result){\n    unscaledAABB.copy(aabb);\n\n    // Scale it to local\n    var scale = this.scale;\n    var isx = scale.x;\n    var isy = scale.y;\n    var isz = scale.z;\n    var l = unscaledAABB.lowerBound;\n    var u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n\n    return this.tree.aabbQuery(unscaledAABB, result);\n};\n\n/**\n * @method setScale\n * @param {Vec3} scale\n */\nTrimesh.prototype.setScale = function(scale){\n    var wasUniform = this.scale.x === this.scale.y === this.scale.z;\n    var isUniform = scale.x === scale.y === scale.z;\n\n    if(!(wasUniform && isUniform)){\n        // Non-uniform scaling. Need to update normals.\n        this.updateNormals();\n    }\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n};\n\n/**\n * Compute the normals of the faces. Will save in the .normals array.\n * @method updateNormals\n */\nTrimesh.prototype.updateNormals = function(){\n    var n = computeNormals_n;\n\n    // Generate normals\n    var normals = this.normals;\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n\n        this.getVertex(a, va);\n        this.getVertex(b, vb);\n        this.getVertex(c, vc);\n\n        Trimesh.computeNormal(vb, va, vc, n);\n\n        normals[i3] = n.x;\n        normals[i3 + 1] = n.y;\n        normals[i3 + 2] = n.z;\n    }\n};\n\n/**\n * Update the .edges property\n * @method updateEdges\n */\nTrimesh.prototype.updateEdges = function(){\n    var edges = {};\n    var add = function(indexA, indexB){\n        var key = a < b ? a + '_' + b : b + '_' + a;\n        edges[key] = true;\n    };\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n        add(a,b);\n        add(b,c);\n        add(c,a);\n    }\n    var keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n    for (var i = 0; i < keys.length; i++) {\n        var indices = keys[i].split('_');\n        this.edges[2 * i] = parseInt(indices[0], 10);\n        this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n};\n\n/**\n * Get an edge vertex\n * @method getEdgeVertex\n * @param  {number} edgeIndex\n * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.\n * @param  {Vec3} vertexStore Where to store the result\n */\nTrimesh.prototype.getEdgeVertex = function(edgeIndex, firstOrSecond, vertexStore){\n    var vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n};\n\nvar getEdgeVector_va = new Vec3();\nvar getEdgeVector_vb = new Vec3();\n\n/**\n * Get a vector along an edge.\n * @method getEdgeVector\n * @param  {number} edgeIndex\n * @param  {Vec3} vectorStore\n */\nTrimesh.prototype.getEdgeVector = function(edgeIndex, vectorStore){\n    var va = getEdgeVector_va;\n    var vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method computeNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nTrimesh.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\nvar va = new Vec3();\nvar vb = new Vec3();\nvar vc = new Vec3();\n\n/**\n * Get vertex i.\n * @method getVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getVertex = function(i, out){\n    var scale = this.scale;\n    this._getUnscaledVertex(i, out);\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n};\n\n/**\n * Get raw vertex i\n * @private\n * @method _getUnscaledVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype._getUnscaledVertex = function(i, out){\n    var i3 = i * 3;\n    var vertices = this.vertices;\n    return out.set(\n        vertices[i3],\n        vertices[i3 + 1],\n        vertices[i3 + 2]\n    );\n};\n\n/**\n * Get a vertex from the trimesh,transformed by the given position and quaternion.\n * @method getWorldVertex\n * @param  {number} i\n * @param  {Vec3} pos\n * @param  {Quaternion} quat\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getWorldVertex = function(i, pos, quat, out){\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n};\n\n/**\n * Get the three vertices for triangle i.\n * @method getTriangleVertices\n * @param  {number} i\n * @param  {Vec3} a\n * @param  {Vec3} b\n * @param  {Vec3} c\n */\nTrimesh.prototype.getTriangleVertices = function(i, a, b, c){\n    var i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n};\n\n/**\n * Compute the normal of triangle i.\n * @method getNormal\n * @param  {Number} i\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.getNormal = function(i, target){\n    var i3 = i * 3;\n    return target.set(\n        this.normals[i3],\n        this.normals[i3 + 1],\n        this.normals[i3 + 2]\n    );\n};\n\nvar cli_aabb = new AABB();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    var x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x,\n        y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y,\n        z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x )\n    );\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\n\n/**\n * Compute the local AABB for the trimesh\n * @method computeLocalAABB\n * @param  {AABB} aabb\n */\nTrimesh.prototype.computeLocalAABB = function(aabb){\n    var l = aabb.lowerBound,\n        u = aabb.upperBound,\n        n = this.vertices.length,\n        vertices = this.vertices,\n        v = computeLocalAABB_worldVert;\n\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for(var i=0; i !== n; i++){\n        this.getVertex(i, v);\n\n        if(v.x < l.x){\n            l.x = v.x;\n        } else if(v.x > u.x){\n            u.x = v.x;\n        }\n\n        if(v.y < l.y){\n            l.y = v.y;\n        } else if(v.y > u.y){\n            u.y = v.y;\n        }\n\n        if(v.z < l.z){\n            l.z = v.z;\n        } else if(v.z > u.z){\n            u.z = v.z;\n        }\n    }\n};\n\n\n/**\n * Update the .aabb property\n * @method updateAABB\n */\nTrimesh.prototype.updateAABB = function(){\n    this.computeLocalAABB(this.aabb);\n};\n\n/**\n * Will update the .boundingSphereRadius property\n * @method updateBoundingSphereRadius\n */\nTrimesh.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var vertices = this.vertices;\n    var v = new Vec3();\n    for(var i=0, N=vertices.length / 3; i !== N; i++) {\n        this.getVertex(i, v);\n        var norm2 = v.norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\nvar calculateWorldAABB_frame = new Transform();\nvar calculateWorldAABB_aabb = new AABB();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nTrimesh.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    /*\n    var n = this.vertices.length / 3,\n        verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n\n    var v = tempWorldVertex;\n    for(var i=0; i<n; i++){\n        this.getVertex(i, v);\n        quat.vmult(v, v);\n        pos.vadd(v, v);\n        if (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n    */\n\n    // Faster approximation using local AABB\n    var frame = calculateWorldAABB_frame;\n    var result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n};\n\n/**\n * Get approximate volume\n * @method volume\n * @return {Number}\n */\nTrimesh.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Create a Trimesh instance, shaped as a torus.\n * @static\n * @method createTorus\n * @param  {number} [radius=1]\n * @param  {number} [tube=0.5]\n * @param  {number} [radialSegments=8]\n * @param  {number} [tubularSegments=6]\n * @param  {number} [arc=6.283185307179586]\n * @return {Trimesh} A torus\n */\nTrimesh.createTorus = function (radius, tube, radialSegments, tubularSegments, arc) {\n    radius = radius || 1;\n    tube = tube || 0.5;\n    radialSegments = radialSegments || 8;\n    tubularSegments = tubularSegments || 6;\n    arc = arc || Math.PI * 2;\n\n    var vertices = [];\n    var indices = [];\n\n    for ( var j = 0; j <= radialSegments; j ++ ) {\n        for ( var i = 0; i <= tubularSegments; i ++ ) {\n            var u = i / tubularSegments * arc;\n            var v = j / radialSegments * Math.PI * 2;\n\n            var x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n            var y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n            var z = tube * Math.sin( v );\n\n            vertices.push( x, y, z );\n        }\n    }\n\n    for ( var j = 1; j <= radialSegments; j ++ ) {\n        for ( var i = 1; i <= tubularSegments; i ++ ) {\n            var a = ( tubularSegments + 1 ) * j + i - 1;\n            var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n            var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n            var d = ( tubularSegments + 1 ) * j + i;\n\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n\n    return new Trimesh(vertices, indices);\n};\n\n},{\"../collision/AABB\":3,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../utils/Octree\":50,\"./Shape\":43}],46:[function(_dereq_,module,exports){\nmodule.exports = GSSolver;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('./Solver');\n\n/**\n * Constraint equation Gauss-Seidel solver.\n * @class GSSolver\n * @constructor\n * @todo The spook parameters should be specified for each constraint, not globally.\n * @author schteppe / https://github.com/schteppe\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n * @extends Solver\n */\nfunction GSSolver(){\n    Solver.call(this);\n\n    /**\n     * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n     * @property iterations\n     * @type {Number}\n     * @todo write more about solver and iterations in the wiki\n     */\n    this.iterations = 10;\n\n    /**\n     * When tolerance is reached, the system is assumed to be converged.\n     * @property tolerance\n     * @type {Number}\n     */\n    this.tolerance = 1e-7;\n}\nGSSolver.prototype = new Solver();\n\nvar GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.\nvar GSSolver_solve_invCs = [];\nvar GSSolver_solve_Bs = [];\nGSSolver.prototype.solve = function(dt,world){\n    var iter = 0,\n        maxIter = this.iterations,\n        tolSquared = this.tolerance*this.tolerance,\n        equations = this.equations,\n        Neq = equations.length,\n        bodies = world.bodies,\n        Nbodies = bodies.length,\n        h = dt,\n        q, B, invC, deltalambda, deltalambdaTot, GWlambda, lambdaj;\n\n    // Update solve mass\n    if(Neq !== 0){\n        for(var i=0; i!==Nbodies; i++){\n            bodies[i].updateSolveMassProperties();\n        }\n    }\n\n    // Things that does not change during iteration can be computed once\n    var invCs = GSSolver_solve_invCs,\n        Bs = GSSolver_solve_Bs,\n        lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n    for(var i=0; i!==Neq; i++){\n        var c = equations[i];\n        lambda[i] = 0.0;\n        Bs[i] = c.computeB(h);\n        invCs[i] = 1.0 / c.computeC();\n    }\n\n    if(Neq !== 0){\n\n        // Reset vlambda\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                vlambda=b.vlambda,\n                wlambda=b.wlambda;\n            vlambda.set(0,0,0);\n            if(wlambda){\n                wlambda.set(0,0,0);\n            }\n        }\n\n        // Iterate over equations\n        for(iter=0; iter!==maxIter; iter++){\n\n            // Accumulate the total error for each iteration.\n            deltalambdaTot = 0.0;\n\n            for(var j=0; j!==Neq; j++){\n\n                var c = equations[j];\n\n                // Compute iteration\n                B = Bs[j];\n                invC = invCs[j];\n                lambdaj = lambda[j];\n                GWlambda = c.computeGWlambda();\n                deltalambda = invC * ( B - GWlambda - c.eps * lambdaj );\n\n                // Clamp if we are not within the min/max interval\n                if(lambdaj + deltalambda < c.minForce){\n                    deltalambda = c.minForce - lambdaj;\n                } else if(lambdaj + deltalambda > c.maxForce){\n                    deltalambda = c.maxForce - lambdaj;\n                }\n                lambda[j] += deltalambda;\n\n                deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n                c.addToWlambda(deltalambda);\n            }\n\n            // If the total error is small enough - stop iterate\n            if(deltalambdaTot*deltalambdaTot < tolSquared){\n                break;\n            }\n        }\n\n        // Add result to velocity\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                v=b.velocity,\n                w=b.angularVelocity;\n            v.vadd(b.vlambda, v);\n            if(w){\n                w.vadd(b.wlambda, w);\n            }\n        }\n    }\n\n    return iter;\n};\n\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./Solver\":47}],47:[function(_dereq_,module,exports){\nmodule.exports = Solver;\n\n/**\n * Constraint equation solver base class.\n * @class Solver\n * @constructor\n * @author schteppe / https://github.com/schteppe\n */\nfunction Solver(){\n    /**\n     * All equations to be solved\n     * @property {Array} equations\n     */\n    this.equations = [];\n}\n\n/**\n * Should be implemented in subclasses!\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSolver.prototype.solve = function(dt,world){\n    // Should return the number of iterations done!\n    return 0;\n};\n\n/**\n * Add an equation\n * @method addEquation\n * @param {Equation} eq\n */\nSolver.prototype.addEquation = function(eq){\n    if (eq.enabled) {\n        this.equations.push(eq);\n    }\n};\n\n/**\n * Remove an equation\n * @method removeEquation\n * @param {Equation} eq\n */\nSolver.prototype.removeEquation = function(eq){\n    var eqs = this.equations;\n    var i = eqs.indexOf(eq);\n    if(i !== -1){\n        eqs.splice(i,1);\n    }\n};\n\n/**\n * Add all equations\n * @method removeAllEquations\n */\nSolver.prototype.removeAllEquations = function(){\n    this.equations.length = 0;\n};\n\n\n},{}],48:[function(_dereq_,module,exports){\nmodule.exports = SplitSolver;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('./Solver');\nvar Body = _dereq_('../objects/Body');\n\n/**\n * Splits the equations into islands and solves them independently. Can improve performance.\n * @class SplitSolver\n * @constructor\n * @extends Solver\n * @param {Solver} subsolver\n */\nfunction SplitSolver(subsolver){\n    Solver.call(this);\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = [];\n\n    // Create needed nodes, reuse if possible\n    while(this.nodePool.length < 128){\n        this.nodePool.push(this.createNode());\n    }\n}\nSplitSolver.prototype = new Solver();\n\n// Returns the number of subsystems\nvar SplitSolver_solve_nodes = []; // All allocated node objects\nvar SplitSolver_solve_nodePool = []; // All allocated node objects\nvar SplitSolver_solve_eqs = [];   // Temp array\nvar SplitSolver_solve_bds = [];   // Temp array\nvar SplitSolver_solve_dummyWorld = {bodies:[]}; // Temp object\n\nvar STATIC = Body.STATIC;\nfunction getUnvisitedNode(nodes){\n    var Nnodes = nodes.length;\n    for(var i=0; i!==Nnodes; i++){\n        var node = nodes[i];\n        if(!node.visited && !(node.body.type & STATIC)){\n            return node;\n        }\n    }\n    return false;\n}\n\nvar queue = [];\nfunction bfs(root,visitFunc,bds,eqs){\n    queue.push(root);\n    root.visited = true;\n    visitFunc(root,bds,eqs);\n    while(queue.length) {\n        var node = queue.pop();\n        // Loop over unvisited child nodes\n        var child;\n        while((child = getUnvisitedNode(node.children))) {\n            child.visited = true;\n            visitFunc(child,bds,eqs);\n            queue.push(child);\n        }\n    }\n}\n\nfunction visitFunc(node,bds,eqs){\n    bds.push(node.body);\n    var Neqs = node.eqs.length;\n    for(var i=0; i!==Neqs; i++){\n        var eq = node.eqs[i];\n        if(eqs.indexOf(eq) === -1){\n            eqs.push(eq);\n        }\n    }\n}\n\nSplitSolver.prototype.createNode = function(){\n    return { body:null, children:[], eqs:[], visited:false };\n};\n\n/**\n * Solve the subsystems\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSplitSolver.prototype.solve = function(dt,world){\n    var nodes=SplitSolver_solve_nodes,\n        nodePool=this.nodePool,\n        bodies=world.bodies,\n        equations=this.equations,\n        Neq=equations.length,\n        Nbodies=bodies.length,\n        subsolver=this.subsolver;\n\n    // Create needed nodes, reuse if possible\n    while(nodePool.length < Nbodies){\n        nodePool.push(this.createNode());\n    }\n    nodes.length = Nbodies;\n    for (var i = 0; i < Nbodies; i++) {\n        nodes[i] = nodePool[i];\n    }\n\n    // Reset node values\n    for(var i=0; i!==Nbodies; i++){\n        var node = nodes[i];\n        node.body = bodies[i];\n        node.children.length = 0;\n        node.eqs.length = 0;\n        node.visited = false;\n    }\n    for(var k=0; k!==Neq; k++){\n        var eq=equations[k],\n            i=bodies.indexOf(eq.bi),\n            j=bodies.indexOf(eq.bj),\n            ni=nodes[i],\n            nj=nodes[j];\n        ni.children.push(nj);\n        ni.eqs.push(eq);\n        nj.children.push(ni);\n        nj.eqs.push(eq);\n    }\n\n    var child, n=0, eqs=SplitSolver_solve_eqs;\n\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n\n    var dummyWorld = SplitSolver_solve_dummyWorld;\n    while((child = getUnvisitedNode(nodes))){\n        eqs.length = 0;\n        dummyWorld.bodies.length = 0;\n        bfs(child, visitFunc, dummyWorld.bodies, eqs);\n\n        var Neqs = eqs.length;\n\n        eqs = eqs.sort(sortById);\n\n        for(var i=0; i!==Neqs; i++){\n            subsolver.addEquation(eqs[i]);\n        }\n\n        var iter = subsolver.solve(dt,dummyWorld);\n        subsolver.removeAllEquations();\n        n++;\n    }\n\n    return n;\n};\n\nfunction sortById(a, b){\n    return b.id - a.id;\n}\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"./Solver\":47}],49:[function(_dereq_,module,exports){\n/**\n * Base class for objects that dispatches events.\n * @class EventTarget\n * @constructor\n */\nvar EventTarget = function () {\n\n};\n\nmodule.exports = EventTarget;\n\nEventTarget.prototype = {\n    constructor: EventTarget,\n\n    /**\n     * Add an event listener\n     * @method addEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    addEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ this._listeners = {}; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] === undefined ) {\n            listeners[ type ] = [];\n        }\n        if ( listeners[ type ].indexOf( listener ) === - 1 ) {\n            listeners[ type ].push( listener );\n        }\n        return this;\n    },\n\n    /**\n     * Check if an event listener is added\n     * @method hasEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {Boolean}\n     */\n    hasEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return false; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Remove an event listener\n     * @method removeEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    removeEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        if ( listeners[type] === undefined ){ return this; }\n        var index = listeners[ type ].indexOf( listener );\n        if ( index !== - 1 ) {\n            listeners[ type ].splice( index, 1 );\n        }\n        return this;\n    },\n\n    /**\n     * Emit an event.\n     * @method dispatchEvent\n     * @param  {Object} event\n     * @param  {String} event.type\n     * @return {EventTarget} The self object, for chainability.\n     */\n    dispatchEvent: function ( event ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        var listenerArray = listeners[ event.type ];\n        if ( listenerArray !== undefined ) {\n            event.target = this;\n            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\n                listenerArray[ i ].call( this, event );\n            }\n        }\n        return this;\n    }\n};\n\n},{}],50:[function(_dereq_,module,exports){\nvar AABB = _dereq_('../collision/AABB');\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = Octree;\n\n/**\n * @class OctreeNode\n * @param {object} [options]\n * @param {Octree} [options.root]\n * @param {AABB} [options.aabb]\n */\nfunction OctreeNode(options){\n    options = options || {};\n\n    /**\n     * The root node\n     * @property {OctreeNode} root\n     */\n    this.root = options.root || null;\n\n    /**\n     * Boundary of this node\n     * @property {AABB} aabb\n     */\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n\n    /**\n     * Contained data at the current node level.\n     * @property {Array} data\n     */\n    this.data = [];\n\n    /**\n     * Children to this node\n     * @property {Array} children\n     */\n    this.children = [];\n}\n\n/**\n * @class Octree\n * @param {AABB} aabb The total AABB of the tree\n * @param {object} [options]\n * @param {number} [options.maxDepth=8]\n * @extends OctreeNode\n */\nfunction Octree(aabb, options){\n    options = options || {};\n    options.root = null;\n    options.aabb = aabb;\n    OctreeNode.call(this, options);\n\n    /**\n     * Maximum subdivision depth\n     * @property {number} maxDepth\n     */\n    this.maxDepth = typeof(options.maxDepth) !== 'undefined' ? options.maxDepth : 8;\n}\nOctree.prototype = new OctreeNode();\n\nOctreeNode.prototype.reset = function(aabb, options){\n    this.children.length = this.data.length = 0;\n};\n\n/**\n * Insert data into this node\n * @method insert\n * @param  {AABB} aabb\n * @param  {object} elementData\n * @return {boolean} True if successful, otherwise false\n */\nOctreeNode.prototype.insert = function(aabb, elementData, level){\n    var nodeData = this.data;\n    level = level || 0;\n\n    // Ignore objects that do not belong in this node\n    if (!this.aabb.contains(aabb)){\n        return false; // object cannot be added\n    }\n\n    var children = this.children;\n\n    if(level < (this.maxDepth || this.root.maxDepth)){\n        // Subdivide if there are no children yet\n        var subdivided = false;\n        if (!children.length){\n            this.subdivide();\n            subdivided = true;\n        }\n\n        // add to whichever node will accept it\n        for (var i = 0; i !== 8; i++) {\n            if (children[i].insert(aabb, elementData, level + 1)){\n                return true;\n            }\n        }\n\n        if(subdivided){\n            // No children accepted! Might as well just remove em since they contain none\n            children.length = 0;\n        }\n    }\n\n    // Too deep, or children didnt want it. add it in current node\n    nodeData.push(elementData);\n\n    return true;\n};\n\nvar halfDiagonal = new Vec3();\n\n/**\n * Create 8 equally sized children nodes and put them in the .children array.\n * @method subdivide\n */\nOctreeNode.prototype.subdivide = function() {\n    var aabb = this.aabb;\n    var l = aabb.lowerBound;\n    var u = aabb.upperBound;\n\n    var children = this.children;\n\n    children.push(\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,0) }) })\n    );\n\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n\n    var root = this.root || this;\n\n    for (var i = 0; i !== 8; i++) {\n        var child = children[i];\n\n        // Set current node as root\n        child.root = root;\n\n        // Compute bounds\n        var lowerBound = child.aabb.lowerBound;\n        lowerBound.x *= halfDiagonal.x;\n        lowerBound.y *= halfDiagonal.y;\n        lowerBound.z *= halfDiagonal.z;\n\n        lowerBound.vadd(l, lowerBound);\n\n        // Upper bound is always lower bound + halfDiagonal\n        lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n};\n\n/**\n * Get all data, potentially within an AABB\n * @method aabbQuery\n * @param  {AABB} aabb\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.aabbQuery = function(aabb, result) {\n\n    var nodeData = this.data;\n\n    // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n    var children = this.children;\n\n\n    // for (var i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        if (node.aabb.overlaps(aabb)){\n            Array.prototype.push.apply(result, node.data);\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Get all data, potentially intersected by a ray.\n * @method rayQuery\n * @param  {Ray} ray\n * @param  {Transform} treeTransform\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.rayQuery = function(ray, treeTransform, result) {\n\n    // Use aabb query for now.\n    // @todo implement real ray query which needs less lookups\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n\n    return result;\n};\n\n/**\n * @method removeEmptyNodes\n */\nOctreeNode.prototype.removeEmptyNodes = function() {\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        for (var i = node.children.length - 1; i >= 0; i--) {\n            if(!node.children[i].data.length){\n                node.children.splice(i, 1);\n            }\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n};\n\n},{\"../collision/AABB\":3,\"../math/Vec3\":30}],51:[function(_dereq_,module,exports){\nmodule.exports = Pool;\n\n/**\n * For pooling objects that can be reused.\n * @class Pool\n * @constructor\n */\nfunction Pool(){\n    /**\n     * The pooled objects\n     * @property {Array} objects\n     */\n    this.objects = [];\n\n    /**\n     * Constructor of the objects\n     * @property {mixed} type\n     */\n    this.type = Object;\n}\n\n/**\n * Release an object after use\n * @method release\n * @param {Object} obj\n */\nPool.prototype.release = function(){\n    var Nargs = arguments.length;\n    for(var i=0; i!==Nargs; i++){\n        this.objects.push(arguments[i]);\n    }\n};\n\n/**\n * Get an object\n * @method get\n * @return {mixed}\n */\nPool.prototype.get = function(){\n    if(this.objects.length===0){\n        return this.constructObject();\n    } else {\n        return this.objects.pop();\n    }\n};\n\n/**\n * Construct an object. Should be implmented in each subclass.\n * @method constructObject\n * @return {mixed}\n */\nPool.prototype.constructObject = function(){\n    throw new Error(\"constructObject() not implemented in this Pool subclass yet!\");\n};\n\n},{}],52:[function(_dereq_,module,exports){\nmodule.exports = TupleDictionary;\n\n/**\n * @class TupleDictionary\n * @constructor\n */\nfunction TupleDictionary() {\n\n    /**\n     * The data storage\n     * @property data\n     * @type {Object}\n     */\n    this.data = { keys:[] };\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nTupleDictionary.prototype.get = function(i, j) {\n    if (i > j) {\n        // swap\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    return this.data[i+'-'+j];\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nTupleDictionary.prototype.set = function(i, j, value) {\n    if (i > j) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    var key = i+'-'+j;\n\n    // Check if key already exists\n    if(!this.get(i,j)){\n        this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n};\n\n/**\n * @method reset\n */\nTupleDictionary.prototype.reset = function() {\n    var data = this.data,\n        keys = data.keys;\n    while(keys.length > 0){\n        var key = keys.pop();\n        delete data[key];\n    }\n};\n\n},{}],53:[function(_dereq_,module,exports){\nfunction Utils(){}\n\nmodule.exports = Utils;\n\n/**\n * Extend an options object with default values.\n * @static\n * @method defaults\n * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.\n * @param  {object} defaults An object containing default values.\n * @return {object} The modified options object.\n */\nUtils.defaults = function(options, defaults){\n    options = options || {};\n\n    for(var key in defaults){\n        if(!(key in options)){\n            options[key] = defaults[key];\n        }\n    }\n\n    return options;\n};\n\n},{}],54:[function(_dereq_,module,exports){\nmodule.exports = Vec3Pool;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Pool = _dereq_('./Pool');\n\n/**\n * @class Vec3Pool\n * @constructor\n * @extends Pool\n */\nfunction Vec3Pool(){\n    Pool.call(this);\n    this.type = Vec3;\n}\nVec3Pool.prototype = new Pool();\n\n/**\n * Construct a vector\n * @method constructObject\n * @return {Vec3}\n */\nVec3Pool.prototype.constructObject = function(){\n    return new Vec3();\n};\n\n},{\"../math/Vec3\":30,\"./Pool\":51}],55:[function(_dereq_,module,exports){\nmodule.exports = Narrowphase;\n\nvar AABB = _dereq_('../collision/AABB');\nvar Shape = _dereq_('../shapes/Shape');\nvar Ray = _dereq_('../collision/Ray');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Transform = _dereq_('../math/Transform');\nvar ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('../solver/Solver');\nvar Vec3Pool = _dereq_('../utils/Vec3Pool');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar FrictionEquation = _dereq_('../equations/FrictionEquation');\n\n/**\n * Helper class for the World. Generates ContactEquations.\n * @class Narrowphase\n * @constructor\n * @todo Sphere-ConvexPolyhedron contacts\n * @todo Contact reduction\n * @todo  should move methods to prototype\n */\nfunction Narrowphase(world){\n\n    /**\n     * Internal storage of pooled contact points.\n     * @property {Array} contactPointPool\n     */\n    this.contactPointPool = [];\n\n    this.frictionEquationPool = [];\n\n    this.result = [];\n    this.frictionResult = [];\n\n    /**\n     * Pooled vectors.\n     * @property {Vec3Pool} v3pool\n     */\n    this.v3pool = new Vec3Pool();\n\n    this.world = world;\n    this.currentContactMaterial = null;\n\n    /**\n     * @property {Boolean} enableFrictionReduction\n     */\n    this.enableFrictionReduction = false;\n}\n\n/**\n * Make a contact object, by using the internal pool or creating a new one.\n * @method createContactEquation\n * @return {ContactEquation}\n */\nNarrowphase.prototype.createContactEquation = function(bi, bj, si, sj, rsi, rsj){\n    var c;\n    if(this.contactPointPool.length){\n        c = this.contactPointPool.pop();\n        c.bi = bi;\n        c.bj = bj;\n    } else {\n        c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n    var cm = this.currentContactMaterial;\n\n    c.restitution = cm.restitution;\n\n    c.setSpookParams(\n        cm.contactEquationStiffness,\n        cm.contactEquationRelaxation,\n        this.world.dt\n    );\n\n    var matA = si.material || bi.material;\n    var matB = sj.material || bj.material;\n    if(matA && matB && matA.restitution >= 0 && matB.restitution >= 0){\n        c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = rsi || si;\n    c.sj = rsj || sj;\n\n    return c;\n};\n\nNarrowphase.prototype.createFrictionEquationsFromContact = function(contactEquation, outArray){\n    var bodyA = contactEquation.bi;\n    var bodyB = contactEquation.bj;\n    var shapeA = contactEquation.si;\n    var shapeB = contactEquation.sj;\n\n    var world = this.world;\n    var cm = this.currentContactMaterial;\n\n    // If friction or restitution were specified in the material, use them\n    var friction = cm.friction;\n    var matA = shapeA.material || bodyA.material;\n    var matB = shapeB.material || bodyB.material;\n    if(matA && matB && matA.friction >= 0 && matB.friction >= 0){\n        friction = matA.friction * matB.friction;\n    }\n\n    if(friction > 0){\n\n        // Create 2 tangent equations\n        var mug = friction * world.gravity.length();\n        var reducedMass = (bodyA.invMass + bodyB.invMass);\n        if(reducedMass > 0){\n            reducedMass = 1/reducedMass;\n        }\n        var pool = this.frictionEquationPool;\n        var c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n        var c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n\n        c1.bi = c2.bi = bodyA;\n        c1.bj = c2.bj = bodyB;\n        c1.minForce = c2.minForce = -mug*reducedMass;\n        c1.maxForce = c2.maxForce = mug*reducedMass;\n\n        // Copy over the relative vectors\n        c1.ri.copy(contactEquation.ri);\n        c1.rj.copy(contactEquation.rj);\n        c2.ri.copy(contactEquation.ri);\n        c2.rj.copy(contactEquation.rj);\n\n        // Construct tangents\n        contactEquation.ni.tangents(c1.t, c2.t);\n\n        // Set spook params\n        c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n        c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n\n        c1.enabled = c2.enabled = contactEquation.enabled;\n\n        outArray.push(c1, c2);\n\n        return true;\n    }\n\n    return false;\n};\n\nvar averageNormal = new Vec3();\nvar averageContactPointA = new Vec3();\nvar averageContactPointB = new Vec3();\n\n// Take the average N latest contact point on the plane.\nNarrowphase.prototype.createFrictionFromAverage = function(numContacts){\n    // The last contactEquation\n    var c = this.result[this.result.length - 1];\n\n    // Create the result: two \"average\" friction equations\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n        return;\n    }\n\n    var f1 = this.frictionResult[this.frictionResult.length - 2];\n    var f2 = this.frictionResult[this.frictionResult.length - 1];\n\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n\n    var bodyA = c.bi;\n    var bodyB = c.bj;\n    for(var i=0; i!==numContacts; i++){\n        c = this.result[this.result.length - 1 - i];\n        if(c.bodyA !== bodyA){\n            averageNormal.vadd(c.ni, averageNormal); // vec2.add(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.ri, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.rj, averageContactPointB);\n        } else {\n            averageNormal.vsub(c.ni, averageNormal); // vec2.sub(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.rj, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.ri, averageContactPointB);\n        }\n    }\n\n    var invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri); // vec2.scale(eq.contactPointA, eq.contactPointA, invNumContacts);\n    averageContactPointB.scale(invNumContacts, f1.rj); // vec2.scale(eq.contactPointB, eq.contactPointB, invNumContacts);\n    f2.ri.copy(f1.ri); // Should be the same\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t);\n    // return eq;\n};\n\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpQuat1 = new Quaternion();\nvar tmpQuat2 = new Quaternion();\n\n/**\n * Generate all contacts between a list of body pairs\n * @method getContacts\n * @param {array} p1 Array of body indices\n * @param {array} p2 Array of body indices\n * @param {World} world\n * @param {array} result Array to store generated contacts\n * @param {array} oldcontacts Optional. Array of reusable contact objects\n */\nNarrowphase.prototype.getContacts = function(p1, p2, world, result, oldcontacts, frictionResult, frictionPool){\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n\n    var qi = tmpQuat1;\n    var qj = tmpQuat2;\n    var xi = tmpVec1;\n    var xj = tmpVec2;\n\n    for(var k=0, N=p1.length; k!==N; k++){\n\n        // Get current collision bodies\n        var bi = p1[k],\n            bj = p2[k];\n\n        // Get contact material\n        var bodyContactMaterial = null;\n        if(bi.material && bj.material){\n            bodyContactMaterial = world.getContactMaterial(bi.material,bj.material) || null;\n        }\n\n        for (var i = 0; i < bi.shapes.length; i++) {\n            bi.quaternion.mult(bi.shapeOrientations[i], qi);\n            bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n            xi.vadd(bi.position, xi);\n            var si = bi.shapes[i];\n\n            for (var j = 0; j < bj.shapes.length; j++) {\n\n                // Compute world transform of shapes\n                bj.quaternion.mult(bj.shapeOrientations[j], qj);\n                bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n                xj.vadd(bj.position, xj);\n                var sj = bj.shapes[j];\n\n                if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n                    continue;\n                }\n\n                // Get collision material\n                var shapeContactMaterial = null;\n                if(si.material && sj.material){\n                    shapeContactMaterial = world.getContactMaterial(si.material,sj.material) || null;\n                }\n\n                this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial;\n\n                // Get contacts\n                var resolver = this[si.type | sj.type];\n                if(resolver){\n                    if (si.type < sj.type) {\n                        resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj);\n                    } else {\n                        resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj);\n                    }\n                }\n            }\n        }\n    }\n};\n\nvar numWarnings = 0;\nvar maxWarnings = 10;\n\nfunction warn(msg){\n    if(numWarnings > maxWarnings){\n        return;\n    }\n\n    numWarnings++;\n\n    console.warn(msg);\n}\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.BOX] =\nNarrowphase.prototype.boxBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.boxConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.PARTICLE] =\nNarrowphase.prototype.boxParticle = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexParticle(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\n/**\n * @method sphereSphere\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE] =\nNarrowphase.prototype.sphereSphere = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have only one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    xj.vsub(xi, r.ni);\n    r.ni.normalize();\n\n    // Contact point locations\n    r.ri.copy(r.ni);\n    r.rj.copy(r.ni);\n    r.ri.mult(si.radius, r.ri);\n    r.rj.mult(-sj.radius, r.rj);\n\n    r.ri.vadd(xi, r.ri);\n    r.ri.vsub(bi.position, r.ri);\n\n    r.rj.vadd(xj, r.rj);\n    r.rj.vsub(bj.position, r.rj);\n\n    this.result.push(r);\n\n    this.createFrictionEquationsFromContact(r, this.frictionResult);\n};\n\n/**\n * @method planeTrimesh\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nvar planeTrimesh_normal = new Vec3();\nvar planeTrimesh_relpos = new Vec3();\nvar planeTrimesh_projected = new Vec3();\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.TRIMESH] =\nNarrowphase.prototype.planeTrimesh = function(\n    planeShape,\n    trimeshShape,\n    planePos,\n    trimeshPos,\n    planeQuat,\n    trimeshQuat,\n    planeBody,\n    trimeshBody\n){\n    // Make contacts!\n    var v = new Vec3();\n\n    var normal = planeTrimesh_normal;\n    normal.set(0,0,1);\n    planeQuat.vmult(normal,normal); // Turn normal according to plane\n\n    for(var i=0; i<trimeshShape.vertices.length / 3; i++){\n\n        // Get world vertex from trimesh\n        trimeshShape.getVertex(i, v);\n\n        // Safe up\n        var v2 = new Vec3();\n        v2.copy(v);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n        // Check plane side\n        var relpos = planeTrimesh_relpos;\n        v.vsub(planePos, relpos);\n        var dot = normal.dot(relpos);\n\n        if(dot <= 0.0){\n            var r = this.createContactEquation(planeBody,trimeshBody,planeShape,trimeshShape);\n\n            r.ni.copy(normal); // Contact normal is the plane normal\n\n            // Get vertex position projected on plane\n            var projected = planeTrimesh_projected;\n            normal.scale(relpos.dot(normal), projected);\n            v.vsub(projected,projected);\n\n            // ri is the projected world position minus plane position\n            r.ri.copy(projected);\n            r.ri.vsub(planeBody.position, r.ri);\n\n            r.rj.copy(v);\n            r.rj.vsub(trimeshBody.position, r.rj);\n\n            // Store result\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n};\n\n/**\n * @method sphereTrimesh\n * @param  {Shape}      sphereShape\n * @param  {Shape}      trimeshShape\n * @param  {Vec3}       spherePos\n * @param  {Vec3}       trimeshPos\n * @param  {Quaternion} sphereQuat\n * @param  {Quaternion} trimeshQuat\n * @param  {Body}       sphereBody\n * @param  {Body}       trimeshBody\n */\nvar sphereTrimesh_normal = new Vec3();\nvar sphereTrimesh_relpos = new Vec3();\nvar sphereTrimesh_projected = new Vec3();\nvar sphereTrimesh_v = new Vec3();\nvar sphereTrimesh_v2 = new Vec3();\nvar sphereTrimesh_edgeVertexA = new Vec3();\nvar sphereTrimesh_edgeVertexB = new Vec3();\nvar sphereTrimesh_edgeVector = new Vec3();\nvar sphereTrimesh_edgeVectorUnit = new Vec3();\nvar sphereTrimesh_localSpherePos = new Vec3();\nvar sphereTrimesh_tmp = new Vec3();\nvar sphereTrimesh_va = new Vec3();\nvar sphereTrimesh_vb = new Vec3();\nvar sphereTrimesh_vc = new Vec3();\nvar sphereTrimesh_localSphereAABB = new AABB();\nvar sphereTrimesh_triangles = [];\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.TRIMESH] =\nNarrowphase.prototype.sphereTrimesh = function (\n    sphereShape,\n    trimeshShape,\n    spherePos,\n    trimeshPos,\n    sphereQuat,\n    trimeshQuat,\n    sphereBody,\n    trimeshBody\n) {\n\n    var edgeVertexA = sphereTrimesh_edgeVertexA;\n    var edgeVertexB = sphereTrimesh_edgeVertexB;\n    var edgeVector = sphereTrimesh_edgeVector;\n    var edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    var localSpherePos = sphereTrimesh_localSpherePos;\n    var tmp = sphereTrimesh_tmp;\n    var localSphereAABB = sphereTrimesh_localSphereAABB;\n    var v2 = sphereTrimesh_v2;\n    var relpos = sphereTrimesh_relpos;\n    var triangles = sphereTrimesh_triangles;\n\n    // Convert sphere position to local in the trimesh\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos);\n\n    // Get the aabb of the sphere locally in the trimesh\n    var sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(\n        localSpherePos.x - sphereRadius,\n        localSpherePos.y - sphereRadius,\n        localSpherePos.z - sphereRadius\n    );\n    localSphereAABB.upperBound.set(\n        localSpherePos.x + sphereRadius,\n        localSpherePos.y + sphereRadius,\n        localSpherePos.z + sphereRadius\n    );\n\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles);\n    //for (var i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n\n    // Vertices\n    var v = sphereTrimesh_v;\n    var radiusSquared = sphereShape.radius * sphereShape.radius;\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v);\n\n            // Check vertex overlap in sphere\n            v.vsub(localSpherePos, relpos);\n\n            if(relpos.norm2() <= radiusSquared){\n\n                // Safe up\n                v2.copy(v);\n                Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n                v.vsub(spherePos, relpos);\n\n                var r = this.createContactEquation(sphereBody,trimeshBody,sphereShape,trimeshShape);\n                r.ni.copy(relpos);\n                r.ni.normalize();\n\n                // ri is the vector from sphere center to the sphere surface\n                r.ri.copy(r.ni);\n                r.ri.scale(sphereShape.radius, r.ri);\n                r.ri.vadd(spherePos, r.ri);\n                r.ri.vsub(sphereBody.position, r.ri);\n\n                r.rj.copy(v);\n                r.rj.vsub(trimeshBody.position, r.rj);\n\n                // Store result\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    // Check all edges\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + ((j+1)%3)], edgeVertexB);\n            edgeVertexB.vsub(edgeVertexA, edgeVector);\n\n            // Project sphere position to the edge\n            localSpherePos.vsub(edgeVertexB, tmp);\n            var positionAlongEdgeB = tmp.dot(edgeVector);\n\n            localSpherePos.vsub(edgeVertexA, tmp);\n            var positionAlongEdgeA = tmp.dot(edgeVector);\n\n            if(positionAlongEdgeA > 0 && positionAlongEdgeB < 0){\n\n                // Now check the orthogonal distance from edge to sphere center\n                localSpherePos.vsub(edgeVertexA, tmp);\n\n                edgeVectorUnit.copy(edgeVector);\n                edgeVectorUnit.normalize();\n                positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n\n                edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n                tmp.vadd(edgeVertexA, tmp);\n\n                // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n                var dist = tmp.distanceTo(localSpherePos);\n                if(dist < sphereShape.radius){\n                    var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n                    tmp.vsub(localSpherePos, r.ni);\n                    r.ni.normalize();\n                    r.ni.scale(sphereShape.radius, r.ri);\n\n                    Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n                    tmp.vsub(trimeshBody.position, r.rj);\n\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n\n    // Triangle faces\n    var va = sphereTrimesh_va;\n    var vb = sphereTrimesh_vb;\n    var vc = sphereTrimesh_vc;\n    var normal = sphereTrimesh_normal;\n    for(var i=0, N = triangles.length; i !== N; i++){\n        trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n        trimeshShape.getNormal(triangles[i], normal);\n        localSpherePos.vsub(va, tmp);\n        var dist = tmp.dot(normal);\n        normal.scale(dist, tmp);\n        localSpherePos.vsub(tmp, tmp);\n\n        // tmp is now the sphere position projected to the triangle plane\n        dist = tmp.distanceTo(localSpherePos);\n        if(Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius){\n            var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n\n    triangles.length = 0;\n};\n\nvar point_on_plane_to_sphere = new Vec3();\nvar plane_to_sphere_ortho = new Vec3();\n\n/**\n * @method spherePlane\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.PLANE] =\nNarrowphase.prototype.spherePlane = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    r.ni.set(0,0,1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n    r.ni.normalize(); // Needed?\n\n    // Vector from sphere center to contact point\n    r.ni.mult(si.radius, r.ri);\n\n    // Project down sphere on plane\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.mult(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho,r.rj); // The sphere position projected to plane\n\n    if(-point_on_plane_to_sphere.dot(r.ni) <= si.radius){\n\n        // Make it relative to the body\n        var ri = r.ri;\n        var rj = r.rj;\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\nvar pointInPolygon_edge = new Vec3();\nvar pointInPolygon_edge_x_normal = new Vec3();\nvar pointInPolygon_vtp = new Vec3();\nfunction pointInPolygon(verts, normal, p){\n    var positiveResult = null;\n    var N = verts.length;\n    for(var i=0; i!==N; i++){\n        var v = verts[i];\n\n        // Get edge to the next vertex\n        var edge = pointInPolygon_edge;\n        verts[(i+1) % (N)].vsub(v,edge);\n\n        // Get cross product between polygon normal and the edge\n        var edge_x_normal = pointInPolygon_edge_x_normal;\n        //var edge_x_normal = new Vec3();\n        edge.cross(normal,edge_x_normal);\n\n        // Get vector between point and current vertex\n        var vertex_to_p = pointInPolygon_vtp;\n        p.vsub(v,vertex_to_p);\n\n        // This dot product determines which side of the edge the point is\n        var r = edge_x_normal.dot(vertex_to_p);\n\n        // If all such dot products have same sign, we are inside the polygon.\n        if(positiveResult===null || (r>0 && positiveResult===true) || (r<=0 && positiveResult===false)){\n            if(positiveResult===null){\n                positiveResult = r>0;\n            }\n            continue;\n        } else {\n            return false; // Encountered some other sign. Exit.\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return true;\n}\n\nvar box_to_sphere = new Vec3();\nvar sphereBox_ns = new Vec3();\nvar sphereBox_ns1 = new Vec3();\nvar sphereBox_ns2 = new Vec3();\nvar sphereBox_sides = [new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3()];\nvar sphereBox_sphere_to_corner = new Vec3();\nvar sphereBox_side_ns = new Vec3();\nvar sphereBox_side_ns1 = new Vec3();\nvar sphereBox_side_ns2 = new Vec3();\n\n/**\n * @method sphereBox\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.BOX] =\nNarrowphase.prototype.sphereBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n\n    // we refer to the box as body j\n    var sides = sphereBox_sides;\n    xi.vsub(xj,box_to_sphere);\n    sj.getSideNormals(sides,qj);\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // Check side (plane) intersections\n    var found = false;\n\n    // Store the resulting side penetration info\n    var side_ns = sphereBox_side_ns;\n    var side_ns1 = sphereBox_side_ns1;\n    var side_ns2 = sphereBox_side_ns2;\n    var side_h = null;\n    var side_penetrations = 0;\n    var side_dot1 = 0;\n    var side_dot2 = 0;\n    var side_distance = null;\n    for(var idx=0,nsides=sides.length; idx!==nsides && found===false; idx++){\n        // Get the plane side normal (ns)\n        var ns = sphereBox_ns;\n        ns.copy(sides[idx]);\n\n        var h = ns.norm();\n        ns.normalize();\n\n        // The normal/distance dot product tells which side of the plane we are\n        var dot = box_to_sphere.dot(ns);\n\n        if(dot<h+R && dot>0){\n            // Intersects plane. Now check the other two dimensions\n            var ns1 = sphereBox_ns1;\n            var ns2 = sphereBox_ns2;\n            ns1.copy(sides[(idx+1)%3]);\n            ns2.copy(sides[(idx+2)%3]);\n            var h1 = ns1.norm();\n            var h2 = ns2.norm();\n            ns1.normalize();\n            ns2.normalize();\n            var dot1 = box_to_sphere.dot(ns1);\n            var dot2 = box_to_sphere.dot(ns2);\n            if(dot1<h1 && dot1>-h1 && dot2<h2 && dot2>-h2){\n                var dist = Math.abs(dot-h-R);\n                if(side_distance===null || dist < side_distance){\n                    side_distance = dist;\n                    side_dot1 = dot1;\n                    side_dot2 = dot2;\n                    side_h = h;\n                    side_ns.copy(ns);\n                    side_ns1.copy(ns1);\n                    side_ns2.copy(ns2);\n                    side_penetrations++;\n                }\n            }\n        }\n    }\n    if(side_penetrations){\n        found = true;\n        var r = this.createContactEquation(bi,bj,si,sj);\n        side_ns.mult(-R,r.ri); // Sphere r\n        r.ni.copy(side_ns);\n        r.ni.negate(r.ni); // Normal should be out of sphere\n        side_ns.mult(side_h,side_ns);\n        side_ns1.mult(side_dot1,side_ns1);\n        side_ns.vadd(side_ns1,side_ns);\n        side_ns2.mult(side_dot2,side_ns2);\n        side_ns.vadd(side_ns2,r.rj);\n\n        // Make relative to bodies\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri);\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n\n    // Check corners\n    var rj = v3pool.get();\n    var sphere_to_corner = sphereBox_sphere_to_corner;\n    for(var j=0; j!==2 && !found; j++){\n        for(var k=0; k!==2 && !found; k++){\n            for(var l=0; l!==2 && !found; l++){\n                rj.set(0,0,0);\n                if(j){\n                    rj.vadd(sides[0],rj);\n                } else {\n                    rj.vsub(sides[0],rj);\n                }\n                if(k){\n                    rj.vadd(sides[1],rj);\n                } else {\n                    rj.vsub(sides[1],rj);\n                }\n                if(l){\n                    rj.vadd(sides[2],rj);\n                } else {\n                    rj.vsub(sides[2],rj);\n                }\n\n                // World position of corner\n                xj.vadd(rj,sphere_to_corner);\n                sphere_to_corner.vsub(xi,sphere_to_corner);\n\n                if(sphere_to_corner.norm2() < R*R){\n                    found = true;\n                    var r = this.createContactEquation(bi,bj,si,sj);\n                    r.ri.copy(sphere_to_corner);\n                    r.ri.normalize();\n                    r.ni.copy(r.ri);\n                    r.ri.mult(R,r.ri);\n                    r.rj.copy(rj);\n\n                    // Make relative to bodies\n                    r.ri.vadd(xi, r.ri);\n                    r.ri.vsub(bi.position, r.ri);\n                    r.rj.vadd(xj, r.rj);\n                    r.rj.vsub(bj.position, r.rj);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(rj);\n    rj = null;\n\n    // Check edges\n    var edgeTangent = v3pool.get();\n    var edgeCenter = v3pool.get();\n    var r = v3pool.get(); // r = edge center to sphere center\n    var orthogonal = v3pool.get();\n    var dist = v3pool.get();\n    var Nsides = sides.length;\n    for(var j=0; j!==Nsides && !found; j++){\n        for(var k=0; k!==Nsides && !found; k++){\n            if(j%3 !== k%3){\n                // Get edge tangent\n                sides[k].cross(sides[j],edgeTangent);\n                edgeTangent.normalize();\n                sides[j].vadd(sides[k], edgeCenter);\n                r.copy(xi);\n                r.vsub(edgeCenter,r);\n                r.vsub(xj,r);\n                var orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n                edgeTangent.mult(orthonorm,orthogonal); // Vector from edge center to sphere center in the tangent direction\n\n                // Find the third side orthogonal to this one\n                var l = 0;\n                while(l===j%3 || l===k%3){\n                    l++;\n                }\n\n                // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n                dist.copy(xi);\n                dist.vsub(orthogonal,dist);\n                dist.vsub(edgeCenter,dist);\n                dist.vsub(xj,dist);\n\n                // Distances in tangent direction and distance in the plane orthogonal to it\n                var tdist = Math.abs(orthonorm);\n                var ndist = dist.norm();\n\n                if(tdist < sides[l].norm() && ndist<R){\n                    found = true;\n                    var res = this.createContactEquation(bi,bj,si,sj);\n                    edgeCenter.vadd(orthogonal,res.rj); // box rj\n                    res.rj.copy(res.rj);\n                    dist.negate(res.ni);\n                    res.ni.normalize();\n\n                    res.ri.copy(res.rj);\n                    res.ri.vadd(xj,res.ri);\n                    res.ri.vsub(xi,res.ri);\n                    res.ri.normalize();\n                    res.ri.mult(R,res.ri);\n\n                    // Make relative to bodies\n                    res.ri.vadd(xi, res.ri);\n                    res.ri.vsub(bi.position, res.ri);\n                    res.rj.vadd(xj, res.rj);\n                    res.rj.vsub(bj.position, res.rj);\n\n                    this.result.push(res);\n                    this.createFrictionEquationsFromContact(res, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(edgeTangent,edgeCenter,r,orthogonal,dist);\n};\n\nvar convex_to_sphere = new Vec3();\nvar sphereConvex_edge = new Vec3();\nvar sphereConvex_edgeUnit = new Vec3();\nvar sphereConvex_sphereToCorner = new Vec3();\nvar sphereConvex_worldCorner = new Vec3();\nvar sphereConvex_worldNormal = new Vec3();\nvar sphereConvex_worldPoint = new Vec3();\nvar sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nvar sphereConvex_penetrationVec = new Vec3();\nvar sphereConvex_sphereToWorldPoint = new Vec3();\n\n/**\n * @method sphereConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.sphereConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n    xi.vsub(xj,convex_to_sphere);\n    var normals = sj.faceNormals;\n    var faces = sj.faces;\n    var verts = sj.vertices;\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // if(convex_to_sphere.norm2() > si.boundingSphereRadius + sj.boundingSphereRadius){\n    //     return;\n    // }\n\n    // Check corners\n    for(var i=0; i!==verts.length; i++){\n        var v = verts[i];\n\n        // World position of corner\n        var worldCorner = sphereConvex_worldCorner;\n        qj.vmult(v,worldCorner);\n        xj.vadd(worldCorner,worldCorner);\n        var sphere_to_corner = sphereConvex_sphereToCorner;\n        worldCorner.vsub(xi, sphere_to_corner);\n        if(sphere_to_corner.norm2() < R * R){\n            found = true;\n            var r = this.createContactEquation(bi,bj,si,sj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.mult(R,r.ri);\n            worldCorner.vsub(xj,r.rj);\n\n            // Should be relative to the body.\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n\n            // Should be relative to the body.\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n            return;\n        }\n    }\n\n    // Check side (plane) intersections\n    var found = false;\n    for(var i=0, nfaces=faces.length; i!==nfaces && found===false; i++){\n        var normal = normals[i];\n        var face = faces[i];\n\n        // Get world-transformed normal of the face\n        var worldNormal = sphereConvex_worldNormal;\n        qj.vmult(normal,worldNormal);\n\n        // Get a world vertex from the face\n        var worldPoint = sphereConvex_worldPoint;\n        qj.vmult(verts[face[0]],worldPoint);\n        worldPoint.vadd(xj,worldPoint);\n\n        // Get a point on the sphere, closest to the face normal\n        var worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n        worldNormal.mult(-R, worldSpherePointClosestToPlane);\n        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane);\n\n        // Vector from a face point to the closest point on the sphere\n        var penetrationVec = sphereConvex_penetrationVec;\n        worldSpherePointClosestToPlane.vsub(worldPoint,penetrationVec);\n\n        // The penetration. Negative value means overlap.\n        var penetration = penetrationVec.dot(worldNormal);\n\n        var worldPointToSphere = sphereConvex_sphereToWorldPoint;\n        xi.vsub(worldPoint, worldPointToSphere);\n\n        if(penetration < 0 && worldPointToSphere.dot(worldNormal)>0){\n            // Intersects plane. Now check if the sphere is inside the face polygon\n            var faceVerts = []; // Face vertices, in world coords\n            for(var j=0, Nverts=face.length; j!==Nverts; j++){\n                var worldVertex = v3pool.get();\n                qj.vmult(verts[face[j]], worldVertex);\n                xj.vadd(worldVertex,worldVertex);\n                faceVerts.push(worldVertex);\n            }\n\n            if(pointInPolygon(faceVerts,worldNormal,xi)){ // Is the sphere center in the face polygon?\n                found = true;\n                var r = this.createContactEquation(bi,bj,si,sj);\n\n                worldNormal.mult(-R, r.ri); // Contact offset, from sphere center to contact\n                worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n                var penetrationVec2 = v3pool.get();\n                worldNormal.mult(-penetration, penetrationVec2);\n                var penetrationSpherePoint = v3pool.get();\n                worldNormal.mult(-R, penetrationSpherePoint);\n\n                //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n                xi.vsub(xj,r.rj);\n                r.rj.vadd(penetrationSpherePoint,r.rj);\n                r.rj.vadd(penetrationVec2 , r.rj);\n\n                // Should be relative to the body.\n                r.rj.vadd(xj, r.rj);\n                r.rj.vsub(bj.position, r.rj);\n\n                // Should be relative to the body.\n                r.ri.vadd(xi, r.ri);\n                r.ri.vsub(bi.position, r.ri);\n\n                v3pool.release(penetrationVec2);\n                v3pool.release(penetrationSpherePoint);\n\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                // Release world vertices\n                for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                    v3pool.release(faceVerts[j]);\n                }\n\n                return; // We only expect *one* face contact\n            } else {\n                // Edge?\n                for(var j=0; j!==face.length; j++){\n\n                    // Get two world transformed vertices\n                    var v1 = v3pool.get();\n                    var v2 = v3pool.get();\n                    qj.vmult(verts[face[(j+1)%face.length]], v1);\n                    qj.vmult(verts[face[(j+2)%face.length]], v2);\n                    xj.vadd(v1, v1);\n                    xj.vadd(v2, v2);\n\n                    // Construct edge vector\n                    var edge = sphereConvex_edge;\n                    v2.vsub(v1,edge);\n\n                    // Construct the same vector, but normalized\n                    var edgeUnit = sphereConvex_edgeUnit;\n                    edge.unit(edgeUnit);\n\n                    // p is xi projected onto the edge\n                    var p = v3pool.get();\n                    var v1_to_xi = v3pool.get();\n                    xi.vsub(v1, v1_to_xi);\n                    var dot = v1_to_xi.dot(edgeUnit);\n                    edgeUnit.mult(dot, p);\n                    p.vadd(v1, p);\n\n                    // Compute a vector from p to the center of the sphere\n                    var xi_to_p = v3pool.get();\n                    p.vsub(xi, xi_to_p);\n\n                    // Collision if the edge-sphere distance is less than the radius\n                    // AND if p is in between v1 and v2\n                    if(dot > 0 && dot*dot<edge.norm2() && xi_to_p.norm2() < R*R){ // Collision if the edge-sphere distance is less than the radius\n                        // Edge contact!\n                        var r = this.createContactEquation(bi,bj,si,sj);\n                        p.vsub(xj,r.rj);\n\n                        p.vsub(xi,r.ni);\n                        r.ni.normalize();\n\n                        r.ni.mult(R,r.ri);\n\n                        // Should be relative to the body.\n                        r.rj.vadd(xj, r.rj);\n                        r.rj.vsub(bj.position, r.rj);\n\n                        // Should be relative to the body.\n                        r.ri.vadd(xi, r.ri);\n                        r.ri.vsub(bi.position, r.ri);\n\n                        this.result.push(r);\n                        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                        // Release world vertices\n                        for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                            v3pool.release(faceVerts[j]);\n                        }\n\n                        v3pool.release(v1);\n                        v3pool.release(v2);\n                        v3pool.release(p);\n                        v3pool.release(xi_to_p);\n                        v3pool.release(v1_to_xi);\n\n                        return;\n                    }\n\n                    v3pool.release(v1);\n                    v3pool.release(v2);\n                    v3pool.release(p);\n                    v3pool.release(xi_to_p);\n                    v3pool.release(v1_to_xi);\n                }\n            }\n\n            // Release world vertices\n            for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                v3pool.release(faceVerts[j]);\n            }\n        }\n    }\n};\n\nvar planeBox_normal = new Vec3();\nvar plane_to_corner = new Vec3();\n\n/**\n * @method planeBox\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.BOX] =\nNarrowphase.prototype.planeBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.planeConvex(si,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj);\n};\n\nvar planeConvex_v = new Vec3();\nvar planeConvex_normal = new Vec3();\nvar planeConvex_relpos = new Vec3();\nvar planeConvex_projected = new Vec3();\n\n/**\n * @method planeConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.planeConvex = function(\n    planeShape,\n    convexShape,\n    planePosition,\n    convexPosition,\n    planeQuat,\n    convexQuat,\n    planeBody,\n    convexBody\n){\n    // Simply return the points behind the plane.\n    var worldVertex = planeConvex_v,\n        worldNormal = planeConvex_normal;\n    worldNormal.set(0,0,1);\n    planeQuat.vmult(worldNormal,worldNormal); // Turn normal according to plane orientation\n\n    var numContacts = 0;\n    var relpos = planeConvex_relpos;\n    for(var i = 0; i !== convexShape.vertices.length; i++){\n\n        // Get world convex vertex\n        worldVertex.copy(convexShape.vertices[i]);\n        convexQuat.vmult(worldVertex, worldVertex);\n        convexPosition.vadd(worldVertex, worldVertex);\n        worldVertex.vsub(planePosition, relpos);\n\n        var dot = worldNormal.dot(relpos);\n        if(dot <= 0.0){\n\n            var r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape);\n\n            // Get vertex position projected on plane\n            var projected = planeConvex_projected;\n            worldNormal.mult(worldNormal.dot(relpos),projected);\n            worldVertex.vsub(projected, projected);\n            projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n            r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n\n            // rj is now just the vector from the convex center to the vertex\n            worldVertex.vsub(convexPosition, r.rj);\n\n            // Make it relative to the body\n            r.ri.vadd(planePosition, r.ri);\n            r.ri.vsub(planeBody.position, r.ri);\n            r.rj.vadd(convexPosition, r.rj);\n            r.rj.vsub(convexBody.position, r.rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    if(this.enableFrictionReduction && numContacts){\n        this.createFrictionFromAverage(numContacts);\n    }\n};\n\nvar convexConvex_sepAxis = new Vec3();\nvar convexConvex_q = new Vec3();\n\n/**\n * @method convexConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexConvex = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n    var sepAxis = convexConvex_sepAxis;\n\n    if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n        return;\n    }\n\n    if(si.findSeparatingAxis(sj,xi,qi,xj,qj,sepAxis,faceListA,faceListB)){\n        var res = [];\n        var q = convexConvex_q;\n        si.clipAgainstHull(xi,qi,sj,xj,qj,sepAxis,-100,100,res);\n        var numContacts = 0;\n        for(var j = 0; j !== res.length; j++){\n            var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n                ri = r.ri,\n                rj = r.rj;\n            sepAxis.negate(r.ni);\n            res[j].normal.negate(q);\n            q.mult(res[j].depth, q);\n            res[j].point.vadd(q, ri);\n            rj.copy(res[j].point);\n\n            // Contact points are in world coordinates. Transform back to relative\n            ri.vsub(xi,ri);\n            rj.vsub(xj,rj);\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n        if(this.enableFrictionReduction && numContacts){\n            this.createFrictionFromAverage(numContacts);\n        }\n    }\n};\n\n\n/**\n * @method convexTrimesh\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\n// Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.TRIMESH] =\n// Narrowphase.prototype.convexTrimesh = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n//     var sepAxis = convexConvex_sepAxis;\n\n//     if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n//         return;\n//     }\n\n//     // Construct a temp hull for each triangle\n//     var hullB = new ConvexPolyhedron();\n\n//     hullB.faces = [[0,1,2]];\n//     var va = new Vec3();\n//     var vb = new Vec3();\n//     var vc = new Vec3();\n//     hullB.vertices = [\n//         va,\n//         vb,\n//         vc\n//     ];\n\n//     for (var i = 0; i < sj.indices.length / 3; i++) {\n\n//         var triangleNormal = new Vec3();\n//         sj.getNormal(i, triangleNormal);\n//         hullB.faceNormals = [triangleNormal];\n\n//         sj.getTriangleVertices(i, va, vb, vc);\n\n//         var d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n//         if(!d){\n//             triangleNormal.scale(-1, triangleNormal);\n//             d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n\n//             if(!d){\n//                 continue;\n//             }\n//         }\n\n//         var res = [];\n//         var q = convexConvex_q;\n//         si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n//         for(var j = 0; j !== res.length; j++){\n//             var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n//                 ri = r.ri,\n//                 rj = r.rj;\n//             r.ni.copy(triangleNormal);\n//             r.ni.negate(r.ni);\n//             res[j].normal.negate(q);\n//             q.mult(res[j].depth, q);\n//             res[j].point.vadd(q, ri);\n//             rj.copy(res[j].point);\n\n//             // Contact points are in world coordinates. Transform back to relative\n//             ri.vsub(xi,ri);\n//             rj.vsub(xj,rj);\n\n//             // Make relative to bodies\n//             ri.vadd(xi, ri);\n//             ri.vsub(bi.position, ri);\n//             rj.vadd(xj, rj);\n//             rj.vsub(bj.position, rj);\n\n//             result.push(r);\n//         }\n//     }\n// };\n\nvar particlePlane_normal = new Vec3();\nvar particlePlane_relpos = new Vec3();\nvar particlePlane_projected = new Vec3();\n\n/**\n * @method particlePlane\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.PARTICLE] =\nNarrowphase.prototype.planeParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var normal = particlePlane_normal;\n    normal.set(0,0,1);\n    bj.quaternion.vmult(normal,normal); // Turn normal according to plane orientation\n    var relpos = particlePlane_relpos;\n    xi.vsub(bj.position,relpos);\n    var dot = normal.dot(relpos);\n    if(dot <= 0.0){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n\n        // Get particle position projected on plane\n        var projected = particlePlane_projected;\n        normal.mult(normal.dot(xi),projected);\n        xi.vsub(projected,projected);\n        //projected.vadd(bj.position,projected);\n\n        // rj is now the projected world position minus plane position\n        r.rj.copy(projected);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\nvar particleSphere_normal = new Vec3();\n\n/**\n * @method particleSphere\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.SPHERE] =\nNarrowphase.prototype.sphereParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    // The normal is the unit vector from sphere center to particle center\n    var normal = particleSphere_normal;\n    normal.set(0,0,1);\n    xi.vsub(xj,normal);\n    var lengthSquared = normal.norm2();\n\n    if(lengthSquared <= sj.radius * sj.radius){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        normal.normalize();\n        r.rj.copy(normal);\n        r.rj.mult(sj.radius,r.rj);\n        r.ni.copy(normal); // Contact normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// WIP\nvar cqj = new Quaternion();\nvar convexParticle_local = new Vec3();\nvar convexParticle_normal = new Vec3();\nvar convexParticle_penetratedFaceNormal = new Vec3();\nvar convexParticle_vertexToParticle = new Vec3();\nvar convexParticle_worldPenetrationVec = new Vec3();\n\n/**\n * @method convexParticle\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var penetratedFaceIndex = -1;\n    var penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    var worldPenetrationVec = convexParticle_worldPenetrationVec;\n    var minPenetration = null;\n    var numDetectedFaces = 0;\n\n    // Convert particle position xi to local coords in the convex\n    var local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj,local); // Convert position to relative the convex origin\n    qj.conjugate(cqj);\n    cqj.vmult(local,local);\n\n    if(sj.pointIsInside(local)){\n\n        if(sj.worldVerticesNeedsUpdate){\n            sj.computeWorldVertices(xj,qj);\n        }\n        if(sj.worldFaceNormalsNeedsUpdate){\n            sj.computeWorldFaceNormals(qj);\n        }\n\n        // For each world polygon in the polyhedra\n        for(var i=0,nfaces=sj.faces.length; i!==nfaces; i++){\n\n            // Construct world face vertices\n            var verts = [ sj.worldVertices[ sj.faces[i][0] ] ];\n            var normal = sj.worldFaceNormals[i];\n\n            // Check how much the particle penetrates the polygon plane.\n            xi.vsub(verts[0],convexParticle_vertexToParticle);\n            var penetration = -normal.dot(convexParticle_vertexToParticle);\n            if(minPenetration===null || Math.abs(penetration)<Math.abs(minPenetration)){\n                minPenetration = penetration;\n                penetratedFaceIndex = i;\n                penetratedFaceNormal.copy(normal);\n                numDetectedFaces++;\n            }\n        }\n\n        if(penetratedFaceIndex!==-1){\n            // Setup contact\n            var r = this.createContactEquation(bi,bj,si,sj);\n            penetratedFaceNormal.mult(minPenetration, worldPenetrationVec);\n\n            // rj is the particle position projected to the face\n            worldPenetrationVec.vadd(xi,worldPenetrationVec);\n            worldPenetrationVec.vsub(xj,worldPenetrationVec);\n            r.rj.copy(worldPenetrationVec);\n            //var projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n            //projectedToFace.copy(r.rj);\n\n            //qj.vmult(r.rj,r.rj);\n            penetratedFaceNormal.negate( r.ni ); // Contact normal\n            r.ri.set(0,0,0); // Center of particle\n\n            var ri = r.ri,\n                rj = r.rj;\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        } else {\n            console.warn(\"Point found inside convex, but did not find penetrating face!\");\n        }\n    }\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.boxHeightfield = function (si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexHeightfield(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj);\n};\n\nvar convexHeightfield_tmp1 = new Vec3();\nvar convexHeightfield_tmp2 = new Vec3();\nvar convexHeightfield_faceList = [0];\n\n/**\n * @method convexHeightfield\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.convexHeightfield = function (\n    convexShape,\n    hfShape,\n    convexPos,\n    hfPos,\n    convexQuat,\n    hfQuat,\n    convexBody,\n    hfBody\n){\n    var data = hfShape.data,\n        w = hfShape.elementSize,\n        radius = convexShape.boundingSphereRadius,\n        worldPillarOffset = convexHeightfield_tmp2,\n        faceList = convexHeightfield_faceList;\n\n    // Get sphere position to heightfield local!\n    var localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localConvexPos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1,\n        iMinY = Math.floor((localConvexPos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localConvexPos.z - radius > max || localConvexPos.z + radius < min){\n        return;\n    }\n\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n        }\n    }\n};\n\nvar sphereHeightfield_tmp1 = new Vec3();\nvar sphereHeightfield_tmp2 = new Vec3();\n\n/**\n * @method sphereHeightfield\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.sphereHeightfield = function (\n    sphereShape,\n    hfShape,\n    spherePos,\n    hfPos,\n    sphereQuat,\n    hfQuat,\n    sphereBody,\n    hfBody\n){\n    var data = hfShape.data,\n        radius = sphereShape.radius,\n        w = hfShape.elementSize,\n        worldPillarOffset = sphereHeightfield_tmp2;\n\n    // Get sphere position to heightfield local!\n    var localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localSpherePos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1,\n        iMinY = Math.floor((localSpherePos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMaxY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localSpherePos.z - radius > max || localSpherePos.z + radius < min){\n        return;\n    }\n\n    var result = this.result;\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            var numContactsBefore = result.length;\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            var numContacts = result.length - numContactsBefore;\n\n            if(numContacts > 2){\n                return;\n            }\n            /*\n            // Skip all but 1\n            for (var k = 0; k < numContacts - 1; k++) {\n                result.pop();\n            }\n            */\n        }\n    }\n};\n\n},{\"../collision/AABB\":3,\"../collision/Ray\":9,\"../equations/ContactEquation\":19,\"../equations/FrictionEquation\":21,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../shapes/ConvexPolyhedron\":38,\"../shapes/Shape\":43,\"../solver/Solver\":47,\"../utils/Vec3Pool\":54}],56:[function(_dereq_,module,exports){\n/* global performance */\n\nmodule.exports = World;\n\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar GSSolver = _dereq_('../solver/GSSolver');\nvar Vec3Pool = _dereq_('../utils/Vec3Pool');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar FrictionEquation = _dereq_('../equations/FrictionEquation');\nvar Narrowphase = _dereq_('./Narrowphase');\nvar EventTarget = _dereq_('../utils/EventTarget');\nvar ArrayCollisionMatrix = _dereq_('../collision/ArrayCollisionMatrix');\nvar Material = _dereq_('../material/Material');\nvar ContactMaterial = _dereq_('../material/ContactMaterial');\nvar Body = _dereq_('../objects/Body');\nvar TupleDictionary = _dereq_('../utils/TupleDictionary');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar AABB = _dereq_('../collision/AABB');\nvar Ray = _dereq_('../collision/Ray');\nvar NaiveBroadphase = _dereq_('../collision/NaiveBroadphase');\n\n/**\n * The physics world\n * @class World\n * @constructor\n * @extends EventTarget\n */\nfunction World(){\n    EventTarget.apply(this);\n\n    /**\n     * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n     * @property {Number} dt\n     */\n    this.dt = -1;\n\n    /**\n     * Makes bodies go to sleep when they've been inactive\n     * @property allowSleep\n     * @type {Boolean}\n     */\n    this.allowSleep = false;\n\n    /**\n     * All the current contacts (instances of ContactEquation) in the world.\n     * @property contacts\n     * @type {Array}\n     */\n    this.contacts = [];\n    this.frictionEquations = [];\n\n    /**\n     * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n     * @property quatNormalizeSkip\n     * @type {Number}\n     */\n    this.quatNormalizeSkip = 0;\n\n    /**\n     * Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.\n     * @property quatNormalizeFast\n     * @type {Boolean}\n     * @see Quaternion.normalizeFast\n     * @see Quaternion.normalize\n     */\n    this.quatNormalizeFast = false;\n\n    /**\n     * The wall-clock time since simulation start\n     * @property time\n     * @type {Number}\n     */\n    this.time = 0.0;\n\n    /**\n     * Number of timesteps taken since start\n     * @property stepnumber\n     * @type {Number}\n     */\n    this.stepnumber = 0;\n\n    /// Default and last timestep sizes\n    this.default_dt = 1/60;\n\n    this.nextId = 0;\n    /**\n     * @property gravity\n     * @type {Vec3}\n     */\n    this.gravity = new Vec3();\n\n    /**\n     * @property broadphase\n     * @type {Broadphase}\n     */\n    this.broadphase = new NaiveBroadphase();\n\n    /**\n     * @property bodies\n     * @type {Array}\n     */\n    this.bodies = [];\n\n    /**\n     * @property solver\n     * @type {Solver}\n     */\n    this.solver = new GSSolver();\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    /**\n     * @property narrowphase\n     * @type {Narrowphase}\n     */\n    this.narrowphase = new Narrowphase(this);\n\n    /**\n     * @property {ArrayCollisionMatrix} collisionMatrix\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrix = new ArrayCollisionMatrix();\n\n    /**\n     * CollisionMatrix from the previous step.\n     * @property {ArrayCollisionMatrix} collisionMatrixPrevious\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrixPrevious = new ArrayCollisionMatrix();\n\n    /**\n     * All added materials\n     * @property materials\n     * @type {Array}\n     */\n    this.materials = [];\n\n    /**\n     * @property contactmaterials\n     * @type {Array}\n     */\n    this.contactmaterials = [];\n\n    /**\n     * Used to look up a ContactMaterial given two instances of Material.\n     * @property {TupleDictionary} contactMaterialTable\n     */\n    this.contactMaterialTable = new TupleDictionary();\n\n    this.defaultMaterial = new Material(\"default\");\n\n    /**\n     * This contact material is used if no suitable contactmaterial is found for a contact.\n     * @property defaultContactMaterial\n     * @type {ContactMaterial}\n     */\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, { friction: 0.3, restitution: 0.0 });\n\n    /**\n     * @property doProfiling\n     * @type {Boolean}\n     */\n    this.doProfiling = false;\n\n    /**\n     * @property profile\n     * @type {Object}\n     */\n    this.profile = {\n        solve:0,\n        makeContactConstraints:0,\n        broadphase:0,\n        integrate:0,\n        narrowphase:0,\n    };\n\n    /**\n     * @property subsystems\n     * @type {Array}\n     */\n    this.subsystems = [];\n\n    this.addBodyEvent = {\n        type:\"addBody\",\n        body : null,\n    };\n\n    this.removeBodyEvent = {\n        type:\"removeBody\",\n        body : null,\n    };\n}\nWorld.prototype = new EventTarget();\n\n// Temp stuff\nvar tmpAABB1 = new AABB();\nvar tmpArray1 = [];\nvar tmpRay = new Ray();\n\n/**\n * Get the contact material between materials m1 and m2\n * @method getContactMaterial\n * @param {Material} m1\n * @param {Material} m2\n * @return {ContactMaterial} The contact material if it was found.\n */\nWorld.prototype.getContactMaterial = function(m1,m2){\n    return this.contactMaterialTable.get(m1.id,m2.id); //this.contactmaterials[this.mats2cmat[i+j*this.materials.length]];\n};\n\n/**\n * Get number of objects in the world.\n * @method numObjects\n * @return {Number}\n * @deprecated\n */\nWorld.prototype.numObjects = function(){\n    return this.bodies.length;\n};\n\n/**\n * Store old collision state info\n * @method collisionMatrixTick\n */\nWorld.prototype.collisionMatrixTick = function(){\n\tvar temp = this.collisionMatrixPrevious;\n\tthis.collisionMatrixPrevious = this.collisionMatrix;\n\tthis.collisionMatrix = temp;\n\tthis.collisionMatrix.reset();\n};\n\n/**\n * Add a rigid body to the simulation.\n * @method add\n * @param {Body} body\n * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n * @todo Adding an array of bodies should be possible. This would save some loops too\n * @deprecated Use .addBody instead\n */\nWorld.prototype.add = World.prototype.addBody = function(body){\n    if(this.bodies.indexOf(body) !== -1){\n        return;\n    }\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n    if(body instanceof Body){\n        body.initAngularVelocity.copy(body.angularVelocity);\n        body.initQuaternion.copy(body.quaternion);\n    }\n\tthis.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.dispatchEvent(this.addBodyEvent);\n};\n\n/**\n * Add a constraint to the simulation.\n * @method addConstraint\n * @param {Constraint} c\n */\nWorld.prototype.addConstraint = function(c){\n    this.constraints.push(c);\n};\n\n/**\n * Removes a constraint\n * @method removeConstraint\n * @param {Constraint} c\n */\nWorld.prototype.removeConstraint = function(c){\n    var idx = this.constraints.indexOf(c);\n    if(idx!==-1){\n        this.constraints.splice(idx,1);\n    }\n};\n\n/**\n * Raycast test\n * @method rayTest\n * @param {Vec3} from\n * @param {Vec3} to\n * @param {Function|RaycastResult} result\n * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n */\nWorld.prototype.rayTest = function(from, to, result){\n    if(result instanceof RaycastResult){\n        // Do raycastclosest\n        this.raycastClosest(from, to, {\n            skipBackfaces: true\n        }, result);\n    } else {\n        // Do raycastAll\n        this.raycastAll(from, to, {\n            skipBackfaces: true\n        }, result);\n    }\n};\n\n/**\n * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n * @method raycastAll\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {Function} callback\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAll = function(from, to, options, callback){\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n * @method raycastAny\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAny = function(from, to, options, result){\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and return information of the closest hit.\n * @method raycastClosest\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastClosest = function(from, to, options, result){\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method remove\n * @param {Body} body\n * @deprecated Use .removeBody instead\n */\nWorld.prototype.remove = function(body){\n    body.world = null;\n    var n = this.bodies.length-1,\n        bodies = this.bodies,\n        idx = bodies.indexOf(body);\n    if(idx !== -1){\n        bodies.splice(idx, 1); // Todo: should use a garbage free method\n\n        // Recompute index\n        for(var i=0; i!==bodies.length; i++){\n            bodies[i].index = i;\n        }\n\n        this.collisionMatrix.setNumObjects(n);\n        this.removeBodyEvent.body = body;\n        this.dispatchEvent(this.removeBodyEvent);\n    }\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method removeBody\n * @param {Body} body\n */\nWorld.prototype.removeBody = World.prototype.remove;\n\n/**\n * Adds a material to the World.\n * @method addMaterial\n * @param {Material} m\n * @todo Necessary?\n */\nWorld.prototype.addMaterial = function(m){\n    this.materials.push(m);\n};\n\n/**\n * Adds a contact material to the World\n * @method addContactMaterial\n * @param {ContactMaterial} cmat\n */\nWorld.prototype.addContactMaterial = function(cmat) {\n\n    // Add contact material\n    this.contactmaterials.push(cmat);\n\n    // Add current contact material to the material table\n    this.contactMaterialTable.set(cmat.materials[0].id,cmat.materials[1].id,cmat);\n};\n\n// performance.now()\nif(typeof performance === 'undefined'){\n    performance = {};\n}\nif(!performance.now){\n    var nowOffset = Date.now();\n    if (performance.timing && performance.timing.navigationStart){\n        nowOffset = performance.timing.navigationStart;\n    }\n    performance.now = function(){\n        return Date.now() - nowOffset;\n    };\n}\n\nvar step_tmp1 = new Vec3();\n\n/**\n * Step the physics world forward in time.\n *\n * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n *\n * @method step\n * @param {Number} dt                       The fixed time step size to use.\n * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.\n * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.\n *\n * @example\n *     // fixed timestepping without interpolation\n *     world.step(1/60);\n *\n * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\n */\nWorld.prototype.step = function(dt, timeSinceLastCalled, maxSubSteps){\n    maxSubSteps = maxSubSteps || 10;\n    timeSinceLastCalled = timeSinceLastCalled || 0;\n\n    if(timeSinceLastCalled === 0){ // Fixed, simple stepping\n\n        this.internalStep(dt);\n\n        // Increment time\n        this.time += dt;\n\n    } else {\n\n        // Compute the number of fixed steps we should have taken since the last step\n        var internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);\n        internalSteps = Math.min(internalSteps,maxSubSteps);\n\n        // Do some fixed steps to catch up\n        var t0 = performance.now();\n        for(var i=0; i!==internalSteps; i++){\n            this.internalStep(dt);\n            if(performance.now() - t0 > dt * 1000){\n                // We are slower than real-time. Better bail out.\n                break;\n            }\n        }\n\n        // Increment internal clock\n        this.time += timeSinceLastCalled;\n\n        // Compute \"Left over\" time step\n        var h = this.time % dt;\n        var h_div_dt = h / dt;\n        var interpvelo = step_tmp1;\n        var bodies = this.bodies;\n\n        for(var j=0; j !== bodies.length; j++){\n            var b = bodies[j];\n            if(b.type !== Body.STATIC && b.sleepState !== Body.SLEEPING){\n\n                // Interpolate\n                b.position.vsub(b.previousPosition, interpvelo);\n                interpvelo.scale(h_div_dt, interpvelo);\n                b.position.vadd(interpvelo, b.interpolatedPosition);\n\n                // TODO: interpolate quaternion\n                // b.interpolatedAngle = b.angle + (b.angle - b.previousAngle) * h_div_dt;\n\n            } else {\n\n                // For static bodies, just copy. Who else will do it?\n                b.interpolatedPosition.copy(b.position);\n                b.interpolatedQuaternion.copy(b.quaternion);\n            }\n        }\n    }\n};\n\n/**\n * Step the simulation\n * @method step\n * @param {Number} dt\n */\nvar World_step_postStepEvent = {type:\"postStep\"}, // Reusable event objects to save memory\n    World_step_preStepEvent = {type:\"preStep\"},\n    World_step_collideEvent = {type:\"collide\", body:null, contact:null },\n    World_step_oldContacts = [], // Pools for unused objects\n    World_step_frictionEquationPool = [],\n    World_step_p1 = [], // Reusable arrays for collision pairs\n    World_step_p2 = [],\n    World_step_gvec = new Vec3(), // Temporary vectors and quats\n    World_step_vi = new Vec3(),\n    World_step_vj = new Vec3(),\n    World_step_wi = new Vec3(),\n    World_step_wj = new Vec3(),\n    World_step_t1 = new Vec3(),\n    World_step_t2 = new Vec3(),\n    World_step_rixn = new Vec3(),\n    World_step_rjxn = new Vec3(),\n    World_step_step_q = new Quaternion(),\n    World_step_step_w = new Quaternion(),\n    World_step_step_wq = new Quaternion(),\n    invI_tau_dt = new Vec3();\nWorld.prototype.internalStep = function(dt){\n    this.dt = dt;\n\n    var world = this,\n        that = this,\n        contacts = this.contacts,\n        p1 = World_step_p1,\n        p2 = World_step_p2,\n        N = this.numObjects(),\n        bodies = this.bodies,\n        solver = this.solver,\n        gravity = this.gravity,\n        doProfiling = this.doProfiling,\n        profile = this.profile,\n        DYNAMIC = Body.DYNAMIC,\n        profilingStart,\n        constraints = this.constraints,\n        frictionEquationPool = World_step_frictionEquationPool,\n        gnorm = gravity.norm(),\n        gx = gravity.x,\n        gy = gravity.y,\n        gz = gravity.z,\n        i=0;\n\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add gravity to all objects\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var f = bi.force, m = bi.mass;\n            f.x += m*gx;\n            f.y += m*gy;\n            f.z += m*gz;\n        }\n    }\n\n    // Update subsystems\n    for(var i=0, Nsubsystems=this.subsystems.length; i!==Nsubsystems; i++){\n        this.subsystems[i].update();\n    }\n\n    // Collision detection\n    if(doProfiling){ profilingStart = performance.now(); }\n    p1.length = 0; // Clean up pair arrays from last step\n    p2.length = 0;\n    this.broadphase.collisionPairs(this,p1,p2);\n    if(doProfiling){ profile.broadphase = performance.now() - profilingStart; }\n\n    // Remove constrained pairs with collideConnected == false\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        if(!c.collideConnected){\n            for(var j = p1.length-1; j>=0; j-=1){\n                if( (c.bodyA === p1[j] && c.bodyB === p2[j]) ||\n                    (c.bodyB === p1[j] && c.bodyA === p2[j])){\n                    p1.splice(j, 1);\n                    p2.splice(j, 1);\n                }\n            }\n        }\n    }\n\n    this.collisionMatrixTick();\n\n    // Generate contacts\n    if(doProfiling){ profilingStart = performance.now(); }\n    var oldcontacts = World_step_oldContacts;\n    var NoldContacts = contacts.length;\n\n    for(i=0; i!==NoldContacts; i++){\n        oldcontacts.push(contacts[i]);\n    }\n    contacts.length = 0;\n\n    // Transfer FrictionEquation from current list to the pool for reuse\n    var NoldFrictionEquations = this.frictionEquations.length;\n    for(i=0; i!==NoldFrictionEquations; i++){\n        frictionEquationPool.push(this.frictionEquations[i]);\n    }\n    this.frictionEquations.length = 0;\n\n    this.narrowphase.getContacts(\n        p1,\n        p2,\n        this,\n        contacts,\n        oldcontacts, // To be reused\n        this.frictionEquations,\n        frictionEquationPool\n    );\n\n    if(doProfiling){\n        profile.narrowphase = performance.now() - profilingStart;\n    }\n\n    // Loop over all collisions\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add all friction eqs\n    for (var i = 0; i < this.frictionEquations.length; i++) {\n        solver.addEquation(this.frictionEquations[i]);\n    }\n\n    var ncontacts = contacts.length;\n    for(var k=0; k!==ncontacts; k++){\n\n        // Current contact\n        var c = contacts[k];\n\n        // Get current collision indeces\n        var bi = c.bi,\n            bj = c.bj,\n            si = c.si,\n            sj = c.sj;\n\n        // Get collision properties\n        var cm;\n        if(bi.material && bj.material){\n            cm = this.getContactMaterial(bi.material,bj.material) || this.defaultContactMaterial;\n        } else {\n            cm = this.defaultContactMaterial;\n        }\n\n        // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n        var mu = cm.friction;\n        // c.restitution = cm.restitution;\n\n        // If friction or restitution were specified in the material, use them\n        if(bi.material && bj.material){\n            if(bi.material.friction >= 0 && bj.material.friction >= 0){\n                mu = bi.material.friction * bj.material.friction;\n            }\n\n            if(bi.material.restitution >= 0 && bj.material.restitution >= 0){\n                c.restitution = bi.material.restitution * bj.material.restitution;\n            }\n        }\n\n\t\t// c.setSpookParams(\n  //           cm.contactEquationStiffness,\n  //           cm.contactEquationRelaxation,\n  //           dt\n  //       );\n\n\t\tsolver.addEquation(c);\n\n\t\t// // Add friction constraint equation\n\t\t// if(mu > 0){\n\n\t\t// \t// Create 2 tangent equations\n\t\t// \tvar mug = mu * gnorm;\n\t\t// \tvar reducedMass = (bi.invMass + bj.invMass);\n\t\t// \tif(reducedMass > 0){\n\t\t// \t\treducedMass = 1/reducedMass;\n\t\t// \t}\n\t\t// \tvar pool = frictionEquationPool;\n\t\t// \tvar c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tvar c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tthis.frictionEquations.push(c1, c2);\n\n\t\t// \tc1.bi = c2.bi = bi;\n\t\t// \tc1.bj = c2.bj = bj;\n\t\t// \tc1.minForce = c2.minForce = -mug*reducedMass;\n\t\t// \tc1.maxForce = c2.maxForce = mug*reducedMass;\n\n\t\t// \t// Copy over the relative vectors\n\t\t// \tc1.ri.copy(c.ri);\n\t\t// \tc1.rj.copy(c.rj);\n\t\t// \tc2.ri.copy(c.ri);\n\t\t// \tc2.rj.copy(c.rj);\n\n\t\t// \t// Construct tangents\n\t\t// \tc.ni.tangents(c1.t, c2.t);\n\n  //           // Set spook params\n  //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n  //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n\n  //           c1.enabled = c2.enabled = c.enabled;\n\n\t\t// \t// Add equations to solver\n\t\t// \tsolver.addEquation(c1);\n\t\t// \tsolver.addEquation(c2);\n\t\t// }\n\n        if( bi.allowSleep &&\n            bi.type === Body.DYNAMIC &&\n            bi.sleepState  === Body.SLEEPING &&\n            bj.sleepState  === Body.AWAKE &&\n            bj.type !== Body.STATIC\n        ){\n            var speedSquaredB = bj.velocity.norm2() + bj.angularVelocity.norm2();\n            var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit,2);\n            if(speedSquaredB >= speedLimitSquaredB*2){\n                bi._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        if( bj.allowSleep &&\n            bj.type === Body.DYNAMIC &&\n            bj.sleepState  === Body.SLEEPING &&\n            bi.sleepState  === Body.AWAKE &&\n            bi.type !== Body.STATIC\n        ){\n            var speedSquaredA = bi.velocity.norm2() + bi.angularVelocity.norm2();\n            var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit,2);\n            if(speedSquaredA >= speedLimitSquaredA*2){\n                bj._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        // Now we know that i and j are in contact. Set collision matrix state\n\t\tthis.collisionMatrix.set(bi, bj, true);\n\n        if (!this.collisionMatrixPrevious.get(bi, bj)) {\n            // First contact!\n            // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n            World_step_collideEvent.body = bj;\n            World_step_collideEvent.contact = c;\n            bi.dispatchEvent(World_step_collideEvent);\n\n            World_step_collideEvent.body = bi;\n            bj.dispatchEvent(World_step_collideEvent);\n        }\n    }\n    if(doProfiling){\n        profile.makeContactConstraints = performance.now() - profilingStart;\n        profilingStart = performance.now();\n    }\n\n    // Wake up bodies\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi._wakeUpAfterNarrowphase){\n            bi.wakeUp();\n            bi._wakeUpAfterNarrowphase = false;\n        }\n    }\n\n    // Add user-added constraints\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        c.update();\n        for(var j=0, Neq=c.equations.length; j!==Neq; j++){\n            var eq = c.equations[j];\n            solver.addEquation(eq);\n        }\n    }\n\n    // Solve the constrained system\n    solver.solve(dt,this);\n\n    if(doProfiling){\n        profile.solve = performance.now() - profilingStart;\n    }\n\n    // Remove all contacts from solver\n    solver.removeAllEquations();\n\n    // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n    var pow = Math.pow;\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var ld = pow(1.0 - bi.linearDamping,dt);\n            var v = bi.velocity;\n            v.mult(ld,v);\n            var av = bi.angularVelocity;\n            if(av){\n                var ad = pow(1.0 - bi.angularDamping,dt);\n                av.mult(ad,av);\n            }\n        }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent);\n\n    // Invoke pre-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.preStep){\n            bi.preStep.call(bi);\n        }\n    }\n\n    // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n    var q = World_step_step_q;\n    var w = World_step_step_w;\n    var wq = World_step_step_wq;\n    var stepnumber = this.stepnumber;\n    var DYNAMIC_OR_KINEMATIC = Body.DYNAMIC | Body.KINEMATIC;\n    var quatNormalize = stepnumber % (this.quatNormalizeSkip+1) === 0;\n    var quatNormalizeFast = this.quatNormalizeFast;\n    var half_dt = dt * 0.5;\n    var PLANE = Shape.types.PLANE,\n        CONVEX = Shape.types.CONVEXPOLYHEDRON;\n\n    for(i=0; i!==N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n        if((b.type & DYNAMIC_OR_KINEMATIC) && b.sleepState !== Body.SLEEPING){ // Only for dynamic\n            var velo = b.velocity,\n                angularVelo = b.angularVelocity,\n                pos = b.position,\n                quat = b.quaternion,\n                invMass = b.invMass,\n                invInertia = b.invInertiaWorld;\n\n            velo.x += force.x * invMass * dt;\n            velo.y += force.y * invMass * dt;\n            velo.z += force.z * invMass * dt;\n\n            if(b.angularVelocity){\n                invInertia.vmult(tau,invI_tau_dt);\n                invI_tau_dt.mult(dt,invI_tau_dt);\n                invI_tau_dt.vadd(angularVelo,angularVelo);\n            }\n\n            // Use new velocity  - leap frog\n            pos.x += velo.x * dt;\n            pos.y += velo.y * dt;\n            pos.z += velo.z * dt;\n\n            if(b.angularVelocity){\n                w.set(angularVelo.x, angularVelo.y, angularVelo.z, 0);\n                w.mult(quat,wq);\n                quat.x += half_dt * wq.x;\n                quat.y += half_dt * wq.y;\n                quat.z += half_dt * wq.z;\n                quat.w += half_dt * wq.w;\n                if(quatNormalize){\n                    if(quatNormalizeFast){\n                        quat.normalizeFast();\n                    } else {\n                        quat.normalize();\n                    }\n                }\n            }\n\n            if(b.aabb){\n                b.aabbNeedsUpdate = true;\n            }\n\n            // Update world inertia\n            if(b.updateInertiaWorld){\n                b.updateInertiaWorld();\n            }\n        }\n    }\n    this.clearForces();\n\n    this.broadphase.dirty = true;\n\n    if(doProfiling){\n        profile.integrate = performance.now() - profilingStart;\n    }\n\n    // Update world time\n    this.time += dt;\n    this.stepnumber += 1;\n\n    this.dispatchEvent(World_step_postStepEvent);\n\n    // Invoke post-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        var postStep = bi.postStep;\n        if(postStep){\n            postStep.call(bi);\n        }\n    }\n\n    // Sleeping update\n    if(this.allowSleep){\n        for(i=0; i!==N; i++){\n            bodies[i].sleepTick(this.time);\n        }\n    }\n};\n\n/**\n * Sets all body forces in the world to zero.\n * @method clearForces\n */\nWorld.prototype.clearForces = function(){\n    var bodies = this.bodies;\n    var N = bodies.length;\n    for(var i=0; i !== N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n\n        b.force.set(0,0,0);\n        b.torque.set(0,0,0);\n    }\n};\n\n},{\"../collision/AABB\":3,\"../collision/ArrayCollisionMatrix\":4,\"../collision/NaiveBroadphase\":7,\"../collision/Ray\":9,\"../collision/RaycastResult\":10,\"../equations/ContactEquation\":19,\"../equations/FrictionEquation\":21,\"../material/ContactMaterial\":24,\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Shape\":43,\"../solver/GSSolver\":46,\"../utils/EventTarget\":49,\"../utils/TupleDictionary\":52,\"../utils/Vec3Pool\":54,\"./Narrowphase\":55}]},{},[2])\n(2)\n});","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof globalThis === \"object\" ? globalThis :\n            typeof global === \"object\" ? global :\n                typeof self === \"object\" ? self :\n                    typeof this === \"object\" ? this :\n                        sloppyModeThis();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect !== \"undefined\") {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter, root);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                if (previous)\n                    previous(key, value);\n            };\n        }\n        function functionThis() {\n            try {\n                return Function(\"return this;\")();\n            }\n            catch (_) { }\n        }\n        function indirectEvalThis() {\n            try {\n                return (void 0, eval)(\"(function() { return this; })()\");\n            }\n            catch (_) { }\n        }\n        function sloppyModeThis() {\n            return functionThis() || indirectEvalThis();\n        }\n    })(function (exporter, root) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var _Map = typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        var registrySymbol = supportsSymbol ? Symbol.for(\"@reflect-metadata:registry\") : undefined;\n        var metadataRegistry = GetOrCreateMetadataRegistry();\n        var metadataProvider = CreateMetadataProvider(metadataRegistry);\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var provider = GetMetadataProvider(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return provider.OrdinaryDeleteMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return ToBoolean(provider.OrdinaryHasOwnMetadata(MetadataKey, O, P));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return;\n            return provider.OrdinaryGetOwnMetadata(MetadataKey, O, P);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ true);\n            provider.OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var provider = GetMetadataProvider(O, P, /*create*/ false);\n            if (!provider) {\n                return [];\n            }\n            return provider.OrdinaryOwnMetadataKeys(O, P);\n        }\n        // 6 ECMAScript Data Types and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        function SameValueZero(x, y) {\n            return x === y || x !== x && y !== y;\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // Global metadata registry\n        // - Allows `import \"reflect-metadata\"` and `import \"reflect-metadata/no-conflict\"` to interoperate.\n        // - Uses isolated metadata if `Reflect` is frozen before the registry can be installed.\n        /**\n         * Creates a registry used to allow multiple `reflect-metadata` providers.\n         */\n        function CreateMetadataRegistry() {\n            var fallback;\n            if (!IsUndefined(registrySymbol) &&\n                typeof root.Reflect !== \"undefined\" &&\n                !(registrySymbol in root.Reflect) &&\n                typeof root.Reflect.defineMetadata === \"function\") {\n                // interoperate with older version of `reflect-metadata` that did not support a registry.\n                fallback = CreateFallbackProvider(root.Reflect);\n            }\n            var first;\n            var second;\n            var rest;\n            var targetProviderMap = new _WeakMap();\n            var registry = {\n                registerProvider: registerProvider,\n                getProvider: getProvider,\n                setProvider: setProvider,\n            };\n            return registry;\n            function registerProvider(provider) {\n                if (!Object.isExtensible(registry)) {\n                    throw new Error(\"Cannot add provider to a frozen registry.\");\n                }\n                switch (true) {\n                    case fallback === provider: break;\n                    case IsUndefined(first):\n                        first = provider;\n                        break;\n                    case first === provider: break;\n                    case IsUndefined(second):\n                        second = provider;\n                        break;\n                    case second === provider: break;\n                    default:\n                        if (rest === undefined)\n                            rest = new _Set();\n                        rest.add(provider);\n                        break;\n                }\n            }\n            function getProviderNoCache(O, P) {\n                if (!IsUndefined(first)) {\n                    if (first.isProviderFor(O, P))\n                        return first;\n                    if (!IsUndefined(second)) {\n                        if (second.isProviderFor(O, P))\n                            return first;\n                        if (!IsUndefined(rest)) {\n                            var iterator = GetIterator(rest);\n                            while (true) {\n                                var next = IteratorStep(iterator);\n                                if (!next) {\n                                    return undefined;\n                                }\n                                var provider = IteratorValue(next);\n                                if (provider.isProviderFor(O, P)) {\n                                    IteratorClose(iterator);\n                                    return provider;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!IsUndefined(fallback) && fallback.isProviderFor(O, P)) {\n                    return fallback;\n                }\n                return undefined;\n            }\n            function getProvider(O, P) {\n                var providerMap = targetProviderMap.get(O);\n                var provider;\n                if (!IsUndefined(providerMap)) {\n                    provider = providerMap.get(P);\n                }\n                if (!IsUndefined(provider)) {\n                    return provider;\n                }\n                provider = getProviderNoCache(O, P);\n                if (!IsUndefined(provider)) {\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return provider;\n            }\n            function hasProvider(provider) {\n                if (IsUndefined(provider))\n                    throw new TypeError();\n                return first === provider || second === provider || !IsUndefined(rest) && rest.has(provider);\n            }\n            function setProvider(O, P, provider) {\n                if (!hasProvider(provider)) {\n                    throw new Error(\"Metadata provider not registered.\");\n                }\n                var existingProvider = getProvider(O, P);\n                if (existingProvider !== provider) {\n                    if (!IsUndefined(existingProvider)) {\n                        return false;\n                    }\n                    var providerMap = targetProviderMap.get(O);\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return true;\n            }\n        }\n        /**\n         * Gets or creates the shared registry of metadata providers.\n         */\n        function GetOrCreateMetadataRegistry() {\n            var metadataRegistry;\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                metadataRegistry = root.Reflect[registrySymbol];\n            }\n            if (IsUndefined(metadataRegistry)) {\n                metadataRegistry = CreateMetadataRegistry();\n            }\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                Object.defineProperty(root.Reflect, registrySymbol, {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: metadataRegistry\n                });\n            }\n            return metadataRegistry;\n        }\n        function CreateMetadataProvider(registry) {\n            // [[Metadata]] internal slot\n            // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n            var metadata = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var targetMetadata = metadata.get(O);\n                    if (IsUndefined(targetMetadata))\n                        return false;\n                    return targetMetadata.has(P);\n                },\n                OrdinaryDefineOwnMetadata: OrdinaryDefineOwnMetadata,\n                OrdinaryHasOwnMetadata: OrdinaryHasOwnMetadata,\n                OrdinaryGetOwnMetadata: OrdinaryGetOwnMetadata,\n                OrdinaryOwnMetadataKeys: OrdinaryOwnMetadataKeys,\n                OrdinaryDeleteMetadata: OrdinaryDeleteMetadata,\n            };\n            metadataRegistry.registerProvider(provider);\n            return provider;\n            function GetOrCreateMetadataMap(O, P, Create) {\n                var targetMetadata = metadata.get(O);\n                var createdTargetMetadata = false;\n                if (IsUndefined(targetMetadata)) {\n                    if (!Create)\n                        return undefined;\n                    targetMetadata = new _Map();\n                    metadata.set(O, targetMetadata);\n                    createdTargetMetadata = true;\n                }\n                var metadataMap = targetMetadata.get(P);\n                if (IsUndefined(metadataMap)) {\n                    if (!Create)\n                        return undefined;\n                    metadataMap = new _Map();\n                    targetMetadata.set(P, metadataMap);\n                    if (!registry.setProvider(O, P, provider)) {\n                        targetMetadata.delete(P);\n                        if (createdTargetMetadata) {\n                            metadata.delete(O);\n                        }\n                        throw new Error(\"Wrong provider for target.\");\n                    }\n                }\n                return metadataMap;\n            }\n            // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n            function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                return ToBoolean(metadataMap.has(MetadataKey));\n            }\n            // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n            function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return undefined;\n                return metadataMap.get(MetadataKey);\n            }\n            // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n            function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n                metadataMap.set(MetadataKey, MetadataValue);\n            }\n            // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n            function OrdinaryOwnMetadataKeys(O, P) {\n                var keys = [];\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return keys;\n                var keysObj = metadataMap.keys();\n                var iterator = GetIterator(keysObj);\n                var k = 0;\n                while (true) {\n                    var next = IteratorStep(iterator);\n                    if (!next) {\n                        keys.length = k;\n                        return keys;\n                    }\n                    var nextValue = IteratorValue(next);\n                    try {\n                        keys[k] = nextValue;\n                    }\n                    catch (e) {\n                        try {\n                            IteratorClose(iterator);\n                        }\n                        finally {\n                            throw e;\n                        }\n                    }\n                    k++;\n                }\n            }\n            function OrdinaryDeleteMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                if (!metadataMap.delete(MetadataKey))\n                    return false;\n                if (metadataMap.size === 0) {\n                    var targetMetadata = metadata.get(O);\n                    if (!IsUndefined(targetMetadata)) {\n                        targetMetadata.delete(P);\n                        if (targetMetadata.size === 0) {\n                            metadata.delete(targetMetadata);\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        function CreateFallbackProvider(reflect) {\n            var defineMetadata = reflect.defineMetadata, hasOwnMetadata = reflect.hasOwnMetadata, getOwnMetadata = reflect.getOwnMetadata, getOwnMetadataKeys = reflect.getOwnMetadataKeys, deleteMetadata = reflect.deleteMetadata;\n            var metadataOwner = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var metadataPropertySet = metadataOwner.get(O);\n                    if (!IsUndefined(metadataPropertySet) && metadataPropertySet.has(P)) {\n                        return true;\n                    }\n                    if (getOwnMetadataKeys(O, P).length) {\n                        if (IsUndefined(metadataPropertySet)) {\n                            metadataPropertySet = new _Set();\n                            metadataOwner.set(O, metadataPropertySet);\n                        }\n                        metadataPropertySet.add(P);\n                        return true;\n                    }\n                    return false;\n                },\n                OrdinaryDefineOwnMetadata: defineMetadata,\n                OrdinaryHasOwnMetadata: hasOwnMetadata,\n                OrdinaryGetOwnMetadata: getOwnMetadata,\n                OrdinaryOwnMetadataKeys: getOwnMetadataKeys,\n                OrdinaryDeleteMetadata: deleteMetadata,\n            };\n            return provider;\n        }\n        /**\n         * Gets the metadata provider for an object. If the object has no metadata provider and this is for a create operation,\n         * then this module's metadata provider is assigned to the object.\n         */\n        function GetMetadataProvider(O, P, Create) {\n            var registeredProvider = metadataRegistry.getProvider(O, P);\n            if (!IsUndefined(registeredProvider)) {\n                return registeredProvider;\n            }\n            if (Create) {\n                if (metadataRegistry.setProvider(O, P, metadataProvider)) {\n                    return metadataProvider;\n                }\n                throw new Error(\"Illegal state.\");\n            }\n            return undefined;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            var Map = /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (SameValueZero(key, this._cacheKey)) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (!SameValueZero(this._cacheKey, key)) {\n                        this._cacheIndex = -1;\n                        for (var i = 0; i < this._keys.length; i++) {\n                            if (SameValueZero(this._keys[i], key)) {\n                                this._cacheIndex = i;\n                                break;\n                            }\n                        }\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            return Map;\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            var Set = /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.keys(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n            return Set;\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    var array = new Uint8Array(size);\n                    if (typeof crypto !== \"undefined\") {\n                        crypto.getRandomValues(array);\n                    }\n                    else if (typeof msCrypto !== \"undefined\") {\n                        msCrypto.getRandomValues(array);\n                    }\n                    else {\n                        FillRandomBytes(array, size);\n                    }\n                    return array;\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","import { Engine } from \"../Core/Engine\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Collider } from \"./Collider\";\nimport { MeshRenderer } from \"./MeshRenderer\";\n\nexport interface BoxColliderData {\n    size: Vector3;\n}\n\nexport class BoxCollider extends Collider {\n    private _size: Vector3;\n\n    public get size(): Vector3 {\n        return this._size?.clone();\n    }\n\n    public set size(newSize: Vector3) {\n        if (this._size !== newSize) {\n            this._size = newSize;\n            // 通常需要重新初始化碰撞体\n            Engine.physics.RebuildColliders(this);\n        }\n    }\n\n    public getColliderData(): BoxColliderData {\n        if (this.center == null || this.size == null) {\n            this.updateSizeFromMeshBounds();\n        }\n\n        const size = this.size.multiply(this.transform.worldScale);\n\n        // 不允许为0的尺寸，否则无法正常碰撞，例如高度为0的平面，高度设置成一个极低的数值\n        if (size.x <= 0) size.x = 0.01;\n        if (size.y <= 0) size.y = 0.01;\n        if (size.z <= 0) size.z = 0.01;\n\n        return {\n            size: size,\n        };\n    }\n\n    private updateSizeFromMeshBounds() {\n        // 获取MeshRenderer组件\n        const meshRenderer = this.gameObject.getComponent(MeshRenderer);\n        // 获取网格包围盒\n        const bounds = meshRenderer?.mesh?.bounds[0];\n\n        if (bounds) {\n            // 如果有包围盒数据，使用包围盒的尺寸和中心点\n            const x = bounds.halfExtents.x * 2;\n            const y = bounds.halfExtents.y * 2;\n            const z = bounds.halfExtents.z * 2;\n            this.size = new Vector3(x, y, z);\n            this.center = bounds.center;\n        } else {\n            // 如果没有包围盒数据，使用默认值\n            this.size = Vector3.ONE;\n            this.center = Vector3.ZERO;\n        }\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Component } from \"./Component\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Time } from \"../Core/Time\";\nimport { DisallowMultipleComponent } from \"../Core/Decorators\";\nimport { EngineConfig } from \"../Core/Setting\";\nimport { Texture } from \"../Resources/Texture\";\nimport { Plane } from \"../Math/Panel\";\n\nexport enum CameraClearFlags {\n    None = 0,\n    Skybox = 1,\n    Color = 2,\n    DepthOnly = 3,\n}\n\nexport enum Projection {\n    Perspective = 0,\n    Orthographic = 1,\n}\n\nexport enum RenderingPath {\n    VertexLit = 0,\n    Forward = 1,\n    Deferred = 2,\n}\n\n@DisallowMultipleComponent\nexport class Camera extends Component {\n    public static mainCamera: Camera;\n    public static cameras: Array<Camera> = new Array<Camera>();\n\n    public targetTexture: Texture;\n    public backGroundColor: Color = Color.GRAY;\n    public clearFlags: CameraClearFlags = CameraClearFlags.Skybox;\n    private _nearClip: number = 1;\n    private _farClip: number = 128;\n    private _fov: number = 60;\n    public depth: number = -1;\n    private _viewPort: Vector4 = new Vector4(0, 0, 1, 1);\n    private _projection: Projection = Projection.Perspective;\n    private _orthographicSize: number = 5;\n    public renderingPath: RenderingPath = RenderingPath.Forward;\n    public occlusionCulling: boolean = false;\n\n    // 缓存矩阵和视锥体平面\n    private _viewMatrix: Matrix4x4 | null = null;\n    private _projectionMatrix: Matrix4x4 | null = null;\n    private _frustumPlanes: Plane[] | null = null;\n\n    // 脏标记\n    private _viewMatrixDirty: boolean = true;\n    private _projectionMatrixDirty: boolean = true;\n    private _frustumPlanesDirty: boolean = true;\n\n    public get aspect(): number {\n        const v = this.viewPort;\n        return (v.z * EngineConfig.canvasWidth) / (v.w * EngineConfig.canvasHeight);\n    }\n\n    public get nearClip(): number {\n        return this._nearClip;\n    }\n\n    public set nearClip(value: number) {\n        if (this._nearClip !== value) {\n            this._nearClip = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get farClip(): number {\n        return this._farClip;\n    }\n\n    public set farClip(value: number) {\n        if (this._farClip !== value) {\n            this._farClip = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get fov(): number {\n        return this._fov;\n    }\n\n    public set fov(value: number) {\n        if (this._fov !== value) {\n            this._fov = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get viewPort(): Vector4 {\n        return this._viewPort;\n    }\n\n    public set viewPort(value: Vector4) {\n        if (!this._viewPort.equals(value)) {\n            this._viewPort = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get projection(): Projection {\n        return this._projection;\n    }\n\n    public set projection(value: Projection) {\n        if (this._projection !== value) {\n            this._projection = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get orthographicSize(): number {\n        return this._orthographicSize;\n    }\n\n    public set orthographicSize(value: number) {\n        if (this._orthographicSize !== value) {\n            this._orthographicSize = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public onAwake(): void {\n        if (Camera.mainCamera == null) {\n            Camera.mainCamera = this;\n        }\n        Camera.cameras.push(this);\n    }\n\n    private timer: number = 0;\n    public counter: number = 0;\n    public onUpdate(): void {\n        if (Time.time - this.timer >= 1) {\n            this.timer = Time.time;\n            this.counter++;\n        }\n    }\n\n    public onDestroy() {\n        const index = Camera.cameras.indexOf(this, 0);\n        if (index > -1) {\n            Camera.cameras.splice(index, 1);\n        }\n\n        if (Camera.mainCamera === this) {\n            Camera.mainCamera = Camera.cameras.length > 0 ? Camera.cameras[0] : (undefined as unknown as Camera);\n        }\n    }\n\n    public getViewMatrix(): Matrix4x4 {\n        if (this._viewMatrixDirty || !this._viewMatrix) {\n            // 1. 获取相机的世界变换矩阵\n            const worldMatrix = this.transform.localToWorldMatrix;\n            // 2. 计算逆矩阵（世界空间 → 视图空间）\n            this._viewMatrix = worldMatrix.invert();\n            this._viewMatrixDirty = false;\n        }\n        // 返回矩阵的副本，防止外部修改\n        return this._viewMatrix!.clone();\n    }\n\n    public getProjectionMatrix(): Matrix4x4 {\n        if (this._projectionMatrixDirty || !this._projectionMatrix) {\n            if (this.projection === Projection.Orthographic) {\n                this._projectionMatrix = Matrix4x4.orthographic(\n                    -this.orthographicSize,\n                    this.orthographicSize,\n                    -this.orthographicSize * (this.aspect ? 1 / this.aspect : 1), // 修复正交投影宽高比\n                    this.orthographicSize * (this.aspect ? 1 / this.aspect : 1),\n                    this.nearClip,\n                    this.farClip\n                );\n            } else {\n                this._projectionMatrix = Matrix4x4.perspective(\n                    this.fov,\n                    this.aspect,\n                    this.nearClip,\n                    this.farClip\n                );\n            }\n            this._projectionMatrixDirty = false;\n        }\n        // 返回矩阵的副本，防止外部修改\n        return this._projectionMatrix.clone();\n    }\n\n    // 当Transform发生变化时，需要更新视图矩阵\n    public onTransformChanged(): void {\n        this._viewMatrixDirty = true;\n        this._frustumPlanesDirty = true;\n    }\n\n    /**\n     * 获取视锥体的6个平面（左、右、下、上、近、远）\n     * @returns 归一化后的平面数组，顺序为 [左平面, 右平面, 下平面, 上平面, 近平面, 远平面]\n     */\n    public getFrustumPlanes(): Plane[] {\n        // 若平面未过期且已缓存，直接返回副本（避免外部修改）\n        if (!this._frustumPlanesDirty && this._frustumPlanes) {\n            return this._frustumPlanes;\n        }\n\n        // 1. 获取视图矩阵和投影矩阵，计算复合矩阵（投影 × 视图）\n        const viewMatrix = this.getViewMatrix();\n        const projMatrix = this.getProjectionMatrix();\n        const viewProjMatrix = projMatrix.multiply(viewMatrix); // 复合矩阵：世界空间 → 裁剪空间\n        const m = viewProjMatrix.matrix;\n\n        // 2. 推导6个视锥体平面（公式来自图形学标准，适配列主序矩阵）\n        const planes: Plane[] = [\n            // 左平面\n            new Plane(m[3][0] + m[0][0], m[3][1] + m[0][1], m[3][2] + m[0][2], m[3][3] + m[0][3]),\n            // 右平面\n            new Plane(m[3][0] - m[0][0], m[3][1] - m[0][1], m[3][2] - m[0][2], m[3][3] - m[0][3]),\n            // 下平面\n            new Plane(m[3][0] + m[1][0], m[3][1] + m[1][1], m[3][2] + m[1][2], m[3][3] + m[1][3]),\n            // 上平面\n            new Plane(m[3][0] - m[1][0], m[3][1] - m[1][1], m[3][2] - m[1][2], m[3][3] - m[1][3]),\n            // 近平面\n            new Plane(m[3][0] + m[2][0], m[3][1] + m[2][1], m[3][2] + m[2][2], m[3][3] + m[2][3]),\n            // 远平面\n            new Plane(m[3][0] - m[2][0], m[3][1] - m[2][1], m[3][2] - m[2][2], m[3][3] - m[2][3])\n        ];\n\n        // 3. 归一化所有平面（确保法向量长度为1，保证后续距离计算精度）\n        planes.forEach(plane => plane.normalize());\n\n        // 4. 缓存平面并标记为未过期\n        this._frustumPlanes = planes;\n        this._frustumPlanesDirty = false;\n\n        // 5. 返回平面副本（避免外部修改缓存的内部数据）\n        return planes;\n    }\n\n    /**\n     * 判断世界空间中的点是否在视锥体内\n     * @param worldPoint 待判断的世界空间点\n     * @returns true：点在视锥体内；false：点在视锥体外\n     */\n    public isPointInFrustum(worldPoint: Vector3): boolean {\n        // 1. 获取视锥体6个平面（若未缓存则自动计算，已处理归一化）\n        const frustumPlanes = this.getFrustumPlanes();\n\n        // 2. 遍历所有平面，判断点是否在平面外侧\n        for (const plane of frustumPlanes) {\n            // 计算点到平面的距离（平面已归一化，距离公式简化为 Ax+By+Cz+D）\n            // 视锥体平面的法线方向遵循 “指向视锥体内部”，若点到平面的距离 > 0，则点在平面内侧（视锥体内部）\n            const distance = plane.distanceToPoint(worldPoint);\n\n            // 若点到任意平面的距离 < 0（严格外侧，考虑浮点误差用-1e-6容差），则点在视锥体外\n            if (distance < -1e-6) {\n                return false;\n            }\n        }\n\n        // 3. 点到所有平面的距离 ≥ -1e-6，判定在视锥体内\n        return true;\n    }\n}","import { Engine } from \"../Core/Engine\";\nimport { Bounds } from \"../Math/Bounds\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { PhysicMaterial } from \"../Physics/PhysicMaterial\";\nimport { Component } from \"./Component\";\nimport { Rigidbody } from \"./RigidBody\";\n\nexport abstract class Collider extends Component {\n    public attachedRigidbody: Rigidbody | null;\n    public bounds: Bounds;\n    public isTrigger: Boolean;\n    public physicMaterial: PhysicMaterial;\n\n    private _center: Vector3 = Vector3.ZERO;\n\n    public get center(): Vector3 {\n        return this._center.clone();\n    }\n\n    public set center(newCenter: Vector3) {\n        if (!this._center.equals(newCenter)) {\n            this._center = newCenter.clone();\n            // 通常需要重新初始化碰撞体\n            Engine.physics.RebuildColliders(this);\n        }\n    }\n\n    private _lastScale: Vector3 = Vector3.ZERO;\n\n    public abstract getColliderData(): any;\n\n    public onEnable(): void {\n        // if (this.attachedRigidbody == null || this.connonShape == null) {\n        //     this.attachedRigidbody = this.gameObject.getComponetInParent(Rigidbody);\n        //     if (this.attachedRigidbody == null) return;\n        //     this.connonShape = this.createCollider(this.attachedRigidbody);\n        // }\n    }\n\n    public onTransformChanged(): void {\n        if (this.transform.scale.equals(this._lastScale)) return;\n        this._lastScale = this.transform.scale;\n        Engine.physics.RebuildColliders(this);\n    }\n\n    public onDestroy(): void {\n        Engine.physics.RemoveCollider(this);\n    }\n}","import { DISALLOW_COMPONENTS_KEY, DISALLOW_MULTIPLE_COMPONENT_KEY, REQUIRED_COMPONENTS_KEY } from \"../Core/Decorators\";\nimport { GameObject } from \"../Core/GameObject\";\nimport { Transform } from \"../Core/Transform\";\nimport { UObject } from \"../Core/UObject\";\n\nexport abstract class Component extends UObject {\n    public readonly gameObject: GameObject;\n\n    public get transform(): Transform {\n        return this.gameObject.transform;\n    }\n\n    private _enabled: boolean = true;\n    public get enabled(): boolean {\n        return this._enabled;\n    }\n    public set enabled(value: boolean) {\n        this._enabled = value;\n        if (value) {\n            this.onEnable();\n        } else {\n            this.onDisable();\n        }\n    }\n\n    constructor(gameObject: GameObject) {\n        super();\n        this.gameObject = gameObject;\n        this.checkRequiredComponents();\n        this.checkComponentUniqueness();\n        this.checkComponentCompatibility();\n        this.onAwake();\n    }\n\n    // 生命周期方法\n    // 当组件被创建时调用\n    public onAwake(): void { }\n\n    // 在启用组件的第一帧调用\n    public onStart(): void { }\n\n    // 每帧更新前调用\n    public onUpdate(): void { }\n\n    // 每帧更新后调用\n    //public lateUpdate(): void {}\n\n    // 当组件被启用时调用\n    public onEnable(): void { }\n\n    // 当组件被禁用时调用\n    public onDisable(): void { }\n\n    // 当组件被销毁时调用\n    public onDestroy(): void { }\n\n    // 绘制调试信息\n    // public onDrawGizmos(): void { }\n\n    /**\n     * 检查通过@RequireComponent装饰器声明的依赖组件是否存在\n     */\n    public checkRequiredComponents(): Boolean {\n        // 1. 获取通过装饰器声明的依赖组件类型数组\n        const requiredComponents: (new (gameObject: GameObject) => Component)[] | undefined =\n            Reflect.getMetadata(REQUIRED_COMPONENTS_KEY, this.constructor);\n\n        // 如果没有声明任何依赖，则直接返回\n        if (!requiredComponents || requiredComponents.length === 0) {\n            return true;\n        }\n\n        // 2. 遍历所有必需的组件类型\n        for (const compType of requiredComponents) {\n            // 跳过未定义的组件类型\n            if (compType == null) {\n                continue;\n            }\n\n            // 3. 检查该GameObject上是否已挂载所需的组件类型\n            const existingComponent = this.gameObject.getComponent(compType);\n            if (existingComponent == null) {\n                // 4. 如果依赖组件不存在，输出错误信息\n                console.error(`Component ${this.constructor.name} requires a ${compType.name} on the same GameObject.`);\n\n                // 5. 自动添加缺失的组件（使用类型断言确保类型安全）\n                try {\n                    this.gameObject.addComponent(compType as new (gameObject: GameObject) => Component);\n                    console.log(`Auto-added missing component: ${compType.name}`);\n                } catch (error) {\n                    console.error(`Failed to auto-add component ${compType.name}:`, error);\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 检查是否存在多个不允许同时存在的组件\n     */\n    public checkComponentUniqueness(): Boolean {\n        const componentType = this.constructor;\n        const isDisallowed = Reflect.getMetadata(DISALLOW_MULTIPLE_COMPONENT_KEY, componentType);\n\n        if (isDisallowed) {\n            // 查找同类型组件\n            const sameTypeComponents = this.gameObject.getAllComponents().filter(\n                comp => comp instanceof componentType && comp !== this\n            );\n\n            if (sameTypeComponents.length > 0) {\n                console.error(`Component ${componentType.name} is marked with @DisallowMultipleComponent, but multiple instances were found. This may cause unexpected behavior.`);\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 检查组件共存限制\n     */\n    public checkComponentCompatibility(): Boolean {\n        // 获取当前组件类上通过@DisallowComponent声明的禁止共存组件类型\n        const disallowedComponents: Function[] | undefined =\n            Reflect.getMetadata(DISALLOW_COMPONENTS_KEY, this.constructor);\n\n        if (!disallowedComponents || disallowedComponents.length === 0) {\n            return true; // 如果没有声明任何禁止共存的组件，直接返回\n        }\n\n        // 检查所有被禁止的组件类型\n        for (const disallowedType of disallowedComponents) {\n            if (disallowedType == null) continue;\n\n            // 检查是否存在被禁止的组件\n            const foundComponent = this.gameObject.getComponent(disallowedType);\n            if (foundComponent) {\n                // 如果找到被禁止的组件，抛出错误或警告\n                console.error(\n                    `Component ${this.constructor.name} cannot coexist with ${disallowedType.name} ` +\n                    `on the same GameObject. Please remove one of them.`\n                );\n\n                // 自动移除冲突组件\n                this.gameObject.removeComponent(disallowedType);\n\n                // 或者抛出异常阻止游戏运行\n                // throw new Error(`Component compatibility error: ${this.constructor.name} vs ${disallowedType.name}`);\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Gizmo } from \"../Utils/Gizmo\";\nimport { Component } from \"./Component\";\n\nexport enum LightType {\n    Directional = 0,\n    Point = 1,\n    Spot = 2,\n}\n\nexport enum ShadowType {\n    None = 0,\n    Hard = 1,\n    Soft = 2,\n}\n\nexport class Light extends Component {\n    public static sunLight: Light;\n    public type: LightType = LightType.Directional;\n    public color: Color = Color.WHITE;\n    public intensity: number = 1;\n    public shadowType: ShadowType = ShadowType.None;\n\n    public onDrawGizmos(): void {\n        Gizmo.matrix = this.transform.localToWorldMatrix;\n        Gizmo.DrawAxis(Vector3.ZERO, 0.1);\n        Gizmo.color = Color.WHITE;\n        Gizmo.DrawCube(Vector3.ZERO, new Vector3(0.1, 0.1, 0.5));\n        Gizmo.color = Color.RED;\n        Gizmo.DrawCube(new Vector3(0, 0, 0.3), Vector3.ONE.multiplyScalar(0.1));\n    }\n}","import { Renderer } from \"./Renderer\";\nimport { Mesh } from \"../Resources/Mesh\";\nimport { Gizmo } from \"../Utils/Gizmo\";\nimport { Color } from \"../Math/Color\";\nimport { Vector3 } from \"../Math/Vector3\";\n\nexport class MeshRenderer extends Renderer {\n    public mesh: Mesh | null = null;\n\n    public render(): void {\n    }\n\n    public onDestroy(): void {\n        super.onDestroy();\n        // 清理资源\n        this.mesh = null;\n    }\n\n    // public onDrawGizmos(): void {\n    //     Gizmo.matrix = this.transform.localToWorldMatrix;\n    //     Gizmo.DrawAxis(Vector3.ZERO, 0.1);\n    // }\n}","import { Component } from \"./Component\";\nimport { Material } from \"../Resources/Material\";\nimport { Bounds } from \"../Math/Bounds\";\nimport { DisallowMultipleComponent } from \"../Core/Decorators\";\n\n@DisallowMultipleComponent\nexport abstract class Renderer extends Component {\n    private _bounds: Bounds = new Bounds();\n    private _material: Material = new Material();\n    private _sortingLayerID: number = 0;\n    private _sortingOrder: number = 0;\n    private _castShadows: boolean = true;\n    private _receiveShadows: boolean = true;\n\n    // 材质属性\n    public get material(): Material {\n        return this._material;\n    }\n\n    public set material(value: Material) {\n        this._material = value;\n    }\n\n    // 排序层ID\n    public get sortingLayerID(): number {\n        return this._sortingLayerID;\n    }\n\n    public set sortingLayerID(value: number) {\n        this._sortingLayerID = value;\n    }\n\n    // 排序顺序\n    public get sortingOrder(): number {\n        return this._sortingOrder;\n    }\n\n    public set sortingOrder(value: number) {\n        this._sortingOrder = value;\n    }\n\n    // 是否投射阴影\n    public get castShadows(): boolean {\n        return this._castShadows;\n    }\n\n    public set castShadows(value: boolean) {\n        this._castShadows = value;\n    }\n\n    // 是否接收阴影\n    public get receiveShadows(): boolean {\n        return this._receiveShadows;\n    }\n\n    public set receiveShadows(value: boolean) {\n        this._receiveShadows = value;\n    }\n\n    // 是否应该被渲染\n    public get shouldRender(): boolean {\n        return this.enabled && this.gameObject.active;\n    }\n\n    // 渲染方法，子类需要实现\n    public abstract render(): void;\n\n    public onDestroy(): void {\n    }\n}","import { Engine } from \"../Core/Engine\";\nimport { LayerMask } from \"../Core/LayerMask\";\nimport { UObject } from \"../Core/UObject\";\nimport { Time } from \"../Core/Time\";\nimport { Quaternion } from \"../Math/Quaternion\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { RaycastHit } from \"../Physics/RaycastHit\";\nimport { Collider } from \"./Collider\";\nimport { Component } from \"./Component\";\nimport { DisallowMultipleComponent } from \"../Core/Decorators\";\n\nexport enum ForceMode {\n    Force,\n    Acceleration,\n    Impulse,\n    VelocityChange\n}\n\nexport enum RigidbodyInterpolation {\n    None,\n    Interpolate,\n    Extrapolate\n}\n\nexport enum CollisionDetectionMode {\n    Discrete,\n    Continuous,\n    ContinuousDynamic,\n    ContinuousSpeculative\n}\n\nexport enum RigidbodyConstraints {\n    None = 0,\n    FreezePositionX = 1,\n    FreezePositionY = 2,\n    FreezePositionZ = 4,\n    FreezeRotationX = 8,\n    FreezeRotationY = 16,\n    FreezeRotationZ = 32,\n    FreezePosition = FreezePositionX | FreezePositionY | FreezePositionZ,\n    FreezeRotation = FreezeRotationX | FreezeRotationY | FreezeRotationZ,\n    FreezeAll = FreezePosition | FreezeRotation\n}\n\nexport enum QueryTriggerInteraction {\n    UseGlobal,\n    Ignore,\n    Collide\n}\n\n@DisallowMultipleComponent\nexport class Rigidbody extends Component {\n    public velocity: Vector3;\n    public angularVelocity: Vector3;\n    public drag: number;\n    public angularDrag: number;\n    public mass: number = 1;\n    public useGravity: boolean;\n    public maxDepenetrationVelocity: number;\n    public isKinematic: boolean = false;\n    public freezeRotation: boolean;\n    public constraints: RigidbodyConstraints;\n    public collisionDetectionMode: CollisionDetectionMode;\n    public automaticCenterOfMass: boolean;\n    public centerOfMass: Vector3;\n    public automaticInertiaTensor: boolean;\n    public inertiaTensorRotation: Quaternion;\n    public inertiaTensor: Vector3;\n    public detectCollisions: boolean;\n    public position: Vector3;\n    public rotation: Quaternion;\n    public interpolation: RigidbodyInterpolation;\n    public solverIterations: number;\n    public sleepThreshold: number;\n    public maxAngularVelocity: number;\n    public maxLinearVelocity: number;\n    public solverVelocityIterations: number;\n    public excludeLayers: LayerMask;\n    public includeLayers: LayerMask;\n\n\n    public onStart(): void {\n        const parentRigidbody = this.gameObject.getComponetInParent(Rigidbody);\n        if (parentRigidbody && parentRigidbody != this) {\n            console.warn(\"一个节点层级只能拥有一个Rigidbody组件\");\n            UObject.Destroy(this);\n            return;\n        }\n\n        const childRigidbodies = this.gameObject.getComponentsInChildren(Rigidbody);\n        for (const childRigidbody of childRigidbodies) {\n            if (childRigidbody == this) continue;\n            console.warn(\"一个节点层级只能拥有一个Rigidbody组件\");\n            UObject.Destroy(childRigidbody);\n        }\n\n        Engine.physics.CreateRigidbody(this);\n\n        const colliders = this.gameObject.getComponentsInChildren(Collider);\n        for (const collider of colliders) {\n            collider.attachedRigidbody = this;\n            Engine.physics.CreateCollider(collider);\n        }\n    }\n\n    public onUpdate(): void {\n    }\n\n    public onDestroy(): void {\n        Engine.physics.RemoveRigidbody(this);\n    }\n\n    // 只读属性\n    public get worldCenterOfMass(): Vector3 {\n        // 实现获取世界坐标系下的质心\n        return new Vector3();\n    }\n\n    // 方法\n    public setDensity(density: number): void {\n        // 根据密度设置质量\n    }\n\n    public movePosition(position: Vector3): void {\n        // 移动刚体到指定位置\n    }\n\n    public moveRotation(rotation: Quaternion): void {\n        // 旋转刚体到指定方向\n    }\n\n    public move(position: Vector3, rotation: Quaternion): void {\n        // 同时移动和旋转刚体\n    }\n\n    public sleep(): void {\n        // 让刚体进入睡眠状态\n    }\n\n    public isSleeping(): boolean {\n        // 检查刚体是否在睡眠状态\n        return false;\n    }\n\n    public wakeUp(): void {\n        // 唤醒刚体\n    }\n\n    public resetCenterOfMass(): void {\n        // 重置质心\n    }\n\n    public resetInertiaTensor(): void {\n        // 重置惯性张量\n    }\n\n    public getRelativePointVelocity(relativePoint: Vector3): Vector3 {\n        // 获取相对点的速度\n        return new Vector3();\n    }\n\n    public getPointVelocity(worldPoint: Vector3): Vector3 {\n        // 获取世界点的速度\n        return new Vector3();\n    }\n\n    public getAccumulatedForce(step: number = Time.fixedDeltaTime): Vector3 {\n        // 获取累积的力\n        return new Vector3();\n    }\n\n    public getAccumulatedTorque(step: number = Time.fixedDeltaTime): Vector3 {\n        // 获取累积的扭矩\n        return new Vector3();\n    }\n\n    // 力的添加方法\n    public addForce(force: Vector3, mode: ForceMode): void;\n    public addForce(x: number, y: number, z: number, mode: ForceMode): void;\n    public addForce(forceOrX: Vector3 | number, modeOrY?: ForceMode | number, z?: number, mode?: ForceMode): void {\n    }\n\n    public addRelativeForce(force: Vector3, mode: ForceMode): void;\n    public addRelativeForce(x: number, y: number, z: number, mode: ForceMode): void;\n    public addRelativeForce(forceOrX: Vector3 | number, modeOrY?: ForceMode | number, z?: number, mode?: ForceMode): void {\n        // 实现添加相对力的重载\n    }\n\n    public addTorque(torque: Vector3, mode: ForceMode): void;\n    public addTorque(x: number, y: number, z: number, mode: ForceMode): void;\n    public addTorque(torqueOrX: Vector3 | number, modeOrY?: ForceMode | number, z?: number, mode?: ForceMode): void {\n        // 实现添加扭矩的重载\n    }\n\n    public addRelativeTorque(torque: Vector3, mode: ForceMode): void;\n    public addRelativeTorque(x: number, y: number, z: number, mode: ForceMode): void;\n    public addRelativeTorque(torqueOrX: Vector3 | number, modeOrY?: ForceMode | number, z?: number, mode?: ForceMode): void {\n        // 实现添加相对扭矩的重载\n    }\n\n    public addForceAtPosition(force: Vector3, position: Vector3, mode: ForceMode = ForceMode.Force): void {\n        // 在指定位置添加力\n    }\n\n    public addExplosionForce(explosionForce: number, explosionPosition: Vector3, explosionRadius: number, upwardsModifier: number = 0, mode: ForceMode = ForceMode.Force): void {\n        // 添加爆炸力\n    }\n\n    public closestPointOnBounds(position: Vector3): Vector3 {\n        // 获取边界上最近的点\n        return new Vector3();\n    }\n\n    public sweepTest(direction: Vector3, hitInfo: RaycastHit, maxDistance: number = Number.POSITIVE_INFINITY, queryTriggerInteraction: QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal): boolean {\n        // 扫描测试\n        return false;\n    }\n\n    public sweepTestAll(direction: Vector3, maxDistance: number = Number.POSITIVE_INFINITY, queryTriggerInteraction: QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal): RaycastHit[] {\n        // 扫描测试所有碰撞\n        return [];\n    }\n\n    // 已废弃的方法（保持兼容性）\n    public setMaxAngularVelocity(a: number): void {\n        this.maxAngularVelocity = a;\n    }\n}","import { Engine } from \"../Core/Engine\";\nimport { Collider } from \"./Collider\";\n\nexport interface SphereColliderData {\n    radius: number;\n}\n\nexport class SphereCollider extends Collider {\n    public _radius: number = 0.5;\n\n    public get radius(): number {\n        return this._radius;\n    }\n\n    public set radius(newRadius: number) {\n        if (this._radius !== newRadius) {\n            this._radius = newRadius;\n            // 通常需要重新初始化碰撞体\n            Engine.physics.RebuildColliders(this);\n        }\n    }\n\n    public getColliderData(): SphereColliderData {\n        return {\n            radius: this._radius * this.transform.worldScale.x,\n        }\n    }\n\n    /**\n     * 返回球的体积（用于计算质量等）\n     */\n    public getVolume(): number {\n        return (4.0 / 3.0) * Math.PI * Math.pow(this.radius, 3);\n    }\n}","/*\n * 相机控制可以参考three.js的OrbitControls.js：https://github.com/mrdoob/three.js/blob/r108/examples/js/controls/OrbitControls.js#L390-L395\n */\n\nimport { RequireComponent } from \"../../Core/Decorators\";\nimport { Engine } from \"../../Core/Engine\";\nimport { Input, InputAxis } from \"../../Core/Input\";\nimport { Time } from \"../../Core/Time\";\nimport { Quaternion } from \"../../Math/Quaternion\";\nimport { Vector3 } from \"../../Math/Vector3\";\nimport { Camera, Projection } from \"../Camera\";\nimport { Component } from \"../Component\";\n\n@RequireComponent(Camera)\nexport class CameraController extends Component {\n    public moveSpeed = 0.5;\n    public moveSpeedShiftScale = 2.5;\n    public dragSpeed = 0.3;\n    public damp = 0.2;\n    public rotateSpeed = 1;\n\n    private _camera: Camera | null;\n    private _euler = new Vector3();\n    private _velocity = new Vector3();\n    private _position = new Vector3();\n    private _speedScale = 1;\n    private _rotateCamera = false;\n    private _rotateCenter = new Vector3();\n\n    public onStart(): void {\n        this._camera = this.gameObject.getComponent(Camera);\n        this._euler = this.transform.rotation.eulerAngles;\n        this._position = this.transform.position;\n    }\n\n    private updateInput(): void {\n        // WSADQE+SHIFT相机移动以及加速\n        this._velocity.x = Input.GetAxis(InputAxis.Horizontal);\n        this._velocity.z = Input.GetAxis(InputAxis.Vertical);\n        this._velocity.y = Input.GetKey(Input.KeyCode.Q) ? -1 : Input.GetKey(Input.KeyCode.E) ? 1 : 0;\n        this._speedScale = Input.GetKey(Input.KeyCode.Shift) ? this.moveSpeedShiftScale : 1;\n\n        // 鼠标中键相机拖动\n        if (Input.GetMouseButton(1)) {\n            const moveDelta = Input.mouseDelta;\n            //TODO:这里应该是托多少就移动多少，而不是乘一个系数\n            this._velocity.x -= moveDelta.x * this.dragSpeed;\n            this._velocity.y += moveDelta.y * this.dragSpeed;\n        }\n\n        // 鼠标滚轮相机缩放\n        const scrollDelta = Input.mouseScrollDelta.y * this.moveSpeed;\n        if (this._camera?.projection == Projection.Orthographic) {\n            this._camera.orthographicSize += scrollDelta * 0.01;\n        }\n        else {\n            var pos = this.transform.rotation.transformQuat(Vector3.BACK);\n            this._position = this.scaleAndAdd(this.transform.position, pos, scrollDelta * 0.1);\n        }\n\n        // 鼠标右键相机旋转\n        if (Input.GetMouseButtonDown(0)) {\n            Engine.canvas.requestPointerLock();\n            this._rotateCamera = true;\n        }\n        if (Input.GetMouseButtonUp(2)) {\n            if (document.exitPointerLock) document.exitPointerLock();\n            this._rotateCamera = false;\n        }\n        if (this._rotateCamera) {\n            const moveDelta = Input.mouseDelta;\n            this._euler.y += moveDelta.x * this.rotateSpeed * 0.1;\n            this._euler.x += moveDelta.y * this.rotateSpeed * 0.1;\n        }\n\n        // ALT+鼠标左键相机绕中心点旋转\n        // if (Input.GetKey(Input.KeyCode.Alt) && Input.GetMouseButton(0)) {\n        //     const moveDelta = Input.mouseDelta;\n        //     this._euler.y -= moveDelta.x * this.rotateSpeed * 0.1;\n        //     this._euler.x += moveDelta.y * this.rotateSpeed * 0.1;\n        // }\n    }\n\n    private scaleAndAdd(a: Vector3, b: Vector3, scale: number): Vector3 {\n        var out = new Vector3();\n        out.x = a.x + b.x * scale;\n        out.y = a.y + b.y * scale;\n        out.z = a.z + b.z * scale;\n        return out;\n    }\n\n    public onUpdate(): void {\n        this.updateInput();\n\n        // position\n        var v = this.transform.rotation.transformQuat(this._velocity);\n        this._position = this.scaleAndAdd(this._position, v, this.moveSpeed * this._speedScale);\n        v = Vector3.lerp(this.transform.position, this._position, Time.deltaTime / this.damp);\n        this.transform.position = v;\n\n        // rotation\n        var q = new Quaternion(new Vector3(this._euler.x, this._euler.y, this._euler.z));\n        q = Quaternion.slerp(this.transform.rotation, q, Time.deltaTime / this.damp);\n        this.transform.rotation = q;\n    }\n}","import { DisallowComponent } from \"../../Core/Decorators\";\nimport { Input } from \"../../Core/Input\";\nimport { Quaternion } from \"../../Math/Quaternion\";\nimport { Vector3 } from \"../../Math/Vector3\";\nimport { Debug } from \"../../Utils/Debug\";\nimport { Component } from \"../Component\";\nimport { Rigidbody } from \"../RigidBody\";\n\n@DisallowComponent(Rigidbody)\nexport class ObjAutoRotate extends Component {\n    private angleX = 0;\n    private angleY = 0;\n\n    public onStart(): void {\n        this.angleX = this.transform.rotation.eulerAngles.x;\n        this.angleY = this.transform.rotation.eulerAngles.y;\n    }\n\n    public onUpdate(): void {\n        this.angleY += 1;\n        this.transform.rotation = new Quaternion(new Vector3(this.angleX, this.angleY, 0));\n    }\n}","import { DisallowComponent } from \"../../Core/Decorators\";\nimport { Input } from \"../../Core/Input\";\nimport { Quaternion } from \"../../Math/Quaternion\";\nimport { Vector3 } from \"../../Math/Vector3\";\nimport { Debug } from \"../../Utils/Debug\";\nimport { Component } from \"../Component\";\nimport { Rigidbody } from \"../RigidBody\";\n\n@DisallowComponent(Rigidbody)\nexport class ObjRotate extends Component {\n    private angleX = 0;\n    private angleY = 0;\n\n    public onStart(): void {\n        this.angleX = this.transform.rotation.eulerAngles.x;\n        this.angleY = this.transform.rotation.eulerAngles.y;\n    }\n\n    public onUpdate(): void {\n        // // 键盘输入\n        // const horizontalInput = Input.GetAxis(InputAxis.Horizontal);\n        // const verticalInput = Input.GetAxis(InputAxis.Vertical);\n        // this.angleX += verticalInput;\n        // this.angleY += horizontalInput;\n        // this.transform.rotation = new Quaternion(new Vector3(this.angleX, this.angleY, 0));\n\n        // // 鼠标滚轮\n        // if (Input.mouseScrollDelta.y !== 0) {\n        //     // 缩放\n        //     const zoomFactor = Input.mouseScrollDelta.y > 0 ? 0.9 : 1.1;\n        //     const sacle = this.transform.scale;\n        //     sacle.multiply(zoomFactor);\n        //     this.transform.scale = sacle;\n        // }\n        \n        if(Input.GetKey(Input.KeyCode.Numpad4)) this.angleY -= 1;\n        if(Input.GetKey(Input.KeyCode.Numpad6)) this.angleY += 1;\n        if(Input.GetKey(Input.KeyCode.Numpad8)) this.angleX -= 1;\n        if(Input.GetKey(Input.KeyCode.Numpad2)) this.angleX += 1;\n        this.transform.rotation = new Quaternion(new Vector3(this.angleX, this.angleY, 0));\n\n        Debug.Log(this.gameObject.name + \" X:\" + Math.floor(this.angleX) + \" Y:\" + Math.floor(this.angleY));\n    }\n}","import 'reflect-metadata';\n\nexport const REQUIRED_COMPONENTS_KEY = Symbol('requiredComponents');\nexport const DISALLOW_MULTIPLE_COMPONENT_KEY = Symbol('DisallowMultipleComponent');\nexport const DISALLOW_COMPONENTS_KEY = Symbol('DisallowedComponents');\n\n/**\n * 装饰器：标记当前组件需要依赖的其他组件类型\n * @param componentTypes 需要依赖的组件类型数组\n */\nexport function RequireComponent(...componentTypes: Function[]) {\n    return function (target: Function) {\n        // 将依赖的组件类型元数据存储在目标组件上\n        Reflect.defineMetadata(REQUIRED_COMPONENTS_KEY, componentTypes, target);\n    };\n}\n\n/**\n * 装饰器：标记当前组件不允许与指定类型的组件共存于同一个GameObject上\n * @param disallowedComponentTypes 不允许共存的组件类型数组\n */\nexport function DisallowComponent(...disallowedComponentTypes: Function[]) {\n    return function (target: Function) {\n        // 存储被禁止的组件类型数组到元数据中\n        Reflect.defineMetadata(DISALLOW_COMPONENTS_KEY, disallowedComponentTypes, target);\n    };\n}\n\n/**\n * 用于标记一个组件在一个GameObject上只能存在一个实例\n * 使用反射元数据存储该标记\n */\nexport function DisallowMultipleComponent(target: Function) {\n    // 设置元数据，标记这个类不允许重复添加\n    Reflect.defineMetadata(DISALLOW_MULTIPLE_COMPONENT_KEY, true, target);\n}","import { Input } from \"./Input\";\nimport { RasterizationPipeline } from \"../Renderer/RasterizationPipeline\";\nimport { MainScene } from \"../Scene/MainScene\";\nimport { SceneManager } from \"../Scene/SceneManager\";\nimport { Debug } from \"../Utils/Debug\";\nimport { Time } from \"./Time\";\nimport { TweenManager } from \"./TweenManager\";\nimport { Physics } from \"../Physics/Physics\";\nimport { EngineConfig } from \"./Setting\";\n\nexport class Engine {\n    public static sceneManager: SceneManager = new SceneManager();\n    public static physics: Physics = new Physics();\n    public static canvas: HTMLCanvasElement;\n    public static context: CanvasRenderingContext2D;\n    public static pipeline: RasterizationPipeline;\n    public static imageData: ImageData;\n\n    public static async Init() {\n        // 获取canvas元素和2D渲染上下文\n        this.canvas = document.getElementById('canvas') as HTMLCanvasElement;\n        this.context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        // 设置canvas尺寸\n        this.canvas.width = EngineConfig.canvasWidth;\n        this.canvas.height = EngineConfig.canvasHeight;\n        // 设置文本样式\n        this.context.font = 'Arial';\n        this.context.textAlign = 'left';\n\n        // 创建图像数据对象\n        this.imageData = Engine.context.createImageData(EngineConfig.canvasWidth, EngineConfig.canvasHeight);\n        // 创建32位无符号整型数组视图，用于直接操作像素数据\n        const uint32View = new Uint32Array(this.imageData.data.buffer);\n        // 创建渲染器实例\n        this.pipeline = new RasterizationPipeline(uint32View);\n\n        // 初始化物理引擎\n        this.physics.init();\n        // 初始化场景\n        await this.sceneManager.loadScene(MainScene);\n        // 初始化输入系统\n        Input.initialize();\n    }\n\n    public static Loop(time: number) {\n        Debug.Log(Math.floor(1 / Time.deltaTime).toString());\n\n        // 1. 更新时间数据：判断当前帧是否需要执行（受 maxFps 影响）\n        const shouldExecuteFrame = Time.updateFrame();\n        // if (!shouldExecuteFrame) {\n        //     return;\n        // }\n\n        // 2. 固定更新（对应 Unity FixedUpdate，例如物理引擎、AI逻辑）\n        Time.updateFixedTime(() => {\n            Engine.FixedUpdate(); // 你的固定逻辑更新（如物理碰撞、技能CD）\n        });\n\n        // 3. 普通逻辑更新（对应 Unity Update，受 deltaTime 影响）\n        Engine.Update(); // 例如：角色移动（速度 * Time.deltaTime 确保帧率无关）\n\n        // 4. 更新输入状态(注：输入已经由WEB引擎在每帧开始之前获取了，这里是更新输入的上一帧状态)\n        Input.update();\n\n        // 5. 渲染\n        Engine.Render();\n\n        // 6. 屏幕输出日志\n        Debug.PrintLogs();\n    }\n\n    private static Update() {\n        // 使用场景的update方法更新所有游戏对象\n        this.sceneManager.getActiveScene()?.update();\n        // 更新动画\n        TweenManager.update();\n    }\n\n    private static FixedUpdate() {\n        this.physics.update();\n    }\n\n    private static Render() {\n        this.pipeline.Render();\n        // 将图像数据绘制到canvas上\n        this.context.putImageData(this.imageData, 0, 0);\n    }\n}","import { Transform } from \"./Transform\";\nimport { Component } from \"../Component/Component\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Quaternion } from \"../Math/Quaternion\";\nimport { UObject } from \"./UObject\";\nimport { DISALLOW_COMPONENTS_KEY, DISALLOW_MULTIPLE_COMPONENT_KEY } from \"./Decorators\";\nimport { Engine } from \"./Engine\";\n\nexport class GameObject extends UObject {\n    public name: string;\n    public transform: Transform;\n    public tag: string = \"Untagged\";\n    public layer: number = 0;\n\n    private components: Component[] = [];\n    private startedComponents: Set<Component> = new Set<Component>();\n\n    constructor(name: string, parent?: GameObject) {\n        super();\n        this.name = name;\n        this.transform = new Transform(this);\n\n        if (parent) {\n            this.transform.setParent(parent.transform);\n        }\n        else {\n            const p = Engine.sceneManager.getActiveScene()?.getRootGameObject();\n            if (p) {\n                this.transform.setParent(p.transform);\n            }\n        }\n    }\n\n    private _active: boolean = true;\n    // 设置游戏对象的激活状态\n    public set active(value: boolean) {\n        if (this._active !== value) {\n            this._active = value;\n\n            // 处理组件的启用/禁用\n            for (const component of this.components) {\n                if (value) {\n                    component.onEnable();\n                } else {\n                    component.onDisable();\n                }\n            }\n        }\n    }\n    // 检查游戏对象是否处于活动状态（考虑父对象）\n    public get active(): boolean {\n        if (!this._active) return false;\n\n        // 检查父对象的激活状态\n        let parent = this.transform.parent;\n        while (parent) {\n            const parentGameObject = parent.gameObject;\n            if (parentGameObject && !parentGameObject.active) {\n                return false;\n            }\n            parent = parent.parent;\n        }\n\n        return true;\n    }\n\n    // 调用所有组件的Start方法（如果尚未调用）\n    public startComponents(): void {\n        if (!this.active) return;\n\n        for (const component of this.components) {\n            if (!this.startedComponents.has(component) && component.enabled) {\n                component.onStart();\n                component.onEnable();\n                this.startedComponents.add(component);\n            }\n        }\n\n        // 递归调用子对象的startComponents\n        for (const child of this.transform.children) {\n            if (child.gameObject) {\n                child.gameObject.startComponents();\n            }\n        }\n    }\n\n    // 更新所有组件\n    public updateComponents(): void {\n        if (!this.active) return;\n\n        for (const component of this.components) {\n            if (component.enabled) {\n                component.onUpdate();\n            }\n        }\n\n        // 递归调用子对象的updateComponents\n        for (const child of this.transform.children) {\n            if (child.gameObject) {\n                child.gameObject.updateComponents();\n            }\n        }\n    }\n\n    /**\n     * 添加组件到游戏对象\n     * @param componentType 组件类型\n     * @returns 添加的组件实例\n     */\n    public addComponent<T extends Component>(componentType: new (gameObject: GameObject) => T): T | null {\n        // 1.检查是否已经存在该类型的组件\n        const existingComponent = this.getComponent(componentType);\n        if (existingComponent) {\n            if (!existingComponent.checkComponentUniqueness()) {\n                // 不允许添加多个相同的组件，返回已经存在的\n                return existingComponent;\n            }\n        }\n\n        // 2.判断是否有与该组件排斥的组件\n        for (const existingComponent of this.components) {\n            const existingDisallowed: Function[] | undefined =\n                Reflect.getMetadata(DISALLOW_COMPONENTS_KEY, existingComponent.constructor);\n\n            if (existingDisallowed && existingDisallowed.includes(componentType)) {\n                console.error(\n                    `Cannot add ${componentType.name}: existing ${existingComponent.constructor.name} ` +\n                    `forbids this component type`\n                );\n                return null;\n            }\n        }\n\n        // 创建新组件实例\n        const comp = new componentType(this);\n\n        // 3.判断是否有依赖组件，有的话添加\n        if (comp.checkRequiredComponents()) {\n            this.components.push(comp);\n            // 4.检查是否有冲突的组件，有的话移除它们\n            comp.checkComponentCompatibility();\n            return comp;\n        }\n        else {\n            // 添加失败，则该组件也销毁，避免出现逻辑问题\n            comp.Destroy();\n            return null;\n        }\n    }\n\n    public getAllComponents(): Component[] {\n        return this.components;\n    }\n\n    // 获取指定类型的组件\n    public getComponent<T extends Component>(componentType: Function & { prototype: T }): T | null {\n        for (const component of this.components) {\n            if (component instanceof componentType) {\n                return component as T;\n            }\n        }\n        return null;\n    }\n\n    // 获取所有指定类型的组件\n    public getComponents<T extends Component>(componentType: Function & { prototype: T }): T[] {\n        const result: T[] = [];\n        for (const component of this.components) {\n            if (component instanceof componentType) {\n                result.push(component as T);\n            }\n        }\n        return result;\n    }\n\n    public getComponetInParent<T extends Component>(componentType: Function & { prototype: T }): T | null {\n        // 先检查自身\n        const comp = this.getComponent(componentType);\n        if (comp != null) {\n            return comp;\n        }\n\n        let parent = this.transform.parent;\n        while (parent) {\n            const parentGameObject = parent.gameObject;\n            if (parentGameObject) {\n                const component = parentGameObject.getComponent(componentType);\n                if (component) {\n                    return component;\n                }\n            }\n            parent = parent.parent;\n        }\n        return null;\n    }\n\n    // 获取子节点上的组件\n    public getComponentInChildren<T extends Component>(componentType: Function & { prototype: T }): T | null {\n        // 先检查自身\n        const comp = this.getComponent(componentType);\n        if (comp != null) {\n            return comp;\n        }\n\n        // 遍历所有子节点\n        for (const child of this.transform.children) {\n            const childGameObject = child.gameObject;\n            if (childGameObject) {\n                const childComp = childGameObject.getComponent(componentType);\n                if (childComp != null) {\n                    return childComp;\n                }\n\n                // 递归检查子节点的子节点\n                const deepChildComp = childGameObject.getComponentInChildren(componentType);\n                if (deepChildComp != null) {\n                    return deepChildComp;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    // 获取子节点上的所有组件\n    public getComponentsInChildren<T extends Component>(componentType: Function & { prototype: T }): T[] {\n        const result: T[] = [];\n\n        // 添加自身的组件\n        result.push(...this.getComponents(componentType));\n\n        // 遍历所有子节点\n        for (const child of this.transform.children) {\n            // 假设每个Transform都有对应的GameObject\n            const childGameObject = child.gameObject;\n            if (childGameObject) {\n                // 递归获取子节点的所有组件\n                result.push(...childGameObject.getComponentsInChildren(componentType));\n            }\n        }\n\n        return result;\n    }\n\n    // 移除组件\n    public removeComponent<T extends Component>(componentType: Function & { prototype: T }): boolean {\n        const index = this.components.findIndex(component => component instanceof componentType);\n        if (index !== -1) {\n            const component = this.components[index];\n            component.onDestroy();\n            this.components.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    public removeComponentInstance<T extends Component>(component: T): boolean {\n        // 查找组件实例在数组中的索引\n        const index = this.components.indexOf(component);\n        if (index !== -1) {\n            // 调用组件的销毁生命周期方法\n            component.onDestroy();\n            // 从数组中移除该实例\n            this.components.splice(index, 1);\n            return true; // 移除成功\n        }\n        return false; // 未找到该组件实例\n    }\n\n    // 静态方法：通过名称查找GameObject\n    public static find(name: string): GameObject | null {\n        // 实现查找逻辑\n        // 这需要一个全局的GameObject注册表\n        return null;\n    }\n\n    // 静态方法：通过标签查找第一个GameObject\n    public static findWithTag(tag: string): GameObject | null {\n        // 实现查找逻辑\n        // 这需要一个标签系统\n        return null;\n    }\n\n    // 静态方法：通过标签查找所有GameObject\n    public static findGameObjectsWithTag(tag: string): GameObject[] {\n        // 实现查找逻辑\n        return [];\n    }\n\n    // 静态方法：查找特定类型的第一个组件\n    public static findObjectOfType<T extends Component>(type: new (...args: any[]) => T): T | null {\n        // 实现查找逻辑\n        return null;\n    }\n\n    // 静态方法：查找特定类型的所有组件\n    public static findObjectsOfType<T extends Component>(type: new (...args: any[]) => T): T[] {\n        // 实现查找逻辑\n        return [];\n    }\n\n    // 静态方法：实例化游戏对象\n    public static instantiate(original: GameObject, position?: Vector3, rotation?: Quaternion): GameObject {\n        // 创建新的游戏对象\n        const clone = new GameObject(original.name);\n\n        // 复制属性\n        clone.tag = original.tag;\n        clone.layer = original.layer;\n        clone.active = original.active;\n        clone.transform.position = original.transform.worldPosition;\n        clone.transform.rotation = original.transform.worldRotation;\n        clone.transform.scale = original.transform.worldScale;\n\n        if (position) clone.transform.position = position;\n        if (rotation) clone.transform.rotation = rotation;\n\n        // 复制组件（这需要一个深度复制机制）\n        const comps = original.getAllComponents();\n        for(let i = 0; i < comps.length; i++){\n            const comp = comps[i];\n            //clone.addComponent()\n        }\n\n        return clone;\n    }\n\n    // 销毁游戏对象\n    public onDestroy(): void {\n        // 调用所有组件的onDestroy方法\n        for (const component of this.components) {\n            component.onDestroy();\n        }\n        // 这里可以添加从场景中移除游戏对象的逻辑\n    }\n}","import { Vector2 } from \"../Math/Vector2\";\n\nexport class Input {\n    // 键盘状态\n    private static currentKeys: Map<string, boolean> = new Map<string, boolean>();\n    private static previousKeys: Map<string, boolean> = new Map<string, boolean>();\n\n    // 鼠标状态\n    private static currentMouseButtons: boolean[] = [false, false, false]; // 左、中、右键\n    private static previousMouseButtons: boolean[] = [false, false, false];\n    public static mousePosition: Vector2 = Vector2.ZERO;\n    public static mouseDelta: Vector2 = Vector2.ZERO;\n    public static mouseScrollDelta: Vector2 = Vector2.ZERO;\n\n    // 触摸状态\n    private static touches: Touch[] = [];\n\n    // 按键常量\n    public static readonly KeyCode = {\n        // 字母键\n        A: 'KeyA', B: 'KeyB', C: 'KeyC', D: 'KeyD', E: 'KeyE', F: 'KeyF', G: 'KeyG',\n        H: 'KeyH', I: 'KeyI', J: 'KeyJ', K: 'KeyK', L: 'KeyL', M: 'KeyM', N: 'KeyN',\n        O: 'KeyO', P: 'KeyP', Q: 'KeyQ', R: 'KeyR', S: 'KeyS', T: 'KeyT', U: 'KeyU',\n        V: 'KeyV', W: 'KeyW', X: 'KeyX', Y: 'KeyY', Z: 'KeyZ',\n\n        // 数字键\n        Alpha0: 'Digit0', Alpha1: 'Digit1', Alpha2: 'Digit2', Alpha3: 'Digit3', Alpha4: 'Digit4',\n        Alpha5: 'Digit5', Alpha6: 'Digit6', Alpha7: 'Digit7', Alpha8: 'Digit8', Alpha9: 'Digit9',\n\n        // 小键盘数字键\n        Numpad0: 'Numpad0', Numpad1: 'Numpad1', Numpad2: 'Numpad2', Numpad3: 'Numpad3',\n        Numpad4: 'Numpad4', Numpad5: 'Numpad5', Numpad6: 'Numpad6', Numpad7: 'Numpad7',\n        Numpad8: 'Numpad8', Numpad9: 'Numpad9',\n\n        // 小键盘功能键（可选添加）\n        NumpadMultiply: 'NumpadMultiply',    // 乘号 *\n        NumpadAdd: 'NumpadAdd',              // 加号 +\n        NumpadSubtract: 'NumpadSubtract',    // 减号 -\n        NumpadDecimal: 'NumpadDecimal',      // 小数点 .\n        NumpadDivide: 'NumpadDivide',        // 除号 /\n        NumpadEnter: 'NumpadEnter',          // 回车键\n\n        // 功能键\n        F1: 'F1', F2: 'F2', F3: 'F3', F4: 'F4', F5: 'F5', F6: 'F6',\n        F7: 'F7', F8: 'F8', F9: 'F9', F10: 'F10', F11: 'F11', F12: 'F12',\n\n        // 特殊键\n        Space: 'Space',\n        Enter: 'Enter',\n        Tab: 'Tab',\n        Escape: 'Escape',\n        Backspace: 'Backspace',\n        Shift: 'ShiftLeft',\n        Control: 'ControlLeft',\n        Alt: 'AltLeft',\n        CapsLock: 'CapsLock',\n\n        // 方向键\n        UpArrow: 'ArrowUp',\n        DownArrow: 'ArrowDown',\n        LeftArrow: 'ArrowLeft',\n        RightArrow: 'ArrowRight',\n    };\n\n    // 初始化输入系统\n    public static initialize(): void {\n        // 键盘事件\n        document.addEventListener('keydown', (event) => {\n            Input.currentKeys.set(event.code, true);\n        });\n\n        document.addEventListener('keyup', (event) => {\n            Input.currentKeys.set(event.code, false);\n        });\n\n        // 鼠标事件\n        document.addEventListener('mousedown', (event) => {\n            if (event.button >= 0 && event.button < 3) {\n                Input.currentMouseButtons[event.button] = true;\n            }\n        });\n\n        document.addEventListener('mouseup', (event) => {\n            if (event.button >= 0 && event.button < 3) {\n                Input.currentMouseButtons[event.button] = false;\n            }\n        });\n\n        document.addEventListener('mousemove', (event) => {\n            const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n            const rect = canvas.getBoundingClientRect();\n            Input.mousePosition.x = event.clientX - rect.left;\n            Input.mousePosition.y = event.clientY - rect.top;\n            Input.mouseDelta.x = event.movementX;\n            Input.mouseDelta.y = event.movementY;\n        });\n\n        document.addEventListener('wheel', (event) => {\n            Input.mouseScrollDelta.y = event.deltaY;\n        });\n\n        document.addEventListener('scrollend', () => {\n            Input.mouseScrollDelta.y = 0;\n        });\n\n        // 触摸事件\n        document.addEventListener('touchstart', (event) => {\n            Input.updateTouches(event.touches);\n        });\n\n        document.addEventListener('touchmove', (event) => {\n            Input.updateTouches(event.touches);\n        });\n\n        document.addEventListener('touchend', (event) => {\n            Input.updateTouches(event.touches);\n        });\n\n        document.addEventListener('touchcancel', (event) => {\n            Input.updateTouches(event.touches);\n        });\n    }\n\n    // 更新输入状态（在每帧开始时调用）\n    public static update(): void {\n        // 更新键盘状态\n        Input.previousKeys = new Map(Input.currentKeys);\n\n        // 更新鼠标状态\n        Input.previousMouseButtons = [...Input.currentMouseButtons];\n\n        // 复位鼠标滚轮\n        Input.mouseScrollDelta.y = 0;\n\n        // 复位鼠标移动\n        Input.mouseDelta.x = 0;\n        Input.mouseDelta.y = 0;\n    }\n\n    //#region 键盘输入检测\n\n    // 检查按键是否被按下（持续触发）\n    public static GetKey(keyCode: string): boolean {\n        return Input.currentKeys.get(keyCode) === true;\n    }\n\n    // 检查按键是否在当前帧被按下（仅一帧触发）\n    public static GetKeyDown(keyCode: string): boolean {\n        return Input.currentKeys.get(keyCode) === true && Input.previousKeys.get(keyCode) !== true;\n    }\n\n    // 检查按键是否在当前帧被释放（仅一帧触发）\n    public static GetKeyUp(keyCode: string): boolean {\n        return Input.currentKeys.get(keyCode) !== true && Input.previousKeys.get(keyCode) === true;\n    }\n\n    // 获取指定轴向的输入值\n    public static GetAxis(axis: InputAxis): number {\n        switch (axis) {\n            case InputAxis.Horizontal:\n                // 水平轴 A/D 或 左右方向键\n                if (Input.GetKey(Input.KeyCode.D) || Input.GetKey(Input.KeyCode.RightArrow)) {\n                    return 1;\n                }\n                if (Input.GetKey(Input.KeyCode.A) || Input.GetKey(Input.KeyCode.LeftArrow)) {\n                    return -1;\n                }\n                return 0;\n\n            case InputAxis.Vertical:\n                // 垂直轴 W/S 或 上下方向键\n                if (Input.GetKey(Input.KeyCode.W) || Input.GetKey(Input.KeyCode.UpArrow)) {\n                    return 1;\n                }\n                if (Input.GetKey(Input.KeyCode.S) || Input.GetKey(Input.KeyCode.DownArrow)) {\n                    return -1;\n                }\n                return 0;\n\n            default:\n                return 0;\n        }\n    }\n\n    //#endregion\n\n    //#region 鼠标输入检测\n\n    // 检查鼠标按钮是否被按下（持续触发）\n    public static GetMouseButton(button: number): boolean {\n        return button >= 0 && button < 3 ? Input.currentMouseButtons[button] : false;\n    }\n\n    // 检查鼠标按钮是否在当前帧被按下（仅一帧触发）\n    public static GetMouseButtonDown(button: number): boolean {\n        return button >= 0 && button < 3 ?\n            (Input.currentMouseButtons[button] && !Input.previousMouseButtons[button]) : false;\n    }\n\n    // 检查鼠标按钮是否在当前帧被释放（仅一帧触发）\n    public static GetMouseButtonUp(button: number): boolean {\n        return button >= 0 && button < 3 ?\n            (!Input.currentMouseButtons[button] && Input.previousMouseButtons[button]) : false;\n    }\n\n    //#endregion\n\n    //#region 触摸输入检测\n\n    // 更新触摸状态\n    private static updateTouches(touchList: TouchList): void {\n        Input.touches = [];\n        for (let i = 0; i < touchList.length; i++) {\n            const touch = touchList[i];\n            const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n            const rect = canvas.getBoundingClientRect();\n\n            Input.touches.push({\n                fingerId: touch.identifier,\n                position: {\n                    x: touch.clientX - rect.left,\n                    y: touch.clientY - rect.top\n                },\n                deltaPosition: { x: 0, y: 0 }, // 简化实现，实际应该跟踪前一帧位置\n                phase: TouchPhase.Moved, // 简化实现\n                tapCount: 1 // 简化实现\n            });\n        }\n    }\n\n    // 获取指定索引的触摸\n    public static GetTouch(index: number): Touch | null {\n        return index >= 0 && index < Input.touches.length ? Input.touches[index] : null;\n    }\n\n    // 获取触摸数量\n    public static get touchCount(): number {\n        return Input.touches.length;\n    }\n\n    //#endregion\n}\n\n// 轴向枚举\nexport enum InputAxis {\n    Horizontal,\n    Vertical,\n}\n\n// 触摸阶段枚举\nexport enum TouchPhase {\n    Began,\n    Moved,\n    Stationary,\n    Ended,\n    Canceled\n}\n\n// 触摸信息接口\nexport interface Touch {\n    fingerId: number;\n    position: { x: number, y: number };\n    deltaPosition: { x: number, y: number };\n    phase: TouchPhase;\n    tapCount: number;\n}","import { Color } from \"../Math/Color\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { CubeMap } from \"../Resources/CubeMap\";\nimport { LayerMask } from \"./LayerMask\";\n\nexport enum FogMode {\n    Linear = 0,\n    Exponential = 1,\n    Exp2 = 2,\n}\n\nexport const Layers: string[] = [\n    \"Default\",\n    \"TransparentFX\",\n    \"Ignore Raycast\",\n    \"Water\",\n]\n\nexport class EngineConfig {\n    public static canvasWidth: number = 320;\n    public static canvasHeight: number = 240;\n    public static halfCanvasWidth: number = EngineConfig.canvasWidth >> 1;\n    public static halfCanvasHeight: number = EngineConfig.canvasHeight >> 1;\n    public static aspectRatio: number = EngineConfig.canvasWidth / EngineConfig.canvasHeight;\n}\n\nexport class TimeSettings {\n}\n\nexport class PhysicsSettings {\n    public static gravity: Vector3 = new Vector3(0, -9.8, 0);\n    public static layerCollisionMatrix: LayerMask[][] = [];\n}\n\nexport class RenderSettings {\n    public static fog: boolean = false;\n    public static fogColor: Color;\n    public static fogMode: FogMode = FogMode.Exp2;\n    public static fogDensity: number = 0.01;\n    public static linearFogStart: number = 0;\n    public static linearFogEnd: number = 300;\n    public static ambientLight: Color = new Color(0.2, 0.2, 0.2, 1);\n    public static skybox: CubeMap;\n}","/**\n * 模仿 Unity Time 类：提供时间管理、帧率控制、时间缩放等核心功能\n * 核心特性：\n * 1. deltaTime：上一帧到当前帧的时间间隔（受 timeScale 影响）\n * 2. unscaledDeltaTime：不受 timeScale 影响的原始帧间隔\n * 3. time：游戏启动到现在的总时间（受 timeScale 影响）\n * 4. fixedTime：固定时间步长的累计时间（用于物理/固定逻辑更新）\n * 5. timeScale：时间缩放系数（0=暂停，1=正常，>1=加速，<1=减速）\n */\nexport class Time {\n    // ========================== 静态属性（对应 Unity Time 静态接口）==========================\n    /** 上一帧到当前帧的时间间隔（秒），受 timeScale 影响（暂停时为 0） */\n    public static deltaTime: number = 0;\n\n    /** 上一帧到当前帧的原始时间间隔（秒），不受 timeScale 影响（暂停时仍为真实时间间隔） */\n    public static unscaledDeltaTime: number = 0;\n\n    /** 游戏启动到现在的总时间（秒），受 timeScale 影响（暂停时不增加） */\n    public static time: number = 0;\n\n    /** 游戏启动到现在的原始总时间（秒），不受 timeScale 影响（暂停时仍增加） */\n    public static unscaledTime: number = 0;\n\n    /** 固定时间步长（秒），用于物理更新/固定逻辑更新（默认 0.02 秒 = 50 次/秒，对应 Unity fixedDeltaTime） */\n    public static fixedDeltaTime: number = 0.02;\n\n    /** 固定时间步长的累计时间（秒），用于触发固定更新（对应 Unity fixedTime） */\n    public static fixedTime: number = 0;\n\n    /** 时间缩放系数（0 = 暂停，1 = 正常速度，2 = 2倍速，0.5 = 0.5倍速） */\n    public static timeScale: number = 1;\n\n    /** 帧率限制（默认无限制，设为 30/60 可固定帧率） */\n    public static maxFps: number | null = null;\n\n    // ========================== 私有成员（内部计时逻辑）==========================\n    /** 上一帧的时间戳（毫秒，用于计算帧间隔） */\n    private static lastFrameTime: number = performance.now();\n\n    /** 固定时间步长的累计余数（避免固定更新丢失精度） */\n    private static fixedTimeRemainder: number = 0;\n\n    /** 是否已初始化（确保仅启动一次计时） */\n    private static isInitialized: boolean = false;\n\n\n    // ========================== 核心方法（需集成到渲染循环）==========================\n    /**\n     * 每帧更新时间数据（必须在主循环中调用，对应 Unity 帧生命周期）\n     * @returns 该帧是否需要执行（用于帧率限制）\n     */\n    public static updateFrame(): boolean {\n        // 初始化：记录第一帧时间\n        if (!this.isInitialized) {\n            this.lastFrameTime = performance.now();\n            this.isInitialized = true;\n            return true;\n        }\n\n        // 1. 计算当前帧的原始时间间隔（毫秒转秒）\n        const currentTime = performance.now();\n        const rawDeltaMs = currentTime - this.lastFrameTime;\n        this.unscaledDeltaTime = rawDeltaMs / 1000; // 原始帧间隔（不受 timeScale 影响）\n\n        // 2. 帧率限制逻辑：若设置 maxFps，判断是否达到目标帧间隔\n        if (this.maxFps !== null) {\n            const targetFrameMs = 1000 / this.maxFps; // 目标帧间隔（毫秒）\n            if (rawDeltaMs < targetFrameMs) {\n                return false; // 未达到目标间隔，不执行当前帧\n            }\n        }\n\n        // 3. 更新受 timeScale 影响的时间属性\n        this.deltaTime = this.unscaledDeltaTime * this.timeScale; // 受缩放的帧间隔\n        this.time += this.deltaTime; // 总时间（受缩放）\n        this.unscaledTime += this.unscaledDeltaTime; // 原始总时间（不受缩放）\n\n        // 4. 更新固定时间步长累计（用于物理/固定更新）\n        this.updateFixedTime();\n\n        // 5. 记录当前时间，为下一帧做准备\n        this.lastFrameTime = currentTime;\n        return true; // 允许执行当前帧逻辑\n    }\n\n    /**\n     * 固定时间步长更新（用于物理引擎、固定频率逻辑，对应 Unity FixedUpdate）\n     * @param fixedUpdateCallback 固定更新回调（每累计一个 fixedDeltaTime 执行一次）\n     */\n    public static updateFixedTime(fixedUpdateCallback?: () => void): void {\n        // 累计原始时间（不受 timeScale 影响，确保物理更新稳定）\n        const totalFixedDelta = this.unscaledDeltaTime + this.fixedTimeRemainder;\n        const fixedStep = this.fixedDeltaTime;\n\n        // 计算需要执行多少次固定更新（例如：累计 0.05 秒，固定步长 0.02 秒 → 执行 2 次，余数 0.01 秒）\n        const fixedUpdateCount = Math.floor(totalFixedDelta / fixedStep);\n        this.fixedTimeRemainder = totalFixedDelta % fixedStep;\n\n        // 执行固定更新回调\n        for (let i = 0; i < fixedUpdateCount; i++) {\n            this.fixedTime += fixedStep; // 更新固定时间累计\n            fixedUpdateCallback?.();\n        }\n    }\n\n    /**\n     * 重置时间状态（用于游戏重启、场景切换）\n     */\n    public static reset(): void {\n        this.deltaTime = 0;\n        this.unscaledDeltaTime = 0;\n        this.time = 0;\n        this.unscaledTime = 0;\n        this.fixedTime = 0;\n        this.fixedTimeRemainder = 0;\n        this.lastFrameTime = performance.now();\n    }\n\n    /**\n     * 暂停游戏（等价于设置 timeScale = 0）\n     */\n    public static pause(): void {\n        this.timeScale = 0;\n    }\n\n    /**\n     * 恢复游戏正常速度（等价于设置 timeScale = 1）\n     */\n    public static resume(): void {\n        this.timeScale = 1;\n    }\n}","import { GameObject } from \"./GameObject\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Quaternion } from \"../Math/Quaternion\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\n\nexport class Transform {\n    public readonly gameObject: GameObject;\n    public readonly children: Array<Transform>;\n\n    private _parent: Transform | null = null;\n    private _tempPos: Vector3;\n    private _tempRot: Quaternion;\n    private _tempScale: Vector3;\n\n    // 缓存矩阵以提高性能\n    private _selfMatrix: Matrix4x4 | null = null;\n    private _localToWorldNormalMatrix: Matrix4x4 | null = null;\n    private _localToWorldMatrix: Matrix4x4 | null = null;\n    private _worldToLocalMatrix: Matrix4x4 | null = null;\n\n    // 脏标记，用于跟踪变换是否已更改\n    private _isDirty: boolean = true;\n\n    // 方向向量缓存\n    private _forward: Vector3 | null = null;\n    private _up: Vector3 | null = null;\n    private _right: Vector3 | null = null;\n\n    constructor(gameObject: GameObject) {\n        this.gameObject = gameObject;\n        this.children = new Array<Transform>();\n        this._parent = null;\n        this._tempPos = Vector3.ZERO;\n        this._tempRot = Quaternion.identity;\n        this._tempScale = Vector3.ONE;\n    }\n\n    /**\n     * 标记当前变换为脏，需要重新计算矩阵\n     * 同时标记所有子节点为脏\n     */\n    private setDirty(): void {\n        this._isDirty = true;\n        this._selfMatrix = null;\n        this._localToWorldMatrix = null;\n        this._worldToLocalMatrix = null;\n        this._localToWorldNormalMatrix = null;\n\n        // 通知所有组件变换发生了变化\n        const components = this.gameObject.getAllComponents();\n        for (const component of components) {\n            if (typeof (component as any).onTransformChanged === 'function') {\n                (component as any).onTransformChanged();\n            }\n        }\n\n        // 递归标记所有子节点为脏\n        for (const child of this.children) {\n            child.setDirty();\n        }\n    }\n\n    public get selfMatrix(): Matrix4x4 {\n        if (this._selfMatrix === null || this._isDirty) {\n            this._selfMatrix = Matrix4x4.getTRSMatrix(this._tempPos, this._tempRot, this._tempScale);\n            // selfMatrix是最基础的矩阵，当它更新后，所有矩阵都应该被认为是干净的\n            // 注意：localToWorldMatrix和worldToLocalMatrix的计算会自动处理\n            this._isDirty = false;\n        }\n        return this._selfMatrix.clone();\n    }\n\n    public get localToWorldNormalMatrix(): Matrix4x4 {\n        if (this._localToWorldNormalMatrix === null || this._isDirty) {\n            this._localToWorldNormalMatrix = this.localToWorldMatrix.invert().transpose();\n        }\n        return this._localToWorldNormalMatrix.clone();\n    }\n\n    public get localToWorldMatrix(): Matrix4x4 {\n        if (this._localToWorldMatrix === null || this._isDirty) {\n            const p = this.parent != null ? this.parent.localToWorldMatrix : Matrix4x4.identity;\n            this._localToWorldMatrix = p.multiply(this.selfMatrix);\n            // 当selfMatrix被访问时，_isDirty已经被设置为false\n        }\n        return this._localToWorldMatrix.clone();\n    }\n\n    public get worldToLocalMatrix(): Matrix4x4 {\n        if (this._worldToLocalMatrix === null || this._isDirty) {\n            const p = this.parent != null ? this.parent.worldToLocalMatrix : Matrix4x4.identity;\n            this._worldToLocalMatrix = this.selfMatrix.invert().multiply(p);\n            // 当selfMatrix被访问时，_isDirty已经被设置为false\n        }\n        return this._worldToLocalMatrix.clone();\n    }\n\n    public get forward(): Vector3 {\n        // 使用缓存优化，避免重复计算和创建临时对象\n        if (this._isDirty || !this._forward) {\n            this._forward = this.convertToWorldSpace(Vector3.FORWARD, 0);\n        }\n        return this._forward.clone();\n    }\n\n    public get up(): Vector3 {\n        // 使用缓存优化，避免重复计算和创建临时对象\n        if (this._isDirty || !this._up) {\n            this._up = this.convertToWorldSpace(Vector3.UP, 0);\n        }\n        return this._up.clone();\n    }\n\n    public get right(): Vector3 {\n        // 使用缓存优化，避免重复计算和创建临时对象\n        if (this._isDirty || !this._right) {\n            this._right = this.convertToWorldSpace(Vector3.RIGHT, 0);\n        }\n        return this._right.clone();\n    }\n\n    public get position(): Vector3 {\n        return this._tempPos.clone();\n    }\n\n    public set position(pos: Vector3) {\n        if (pos.equals(this._tempPos)) return;\n        this._tempPos = pos;\n        this.setDirty();\n    }\n\n    public get worldPosition(): Vector3 {\n        return this.localToWorldMatrix.getTranslate();\n    }\n\n    public get rotation(): Quaternion {\n        return this._tempRot.clone();\n    }\n\n    public set rotation(q: Quaternion) {\n        if (q.equals(this._tempRot)) return;\n        this._tempRot = q;\n        this.setDirty();\n    }\n\n    public get worldRotation(): Quaternion {\n        return this.localToWorldMatrix.getRotate();\n    }\n\n    public get scale(): Vector3 {\n        return this._tempScale.clone();\n    }\n\n    public set scale(s: Vector3) {\n        if (s.equals(this._tempScale)) return;\n        this._tempScale = s;\n        this.setDirty();\n    }\n\n    public get worldScale(): Vector3 {\n        return this.localToWorldMatrix.getScale();\n    }\n\n    public get parent(): Transform | null {\n        return this._parent;\n    }\n\n    public setParent(parent: Transform, worldPositionStays: boolean = true) {\n        if (parent != null && parent != this && parent != this.parent) {\n            //防止出现：父节点是当前节点的子节点，将子节的设置为自己的父节点，会死循环\n            if (parent.hasParent(this)) {\n                console.error(\"Failed to set parent, this node is the parent node's parent.\");\n                return;\n            }\n\n            //如果当前节点有父节点，要先移除旧的\n            if (this.parent != null) {\n                this.parent.removeChild(this, worldPositionStays);\n            }\n\n            parent.addChild(this, worldPositionStays);\n        }\n        else if (parent == null && this.parent != null) {\n            this.parent.removeChild(this, worldPositionStays);\n        }\n\n        // 设置脏标记，因为父节点关系改变会影响变换矩阵\n        this.setDirty();\n    }\n\n    //节点p是否是当前节点的上级\n    public hasParent(p: Transform): boolean {\n        if (this.parent == null)\n            return false;\n        else if (this.parent == p)\n            return true;\n        else\n            return this.parent.hasParent(p);\n    }\n\n    private addChild(child: Transform, worldPositionStays: boolean = true): boolean {\n        if (child != null && child != this && !this.children.includes(child)) {\n            //防止出现：child节点是当前节点的父节点，将父节的设置为自己的子节点，会死循环\n            if (this.hasParent(child)) {\n                console.error(\"Failed to add child, this node is the child node's child.\");\n                return false;\n            }\n\n            //如果子节点有旧的父节点，要先移除\n            if (child.parent != null) {\n                child.parent.removeChild(child, worldPositionStays);\n            }\n\n            this.children.push(child);\n            child._parent = this;\n\n            if (worldPositionStays) {\n                //保留原世界坐标位置，先朝父节点的变换的反方向移动，然后再添加进去，就能保持世界坐标不变\n                //即变换到父节点的逆矩阵里\n                var m = this.worldToLocalMatrix.multiply(child.selfMatrix);\n                child._tempPos = m.getTranslate();\n                child._tempRot = m.getRotate();\n                child._tempScale = m.getScale();\n            }\n\n            // 设置脏标记，因为父节点关系改变会影响变换矩阵\n            child.setDirty();\n\n            return true;\n        }\n        return false;\n    }\n\n    private removeChild(child: Transform, worldPositionStays: boolean = true): boolean {\n        var index = this.children.indexOf(child, 0);\n\n        if (index > -1) {\n\n            if (worldPositionStays) {\n                //保留世界坐标，直接将本地坐标等同于当前世界坐标即可\n                var m = this.localToWorldMatrix.multiply(child.selfMatrix);\n                child._tempPos = m.getTranslate();\n                child._tempRot = m.getRotate();\n                child._tempScale = m.getScale();\n            }\n\n            this.children.splice(index, 1);\n            child._parent = null;\n            // 设置脏标记，因为父节点关系改变会影响变换矩阵\n            child.setDirty();\n            return true;\n        }\n        return false;\n    }\n\n    public convertToNodeSpace(v: Vector3, w: number = 1): Vector3 {\n        /*\n         *将某个坐标转到自己的局部空间，例如当前的局部坐标原点在世界坐标的（1，1）处\n         *点p在世界坐标（2，1）处，那么将点p相对于当前局部坐标系的位置就是（2，1）-（1，1）= （1， 0）\n         *即将点p反向变换当前的矩阵 \n         */\n        return this.worldToLocalMatrix.multiplyVector4(new Vector4(v, w)).vector3;\n    }\n\n    public convertToWorldSpace(v: Vector3, w: number = 1): Vector3 {\n        return this.localToWorldMatrix.multiplyVector4(new Vector4(v, w)).vector3;\n    }\n\n    public destroy(destroyChildren: boolean = true) {\n        if (destroyChildren) {\n            this.children.forEach(child => {\n                child.destroy(destroyChildren);\n            });\n        }\n        else {\n            this.children.forEach(child => {\n                this.removeChild(child);\n            });\n        }\n    }\n}","import { Group, Tween } from \"@tweenjs/tween.js\";\n\nexport class TweenManager {\n    private static tweenGroup: Group = new Group();\n\n    public static add(tween: Tween) {\n        // 保存用户原有的 onComplete 回调\n        const originalOnComplete = (tween as any)._onCompleteCallback;\n\n        // 设置新的 onComplete 回调\n        tween.onComplete(() => {\n            // 先调用用户原有的回调（如果存在）\n            if (originalOnComplete) {\n                originalOnComplete();\n            }\n            // 然后从管理器中移除\n            this.remove(tween);\n            console.log(\"移除\");\n        });\n\n        this.tweenGroup.add(tween);\n    }\n\n    public static update(time?: number) {\n        this.tweenGroup.update(time);\n    }\n\n    public static remove(tween: Tween) {\n        this.tweenGroup.remove(tween);\n    }\n}\n","export abstract class UObject {\n    public abstract onDestroy(): void;\n\n    public Destroy(): void {\n        this.onDestroy();\n    }\n\n    public static Destroy(obj: UObject): void {\n        obj.Destroy();\n    }\n}","import { GameObject } from \"../Core/GameObject\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Bounds } from \"./Bounds\";\n\n// BVH节点类\nclass BVHNode {\n    public bounds: Bounds;\n    public gameObject: GameObject | null = null;\n    public left: BVHNode | null = null;\n    public right: BVHNode | null = null;\n    public isLeaf: boolean = false;\n\n    constructor(bounds: Bounds) {\n        this.bounds = bounds;\n    }\n}\n\n// BVH树类\nexport class BVHTree {\n    private root: BVHNode | null = null;\n    private maxObjectsPerNode: number = 8; // 每个节点最大对象数量\n    private maxDepth: number = 16; // 最大深度\n\n    /**\n     * 构建BVH树\n     */\n    public build(sceneObjects: GameObject[]): void {\n        if (sceneObjects.length === 0) {\n            this.root = null;\n            return;\n        }\n\n        // 计算所有对象的包围盒\n        const boundsList: Bounds[] = [];\n        for (const obj of sceneObjects) {\n            const bounds = this.calculateObjectBounds(obj);\n            if (bounds) {\n                boundsList.push(bounds);\n            }\n        }\n\n        // 构建BVH树\n        this.root = this.buildRecursive(boundsList, sceneObjects, 0);\n    }\n\n    /**\n     * 递归构建BVH节点\n     */\n    private buildRecursive(\n        boundsList: Bounds[], \n        objects: GameObject[], \n        depth: number\n    ): BVHNode {\n        // 终止条件：对象数量少或达到最大深度\n        if (objects.length <= this.maxObjectsPerNode || depth >= this.maxDepth) {\n            const node = new BVHNode(this.calculateCombinedBounds(boundsList));\n            node.gameObject = objects.length === 1 ? objects[0] : null;\n            node.isLeaf = true;\n            return node;\n        }\n\n        // 选择分割轴（选择方差最大的轴）\n        const axis = this.selectSplitAxis(boundsList);\n        \n        // 按选中轴排序对象\n        const sorted = this.sortObjectsByAxis(objects, boundsList, axis);\n        \n        // 分割点（中位数分割）\n        const mid = Math.floor(objects.length / 2);\n        \n        const leftBounds = boundsList.slice(0, mid);\n        const rightBounds = boundsList.slice(mid);\n        const leftObjects = objects.slice(0, mid);\n        const rightObjects = objects.slice(mid);\n\n        // 创建内部节点\n        const node = new BVHNode(this.calculateCombinedBounds(boundsList));\n        node.left = this.buildRecursive(leftBounds, leftObjects, depth + 1);\n        node.right = this.buildRecursive(rightBounds, rightObjects, depth + 1);\n        node.isLeaf = false;\n\n        return node;\n    }\n\n    /**\n     * 射线检测 - 找到所有相交对象\n     */\n    public raycast(rayOrigin: Vector3, rayDirection: Vector3, maxDistance: number = Infinity): GameObject[] {\n        const results: GameObject[] = [];\n        if (this.root) {\n            this.raycastRecursive(this.root, rayOrigin, rayDirection, maxDistance, results);\n        }\n        return results;\n    }\n\n    /**\n     * 递归射线检测\n     */\n    private raycastRecursive(\n        node: BVHNode, \n        rayOrigin: Vector3, \n        rayDirection: Vector3, \n        maxDistance: number, \n        results: GameObject[]\n    ): void {\n        if (!node.bounds.intersectsRay(rayOrigin, rayDirection, maxDistance)) {\n            return;\n        }\n\n        if (node.isLeaf) {\n            if (node.gameObject) {\n                results.push(node.gameObject);\n            }\n            return;\n        }\n\n        if (node.left) {\n            this.raycastRecursive(node.left, rayOrigin, rayDirection, maxDistance, results);\n        }\n        if (node.right) {\n            this.raycastRecursive(node.right, rayOrigin, rayDirection, maxDistance, results);\n        }\n    }\n\n    /**\n     * 计算对象包围盒\n     */\n    public calculateObjectBounds(obj: GameObject): Bounds | null {\n        // 这里需要实现具体的包围盒计算逻辑\n        // 可以根据对象的变换和渲染组件来计算实际包围盒\n        const transform = obj.transform;\n        if (!transform) return null;\n\n        const position = transform.worldPosition;\n        const scale = transform.worldScale;\n        \n        // 简单实现：假设每个对象都是单位立方体，根据变换缩放和平移\n        const halfSize = new Vector3(0.5 * scale.x, 0.5 * scale.y, 0.5 * scale.z);\n        return new Bounds(\n            position.subtract(halfSize),\n            position.add(halfSize)\n        );\n    }\n\n    /**\n     * 计算多个包围盒的合并包围盒\n     */\n    private calculateCombinedBounds(boundsList: Bounds[]): Bounds {\n        if (boundsList.length === 0) {\n            return new Bounds(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n        }\n\n        let min = boundsList[0].min.clone();\n        let max = boundsList[0].max.clone();\n\n        for (let i = 1; i < boundsList.length; i++) {\n            min = Vector3.min(min, boundsList[i].min);\n            max = Vector3.max(max, boundsList[i].max);\n        }\n\n        return new Bounds(min, max);\n    }\n\n    /**\n     * 选择最佳分割轴\n     */\n    private selectSplitAxis(boundsList: Bounds[]): number {\n        // 计算每个轴的方差，选择方差最大的轴\n        const variances = this.calculateAxisVariances(boundsList);\n        let bestAxis = 0;\n        let maxVariance = variances[0];\n\n        for (let i = 1; i < 3; i++) {\n            if (variances[i] > maxVariance) {\n                maxVariance = variances[i];\n                bestAxis = i;\n            }\n        }\n\n        return bestAxis;\n    }\n\n    /**\n     * 计算各轴方差\n     */\n    private calculateAxisVariances(boundsList: Bounds[]): number[] {\n        const centers: Vector3[] = [];\n        for (const bounds of boundsList) {\n            centers.push(bounds.center);\n        }\n\n        const variances = [0, 0, 0];\n        for (let axis = 0; axis < 3; axis++) {\n            const mean = centers.reduce((sum, center) => sum + center.getComponent(axis), 0) / centers.length;\n            variances[axis] = centers.reduce((sum, center) => {\n                const diff = center.getComponent(axis) - mean;\n                return sum + diff * diff;\n            }, 0) / centers.length;\n        }\n\n        return variances;\n    }\n\n    /**\n     * 按指定轴排序对象\n     */\n    private sortObjectsByAxis(\n        objects: GameObject[], \n        boundsList: Bounds[], \n        axis: number\n    ): GameObject[] {\n        const sortedIndices = boundsList\n            .map((bounds, index) => ({\n                index,\n                center: bounds.center.getComponent(axis)\n            }))\n            .sort((a, b) => a.center - b.center)\n            .map(item => item.index);\n\n        return sortedIndices.map(index => objects[index]);\n    }\n}","import { Vector3 } from \"./Vector3\";\n\n/**\n * 轴对齐包围盒 (AABB)\n * 最简单的包围盒，边与坐标轴平行\n */\nexport class Bounds {\n    public readonly min: Vector3;\n    public readonly max: Vector3;\n    public readonly center: Vector3;\n    public readonly halfExtents: Vector3;\n    // 定义8个顶点\n    public readonly vertices: Vector3[];\n    // 定义12条边的顶点索引对 (每个面4条边，共6个面，但共享边只画一次)\n    public readonly edges = [\n        [0, 1], [1, 2], [2, 3], [3, 0], // 后面\n        [4, 5], [5, 6], [6, 7], [7, 4], // 前面\n        [0, 4], [1, 5], [2, 6], [3, 7]  // 连接前后的边\n    ];\n\n    constructor(min: Vector3 = Vector3.ZERO, max: Vector3 = Vector3.ZERO) {\n        this.min = min;\n        this.max = max;\n\n        // 计算中心点\n        this.center = new Vector3();\n        this.center.x = (this.min.x + this.max.x) / 2;\n        this.center.y = (this.min.y + this.max.y) / 2;\n        this.center.z = (this.min.z + this.max.z) / 2;\n\n        // 计算半长（从中心到各边的距离）\n        this.halfExtents = new Vector3();\n        this.halfExtents.x = (this.max.x - this.min.x) / 2;\n        this.halfExtents.y = (this.max.y - this.min.y) / 2;\n        this.halfExtents.z = (this.max.z - this.min.z) / 2;\n\n        // 计算8个顶点\n        this.vertices = new Array<Vector3>(8);\n        this.vertices[0] = new Vector3(this.min.x, this.min.y, this.min.z); // 左下后\n        this.vertices[1] = new Vector3(this.max.x, this.min.y, this.min.z); // 右下后\n        this.vertices[2] = new Vector3(this.max.x, this.max.y, this.min.z); // 右上后\n        this.vertices[3] = new Vector3(this.min.x, this.max.y, this.min.z); // 左上后\n        this.vertices[4] = new Vector3(this.min.x, this.min.y, this.max.z); // 左下前\n        this.vertices[5] = new Vector3(this.max.x, this.min.y, this.max.z); // 右下前\n        this.vertices[6] = new Vector3(this.max.x, this.max.y, this.max.z); // 右上前\n        this.vertices[7] = new Vector3(this.min.x, this.max.y, this.max.z); // 左上前\n    }\n\n    /**\n     * 射线与包围盒相交检测\n     */\n    public intersectsRay(rayOrigin: Vector3, rayDirection: Vector3, maxDistance: number): boolean {\n        // 使用slab方法进行射线与AABB相交检测\n        let tmin = 0;\n        let tmax = maxDistance;\n\n        for (let i = 0; i < 3; i++) {\n            const invD = 1.0 / rayDirection.getComponent(i);\n            let t0 = (this.min.getComponent(i) - rayOrigin.getComponent(i)) * invD;\n            let t1 = (this.max.getComponent(i) - rayOrigin.getComponent(i)) * invD;\n\n            if (invD < 0) {\n                [t0, t1] = [t1, t0];\n            }\n\n            tmin = Math.max(tmin, t0);\n            tmax = Math.min(tmax, t1);\n\n            if (tmax <= tmin) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 计算射线与包围盒的相交距离\n     */\n    public rayIntersectDistance(rayOrigin: Vector3, rayDirection: Vector3): number {\n        // 简化的相交距离计算\n        const center = this.center;\n        const toCenter = center.subtract(rayOrigin);\n        return toCenter.dot(rayDirection);\n    }\n\n    // /**\n    //  * 获取包围盒在指定方向上的极值顶点\n    //  * @param bounds 包围盒\n    //  * @param direction 方向向量\n    //  * @param positive 是否获取正方向的极值顶点\n    //  * @returns 极值顶点\n    //  */\n    // public getExtremeVertex(direction: Vector3, positive: boolean): Vector3 {\n    //     // 创建一个新的顶点用于计算\n    //     const vertex = new Vector3();\n        \n    //     // 对于每个轴，根据方向向量的分量符号选择min或max\n    //     vertex.x = direction.x > 0 === positive ? this.max.x : this.min.x;\n    //     vertex.y = direction.y > 0 === positive ? this.max.y : this.min.y;\n    //     vertex.z = direction.z > 0 === positive ? this.max.z : this.min.z;\n        \n    //     return vertex;\n    // }\n\n    public static fromPoints(points: Vector3[]): Bounds {\n        if (points.length === 0) return new Bounds();\n\n        let min = new Vector3(points[0].x, points[0].y, points[0].z);\n        let max = new Vector3(points[0].x, points[0].y, points[0].z);\n\n        for (const p of points) {\n            min.x = Math.min(min.x, p.x);\n            min.y = Math.min(min.y, p.y);\n            min.z = Math.min(min.z, p.z);\n\n            max.x = Math.max(max.x, p.x);\n            max.y = Math.max(max.y, p.y);\n            max.z = Math.max(max.z, p.z);\n        }\n\n        // 假设Bounds有min和max属性\n        const bounds = new Bounds(min, max);\n        return bounds;\n    }\n}\n\n/**\n * 球体包围盒\n * 用球心和半径表示的简化包围体\n */\nclass Sphere {\n    center: Vector3;\n    radius: number;\n\n    constructor(center: Vector3, radius: number) {\n        this.center = center;\n        this.radius = radius;\n    }\n\n    /**\n     * 从顶点列表生成球体包围盒\n     * 算法思路：先计算所有顶点的中心点，再找到离中心点最远的顶点作为半径\n     * @param vertices 三维顶点数组\n     * @returns 生成的球体\n     */\n    static fromVertices(vertices: Vector3[]): Sphere {\n        if (vertices.length === 0) {\n            throw new Error(\"顶点数组不能为空\");\n        }\n\n        // 1. 计算中心点（平均值）\n        const center = new Vector3();\n        for (const v of vertices) {\n            center.x += v.x;\n            center.y += v.y;\n            center.z += v.z;\n        }\n        center.x /= vertices.length;\n        center.y /= vertices.length;\n        center.z /= vertices.length;\n\n        // 2. 找到离中心点最远的顶点，其距离即为半径\n        let maxDistanceSquared = 0;\n        for (const v of vertices) {\n            const dx = v.x - center.x;\n            const dy = v.y - center.y;\n            const dz = v.z - center.z;\n            const distanceSquared = dx * dx + dy * dy + dz * dz;\n\n            if (distanceSquared > maxDistanceSquared) {\n                maxDistanceSquared = distanceSquared;\n            }\n        }\n\n        const radius = Math.sqrt(maxDistanceSquared);\n        return new Sphere(center, radius);\n    }\n\n    /**\n     * 从AABB生成球体包围盒\n     * @param aabb 轴对齐包围盒\n     * @returns 生成的球体\n     */\n    static fromAABB(aabb: Bounds): Sphere {\n        const center = aabb.center;\n        const halfExtents = aabb.halfExtents;\n        // 半径是从中心到角落的距离\n        const radius = halfExtents.magnitude;\n        return new Sphere(center, radius);\n    }\n}","import { BlendOp } from \"../Renderer/RendererDefine\";\n\nexport class Color {\n    // public static readonly WHITE = Object.freeze(new Color(1, 1, 1, 1)) as Readonly<Color>;\n    public static get WHITE() { return new Color(1, 1, 1, 1); }\n    public static get BLACK() { return new Color(0, 0, 0, 1); }\n    public static get GRAY() { return new Color(0.5, 0.5, 0.5, 1); }\n    public static get RED() { return new Color(1, 0, 0, 1); }\n    public static get GREEN() { return new Color(0, 1, 0, 1); }\n    public static get BLUE() { return new Color(0, 0, 1, 1); }\n    public static get YELLOW() { return new Color(1, 1, 0, 1); }\n    public static get CYAN() { return new Color(0, 1, 1, 1); }\n    public static get MAGENTA() { return new Color(1, 0, 1, 1); }\n    public static get ORANGE() { return new Color(1, 0.647, 0, 1); }\n    public static get PURPLE() { return new Color(0.502, 0, 0.502, 1); }\n    public static get BROWN() { return new Color(0.647, 0.165, 0, 1); }\n    public static get MAROON() { return new Color(0.5, 0, 0, 1); }\n    public static get CLEAR() { return new Color(0, 0, 0, 0); }\n\n    public r: number;\n    public g: number;\n    public b: number;\n    public a: number;\n\n\n    constructor(r: number, g: number, b: number, a: number = 1) {\n        this.r = Color.clamp01(r);\n        this.g = Color.clamp01(g);\n        this.b = Color.clamp01(b);\n        this.a = Color.clamp01(a);\n    }\n\n    public clone(): Color {\n        return new Color(this.r, this.g, this.b, this.a);\n    }\n\n    public add(c: Color): Color {\n        this.r = Color.clamp01(this.r + c.r);\n        this.g = Color.clamp01(this.g + c.g);\n        this.b = Color.clamp01(this.b + c.b);\n        this.a = Color.clamp01(this.a + c.a);\n        return this;\n    }\n\n    public subtract(c: Color): Color {\n        this.r = Color.clamp01(this.r - c.r);\n        this.g = Color.clamp01(this.g - c.g);\n        this.b = Color.clamp01(this.b - c.b);\n        this.a = Color.clamp01(this.a - c.a);\n        return this;\n    }\n\n    public multiply(c: Color): Color {\n        this.r = Color.clamp01(this.r * c.r);\n        this.g = Color.clamp01(this.g * c.g);\n        this.b = Color.clamp01(this.b * c.b);\n        this.a = Color.clamp01(this.a * c.a);\n        return this;\n    }\n\n    public multiplyScalar(scalar: number): Color {\n        this.r = Color.clamp01(this.r * scalar);\n        this.g = Color.clamp01(this.g * scalar);\n        this.b = Color.clamp01(this.b * scalar);\n        this.a = Color.clamp01(this.a * scalar);\n        return this;\n    }\n\n    public ToUint32() {\n        return ((this.a * 255) << 24) | ((this.b * 255) << 16) | ((this.g * 255) << 8) | (this.r * 255);\n    }\n\n    public static FromUint32(uint32: number) {\n        return new Color(\n            (uint32 & 0xFF) / 255,\n            ((uint32 >> 8) & 0xFF) / 255,\n            ((uint32 >> 16) & 0xFF) / 255,\n            ((uint32 >> 24) & 0xFF) / 255\n        );\n    }\n\n    public static add(c1: Color, c2: Color): Color {\n        return new Color(\n            Color.clamp01(c1.r + c2.r),\n            Color.clamp01(c1.g + c2.g),\n            Color.clamp01(c1.b + c2.b),\n            Color.clamp01(c1.a + c2.a)\n        );\n    }\n\n    public static subtract(c1: Color, c2: Color): Color {\n        return new Color(\n            Color.clamp01(c1.r - c2.r),\n            Color.clamp01(c1.g - c2.g),\n            Color.clamp01(c1.b - c2.b),\n            Color.clamp01(c1.a - c2.a)\n        );\n    }\n\n    public static multiply(c1: Color, c2: Color): Color {\n        return new Color(\n            Color.clamp01(c1.r * c2.r),\n            Color.clamp01(c1.g * c2.g),\n            Color.clamp01(c1.b * c2.b),\n            Color.clamp01(c1.a * c2.a)\n        );\n    }\n\n    public static multiplyScalar(c: Color, scalar: number): Color {\n        return new Color(\n            Color.clamp01(c.r * scalar),\n            Color.clamp01(c.g * scalar),\n            Color.clamp01(c.b * scalar),\n            Color.clamp01(c.a * scalar)\n        );\n    }\n\n    public static lerp(c1: Color, c2: Color, t: number): Color {\n        t = Color.clamp01(t);\n        return new Color(\n            Color.clamp01(c1.r + (c2.r - c1.r) * t),\n            Color.clamp01(c1.g + (c2.g - c1.g) * t),\n            Color.clamp01(c1.b + (c2.b - c1.b) * t),\n            Color.clamp01(c1.a + (c2.a - c1.a) * t)\n        );\n    }\n\n    /**\n     * 颜色混合方法\n     * 支持多种混合模式\n     */\n    // public static blendColors(dest: Color, src: Color, mode: BlendOp): Color {\n    //     // 提取目标颜色分量 (ARGB格式)\n    //     const destA = dest.a;\n    //     const destR = dest.r;\n    //     const destG = dest.g;\n    //     const destB = dest.b;\n\n    //     // 提取源颜色分量 (ARGB格式)\n    //     const srcA = src.a;\n    //     const srcR = src.r;\n    //     const srcG = src.g;\n    //     const srcB = src.b;\n\n    //     let resultA, resultR, resultG, resultB;\n\n    //     switch (mode) {\n    //         case BlendOp.AlphaBlend:\n    //             // Alpha 混合 (最常用的混合模式)\n    //             const alpha = srcA;\n    //             const invAlpha = 1 - alpha;\n\n    //             resultA = Math.min(1, destA + srcA - (destA * srcA));\n    //             resultR = srcR * alpha + destR * invAlpha;\n    //             resultG = srcG * alpha + destG * invAlpha;\n    //             resultB = srcB * alpha + destB * invAlpha;\n    //             break;\n\n    //         case BlendOp.Additive:\n    //             // 加法混合 (颜色叠加)\n    //             resultA = Math.min(1, destA + srcA);\n    //             resultR = Math.min(1, destR + srcR);\n    //             resultG = Math.min(1, destG + srcG);\n    //             resultB = Math.min(1, destB + srcB);\n    //             break;\n\n    //         case BlendOp.Multiply:\n    //             // 乘法混合 (颜色相乘)\n    //             resultA = Math.min(1, destA);\n    //             resultR = destR * srcR;\n    //             resultG = destG * srcG;\n    //             resultB = destB * srcB;\n    //             break;\n\n    //         case BlendOp.Off:\n    //         default:\n    //             // 直接替换\n    //             return src.clone();\n    //     }\n\n    //     // 组合颜色分量\n    //     return new Color(resultR, resultG, resultB, resultA);\n    // }\n\n    private static clamp01(value: number): number {\n        return Math.max(0, Math.min(1, value));\n    }\n}","import { Vector4 } from \"./Vector4\";\nimport { Vector3 } from \"./Vector3\";\nimport { Quaternion } from \"./Quaternion\";\n\nexport class Matrix4x4 {\n\n    public matrix: Array<Array<number>> = new Array<Array<number>>();\n\n    public constructor();\n    public constructor(column0: Vector4, column1: Vector4, column2: Vector4, column3: Vector4);\n    public constructor() {\n        if (arguments.length == 4) {\n            for (let i = 0; i < 4; i++) {\n                let v = arguments[i] as Vector4;\n                this.matrix[i] = new Array<number>(v.x, v.y, v.z, v.w);\n            }\n        }\n        else {\n            for (let i = 0; i < 4; i++) {\n                this.matrix[i] = new Array<number>(0, 0, 0, 0);\n            }\n        }\n    }\n\n    /**\n     * \n     * @param index 行\n     */\n    public getRow(index: number): Vector4 {\n        var c = this.matrix[index];\n        return new Vector4(c[0], c[1], c[2], c[3]);\n    }\n\n    /**\n     * \n     * @param index 列\n     */\n    public getColumn(index: number): Vector4 {\n        return new Vector4(this.matrix[0][index], this.matrix[1][index], this.matrix[2][index], this.matrix[3][index]);\n    }\n\n    public SetRow(index: number, row: Vector4) {\n        this.matrix[index][0] = row.x;\n        this.matrix[index][1] = row.y;\n        this.matrix[index][2] = row.z;\n        this.matrix[index][3] = row.w;\n    }\n\n    public SetColumn(index: number, column: Vector4) {\n        this.matrix[0][index] = column.x;\n        this.matrix[1][index] = column.y;\n        this.matrix[2][index] = column.z;\n        this.matrix[3][index] = column.w;\n    }\n\n    public multiply(m: Matrix4x4): Matrix4x4 {\n        let lhs = this.matrix;\n        let rhs = m.matrix;\n        let matrix = new Matrix4x4().matrix;\n\n        matrix[0][0] = lhs[0][0] * rhs[0][0] + lhs[0][1] * rhs[1][0] + lhs[0][2] * rhs[2][0] + lhs[0][3] * rhs[3][0];\n        matrix[0][1] = lhs[0][0] * rhs[0][1] + lhs[0][1] * rhs[1][1] + lhs[0][2] * rhs[2][1] + lhs[0][3] * rhs[3][1];\n        matrix[0][2] = lhs[0][0] * rhs[0][2] + lhs[0][1] * rhs[1][2] + lhs[0][2] * rhs[2][2] + lhs[0][3] * rhs[3][2];\n        matrix[0][3] = lhs[0][0] * rhs[0][3] + lhs[0][1] * rhs[1][3] + lhs[0][2] * rhs[2][3] + lhs[0][3] * rhs[3][3];\n        matrix[1][0] = lhs[1][0] * rhs[0][0] + lhs[1][1] * rhs[1][0] + lhs[1][2] * rhs[2][0] + lhs[1][3] * rhs[3][0];\n        matrix[1][1] = lhs[1][0] * rhs[0][1] + lhs[1][1] * rhs[1][1] + lhs[1][2] * rhs[2][1] + lhs[1][3] * rhs[3][1];\n        matrix[1][2] = lhs[1][0] * rhs[0][2] + lhs[1][1] * rhs[1][2] + lhs[1][2] * rhs[2][2] + lhs[1][3] * rhs[3][2];\n        matrix[1][3] = lhs[1][0] * rhs[0][3] + lhs[1][1] * rhs[1][3] + lhs[1][2] * rhs[2][3] + lhs[1][3] * rhs[3][3];\n        matrix[2][0] = lhs[2][0] * rhs[0][0] + lhs[2][1] * rhs[1][0] + lhs[2][2] * rhs[2][0] + lhs[2][3] * rhs[3][0];\n        matrix[2][1] = lhs[2][0] * rhs[0][1] + lhs[2][1] * rhs[1][1] + lhs[2][2] * rhs[2][1] + lhs[2][3] * rhs[3][1];\n        matrix[2][2] = lhs[2][0] * rhs[0][2] + lhs[2][1] * rhs[1][2] + lhs[2][2] * rhs[2][2] + lhs[2][3] * rhs[3][2];\n        matrix[2][3] = lhs[2][0] * rhs[0][3] + lhs[2][1] * rhs[1][3] + lhs[2][2] * rhs[2][3] + lhs[2][3] * rhs[3][3];\n        matrix[3][0] = lhs[3][0] * rhs[0][0] + lhs[3][1] * rhs[1][0] + lhs[3][2] * rhs[2][0] + lhs[3][3] * rhs[3][0];\n        matrix[3][1] = lhs[3][0] * rhs[0][1] + lhs[3][1] * rhs[1][1] + lhs[3][2] * rhs[2][1] + lhs[3][3] * rhs[3][1];\n        matrix[3][2] = lhs[3][0] * rhs[0][2] + lhs[3][1] * rhs[1][2] + lhs[3][2] * rhs[2][2] + lhs[3][3] * rhs[3][2];\n        matrix[3][3] = lhs[3][0] * rhs[0][3] + lhs[3][1] * rhs[1][3] + lhs[3][2] * rhs[2][3] + lhs[3][3] * rhs[3][3];\n\n        this.matrix = matrix;\n        return this;\n    }\n\n    public multiplyVector3(v: Vector3): Vector3 {\n        let res = new Vector3();\n        let m = this.matrix;\n\n        res.x = m[0][0] * v.x + m[0][1] * v.y + m[0][2] * v.z;\n        res.y = m[1][0] * v.x + m[1][1] * v.y + m[1][2] * v.z;\n        res.z = m[2][0] * v.x + m[2][1] * v.y + m[2][2] * v.z;\n\n        return res;\n    }\n\n    // 当w = 1时，齐次坐标(x, y, z, 1)表示 3D 空间中的点(x, y, z)\n    // 当w = 0时，齐次坐标(x, y, z, 0)表示 3D 空间中的方向向量（无位置信息）\n    public multiplyVector4(v: Vector4): Vector4 {\n        let res = new Vector4();\n        let m = this.matrix;\n\n        res.x = m[0][0] * v.x + m[0][1] * v.y + m[0][2] * v.z + m[0][3] * v.w;\n        res.y = m[1][0] * v.x + m[1][1] * v.y + m[1][2] * v.z + m[1][3] * v.w;\n        res.z = m[2][0] * v.x + m[2][1] * v.y + m[2][2] * v.z + m[2][3] * v.w;\n        res.w = m[3][0] * v.x + m[3][1] * v.y + m[3][2] * v.z + m[3][3] * v.w;\n\n        return res;\n    }\n\n    public getTranslate(): Vector3 {\n        let m = this.matrix;\n        return new Vector3(m[0][3], m[1][3], m[2][3]);\n    }\n\n    public setTranslate(v: Vector3) {\n        let m = this.matrix;\n        m[0][3] = v.x;\n        m[1][3] = v.y;\n        m[2][3] = v.z;\n    }\n\n    // public getRotate(): Vector3 {\n    //     let mat = this.matrix;\n\n    //     let x = Math.atan2(mat[1][2], mat[2][2]);\n    //     let y = Math.atan2(-mat[0][2], Math.sqrt(mat[1][2] * mat[1][2] + mat[2][2] * mat[2][2]));\n    //     let z = Math.atan2(mat[0][1], mat[0][0]);\n\n    //     return new Vector3(x / Math.PI * 180, y / Math.PI * 180, z / Math.PI * 180);\n    // }\n\n    public getRotate(): Quaternion {\n        //一定要获取纯净的旋转矩阵，即去除缩放倍率\n        let mat = this.getRotateMatrix().matrix;\n        let q = new Quaternion();\n\n        var trace = mat[0][0] + mat[1][1] + mat[2][2]; // I removed + 1.0f; see discussion with Ethan\n        var s = 0;\n\n        if (trace > 0) {// I changed M_EPSILON to 0\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            q.w = 0.25 / s;\n            q.x = (mat[2][1] - mat[1][2]) * s;\n            q.y = (mat[0][2] - mat[2][0]) * s;\n            q.z = (mat[1][0] - mat[0][1]) * s;\n        } else {\n            if (mat[0][0] > mat[1][1] && mat[0][0] > mat[2][2]) {\n                s = 2.0 * Math.sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]);\n                q.w = (mat[2][1] - mat[1][2]) / s;\n                q.x = 0.25 * s;\n                q.y = (mat[0][1] + mat[1][0]) / s;\n                q.z = (mat[0][2] + mat[2][0]) / s;\n            } else if (mat[1][1] > mat[2][2]) {\n                s = 2.0 * Math.sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]);\n                q.w = (mat[0][2] - mat[2][0]) / s;\n                q.x = (mat[0][1] + mat[1][0]) / s;\n                q.y = 0.25 * s;\n                q.z = (mat[1][2] + mat[2][1]) / s;\n            } else {\n                s = 2.0 * Math.sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]);\n                q.w = (mat[1][0] - mat[0][1]) / s;\n                q.x = (mat[0][2] + mat[2][0]) / s;\n                q.y = (mat[1][2] + mat[2][1]) / s;\n                q.z = 0.25 * s;\n            }\n        }\n\n        return q;\n    }\n\n    public getRotateMatrix(): Matrix4x4 {\n        //https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js\n        //因为旋转矩阵比较特殊，有时候要单独处理，所有拥有一个提取方法\n        //提取方式很简单，先获取缩放值，然后利用获取缩放值的原理，逆向除去缩放值，就得到纯净的旋转矩阵\n        //此方法不支持反射矩阵\n\n        var mat = new Matrix4x4();\n        var te = mat.matrix;\n        var me = this.matrix;\n\n        var scale = this.getScale();\n        var scaleX = 1 / scale.x;\n        var scaleY = 1 / scale.y;\n        var scaleZ = 1 / scale.z;\n\n        te[0][0] = me[0][0] * scaleX;\n        te[1][0] = me[1][0] * scaleX;\n        te[2][0] = me[2][0] * scaleX;\n        te[3][0] = 0;\n\n        te[0][1] = me[0][1] * scaleY;\n        te[1][1] = me[1][1] * scaleY;\n        te[2][1] = me[2][1] * scaleY;\n        te[3][1] = 0;\n\n        te[0][2] = me[0][2] * scaleZ;\n        te[1][2] = me[1][2] * scaleZ;\n        te[2][2] = me[2][2] * scaleZ;\n        te[3][2] = 0;\n\n        te[0][3] = 0;\n        te[1][3] = 0;\n        te[2][3] = 0;\n        te[3][3] = 1;\n\n        return mat;\n    }\n\n    public getEulerAngles(): Vector3 {\n        //https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js\n        //从旋转矩阵里获取欧拉角\n        //必须是纯净的旋转矩阵\n\n        var angle = new Vector3();\n\n        var te = this.getRotateMatrix().matrix;\n        var m11 = te[0][0], m12 = te[0][1], m13 = te[0][2];\n        var m21 = te[1][0], m22 = te[1][1], m23 = te[1][2];\n        var m31 = te[2][0], m32 = te[2][1], m33 = te[2][2];\n\n        m13 = m13 > 1 ? 1 : m13;\n        m13 = m13 < -1 ? -1 : m13;\n        angle.y = Math.asin(m13);\n\n        if (Math.abs(m13) < 0.9999999) {\n            angle.x = Math.atan2(-m23, m33);\n            angle.z = Math.atan2(-m12, m11);\n        } else {\n            angle.x = Math.atan2(m32, m22);\n            angle.z = 0;\n        }\n\n        return new Vector3(angle.x / Math.PI * 180, angle.y / Math.PI * 180, angle.z / Math.PI * 180);\n    }\n\n    public getScale(): Vector3 {\n        let m = this.matrix;\n        let v = new Vector3();\n\n        v.x = Math.sqrt(m[0][0] * m[0][0] + m[1][0] * m[1][0] + m[2][0] * m[2][0]);\n        v.y = Math.sqrt(m[0][1] * m[0][1] + m[1][1] * m[1][1] + m[2][1] * m[2][1]);\n        v.z = Math.sqrt(m[0][2] * m[0][2] + m[1][2] * m[1][2] + m[2][2] * m[2][2]);\n\n        return v;\n    }\n\n    // 转置矩阵\n    public transpose(): Matrix4x4 {\n        let m1 = this.matrix;\n        var m2 = new Matrix4x4().matrix;\n\n        m2[0][0] = m1[0][0]; m2[0][1] = m1[1][0]; m2[0][2] = m1[2][0]; m2[0][3] = m1[3][0];\n        m2[1][0] = m1[0][1]; m2[1][1] = m1[1][1]; m2[1][2] = m1[2][1]; m2[1][3] = m1[3][1];\n        m2[2][0] = m1[0][2]; m2[2][1] = m1[1][2]; m2[2][2] = m1[2][2]; m2[2][3] = m1[3][2];\n        m2[3][0] = m1[0][3]; m2[3][1] = m1[1][3]; m2[3][2] = m1[2][3]; m2[3][3] = m1[3][3];\n\n        this.matrix = m2;\n        return this;\n    }\n\n    public translate(pos: Vector3): Matrix4x4 {\n        let m = Matrix4x4.getTranslateMatrix(pos);\n        this.matrix = m.multiply(this).matrix;\n        return this;\n    }\n\n    public rotate(q: Quaternion): Matrix4x4;\n    public rotate(eulerAngles: Vector3): Matrix4x4;\n    public rotate(angle: number, axis: Vector3): Matrix4x4;\n    public rotate(): Matrix4x4 {\n        let m = new Matrix4x4();\n\n        if (arguments[0] instanceof Quaternion) {\n            m = Matrix4x4.getRotateMatrixByQuaternion(arguments[0]);\n        }\n        else if (arguments[0] instanceof Vector3) {\n            m = Matrix4x4.getRotateMatrixByEulerAngles(arguments[0]);\n        }\n        else {\n            m = Matrix4x4.getRotateMatrixByAxis(arguments[0], arguments[1]);\n        }\n\n        this.matrix = m.multiply(this).matrix;\n        return this;\n    }\n\n    public scale(s: Vector3): Matrix4x4 {\n        let m = Matrix4x4.getScaleMatrix(s);\n        this.matrix = m.multiply(this).matrix;\n        return this;\n    }\n\n    public lookAt(target: Vector3): Matrix4x4 {\n        throw new Error(\"LookRotation not implemented\");\n    }\n\n    //转换到摄影机看向的矩阵里\n    public transformToLookAtSpace(eye: Vector3, targetPoint: Vector3, up: Vector3 = Vector3.UP): Matrix4x4 {\n        //从哪里看向哪里，也可以理解为摄影机视角，即观察空间\n        //若要变换到摄影机空间，可以假设整个观察空间以摄影机位于世界坐标原点，然后将所有物体朝摄影机原先在世界空间中的位置反向移动即可\n        //在纸上画下图就清晰了\n\n        //由于默认矩阵是SRT顺序组成的变换空间，要逆向，则是TRS的顺序，即先移动后旋转\n        //1.向反方向平移\n        this.translate(new Vector3(-eye.x, -eye.y, -eye.z));\n\n        //2.向反方向旋转\n        //先获取摄影世界部坐标轴\n        var zAxis = Vector3.difference(eye, targetPoint).normalize();\n        //因为我们是右手系统，要求X，则必须z乘y\n        var xAxis = Vector3.cross(up, zAxis).normalize();\n        var yAxis = Vector3.cross(zAxis, xAxis).normalize();\n        //构建摄影机反方向旋转矩阵\n        var mat = new Matrix4x4(\n            new Vector4(xAxis),\n            new Vector4(yAxis),\n            new Vector4(zAxis),\n            new Vector4(0, 0, 0, 1));\n\n        this.matrix = mat.multiply(this).matrix;\n        return this;\n    }\n\n    public frustum(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4x4 {\n        const rl = (right - left)\n        const tb = (top - bottom)\n        const fn = (far - near)\n\n        var mat = new Matrix4x4(\n            new Vector4((near * 2) / rl, 0, (right + left) / rl, 0),\n            new Vector4(0, (near * 2) / tb, (top + bottom) / tb, 0),\n            new Vector4(0, 0, -(far + near) / fn, -(far * near * 2) / fn),\n            new Vector4(0, 0, -1, 0)\n        );\n\n        this.matrix = mat.multiply(this).matrix;\n        return this;\n    }\n\n    public orthographic(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4x4 {\n        const rl = (right - left)\n        const tb = (top - bottom)\n        const fn = (far - near)\n\n        var mat = new Matrix4x4(\n            new Vector4(2 / rl, 0, 0, -(left + right) / rl),\n            new Vector4(0, 2 / tb, 0, -(top + bottom) / tb),\n            new Vector4(0, 0, -2 / fn, -(far + near) / fn),\n            new Vector4(0, 0, 0, 1)\n        );\n\n        this.matrix = mat.multiply(this).matrix;\n        return this;\n    }\n\n    public perspective(fov: number, aspect: number, near: number, far: number): Matrix4x4 {\n        const hfov = fov / 180 * Math.PI / 2;\n        const tan = Math.tan(hfov);\n\n        var mat = new Matrix4x4(\n            new Vector4(1 / (aspect * tan), 0, 0, 0),\n            new Vector4(0, 1 / tan, 0, 0),\n            new Vector4(0, 0, -(far + near) / (far - near), -(2 * far * near) / (far - near)),\n            new Vector4(0, 0, -1, 0)\n        );\n\n        this.matrix = mat.multiply(this).matrix;\n        return this;\n    }\n\n    // 通过​​代数余子式法（Cofactor Method）​​ 来计算一个 4x4 方阵的逆矩阵\n    public invert(): Matrix4x4 {\n        var mat = this.matrix;\n\n        const a00 = mat[0][0];\n        const a01 = mat[0][1];\n        const a02 = mat[0][2];\n        const a03 = mat[0][3];\n        const a10 = mat[1][0];\n        const a11 = mat[1][1];\n        const a12 = mat[1][2];\n        const a13 = mat[1][3];\n        const a20 = mat[2][0];\n        const a21 = mat[2][1];\n        const a22 = mat[2][2];\n        const a23 = mat[2][3];\n        const a30 = mat[3][0];\n        const a31 = mat[3][1];\n        const a32 = mat[3][2];\n        const a33 = mat[3][3];\n\n        const det00 = a00 * a11 - a01 * a10\n        const det01 = a00 * a12 - a02 * a10\n        const det02 = a00 * a13 - a03 * a10\n        const det03 = a01 * a12 - a02 * a11\n        const det04 = a01 * a13 - a03 * a11\n        const det05 = a02 * a13 - a03 * a12\n        const det06 = a20 * a31 - a21 * a30\n        const det07 = a20 * a32 - a22 * a30\n        const det08 = a20 * a33 - a23 * a30\n        const det09 = a21 * a32 - a22 * a31\n        const det10 = a21 * a33 - a23 * a31\n        const det11 = a22 * a33 - a23 * a32\n\n        let det = (det00 * det11 - det01 * det10 + det02 * det09 + det03 * det08 - det04 * det07 + det05 * det06);\n\n        if (!det) {\n            console.error(\"Matrix4x4 inverse failed, determinant is 0\");\n            // return null;\n        }\n\n        det = 1.0 / det;\n\n        mat[0][0] = (a11 * det11 - a12 * det10 + a13 * det09) * det\n        mat[0][1] = (-a01 * det11 + a02 * det10 - a03 * det09) * det\n        mat[0][2] = (a31 * det05 - a32 * det04 + a33 * det03) * det\n        mat[0][3] = (-a21 * det05 + a22 * det04 - a23 * det03) * det\n        mat[1][0] = (-a10 * det11 + a12 * det08 - a13 * det07) * det\n        mat[1][1] = (a00 * det11 - a02 * det08 + a03 * det07) * det\n        mat[1][2] = (-a30 * det05 + a32 * det02 - a33 * det01) * det\n        mat[1][3] = (a20 * det05 - a22 * det02 + a23 * det01) * det\n        mat[2][0] = (a10 * det10 - a11 * det08 + a13 * det06) * det\n        mat[2][1] = (-a00 * det10 + a01 * det08 - a03 * det06) * det\n        mat[2][2] = (a30 * det04 - a31 * det02 + a33 * det00) * det\n        mat[2][3] = (-a20 * det04 + a21 * det02 - a23 * det00) * det\n        mat[3][0] = (-a10 * det09 + a11 * det07 - a12 * det06) * det\n        mat[3][1] = (a00 * det09 - a01 * det07 + a02 * det06) * det\n        mat[3][2] = (-a30 * det03 + a31 * det01 - a32 * det00) * det\n        mat[3][3] = (a20 * det03 - a21 * det01 + a22 * det00) * det\n\n        return this;\n    }\n\n    public toFloat32List(): Float32List {\n        let m = this.matrix;\n        //由于OpenGL是列序存储，所以需要转置一下矩阵\n        return new Float32Array([\n            m[0][0], m[1][0], m[2][0], m[3][0],\n            m[0][1], m[1][1], m[2][1], m[3][1],\n            m[0][2], m[1][2], m[2][2], m[3][2],\n            m[0][3], m[1][3], m[2][3], m[3][3]\n        ]);\n    }\n\n    public clone(): Matrix4x4 {\n        return new Matrix4x4(\n            this.getRow(0),\n            this.getRow(1),\n            this.getRow(2),\n            this.getRow(3),\n        );\n    }\n\n    /*\n     STATIC FUNCTIONS\n     */\n\n    public static getTRSMatrix(pos: Vector3, quat: Quaternion, scale: Vector3): Matrix4x4 {\n        let tm = Matrix4x4.getTranslateMatrix(pos);\n        let rm = Matrix4x4.getRotateMatrixByQuaternion(quat);\n        let sm = Matrix4x4.getScaleMatrix(scale);\n\n        //必须严格按照先Scale，再Rotate，再Translate的顺序，否则得到的结果肯定是不满意的\n        //例如有一个1X1正方形在原点，我们想要得到一个1X2，并且斜向45°，而且离坐标原点1个单位处\n        //如果先旋转，再缩放的话，旋转方向是对了，但是我们是将旋转后45°的正方形的Y轴拉伸2倍，得到的是一个被拉长的菱形\n        //如果先平移，再旋转的话，因为我们旋转都是绕着坐标原点的，结果自然是正方形不是自身旋转45°，而是绕着原点旋转\n        return tm.multiply(rm.multiply(sm));\n    }\n\n    public static getTranslateMatrix(pos: Vector3): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n\n        m[0][0] = 1; m[0][1] = 0; m[0][2] = 0; m[0][3] = pos.x;\n        m[1][0] = 0; m[1][1] = 1; m[1][2] = 0; m[1][3] = pos.y;\n        m[2][0] = 0; m[2][1] = 0; m[2][2] = 1; m[2][3] = pos.z;\n        m[3][0] = 0; m[3][1] = 0; m[3][2] = 0; m[3][3] = 1;\n\n        return result;\n    }\n\n    public static getRotateMatrixByQuaternion(q: Quaternion): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n\n        let num = q.x * 2;\n        let num2 = q.y * 2;\n        let num3 = q.z * 2;\n        let num4 = q.x * num;\n        let num5 = q.y * num2;\n        let num6 = q.z * num3;\n        let num7 = q.x * num2;\n        let num8 = q.x * num3;\n        let num9 = q.y * num3;\n        let num10 = q.w * num;\n        let num11 = q.w * num2;\n        let num12 = q.w * num3;\n\n        m[0][0] = 1 - (num5 + num6);\n        m[1][0] = num7 + num12;\n        m[2][0] = num8 - num11;\n        m[3][0] = 0;\n        m[0][1] = num7 - num12;\n        m[1][1] = 1 - (num4 + num6);\n        m[2][1] = num9 + num10;\n        m[3][1] = 0;\n        m[0][2] = num8 + num11;\n        m[1][2] = num9 - num10;\n        m[2][2] = 1 - (num4 + num5);\n        m[3][2] = 0;\n        m[0][3] = 0;\n        m[1][3] = 0;\n        m[2][3] = 0;\n        m[3][3] = 1;\n\n        return result;\n    }\n\n    public static getRotateMatrixByEulerAngles(e: Vector3, order: string = \"XYZ\"): Matrix4x4 {\n        //通过欧拉角获取旋转矩阵\n        //先分别获取XYZ轴上的旋转矩阵，然后合并起来\n        //注意：旋转轴的顺序先后不同，会出现不同的结果，因此必须要指定旋转顺序\n        //http://planning.cs.uiuc.edu/node102.html\n        //https://threejs.org/docs/#api/en/math/Euler.order\n        var x = Matrix4x4.getRotateMatrixByAxis(e.x, Vector3.RIGHT);\n        var y = Matrix4x4.getRotateMatrixByAxis(e.y, Vector3.UP);\n        var z = Matrix4x4.getRotateMatrixByAxis(e.z, Vector3.FORWARD);\n\n        switch (order) {\n            case \"XYZ\":\n                return z.multiply(y.multiply(x));\n            case \"XZY\":\n                return y.multiply(z.multiply(x));\n            case \"YXZ\":\n                return z.multiply(x.multiply(y));\n            case \"YZX\":\n                return x.multiply(z.multiply(y));\n            case \"ZXY\":\n                return y.multiply(x.multiply(z));\n            case \"ZYX\":\n                return x.multiply(y.multiply(z));\n            default:\n                console.error(\"Rotation order error, must be similar to 'XYZ'\");\n                return z.multiply(y.multiply(x));\n        }\n    }\n\n    public static getRotateMatrixByAxis(angle: number, axis: Vector3): Matrix4x4 {\n        var out = new Matrix4x4();\n        var m = out.matrix;\n        var x = axis.x, y = axis.y, z = axis.z;\n        var len = Math.sqrt(x * x + y * y + z * z);\n        var s = 0, c = 0, t = 0;\n\n        angle = Math.PI * angle / 180;\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n        s = Math.sin(angle);\n        c = Math.cos(angle);\n        t = 1 - c;\n        m[0][0] = x * x * t + c;\n        m[1][0] = y * x * t + z * s;\n        m[2][0] = z * x * t - y * s;\n        m[3][0] = 0;\n        m[0][1] = x * y * t - z * s;\n        m[1][1] = y * y * t + c;\n        m[2][1] = z * y * t + x * s;\n        m[3][1] = 0;\n        m[0][2] = x * z * t + y * s;\n        m[1][2] = y * z * t - x * s;\n        m[2][2] = z * z * t + c;\n        m[3][2] = 0;\n        m[0][3] = 0;\n        m[1][3] = 0;\n        m[2][3] = 0;\n        m[3][3] = 1;\n        return out;\n    }\n\n    public static getScaleMatrix(s: Vector3): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n\n        m[0][0] = s.x; m[0][1] = 0; m[0][2] = 0; m[0][3] = 0;\n        m[1][0] = 0; m[1][1] = s.y; m[1][2] = 0; m[1][3] = 0;\n        m[2][0] = 0; m[2][1] = 0; m[2][2] = s.z; m[2][3] = 0;\n        m[3][0] = 0; m[3][1] = 0; m[3][2] = 0; m[3][3] = 1;\n\n        return result;\n    }\n\n    public static perspective(fov: number, aspect: number, near: number, far: number): Matrix4x4 {\n        const fovRad = fov / 180 * Math.PI;\n        const tanHalfFov = Math.tan(fovRad / 2);\n        const mat = new Matrix4x4(\n            new Vector4(1 / (aspect * tanHalfFov), 0, 0, 0),\n            new Vector4(0, 1 / tanHalfFov, 0, 0),\n            // 深度计算符号：对于看向+Z的相机，近裁剪面在 z = near, 远裁剪面在 z = far\n            new Vector4(0, 0, (far + near) / (far - near), -2 * far * near / (far - near)),\n            new Vector4(0, 0, 1, 0)\n        );\n        return mat;\n    }\n\n    public static orthographic(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4x4 {\n        const rl = (right - left)\n        const tb = (top - bottom)\n        const fn = (far - near)\n\n        var mat = new Matrix4x4(\n            new Vector4(2 / rl, 0, 0, -(left + right) / rl),  // X轴缩放与平移\n            new Vector4(0, 2 / tb, 0, -(top + bottom) / tb),  // Y轴缩放与平移\n            new Vector4(0, 0, 2 / fn, -(far + near) / fn),    // Z轴缩放与平移\n            new Vector4(0, 0, 0, 1)                           // 齐次分量\n        );\n        return mat;\n    }\n\n    public static get identity(): Matrix4x4 {\n        let m = new Matrix4x4();\n        m.matrix[0][0] = 1;\n        m.matrix[1][1] = 1;\n        m.matrix[2][2] = 1;\n        m.matrix[3][3] = 1;\n        return m;\n    }\n\n    public static add(m1: Matrix4x4, m2: Matrix4x4): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                m[i][j] = m1.matrix[i][j] + m2.matrix[i][j];\n            }\n        }\n        return result;\n    }\n\n    public static subtract(m1: Matrix4x4, m2: Matrix4x4): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                m[i][j] = m1.matrix[i][j] - m2.matrix[i][j];\n            }\n        }\n        return result;\n    }\n\n    public static multiplyScalar(m: Matrix4x4, scalar: number): Matrix4x4 {\n        let result = new Matrix4x4();\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                m[i][j] = m.matrix[i][j] * scalar;\n            }\n        }\n        return result;\n    }\n\n    public static lerp(m1: Matrix4x4, m2: Matrix4x4, t: number): Matrix4x4 {\n        let result = new Matrix4x4();\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                result.matrix[i][j] = m1.matrix[i][j] + (m2.matrix[i][j] - m1.matrix[i][j]) * t;\n            }\n        }\n        return result;\n    }\n}","import { Vector3 } from \"./Vector3\";\n\n/*\n    平面方程推导：\n    平面方程 ax + by + cz + d = 0 的推导可以通过 “法向量与平面垂直” 的核心性质来完成，步骤如下：\n\n    1. 设定已知条件\n    - 设平面上任意一点为 P(x, y, z)\n    - 设平面的法向量为 n = (a, b, c)（垂直于平面的向量）\n    - 设平面上一个固定点为 P₀(x₀, y₀, z₀)\n\n    2. 利用向量垂直的性质\n    平面上的向量 P₀P = (x - x₀, y - y₀, z - z₀) 与法向量 n 垂直，因此它们的点积为 0：n · P₀P = 0\n\n    3. 展开点积并整理\n    代入点积公式：a(x - x₀) + b(y - y₀) + c(z - z₀) = 0\n\n    展开后：ax + by + cz - (ax₀ + by₀ + cz₀) = 0\n\n    4. 定义常数 d\n    令 d = - (ax₀ + by₀ + cz₀)（因 P₀ 是平面上的固定点，故 d 为常数），代入上式即得平面方程：ax + by + cz + d = 0\n\n\n    平面到原点距离推导：\n    要推导平面到原点的距离，可结合 d = -(ax₀ + by₀ + cz₀) 和向量投影的原理，步骤如下：\n\n    1. 明确已知关系\n    平面方程：ax + by + cz + d = 0\n    平面上固定点 P₀(x₀, y₀, z₀) 满足：ax₀ + by₀ + cz₀ + d = 0，即 d = -(ax₀ + by₀ + cz₀)\n    原点 O(0,0,0) 到平面的距离，等于向量 OP₀（从原点到平面上点 P₀ 的向量）在法向量 n = (a,b,c) 上的投影长度\n\n    2. 计算向量投影长度\n    向量 OP₀ = (x₀, y₀, z₀)，它在法向量 n 上的投影长度公式为：\n    投影长度 = |OP₀ · n| / |n|\n    分子：向量点积的绝对值 |OP₀ · n| = |ax₀ + by₀ + cz₀|\n    分母：法向量的模长 |n| = √(a² + b² + c²)\n\n    3. 代入 d 的表达式\n    由 d = -(ax₀ + by₀ + cz₀)，可得 |ax₀ + by₀ + cz₀| = |-d| = |d|，代入投影长度公式：\n    平面到原点的距离 = |d| / √(a² + b² + c²)\n */\nexport class Plane {\n    /**\n     * 平面方程：ax + by + cz + d = 0\n     * 平面任意点：(x, y, z)\n     * 平面法向量：(a, b, c)\n     * 到原点的距离 = |d| ÷ √(a² + b² + c²)\n     * @param a 平面法向量X分量\n     * @param b 平面法向量Y分量\n     * @param c 平面法向量Z分量\n     * @param d 决定平面与 “坐标原点的距离”，d 的 正负 表示平面在 “法向量方向” 上相对于原点的位置\n     */\n    constructor(\n        public a: number,\n        public b: number,\n        public c: number,\n        public d: number\n    ) { }\n\n    /**\n     * 归一化平面（确保法向量长度为1，保证距离计算精度）\n     */\n    public normalize(): void {\n        const normalLength = Math.sqrt(this.a ** 2 + this.b ** 2 + this.c ** 2);\n        if (normalLength < Number.EPSILON) return; // 避免除以0\n\n        this.a /= normalLength;\n        this.b /= normalLength;\n        this.c /= normalLength;\n        this.d /= normalLength;\n    }\n\n    /**\n     * 计算点到平面的距离（用于视锥体剔除检测）\n     * @param point 世界空间中的点\n     * @returns 距离（正数：点在平面正面；负数：点在平面反面；0：点在平面上）\n     */\n    public distanceToPoint(point: Vector3): number {\n        /*\n            要推导空间中任意点到平面的距离公式，可基于 “向量投影” 的几何原理，结合平面方程的性质进行推导，步骤如下：\n\n            已知条件\n            平面方程：ax + by + cz + d = 0（法向量为 n = (a, b, c)）\n            平面上任意一点：P₀(x₀, y₀, z₀)（满足平面方程：ax₀ + by₀ + cz₀ + d = 0）\n            空间中任意一点：P(x, y, z)（求该点到平面的距离）\n\n            推导核心：距离 = 向量在法向量上的投影长度\n            任意点 P 到平面的距离，等于向量 P₀P 在平面法向量 n 上的投影长度（因法向量垂直于平面，此投影长度即为点到平面的最短距离）。\n\n            向量 P₀P 的坐标：\n            P₀P = (x - x₀, y - y₀, z - z₀)\n\n            投影长度公式：\n            向量在法向量上的投影长度 = |P₀P · n| / |n|\n            （分子为向量点积的绝对值，分母为法向量的模长）\n\n            代入计算并化简\n            计算分子（点积的绝对值）：\n            P₀P · n = a(x - x₀) + b(y - y₀) + c(z - z₀)\n            展开后：\n            = ax + by + cz - (ax₀ + by₀ + cz₀)\n            由平面方程可知 ax₀ + by₀ + cz₀ = -d，代入得：\n            P₀P · n = ax + by + cz + d\n            取绝对值：|P₀P · n| = |ax + by + cz + d|\n\n            计算分母（法向量的模长）：\n            |n| = √(a² + b² + c²)\n\n            合并得距离公式：\n            点到平面的距离 = |ax + by + cz + d| / √(a² + b² + c²)\n         */\n        return this.a * point.x + this.b * point.y + this.c * point.z + this.d;\n    }\n}","import { Vector3 } from \"./Vector3\";\nimport { Matrix4x4 } from \"./Matrix4x4\";\n\nexport class Quaternion {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public w: number = 0;\n\n    public constructor();\n    public constructor(x: number, y: number, z: number, w: number);\n    public constructor(angle: number, axis: Vector3);\n    public constructor(euler: Vector3);\n    public constructor() {\n        if (arguments.length == 4) {\n            this.x = arguments[0];\n            this.y = arguments[1];\n            this.z = arguments[2];\n            this.w = arguments[3];\n        }\n        else if (arguments.length == 2) {\n            this.rotateAround(arguments[0], arguments[1]);\n        }\n        else if (arguments.length == 1) {\n            this.eulerAngles = arguments[0];\n        }\n        else {\n            this.x = this.y = this.z = 0;\n            this.w = 1;\n        }\n    }\n\n    public get eulerAngles(): Vector3 {\n        return Matrix4x4.getRotateMatrixByQuaternion(this).getEulerAngles();\n\n        // 或下面直接通过三角函数公式提取欧拉角，无需矩阵\n        // // 四元数转XYZ顺序欧拉角（roll, pitch, yaw）\n        // // 旋转顺序：先绕X轴(roll)，再绕Y轴(pitch)，最后绕Z轴(yaw)\n        // // 计算各分量平方（用于减少重复计算）\n        // const qx2 = this.x * this.x;\n        // const qy2 = this.y * this.y;\n        // const qz2 = this.z * this.z;\n        // // XYZ顺序的转换公式（结果为弧度）\n        // const roll = Math.atan2(2 * (this.w * this.x + this.y * this.z), 1 - 2 * (qx2 + qy2));\n        // const pitch = Math.asin(2 * (this.w * this.y - this.z * this.x));\n        // const yaw = Math.atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (qy2 + qz2));\n        // // 转换为角度（可选，根据需要保留）\n        // const rollDeg = roll * 180 / Math.PI;\n        // const pitchDeg = pitch * 180 / Math.PI;\n        // const yawDeg = yaw * 180 / Math.PI;\n        // return new Vector3(rollDeg, pitchDeg, yawDeg);\n    }\n\n    public set eulerAngles(e: Vector3) {\n        var q = Matrix4x4.getRotateMatrixByEulerAngles(e).getRotate();\n        this.w = q.w;\n        this.x = q.x;\n        this.y = q.y;\n        this.z = q.z;\n\n        // 或下面直接通过三角函数公式计算四元数分量，无需矩阵\n        // // XYZ顺序的欧拉角（roll, pitch, yaw）转四元数\n        // // 旋转顺序：先绕X轴(roll)，再绕Y轴(pitch)，最后绕Z轴(yaw)\n        // const roll = e.x * Math.PI / 180;  // X轴旋转（roll），角度转弧度\n        // const pitch = e.y * Math.PI / 180; // Y轴旋转（pitch），角度转弧度\n        // const yaw = e.z * Math.PI / 180;   // Z轴旋转（yaw），角度转弧度\n        // // 计算半角的三角函数值\n        // const cosRoll = Math.cos(roll / 2);\n        // const sinRoll = Math.sin(roll / 2);\n        // const cosPitch = Math.cos(pitch / 2);\n        // const sinPitch = Math.sin(pitch / 2);\n        // const cosYaw = Math.cos(yaw / 2);\n        // const sinYaw = Math.sin(yaw / 2);\n        // // XYZ顺序的四元数转换公式\n        // this.w = cosRoll * cosPitch * cosYaw + sinRoll * sinPitch * sinYaw;\n        // this.x = sinRoll * cosPitch * cosYaw - cosRoll * sinPitch * sinYaw;\n        // this.y = cosRoll * sinPitch * cosYaw + sinRoll * cosPitch * sinYaw;\n        // this.z = cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw;\n    }\n\n    public rotateAround(angle: number, axis: Vector3): Quaternion {\n        let q = Quaternion.angleAxis(angle, axis);\n        this.x = q.x;\n        this.y = q.y;\n        this.z = q.z;\n        this.w = q.w;\n        return this;\n    }\n\n    /**\n    * @zh 向量四元数乘法\n    */\n    public transformQuat(a: Vector3): Vector3 {\n        // benchmarks: http://jsperf.com/quaternion-transform-Vec3-implementations\n\n        let out = new Vector3();\n        let q = this;\n\n        // calculate quat * vec\n        const ix = q.w * a.x + q.y * a.z - q.z * a.y;\n        const iy = q.w * a.y + q.z * a.x - q.x * a.z;\n        const iz = q.w * a.z + q.x * a.y - q.y * a.x;\n        const iw = -q.x * a.x - q.y * a.y - q.z * a.z;\n\n        // calculate result * inverse quat\n        out.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n        out.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n        out.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n        return out;\n    }\n\n    public clone(): Quaternion {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n\n    /**\n     * @zh 检查四元数是否相等\n     */\n    public equals(q: Quaternion): boolean {\n        const epsilon = 1e-6;\n        return Math.abs(this.x - q.x) < epsilon && \n               Math.abs(this.y - q.y) < epsilon && \n               Math.abs(this.z - q.z) < epsilon && \n               Math.abs(this.w - q.w) < epsilon;\n    }\n\n    /**\n     * @zh 四元数球面插值\n     */\n    public static slerp(a: Quaternion, b: Quaternion, t: number): Quaternion {\n        // benchmarks:\n        //    http://jsperf.com/quaternion-slerp-implementations\n\n        let out = new Quaternion();\n\n        let scale0 = 0;\n        let scale1 = 0;\n\n        // calc cosine\n        let cosom = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\n        // adjust signs (if necessary)\n        if (cosom < 0.0) {\n            cosom = -cosom;\n            b.x = -b.x;\n            b.y = -b.y;\n            b.z = -b.z;\n            b.w = -b.w;\n        }\n        // calculate coefficients\n        if ((1.0 - cosom) > 0.000001) {\n            // standard case (slerp)\n            const omega = Math.acos(cosom);\n            const sinom = Math.sin(omega);\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\n            scale1 = Math.sin(t * omega) / sinom;\n        } else {\n            // \"from\" and \"to\" quaternions are very close\n            //  ... so we can do a linear interpolation\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        // calculate final values\n        out.x = scale0 * a.x + scale1 * b.x;\n        out.y = scale0 * a.y + scale1 * b.y;\n        out.z = scale0 * a.z + scale1 * b.z;\n        out.w = scale0 * a.w + scale1 * b.w;\n\n        return out;\n    }\n\n    public static dot(a: Quaternion, b: Quaternion): number {\n        return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\n    }\n\n    public static angleAxis(angle: number, axis: Vector3): Quaternion {\n        let res = new Quaternion();\n\n        angle = Math.PI * angle / 180;\n        angle *= 0.5;\n        const sin = Math.sin(angle);\n\n        res.x = axis.x * sin;\n        res.y = axis.y * sin;\n        res.z = axis.z * sin;\n        res.w = Math.cos(angle);\n\n        return res;\n    }\n\n    /**\n     * 创建一个旋转，使物体朝向目标方向\n     * @param direction 目标方向向量（世界空间），需要归一化\n     * @param up 上方向向量（世界空间），默认为(0,1,0)\n     * @returns 旋转四元数\n     */\n    public static LookRotation(direction: Vector3, up: Vector3 = Vector3.UP): Quaternion {\n        throw new Error(\"LookRotation not implemented\");\n    }\n\n    public static get identity(): Quaternion {\n        return new Quaternion(0, 0, 0, 1);\n    }\n}","import { Vector3 } from \"./Vector3\"; // 假设的向量类\n\nexport class Ray {\n    public origin: Vector3;\n    public direction: Vector3;\n\n    /**\n     * 构造一条射线\n     * @param origin 射线起点\n     * @param direction 射线方向（通常应是归一化的单位向量）\n     */\n    constructor(origin: Vector3, direction: Vector3) {\n        this.origin = origin.clone(); // 使用克隆避免引用问题\n        this.direction = direction.clone().normalize(); // 确保方向是单位向量\n    }\n\n    /**\n     * 获取射线上某一点的位置\n     * @param t 沿射线方向的参数距离\n     * @returns 射线上对应点的Vector3坐标\n     */\n    public at(t: number): Vector3 {\n        // 公式: point = origin + t * direction\n        return Vector3.add(this.origin, Vector3.multiplyScalar(this.direction, t));\n    }\n\n    /**\n     * 克隆当前射线\n     * @returns 一条新的Ray实例\n     */\n    public clone(): Ray {\n        return new Ray(this.origin.clone(), this.direction.clone());\n    }\n}","import { Camera } from \"../Component/Camera\";\nimport { Light, LightType } from \"../Component/Light\";\nimport { EngineConfig } from \"../Core/Setting\";\nimport { Transform } from \"../Core/Transform\";\nimport { Matrix4x4 } from \"./Matrix4x4\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Ray } from \"./Ray\";\nimport { Vector2 } from \"./Vector2\";\nimport { Vector3 } from \"./Vector3\";\nimport { Vector4 } from \"./Vector4\";\n\nexport class TransformTools {\n\n    /**\n     * 将裁剪空间坐标转换为标准化设备坐标(NDC)\n     * @param clipPos 裁剪空间坐标，包含x, y, z, w四个分量\n     * @returns 标准化设备坐标(NDC)，三个分量范围均为[-1, 1]\n     */\n    public static ClipToNdcPos(clipPos: Vector4): Vector3 {\n        // 获取裁剪坐标的w分量，用于透视除法\n        const w = clipPos.w;\n\n        // 避免除以0（理论上w=0的点在无穷远处，实际中通常返回原点）\n        if (w === 0) {\n            return Vector3.ZERO;\n        }\n\n        // 执行透视除法：裁剪空间坐标各分量除以w分量，得到NDC\n        // 透视投影中，w分量与深度相关，除法会产生近大远小的透视效果\n        const ndcX = clipPos.x / w;\n        const ndcY = clipPos.y / w;\n        const ndcZ = clipPos.z / w;\n\n        // 返回NDC坐标，三个分量均应落在[-1, 1]范围内（超出此范围的点会被裁剪）\n        return new Vector3(ndcX, ndcY, ndcZ);\n    }\n\n    /**\n     * 将NDC坐标转换为视口坐标\n     * @param ndcPos 标准化设备坐标(NDC)，范围为X:[-1,1], Y:[-1,1], Z:[-1,1]\n     * @param viewport 视口参数，格式为[x, y, width, height]，其中(x,y)是视口左上角在屏幕上的坐标\n     * @returns 视口空间中的二维坐标\n     */\n    public static NdcToViewportPos(ndcPos: Vector3, viewport: Vector4): Vector2 {\n        const startX = viewport.x;    // 视口左上角X坐标\n        const startY = viewport.y;    // 视口左上角Y坐标\n        const width = viewport.z;     // 视口宽度\n        const height = viewport.w;    // 视口高度\n\n        // NDC坐标范围是[-1,1]，先转换为[0,1]范围的相对坐标\n        // 公式：[0,1] = (NDC + 1) / 2\n        const normalizedX = (ndcPos.x + 1) * 0.5;\n        const normalizedY = (ndcPos.y + 1) * 0.5;\n\n        // 转换为视口坐标：\n        // X轴：视口起始X + 相对X * 视口宽度\n        // Y轴：由于屏幕坐标系Y轴向下（与NDC的Y轴方向相反），需要用1减去相对Y值后再计算\n        const viewPortX = startX + normalizedX * width;\n        const viewPortY = startY + (1 - normalizedY) * height;\n\n        return new Vector2(viewPortX, viewPortY);\n    }\n\n    public static ViewportToScreenPos(vp: Vector2): Vector2 {\n        const screenX = vp.x * EngineConfig.canvasWidth;\n        const screenY = vp.y * EngineConfig.canvasHeight;\n        return new Vector2(screenX, screenY);\n    }\n\n    public static WorldToClipPos(pos: Vector3, camera: Camera): Vector4 {\n        const viewMatrix = camera.getViewMatrix();\n        const projectionMatrix = camera.getProjectionMatrix();\n        const vpMatrix = projectionMatrix.multiply(viewMatrix);\n        const clipPos = vpMatrix.multiplyVector4(new Vector4(pos, 1));\n        return clipPos;\n    }\n\n    // 世界坐标转为屏幕坐标\n    public static WorldToScreenPos(pos: Vector3, camera: Camera): { screen: Vector2; depth: number } {\n        const clipPos = this.WorldToClipPos(pos, camera);\n        const ndc = this.ClipToNdcPos(clipPos);\n        const vp = this.NdcToViewportPos(ndc, camera.viewPort);\n        const screen = this.ViewportToScreenPos(vp);\n\n        // 深度值：将NDC的z从[-1, 1]映射到[0, 1]的范围，常用于深度缓冲\n        const depth = (ndc.z + 1) / 2;\n\n        return { screen, depth };\n    }\n\n    // 世界坐标到视口坐标\n    public static WorldToViewportPos(worldPos: Vector3, camera: Camera): Vector2 {\n        const clipPos = this.WorldToClipPos(worldPos, camera);\n        const ndc = this.ClipToNdcPos(clipPos);\n        const vp = this.NdcToViewportPos(ndc, camera.viewPort);\n        return vp;\n    }\n\n    // 视口坐标转换\n    public static ScreenToViewportPos(screenPos: Vector2): Vector2 {\n        return new Vector2(\n            screenPos.x / EngineConfig.canvasWidth,\n            screenPos.y / EngineConfig.canvasHeight\n        );\n    }\n\n    // 屏幕坐标转为世界坐标\n    public static ScreenToWorldPos(screenPos: Vector2, camera: Camera, depth: number = 1.0): Vector3 {\n        // 1. 将屏幕坐标转换为NDC坐标（-1到1范围）\n        const ndcX = (screenPos.x / EngineConfig.canvasWidth) * 2 - 1;\n        const ndcY = 1 - (screenPos.y / EngineConfig.canvasHeight) * 2; // Y轴需要翻转\n\n        // 2. 创建齐次裁剪空间坐标\n        const clipPos = new Vector4(ndcX, ndcY, depth, 1.0);\n\n        // 3. 获取视图投影矩阵的逆矩阵\n        const viewMatrix = camera.getViewMatrix();\n        const projectionMatrix = camera.getProjectionMatrix();\n        const vpMatrix = projectionMatrix.multiply(viewMatrix);\n        const inverseVPMatrix = vpMatrix.invert();\n\n        // 4. 将裁剪空间坐标转换到世界空间\n        const worldPos = inverseVPMatrix.multiplyVector4(clipPos);\n\n        // 5. 进行透视除法（齐次坐标归一化）\n        const w = worldPos.w;\n        if (w !== 0) {\n            return new Vector3(\n                worldPos.x / w,\n                worldPos.y / w,\n                worldPos.z / w\n            );\n        }\n\n        return new Vector3(worldPos.x, worldPos.y, worldPos.z);\n    }\n\n    // 使用射线法进行精确的屏幕到世界坐标转换（推荐用于3D拾取）\n    public static ScreenToWorldPosRaycast(screenPos: Vector2, camera: Camera): Ray {\n        // 1. 将屏幕坐标转换为NDC坐标\n        const ndcX = (screenPos.x / EngineConfig.canvasWidth) * 2 - 1;\n        const ndcY = 1 - (screenPos.y / EngineConfig.canvasHeight) * 2;\n\n        // 2. 创建近平面和远平面的点\n        const nearPoint = new Vector4(ndcX, ndcY, -1, 1);\n        const farPoint = new Vector4(ndcX, ndcY, 1, 1);\n\n        // 3. 获取视图投影矩阵的逆矩阵\n        const viewMatrix = camera.getViewMatrix();\n        const projectionMatrix = camera.getProjectionMatrix();\n        const vpMatrix = projectionMatrix.multiply(viewMatrix);\n        const inverseVPMatrix = vpMatrix.invert();\n\n        // 4. 转换到世界空间\n        const worldNear = inverseVPMatrix.multiplyVector4(nearPoint);\n        const worldFar = inverseVPMatrix.multiplyVector4(farPoint);\n\n        // 5. 进行透视除法\n        const nearWorld = new Vector3(\n            worldNear.x / worldNear.w,\n            worldNear.y / worldNear.w,\n            worldNear.z / worldNear.w\n        );\n\n        const farWorld = new Vector3(\n            worldFar.x / worldFar.w,\n            worldFar.y / worldFar.w,\n            worldFar.z / worldFar.w\n        );\n\n        // 6. 创建射线\n        const rayDirection = farWorld.subtract(nearWorld).normalize();\n        const rayOrigin = nearWorld;\n\n        return new Ray(rayOrigin, rayDirection);\n    }\n\n    // 模型坐标转为裁剪坐标\n    public static ModelToClipPos(vertex: Vector3, modelMatrix: Matrix4x4, camera: Camera): Vector4 {\n        // 对顶点应用 MVP 矩阵（Model→View→Projection 矩阵的组合），计算过程为：\n        // 裁剪空间坐标 = projectionMatrix × viewMatrix × modelMatrix × 模型空间顶点\n        const viewMatrix = camera.getViewMatrix();\n        const projectionMatrix = camera.getProjectionMatrix();\n        const mvpMatrix = projectionMatrix.multiply(viewMatrix).multiply(modelMatrix);\n\n        // 另一种构建mv矩阵的方式\n        // 构建一个先朝摄影机反方向移动，再反方向旋转的矩阵，其实得到的也就是上面摄影机的世界坐标矩阵\n        // const cameraForward = camera.transform.forward;\n        // const cameraUp = camera.transform.up;\n        // const modelViewMatrix = modelMatrix.clone().transformToLookAtSpace(camera.transform.position, camera.transform.position.add(cameraForward), cameraUp);\n        // const mvpMatrix = modelViewMatrix.perspective(camera.fov, camera.aspect, camera.nearClip, camera.farClip);\n\n        // 要把Vec3转为齐次坐标点，即w=1\n        return mvpMatrix.multiplyVector4(new Vector4(vertex, 1));\n    }\n\n    // 模型坐标转为屏幕坐标\n    public static ModelToScreenPos(vertex: Vector3, modelMatrix: Matrix4x4, camera: Camera): { screen: Vector2; depth: number } {\n        const clipPos = this.ModelToClipPos(vertex, modelMatrix, camera);\n        const ndc = this.ClipToNdcPos(clipPos);\n        const vp = this.NdcToViewportPos(ndc, camera.viewPort);\n        const screen = this.ViewportToScreenPos(vp);\n        const depth = (ndc.z + 1) / 2;\n        return { screen, depth };\n    }\n\n    public static ClipToScreenPos(clipPos: Vector4, camera: Camera): Vector3 {\n        const ndc = this.ClipToNdcPos(clipPos);\n        const vp = this.NdcToViewportPos(ndc, camera.viewPort);\n        const screen = this.ViewportToScreenPos(vp);\n        const depth = (ndc.z + 1) / 2;\n        return new Vector3(screen.x, screen.y, depth);\n    }\n\n    // 模型法线转为世界法线\n    public static ModelToWorldNormal(normal: Vector3, modelMatrix: Matrix4x4): Vector3 {\n        // 获取模型矩阵（局部到世界空间的变换矩阵）\n\n        // 计算模型矩阵的逆转置矩阵\n        // 逆转置矩阵可以确保法线在非均匀缩放时仍然保持与表面垂直\n        const inverseTransposeModel = modelMatrix.invert().transpose();\n\n        // 使用逆转置矩阵变换法线向量（忽略平移分量，只应用旋转和缩放的逆变换）\n        const worldNormal = inverseTransposeModel.multiplyVector3(normal);\n\n        // 归一化结果，确保法线保持单位长度\n        return worldNormal.normalize();\n    }\n\n    /**\n     * 计算模型空间中从顶点指向光源的方向向量\n     * @param v 模型空间中的顶点坐标\n     * @returns 归一化的方向向量（模型空间）\n     */\n    public static ObjSpaceLightDir(v: Vector3, light: Light, transform: Transform): Vector3 {\n        let lightDir: Vector3;\n\n        if (light.type === LightType.Directional) {\n            // 方向光：直接将世界空间的光线方向转换到模型空间（方向向量用矩阵乘法，忽略平移）\n            lightDir = transform.worldToLocalMatrix.multiplyVector3(light.transform.forward);\n        } else {\n            // 点光源/聚光灯：计算顶点到光源的向量（模型空间）\n            // 1. 将世界空间的光源位置转换到模型空间\n            const lightPosObj = transform.worldToLocalMatrix.multiplyVector4(new Vector4(light.transform.worldPosition, 1));\n            // 2. 模型空间中，从顶点指向光源的向量 = 光源位置 - 顶点位置\n            lightDir = (new Vector3(lightPosObj)).subtract(v);\n        }\n\n        // 归一化并返回\n        return lightDir.normalize();\n    }\n\n    /**\n     * 计算模型空间中从顶点指向摄像机的方向向量\n     * @param v 模型空间中的顶点坐标\n     * @returns 归一化的方向向量（模型空间）\n     */\n    public static ObjSpaceViewDir(v: Vector3, camera: Camera, transform: Transform): Vector3 {\n        // 1. 将世界空间的摄像机位置转换到模型空间\n        const cameraPosObj = transform.worldToLocalMatrix.multiplyVector4(new Vector4(camera.transform.worldPosition, 1));\n\n        // 2. 模型空间中，从顶点指向摄像机的向量 = 摄像机位置 - 顶点位置\n        const viewDir = (new Vector3(cameraPosObj)).subtract(v);\n\n        // 归一化并返回\n        return viewDir.normalize();\n    }\n\n    public static ApplyScaleToVertex(vertex: Vector3, scale: Vector3) {\n        vertex.x *= scale.x;\n        vertex.y *= scale.y;\n        vertex.z *= scale.z;\n    }\n\n    public static ApplyRotationToVertex(vertex: Vector3, quaternion: Quaternion) {\n        // 四元数旋转公式: v' = q * v * q⁻¹\n        const qx = quaternion.x, qy = quaternion.y, qz = quaternion.z, qw = quaternion.w;\n        const x = vertex.x, y = vertex.y, z = vertex.z;\n\n        // 计算 q * v\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n\n        // 计算 (q * v) * q⁻¹ (q⁻¹ 是 q的共轭)\n        const rx = ix * qw + iw * (-qx) + iy * (-qz) - iz * (-qy);\n        const ry = iy * qw + iw * (-qy) + iz * (-qx) - ix * (-qz);\n        const rz = iz * qw + iw * (-qz) + ix * (-qy) - iy * (-qx);\n\n        vertex.x = rx;\n        vertex.y = ry;\n        vertex.z = rz;\n    }\n\n    public static ApplyTranslationToVertex(vertex: Vector3, position: Vector3) {\n        vertex.x += position.x;\n        vertex.y += position.y;\n        vertex.z += position.z;\n    }\n}","import { Vector3 } from \"./Vector3\";\nimport { Vector4 } from \"./Vector4\";\n\nexport class Vector2 {\n\n    public x: number;\n    public y: number;\n\n    public get u(): number { return this.x; }\n    public get v(): number { return this.y; }\n\n    public get width(): number { return this.x; }\n    public get height(): number { return this.y; }\n\n    public constructor();\n    public constructor(x: number, y: number);\n    public constructor(v: Vector3);\n    public constructor(v: Vector4)\n    public constructor() {\n        if (arguments[0] instanceof Vector3) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n        }\n        else if (arguments[0] instanceof Vector4) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n        }\n        else if (arguments.length == 2) {\n            this.x = arguments[0];\n            this.y = arguments[1];\n        }\n        else {\n            this.x = this.y = 0;\n        }\n    }\n\n    /*\n        OPERATIONS ON VECTOR\n     */\n\n    public add(v: Vector2): Vector2 {\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n    }\n\n    public subtract(v: Vector2): Vector2 {\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n    }\n\n    public multiply(v: Vector2): Vector2 {\n        this.x *= v.x;\n        this.y *= v.y;\n        return this;\n    }\n\n    public divide(d: number): Vector2 {\n        this.x /= d;\n        this.y /= d;\n        return this;\n    }\n\n    public multiplyScalar(d: number): Vector2 {\n        this.x *= d;\n        this.y *= d;\n        return this;\n    }\n\n    public dot(v: Vector2): number {\n        return (this.x * v.x + this.y * v.y);\n    }\n\n    public negate(): Vector2 {\n        return this.multiplyScalar(-1);\n    }\n\n    public normalize(): Vector2 {\n        var length = this.magnitude;\n\n        if (length === 0)\n            return new Vector2();\n\n        return this.divide(length);\n    }\n\n    public get magnitude(): number {\n        return Math.sqrt(Vector2.dot(this, this));\n    }\n\n    public get sqrMagnitude(): number {\n        return Vector2.dot(this, this);\n    }\n\n    /*\n        ADDITIONAL FUNCTIONS\n     */\n\n    public clone(): Vector2 {\n        return new Vector2(this.x, this.y);\n    }\n\n    public equals(v: Vector2): boolean {\n        return v.x == this.x && v.y == this.y;\n    }\n\n    public toString(): string {\n        return \"[\" + this.x + \", \" + this.y + \"]\";\n    }\n\n    /*\n        STATIC FUNCTIONS\n     */\n\n    public static add(v1: Vector2, v2: Vector2): Vector2 {\n        return new Vector2(v1.x + v2.x, v1.y + v2.y);\n    }\n\n    public static subtract(v1: Vector2, v2: Vector2): Vector2 {\n        return new Vector2(v1.x - v2.x, v1.y - v2.y);\n    }\n\n    public static multiply(v1: Vector2, v2: Vector2): Vector2 {\n        return new Vector2(v1.x * v2.x, v1.y * v2.y);\n    }\n\n    public static divide(v1: Vector2, v2: Vector2): Vector2 {\n        return new Vector2(v1.x / v2.x, v1.y / v2.y);\n    }\n\n    public static multiplyScalar(v1: Vector2, scalar: number): Vector2 {\n        return new Vector2(v1.x * scalar, v1.y * scalar);\n    }\n\n    public static lerp(v1: Vector2, v2: Vector2, t: number): Vector2 {\n        var v = new Vector2();\n        v.x = v1.x + t * (v2.x - v1.x);\n        v.y = v1.y + t * (v2.y - v1.y);\n        return v;\n    }\n\n    public static dot(v1: Vector2, v2: Vector2): number {\n        return (v1.x * v2.x + v1.y * v2.y);\n    }\n\n    public static cross(v1: Vector2, v2: Vector2): number {\n        return (v1.x * v2.y - v1.y * v2.x);\n    }\n\n    public static distance(v1: Vector2, v2: Vector2): number {\n        var x = v2.x - v1.x;\n        var y = v2.y - v1.y;\n        return Math.sqrt(x * x + y * y);\n    }\n\n    public static angle(v1: Vector2, v2: Vector2): number {\n        return Math.acos(Vector2.dot(v1, v2) / (v1.magnitude * v2.magnitude));\n    }\n\n    /*\n        STATIC VARIABLES\n     */\n\n    public static get ZERO() {\n        return new Vector2(0, 0);\n    }\n\n    public static get ONE() {\n        return new Vector2(1, 1);\n    }\n\n    public static get RIGHT() {\n        return new Vector2(1, 0);\n    }\n\n    public static get LEFT() {\n        return new Vector2(-1, 0);\n    }\n\n    public static get UP() {\n        return new Vector2(0, 1);\n    }\n\n    public static get DOWN() {\n        return new Vector2(0, -1);\n    }\n}","import { Vector2 } from \"./Vector2\";\nimport { Vector4 } from \"./Vector4\";\n\nexport class Vector3 {\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor();\n    public constructor(x: number, y: number, z: number);\n    public constructor(v: Vector2);\n    public constructor(v: Vector4);\n    public constructor() {\n        if (arguments[0] instanceof Vector2) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n            this.z = 0;\n        }\n        else if (arguments[0] instanceof Vector4) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n            this.z = arguments[0].z;\n        }\n        else if (arguments.length == 3) {\n            this.x = arguments[0];\n            this.y = arguments[1];\n            this.z = arguments[2];\n        }\n        else {\n            this.x = this.y = this.z = 0;\n        }\n    }\n\n    /*\n     OPERATIONS ON VECTOR\n     */\n\n    public add(v: Vector3): Vector3 {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        return this;\n    }\n\n    public subtract(v: Vector3): Vector3 {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        return this;\n    }\n\n    public multiply(v: Vector3): Vector3 {\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n        return this;\n    }\n\n    public divide(d: number): Vector3 {\n        this.x /= d;\n        this.y /= d;\n        this.z /= d;\n        return this;\n    }\n\n    public multiplyScalar(s: number): Vector3 {\n        this.x *= s;\n        this.y *= s;\n        this.z *= s;\n        return this;\n    }\n\n    public negate(): Vector3 {\n        return this.multiplyScalar(-1);\n    }\n\n    public normalize(): Vector3 {\n        var length = this.magnitude;\n        if (length === 0)\n            return new Vector3();\n        return this.divide(length);\n    }\n\n    public dot(v: Vector3): number {\n        return Vector3.dot(this, v);\n    }\n\n    public cross(v: Vector3): Vector3 {\n        return Vector3.cross(this, v);\n    }\n\n    public get magnitude(): number {\n        return Math.sqrt(Vector3.dot(this, this));\n    }\n\n    public get sqrMagnitude(): number {\n        return Vector3.dot(this, this);\n    }\n\n    /**\n     * 获取向量的指定分量\n     * @param index 分量索引 (0=x, 1=y, 2=z)\n     * @returns 对应分量的值\n     */\n    public getComponent(index: number): number {\n        switch (index) {\n            case 0: return this.x;\n            case 1: return this.y;\n            case 2: return this.z;\n            default:\n                throw new Error(`Invalid component index: ${index}. Must be 0, 1, or 2.`);\n        }\n    }\n\n    /**\n     * 设置向量的指定分量\n     * @param index 分量索引 (0=x, 1=y, 2=z)\n     * @param value 要设置的值\n     */\n    public setComponent(index: number, value: number): void {\n        switch (index) {\n            case 0: this.x = value; break;\n            case 1: this.y = value; break;\n            case 2: this.z = value; break;\n            default:\n                throw new Error(`Invalid component index: ${index}. Must be 0, 1, or 2.`);\n        }\n    }\n\n    /*\n     ADDITIONAL FUNCTIONS\n     */\n\n    public clone(): Vector3 {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    public equals(v: Vector3): boolean {\n        return v.x == this.x && v.y == this.y && v.z == this.z;\n    }\n\n    public toString(): string {\n        return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \"]\";\n    }\n\n    /*\n     STATIC FUNCTIONS\n     */\n\n    public static add(v1: Vector3, v2: Vector3): Vector3 {\n        return new Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);\n    }\n\n    public static subtract(v1: Vector3, v2: Vector3): Vector3 {\n        return new Vector3(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);\n    }\n\n    public static multiply(v1: Vector3, v2: Vector3): Vector3 {\n        return new Vector3(v1.x * v2.x, v1.y * v2.y, v1.z * v2.z);\n    }\n\n    public static divide(v1: Vector3, v2: Vector3): Vector3 {\n        return new Vector3(v1.x / v2.x, v1.y / v2.y, v1.z / v2.z);\n    }\n\n    public static multiplyScalar(v1: Vector3, s: number): Vector3 {\n        return new Vector3(v1.x * s, v1.y * s, v1.z * s);\n    }\n\n    public static lerp(v1: Vector3, v2: Vector3, t: number): Vector3 {\n        var v = new Vector3();\n        v.x = v1.x + t * (v2.x - v1.x);\n        v.y = v1.y + t * (v2.y - v1.y);\n        v.z = v1.z + t * (v2.z - v1.z);\n        return v;\n    }\n\n    public static reflect(v: Vector3, n: Vector3): Vector3 {\n        return Vector3.subtract(v, Vector3.multiplyScalar(n, 2 * Vector3.dot(v, n)));\n    }\n\n    public static dot(v1: Vector3, v2: Vector3): number {\n        return (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z);\n    }\n\n    public static cross(v1: Vector3, v2: Vector3): Vector3 {\n        var x = v1.y * v2.z - v1.z * v2.y;\n        var y = v1.z * v2.x - v1.x * v2.z;\n        var z = v1.x * v2.y - v1.y * v2.x;\n        return new Vector3(x, y, z);\n    }\n\n    public static distance(v1: Vector3, v2: Vector3): number {\n        var x = v2.x - v1.x;\n        var y = v2.y - v1.y;\n        var z = v2.z - v1.z;\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    public static difference(v1: Vector3, v2: Vector3): Vector3 {\n        var dest = new Vector3();\n\n        dest.x = v1.x - v2.x\n        dest.y = v1.y - v2.y\n        dest.z = v1.z - v2.z\n\n        return dest\n    }\n\n    public static angle(v1: Vector3, v2: Vector3): number {\n        return Math.acos(Vector3.dot(v1, v2) / (v1.magnitude * v2.magnitude));\n    }\n\n    public static normalize(v: Vector3): Vector3 {\n        var length = v.magnitude;\n        if (length === 0)\n            return new Vector3();\n        return Vector3.multiplyScalar(v, 1 / length);\n    }\n\n    /**\n     * 返回两个向量中每对分量的较小值组成的新向量[1,2](@ref)\n     * @param a 第一个向量\n     * @param b 第二个向量\n     * @returns 由各分量较小值组成的新向量\n     */\n    public static min(a: Vector3, b: Vector3): Vector3 {\n        return new Vector3(\n            Math.min(a.x, b.x),\n            Math.min(a.y, b.y),\n            Math.min(a.z, b.z)\n        );\n    }\n\n    /**\n     * 返回两个向量中每对分量的较大值组成的新向量[3,4](@ref)\n     * @param a 第一个向量\n     * @param b 第二个向量\n     * @returns 由各分量较大值组成的新向量\n     */\n    public static max(a: Vector3, b: Vector3): Vector3 {\n        return new Vector3(\n            Math.max(a.x, b.x),\n            Math.max(a.y, b.y),\n            Math.max(a.z, b.z)\n        );\n    }\n\n    /*\n     STATIC VARIABLES\n     */\n\n    public static get ZERO() {\n        return new Vector3(0, 0, 0);\n    }\n\n    public static get ONE() {\n        return new Vector3(1, 1, 1);\n    }\n\n    public static get RIGHT() {\n        return new Vector3(1, 0, 0);\n    }\n\n    public static get LEFT() {\n        return new Vector3(-1, 0, 0);\n    }\n\n    public static get UP() {\n        return new Vector3(0, 1, 0);\n    }\n\n    public static get DOWN() {\n        return new Vector3(0, -1, 0);\n    }\n\n    public static get FORWARD() {\n        return new Vector3(0, 0, 1);\n    }\n\n    public static get BACK() {\n        return new Vector3(0, 0, -1);\n    }\n}","import { Vector3 } from \"./Vector3\";\nimport { Vector2 } from \"./Vector2\";\n\nexport class Vector4 {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    public get r(): number { return this.x; }\n    public get g(): number { return this.y; }\n    public get b(): number { return this.z; }\n    public get a(): number { return this.w; }\n\n    public get vector3(): Vector3 { return new Vector3(this); }\n\n    public constructor();\n    public constructor(x: number, y: number, z: number, w: number);\n    public constructor(v: Vector2);\n    public constructor(v: Vector3);\n    public constructor(v: Vector3, w: number);\n    public constructor() {\n        if (arguments[0] instanceof Vector2) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n            this.z = this.w = 0;\n        }\n        else if (arguments[0] instanceof Vector3) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n            this.z = arguments[0].z;\n            this.w = arguments.length == 2 ? arguments[1] : 0;\n        }\n        else if (arguments.length == 4) {\n            this.x = arguments[0];\n            this.y = arguments[1];\n            this.z = arguments[2];\n            this.w = arguments[3];\n        }\n        else {\n            this.x = this.y = this.z = this.w = 0;\n        }\n    }\n\n    /*\n     OPERATIONS ON VECTOR\n     */\n\n    public add(v: Vector4): Vector4 {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        this.w += v.w;\n        return this;\n    }\n\n    public subtract(v: Vector4): Vector4 {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        this.w -= v.w;\n        return this;\n    }\n\n    public multiply(v: Vector4): Vector4 {\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n        this.w *= v.w;\n        return this;\n    }\n\n    public divide(d: number): Vector4 {\n        this.x /= d;\n        this.y /= d;\n        this.z /= d;\n        this.w /= d;\n        return this;\n    }\n\n    public multiplyScalar(d: number): Vector4 {\n        this.x *= d;\n        this.y *= d;\n        this.z *= d;\n        this.w *= d;\n        return this;\n    }\n\n    public negate(): Vector4 {\n        return this.multiplyScalar(-1);\n    }\n\n    public normalize(): Vector4 {\n        var length = this.magnitude;\n\n        if (length === 0)\n            return new Vector4();\n\n        return this.divide(length);\n    }\n\n    public get magnitude(): number {\n        return Math.sqrt(Vector4.dot(this, this));\n    }\n\n    public get sqrMagnitude(): number {\n        return Vector4.dot(this, this);\n    }\n\n    /*\n     ADDITIONAL FUNCTIONS\n     */\n\n    public clone(): Vector4 {\n        return new Vector4(this.x, this.y, this.z, this.w);\n    }\n\n    public equals(v: Vector4): boolean {\n        return v.x == this.x && v.y == this.y && v.z == this.z && v.w == this.w;\n    }\n\n    public toString(): string {\n        return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \", \" + this.w + \"]\";\n    }\n\n    /*\n     STATIC FUNCTIONS\n     */\n\n    public static add(v1: Vector4, v2: Vector4): Vector4 {\n        return new Vector4(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z, v1.w + v2.w);\n    }\n\n    public static subtract(v1: Vector4, v2: Vector4): Vector4 {\n        return new Vector4(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z, v1.w - v2.w);\n    }\n\n    public static multiply(v1: Vector4, v2: Vector4): Vector4 {\n        return new Vector4(v1.x * v2.x, v1.y * v2.y, v1.z * v2.z, v1.w * v2.w);\n    }\n\n    public static divide(v1: Vector4, scalar: number): Vector4 {\n        return new Vector4(v1.x / scalar, v1.y / scalar, v1.z / scalar, v1.w / scalar);\n    }\n\n    public static multiplyScalar(v1: Vector4, scalar: number): Vector4 {\n        return new Vector4(v1.x * scalar, v1.y * scalar, v1.z * scalar, v1.w * scalar);\n    }\n\n    public static lerp(v1: Vector4, v2: Vector4, t: number): Vector4 {\n        var v = new Vector4();\n        v.x = v1.x + t * (v2.x - v1.x);\n        v.y = v1.y + t * (v2.y - v1.y);\n        v.z = v1.z + t * (v2.z - v1.z);\n        v.w = v1.w + t * (v2.w - v1.w);\n        return v;\n    }\n\n    public static dot(v1: Vector4, v2: Vector4): number {\n        return (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z + v1.w * v2.w);\n    }\n\n    public static distance(v1: Vector4, v2: Vector4): number {\n        return Math.sqrt(Vector4.dot(v1, v2));\n    }\n\n    /*\n     STATIC VARIABLES\n     */\n\n    public static get ZERO() {\n        return new Vector4(0, 0, 0, 0);\n    }\n\n    public static get ONE() {\n        return new Vector4(1, 1, 1, 1);\n    }\n}","import * as CANNON from 'cannon';\nimport { Time } from '../Core/Time';\nimport { RaycastHit } from './RaycastHit';\nimport { Ray } from '../Math/Ray';\nimport { Vector3 } from '../Math/Vector3';\nimport { Collider } from '../Component/Collider';\nimport { Rigidbody } from '../Component/RigidBody';\nimport { Quaternion } from '../Math/Quaternion';\nimport { BoxCollider, BoxColliderData } from '../Component/BoxCollider';\nimport { SphereCollider, SphereColliderData } from '../Component/SphereCollider';\n\nexport class Physics {\n    private world: CANNON.World;\n    private rigidbodies: Map<Rigidbody, CANNON.Body> = new Map();       // 刚体和物理体的映射\n    private colliders: Map<Collider, CANNON.Shape> = new Map();         // 碰撞体和物理形状的映射\n    private shapes: Map<CANNON.Shape, CANNON.Body> = new Map();         // 物理形状和物理体的映射\n    private shapeIdToColliderMap: Map<number, Collider> = new Map();    // 形状ID和碰撞体的映射\n\n    // 重力\n    public get gravity(): Vector3 {\n        return new Vector3(this.world.gravity.x, this.world.gravity.y, this.world.gravity.z);\n    }\n    public set gravity(value: Vector3) {\n        this.world.gravity.set(value.x, value.y, value.z);\n    }\n\n    // 物理参数\n    public minPenetrationForPenalty: number = 0.05;\n    public bounceThreshold: number = 0.5;\n    public sleepVelocity: number = 0.14;\n    public sleepAngularVelocity: number = 0.14;\n    public maxAngularVelocity: number = 7;\n    public solverIterationCount: number = 6;\n\n    public init(): void {\n        // 创建物理世界\n        this.world = new CANNON.World();\n        this.world.gravity.set(0, -9.82, 0);\n        // @ts-ignore\n        this.world.broadphase = new CANNON.NaiveBroadphase();      // 碰撞检测算法\n        // @ts-ignore\n        this.world.solver.iterations = 10;                         // 约束求解迭代次数，影响精度\n        this.world.allowSleep = true;                              // 允许物体进入睡眠状态 \n    }\n\n    public update(): void {\n        if (!this.world) return;\n        // 更新物理世界\n        this.world.step(Time.fixedDeltaTime);\n        // 更新刚体位置和旋转\n        for (const [rigidbody, body] of this.rigidbodies) {\n            const pos = body.position;\n            const rot = body.quaternion;\n            rigidbody.transform.position = new Vector3(pos.x, pos.y, pos.z);\n            rigidbody.transform.rotation = new Quaternion(rot.x, rot.y, rot.z, rot.w);\n        }\n    }\n\n    public onDestroy(): void {\n    }\n\n    public CreateRigidbody(rigidbody: Rigidbody): void {\n        if (this.rigidbodies.has(rigidbody)) {\n            console.warn('Rigidbody already added:', rigidbody);\n            return;\n        }\n\n        const body = new CANNON.Body({\n            mass: rigidbody.isKinematic ? 0 : rigidbody.mass,\n            position: new CANNON.Vec3(rigidbody.transform.position.x, rigidbody.transform.position.y, rigidbody.transform.position.z),\n            quaternion: new CANNON.Quaternion(rigidbody.transform.rotation.x, rigidbody.transform.rotation.y, rigidbody.transform.rotation.z, rigidbody.transform.rotation.w),\n        })\n\n        if (body) {\n            this.world.addBody(body);\n            this.rigidbodies.set(rigidbody, body);\n        }\n    }\n\n    public RemoveRigidbody(rigidbody: Rigidbody): void {\n        const body = this.rigidbodies.get(rigidbody);\n        if (body) {\n            this.world.remove(body);\n            this.rigidbodies.delete(rigidbody);\n        }\n    }\n\n    public CreateCollider(collider: Collider): void {\n        const rigidbody = collider.attachedRigidbody;\n        if (!rigidbody) {\n            console.error('Collider not attached to a Rigidbody:', collider);\n            return;\n        }\n\n        // 如果已经存在，则先销毁旧的再新建\n        if (this.colliders.has(collider)) {\n            this.RemoveCollider(collider);\n        }\n\n        const body = this.rigidbodies.get(rigidbody);\n        if (body) {\n            let shape: CANNON.Shape | null = null;\n            const colliderData = collider.getColliderData();\n            if (collider instanceof BoxCollider) {\n                const boxData = colliderData as BoxColliderData;\n                shape = new CANNON.Box(new CANNON.Vec3(boxData.size.x / 2, boxData.size.y / 2, boxData.size.z / 2));\n            } else if (collider instanceof SphereCollider) {\n                const sphereData = colliderData as SphereColliderData;\n                shape = new CANNON.Sphere(sphereData.radius);\n            }\n            if (shape != null) {\n                const offset = new CANNON.Vec3(collider.center.x, collider.center.y, collider.center.z);\n                body.addShape(shape, offset);\n                this.shapes.set(shape, body);\n                this.colliders.set(collider, shape);\n                // 这里需要特别注意，碰撞或射线检测的形状，并不一定是现在添加的Shape，例如Box，会有一个凸多边形代理，射线检测是以它为目标计算的\n                if (shape instanceof CANNON.Box) {\n                    this.shapeIdToColliderMap.set((shape as CANNON.Box).convexPolyhedronRepresentation.id, collider);\n                }\n                else {\n                    this.shapeIdToColliderMap.set(shape.id, collider);\n                }\n            }\n        }\n        else {\n            console.error('Rigidbody not found:', rigidbody);\n        }\n    }\n\n    public RebuildColliders(collider: Collider): void {\n        const shape = this.colliders.get(collider);\n        if (shape == null) return;\n\n        this.RemoveCollider(collider);\n        this.CreateCollider(collider);\n        // 强制更新碰撞检测信息\n        //TODO:移除形状后，与它相邻的物体不会被激活，这不符合常理，暂时不知道怎么解决，这里手动唤醒下全部的物体\n        this.world.bodies.forEach(body => {\n            body.wakeUp();\n        });\n    }\n\n    public RemoveCollider(collider: Collider): void {\n        const shape = this.colliders.get(collider);\n        if (shape == null) return;\n        const body = this.shapes.get(shape);\n        if (body == null) return;\n\n        // 1. 找到目标形状的索引\n        const index = body.shapes.indexOf(shape);\n        if (index === -1) return; // 形状不存在则退出\n\n        // 2. 移除形状及对应的偏移和旋转信息\n        body.shapes.splice(index, 1);\n        body.shapeOffsets.splice(index, 1); // 移除对应的偏移\n        body.shapeOrientations.splice(index, 1); // 移除对应的旋转\n\n        // 3. 如果是动态刚体，重新计算惯性\n        if (body.mass > 0) {\n        }\n\n        // 4. 强制更新碰撞检测信息\n        // body.aabbNeedsUpdate = true;\n        //TODO:移除形状后，与它相邻的物体不会被激活，这不符合常理，暂时不知道怎么解决，这里手动唤醒下全部的物体\n        this.world.bodies.forEach(body => {\n            body.wakeUp();\n        });\n\n        this.shapes.delete(shape);\n        this.colliders.delete(collider);\n    }\n\n    public Raycast(\n        ray: Ray,\n        distance: number = 10,\n        layerMask?: number,\n    ): RaycastHit | null {\n        const result = new CANNON.RaycastResult();\n        const from = new CANNON.Vec3(ray.origin.x, ray.origin.y, ray.origin.z);\n        const to = new CANNON.Vec3(ray.at(distance).x, ray.at(distance).y, ray.at(distance).z);\n        this.world.rayTest(from, to, result);\n\n        // this.world.raycastAll(from, to, {\n        // }, (r) => {\n        //     const re = r as CANNON.RaycastResult;\n        //     console.log(re.shape?.id);\n        // });\n\n        if (result.hasHit && result.shape) {\n            // 注意，result.shape并不一定会是原来添加的Shape，例如Box，会有一个凸多边形代理，先前创建Box的时候已经在shapeIdToColliderMap里缓冲这个代理的ID了\n            const collider = this.shapeIdToColliderMap.get(result.shape.id);\n            if (!collider) {\n                console.error('Collider not found for shape:', result.shape);\n                return null;\n            }\n            const hit = RaycastHit.create(\n                new Vector3(result.hitPointWorld.x, result.hitPointWorld.y, result.hitPointWorld.z),\n                new Vector3(result.hitNormalWorld.x, result.hitNormalWorld.y, result.hitNormalWorld.z),\n                result.distance,\n                collider,\n            );\n            return hit;\n        }\n        return null;\n    }\n\n    // 通过 Ray 对象检测所有射线碰撞\n    public RaycastAll(\n        ray: Ray,\n        distance: number = Infinity,\n        layerMask: number\n    ): RaycastHit[] {\n        return [];\n    }\n}","import { Vector3 } from \"../Math/Vector3\";\nimport { Collider } from \"../Component/Collider\";\nimport { Transform } from \"../Core/Transform\";\nimport { Rigidbody } from \"../Component/RigidBody\";\n\n/**\n * Structure used to get information back from a raycast.\n */\nexport class RaycastHit {\n    private m_Point: Vector3 = Vector3.ZERO;\n    private m_Normal: Vector3 = Vector3.ZERO;\n    private m_Distance: number = 0;\n    private m_Collider: Collider;\n\n    /**\n     * The Collider that was hit.\n     */\n    public get collider(): Collider | null {\n        return this.m_Collider;\n    }\n\n    /**\n     * The impact point in world space where the ray hit the collider.\n     */\n    public get point(): Vector3 {\n        return this.m_Point;\n    }\n\n    /**\n     * The normal of the surface the ray hit.\n     */\n    public get normal(): Vector3 {\n        return this.m_Normal;\n    }\n\n    /**\n     * The distance from the ray's origin to the impact point.\n     */\n    public get distance(): number {\n        return this.m_Distance;\n    }\n\n    /**\n     * The Transform of the rigidbody or collider that was hit.\n     */\n    public get transform(): Transform | null {\n        const rb = this.rigidbody;\n        if (rb !== null) {\n            return rb.transform;\n        }\n\n        const col = this.collider;\n        if (col !== null) {\n            return col.transform;\n        }\n\n        return null;\n    }\n\n    /**\n     * The Rigidbody of the collider that was hit. If the collider is not attached to\n     * a rigidbody then it is null.\n     */\n    public get rigidbody(): Rigidbody | null {\n        return this.m_Collider?.attachedRigidbody;\n    }\n\n    /**\n     * Creates a new RaycastHit with default values.\n     */\n    public constructor() { }\n\n    /**\n     * Creates a new RaycastHit with the specified values.\n     * @param point The impact point\n     * @param normal The surface normal\n     * @param distance The distance from origin\n     * @param colliderInstanceID The collider instance ID\n     */\n    public static create(\n        point: Vector3,\n        normal: Vector3,\n        distance: number,\n        collider: Collider,\n    ): RaycastHit {\n        const hit = new RaycastHit();\n        hit.m_Point = point;\n        hit.m_Normal = normal;\n        hit.m_Distance = distance;\n        hit.m_Collider = collider;\n        return hit;\n    }\n\n    /**\n     * Returns a string representation of the RaycastHit.\n     */\n    public toString(): string {\n        return `RaycastHit(point: ${this.point}, normal: ${this.normal}, distance: ${this.distance}, collider: ${this.collider?.gameObject?.name || 'null'})`;\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Fragment, TriangleRasterizer } from \"./TriangleRasterizer\";\nimport { VertexAttributes } from \"../Renderer/RendererDefine\";\n\nexport class BarycentricTriangleRasterizer extends TriangleRasterizer {\n    /**\n     * 计算点 p 在三角形 (v0, v1, v2) 中的重心坐标。\n     * @param p 目标点（2D 坐标）\n     * @param v0 三角形顶点0（2D 坐标）\n     * @param v1 三角形顶点1（2D 坐标）\n     * @param v2 三角形顶点2（2D 坐标）\n     * @returns 重心坐标 [alpha, beta, gamma]\n     */\n    private static computeBarycentricCoords(\n        p: [number, number],\n        v0: Vector3,\n        v1: Vector3,\n        v2: Vector3\n    ): [number, number, number] {\n        const [x, y] = p;\n\n        // 计算整个三角形的面积（的两倍，有符号）\n        const areaABC = (v1.x - v0.x) * (v2.y - v0.y) - (v2.x - v0.x) * (v1.y - v0.y);\n\n        // 计算子三角形 PBC 的面积（的两倍，有符号）\n        const areaPBC = (v1.x - x) * (v2.y - y) - (v2.x - x) * (v1.y - y);\n        const alpha = areaPBC / areaABC;\n\n        // 计算子三角形 PCA 的面积（的两倍，有符号）\n        const areaPCA = (v2.x - x) * (v0.y - y) - (v0.x - x) * (v2.y - y);\n        const beta = areaPCA / areaABC;\n\n        // 计算子三角形 PAB 的面积（的两倍，有符号）\n        const areaPAB = (v0.x - x) * (v1.y - y) - (v1.x - x) * (v0.y - y);\n        const gamma = areaPAB / areaABC;\n        // 或者 gamma = 1 - alpha - beta;\n\n        return [alpha, beta, gamma];\n    }\n\n    /**\n     * 对三角形进行栅格化并插值顶点属性\n     * @param v0 第一个顶点的屏幕坐标\n     * @param v1 第二个顶点的屏幕坐标\n     * @param v2 第三个顶点的屏幕坐标\n     * @param attrs0 第一个顶点的所有属性\n     * @param attrs1 第二个顶点的所有属性\n     * @param attrs2 第三个顶点的所有属性\n     * @returns 所有像素及其插值后的属性\n     */\n    public static rasterizeTriangle(\n        v0: Vector3,\n        v1: Vector3,\n        v2: Vector3,\n        attrs0: VertexAttributes,\n        attrs1: VertexAttributes,\n        attrs2: VertexAttributes\n    ): Fragment[] {\n        const fragments: Fragment[] = [];\n\n        // 1. 计算三角形的包围盒\n        const minX = Math.floor(Math.min(v0.x, v1.x, v2.x));\n        const maxX = Math.ceil(Math.max(v0.x, v1.x, v2.x));\n        const minY = Math.floor(Math.min(v0.y, v1.y, v2.y));\n        const maxY = Math.ceil(Math.max(v0.y, v1.y, v2.y));\n\n        // 2. 遍历边界框内的每一个像素点\n        for (let y = minY; y <= maxY; y++) {\n            for (let x = minX; x <= maxX; x++) {\n                const pixel: [number, number] = [x, y];\n\n                // 3. 计算当前像素点的重心坐标\n                const [alpha, beta, gamma] = this.computeBarycentricCoords(pixel, v0, v1, v2);\n\n                // 4. 判断点是否在三角形内部（重心坐标均非负，且近似和为1）\n                const tolerance = 1e-5; // 浮点数精度容差\n                if (\n                    alpha >= -tolerance &&\n                    beta >= -tolerance &&\n                    gamma >= -tolerance &&\n                    Math.abs(alpha + beta + gamma - 1) < tolerance\n                ) {\n                    // 5. 使用重心坐标作为权重对属性进行插值\n                    // 例如，如果 T 是 number: interpolatedValue = alpha * v0.attr + beta * v1.attr + gamma * v2.attr;\n                    // 如果 T 是数组，需要每个分量分别计算。\n                    const interpolatedAttrs = this.interpolateAttributes(\n                        attrs0, attrs1, attrs2, alpha, beta, gamma\n                    );\n\n                    // 6. 深度值，需要单独额外插值计算\n                    const z = this.interpolateNumber(v0.z, v1.z, v2.z, alpha, beta, gamma);\n\n                    // 添加到片段列表\n                    fragments.push({\n                        x, y, z,\n                        attributes: interpolatedAttrs\n                    });\n                }\n            }\n        }\n\n        return fragments;\n    }\n\n    /**\n     * 基于 barycentric 坐标插值顶点属性，支持多种类型\n     */\n    private static interpolateAttributes(\n        a: VertexAttributes,\n        b: VertexAttributes,\n        c: VertexAttributes,\n        w: number,  // 顶点a的权重\n        u: number, // 顶点b的权重\n        v: number // 顶点c的权重\n    ): VertexAttributes {\n        const result: VertexAttributes = {};\n\n        // 获取所有属性名称并验证\n        const attributeNames = Object.keys(a);\n        this.validateAttributes(attributeNames, b, c);\n\n        // 对每个属性进行插值\n        for (const name of attributeNames) {\n            const valA = a[name];\n            const valB = b[name];\n            const valC = c[name];\n\n            // 根据属性类型执行相应的插值\n            if (typeof valA === 'number') {\n                // 标量插值\n                result[name] = this.interpolateNumber(\n                    valA as number,\n                    valB as number,\n                    valC as number,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Color) {\n                // Color插值\n                result[name] = this.interpolateColor(\n                    valA,\n                    valB as Color,\n                    valC as Color,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Vector2) {\n                // Vector2插值\n                result[name] = this.interpolateVector2(\n                    valA,\n                    valB as Vector2,\n                    valC as Vector2,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Vector3) {\n                // Vector3插值\n                result[name] = this.interpolateVector3(\n                    valA,\n                    valB as Vector3,\n                    valC as Vector3,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Vector4) {\n                // Vector4插值\n                result[name] = this.interpolateVector4(\n                    valA,\n                    valB as Vector4,\n                    valC as Vector4,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Matrix4x4) {\n                // 矩阵插值 - 对矩阵的每个元素分别插值\n                result[name] = this.interpolateMatrix4x4(\n                    valA,\n                    valB as Matrix4x4,\n                    valC as Matrix4x4,\n                    w, u, v\n                );\n            }\n            else {\n                throw new Error(`不支持的属性类型: ${typeof valA} 用于属性 ${name}`);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * 验证所有顶点是否具有相同的属性\n     */\n    private static validateAttributes(attributeNames: string[], ...otherAttrs: VertexAttributes[]) {\n        for (const attrs of otherAttrs) {\n            for (const name of attributeNames) {\n                if (!(name in attrs)) {\n                    throw new Error(`顶点属性不匹配: 缺少属性 ${name}`);\n                }\n            }\n\n            for (const name of Object.keys(attrs)) {\n                if (!attributeNames.includes(name)) {\n                    throw new Error(`顶点属性不匹配: 存在额外属性 ${name}`);\n                }\n            }\n        }\n    }\n\n    /**\n     * 插值标量\n     */\n    private static interpolateNumber(a: number, b: number, c: number, w: number, u: number, v: number): number {\n        return a * w + b * u + c * v;\n    }\n\n    /**\n     * 插值Color\n     */\n    private static interpolateColor(a: Color, b: Color, c: Color, w: number, u: number, v: number): Color {\n        return new Color(\n            a.r * w + b.r * u + c.r * v,\n            a.g * w + b.g * u + c.g * v,\n            a.b * w + b.b * u + c.b * v,\n            a.a * w + b.a * u + c.a * v\n        );\n    }\n\n    /**\n     * 插值Vector2\n     */\n    private static interpolateVector2(a: Vector2, b: Vector2, c: Vector2, w: number, u: number, v: number): Vector2 {\n        return new Vector2(\n            a.x * w + b.x * u + c.x * v,\n            a.y * w + b.y * u + c.y * v\n        );\n    }\n\n    /**\n     * 插值Vector3\n     */\n    private static interpolateVector3(a: Vector3, b: Vector3, c: Vector3, w: number, u: number, v: number): Vector3 {\n        return new Vector3(\n            a.x * w + b.x * u + c.x * v,\n            a.y * w + b.y * u + c.y * v,\n            a.z * w + b.z * u + c.z * v\n        );\n    }\n\n    /**\n     * 插值Vector4\n     */\n    private static interpolateVector4(a: Vector4, b: Vector4, c: Vector4, w: number, u: number, v: number): Vector4 {\n        return new Vector4(\n            a.x * w + b.x * u + c.x * v,\n            a.y * w + b.y * u + c.y * v,\n            a.z * w + b.z * u + c.z * v,\n            a.w * w + b.w * u + c.w * v\n        );\n    }\n\n    /**\n     * 插值4x4矩阵 - 对矩阵的每个元素分别进行插值\n     */\n    private static interpolateMatrix4x4(a: Matrix4x4, b: Matrix4x4, c: Matrix4x4, w: number, u: number, v: number): Matrix4x4 {\n        const result = new Matrix4x4();\n        for (let row = 0; row < 4; row++) {\n            for (let col = 0; col < 4; col++) {\n                result.matrix[row][col] = a.matrix[row][col] * w + b.matrix[row][col] * u + c.matrix[row][col] * v;\n            }\n        }\n        return result;\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Transform } from \"../Core/Transform\";\nimport { Renderer } from \"../Component/Renderer\";\nimport { MeshRenderer } from \"../Component/MeshRenderer\";\nimport { Camera, CameraClearFlags } from \"../Component/Camera\";\nimport { Engine } from \"../Core/Engine\";\nimport { EngineConfig, RenderSettings } from \"../Core/Setting\";\nimport { Mesh } from \"../Resources/Mesh\";\nimport { BarycentricTriangleRasterizer } from \"./BarycentricTriangleRasterizer\"\nimport { TransformTools } from \"../Math/TransformTools\";\nimport { Debug } from \"../Utils/Debug\";\nimport { CullMode, depthTest, StencilOp, stencilTest, ZTest, ColorMask, applyColorMask, RenderType, applyStencilOperation, blendColors } from \"./RendererDefine\";\nimport { GameObject } from \"../Core/GameObject\";\nimport { Gizmo } from \"../Utils/Gizmo\";\n\nenum DrawMode {\n    Wireframe = 1,\n    Point = 2,\n    Shader = 4,\n}\n\nexport class RasterizationPipeline {\n    public drawMode: DrawMode = DrawMode.Shader;\n\n    // 缓冲区\n    private frameBuffer: Uint32Array;\n    private depthBuffer: Float32Array;\n    private stencilBuffer: Uint8Array;\n    private overdrawBuffer: Uint32Array;\n\n    // 上下文内容\n    private currentCamera: Camera;\n    private currentRendererObjs: MeshRenderer[];\n\n    constructor(frameBuffer: Uint32Array) {\n        this.frameBuffer = frameBuffer;\n        this.depthBuffer = new Float32Array(EngineConfig.canvasWidth * EngineConfig.canvasHeight);\n        this.stencilBuffer = new Uint8Array(EngineConfig.canvasWidth * EngineConfig.canvasHeight);\n        this.overdrawBuffer = new Uint32Array(EngineConfig.canvasWidth * EngineConfig.canvasHeight);\n    }\n\n    public Render() {\n        const rootObject = Engine.sceneManager.getActiveScene()?.getRootGameObject();\n        if (rootObject) {\n            const cameras = Camera.cameras;\n            // 相机depth越低越早渲染\n            cameras.sort((a, b) => a.depth - b.depth);\n            // 每个相机渲染一遍\n            for (let i = 0, len = cameras.length; i < len; i++) {\n                this.currentCamera = cameras[i];\n                this.Clear(this.currentCamera);\n                this.currentRendererObjs = rootObject.getComponentsInChildren(MeshRenderer);\n\n                const opaqueRendererObjs: MeshRenderer[] = [];\n                const transparentRendererObjs: MeshRenderer[] = [];\n\n                // 渲染管线1.视锥体剔除并对场景物体进行排序\n                const viewMatrix = this.currentCamera.getViewMatrix();\n                for (let j = 0, len = this.currentRendererObjs.length; j < len; j++) {\n                    const renderer = this.currentRendererObjs[j];\n                    const shader = renderer.material.shader;\n                    if (shader == null) continue;\n\n                    // 视锥体剔除\n                    if (this.FrustumCulling(renderer)) continue;\n\n                    // 存储Z值用于后续排序\n                    const viewPos = viewMatrix.multiplyVector4(new Vector4(renderer.transform.worldPosition, 1));\n                    (renderer as any).viewZ = viewPos.z;\n\n                    // 归类\n                    const renderType = shader.renderType;\n                    if (renderType == RenderType.Opaque) {\n                        opaqueRendererObjs.push(renderer);\n                    }\n                    else if (renderType == RenderType.Transparent) {\n                        transparentRendererObjs.push(renderer);\n                    }\n                }\n                // 对不透明物体进行排序：从前往后，降低overdraw\n                opaqueRendererObjs.sort((a, b) => {\n                    return (a as any).viewZ - (b as any).viewZ;\n                });\n                // 对透明物体进行排序：从后往前，先绘制远的，颜色混合才能正确\n                transparentRendererObjs.sort((a, b) => {\n                    return (b as any).viewZ - (a as any).viewZ;\n                });\n\n                // 渲染管线2.按照先不透明再天空盒再透明的顺序绘画\n                for (const obj of opaqueRendererObjs) {\n                    this.DrawObject(obj);\n                }\n                // 绘制天空盒\n                if (this.drawMode == DrawMode.Shader) this.DrawSkybox(this.currentCamera);\n                // 绘制透明物体\n                for (const obj of transparentRendererObjs) {\n                    this.DrawObject(obj);\n                }\n            }\n            // 调试信息\n            this.DebugDraw();\n        }\n    }\n\n    //#region 基础绘制接口\n\n    public Clear(camera: Camera): void {\n\n        const clearFlags = camera.clearFlags;\n        const viewport = camera.viewPort;\n        const backgroundColor = camera.backGroundColor;\n\n        // 1. 计算视口在屏幕缓冲区中的像素范围\n        const viewportPixelX = Math.floor(viewport.x * EngineConfig.canvasWidth);\n        const viewportPixelY = Math.floor(viewport.y * EngineConfig.canvasHeight);\n        const viewportPixelWidth = Math.floor(viewport.z * EngineConfig.canvasWidth);\n        const viewportPixelHeight = Math.floor(viewport.w * EngineConfig.canvasHeight);\n\n        // 2. 根据清除标志，清除视口对应的区域\n        if (camera.clearFlags == CameraClearFlags.Skybox) {\n            this.clearViewportRegion(this.frameBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, 0);\n        }\n        else if (clearFlags == CameraClearFlags.Color) {\n            this.clearViewportRegion(this.frameBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, backgroundColor.ToUint32());\n        }\n\n        if (clearFlags != CameraClearFlags.None) {\n            this.clearViewportRegion(this.depthBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, 1);\n            this.clearViewportRegion(this.stencilBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, 0);\n        }\n\n        this.clearViewportRegion(this.overdrawBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, 0);\n    }\n\n    /**\n     * 清除缓冲区中指定矩形区域的辅助方法\n     * @param buffer 目标缓冲区 (Uint32Array 或 Float32Array 等)\n     * @param x 区域起始X坐标 (像素)\n     * @param y 区域起始Y坐标 (像素)\n     * @param width 区域宽度 (像素)\n     * @param height 区域高度 (像素)\n     * @param value 要填充的值\n     */\n    private clearViewportRegion(buffer: Uint32Array | Float32Array | Uint8Array, x: number, y: number, width: number, height: number, value: number): void {\n        // 如果是满屏幕，则快速填充\n        if (x == 0 && y == 0 && width == EngineConfig.canvasWidth && height == EngineConfig.canvasHeight) {\n            buffer.fill(value);\n            return;\n        }\n\n        const canvasWidth = EngineConfig.canvasWidth;\n        for (let row = y; row < y + height; row++) {\n            const startIndex = row * canvasWidth + x;\n            const endIndex = startIndex + width;\n            // 使用 subarray 和 fill 来填充一行中的连续区域，比逐个像素设置更快\n            buffer.subarray(startIndex, endIndex).fill(value);\n        }\n    }\n\n    private DrawSkybox(camera: Camera): void {\n        if (camera.clearFlags !== CameraClearFlags.Skybox) return;\n        if (!RenderSettings.skybox) return;\n\n        // 获取相机的视图和投影矩阵\n        const viewMatrix = camera.getViewMatrix();\n        // 修正视图矩阵：移除平移，只保留旋转\n        viewMatrix.setTranslate(Vector3.ZERO);\n        const projectionMatrix = camera.getProjectionMatrix();\n        // 计算逆视图投影矩阵，用于将屏幕坐标转换为世界方向\n        const invViewProj = projectionMatrix.multiply(viewMatrix).invert();\n\n        // 视口像素范围计算\n        const viewport = camera.viewPort;\n        const viewportPixelX = Math.floor(viewport.x * EngineConfig.canvasWidth);\n        const viewportPixelY = Math.floor(viewport.y * EngineConfig.canvasHeight);\n        const viewportPixelWidth = Math.floor(viewport.z * EngineConfig.canvasWidth);\n        const viewportPixelHeight = Math.floor(viewport.w * EngineConfig.canvasHeight);\n\n        // 遍历视口内的像素\n        for (let y = viewportPixelY; y < viewportPixelY + viewportPixelHeight; y++) {\n            for (let x = viewportPixelX; x < viewportPixelX + viewportPixelWidth; x++) {\n                // 检查深度缓冲，如果该像素已有物体则跳过\n                const depth = this.depthBuffer[y * EngineConfig.canvasWidth + x];\n                if (depth < 0.999) continue; // 使用接近1的值避免精度问题\n\n                // 将屏幕坐标转换为标准化设备坐标(NDC)，基于视口而非整个画布\n                const ndcX = ((x - viewportPixelX) / viewportPixelWidth) * 2 - 1;\n                const ndcY = 1 - ((y - viewportPixelY) / viewportPixelHeight) * 2;\n\n                // 创建NDC空间中的点（远平面）\n                const ndcPos = new Vector4(ndcX, ndcY, 1.0, 1.0);\n\n                // 将NDC坐标转换为世界空间方向\n                const worldDir = invViewProj.multiplyVector4(ndcPos);\n                const direction = new Vector3(worldDir.x, worldDir.y, worldDir.z).normalize();\n\n                // 采样天空盒并绘制像素\n                const skyColor = RenderSettings.skybox.SampleCube(direction);\n                this.DrawPixel(x, y, skyColor);\n            }\n        }\n    }\n\n    public DrawPixel(x: number, y: number, color: Color, countOverdraw: boolean = false) {\n        // 绘制到屏幕上的像素应该是整数的\n        // 优化: 使用位运算代替Math.floor，提升性能\n        x = (x | 0);\n        y = (y | 0);\n        // x = Math.floor(x);\n        // y = Math.floor(y);\n\n        if (x < 0 || x >= EngineConfig.canvasWidth || y < 0 || y >= EngineConfig.canvasHeight) {\n            return;\n        }\n\n        const index = y * EngineConfig.canvasWidth + x;\n        this.frameBuffer[index] = color.ToUint32();\n        // Overdraw计数\n        if (countOverdraw) this.overdrawBuffer[index]++\n    }\n\n    public DrawLine(x1: number, y1: number, x2: number, y2: number, color1: Color, color2?: Color) {\n        // 使用位运算优化边界检查\n        // 画线前要进行边检查，确保线的两端点都在屏幕内，如果线的范围很长并且不在屏幕范围内，都进行计算会造成浪费大量的资源，裁剪掉超出的部分\n        const w = EngineConfig.canvasWidth;\n        const h = EngineConfig.canvasHeight;\n        if (((x1 | y1) < 0) || (x1 >= w) || (y1 >= h) || ((x2 | y2) < 0) || (x2 >= w) || (y2 >= h)) {\n            //TODO:裁剪掉超出屏幕的部分\n            return;\n        }\n\n        // 取整\n        x1 = x1 | 0;\n        y1 = y1 | 0;\n        x2 = x2 | 0;\n        y2 = y2 | 0;\n\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const length = Math.max(Math.abs(dx), Math.abs(dy));\n\n        // 为何要区分斜率是否偏水平还是垂直呢？因为如果不区分，例如当斜率大于1时，会导致直线绘制不连续，因为y会跳变，而不是连续的增加。\n        // 只有斜率刚好为1时，x跟y才是连续同步自增的，x+1，则y也+1\n        // 所以，当斜率大于1时，我们需要使用y作为循环变量，而当斜率小于1时，我们需要使用x作为循环变量。\n        // 举个极端例子，当斜率为0时，直线就是一条垂直直线，如果这时候还用x作为循环变量，则会导致这条直线上所有y点都对应一个x，也就是说这条线变成一个点了。\n\n        // 斜率小于1，直线偏水平情况，使用x作为循环变量\n        if (Math.abs(dx) > Math.abs(dy)) {\n            // 下面的循环绘制函数是从左往右的，这里要确保结束点在开始点的右边\n            if (x2 < x1) {\n                [x1, y1, x2, y2] = [x2, y2, x1, y1];\n                // 同时交换颜色\n                if (color2 !== undefined) [color1, color2] = [color2, color1];\n            }\n\n            // 斜率\n            const a = dy / dx;\n            // 截距（y=ax+b，b=y-ax）\n            // const b = y1 - a * x1;\n            let y = y1;\n            // 绘制直线\n            for (let x = x1; x <= x2; x++) {\n                // 计算插值因子 (0 到 1)\n                const t = length > 0 ? (x - x1) / length : 0;\n                // 根据是否有第二个颜色决定使用单一颜色还是插值\n                const color = color2 !== undefined ? this.interpolateColor(color1, color2, t) : color1;\n\n                this.DrawPixel(x, y, color);\n                // 直线公式y=ax+b，这里不必计算这个公式，因为当x加1自增时，y也会加a，所以可以直接用y+a代替ax+b，算是一个性能优化点\n                // y = a * x + b;\n                y = y + a;\n            }\n\n            // 或\n            // const ys = this.Interpolate(x1, y1, x2, y2);\n            // for (let x = x1; x <= x2; x++) {\n            //     this.DrawPixel(x, ys[x - x1], color);\n            // }\n        }\n        // 斜率大于1，直线偏垂直情况，使用y作为循环变量\n        else {\n            if (y2 < y1) {\n                [x1, y1, x2, y2] = [x2, y2, x1, y1];\n                // 同时交换颜色\n                if (color2 !== undefined) [color1, color2] = [color2, color1];\n            }\n\n            const a = dx / dy;\n            let x = x1;\n            for (let y = y1; y <= y2; y++) {\n                // 计算插值因子 (0 到 1)\n                const t = length > 0 ? (y - y1) / length : 0;\n                // 根据是否有第二个颜色决定使用单一颜色还是插值\n                const color = color2 !== undefined ? this.interpolateColor(color1, color2, t) : color1;\n\n                this.DrawPixel(x, y, color);\n                x = x + a;\n            }\n\n            // 或\n            // const xs = this.Interpolate(y1, x1, y2, x2);\n            // for (let y = y1; y <= y2; y++) {\n            //     this.DrawPixel(xs[y - y1], y, color);\n            // }\n        }\n    }\n\n    public DrawTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, color: Color) {\n        this.DrawLine(x1, y1, x2, y2, color);\n        this.DrawLine(x2, y2, x3, y3, color);\n        this.DrawLine(x3, y3, x1, y1, color);\n    }\n\n    //#endregion\n\n    //#region 变换\n\n    /*\n     * 顶点处理阶段：模型空间 →（模型矩阵）→ 世界空间 →（视图矩阵）→ 观察空间 →（投影矩阵）→ 裁剪空间 →（透视除法）→ NDC 空间 →（视口变换）→ 屏幕空间 → 光栅化渲染\n     */\n    public VertexProcessingStage(vertices: Vector3[], transform: Transform): Vector3[] {\n        const outVertices = new Array(vertices.length);\n\n        // 1. MVP变换到裁剪空间\n        // 模型空间 -> 世界空间 -> 观察空间 -> 裁剪空间\n        // 2. 透视除法：将裁剪空间坐标转换为标准设备坐标（NDC）\n        // 裁剪空间 -> 标准化设备坐标（NDC 空间）\n        // 3. 视口变换：将NDC坐标映射到屏幕坐标\n        // 标准化设备坐标（NDC 空间） -> 屏幕空间\n        for (let i = 0; i < vertices.length; i += 1) {\n            const out = TransformTools.ModelToScreenPos(vertices[i], transform.localToWorldMatrix, this.currentCamera);\n            outVertices[i] = new Vector3(out.screen.x, out.screen.y, out.depth);\n        }\n\n        return outVertices;\n    }\n\n    //#endregion\n\n    //#region 剔除裁剪\n\n    // 视锥体剔除\n    public FrustumCulling(obj: MeshRenderer): boolean {\n        const bounds = obj.mesh?.bounds;\n        if (bounds == null || bounds.length <= 0) return true;\n\n        const modelMatrix = obj.transform.localToWorldMatrix;\n\n        for (let i = 0; i < bounds.length; i++) {\n            const bound = bounds[i];\n            // TODO:待优化，只使用2个极值点即可，这里用了全部8个点来计算\n            for (let j = 0; j < bound.vertices.length; j++) {\n                const vertex = bound.vertices[j];\n                const worldPos = modelMatrix.multiplyVector4(new Vector4(vertex, 1));\n                if (this.currentCamera.isPointInFrustum(new Vector3(worldPos.x, worldPos.y, worldPos.z))) {\n                    // 只要有任何一个点在视锥体内，则该物体可见，不该被裁剪\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    // 背面剔除\n    public FaceCulling(triangles: number[], mesh: Mesh, renderer: Renderer, cullMode: CullMode) {\n        if (cullMode === CullMode.Off) return triangles;\n\n        // A.屏幕空间三角形顶点顺序法\n        // 这里只是做个示范，实际上这一步骤可以放到顶点着色器之后，就可以少顶点变换计算（但缺点就是多了很多顶点着色器计算，不过在GPU中这都不算什么）\n        // const visibleTriangles: number[] = [];\n        // const modelMatrix = renderer.transform.localToWorldMatrix;\n        // const viewMatrix = this.currentCamera.getViewMatrix();\n        // const projectionMatrix = this.currentCamera.getProjectionMatrix();\n        // const mvpMatrix = projectionMatrix.multiply(viewMatrix).multiply(modelMatrix);\n        // for (let i = 0; i < triangles.length; i += 3) {\n        //     const v1 = mesh.vertices[triangles[i + 0]];\n        //     const v2 = mesh.vertices[triangles[i + 1]];\n        //     const v3 = mesh.vertices[triangles[i + 2]];\n        //     // 转换到裁剪空间\n        //     const p1 = mvpMatrix.multiplyVector4(new Vector4(v1, 1));\n        //     const p2 = mvpMatrix.multiplyVector4(new Vector4(v2, 1));\n        //     const p3 = mvpMatrix.multiplyVector4(new Vector4(v3, 1));\n        //     // 检查 w 分量有效性\n        //     if (p1.w === 0 || p2.w === 0 || p3.w === 0) {\n        //         continue;\n        //     }\n        //     // 裁剪空间转 NDC（透视除法）\n        //     const p1NDC = { x: p1.x / p1.w, y: p1.y / p1.w };\n        //     const p2NDC = { x: p2.x / p2.w, y: p2.y / p2.w };\n        //     const p3NDC = { x: p3.x / p3.w, y: p3.y / p3.w };\n        //     // 计算叉积判断环绕顺序（假设逆时针为正面）\n        //     const cross = (p2NDC.x - p1NDC.x) * (p3NDC.y - p1NDC.y) -\n        //         (p2NDC.y - p1NDC.y) * (p3NDC.x - p1NDC.x);\n        //     // 保留正面三角形（cross < 0 表示逆时针）\n        //     if (cross < 0) {\n        //         visibleTriangles.push(triangles[i + 0], triangles[i + 1], triangles[i + 2]);\n        //     }\n        // }\n\n        // B.观察空间法向量与视线方向的点积判断法\n        const visibleTriangles: number[] = [];\n        const faceNormals = mesh.faceNormals;\n        const faceCenters = mesh.faceCenters;\n        const cameraPosition = this.currentCamera.transform.position;\n\n        // 获取模型矩阵（模型本地空间到世界空间的变换矩阵）\n        const modelMatrix = renderer.transform.localToWorldMatrix;\n        // 计算法线矩阵：模型矩阵的逆矩阵的转置\n        const normalMatrix = renderer.transform.localToWorldNormalMatrix;\n\n        for (let i = 0; i < faceNormals.length; i++) {\n            // 要把Vec3转为齐次坐标点，即w=1\n            const world_center = new Vector3(modelMatrix.multiplyVector4(new Vector4(faceCenters[i], 1)));\n            // 要把Vec3转为齐次坐向量，即w=0\n            const world_normal = normalMatrix.multiplyVector3(faceNormals[i]);\n\n            // 2.获取面的中心到摄像机的向量\n            const centerToCamera = Vector3.subtract(cameraPosition, world_center);\n\n            // 3.计算这2个向量的夹角\n            const dot = world_normal.dot(centerToCamera);\n\n            // 4.判断夹角是否大于等于0°小于90°\n            if ((cullMode === CullMode.Back && dot > 0) || (cullMode === CullMode.Front && dot < 0)) {\n                const triIndex = i * 3;\n                visibleTriangles.push(triangles[triIndex], triangles[triIndex + 1], triangles[triIndex + 2]);\n            }\n        }\n\n        return visibleTriangles;\n    }\n\n    // 遮挡剔除\n    public OcclusionCulling() {\n\n    }\n\n    public ClipTriangle(triangle: Vector3[]) {\n\n    }\n\n    //#endregion\n\n    //#region 绘制物体\n\n    public DrawObject(renderer: MeshRenderer) {\n        const mesh = renderer.mesh;\n        if (!mesh) return;\n\n        const shader = renderer.material.shader;\n        if (!shader) return;\n        shader.init(renderer.transform, this.currentCamera);\n\n        // 渲染所有通道\n        shader.passes.forEach(pass => {\n            const renderType = shader.renderType;\n            const renderState = pass.renderState ?? {};\n            const colorMask = renderState.colorMask ?? ColorMask.All;\n            const cullMode = renderState.cullMode ?? CullMode.Back;\n            const zTest = renderState.zTest ?? ZTest.Less;\n            const zWrite = pass.renderState?.zWrite ?? true;\n            const blend = pass.renderState?.blend;\n            const stencil = pass.renderState?.stencil;\n\n            let triangles = mesh.triangles;\n\n            // 渲染管线3.背面剔除\n            triangles = this.FaceCulling(triangles, mesh, renderer, cullMode);\n            // 渲染管线4.遮挡剔除\n            this.OcclusionCulling();\n\n            for (let i = 0; i < triangles.length; i += 3) {\n                // 渲染管线5.顶点着色器(MVP变换)\n                const { vertexOut: v1, attrOut: v1Attr } = pass.vert({\n                    vertex: mesh.vertices[triangles[i]],\n                    uv: mesh.uv[triangles[i]],\n                    normal: mesh.normals[triangles[i]],\n                    tangent: mesh.tangents[triangles[i]],\n                });\n                const { vertexOut: v2, attrOut: v2Attr } = pass.vert({\n                    vertex: mesh.vertices[triangles[i + 1]],\n                    uv: mesh.uv[triangles[i + 1]],\n                    normal: mesh.normals[triangles[i + 1]],\n                    tangent: mesh.tangents[triangles[i + 1]],\n                });\n                const { vertexOut: v3, attrOut: v3Attr } = pass.vert({\n                    vertex: mesh.vertices[triangles[i + 2]],\n                    uv: mesh.uv[triangles[i + 2]],\n                    normal: mesh.normals[triangles[i + 2]],\n                    tangent: mesh.tangents[triangles[i + 2]],\n                });\n\n                // 渲染管线6.屏幕映射\n                const p1 = TransformTools.ClipToScreenPos(v1, this.currentCamera);\n                const p2 = TransformTools.ClipToScreenPos(v2, this.currentCamera);\n                const p3 = TransformTools.ClipToScreenPos(v3, this.currentCamera);\n\n                // 渲染管线7.裁剪\n                // 画三角形前要进行边检查，确保三角形的三个点都在屏幕内，如果有点超出屏幕范围，则裁剪，并生成新的三角形\n                // 简单粗暴的裁剪，有点在屏幕外直接抛弃\n                const w = EngineConfig.canvasWidth;\n                const h = EngineConfig.canvasHeight;\n                if (((p1.x | p1.y) < 0) || (p1.x >= w) || (p1.y >= h) || ((p2.x | p2.y) < 0) || (p2.x >= w) || (p2.y >= h) || ((p3.x | p3.y) < 0) || (p3.x >= w) || (p3.y >= h)) {\n                    continue;\n                }\n\n                if (this.drawMode & DrawMode.Wireframe) {\n                    this.DrawTriangle(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, Color.WHITE);\n                }\n                if (this.drawMode & DrawMode.Point) {\n                    this.DrawPixel(p1.x, p1.y, Color.WHITE);\n                    this.DrawPixel(p2.x, p2.y, Color.WHITE);\n                    this.DrawPixel(p3.x, p3.y, Color.WHITE);\n                }\n                if (this.drawMode & DrawMode.Shader) {\n                    // 渲染管线8.光栅化\n                    const fragments = BarycentricTriangleRasterizer.rasterizeTriangle(p1, p2, p3, v1Attr, v2Attr, v3Attr);\n\n                    for (let i = 0; i < fragments.length; i++) {\n                        const fragment = fragments[i];\n                        const x = fragment.x;\n                        const y = fragment.y;\n                        const z = fragment.z;\n\n                        // 检查坐标是否在屏幕范围内\n                        if (x < 0 || x >= EngineConfig.canvasWidth ||\n                            y < 0 || y >= EngineConfig.canvasHeight) {\n                            return;\n                        }\n\n                        // 获取当前缓冲区里的值\n                        const index = y * EngineConfig.canvasWidth + x;\n                        const currentBufferColor = Color.FromUint32(this.frameBuffer[index]);\n                        const currentBufferDepth = this.depthBuffer[index];\n                        const currentBufferStencil = this.stencilBuffer[index];\n\n                        // 渲染管线9.早期深度测试\n                        const depthTestResult = depthTest(z, currentBufferDepth, zTest);\n                        if (!depthTestResult) continue;\n\n                        // 渲染管线10.模板测试\n                        if (stencil) {\n                            const stencilTestResult = stencilTest(currentBufferStencil, stencil.ref, stencil.comparisonOperation, stencil.readMask);\n                            // 执行模板操作（根据测试结果和深度测试结果）\n                            let operation: StencilOp | undefined;\n                            if (stencilTestResult) { operation = depthTestResult ? stencil.passOperation : stencil.zFailOperation; }\n                            else { operation = stencil.failOperation; }\n                            // 应用操作更新模板值\n                            const newValue = applyStencilOperation(currentBufferStencil, stencil.ref, operation, stencil.writeMask);\n                            // 更新模板缓冲区\n                            this.stencilBuffer[index] = newValue;\n                            // 模板测试失败跳过像素\n                            if (!stencilTestResult) continue;\n                        }\n\n                        // 渲染管线11.像素着色器\n                        let pixelColor = pass.frag(fragment.attributes);\n                        // 像素被丢弃，可能是Alpha测试失败\n                        if (!pixelColor) continue;\n\n                        // 渲染管线12.根据 zWrite 标志决定是否写入深度缓冲区\n                        // 如果没设置zWrite，则默认允许写入，否则就判断zWrite值\n                        if (zWrite) {\n                            this.depthBuffer[index] = z;\n                        }\n\n                        // 渲染管线13.颜色混合\n                        if (blend) {\n                            const existingColor = Color.FromUint32(this.frameBuffer[index]);\n                            pixelColor = blendColors(pixelColor, existingColor, blend.src, blend.dst, blend.op);\n                        }\n\n                        // 渲染管线13.绘制像素到帧缓冲\n                        // 根据颜色掩码决定最终写入的分量（未启用的通道保留原有值）\n                        applyColorMask(pixelColor, currentBufferColor, colorMask);\n                        // 如果是不透明着色，alpha通道强行输出1\n                        if (renderType === RenderType.Opaque) pixelColor.a = 1;\n                        this.DrawPixel(x, y, pixelColor, true);\n                    }\n                }\n            }\n        });\n    }\n\n    //#endregion\n\n    //#region 工具函数\n\n    private DebugDraw(): void {\n        // 绘制包围盒\n        // this.DrawBounds();\n\n        // 绘制法线跟切线\n        // this.DrawNormal();\n\n        // 绘制深度纹理\n        // this.DrawDepthBuffer();\n\n        // 绘制Overdarw\n        // this.DrawOverdraw();\n\n        // 绘制模板缓冲区\n        // this.DrawStencilBuffer();\n\n        // 绘制物理调试信息\n        // PhysicsDebugDraw.DrawPhysicsDebug(this.DrawLine.bind(this));\n\n        // 绘制Gizmo\n        this.DrawGizmo(Engine.sceneManager.getActiveScene()?.getRootGameObject() || null);\n\n        // 绘制调试线\n        const lines = Debug.GetDebugLines();\n        lines.forEach(line => {\n            this.DrawLine(line.start.x, line.start.y, line.end.x, line.end.y, line.color);\n        });\n    }\n\n    private DrawGizmo(obj: GameObject | null): void {\n        if (!obj) return;\n        const components = obj.getAllComponents();\n        for (const component of components) {\n            if (typeof (component as any).onDrawGizmos === 'function') {\n                (component as any).onDrawGizmos();\n                Gizmo.Reset();\n            }\n        }\n        // 绘制子物体\n        for (const child of obj.transform.children) {\n            this.DrawGizmo(child.gameObject);\n        }\n    }\n\n    private DrawNormal(): void {\n        for (const renderer of this.currentRendererObjs) {\n            const mesh = renderer.mesh;\n            if (!mesh) return;\n            const modelMatrix = renderer.transform.localToWorldMatrix;\n            const camera = Camera.mainCamera;\n\n            // 面法线\n            // for (let i = 0; i < mesh.faceNormals.length; i++) {\n            //     const normal = mesh.faceNormals[i];\n            //     const center = mesh.faceCenters[i];\n            //     const start = TransformTools.ModelToScreenPos(center, renderer.transform, this.currentCamera).screen;\n            //     const end = TransformTools.ModelToScreenPos(Vector3.add(center, Vector3.multiplyScalar(normal, 0.1)), renderer.transform, this.currentCamera).screen;\n            //     this.DrawLine(start.x, start.y, end.x, end.y, Color.RED, Color.GREEN);\n            // }\n\n            // 顶点法线、切线、副切线\n            for (let i = 0; i < mesh.vertices.length; i++) {\n                const vertex = mesh.vertices[i];\n                const normal = mesh.normals[i];\n                const tangent = mesh.tangents[i];\n\n                // 确保我们有必要的数据\n                if (!normal || !tangent) continue;\n                // 从切线向量提取w分量（用于计算副切线方向）\n                const tangentW = tangent.w;\n                // 从切线向量获取xyz分量作为切线方向\n                const tangentDir = new Vector3(tangent.x, tangent.y, tangent.z).normalize();\n                // 计算副切线 (Bitangent) = 法线 × 切线 × w分量\n                const bitangentDir = Vector3.cross(normal, tangentDir).multiplyScalar(tangentW).normalize();\n                // 将顶点位置转换到屏幕空间\n                const vertexScreenPos = TransformTools.ModelToScreenPos(vertex, modelMatrix, camera).screen;\n                // 定义线的长度\n                const lineLength = 0.1;\n\n                // 1. 绘制法线 - 红色\n                const normalEnd = Vector3.add(vertex, Vector3.multiplyScalar(normal, lineLength));\n                const normalScreenEnd = TransformTools.ModelToScreenPos(normalEnd, modelMatrix, camera).screen;\n                this.DrawLine(vertexScreenPos.x, vertexScreenPos.y, normalScreenEnd.x, normalScreenEnd.y, Color.RED);\n\n                // 2. 绘制切线 - 绿色\n                const tangentEnd = Vector3.add(vertex, Vector3.multiplyScalar(tangentDir, lineLength));\n                const tangentScreenEnd = TransformTools.ModelToScreenPos(tangentEnd, modelMatrix, camera).screen;\n                this.DrawLine(vertexScreenPos.x, vertexScreenPos.y, tangentScreenEnd.x, tangentScreenEnd.y, Color.GREEN);\n\n                // 3. 绘制副切线 - 黄色\n                const bitangentEnd = Vector3.add(vertex, Vector3.multiplyScalar(bitangentDir, lineLength));\n                const bitangentScreenEnd = TransformTools.ModelToScreenPos(bitangentEnd, modelMatrix, camera).screen;\n                this.DrawLine(vertexScreenPos.x, vertexScreenPos.y, bitangentScreenEnd.x, bitangentScreenEnd.y, Color.YELLOW);\n            }\n        }\n    }\n\n    private DrawDepthBuffer(): void {\n        for (let x = 0; x < EngineConfig.canvasWidth; x++) {\n            for (let y = 0; y < EngineConfig.canvasHeight; y++) {\n                const index = y * EngineConfig.canvasWidth + x;\n                const currentDepth = this.depthBuffer[index];\n                // 创建灰度颜色对象\n                const depthColor = new Color(currentDepth, currentDepth, currentDepth);\n                this.DrawPixel(x, y, depthColor);\n            }\n        }\n    }\n\n    private DrawStencilBuffer(): void {\n        for (let x = 0; x < EngineConfig.canvasWidth; x++) {\n            for (let y = 0; y < EngineConfig.canvasHeight; y++) {\n                const index = y * EngineConfig.canvasWidth + x;\n                const stencilValue = this.stencilBuffer[index];\n                const stencilColor = new Color(stencilValue, stencilValue, stencilValue);\n                this.DrawPixel(x, y, stencilColor);\n            }\n        }\n    }\n\n    private DrawOverdraw(): void {\n        this.frameBuffer.fill(0);\n        // 使用预设的最大可视化范围来归一化 Overdraw 计数\n        const MAX_VISUALIZATION_RANGE = 8;\n        for (let x = 0; x < EngineConfig.canvasWidth; x++) {\n            for (let y = 0; y < EngineConfig.canvasHeight; y++) {\n                const index = y * EngineConfig.canvasWidth + x;\n                const overdrawCount = this.overdrawBuffer[index];\n                if (overdrawCount > 0) {\n                    // 将 Overdraw 计数限制在可视化范围内并归一化\n                    const normalizedCount = Math.min(overdrawCount, MAX_VISUALIZATION_RANGE) / MAX_VISUALIZATION_RANGE;\n                    // 计算透明度：Overdraw 越多，越不透明\n                    const alpha = normalizedCount;\n                    // 组合颜色（ARGB格式）\n                    const color = Color.ORANGE;\n                    color.a = alpha;\n                    this.DrawPixel(x, y, color);\n                }\n            }\n        }\n    }\n\n    private DrawBounds() {\n        for (const renderer of this.currentRendererObjs) {\n            const mesh = renderer.mesh;\n            if (!mesh) return;\n            const camera = Camera.mainCamera;\n            const modelMatrix = renderer.transform.localToWorldMatrix;\n\n            const bounds = mesh.bounds;\n            const color = Color.WHITE;\n\n            const bound = bounds[0];\n\n            // 将所有顶点转换到屏幕空间\n            const screenVertices = bound.vertices.map(v =>\n                TransformTools.ModelToScreenPos(new Vector3(v.x, v.y, v.z), modelMatrix, camera).screen\n            );\n\n            // 绘制所有边\n            bound.edges.forEach(([i1, i2]) => {\n                const v1 = screenVertices[i1];\n                const v2 = screenVertices[i2];\n                this.DrawLine(v1.x, v1.y, v2.x, v2.y, color);\n            });\n\n            // 绘制中心点\n            const center = bound.center;\n            const screenCenter = TransformTools.ModelToScreenPos(center, modelMatrix, camera).screen;\n            if (screenCenter) {\n                // 绘制一个小十字作为中心点标记\n                const size = 5;\n                this.DrawLine(\n                    screenCenter.x - size, screenCenter.y,\n                    screenCenter.x + size, screenCenter.y,\n                    Color.RED\n                );\n                this.DrawLine(\n                    screenCenter.x, screenCenter.y - size,\n                    screenCenter.x, screenCenter.y + size,\n                    Color.RED\n                );\n            }\n        }\n    }\n\n    /**\n     * 颜色插值辅助函数\n     * @param color1 起始颜色 (32位整数，格式为0xAARRGGBB)\n     * @param color2 结束颜色 (32位整数，格式为0xAARRGGBB)\n     * @param t 插值因子 (0 到 1)\n     * @returns 插值后的颜色\n     */\n    private interpolateColor(color1: Color, color2: Color, t: number): Color {\n        // 提取ARGB分量\n        const a1 = color1.a;\n        const r1 = color1.r;\n        const g1 = color1.g;\n        const b1 = color1.b;\n\n        const a2 = color2.a;\n        const r2 = color2.r;\n        const g2 = color2.g;\n        const b2 = color2.b;\n\n        // 线性插值每个分量\n        const a = Math.round(a1 + (a2 - a1) * t);\n        const r = Math.round(r1 + (r2 - r1) * t);\n        const g = Math.round(g1 + (g2 - g1) * t);\n        const b = Math.round(b1 + (b2 - b1) * t);\n\n        return new Color(r, g, b, a);\n    }\n\n    //#endregion\n}","import { Color } from \"../Math/Color\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { CubeMap } from \"../Resources/CubeMap\";\nimport { Texture } from \"../Resources/Texture\";\n\n// 支持的属性类型\nexport type AttributeType = number | Color | Vector2 | Vector3 | Vector4 | Matrix4x4 | Texture | CubeMap | string;\n\n// 顶点属性集合，键为属性名称，值为任意支持的类型\nexport interface VertexAttributes {\n    [key: string]: AttributeType;\n}\n\n// 着色器Pass接口\nexport interface ShaderPass {\n    name?: string;\n    // 顶点着色器：带默认实现\n    vert: (input: VertexAttributes) => { vertexOut: Vector4; attrOut: VertexAttributes; };\n    // 片段着色器：默认返回洋红色\n    frag: (input: VertexAttributes) => Color | null;\n    // 渲染状态\n    renderState?: ShaderRenderState;\n}\n\nexport interface ShaderRenderState {\n    colorMask?: ColorMask;           // 颜色写入通道掩码，默认值为 All\n    cullMode?: CullMode;             // 剔除模式，默认值 Back\n    zTest?: ZTest;                   // 早期深度测试函数，默认值 LEqual\n    zWrite?: boolean;                // 深度写入，默认值为 true\n    blend?: Blend;                   // 混合状态\n    stencil?: Stencil;               // 模板测试状态\n}\n\nexport interface Blend {\n    op?: BlendOp;            // 混合操作，默认值为 Add\n    src: BlendFactor;\n    dst: BlendFactor;\n    // Unity支持RGB跟A分开计算混合，这里简单实现暂时屏蔽\n    // srcRGB?: BlendFactor;\n    // dstRGB?: BlendFactor;\n    // srcAlpha?: BlendFactor;\n    // dstAlpha?: BlendFactor;\n}\n\nexport interface Stencil {\n    /*\n    Ref:GPU 使用在 compareOperation 中定义的操作将模板缓冲区的当前内容与此值进行比较。\n    此值使用 readMask 或 writeMask 进行遮罩，具体取决于进行的是读取操作还是写入操作。\n    如果 Pass、Fail 或 ZFail 的值为 Replace，则 GPU 也可以将此值写入模板缓冲区。\n    */\n    ref?: number;             // 参考值，0 到 255。默认值为 0\n    readMask?: number;        // GPU 在执行模板测试时使用此值作为遮罩。0 到 255。默认值为 255\n    writeMask?: number;       // GPU 在写入模板缓冲区时使用此值作为遮罩。0 到 255。默认值为 255\n    comparisonOperation?: StencilCompareFunction;   // GPU 为所有像素的模板测试执行的操作。默认值为 Always\n    passOperation?: StencilOp;      // 当像素通过模板测试和深度测试时，GPU 对模板缓冲区执行的操作。默认值为 Keep\n    failOperation?: StencilOp;      // 当像素未通过模板测试时，GPU 对模板缓冲区执行的操作。默认值为 Keep\n    zFailOperation?: StencilOp;     // 当像素通过模板测试但未通过深度测试时，GPU 对模板缓冲区执行的操作。默认值为 Keep\n}\n\nexport enum BlendFactor {\n    One,            // 此输入的值是 one。该值用于使用源或目标的颜色的值。\n    Zero,           // 此输入的值是 zero。该值用于删除源或目标值。\n    SrcColor,       // GPU 将此输入的值乘以源颜色值。\n    SrcAlpha,       // GPU 将此输入的值乘以源 Alpha 值。\n    DstColor,       // GPU 将此输入的值乘以帧缓冲区的源颜色值。\n    DstAlpha,       // GPU 将此输入的值乘以帧缓冲区的源 Alpha 值。\n    OneMinusSrcColor,       // GPU 将此输入的值乘以（1 - 源颜色）。\n    OneMinusSrcAlpha,       // GPU 将此输入的值乘以（1 - 源 Alpha）。\n    OneMinusDstColor,       // GPU 将此输入的值乘以（1 - 目标颜色）。\n    OneMinusDstAlpha,       // GPU 将此输入的值乘以（1 - 目标 Alpha）。\n}\n\nexport enum BlendOp {\n    Add,    // 将源和目标相加。\n    Sub,    // 从源减去目标。\n    RevSub, // 从目标减去源。\n    Min,    // 使用源和目标中的较小者。\n    Max,    // 使用源和目标中的较大者。\n}\n\nexport enum RenderType {\n    Opaque,\n    Transparent\n}\n\nexport enum ColorMask {\n    None = 0,\n    Red = 1,\n    Green = 2,\n    Blue = 4,\n    Alpha = 8,\n    All = Red | Green | Blue | Alpha\n}\n\nexport enum CullMode {\n    Off = 0,\n    Front = 1,\n    Back = 2,\n}\n\nexport enum StencilCompareFunction {\n    Never = 1,\t    // 从不渲染像素。\n    Less = 2,\t    // 在参考值小于模板缓冲区中的当前值时渲染像素。\n    Equal = 3,\t    // 在参考值等于模板缓冲区中的当前值时渲染像素。\n    LEqual = 4,\t    // 在参考值小于或等于模板缓冲区中的当前值时渲染像素。\n    Greater = 5,\t// 在参考值大于模板缓冲区中的当前值时渲染像素。\n    NotEqual = 6,\t// 在参考值与模板缓冲区中的当前值不同时渲染像素。\n    GEqual = 7,\t    // 在参考值大于或等于模板缓冲区中的当前值时渲染像素。\n    Always = 8,\t    // 始终渲染像素。\n}\n\nexport enum StencilOp {\n    Keep = 0,\t    // 保持模板缓冲区的当前内容。\n    Zero = 1,\t    // 将 0 写入模板缓冲区。\n    Replace = 2,\t// 将参考值写入缓冲区。\n    IncrSat = 3,\t// 递增缓冲区中的当前值。如果该值已经是 255，则保持为 255。\n    DecrSat = 4,\t// 递减缓冲区中的当前值。如果该值已经是 0，则保持为 0。\n    Invert = 5,\t    // 将缓冲区中当前值的所有位求反。\n    IncrWrap = 7,\t// 递增缓冲区中的当前值。如果该值已经是 255，则变为 0。\n    DecrWrap = 8,\t// 递减缓冲区中的当前值。如果该值已经是 0，则变为 255。\n}\n\nexport enum ZTest {\n    Less,\t    // 绘制位于现有几何体前面的几何体。不绘制位于现有几何体相同距离或后面的几何体。\n    LEqual,\t    // 绘制位于现有几何体前面或相同距离的几何体。不绘制位于现有几何体后面的几何体。\n    Equal,\t    // 绘制位于现有几何体相同距离的几何体。不绘制位于现有几何体前面的或后面的几何体。\n    GEqual,\t    // 绘制位于现有几何体后面或相同距离的几何体。不绘制位于现有几何体前面的几何体。\n    Greater,\t// 绘制位于现有几何体后面的几何体。不绘制位于现有几何体相同距离或前面的几何体。\n    NotEqual,\t// 绘制不位于现有几何体相同距离的几何体。不绘制位于现有几何体相同距离的几何体。\n    Always,\t    // 不进行深度测试。绘制所有几何体，无论距离如何。\n}\n\n// 模板测试常用配置预设\nexport const StencilPresets = {\n    // 只渲染前面的物体，遮挡后面的物体\n    frontOnly(ref: number): Partial<Stencil> {\n        return {\n            comparisonOperation: StencilCompareFunction.Equal,\n            ref: ref,\n            passOperation: StencilOp.Keep,\n            failOperation: StencilOp.Zero,\n            zFailOperation: StencilOp.Keep\n        }\n    },\n\n    // 只渲染被标记物体的轮廓\n    outline(ref: number): Partial<Stencil> {\n        return {\n            comparisonOperation: StencilCompareFunction.NotEqual,\n            ref: ref,\n            passOperation: StencilOp.Keep,\n            failOperation: StencilOp.Keep,\n            zFailOperation: StencilOp.Keep\n        }\n    },\n\n    // 累积渲染（如渲染透明物体）\n    accumulate(ref: number): Partial<Stencil> {\n        return {\n            comparisonOperation: StencilCompareFunction.Always,\n            ref: ref,\n            passOperation: StencilOp.IncrSat,\n            failOperation: StencilOp.Keep,\n            zFailOperation: StencilOp.Keep\n        }\n    },\n};\n\n/**\n * 执行深度测试\n * @param z 当前片元的深度值\n * @param currentDepth 深度缓冲区中对应位置的深度值\n * @param zTestFunc 深度测试函数（ZTest 枚举值）\n * @returns 是否通过深度测试\n */\nexport function depthTest(z: number, currentDepth: number, zTestFunc: ZTest = ZTest.LEqual): boolean {\n    switch (zTestFunc) {\n        case ZTest.Less:\n            return z < currentDepth; // 小于当前深度则通过\n        case ZTest.Equal:\n            return Math.abs(z - currentDepth) < 1e-6; // 等于当前深度则通过（需考虑浮点精度）\n        case ZTest.LEqual:\n            return z <= currentDepth; // 小于或等于当前深度则通过\n        case ZTest.Greater:\n            return z > currentDepth; // 大于当前深度则通过\n        case ZTest.NotEqual:\n            return Math.abs(z - currentDepth) >= 1e-6; // 不等于当前深度则通过\n        case ZTest.GEqual:\n            return z >= currentDepth; // 大于或等于当前深度则通过\n        case ZTest.Always:\n            return true; // 总是通过\n        default:\n            console.warn(\"Unknown ZTest function, using Less as default.\");\n            return z < currentDepth;\n    }\n}\n\n/**\n * 执行带掩码的模板比较操作\n * @param currentValue 当前模板值\n * @param refValue 参考值\n * @param func 比较函数\n * @param readMask 读取掩码，用于过滤需要比较的位\n * @returns 比较结果（是否通过）\n */\nexport function stencilTest(\n    currentValue: number,\n    refValue: number = 0,\n    func: StencilCompareFunction = StencilCompareFunction.Always,\n    readMask: number = 0xFF\n): boolean {\n    // 应用读取掩码，只保留需要比较的位\n    const maskedCurrent = currentValue & readMask;\n    const maskedRef = refValue & readMask;\n\n    switch (func) {\n        case StencilCompareFunction.Never:\n            return false;\n        case StencilCompareFunction.Less:\n            return maskedCurrent < maskedRef;\n        case StencilCompareFunction.Equal:\n            return maskedCurrent === maskedRef;\n        case StencilCompareFunction.LEqual:\n            return maskedCurrent <= maskedRef;\n        case StencilCompareFunction.Greater:\n            return maskedCurrent > maskedRef;\n        case StencilCompareFunction.NotEqual:\n            return maskedCurrent !== maskedRef;\n        case StencilCompareFunction.GEqual:\n            return maskedCurrent >= maskedRef;\n        case StencilCompareFunction.Always:\n            return true;\n        default:\n            return false;\n    }\n}\n\n/**\n * 应用模板操作\n * @param currentValue 当前模板值\n * @param refValue 参考值\n * @param op 要执行的操作\n * @param writeMask 写入掩码\n * @returns 新的模板值\n */\nexport function applyStencilOperation(\n    currentValue: number,\n    refValue: number = 0,\n    op: StencilOp = StencilOp.Keep,\n    writeMask: number = 0xFF\n): number {\n    let newValue = currentValue;\n\n    switch (op) {\n        case StencilOp.Keep:\n            // 保持当前值\n            newValue = currentValue;\n            break;\n        case StencilOp.Zero:\n            // 设置为0\n            newValue = 0;\n            break;\n        case StencilOp.Replace:\n            // 替换为参考值\n            newValue = refValue;\n            break;\n        case StencilOp.IncrSat:\n            // 递增并饱和（不超过255）\n            newValue = Math.min(currentValue + 1, 255);\n            break;\n        case StencilOp.DecrSat:\n            // 递减并饱和（不低于0）\n            newValue = Math.max(currentValue - 1, 0);\n            break;\n        case StencilOp.Invert:\n            // 反转当前值（仅低8位）\n            newValue = (~currentValue) & 0xFF;\n            break;\n        case StencilOp.IncrWrap:\n            // 递增并循环（超过255则回到0）\n            newValue = (currentValue + 1) % 256;\n            break;\n        case StencilOp.DecrWrap:\n            // 递减并循环（低于0则回到255）\n            newValue = (currentValue - 1 + 256) % 256;\n            break;\n    }\n\n    // 应用写入掩码：只修改掩码允许的位\n    return (newValue & writeMask) | (currentValue & ~writeMask);\n}\n\nexport function applyColorMask(color: Color, bufferColor: Color, mask: ColorMask) {\n    color.r = (mask & ColorMask.Red) ? color.r : bufferColor.r;\n    color.g = (mask & ColorMask.Green) ? color.g : bufferColor.g;\n    color.b = (mask & ColorMask.Blue) ? color.b : bufferColor.b;\n    color.a = (mask & ColorMask.Alpha) ? color.a : bufferColor.a;\n}\n\nexport function blendColors(srcColor: Color, dstColor: Color, srcFactor: BlendFactor, dstFactor: BlendFactor, blendOp: BlendOp = BlendOp.Add): Color {\n    // finalValue = sourceFactor * sourceValue operation destinationFactor * destinationValue\n    // 最终颜色 = 源颜色 × 源因子 [混合操作] 目标颜色 × 目标因子\n\n    // 计算源因子和目标因子的具体值\n    const [srcRFactor, srcGFactor, srcBFactor, srcAFactor] = getBlendFactorValues(srcColor, dstColor, srcFactor);\n    const [dstRFactor, dstGFactor, dstBFactor, dstAFactor] = getBlendFactorValues(srcColor, dstColor, dstFactor);\n\n    // 计算混合后的每个通道值\n    let r = calculateBlendValue(srcColor.r, dstColor.r, srcRFactor, dstRFactor, blendOp);\n    let g = calculateBlendValue(srcColor.g, dstColor.g, srcGFactor, dstGFactor, blendOp);\n    let b = calculateBlendValue(srcColor.b, dstColor.b, srcBFactor, dstBFactor, blendOp);\n    let a = calculateBlendValue(srcColor.a, dstColor.a, srcAFactor, dstAFactor, blendOp);\n\n    // 确保颜色值在0-1范围内并返回新颜色\n    return new Color(r, g, b, a);\n}\n\n/**\n * 根据混合因子获取对应的计算值\n */\nfunction getBlendFactorValues(src: Color, dst: Color, factor: BlendFactor): [number, number, number, number] {\n    switch (factor) {\n        case BlendFactor.One:\n            return [1, 1, 1, 1];\n        case BlendFactor.Zero:\n            return [0, 0, 0, 0];\n        case BlendFactor.SrcColor:\n            return [src.r, src.g, src.b, src.a];\n        case BlendFactor.SrcAlpha:\n            return [src.a, src.a, src.a, src.a];\n        case BlendFactor.DstColor:\n            return [dst.r, dst.g, dst.b, dst.a];\n        case BlendFactor.DstAlpha:\n            return [dst.a, dst.a, dst.a, dst.a];\n        case BlendFactor.OneMinusSrcColor:\n            return [1 - src.r, 1 - src.g, 1 - src.b, 1 - src.a];\n        case BlendFactor.OneMinusSrcAlpha:\n            return [1 - src.a, 1 - src.a, 1 - src.a, 1 - src.a];\n        case BlendFactor.OneMinusDstColor:\n            return [1 - dst.r, 1 - dst.g, 1 - dst.b, 1 - dst.a];\n        case BlendFactor.OneMinusDstAlpha:\n            return [1 - dst.a, 1 - dst.a, 1 - dst.a, 1 - dst.a];\n        default:\n            return [0, 0, 0, 0];\n    }\n}\n\n/**\n * 根据混合操作计算单个通道的混合结果\n */\nfunction calculateBlendValue(src: number, dst: number, srcFactor: number, dstFactor: number, op: BlendOp): number {\n    const srcVal = src * srcFactor;\n    const dstVal = dst * dstFactor;\n\n    switch (op) {\n        case BlendOp.Add:\n            return srcVal + dstVal;\n        case BlendOp.Sub:\n            return srcVal - dstVal;\n        case BlendOp.RevSub:\n            return dstVal - srcVal;\n        case BlendOp.Min:\n            return Math.min(srcVal, dstVal);\n        case BlendOp.Max:\n            return Math.max(srcVal, dstVal);\n        default:\n            return srcVal;\n    }\n}","import { Vector3 } from \"../Math/Vector3\";\nimport { VertexAttributes } from \"./RendererDefine\";\n\n// 片段数据接口，包含像素位置和插值后的属性\nexport interface Fragment {\n    x: number;\n    y: number;\n    z: number;\n    attributes: VertexAttributes;\n}\n\nexport abstract class TriangleRasterizer {\n    public static rasterizeTriangle(v0: Vector3, v1: Vector3, v2: Vector3, attrs0: VertexAttributes, attrs1: VertexAttributes, attrs2: VertexAttributes): Fragment[] {\n        return [];\n    }\n}","import { Vector3 } from \"../Math/Vector3\";\nimport { Color } from \"../Math/Color\";\nimport { Texture } from \"./Texture\";\nimport { UObject } from \"../Core/UObject\";\n\nexport class CubeMap extends UObject {\n    private POSITIVE_X: Texture;\n    private NEGATIVE_X: Texture;\n    private POSITIVE_Y: Texture;\n    private NEGATIVE_Y: Texture;\n    private POSITIVE_Z: Texture;\n    private NEGATIVE_Z: Texture;\n\n    /**\n     * 构造立方体纹理\n     * @param positiveX 正X方向纹理\n     * @param negativeX 负X方向纹理\n     * @param positiveY 正Y方向纹理\n     * @param negativeY 负Y方向纹理\n     * @param positiveZ 正Z方向纹理\n     * @param negativeZ 负Z方向纹理\n     */\n    constructor(\n        positiveX: Texture,\n        negativeX: Texture,\n        positiveY: Texture,\n        negativeY: Texture,\n        positiveZ: Texture,\n        negativeZ: Texture\n    ) {\n        super();\n        this.POSITIVE_X = positiveX;\n        this.NEGATIVE_X = negativeX;\n        this.POSITIVE_Y = positiveY;\n        this.NEGATIVE_Y = negativeY;\n        this.POSITIVE_Z = positiveZ;\n        this.NEGATIVE_Z = negativeZ;\n    }\n\n    /**\n     * 根据方向向量采样立方体贴图\n     * @param direction 归一化的方向向量\n     * @returns 采样得到的颜色\n     */\n    public SampleCube(direction: Vector3): Color {\n        // 确保方向向量已归一化\n        const dir = direction.normalize();\n        const x = dir.x;\n        const y = dir.y;\n        const z = dir.z;\n\n        // 找到绝对值最大的分量，确定要采样的面\n        const absX = Math.abs(x);\n        const absY = Math.abs(y);\n        const absZ = Math.abs(z);\n\n        // 计算各面的UV坐标并采样\n        if (absX >= absY && absX >= absZ) {\n            // X方向为主方向（左右面）\n            const u = 0.5 - z / (2 * absX);\n            const v = 0.5 - y / (2 * absX);\n            return x > 0 ? this.POSITIVE_X.Sample(u, v) : this.NEGATIVE_X.Sample(1 - u, v);\n        } else if (absY >= absX && absY >= absZ) {\n            // Y方向为主方向（上下底面）\n            const u = 0.5 + x / (2 * absY);\n            const v = 0.5 + z / (2 * absY);\n            return y > 0 ? this.POSITIVE_Y.Sample(u, v) : this.NEGATIVE_Y.Sample(1 - u, v);\n        } else {\n            // Z方向为主方向（前后两面）\n            const u = 0.5 + x / (2 * absZ);\n            const v = 0.5 - y / (2 * absZ);\n            return z > 0 ? this.POSITIVE_Z.Sample(u, v) : this.NEGATIVE_Z.Sample(1 -u, v);\n        }\n    }\n\n    /**\n     * 销毁立方体贴图资源\n     */\n    public onDestroy(): void {\n        UObject.Destroy(this.POSITIVE_X);\n        UObject.Destroy(this.NEGATIVE_X);\n        UObject.Destroy(this.POSITIVE_Y);\n        UObject.Destroy(this.NEGATIVE_Y);\n        UObject.Destroy(this.POSITIVE_Z);\n        UObject.Destroy(this.NEGATIVE_Z);\n    }\n}\n","import { UObject } from \"../Core/UObject\";\nimport { Color } from \"../Math/Color\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"../Shader/Shader\";\nimport { Texture } from \"./Texture\";\n\nexport class Material extends UObject {\n    public shader: Shader | null = null;\n    private currentPass: number = -1;\n\n    public onDestroy(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n    * 激活指定索引的Pass，默认-1，表示所有的PASS都会执行，激活后只执行激活的那个PASS\n    * @param passIndex Pass的索引，从0开始\n    * @returns 是否激活成功\n    */\n    public setPass(passIndex: number): boolean {\n        if (!this.shader) {\n            console.warn(\"未指定着色器，无法激活Pass\");\n            return false;\n        }\n\n        // 检查Pass索引是否有效（假设Shader有passCount属性）\n        if (passIndex < 0 || passIndex >= (this.shader as any).passCount) {\n            console.warn(`Pass索引 ${passIndex} 无效`);\n            return false;\n        }\n\n        // 调用Shader的激活Pass方法（假设Shader有activatePass方法）\n        if (typeof (this.shader as any).activatePass === 'function') {\n            (this.shader as any).activatePass(passIndex);\n            this.currentPass = passIndex;\n            return true;\n        }\n\n        console.warn(\"着色器不支持Pass激活操作\");\n        return false;\n    }\n\n    /**\n     * 批量设置多个属性\n     * @param properties 包含多个属性键值对的对象\n     */\n    public setProperties(properties: VertexAttributes): void {\n        if (!this.shader) {\n            console.warn(\"未指定着色器，无法批量设置属性\");\n            return;\n        }\n\n        // 遍历所有属性并设置\n        for (const [propertyName, value] of Object.entries(properties)) {\n            this.setValue(propertyName, value);\n        }\n    }\n\n    /**\n     * 给着色器中的颜色属性设置值\n     * @param propertyName 属性名称\n     * @param color 颜色值\n     */\n    public setColor(propertyName: string, color: Color): void {\n        this.setValue(propertyName, color);\n    }\n\n    /**\n     * 给着色器中的数字属性设置值\n     * @param propertyName 属性名称\n     * @param value 数字值\n     */\n    public setNumber(propertyName: string, value: number): void {\n        this.setValue(propertyName, value);\n    }\n\n    /**\n     * 给着色器中的矩阵属性设置值\n     * @param propertyName 属性名称\n     * @param matrix 矩阵值\n     */\n    public setMatrix4x4(propertyName: string, matrix: Matrix4x4): void {\n        this.setValue(propertyName, matrix);\n    }\n\n    /**\n     * 给着色器中的纹理属性设置值\n     * @param propertyName 属性名称\n     * @param texture 纹理对象\n     */\n    public setTexture(propertyName: string, texture: Texture): void {\n        this.setValue(propertyName, texture);\n    }\n\n    /**\n     * 给着色器中的Vector4属性设置值\n     * @param propertyName 属性名称\n     * @param vector 向量值\n     */\n    public setVector4(propertyName: string, vector: Vector4): void {\n        this.setValue(propertyName, vector);\n    }\n\n    /**\n     * 通用的属性设置方法，用于实际执行设置操作\n     * @param propertyName 属性名称\n     * @param value 要设置的值\n     */\n    private setValue(propertyName: string, value: any): void {\n        if (!this.shader) {\n            console.warn(`未指定着色器，无法设置属性 ${propertyName}`);\n            return;\n        }\n\n        // 检查着色器是否有该属性\n        if (!(propertyName in this.shader)) {\n            console.warn(`着色器中不存在属性 ${propertyName}`);\n            return;\n        }\n\n        // 尝试直接设置着色器的属性值\n        try {\n            (this.shader as any)[propertyName] = value;\n        } catch (error) {\n            console.error(`设置属性 ${propertyName} 失败:`, error);\n        }\n    }\n\n    /**\n     * 获取着色器中属性的当前值\n     * @param propertyName 属性名称\n     * @returns 属性值或null\n     */\n    public getPropertyValue(propertyName: string): any {\n        if (!this.shader || !(propertyName in this.shader)) {\n            return null;\n        }\n\n        return (this.shader as any)[propertyName];\n    }\n}","import { UObject } from \"../Core/UObject\";\nimport { Bounds } from \"../Math/Bounds\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\n\nexport class Mesh extends UObject {\n    public bounds: Bounds[];                       // 包围盒\n    public material: string[];                     // 材质\n    public triangles: number[];                    // 三角形\n    public faceNormals: Vector3[];                 // 面法线\n    public faceCenters: Vector3[];                 // 面中心\n    public vertices: Vector3[];                    // 顶点\n    public uv: Vector2[];                          // UV\n    public normals: Vector3[];                     // 法线\n    public tangents: Vector4[];                    // 切线\n    public subMeshes: SubMesh[];                   // 子网格\n\n    public constructor() {\n        super();\n        this.bounds = [];\n        this.material = [];\n        this.triangles = [];\n        this.faceNormals = [];\n        this.vertices = [];\n        this.uv = [];\n        this.normals = [];\n        this.tangents = [];\n        this.subMeshes = [];\n    }\n\n    // 检查网格是否有效\n    public checkValid(): Boolean {\n        return this.vertices.length !== 0\n            && this.vertices.length === this.uv.length\n            && this.vertices.length === this.normals.length\n            && this.vertices.length === this.tangents.length\n\n            && this.triangles.length !== 0\n            && this.triangles.length % 3 === 0\n            \n            && this.faceNormals.length === this.faceCenters.length\n            && this.faceNormals.length * 3 === this.triangles.length;\n    }\n\n    /**\n     * 均匀缩放网格（以原点为基准）\n     * @param scale 缩放倍数\n     */\n    public scale(scale: number): void {\n        if (scale === 1) return; // 缩放倍数为1时无需处理\n\n        // 缩放所有顶点（直接以原点为基准）\n        for (let i = 0; i < this.vertices.length; i++) {\n            this.vertices[i] = this.vertices[i].clone().multiplyScalar(scale);\n        }\n\n        // 缩放面中心\n        for (let i = 0; i < this.faceCenters.length; i++) {\n            this.faceCenters[i] = this.faceCenters[i].clone().multiplyScalar(scale);\n        }\n\n        // 均匀缩放只需归一化法线（方向不变但长度会受缩放影响）\n        for (let i = 0; i < this.normals.length; i++) {\n            this.normals[i] = this.normals[i].normalize();\n        }\n        for (let i = 0; i < this.faceNormals.length; i++) {\n            this.faceNormals[i] = this.faceNormals[i].normalize();\n        }\n\n        // 重新计算包围盒\n        this.calculateBounds();\n    }\n\n    // 重新计算包围盒和切线等数据\n    public calculateMeshData() {\n        // 计算切线向量\n        this.calculateTangents();\n        // 计算整体包围盒\n        this.calculateBounds();\n        // 计算三角面的法向量\n        this.calculateFaceNormals();\n    }\n\n    public onDestroy(): void {\n        // 清理所有数组引用\n        this.vertices.length = 0;\n        this.uv.length = 0;\n        this.normals.length = 0;\n        this.tangents.length = 0;\n        this.triangles.length = 0;\n        this.faceNormals.length = 0;\n        this.faceCenters.length = 0;\n        this.subMeshes.length = 0;\n        this.bounds.length = 0;\n        this.material.length = 0;\n    }\n\n    /**\n     * 重新计算所有包围盒\n     */\n    private calculateBounds(): void {\n        // 更新子网格信息\n        this.subMeshes.forEach(subMesh => {\n            // 计算子网格包围盒\n            const subVertices = this.vertices.slice(\n                subMesh.firstVertex,\n                subMesh.firstVertex + subMesh.vertexCount\n            );\n            subMesh.bounds = Bounds.fromPoints(subVertices);\n        });\n\n        // 更新整体包围盒\n        this.bounds = this.subMeshes.map(sm => sm.bounds);\n    }\n\n    private calculateFaceNormals() {\n        if (this.vertices.length === 0 || this.triangles.length === 0) return;\n\n        this.faceNormals = [];\n        this.faceCenters = [];\n\n        for (let i = 0; i < this.triangles.length; i += 3) {\n            const i0 = this.triangles[i];\n            const i1 = this.triangles[i + 1];\n            const i2 = this.triangles[i + 2];\n\n            const v0 = this.vertices[i0];\n            const v1 = this.vertices[i1];\n            const v2 = this.vertices[i2];\n\n            const e1 = Vector3.subtract(v1, v0);\n            const e2 = Vector3.subtract(v2, v0);\n            const faceNormal = Vector3.cross(e1, e2).normalize();\n            this.faceNormals.push(faceNormal);\n\n            const center = Vector3.add(v0, v1).add(v2).divide(3);\n            this.faceCenters.push(center);\n        }\n    }\n\n    /**\n     * 计算网格的切线向量\n     */\n    private calculateTangents() {\n        if (this.vertices.length === 0 || this.triangles.length === 0) return;\n\n        const tan1 = new Array(this.vertices.length).fill(0).map(() => new Vector3(0, 0, 0));\n        const tan2 = new Array(this.vertices.length).fill(0).map(() => new Vector3(0, 0, 0));\n\n        for (let i = 0; i < this.triangles.length; i += 3) {\n            const i0 = this.triangles[i];\n            const i1 = this.triangles[i + 1];\n            const i2 = this.triangles[i + 2];\n\n            const v0 = this.vertices[i0];\n            const v1 = this.vertices[i1];\n            const v2 = this.vertices[i2];\n\n            const w0 = this.uv[i0];\n            const w1 = this.uv[i1];\n            const w2 = this.uv[i2];\n\n            const x1 = v1.x - v0.x;\n            const y1 = v1.y - v0.y;\n            const z1 = v1.z - v0.z;\n\n            const x2 = v2.x - v0.x;\n            const y2 = v2.y - v0.y;\n            const z2 = v2.z - v0.z;\n\n            const s1 = w1.x - w0.x;\n            const t1 = w1.y - w0.y;\n            const s2 = w2.x - w0.x;\n            const t2 = w2.y - w0.y;\n\n            const r = 1.0 / (s1 * t2 - s2 * t1);\n            const tx = (t2 * x1 - t1 * x2) * r;\n            const ty = (t2 * y1 - t1 * y2) * r;\n            const tz = (t2 * z1 - t1 * z2) * r;\n\n            tan1[i0].x += tx;\n            tan1[i0].y += ty;\n            tan1[i0].z += tz;\n\n            tan1[i1].x += tx;\n            tan1[i1].y += ty;\n            tan1[i1].z += tz;\n\n            tan1[i2].x += tx;\n            tan1[i2].y += ty;\n            tan1[i2].z += tz;\n\n            const bx = (s1 * x2 - s2 * x1) * r;\n            const by = (s1 * y2 - s2 * y1) * r;\n            const bz = (s1 * z2 - s2 * z1) * r;\n\n            tan2[i0].x += bx;\n            tan2[i0].y += by;\n            tan2[i0].z += bz;\n\n            tan2[i1].x += bx;\n            tan2[i1].y += by;\n            tan2[i1].z += bz;\n\n            tan2[i2].x += bx;\n            tan2[i2].y += by;\n            tan2[i2].z += bz;\n        }\n\n        for (let i = 0; i < this.vertices.length; i++) {\n            const n = this.normals[i];\n            const t = tan1[i];\n\n            const tangent = Vector3.subtract(t, Vector3.multiplyScalar(n, Vector3.dot(n, t))).normalize();\n            const handedness = Vector3.dot(Vector3.cross(n, t), tan2[i]) < 0.0 ? -1 : 1;\n\n            this.tangents[i] = new Vector4(tangent.x, tangent.y, tangent.z, handedness);\n        }\n    }\n}\n\nexport class SubMesh {\n    public vertexCount: number;\n    public firstVertex: number;\n    public indexCount: number;\n    public indexStart: number;\n    public bounds: Bounds;\n    public material: string;\n\n    public constructor() {\n        this.vertexCount = 0;\n        this.firstVertex = 0;\n        this.indexCount = 0;\n        this.indexStart = 0;\n        this.bounds = new Bounds();\n        this.material = \"\";\n    }\n}\n","import { Mesh } from \"./Mesh\";\nimport { OBJParser } from \"../Utils/ObjParser\";\nimport { Texture } from \"./Texture\";\n\nexport class Resources {\n    private static fileCache: Map<string, any> = new Map();\n    private static loadingPromises: Map<string, Promise<any>> = new Map();\n\n    /**\n     * 异步加载资源，模仿Unity的Resources.LoadAsync\n     * @param fileName 资源路径\n     * @returns 包含资源的Promise\n     */\n    public static async loadAsync<T>(fileName: string): Promise<T | null> {\n        // 检查缓存\n        if (Resources.fileCache.has(fileName)) {\n            return Promise.resolve(Resources.fileCache.get(fileName) as T);\n        }\n\n        // 检查是否正在加载，避免重复请求\n        if (Resources.loadingPromises.has(fileName)) {\n            return Resources.loadingPromises.get(fileName) as Promise<T>;\n        }\n\n        // 确定资源类型并加载\n        let promise: Promise<T | null>;\n\n        if (fileName.endsWith('.png') || fileName.endsWith('.jpg') || fileName.endsWith('.jpeg')) {\n            // 加载纹理\n            promise = Resources.loadTextureAsync(fileName) as Promise<T | null>;\n        } else if (fileName.endsWith('.obj')) {\n            // 加载模型\n            promise = Resources.loadModelAsync(fileName) as Promise<T | null>;\n        } else if (fileName.endsWith('.txt') || fileName.endsWith('.json') || fileName.endsWith('.xml')) {\n            // 加载文本\n            promise = Resources.loadTextAsync(fileName) as Promise<T | null>;\n        } else {\n            console.error(`不支持的资源类型: ${fileName}`);\n            return Promise.resolve(null);\n        }\n\n        // 存储加载中的Promise\n        Resources.loadingPromises.set(fileName, promise);\n\n        // 等待加载完成并更新缓存\n        const result = await promise;\n        if (result) {\n            Resources.fileCache.set(fileName, result);\n        }\n\n        // 移除加载中标记\n        Resources.loadingPromises.delete(fileName);\n\n        return result;\n    }\n\n    // /**\n    //  * 同步加载资源（仅支持已缓存的资源）\n    //  * @param fileName 资源路径\n    //  * @returns 资源实例或null\n    //  */\n    // public static load<T>(fileName: string): T | null {\n    //     if (Resources.fileCache.has(fileName)) {\n    //         return Resources.fileCache.get(fileName) as T;\n    //     }\n\n    //     console.warn(`资源 ${fileName} 未缓存，无法同步加载。请先使用loadAsync加载。`);\n    //     return null;\n    // }\n\n    /**\n     * 卸载未使用的资源，模仿Unity的UnloadUnusedAssets\n     */\n    public static unloadUnusedAssets(): void {\n        // 实际项目中应该有引用计数机制\n        // 这里简化处理，仅清除所有缓存\n        Resources.fileCache.clear();\n        console.log(\"已卸载所有未使用的资源\");\n    }\n\n    /**\n     * 卸载特定资源\n     * @param fileName 资源路径\n     */\n    public static unloadAsset(fileName: string): void {\n        if (Resources.fileCache.has(fileName)) {\n            Resources.fileCache.delete(fileName);\n            console.log(`已卸载资源: ${fileName}`);\n        }\n\n        if (Resources.loadingPromises.has(fileName)) {\n            Resources.loadingPromises.delete(fileName);\n        }\n    }\n\n    /**\n     * 加载纹理资源\n     */\n    private static async loadTextureAsync(fileName: string): Promise<Texture | null> {\n        try {\n            const img = await Resources.loadImageFile(fileName);\n\n            // 1. 获取图片原始尺寸\n            const imgWidth = img.width;\n            const imgHeight = img.height;\n\n            // 2. 创建【临时Canvas】（内存中，不显示到页面）\n            const tempCanvas = document.createElement('canvas');\n            const tempCtx = tempCanvas.getContext('2d');\n            if (!tempCtx) {\n                console.error('无法创建临时Canvas上下文');\n                return null;\n            }\n\n            // 3. 让临时Canvas尺寸与图片原始尺寸完全一致（关键：确保像素无失真）\n            tempCanvas.width = imgWidth;\n            tempCanvas.height = imgHeight;\n\n            // 4. 仅在临时Canvas上绘制图片，web的图必须先加载到canvas才能读取它的数据\n            tempCtx.drawImage(img, 0, 0, imgWidth, imgHeight); // 0,0是绘制起点，后两个参数是绘制尺寸（与图片一致）\n\n            // 5. 提取图片的ImageData（此时已获取完整像素数据，无需依赖业务Canvas）\n            const imageData = tempCtx.getImageData(0, 0, imgWidth, imgHeight);\n            const pixelData = imageData.data; // 核心：Uint8ClampedArray类型的像素数组，每个像素占4位（RGBA）\n\n            const texture = new Texture(imgWidth, imgHeight);\n            texture.LoadImage(pixelData);\n            return texture;\n        } catch (error) {\n            console.error(`加载纹理失败: ${fileName}`, error);\n            return null;\n        }\n    }\n\n    /**\n     * 加载图片文件（内部使用）\n     */\n    private static loadImageFile(fileName: string): Promise<HTMLImageElement> {\n        return new Promise<HTMLImageElement>((resolve, reject) => {\n            if (Resources.fileCache.has(fileName)) {\n                resolve(Resources.fileCache.get(fileName));\n                return;\n            }\n\n            const image = new Image();\n            if (!image) {\n                reject(new Error('无法创建图片对象'));\n                return;\n            }\n\n            image.onload = () => {\n                resolve(image);\n            };\n\n            image.onerror = () => {\n                reject(new Error(`无法加载图片: ${fileName}`));\n            };\n\n            // 跨域设置\n            image.crossOrigin = \"anonymous\";\n            image.src = fileName;\n        });\n    }\n\n    /**\n     * 加载文本文件\n     */\n    private static loadTextAsync(fileName: string): Promise<string | null> {\n        return new Promise<string | null>((resolve) => {\n            if (Resources.fileCache.has(fileName)) {\n                resolve(Resources.fileCache.get(fileName));\n                return;\n            }\n\n            const request = new XMLHttpRequest();\n\n            request.onreadystatechange = () => {\n                if (request.readyState === 4) {\n                    if (request.status === 200) {\n                        const text = request.responseText;\n                        resolve(text);\n                    } else {\n                        console.error(`加载文本失败: ${fileName}, 状态码: ${request.status}`);\n                        resolve(null);\n                    }\n                }\n            };\n\n            // 使用异步加载以避免阻塞\n            request.open(\"GET\", fileName, true);\n            request.send();\n        });\n    }\n\n    /**\n     * 加载模型文件\n     */\n    private static async loadModelAsync(modelPath: string, scale: number = 1): Promise<Mesh | null> {\n        try {\n            const objDoc = await Resources.loadTextAsync(modelPath);\n            if (!objDoc) {\n                return null;\n            }\n\n            const mesh = OBJParser.parse(objDoc, scale);\n            return mesh;\n        } catch (error) {\n            console.error(`加载模型失败: ${modelPath}`, error);\n            return null;\n        }\n    }\n}\n","import { UObject } from \"../Core/UObject\";\nimport { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\n\nexport enum FilterMode {\n    Point,\n    Bilinear,\n    Trilinear\n}\n\nexport enum TextureWrapMode {\n    Repeat,\n    Clamp\n}\n\nexport enum TextureFormat {\n    Alpha8 = 1,\n    ARGB4444 = 2,\n    RGB24 = 3,\n    RGBA32 = 4,\n    ARGB32 = 5,\n    RGB565 = 7,\n    DXT1 = 10,\n    DXT5 = 12,\n    RGBA4444 = 13,\n    PVRTC_RGB2 = 30,\n    PVRTC_RGBA2 = 31,\n    PVRTC_RGB4 = 32,\n    PVRTC_RGBA4 = 33,\n    ETC_RGB4 = 34,\n    ATC_RGB4 = 35,\n    ATC_RGBA8 = 36,\n    BGRA32 = 37,\n    ATF_RGB_DXT1 = 38,\n    ATF_RGBA_JPG = 39,\n    ATF_RGB_JPG = 40\n}\n\ninterface MipmapLevel {\n    width: number;\n    height: number;\n    data: Uint8ClampedArray;\n}\n\nexport class Texture extends UObject {\n    public width: number;\n    public height: number;\n    public mipMapBias: number = 0;\n    public mipmapCount: number = 0;\n    public data: Uint8ClampedArray;\n    public filterMode: FilterMode = FilterMode.Point;\n    public wrapMode: TextureWrapMode = TextureWrapMode.Repeat;\n    public format: TextureFormat = TextureFormat.RGBA32;\n    public alphaIsTransparency: boolean;\n    private mipmapLevels: MipmapLevel[];\n\n\n    constructor(width: number, height: number) {\n        super();\n        this.width = width;\n        this.height = height;\n    }\n\n    LoadImage(data: Uint8ClampedArray) {\n        this.data = data;\n        this.generateMipmaps();\n    }\n\n    SetPixel(x: number, y: number, color: number) {\n        const index = (y * this.width + x) * 4;\n        this.data[index] = color & 0xff;\n        this.data[index + 1] = (color >> 8) & 0xff;\n        this.data[index + 2] = (color >> 16) & 0xff;\n        this.data[index + 3] = (color >> 24) & 0xff;\n    }\n\n    // SetPixels(colors: Color[]){\n    //     for(let i = 0; i < colors.length; i++){\n    //         const color = colors[i];\n    //         const x = i % this.width;\n    //         const y = Math.floor(i / this.width);\n    //         this.SetPixel(x, y, color);\n    //     }\n    // }\n\n    // SetPixels2(x: number, y: number, blockWidth: number, blockHeight: number, colors: Color[]){\n    //     throw new Error('LoadImage not implemented');\n    // }\n\n    GetPixel(x: number, y: number): number {\n        const index = (y * this.width + x) * 4;\n        return this.data[index] | (this.data[index + 1] << 8) | (this.data[index + 2] << 16) | (this.data[index + 3] << 24);\n    }\n\n    // GetPixels(x: number, y: number, blockWidth: number, blockHeight: number): number[]{\n    //     const colors = new Array<number>(blockWidth * blockHeight);\n    //     for(let i = 0; i < blockWidth * blockHeight; i++){\n    //         const x0 = x + i % blockWidth;\n    //         const y0 = y + Math.floor(i / blockWidth);\n    //         colors[i] = this.GetPixel(x0, y0);\n    //     }\n    //     return colors;\n    // }\n\n    // GetPixelBilinear(u: number, v: number): Color{\n    //     const x = u * this.width;\n    //     const y = v * this.height;\n    //     const x0 = Math.floor(x);\n    //     const y0 = Math.floor(y);\n    //     const x1 = x0 + 1;\n    //     const y1 = y0 + 1;\n    //     const u0 = x - x0;\n    //     const v0 = y - y0;\n    //     const u1 = 1 - u0;\n    //     const v1 = 1 - v0;\n    //     const c00 = this.GetPixel(x0, y0);\n    //     const c01 = this.GetPixel(x0, y1);\n    //     const c10 = this.GetPixel(x1, y0);\n    //     const c11 = this.GetPixel(x1, y1);\n    //     return new Color(\n    //         c00.r * u1 * v1 + c01.r * u1 * v0 + c10.r * u0 * v1 + c11.r * u0 * v0,  \n    //         c00.g * u1 * v1 + c01.g * u1 * v0 + c10.g * u0 * v1 + c11.g * u0 * v0,  \n    //         c00.b * u1 * v1 + c01.b * u1 * v0 + c10.b * u0 * v1 + c11.b * u0 * v0,  \n    //         c00.a * u1 * v1 + c01.a * u1 * v0 + c10.a * u0 * v1 + c11.a * u0 * v0,  \n    //     );\n    // }\n\n    // Resize(width: number, height: number){\n    //     throw new Error('LoadImage not implemented');\n    // }\n\n    /**\n     * 通过UV坐标和纹理坐标导数获取像素颜色（考虑Mipmap）\n     * @param u 纹理U坐标（0-1）\n     * @param v 纹理V坐标（0-1）\n     * @param du_dx U坐标在屏幕空间X方向的导数\n     * @param dv_dx V坐标在屏幕空间X方向的导数\n     * @param du_dy U坐标在屏幕空间Y方向的导数\n     * @param dv_dy V坐标在屏幕空间Y方向的导数\n     * @returns 颜色值（ARGB格式的32位整数）\n     */\n    public SampleMip(u: number, v: number, du_dx: number = 0.001, dv_dx: number = 0.001, du_dy: number = 0.001, dv_dy: number = 0.001): Color {\n        /* \n        在 3D 渲染中，为了让 Mipmap 层级计算更准确（避免纹理在远处出现锯齿或近处过度模糊），需要传递纹理坐标在屏幕空间的导数。这些导数描述了 UV 坐标在屏幕上每移动 1 像素时的变化率，计算方式如下：\n        // 假设当前片段的UV坐标\n        const currentU = uv.u;\n        const currentV = uv.v;\n\n        // 右侧相邻像素的UV（x方向+1）\n        const rightU = neighborRight.attributes.uv.u;\n        const rightV = neighborRight.attributes.uv.v;\n\n        // 下方相邻像素的UV（y方向+1）\n        const bottomU = neighborBottom.attributes.uv.u;\n        const bottomV = neighborBottom.attributes.uv.v;\n\n        // 计算导数（UV在屏幕空间的变化率）\n        const du_dx = rightU - currentU; // U在X方向的导数\n        const dv_dx = rightV - currentV; // V在X方向的导数\n        const du_dy = bottomU - currentU; // U在Y方向的导数\n        const dv_dy = bottomV - currentV; // V在Y方向的导数\n         */\n\n        // 计算Mipmap层级\n        const mipLevel = this.calculateMipLevel(du_dx, dv_dx, du_dy, dv_dy);\n        return this.Sample(u, v, mipLevel);\n    }\n\n    /**\n     * 通过UV坐标获取像素颜色（根据纹理设置自动处理）\n     * @param u 纹理U坐标（0-1）\n     * @param v 纹理V坐标（0-1）\n     * @returns 颜色值（ARGB格式的32位整数）\n     */\n    public Sample(u: number, v: number, mipLevel: number = 0): Color {\n        // 根据环绕模式处理UV坐标\n        const [clampedU, clampedV] = this.handleWrapMode(u, v);\n\n        // 根据过滤模式采样像素\n        switch (this.filterMode) {\n            case FilterMode.Point:\n                return this.samplePoint(clampedU, clampedV, mipLevel);\n            case FilterMode.Bilinear:\n                return this.sampleBilinear(clampedU, clampedV, mipLevel);\n            case FilterMode.Trilinear:\n                return this.sampleTrilinear(clampedU, clampedV, mipLevel);\n            default:\n                return this.samplePoint(clampedU, clampedV, mipLevel);\n        }\n    }\n\n    /**\n     * 处理UV坐标的环绕模式\n     * @param u 原始U坐标\n     * @param v 原始V坐标\n     * @returns 处理后的UV坐标\n     */\n    private handleWrapMode(u: number, v: number): [number, number] {\n        let handledU = u;\n        let handledV = v;\n\n        switch (this.wrapMode) {\n            case TextureWrapMode.Repeat:\n                // 重复模式：取小数部分实现平铺\n                handledU = handledU - Math.floor(handledU);\n                handledV = handledV - Math.floor(handledV);\n                break;\n            case TextureWrapMode.Clamp:\n                // 拉伸模式：限制在0-1范围内\n                handledU = Math.max(0, Math.min(1, handledU));\n                handledV = Math.max(0, Math.min(1, handledV));\n                break;\n        }\n\n        return [handledU, handledV];\n    }\n\n    /**\n     * 点过滤采样（最近邻）\n     * @param u 处理后的U坐标（0-1）\n     * @param v 处理后的V坐标（0-1）\n     * @returns 颜色值\n     */\n    private samplePoint(u: number, v: number, mipLevel: number = 0): Color {\n        // 选择最接近的Mipmap层级\n        const level = Math.round(mipLevel);\n        const mip = this.getMipmapLevel(level);\n\n        // 将UV坐标转换为像素坐标\n        const x = Math.floor(u * mip.width);\n        const y = Math.floor(v * mip.height);\n\n        // 确保坐标在有效范围内\n        const clampedX = Math.max(0, Math.min(mip.width - 1, x));\n        const clampedY = Math.max(0, Math.min(mip.height - 1, y));\n\n        // 获取像素颜色\n        const index = (clampedY * mip.width + clampedX) * 4;\n        return new Color(\n            mip.data[index] / 255,\n            mip.data[index + 1] / 255,\n            mip.data[index + 2] / 255,\n            mip.data[index + 3] / 255\n        );\n    }\n\n    /**\n     * 双线性过滤采样\n     * @param u 处理后的U坐标（0-1）\n     * @param v 处理后的V坐标（0-1）\n     * @returns 插值后的颜色值\n     */\n    private sampleBilinear(u: number, v: number, mipLevel: number = 0): Color {\n        // 选择最接近的Mipmap层级\n        const level = Math.round(mipLevel);\n        const mip = this.getMipmapLevel(level);\n\n        // 转换为像素坐标（带小数部分）\n        const x = u * mip.width;\n        const y = v * mip.height;\n\n        // 计算周围四个像素的坐标\n        const x0 = Math.floor(x);\n        const y0 = Math.floor(y);\n        const x1 = x0 + 1;\n        const y1 = y0 + 1;\n\n        // 计算插值权重\n        const uWeight = x - x0;\n        const vWeight = y - y0;\n\n        // 获取四个角落的像素颜色\n        const c00 = this.getClampedPixelFromMip(mip, x0, y0);\n        const c01 = this.getClampedPixelFromMip(mip, x0, y1);\n        const c10 = this.getClampedPixelFromMip(mip, x1, y0);\n        const c11 = this.getClampedPixelFromMip(mip, x1, y1);\n\n        // 双线性插值计算\n        const color0 = this.lerpColor(c00, c10, uWeight);\n        const color1 = this.lerpColor(c01, c11, uWeight);\n        const finalColor = this.lerpColor(color0, color1, vWeight);\n\n        return finalColor;\n    }\n\n    /**\n     * 三线性过滤采样，在双线性过滤基础上，找到2个最近的Mipmap层级，根据距离插值\n     */\n    private sampleTrilinear(u: number, v: number, mipLevel: number = 0): Color {\n        // 如果Mipmap层级不足，退化为双线性过滤\n        if (this.mipmapCount < 2) {\n            return this.sampleBilinear(u, v, mipLevel);\n        }\n\n        // 计算上下两个Mipmap层级\n        const levelFloor = Math.floor(mipLevel);\n        const levelCeil = Math.min(levelFloor + 1, this.mipmapCount - 1);\n        const levelWeight = mipLevel - levelFloor;\n\n        // 在两个层级上分别进行双线性过滤\n        const colorFloor = this.sampleBilinear(u, v, levelFloor);\n        const colorCeil = this.sampleBilinear(u, v, levelCeil);\n\n        // 在两个层级结果之间进行线性插值\n        return this.lerpColor(colorFloor, colorCeil, levelWeight);\n    }\n\n    /**\n     * 颜色插值（线性插值）\n     * @param a 起始颜色\n     * @param b 目标颜色\n     * @param t 插值系数（0-1）\n     * @returns 插值后的颜色\n     */\n    private lerpColor(a: Color, b: Color, t: number): Color {\n        // 提取ARGB四个通道\n        const aA = a.a;\n        const aR = a.r;\n        const aG = a.g;\n        const aB = a.b;\n\n        const bA = b.a;\n        const bR = b.r;\n        const bG = b.g;\n        const bB = b.b;\n\n        // 每个通道单独插值\n        const lerpA = Math.round(aA + (bA - aA) * t);\n        const lerpR = Math.round(aR + (bR - aR) * t);\n        const lerpG = Math.round(aG + (bG - aG) * t);\n        const lerpB = Math.round(aB + (bB - aB) * t);\n\n        return new Color(lerpA, lerpR, lerpG, lerpB);\n    }\n\n    /**\n     * 生成Mipmap层级\n     * 从原始纹理开始，逐级缩小为1/2尺寸并进行模糊处理\n     */\n    private generateMipmaps() {\n        // 清空现有Mipmap层级\n        this.mipmapLevels = [];\n\n        // 添加原始纹理作为第0级Mipmap\n        this.mipmapLevels.push({\n            width: this.width,\n            height: this.height,\n            data: new Uint8ClampedArray(this.data)\n        });\n\n        let currentWidth = this.width;\n        let currentHeight = this.height;\n        let currentLevel = 0;\n\n        // 生成后续Mipmap层级，直到1x1像素\n        while (currentWidth > 1 || currentHeight > 1) {\n            currentLevel++;\n            const newWidth = Math.max(1, Math.floor(currentWidth / 2));\n            const newHeight = Math.max(1, Math.floor(currentHeight / 2));\n\n            // 创建新层级数据\n            const newData = new Uint8ClampedArray(newWidth * newHeight * 4);\n            const sourceLevel = this.mipmapLevels[currentLevel - 1];\n\n            // 缩小并模糊处理（简单的2x2区域平均）\n            for (let y = 0; y < newHeight; y++) {\n                for (let x = 0; x < newWidth; x++) {\n                    // 计算源纹理中的对应区域\n                    const srcX = Math.min(x * 2, sourceLevel.width - 1);\n                    const srcY = Math.min(y * 2, sourceLevel.height - 1);\n\n                    // 取2x2区域的四个像素\n                    const pixels = [\n                        this.getPixelFromLevel(sourceLevel, srcX, srcY),\n                        this.getPixelFromLevel(sourceLevel, Math.min(srcX + 1, sourceLevel.width - 1), srcY),\n                        this.getPixelFromLevel(sourceLevel, srcX, Math.min(srcY + 1, sourceLevel.height - 1)),\n                        this.getPixelFromLevel(sourceLevel, Math.min(srcX + 1, sourceLevel.width - 1), Math.min(srcY + 1, sourceLevel.height - 1))\n                    ];\n\n                    // 计算四个像素的平均值\n                    let r = 0, g = 0, b = 0, a = 0;\n                    for (const p of pixels) {\n                        r += p.r;\n                        g += p.g;\n                        b += p.b;\n                        a += p.a;\n                    }\n\n                    r = Math.round(r / 4);\n                    g = Math.round(g / 4);\n                    b = Math.round(b / 4);\n                    a = Math.round(a / 4);\n\n                    // 写入新Mipmap层级\n                    const index = (y * newWidth + x) * 4;\n                    newData[index] = r;\n                    newData[index + 1] = g;\n                    newData[index + 2] = b;\n                    newData[index + 3] = a;\n                }\n            }\n\n            // 添加新层级\n            this.mipmapLevels.push({\n                width: newWidth,\n                height: newHeight,\n                data: newData\n            });\n\n            currentWidth = newWidth;\n            currentHeight = newHeight;\n        }\n\n        this.mipmapCount = this.mipmapLevels.length;\n    }\n\n    /**\n     * 从指定Mipmap层级获取像素颜色（RGBA分量）\n     */\n    private getPixelFromLevel(level: MipmapLevel, x: number, y: number): { r: number, g: number, b: number, a: number } {\n        const index = (y * level.width + x) * 4;\n        return {\n            r: level.data[index],\n            g: level.data[index + 1],\n            b: level.data[index + 2],\n            a: level.data[index + 3]\n        };\n    }\n\n    /**\n     * 计算所需的Mipmap层级\n     * 基于纹理坐标在屏幕空间的变化率（导数）\n     */\n    private calculateMipLevel(du_dx: number, dv_dx: number, du_dy: number, dv_dy: number): number {\n        // 如果没有Mipmap，直接返回0级\n        if (this.mipmapCount <= 1) return 0;\n\n        // 计算纹理空间的偏导数\n        const dx = du_dx * this.width;\n        const dy = dv_dx * this.height;\n        const dz = du_dy * this.width;\n        const dw = dv_dy * this.height;\n\n        // 计算纹理坐标变化的幅度\n        const lenSq = dx * dx + dy * dy + dz * dz + dw * dw;\n        let level = 0.5 * Math.log2(lenSq);\n\n        // 应用Mipmap偏差\n        level += this.mipMapBias;\n\n        // 限制在有效层级范围内\n        return Math.max(0, Math.min(this.mipmapCount - 1, level));\n    }\n\n    /**\n     * 获取指定Mipmap层级（确保有效）\n     */\n    private getMipmapLevel(level: number): MipmapLevel {\n        const clampedLevel = Math.max(0, Math.min(this.mipmapCount - 1, level));\n        return this.mipmapLevels[clampedLevel] || this.mipmapLevels[0];\n    }\n\n    /**\n     * 从Mipmap层级获取范围内的像素（防止越界）\n     */\n    private getClampedPixelFromMip(mip: MipmapLevel, x: number, y: number): Color {\n        const clampedX = Math.max(0, Math.min(mip.width - 1, x));\n        const clampedY = Math.max(0, Math.min(mip.height - 1, y));\n        const index = (clampedY * mip.width + clampedX) * 4;\n\n        return new Color(\n            mip.data[index] / 255,\n            mip.data[index + 1] / 255,\n            mip.data[index + 2] / 255,\n            mip.data[index + 3] / 255\n        );\n    }\n\n    /**\n     * 将RGBA分量打包为32位整数\n     */\n    private packColor(r: number, g: number, b: number, a: number): number {\n        return r | (g << 8) | (b << 16) | (a << 24);\n    }\n\n    public onDestroy(): void {\n        // 清理Mipmap数据\n        this.mipmapLevels = [];\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Texture } from \"./Texture\";\n\nexport class TextureCreator {\n\n    /**\n     * 生成棋盘纹理\n     * @param tileSize 每个棋盘格的大小（像素）\n     * @param color1 第一种颜色（默认白色）\n     * @param color2 第二种颜色（默认黑色）\n     */\n    public static CheckerboardTexture(\n        width: number = 64,\n        height: number = 64,\n        tileSize: number = 8,\n        color1: Color = Color.WHITE,\n        color2: Color = Color.GRAY\n    ): Texture {\n        const texture = new Texture(width, height);\n        const data = new Uint8ClampedArray(width * height * 4);\n\n        // 填充棋盘格\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                // 计算当前位置属于哪个棋盘格\n                const tileX = Math.floor(x / tileSize);\n                const tileY = Math.floor(y / tileSize);\n\n                // 交替选择颜色\n                const color = (tileX + tileY) % 2 === 0 ? color1 : color2;\n\n                // 设置像素颜色\n                const index = (y * width + x) * 4;\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                data[index + 3] = color.a * 255;\n            }\n        }\n\n        texture.LoadImage(data);\n        return texture;\n    }\n\n    /**\n     * 生成噪声纹理\n     * @param width 纹理宽度\n     * @param height 纹理高度\n     * @param type 噪声类型：'random'（随机噪声）、'perlin'（柏林噪声）、'fibrous'（纤维噪声）\n     * @param scale 噪声缩放比例（值越小噪声越密集）\n     * @param monochrome 是否生成单色噪声（否则为彩色）\n     * @returns 生成的噪声纹理\n     */\n    public static NoiseTexture(\n        width: number = 64,\n        height: number = 64,\n        type: 'random' | 'perlin' | 'fibrous' = 'perlin',\n        scale: number = 4,\n        monochrome: boolean = true\n    ): Texture {\n        // 参数验证和边界检查\n        width = Math.max(1, Math.min(2048, width));\n        height = Math.max(1, Math.min(2048, height));\n        scale = Math.max(0.1, scale);\n\n        const texture = new Texture(width, height);\n        const data = new Uint8ClampedArray(width * height * 4);\n\n        // 更高效的随机噪声生成函数（使用位运算优化）\n        const generateRandomNoise = (x: number, y: number): number => {\n            let hash = x << 12 ^ y;\n            hash = (hash ^ (hash >> 16)) * 0x45d9f3b;\n            hash = (hash ^ (hash >> 13)) * 0x45d9f3b;\n            return (hash & 0x7fffffff) / 0x7fffffff; // 直接使用位运算代替Math.abs\n        };\n\n        // 优化的插值函数（使用缓动函数提高视觉质量）\n        const fade = (t: number): number => {\n            return t * t * t * (t * (t * 6 - 15) + 10); // 平滑的缓动函数\n        };\n\n        const interpolate = (a: number, b: number, t: number): number => {\n            return a + fade(t) * (b - a);\n        };\n\n        // 预先计算随机偏移（避免每次生成噪声都创建新变量）\n        const randomOffsetX = Math.random() * 10000;\n        const randomOffsetY = Math.random() * 10000;\n\n        // 缓存1/scale值，避免重复除法运算\n        const invScale = 1 / scale;\n\n        // 优化的柏林噪声生成（减少重复计算）\n        const generatePerlinNoise = (x: number, y: number): number => {\n            // 添加随机偏移，使每次生成的噪声不同\n            x += randomOffsetX;\n            y += randomOffsetY;\n\n            // 使用缓存的invScale进行计算\n            const xGrid = Math.floor(x * invScale);\n            const yGrid = Math.floor(y * invScale);\n            const xFrac = (x * invScale) - xGrid;\n            const yFrac = (y * invScale) - yGrid;\n\n            // 四个角的随机值\n            const c00 = generateRandomNoise(xGrid, yGrid);\n            const c10 = generateRandomNoise(xGrid + 1, yGrid);\n            const c01 = generateRandomNoise(xGrid, yGrid + 1);\n            const c11 = generateRandomNoise(xGrid + 1, yGrid + 1);\n\n            // 双线性插值\n            const x1 = interpolate(c00, c10, xFrac);\n            const x2 = interpolate(c01, c11, xFrac);\n            return interpolate(x1, x2, yFrac);\n        };\n\n        // 纤维噪声生成（使用一次柏林噪声计算结果）\n        const generateFibrousNoise = (x: number, y: number): number => {\n            // 减少三角函数计算，使用更简单的角度计算\n            const angle = (Math.sin(x * invScale) * Math.cos(y * invScale)) * Math.PI;\n            const dx = Math.cos(angle) * scale;\n            const dy = Math.sin(angle) * scale;\n\n            // 计算一次基础噪声值，避免重复调用\n            const baseNoise = generatePerlinNoise(x, y);\n            // 使用基础噪声值与偏移后的噪声值混合\n            return generatePerlinNoise(x + dx, y + dy) * 0.7 + baseNoise * 0.3;\n        };\n\n        // 填充纹理数据的主要逻辑（优化内存访问模式）\n        const generateNoiseForPixel = (x: number, y: number): number => {\n            switch (type) {\n                case 'random':\n                    return generateRandomNoise(x, y);\n                case 'fibrous':\n                    return generateFibrousNoise(x, y);\n                default: // perlin\n                    return generatePerlinNoise(x, y);\n            }\n        };\n\n        // 优化的彩色噪声生成函数（减少重复计算）\n        const getRGBFromNoise = (value: number): [number, number, number] => {\n            // HSV转RGB的高效实现\n            const hue = (value * 360) % 360;\n            const sat = 0.5 + value * 0.5;\n            const val = 0.3 + value * 0.7;\n\n            const c = val * sat;\n            const x = c * (1 - Math.abs((hue / 60) % 2 - 1));\n            const m = val - c;\n\n            let r = 0, g = 0, b = 0;\n\n            if (hue < 60) {\n                [r, g, b] = [c, x, 0];\n            } else if (hue < 120) {\n                [r, g, b] = [x, c, 0];\n            } else if (hue < 180) {\n                [r, g, b] = [0, c, x];\n            } else if (hue < 240) {\n                [r, g, b] = [0, x, c];\n            } else if (hue < 300) {\n                [r, g, b] = [x, 0, c];\n            } else {\n                [r, g, b] = [c, 0, x];\n            }\n\n            return [r + m, g + m, b + m];\n        };\n\n        // 主要循环：按行主序填充纹理数据，提高缓存命中率\n        for (let y = 0; y < height; y++) {\n            const rowOffset = y * width * 4; // 预计算行偏移量\n            for (let x = 0; x < width; x++) {\n                // 根据噪声类型生成值（0-1范围）\n                let value = generateNoiseForPixel(x, y);\n\n                // 确保值在0-1范围内（使用一次clamp操作）\n                value = Math.max(0, Math.min(1, value));\n\n                let r: number, g: number, b: number;\n\n                if (monochrome) {\n                    // 单色噪声（灰度）\n                    r = g = b = value;\n                } else {\n                    // 彩色噪声（使用优化的HSV转RGB函数）\n                    [r, g, b] = getRGBFromNoise(value);\n                }\n\n                // 写入纹理数据（RGBA）\n                const index = rowOffset + x * 4;\n                data[index] = r * 255;       // 红色通道\n                data[index + 1] = g * 255;   // 绿色通道\n                data[index + 2] = b * 255;   // 蓝色通道\n                data[index + 3] = 255;       // alpha通道（完全不透明）\n            }\n        }\n\n        texture.LoadImage(data);\n        return texture;\n    }\n\n    /**\n     * 生成渐变纹理\n     * @param width 纹理宽度\n     * @param height 纹理高度\n     * @param type 渐变类型：'linear'（线性）、'radial'（径向）、'angular'（角度）\n     * @param colorStops 颜色断点数组，格式如[{offset: 0, color: 0xffffff}, {offset: 1, color: 0x000000}]\n     * @param start 渐变起点（线性渐变有效，相对坐标[0,1]）\n     * @param end 渐变终点（线性渐变有效，相对坐标[0,1]）\n     * @param center 渐变中心（径向/角度渐变有效，相对坐标[0,1]）\n     * @param radius 渐变半径（径向渐变有效，相对值）\n     * @returns 生成的渐变纹理\n     */\n    public static GradientTexture(\n        width: number = 64,\n        height: number = 64,\n        type: 'linear' | 'radial' | 'angular' = 'linear',\n        colorStops: Array<{ offset: number, color: Color }> = [\n            { offset: 0, color: Color.WHITE },\n            { offset: 1, color: Color.BLACK }\n        ],\n        start: Vector2 = new Vector2(0, 0.5),\n        end: Vector2 = new Vector2(1, 0.5),\n        center: Vector2 = new Vector2(0.5, 0.5),\n        radius: number = 0.5\n    ): Texture {\n        const texture = new Texture(width, height);\n        const data = new Uint8ClampedArray(width * height * 4);\n\n        // 确保颜色断点按offset排序\n        colorStops.sort((a, b) => a.offset - b.offset);\n\n        // 提取颜色通道值\n        const getColorChannels = (color: Color) => ({\n            r: color.r,\n            g: color.g,\n            b: color.b,\n            a: color.a || 1 // 默认为不透明\n        });\n\n        // 颜色插值函数\n        const interpolateColor = (t: number) => {\n            // 处理边界情况\n            if (t <= colorStops[0].offset) {\n                return getColorChannels(colorStops[0].color);\n            }\n            if (t >= colorStops[colorStops.length - 1].offset) {\n                return getColorChannels(colorStops[colorStops.length - 1].color);\n            }\n\n            // 找到当前t所在的颜色区间\n            let i = 0;\n            while (colorStops[i + 1].offset < t) {\n                i++;\n            }\n\n            const start = colorStops[i];\n            const end = colorStops[i + 1];\n            const range = end.offset - start.offset;\n            const ratio = (t - start.offset) / range;\n\n            const startColor = getColorChannels(start.color);\n            const endColor = getColorChannels(end.color);\n\n            // 线性插值每个颜色通道\n            return {\n                r: startColor.r + (endColor.r - startColor.r) * ratio,\n                g: startColor.g + (endColor.g - startColor.g) * ratio,\n                b: startColor.b + (endColor.b - startColor.b) * ratio,\n                a: startColor.a + (endColor.a - startColor.a) * ratio\n            };\n        };\n\n        // 填充纹理数据\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                // 计算相对坐标[0,1]\n                const u = x / (width - 1);\n                const v = y / (height - 1);\n                let t = 0;\n\n                switch (type) {\n                    case 'linear':\n                        // 线性渐变：计算点到起点的投影长度与总长度的比例\n                        const startToEnd = new Vector2(end.x - start.x, end.y - start.y);\n                        const startToPoint = new Vector2(u - start.x, v - start.y);\n                        const lengthSq = startToEnd.x * startToEnd.x + startToEnd.y * startToEnd.y;\n\n                        if (lengthSq > 0) {\n                            const dot = startToPoint.x * startToEnd.x + startToPoint.y * startToEnd.y;\n                            t = Math.max(0, Math.min(1, dot / lengthSq));\n                        }\n                        break;\n\n                    case 'radial':\n                        // 径向渐变：计算点到中心的距离与半径的比例\n                        const dx = u - center.x;\n                        const dy = v - center.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        t = Math.max(0, Math.min(1, distance / radius));\n                        break;\n\n                    case 'angular':\n                        // 角度渐变：计算点相对于中心的角度\n                        let angle = Math.atan2(v - center.y, u - center.x) + Math.PI;\n                        t = (angle / (Math.PI * 2)) % 1;\n                        break;\n                }\n\n                // 获取插值颜色并写入数据\n                const color = interpolateColor(t);\n                const index = (y * width + x) * 4;\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                data[index + 3] = color.a * 255;\n            }\n        }\n\n        texture.LoadImage(data);\n        return texture;\n    }\n}","import { BoxCollider } from \"../Component/BoxCollider\";\nimport { Camera, CameraClearFlags } from \"../Component/Camera\";\nimport { CameraController } from \"../Component/TestComp/CameraController\";\nimport { Component } from \"../Component/Component\";\nimport { Light } from \"../Component/Light\";\nimport { MeshRenderer } from \"../Component/MeshRenderer\";\nimport { RayTest } from \"../Component/TestComp/RayTest\";\nimport { Rigidbody } from \"../Component/RigidBody\";\nimport { SphereCollider } from \"../Component/SphereCollider\";\nimport { Engine } from \"../Core/Engine\";\nimport { GameObject } from \"../Core/GameObject\";\nimport { Color } from \"../Math/Color\";\nimport { Quaternion } from \"../Math/Quaternion\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Material } from \"../Resources/Material\";\nimport { Mesh } from \"../Resources/Mesh\";\nimport { Resources } from \"../Resources/Resources\";\nimport { Texture } from \"../Resources/Texture\";\nimport { LitShader } from \"../Shader/LitShader\";\nimport { Scene } from \"./Scene\";\nimport { ObjRotate } from \"../Component/TestComp/ObjRotate\";\nimport { ObjAutoRotate } from \"../Component/TestComp/ObjAutoRotate\";\nimport { Shader } from \"../Shader/Shader\";\nimport { ToonShader } from \"../Shader/ToonShader\";\nimport { CubeMap } from \"../Resources/CubeMap\";\nimport { RenderSettings } from \"../Core/Setting\";\nimport { ScrollTexture } from \"../Component/TestComp/ScrollTexture\";\nimport { TextureCreator } from \"../Resources/TextureCreator\";\nimport { MeshCreator } from \"../Resources/MeshCreator\";\nimport { PBRShader } from \"../Shader/PBRShader\";\nimport { AlphaCutOffShader } from \"../Shader/AlphaCutOffShader\";\nimport { BillBoard } from \"../Component/TestComp/BillBoard\";\nimport { VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { StencilOutlineShader } from \"../Shader/StencilOutlineShader\";\nimport { TransparentShader } from \"../Shader/TransparentShader\";\nimport { ScreenDoorShader } from \"../Shader/ScreenDoorShader\";\n\nexport const MainScene = {\n    name: \"MainScene\",\n    initfun: async (scene: Scene) => {\n        // 相机\n        const cameraObj = await createObj({\n            name: \"camera\",\n            position: new Vector3(0, 0, -5),\n            rotation: new Quaternion(new Vector3(0, 0, 0)),\n            components: [Camera, CameraController]\n        });\n        // const camera = cameraObj.getComponent(Camera);\n        // if (camera) {\n        //     camera.viewPort = new Vector4(0, 0, 0.5, 1);\n        // }\n\n        // // 相机2\n        // const camera2Obj = await createObj({\n        //     name: \"camera\",\n        //     position: new Vector3(0, 0, 5),\n        //     rotation: new Quaternion(new Vector3(0, 180, 0)),\n        //     components: [Camera]\n        // });\n        // const camera2 = camera2Obj.getComponent(Camera);\n        // if (camera2) {\n        //     camera2.viewPort = new Vector4(0.5, 0, 0.5, 0.5);\n        // }\n\n        // 灯\n        const lightObj = await createObj({\n            name: \"light\",\n            position: new Vector3(0, 3, 0),\n            rotation: new Quaternion(new Vector3(0, 0, 0)),\n            components: [Light, ObjRotate]\n        });\n        const light = lightObj.getComponent(Light);\n        if (light) {\n            Light.sunLight = light;\n        }\n\n        // 天空盒\n        const POSITIVE_X = await Resources.loadAsync<Texture>(\"resources/skybox/POSITIVE_X.jpg\");\n        const NEGATIVE_X = await Resources.loadAsync<Texture>(\"resources/skybox/NEGATIVE_X.jpg\");\n        const POSITIVE_Y = await Resources.loadAsync<Texture>(\"resources/skybox/POSITIVE_Y.jpg\");\n        const NEGATIVE_Y = await Resources.loadAsync<Texture>(\"resources/skybox/NEGATIVE_Y.jpg\");\n        const POSITIVE_Z = await Resources.loadAsync<Texture>(\"resources/skybox/POSITIVE_Z.jpg\");\n        const NEGATIVE_Z = await Resources.loadAsync<Texture>(\"resources/skybox/NEGATIVE_Z.jpg\");\n        if (POSITIVE_X && NEGATIVE_X && POSITIVE_Y && NEGATIVE_Y && POSITIVE_Z && NEGATIVE_Z) {\n            RenderSettings.skybox = new CubeMap(\n                POSITIVE_X,\n                NEGATIVE_X,\n                POSITIVE_Y,\n                NEGATIVE_Y,\n                POSITIVE_Z,\n                NEGATIVE_Z,\n            );\n        }\n\n        // const testObj = await createObj({\n        //     name: \"obj\",\n        //     modelPath: 'resources/assets/meshes/suzanne_low.obj',\n        //     components: [ObjRotate, ScrollTexture],\n        // });\n\n        // const leeObj = await createObj({\n        //     name: \"lee\",\n        //     model: 'resources/assets/meshes/lee.obj',\n        //     // shader: PBRShader,\n        //     shaderProp: {\n        //         mainTexture: \"resources/assets/textures/texture/lee.jpg\",\n        //         // normalTexture: \"resources/assets/textures/texture/lee_normal.jpg\",\n        //         // gloss: 1000\n        //     }\n        // });\n\n        // const female02Obj = await createObj({\n        //     name: \"female02\",\n        //     modelPath: 'resources/female02/female02.obj',\n        //     modelScale: 0.01,\n        //     texture: Texture.CheckerboardTexture(),\n        //     components: [ObjRotate],\n        // });\n\n        // const groundObj = await createObj({\n        //     name: \"ground\",\n        //     scale: Vector3.ONE.multiplyScalar(1.5),\n        //     rotation: Quaternion.angleAxis(-90, Vector3.RIGHT),\n        //     model: \"resources/panel.obj\",\n        //     // model: MeshCreator.createPanel(),\n        //     shader: AlphaCutOffShader,\n        //     shaderProp: {\n        //         // mainTexture: \"resources/assets/textures/texture/ancientbrick_albedo.jpg\",\n        //         mainTexture: \"resources/texture/transparent_texture.png\",\n        //     }\n        // });\n        // const groundObj = panelObj.getComponent(Rigidbody);\n        // if (groundObj) groundObj.isKinematic = true;\n\n        // 随机生成20颗树，它们的位置在[-5, 5]的水平范围内随机分布\n        // for (let i = 0; i < 30; i++) {\n        //     const randomX = (Math.random() * 5) - 2.5;\n        //     const randomZ = (Math.random() * 5) - 2.5;\n        //     const randomH = 1 + (Math.random() * 0.4) - 0.2;\n        //     const panelObj = await createObj({\n        //         name: `tree_${i}`,\n        //         position: new Vector3(randomX, 0.5 * randomH, randomZ),\n        //         scale: Vector3.ONE.multiplyScalar(randomH),\n        //         model: MeshCreator.createQuad(),\n        //         components: [BillBoard],\n        //         shader: AlphaCutOffShader,\n        //         shaderProp: {\n        //             mainTexture: \"resources/texture/tree.png\",\n        //         }\n        //     });\n        // }\n\n        // // 左\n        // await createObj({\n        //     name: \"cube\",\n        //     position: new Vector3(-2, 0, 0),\n        //     model: \"resources/cube.obj\",\n        //     shaderProp: {\n        //         baseColor: Color.YELLOW,\n        //     }\n        // });\n        // // 右\n        // await createObj({\n        //     name: \"cube\",\n        //     position: new Vector3(2, 0, 0),\n        //     model: \"resources/cube.obj\",\n        //     shaderProp: {\n        //         baseColor: Color.RED,\n        //     }\n        // });\n        // // 前\n        // await createObj({\n        //     name: \"cube\",\n        //     position: new Vector3(0, 0, 2),\n        //     model: \"resources/cube.obj\",\n        //     shaderProp: {\n        //         baseColor: Color.GREEN,\n        //     }\n        // });\n        // // 后\n        // await createObj({\n        //     name: \"cube\",\n        //     position: new Vector3(0, 0, -2),\n        //     model: \"resources/cube.obj\",\n        //     shaderProp: {\n        //         baseColor: Color.BLUE,\n        //     }\n        // });\n\n        const spheresObj = await createObj({\n            name: \"spheres\",\n            position: new Vector3(0, 1.5, 1.5),\n            model: \"resources/sphere.obj\",\n            // components: [Rigidbody, SphereCollider]\n            components: [ObjAutoRotate],\n            // shader: ScreenDoorShader,\n            shaderProp: {\n                mainTexture: TextureCreator.CheckerboardTexture(),\n                // mainTexture: \"resources/texture/Brick_Diffuse.jpg\",\n                // normalTexture: \"resources/texture/Brick_Normal.jpg\",\n                // mainTexture: \"resources/texture/Road_Diffuse.jpg\",\n                // normalTexture: \"resources/texture/Road_Normal.jpg\",\n            }\n        });\n\n        await createObj({\n            name: \"cube\",\n            position: new Vector3(-2, 0, 0),\n            model: \"resources/cube.obj\",\n            shader: TransparentShader,\n            shaderProp: {\n                mainTexture: \"resources/texture/transparent_texture.png\",\n            }\n        });\n\n        // const bunnyObj = await createObj({\n        //     name: \"bunny\",\n        //     model: 'resources/models/bunny2.obj',\n        //     modelScale: 10,\n        //     shaderProp: {\n        //         mainTexture: TextureCreator.CheckerboardTexture(),\n        //     }\n        // });\n\n        const toukuiObj = await createObj({\n            name: \"toukui\",\n            model: 'resources/toukui/Construction_Helmet.obj',\n            modelScale: 0.1,\n            components: [ObjRotate],\n            shader: StencilOutlineShader,\n            shaderProp: {\n                mainTexture: \"resources/toukui/Construction_Helmet_M_Helmet_BaseColor.png\",\n                // normalTexture: \"resources/toukui/Construction_Helmet_M_Helmet_Normal.png\",\n            }\n        });\n        // spheresObj.transform.setParent(toukuiObj.transform);\n    }\n}\n\ninterface CreateObjConfig {\n    name: string;\n    position?: Vector3;\n    rotation?: Quaternion;\n    scale?: Vector3;\n    model?: string | Mesh;\n    modelScale?: number;\n    shader?: new (...args: any[]) => Shader;\n    shaderProp?: VertexAttributes;\n    components?: (new (gameObject: GameObject) => Component)[];\n}\n\nasync function createObj(config: CreateObjConfig): Promise<GameObject> {\n    const obj = new GameObject(config.name);\n    obj.transform.position = config.position || Vector3.ZERO;\n    obj.transform.rotation = config.rotation || Quaternion.identity;\n    obj.transform.scale = config.scale || Vector3.ONE;\n\n    if (config.model) {\n        const model = typeof config.model === 'string' ? await Resources.loadAsync<Mesh>(config.model) : config.model;\n        if (config.modelScale) model?.scale(config.modelScale);\n\n        const renderer = obj.addComponent(MeshRenderer);\n        if (renderer) {\n            renderer.mesh = model;\n            const mat = renderer.material;\n            mat.shader = config.shader ? new config.shader() : new LitShader();\n            // 设置纹理\n            if (config.shaderProp) {\n                for (const prop of Object.entries(config.shaderProp)) {\n                    if (typeof prop[1] === 'string') {\n                        const t = await Resources.loadAsync<Texture>(prop[1]);\n                        if (t) mat.setTexture(prop[0], t);\n                        delete config.shaderProp[prop[0]];\n                    }\n                }\n                // 设置其他属性\n                mat.setProperties(config.shaderProp);\n            }\n        }\n    }\n\n    if (config.components && config.components.length > 0) {\n        for (const ComponentClass of config.components) {\n            try {\n                obj.addComponent(ComponentClass);\n            } catch (error) {\n                console.error(`Failed to add component ${ComponentClass.name}:`, error);\n            }\n        }\n    }\n\n    return obj;\n}","import { Camera } from \"../Component/Camera\";\nimport { Renderer } from \"../Component/Renderer\";\nimport { GameObject } from \"../Core/GameObject\";\nimport { BVHTree } from \"../Math/BVHTree\";\nimport { TransformTools } from \"../Math/TransformTools\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\n\nexport class Scene {\n    public name: string;\n    private rootGameObject: GameObject;\n    private bvhTree: BVHTree;\n    private needsRebuild: boolean = true;\n\n    constructor(name: string) {\n        this.name = name;\n        this.rootGameObject = new GameObject(\"root\");\n        this.bvhTree = new BVHTree();\n    }\n\n    public getRootGameObject(): GameObject {\n        return this.rootGameObject;\n    }\n\n    public update(): void {\n        if (this.rootGameObject) {\n            this.rootGameObject.startComponents();\n            this.rootGameObject.updateComponents();\n        }\n\n        // 需要时重建BVH\n        if (this.needsRebuild) {\n            this.rebuildBVH();\n            this.needsRebuild = false;\n        }\n    }\n\n    /**\n     * 标记需要重建BVH\n     */\n    public markDirty(): void {\n        this.needsRebuild = true;\n    }\n\n    /**\n     * 重建BVH树\n     */\n    private rebuildBVH(): void {\n        const allObjects = this.collectAllObjects(this.rootGameObject);\n        this.bvhTree.build(allObjects);\n    }\n\n    /**\n     * 收集场景中所有对象\n     */\n    private collectAllObjects(root: GameObject): GameObject[] {\n        const objects: GameObject[] = [];\n        this.traverseGameObjects(root, objects);\n        return objects;\n    }\n\n    /**\n     * 遍历游戏对象树\n     */\n    private traverseGameObjects(node: GameObject, collection: GameObject[]): void {\n        if (node.getComponent(Renderer)) {\n            collection.push(node);\n        }\n\n        const children = node.transform.children;\n        for (const child of children) {\n            this.traverseGameObjects(child.gameObject, collection);\n        }\n    }\n\n    /**\n     * 射线检测接口\n     */\n    public raycast(rayOrigin: Vector3, rayDirection: Vector3, maxDistance: number = Infinity): GameObject[] {\n        return this.bvhTree.raycast(rayOrigin, rayDirection, maxDistance);\n    }\n\n    /**\n     * 点击屏幕选取最前面对象\n     */\n    public pickObject(screenX: number, screenY: number, camera: Camera): GameObject | null {\n        // 将屏幕坐标转换为世界空间射线\n        const ray = TransformTools.ScreenToWorldPosRaycast(new Vector2(screenX, screenY), camera);\n\n        // 进行射线检测\n        const hitObjects = this.raycast(ray.origin, ray.direction);\n\n        if (hitObjects.length === 0) {\n            return null;\n        }\n\n        // 找到距离最近的对象\n        let closestObject: GameObject | null = null;\n        let closestDistance = Infinity;\n\n        for (const obj of hitObjects) {\n            const distance = this.calculateHitDistance(obj, ray.origin, ray.direction);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestObject = obj;\n            }\n        }\n\n        return closestObject;\n    }\n\n    /**\n     * 计算命中距离（需要根据具体对象形状实现）\n     */\n    private calculateHitDistance(obj: GameObject, rayOrigin: Vector3, rayDirection: Vector3): number {\n        // 这里需要实现具体的射线与对象相交检测\n        // 可以使用对象的包围盒或更精确的网格相交检测\n        const bounds = this.bvhTree.calculateObjectBounds(obj);\n        if (bounds) {\n            return bounds.rayIntersectDistance(rayOrigin, rayDirection);\n        }\n        return Infinity;\n    }\n}","import { Scene } from \"./Scene\";\n\nexport class SceneManager {\n    private scenes: Map<string, Scene> = new Map<string, Scene>();\n    private activeScene: Scene | null = null;\n\n    public createScene(name: string): Scene {\n        const scene = new Scene(name);\n        this.scenes.set(name, scene);\n        return scene;\n    }\n\n    public getScene(name: string): Scene | undefined {\n        return this.scenes.get(name);\n    }\n\n    public setActiveScene(scene: Scene | string): void {\n        if (typeof scene === 'string') {\n            const foundScene = this.scenes.get(scene);\n            if (foundScene) {\n                this.activeScene = foundScene;\n            }\n        } else {\n            this.activeScene = scene;\n        }\n    }\n\n    public getActiveScene(): Scene | null {\n        return this.activeScene;\n    }\n\n    public updateActiveScene(): void {\n        if (this.activeScene) {\n            this.activeScene.update();\n        }\n    }\n\n    public async loadScene(data: any) {\n        if (!data.name || !data.initfun) {\n            return;\n        }\n        // 初始化场景\n        const mainScene = this.createScene(data.name);\n        this.setActiveScene(mainScene);\n        await data.initfun(mainScene);\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { ShaderPass, VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"./Shader\";\n\nexport class LitShader extends Shader {\n\n    public passes: ShaderPass[] = [\n        {\n            name: \"Forward\",\n            vert: this.vertexShader.bind(this),\n            frag: this.fragmentShader.bind(this),\n        }\n    ];\n\n    public fragmentShader(v2fAttr: VertexAttributes): Color | null {\n        const uv = v2fAttr.uv as Vector2;\n        const normal = v2fAttr.normal as Vector3;\n\n        // 采样基础颜色\n        const surfaceColor = this.mainTexture?.Sample(\n            uv.u * this.mainTextureST.x + this.mainTextureST.z,\n            uv.v * this.mainTextureST.y + this.mainTextureST.w\n        ) || Color.WHITE;\n        surfaceColor.multiply(this.baseColor);\n\n        // 高光系数，值越大高光越集中\n        const shininess: number = 100\n\n        // 确保法向量归一化\n        const normalizedNormal = normal.normalize();\n\n        // 计算漫反射（半兰伯特）部分\n        const dotProduct = Math.max(0, Vector3.dot(normalizedNormal, this.lightDirection)) * 0.5 + 0.5;\n\n        // 计算高光（Phong）部分\n        // 1. 计算反射光方向 = 2*(法向量·光源方向)*法向量 - 光源方向\n        const reflectDir = normalizedNormal.clone()\n            .multiplyScalar(2 * Vector3.dot(normalizedNormal, this.lightDirection))\n            .subtract(this.lightDirection)\n            .normalize();\n\n        // 2. 计算反射方向与视角方向的点积\n        const specDot = Math.max(0, Vector3.dot(reflectDir, this.viewDir));\n\n        // 3. 计算高光因子（使用高光系数控制高光范围）\n        const specularFactor = Math.pow(specDot, shininess);\n\n        // 4. 计算高光颜色（通常使用光源颜色，可添加高光强度参数）\n        const specularIntensity = 0.5; // 高光强度\n        const specularR = this.lightColor.r * specularIntensity * specularFactor;\n        const specularG = this.lightColor.g * specularIntensity * specularFactor;\n        const specularB = this.lightColor.b * specularIntensity * specularFactor;\n\n        // 计算漫反射颜色\n        const diffR = surfaceColor.r * this.lightColor.r * this.lightIntensity * dotProduct;\n        const diffG = surfaceColor.g * this.lightColor.g * this.lightIntensity * dotProduct;\n        const diffB = surfaceColor.b * this.lightColor.b * this.lightIntensity * dotProduct;\n\n        // 合并所有光照贡献（漫反射 + 高光）\n        const totalR = diffR + specularR;\n        const totalG = diffG + specularG;\n        const totalB = diffB + specularB;\n\n        // 确保颜色值在0-1范围内\n        const clampedR = Math.min(1, Math.max(0, totalR));\n        const clampedG = Math.min(1, Math.max(0, totalG));\n        const clampedB = Math.min(1, Math.max(0, totalB));\n\n        // 组合成32位颜色值（保留原始Alpha）\n        return new Color(clampedR, clampedG, clampedB, surfaceColor.a);\n    }\n}","import { Camera } from \"../Component/Camera\";\nimport { Light } from \"../Component/Light\";\nimport { RenderSettings } from \"../Core/Setting\";\nimport { Transform } from \"../Core/Transform\";\nimport { UObject } from \"../Core/UObject\";\nimport { Color } from \"../Math/Color\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { RenderType, ShaderPass, VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { Texture } from \"../Resources/Texture\";\n\nexport abstract class Shader extends UObject {\n    public renderType: RenderType = RenderType.Opaque;\n    public renderQueue: number = 0;\n\n    // 一些全局参数，CPU传给GPU\n    protected transform: Transform;\n    protected camera: Camera;\n    protected viewDir: Vector3;\n    protected modelMatrix: Matrix4x4;\n    protected viewMatrix: Matrix4x4;\n    protected projectionMatrix: Matrix4x4;\n    protected mvpMatrix: Matrix4x4;\n    protected normalMatrix: Matrix4x4;\n    protected light: Light;\n    protected lightColor: Color;\n    protected lightDirection: Vector3;\n    protected lightIntensity: number;\n    protected ambientLight: Color;\n\n    public passes: ShaderPass[] = [];\n\n    public init(transform: Transform, camera: Camera): void {\n        this.transform = transform;\n        this.camera = camera;\n        this.viewDir = camera.transform.forward.negate().normalize();\n\n        this.modelMatrix = this.transform.localToWorldMatrix;\n        this.viewMatrix = this.camera.getViewMatrix();\n        this.projectionMatrix = this.camera.getProjectionMatrix();\n        this.mvpMatrix = this.projectionMatrix.clone().multiply(this.viewMatrix).multiply(this.modelMatrix);\n\n        this.normalMatrix = this.transform.localToWorldNormalMatrix;\n\n        this.light = Light.sunLight;\n        this.ambientLight = RenderSettings.ambientLight;\n        this.lightColor = this.light.color;\n        this.lightDirection = this.light.transform.forward.normalize();\n        this.lightIntensity = this.light.intensity;\n    }\n\n    public onDestroy(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    //#region 着色器通用模板\n    public baseColor: Color = Color.WHITE;\n    public mainTexture: Texture | null = null;\n    public mainTextureST: Vector4 = new Vector4(1, 1, 0, 0);\n\n    // 通用顶点函数，将顶点坐标以及法线变换到裁剪空间\n    protected vertexShader(inAttr: VertexAttributes): { vertexOut: Vector4; attrOut: VertexAttributes } {\n        return {\n            vertexOut: this.mvpMatrix.multiplyVector4(new Vector4(inAttr.vertex as Vector3, 1)),\n            attrOut: {\n                uv: inAttr.uv,\n                normal: this.normalMatrix.multiplyVector3(inAttr.normal as Vector3),\n            }\n        };\n    }\n\n    // 通用着色器函数，采样纹理与基础颜色相乘\n    protected fragmentShader(v2fAttr: VertexAttributes): Color | null {\n        if (!this.mainTexture) return Color.MAGENTA;\n        const uv = v2fAttr.uv as Vector2;\n        const sampledColor = this.mainTexture.Sample(\n            uv.u * this.mainTextureST.x + this.mainTextureST.z,\n            uv.v * this.mainTextureST.y + this.mainTextureST.w\n        );\n        return Color.multiply(sampledColor, this.baseColor);\n    }\n    //#endregion\n}","import { Color } from \"../Math/Color\";\nimport { CullMode, ShaderPass, StencilCompareFunction, StencilOp, StencilPresets } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"./Shader\";\nimport { ToonShader } from \"./ToonShader\";\n\nexport class StencilOutlineShader extends Shader {\n\n    // 基础着色参数\n    public shadowThreshold: number = 0.3;\n    public midtoneThreshold: number = 0.7;\n    public highlightIntensity: number = 1.2;\n\n    // 描边参数\n    public outlineColor: Color = Color.BLACK;          // 描边颜色\n    public outlineThickness: number = 0.05;            // 描边厚度\n    public outlineStencilRef: number = 1;              // 模板测试参考值\n\n    public passes: ShaderPass[] = [\n        // 第一遍：正常渲染物体并标记模板缓冲区\n        {\n            name: \"RenderObjectAndMarkStencil\",\n            vert: this.vertexShader.bind(this),\n            frag: ToonShader.prototype.fragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Back,\n                // 模板测试配置：标记物体区域\n                stencil: {\n                    ref: this.outlineStencilRef,\n                    comparisonOperation: StencilCompareFunction.Always,\n                    passOperation: StencilOp.Replace,    // 通过时替换为参考值\n                    failOperation: StencilOp.Keep,      // 失败时保持原值\n                    zFailOperation: StencilOp.Keep      // 深度失败时保持原值\n                }\n            }\n        },\n        // 第二遍：渲染外扩的模型作为描边，只在未被标记的区域绘制\n        {\n            name: \"RenderOutline\",\n            vert: ToonShader.prototype.outlineVertexShader.bind(this),\n            frag: ToonShader.prototype.outlineFragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Back,\n                // 模板测试配置：只在非物体区域绘制描边\n                stencil: StencilPresets.outline(this.outlineStencilRef),\n            }\n        }\n    ];\n}\n","import { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { CullMode, ShaderPass, VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"./Shader\";\n\nexport class ToonShader extends Shader {\n\n    // 卡通着色特有的参数\n    public shadowThreshold: number = 0.3;               // 阴影阈值\n    public midtoneThreshold: number = 0.7;              // 中间调阈值\n    public highlightIntensity: number = 1.2;            // 高光强度\n    public outlineColor: Color = new Color(0, 0, 0, 1); // 轮廓颜色\n    public outlineThickness: number = 0.05;             // 轮廓厚度\n\n    public passes: ShaderPass[] = [\n        {\n            name: \"Forward\",\n            vert: this.vertexShader.bind(this),\n            frag: this.fragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Back,\n            }\n        },\n        {\n            name: \"Outline\",\n            vert: this.outlineVertexShader.bind(this),\n            frag: this.outlineFragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Front,\n            }\n        }\n    ];\n\n    public fragmentShader(v2fAttr: VertexAttributes): Color | null {\n        if (!this.mainTexture) { return Color.MAGENTA; }\n\n        const uv = v2fAttr.uv as Vector2;\n        const normal = v2fAttr.normal as Vector3;\n\n        // 采样纹理颜色\n        const surfaceColor = this.mainTexture.Sample(uv.u, uv.v);\n\n        // 确保法向量归一化\n        const normalizedNormal = normal.normalize();\n\n        // 计算法向量与光源方向的点积\n        const dotProduct = Vector3.dot(normalizedNormal, this.lightDirection);\n\n        // 卡通着色的核心：将光照分为几个离散的层次\n        let lightIntensity = 0;\n        if (dotProduct > this.midtoneThreshold) {\n            // 高光区域\n            lightIntensity = this.highlightIntensity;\n        } else if (dotProduct > this.shadowThreshold) {\n            // 中间调区域\n            lightIntensity = 0.7;\n        } else {\n            // 阴影区域\n            lightIntensity = 0.3;\n        }\n\n        // 计算漫反射颜色（卡通风格通常不使用复杂的光照公式）\n        const diffR = surfaceColor.r * this.lightColor.r * this.lightIntensity * lightIntensity;\n        const diffG = surfaceColor.g * this.lightColor.g * this.lightIntensity * lightIntensity;\n        const diffB = surfaceColor.b * this.lightColor.b * this.lightIntensity * lightIntensity;\n\n        // 添加环境光\n        const totalR = this.ambientLight.r + diffR;\n        const totalG = this.ambientLight.g + diffG;\n        const totalB = this.ambientLight.b + diffB;\n\n        // 确保颜色值在0-1范围内\n        const clampedR = Math.min(1, Math.max(0, totalR));\n        const clampedG = Math.min(1, Math.max(0, totalG));\n        const clampedB = Math.min(1, Math.max(0, totalB));\n\n        // 返回最终颜色，保留原始Alpha\n        return new Color(clampedR, clampedG, clampedB, surfaceColor.a);\n    }\n\n    // 轮廓线顶点着色器\n    public outlineVertexShader(inAttr: VertexAttributes): { vertexOut: Vector4; attrOut: VertexAttributes } {\n        // 沿法线方向外推顶点来创建轮廓\n        const normal = inAttr.normal as Vector3;\n        const offsetVertex = (inAttr.vertex as Vector3).clone()\n            .add(normal.clone().multiplyScalar(this.outlineThickness));\n\n        return {\n            vertexOut: this.mvpMatrix.multiplyVector4(new Vector4(offsetVertex, 1)),\n            attrOut: {}\n        };\n    }\n\n    // 轮廓线片段着色器\n    public outlineFragmentShader(): Color | null {\n        return this.outlineColor;\n    }\n}","import { BlendFactor, CullMode, RenderType, ShaderPass } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"./Shader\";\n\nexport class TransparentShader extends Shader {\n\n    public renderType: RenderType = RenderType.Transparent;\n    \n    public passes: ShaderPass[] = [\n        {\n            name: \"Forward\",\n            vert: this.vertexShader.bind(this),\n            frag: this.fragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Back,\n                zWrite: false,\n                blend: {\n                    src: BlendFactor.SrcAlpha,\n                    dst: BlendFactor.OneMinusSrcAlpha,\n                },\n            },\n        }\n    ];\n}","import { Camera } from \"../Component/Camera\";\nimport { Engine } from \"../Core/Engine\";\nimport { Color } from \"../Math/Color\";\nimport { TransformTools } from \"../Math/TransformTools\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\n\nenum LogType {\n    Info,\n    Warning,\n    Error,\n}\n\ninterface ILog {\n    message: string;\n    type: LogType;\n    duration: number;\n}\n\ninterface ILine {\n    start: Vector2;\n    end: Vector2;\n    color: Color;\n    duration: number;\n}\n\nexport class Debug {\n    private static logs: ILog[] = [];\n    private static lines: ILine[] = [];\n\n    private static readonly logColors = {\n        [LogType.Info]: 'white',\n        [LogType.Warning]: 'orange',\n        [LogType.Error]: 'red'\n    };\n\n    static PrintLogs() {\n        for (let i = 0; i < this.logs.length; i++) {\n            const log = this.logs[i];\n            Engine.context.fillStyle = Debug.logColors[log.type];\n            Engine.context.fillText(log.message, 10, 20 + i * 15);\n        }\n        this.logs = [];\n    }\n\n    static GetDebugLines() {\n        const lines = this.lines;\n        this.lines = [];\n        return lines;\n    }\n\n    static Log(message: string, duration?: number) {\n        this.push(message, LogType.Info, duration);\n    }\n\n    static LogWarning(message: string, duration?: number) {\n        this.push(message, LogType.Warning, duration);\n    }\n\n    static LogError(message: string, duration?: number) {\n        this.push(message, LogType.Error, duration);\n    }\n\n    static DrawLine(start: Vector2, end: Vector2, color: Color, duration?: number) {\n        const line: ILine = {\n            start,\n            end,\n            color,\n            duration: duration ?? 0,\n        }\n        this.lines.push(line);\n    }\n\n    static DrawLine3D(start: Vector3, end: Vector3, color: Color, duration?: number) {\n        const a = TransformTools.WorldToScreenPos(start, Camera.mainCamera).screen;\n        const b = TransformTools.WorldToScreenPos(end, Camera.mainCamera).screen;\n        this.DrawLine(a, b, color, duration);\n    }\n\n    private static push(message: string, type: LogType, duration?: number) {\n        const log: ILog = {\n            message,\n            type,\n            duration: duration ?? 0,\n        }\n        this.logs.push(log);\n    }\n}","import { Color } from '../Math/Color';\nimport { Vector3 } from '../Math/Vector3';\nimport { Matrix4x4 } from '../Math/Matrix4x4';\nimport { TransformTools } from '../Math/TransformTools';\nimport { Camera } from '../Component/Camera';\nimport { Engine } from '../Core/Engine';\n\n/**\n * Gizmo工具类，用于绘制各种调试图形\n * 参考Unity的Gizmo系统实现\n */\nexport class Gizmo {\n    // 当前绘制颜色\n    private static _color: Color = Color.WHITE;\n\n    // 当前矩阵变换\n    private static _matrix: Matrix4x4 = Matrix4x4.identity;\n\n    /**\n     * 设置当前绘制颜色\n     */\n    public static set color(color: Color) {\n        this._color = color;\n    }\n\n    /**\n     * 获取当前绘制颜色\n     */\n    public static get color(): Color {\n        return this._color;\n    }\n\n    /**\n     * 设置当前变换矩阵\n     */\n    public static set matrix(matrix: Matrix4x4) {\n        this._matrix = matrix;\n    }\n\n    /**\n     * 获取当前变换矩阵\n     */\n    public static get matrix(): Matrix4x4 {\n        return this._matrix;\n    }\n\n    public static Reset(): void {\n        this._color = Color.WHITE;\n        this._matrix = Matrix4x4.identity;\n    }\n\n    /**\n     * 绘制一条从start到end的线\n     */\n    public static DrawLine(start: Vector3, end: Vector3): void {\n        const a = TransformTools.ModelToScreenPos(start, this._matrix, Camera.mainCamera).screen;\n        const b = TransformTools.ModelToScreenPos(end, this._matrix, Camera.mainCamera).screen;\n        Engine.pipeline.DrawLine(a.x, a.y, b.x, b.y, this._color);\n    }\n\n    /**\n     * 绘制一条从position开始，沿direction方向的射线\n     */\n    public static DrawRay(position: Vector3, direction: Vector3): void {\n        const end = Vector3.add(position, direction);\n        this.DrawLine(position, end);\n    }\n\n    /**\n     * 绘制一个立方体线框\n     */\n    public static DrawCube(center: Vector3, size: Vector3): void {\n        // 计算立方体的8个顶点\n        const halfSize = Vector3.multiplyScalar(size, 0.5);\n        const vertices = [\n            new Vector3(-halfSize.x, -halfSize.y, -halfSize.z),\n            new Vector3(halfSize.x, -halfSize.y, -halfSize.z),\n            new Vector3(halfSize.x, halfSize.y, -halfSize.z),\n            new Vector3(-halfSize.x, halfSize.y, -halfSize.z),\n            new Vector3(-halfSize.x, -halfSize.y, halfSize.z),\n            new Vector3(halfSize.x, -halfSize.y, halfSize.z),\n            new Vector3(halfSize.x, halfSize.y, halfSize.z),\n            new Vector3(-halfSize.x, halfSize.y, halfSize.z)\n        ];\n\n        // 定义立方体的12条边\n        const edges = [\n            [0, 1], [1, 2], [2, 3], [3, 0],  // 前面\n            [4, 5], [5, 6], [6, 7], [7, 4],  // 后面\n            [0, 4], [1, 5], [2, 6], [3, 7]   // 连接线\n        ];\n\n        // 应用变换并绘制所有边\n        for (const [i1, i2] of edges) {\n            const p1 = Vector3.add(center, vertices[i1]);\n            const p2 = Vector3.add(center, vertices[i2]);\n            this.DrawLine(p1, p2);\n        }\n    }\n\n    /**\n     * 绘制一个坐标轴\n     */\n    public static DrawAxis(position: Vector3, size: number = 1.0): void {\n        // X轴 (红色)\n        const originalColor = this._color;\n        this._color = Color.RED;\n        const xEnd = Vector3.add(position, new Vector3(size, 0, 0));\n        this.DrawLine(position, xEnd);\n\n        // Y轴 (绿色)\n        this._color = Color.GREEN;\n        const yEnd = Vector3.add(position, new Vector3(0, size, 0));\n        this.DrawLine(position, yEnd);\n\n        // Z轴 (蓝色)\n        this._color = Color.BLUE;\n        const zEnd = Vector3.add(position, new Vector3(0, 0, size));\n        this.DrawLine(position, zEnd);\n\n        // 恢复原始颜色\n        this._color = originalColor;\n    }\n}","import { Mesh } from \"../Resources/Mesh\";\nimport { SubMesh } from \"../Resources/Mesh\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Bounds } from \"../Math/Bounds\";\n\nexport class OBJParser {\n    /**\n     * 解析OBJ文件内容并生成Mesh对象\n     * @param content OBJ文件的文本内容\n     * @param scale 模型缩放比例，默认1.0\n     * @returns 解析后的Mesh对象\n     */\n    static parse(content: string, scale: number = 1): Mesh {\n        const mesh = new Mesh();\n        mesh.vertices = [];\n        mesh.uv = [];\n        mesh.normals = [];\n        mesh.tangents = [];\n        mesh.triangles = [];\n        mesh.bounds = [];\n        mesh.subMeshes = [];\n        mesh.material = []; // 初始化材质数组\n\n        // 临时存储OBJ文件中的原始数据（索引从1开始）\n        const tempVertices: Vector3[] = [];\n        const tempUvs: Vector2[] = [];\n        const tempNormals: Vector3[] = [];\n\n        // 顶点索引映射表：用于去重 (格式: \"vIndex/vtIndex/vnIndex\" => 合并后的索引)\n        const vertexMap = new Map<string, number>();\n\n        // 材质相关变量\n        let currentMaterial = \"\"; // 当前使用的材质名称\n        const materialSet = new Set<string>(); // 用于收集所有唯一材质\n\n        // 按行分割内容并处理\n        const lines = content.split(/\\r?\\n/);\n        let currentSubMesh: SubMesh | null = null;\n\n        for (const line of lines) {\n            const trimmedLine = line.trim();\n            if (!trimmedLine || trimmedLine.startsWith('#')) {\n                continue; // 跳过空行和注释\n            }\n\n            const parts = trimmedLine.split(/\\s+/);\n            const type = parts[0];\n            const data = parts.slice(1);\n\n            switch (type) {\n                case 'v': // 顶点坐标 (x, y, z) - 应用缩放\n                    if (data.length >= 3) {\n                        tempVertices.push(new Vector3(\n                            parseFloat(data[0]) * scale,\n                            parseFloat(data[1]) * scale,\n                            parseFloat(data[2]) * scale\n                        ));\n                    }\n                    break;\n\n                case 'vt': // 纹理坐标 (u, v)\n                    if (data.length >= 2) {\n                        tempUvs.push(new Vector2(\n                            parseFloat(data[0]),\n                            1 - parseFloat(data[1]) // 翻转V轴\n                        ));\n                    }\n                    break;\n\n                case 'vn': // 法线 (x, y, z)\n                    if (data.length >= 3) {\n                        tempNormals.push(new Vector3(\n                            parseFloat(data[0]),\n                            parseFloat(data[1]),\n                            parseFloat(data[2])\n                        ));\n                    }\n                    break;\n\n                case 'mtllib': // 材质库引用（暂存材质库文件名，实际加载需额外实现）\n                    // 这里可以记录材质库文件路径，用于后续加载材质\n                    // 示例: const mtlPath = data.join(' ');\n                    break;\n\n                case 'usemtl': // 使用材质\n                    if (data.length > 0) {\n                        currentMaterial = data.join(' '); // 支持带空格的材质名\n                        materialSet.add(currentMaterial);\n\n                        if (currentSubMesh) {\n                            currentSubMesh.material = currentMaterial; // 关联材质\n                        }\n                    }\n                    break;\n\n                case 'g': // 处理组指令，创建新的子网格\n                    // 结算当前子网格\n                    if (currentSubMesh) {\n                        currentSubMesh.vertexCount = mesh.vertices.length - currentSubMesh.firstVertex;\n                        currentSubMesh.indexCount = mesh.triangles.length - currentSubMesh.indexStart;\n                    }\n                    // 创建新子网格并继承当前材质\n                    currentSubMesh = new SubMesh();\n                    currentSubMesh.firstVertex = mesh.vertices.length;\n                    currentSubMesh.indexStart = mesh.triangles.length;\n                    currentSubMesh.vertexCount = 0;\n                    currentSubMesh.indexCount = 0;\n                    currentSubMesh.bounds = new Bounds();\n                    currentSubMesh.material = currentMaterial; // 继承当前材质\n                    mesh.subMeshes.push(currentSubMesh);\n                    break;\n\n                case 'f': // 面\n                    if (data.length < 3) break;\n\n                    // 初始化当前子网格（如果没有）\n                    if (!currentSubMesh) {\n                        currentSubMesh = new SubMesh();\n                        currentSubMesh.firstVertex = mesh.vertices.length;\n                        currentSubMesh.indexStart = mesh.triangles.length;\n                        currentSubMesh.vertexCount = 0;\n                        currentSubMesh.indexCount = 0;\n                        currentSubMesh.bounds = new Bounds();\n                        currentSubMesh.material = currentMaterial; // 使用当前材质\n                        mesh.subMeshes.push(currentSubMesh);\n                    }\n\n                    // 处理面的顶点数据\n                    const faceVertices = data.map(vertexStr => {\n                        const indices = vertexStr.split('/').map(idx => parseInt(idx) || 0);\n                        return {\n                            v: indices[0] - 1, // 转换为0基索引\n                            vt: indices[1] - 1,\n                            vn: indices[2] - 1\n                        };\n                    });\n\n                    // 处理三角形化和顶点去重\n                    for (let i = 2; i < faceVertices.length; i++) {\n                        [0, i - 1, i].forEach(idx => {\n                            const { v, vt, vn } = faceVertices[idx];\n\n                            // 创建唯一标识键 (处理可能的负数索引和默认值)\n                            const key = `${v >= 0 ? v : -1}/${vt >= 0 ? vt : -1}/${vn >= 0 ? vn : -1}`;\n\n                            if (vertexMap.has(key)) {\n                                // 复用已存在的顶点索引\n                                mesh.triangles.push(vertexMap.get(key)!);\n                            } else {\n                                // 添加新顶点数据\n                                const newIndex = mesh.vertices.length;\n                                vertexMap.set(key, newIndex);\n\n                                // 顶点数据\n                                mesh.vertices.push(v >= 0 && v < tempVertices.length ? tempVertices[v] : new Vector3(0, 0, 0));\n\n                                // UV数据\n                                mesh.uv.push(vt >= 0 && vt < tempUvs.length ? tempUvs[vt] : new Vector2(0, 0));\n\n                                // 法线数据\n                                mesh.normals.push(vn >= 0 && vn < tempNormals.length ? tempNormals[vn] : new Vector3(0, 0, 1));\n\n                                // 先初始化切线为零向量，后续会计算\n                                mesh.tangents.push(new Vector4(0, 0, 0, 1));\n\n                                // 添加索引\n                                mesh.triangles.push(newIndex);\n                            }\n                        });\n                    }\n                    break;\n            }\n        }\n\n        // 更新子网格信息\n        mesh.subMeshes.forEach(subMesh => {\n            subMesh.vertexCount = mesh.vertices.length - subMesh.firstVertex;\n            subMesh.indexCount = mesh.triangles.length - subMesh.indexStart;\n        });\n\n        // 收集所有材质到mesh.material数组\n        mesh.material = Array.from(materialSet);\n\n        mesh.calculateMeshData();\n\n        if (!mesh.checkValid()) {\n            console.error(\"Mesh check valid faild.\");\n        }\n\n        return mesh;\n    }\n}","import { Engine } from \"./Core/Engine\";\n\n// 当DOM内容加载完成后执行\ndocument.addEventListener('DOMContentLoaded', async () => {\n    // 初始化引擎\n    await Engine.Init();\n    // 主循环\n    function mainLoop(time: number) {\n        Engine.Loop(time);\n        // 请求下一帧动画\n        requestAnimationFrame(mainLoop);\n    }\n    // 开始动画循环\n    requestAnimationFrame(mainLoop);\n});"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQHR3ZWVuanMvdHdlZW4uanMvZGlzdC90d2Vlbi5janMiLCJub2RlX21vZHVsZXMvY2Fubm9uL2J1aWxkL2Nhbm5vbi5qcyIsIm5vZGVfbW9kdWxlcy9yZWZsZWN0LW1ldGFkYXRhL1JlZmxlY3QuanMiLCJzcmMvQ29tcG9uZW50L0JveENvbGxpZGVyLnRzIiwic3JjL0NvbXBvbmVudC9DYW1lcmEudHMiLCJzcmMvQ29tcG9uZW50L0NvbGxpZGVyLnRzIiwic3JjL0NvbXBvbmVudC9Db21wb25lbnQudHMiLCJzcmMvQ29tcG9uZW50L0xpZ2h0LnRzIiwic3JjL0NvbXBvbmVudC9NZXNoUmVuZGVyZXIudHMiLCJzcmMvQ29tcG9uZW50L1JlbmRlcmVyLnRzIiwic3JjL0NvbXBvbmVudC9SaWdpZEJvZHkudHMiLCJzcmMvQ29tcG9uZW50L1NwaGVyZUNvbGxpZGVyLnRzIiwic3JjL0NvbXBvbmVudC9UZXN0Q29tcC9DYW1lcmFDb250cm9sbGVyLnRzIiwic3JjL0NvbXBvbmVudC9UZXN0Q29tcC9PYmpBdXRvUm90YXRlLnRzIiwic3JjL0NvbXBvbmVudC9UZXN0Q29tcC9PYmpSb3RhdGUudHMiLCJzcmMvQ29yZS9EZWNvcmF0b3JzLnRzIiwic3JjL0NvcmUvRW5naW5lLnRzIiwic3JjL0NvcmUvR2FtZU9iamVjdC50cyIsInNyYy9Db3JlL0lucHV0LnRzIiwic3JjL0NvcmUvU2V0dGluZy50cyIsInNyYy9Db3JlL1RpbWUudHMiLCJzcmMvQ29yZS9UcmFuc2Zvcm0udHMiLCJzcmMvQ29yZS9Ud2Vlbk1hbmFnZXIudHMiLCJzcmMvQ29yZS9VT2JqZWN0LnRzIiwic3JjL01hdGgvQlZIVHJlZS50cyIsInNyYy9NYXRoL0JvdW5kcy50cyIsInNyYy9NYXRoL0NvbG9yLnRzIiwic3JjL01hdGgvTWF0cml4NHg0LnRzIiwic3JjL01hdGgvUGFuZWwudHMiLCJzcmMvTWF0aC9RdWF0ZXJuaW9uLnRzIiwic3JjL01hdGgvUmF5LnRzIiwic3JjL01hdGgvVHJhbnNmb3JtVG9vbHMudHMiLCJzcmMvTWF0aC9WZWN0b3IyLnRzIiwic3JjL01hdGgvVmVjdG9yMy50cyIsInNyYy9NYXRoL1ZlY3RvcjQudHMiLCJzcmMvUGh5c2ljcy9QaHlzaWNzLnRzIiwic3JjL1BoeXNpY3MvUmF5Y2FzdEhpdC50cyIsInNyYy9SZW5kZXJlci9CYXJ5Y2VudHJpY1RyaWFuZ2xlUmFzdGVyaXplci50cyIsInNyYy9SZW5kZXJlci9SYXN0ZXJpemF0aW9uUGlwZWxpbmUudHMiLCJzcmMvUmVuZGVyZXIvUmVuZGVyZXJEZWZpbmUudHMiLCJzcmMvUmVuZGVyZXIvVHJpYW5nbGVSYXN0ZXJpemVyLnRzIiwic3JjL1Jlc291cmNlcy9DdWJlTWFwLnRzIiwic3JjL1Jlc291cmNlcy9NYXRlcmlhbC50cyIsInNyYy9SZXNvdXJjZXMvTWVzaC50cyIsInNyYy9SZXNvdXJjZXMvUmVzb3VyY2VzLnRzIiwic3JjL1Jlc291cmNlcy9UZXh0dXJlLnRzIiwic3JjL1Jlc291cmNlcy9UZXh0dXJlQ3JlYXRvci50cyIsInNyYy9TY2VuZS9NYWluU2NlbmUudHMiLCJzcmMvU2NlbmUvU2NlbmUudHMiLCJzcmMvU2NlbmUvU2NlbmVNYW5hZ2VyLnRzIiwic3JjL1NoYWRlci9MaXRTaGFkZXIudHMiLCJzcmMvU2hhZGVyL1NoYWRlci50cyIsInNyYy9TaGFkZXIvU3RlbmNpbE91dGxpbmVTaGFkZXIudHMiLCJzcmMvU2hhZGVyL1Rvb25TaGFkZXIudHMiLCJzcmMvU2hhZGVyL1RyYW5zcGFyZW50U2hhZGVyLnRzIiwic3JjL1V0aWxzL0RlYnVnLnRzIiwic3JjL1V0aWxzL0dpem1vLnRzIiwic3JjL1V0aWxzL09ialBhcnNlci50cyIsInNyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDMzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUN0M2FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JGLE1BQU07Z0JBQ04sSUFBSSxhQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckYsTUFBTTtnQkFDTixJQUFJLGFBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyRixNQUFNO2dCQUNOLElBQUksYUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENB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Q0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUs7WUFDckMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsS0FBSztZQUNyQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBRSxTQUFTO1NBQzVDLENBQUM7UUFHRSxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRWYsUUFBUTtRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxpQkFBTyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFOUMsa0JBQWtCO1FBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxpQkFBTyxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbkQsU0FBUztRQUNULElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxLQUFLLENBQVUsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLGlCQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07UUFDMUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLGlCQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07UUFDMUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLGlCQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU07UUFDMUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLGlCQUFPLENBQUMsSUFBSSxD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QUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELE1BQU0sS0FBSyxPQUFPLEtBQUssT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsTUFBTSxLQUFLLE1BQU0sS0FBSyxPQUFPLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6RCxNQUFNLEtBQUssTUFBTSxLQUFLLE9BQU8sSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELE1BQU0sS0FBSyxLQUFLLEtBQUssT0FBTyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUQsTUFBTSxLQUFLLE1BQU0sS0FBSyxPQUFPLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLEtBQUssS0FBSyxLQUFLLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBUTNELFlBQVksQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTLEVBQUUsSUFBWSxDQUFDO1FBQ3RELElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRU0sS0FBSztRQUNSLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxHQUFHLENBQUMsQ0FBUTtRQUNmLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sUUFBUSxDQUFDLENBQVE7UUFDcEIsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFD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LENBQUMsUUFBUSxDQUFDLEVBQVMsRUFBRSxFQUFTO1FBQ3ZDLE9BQU8sSUFBSSxLQUFLLENBQ1osS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDN0IsQ0FBQztJQUNOLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQVMsRUFBRSxFQUFTO1FBQ3ZDLE9BQU8sSUFBSSxLQUFLLENBQ1osS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFDMUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FDN0IsQ0FBQztJQUNOLENBQUM7SUFFTSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQVEsRUFBRSxNQUFjO1FBQ2pELE9BQU8sSUFBSSxLQUFLLENBQ1osS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUMzQixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQzNCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxN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LEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQWEsRUFBRSxNQUFlO1FBQzNDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRU0sUUFBUSxDQUFDLENBQVk7UUFDeEIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN0QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ25CLElBQUksTUFBTSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRXBDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTdHLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxlQUFlLENBQUMsQ0FBVTtRQUM3QixJQUFJLEdBQUcsR0FBRyxJQUFJLGlCQUFPLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBRXBCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FB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LEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEMsQ0FBQzthQUFNLENBQUM7WUFDSixJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNqRCxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdELENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7Z0JBQ2YsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RDLENBQUM7aUJBQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQy9CLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0QsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7Z0JBQ2YsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEMsQ0FBQztpQkFBTSxDQUFDO2dCQUNKLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0QsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbEMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLENBQUM7UUFDTCxDQUFDO1FBRUQsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRU0sZUFBZTtRQUNsQixpRUFBaUU7UUFDakUsZ0NBQWdDO1FBQ2hDLGdEQUFnRDtRQUNoRCxZQUFZO1FBRVosSUFBSSxHQUFHLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUMxQixJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBQ3BCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFckIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVCLElBQUksTUFBTSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksTUFBTSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3pCLElBQUksTUFBTSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRXpCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFYixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUM3QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUM3QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUM3QixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRWIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7UUFDN0IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUViLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFYixPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFFTSxjQUFjO1FBQ2pCLGlFQUFpRTtRQUNqRSxhQUFhO1FBQ2IsWUFBWTtRQUVaLElBQUksS0FBSyxHQUFHLElBQUksaUJBQU8sRUFBRSxDQUFDO1FBRTFCLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxNQUFNLENBQUM7UUFDdkMsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25ELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkQsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1FBQ3hCLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDMUIsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXpCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLEVBQUUsQ0FBQztZQUM1QixLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDaEMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7YUFBTSxDQUFDO1lBQ0osS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUMvQixLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQixDQUFDO1FBRUQsT0FBTyxJQUFJLGlCQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDcEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxpQkFBTyxFQUFFLENBQUM7UUFFdEIsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0UsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0UsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFM0UsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQsT0FBTztJQUNBLFNBQVM7UUFDWixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLElBQUksRUFBRSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRWhDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkYsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMs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LENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEIsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV0QixNQUFNLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFDbkMsTUFBTSxLQUFLLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ25DLE1BQU0sS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNuQyxNQUFNLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFDbkMsTUFBTSxLQUFLLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ25DLE1BQU0sS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNuQyxNQUFNLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFDbkMsTUFBTSxLQUFLLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ25DLE1BQU0sS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUNuQyxNQUFNLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUE7UUFDbkMsTUFBTSxLQUFLLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFBO1FBQ25DLE1BQU0sS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQTtRQUVuQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFFMUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ1AsT0FBTyxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1lBQzVELGVBQWU7UUFDbkIsQ0FBQztRQUVELEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBRWhCLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFBO1FBQzNELEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDNUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDM0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUM1RCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFBO1FBQzVELEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFBO1FBQzNELEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDNUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDM0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDM0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUM1RCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUMzRCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFBO1FBQzVELEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDNUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUE7UUFDM0QsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUM1RCxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQTtRQUUzRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRU0sYUFBYTtRQUNoQixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3BC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Q0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFbkQsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVNLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFhO1FBQ25ELElBQUksTUFBTSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUV0QixJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNyQixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN0QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUN0QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUN2QixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUV2QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFD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QyxDQUFDLENBQUM7UUFDdkMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFeEIsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxHQUFHLEdBQUcsQ0FBQztRQUM5QixHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQztRQUNkLENBQUMsSUFBSSxHQUFHLENBQUM7UUFDVCxDQUFDLElBQUksR0FBRyxDQUFDO1FBQ1QsQ0FBQyxJQUFJLEdBQUcsQ0FBQztRQUNULENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNaLE9BQU8sR0FBRyxDQUFDO0lBQ2YsQ0FBQztJQUVNLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBVTtRQUNuQyxJQUFJLE1BQU0sR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFFdEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdB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QztJQUVNLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFlLEVBQUUsVUFBc0I7UUFDdkUsNEJBQTRCO1FBQzVCLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDakYsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUUvQyxXQUFXO1FBQ1gsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDcEMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVyQyxnQ0FBZ0M7UUFDaEMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMxRCxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxF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QUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRU0sTUFBTSxDQUFDLENBQVU7UUFDcEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDOUMsQ0FBQztJQUVEOztPQUVHO0lBRUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFXLEVBQUUsRUFBVztRQUN0QyxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFXLEVBQUUsRUFBVztRQUMzQyxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFXLEVBQUUsRUFBVztRQUMzQyxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFXLEVBQUUsRUFBVztRQUN6QyxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMs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QUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQVcsRUFBRSxFQUFXO1FBQzNDLE9BQU8sSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFXLEVBQUUsRUFBVztRQUN6QyxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBVyxFQUFFLENBQVM7UUFDL0MsT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQVcsRUFBRSxFQUFXLEVBQUUsQ0FBUztRQUNsRCxJQUFJLENBQUMsR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENB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Q1IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxDQUFVO1FBQ3BCLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFTSxRQUFRO1FBQ1gsT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDOUUsQ0FBQztJQUVEOztPQUVHO0lBRUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFXLEVBQUUsRUFBVztRQUN0QyxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQVcsRUFBRSxFQUFXO1FBQzNDLE9BQU8sSUFBSSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFH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aUJBQU8sQ0FDZCxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDM0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQzlCLENBQUM7SUFDTixDQUFDO0lBRUQ7O09BRUc7SUFDSyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxDQUFVLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQ2pHLE9BQU8sSUFBSSxpQkFBTyxDQUNkLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUMzQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFDM0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQzlCLENBQUM7SUFDTixDQUFDO0lBRUQ7O09BRUc7SUFDSyxNQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBVSxFQUFFLENBQVUsRUFBRSxDQUFVLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxDQUFTO1FBQ2pHLE9BQU8sSUFBSSxpQkFBTyxDQUNkLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUMzQixDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FB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RyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBRWpDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3QixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRTdCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDdkIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN2QixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXZCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRXZCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRXZCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdkIsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUV2QixNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNwQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVuQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVqQixNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNuQyxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUVuQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixDQUFDO1FBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFF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UUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFeEMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFekIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKO0FBMUxELDhCQTBMQzs7Ozs7Ozs7Ozs7Ozs7QUNqTUQsMENBQXVDO0FBRXZDLGdCQUFnQjtBQUNoQixRQUFRLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsR0FBUyxFQUFFO0lBQ3JELFFBQVE7SUFDUixNQUFNLGVBQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixNQUFNO0lBQ04sU0FBUyxRQUFRLENBQUMsSUFBWTtRQUMxQixlQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xCLFVBQVU7UUFDVixxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ0QsU0FBUztJQUNULHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3BDLENBQUMsQ0FBQSxDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbi8qKlxuICogVGhlIEVhc2UgY2xhc3MgcHJvdmlkZXMgYSBjb2xsZWN0aW9uIG9mIGVhc2luZyBmdW5jdGlvbnMgZm9yIHVzZSB3aXRoIHR3ZWVuLmpzLlxuICovXG52YXIgRWFzaW5nID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgTGluZWFyOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgTm9uZTogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICAgICAgfSxcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudDtcbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQ7XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgUXVhZHJhdGljOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudCAqICgyIC0gYW1vdW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmICgoYW1vdW50ICo9IDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTAuNSAqICgtLWFtb3VudCAqIChhbW91bnQgLSAyKSAtIDEpO1xuICAgICAgICB9LFxuICAgIH0pLFxuICAgIEN1YmljOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIC0tYW1vdW50ICogYW1vdW50ICogYW1vdW50ICsgMTtcbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmICgoYW1vdW50ICo9IDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgKiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKChhbW91bnQgLT0gMikgKiBhbW91bnQgKiBhbW91bnQgKyAyKTtcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICBRdWFydGljOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIDEgLSAtLWFtb3VudCAqIGFtb3VudCAqIGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmICgoYW1vdW50ICo9IDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgKiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQgKiBhbW91bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTAuNSAqICgoYW1vdW50IC09IDIpICogYW1vdW50ICogYW1vdW50ICogYW1vdW50IC0gMik7XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgUXVpbnRpYzogT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIEluOiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50O1xuICAgICAgICB9LFxuICAgICAgICBPdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiAtLWFtb3VudCAqIGFtb3VudCAqIGFtb3VudCAqIGFtb3VudCAqIGFtb3VudCArIDE7XG4gICAgICAgIH0sXG4gICAgICAgIEluT3V0OiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICBpZiAoKGFtb3VudCAqPSAyKSA8IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMC41ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDAuNSAqICgoYW1vdW50IC09IDIpICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICogYW1vdW50ICsgMik7XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgU2ludXNvaWRhbDogT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIEluOiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gMSAtIE1hdGguc2luKCgoMS4wIC0gYW1vdW50KSAqIE1hdGguUEkpIC8gMik7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGguc2luKChhbW91bnQgKiBNYXRoLlBJKSAvIDIpO1xuICAgICAgICB9LFxuICAgICAgICBJbk91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIDAuNSAqICgxIC0gTWF0aC5zaW4oTWF0aC5QSSAqICgwLjUgLSBhbW91bnQpKSk7XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgRXhwb25lbnRpYWw6IE9iamVjdC5mcmVlemUoe1xuICAgICAgICBJbjogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIGFtb3VudCA9PT0gMCA/IDAgOiBNYXRoLnBvdygxMDI0LCBhbW91bnQgLSAxKTtcbiAgICAgICAgfSxcbiAgICAgICAgT3V0OiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gYW1vdW50ID09PSAxID8gMSA6IDEgLSBNYXRoLnBvdygyLCAtMTAgKiBhbW91bnQpO1xuICAgICAgICB9LFxuICAgICAgICBJbk91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgaWYgKGFtb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFtb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChhbW91bnQgKj0gMikgPCAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuNSAqIE1hdGgucG93KDEwMjQsIGFtb3VudCAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogKGFtb3VudCAtIDEpKSArIDIpO1xuICAgICAgICB9LFxuICAgIH0pLFxuICAgIENpcmN1bGFyOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiAxIC0gTWF0aC5zcXJ0KDEgLSBhbW91bnQgKiBhbW91bnQpO1xuICAgICAgICB9LFxuICAgICAgICBPdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnNxcnQoMSAtIC0tYW1vdW50ICogYW1vdW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmICgoYW1vdW50ICo9IDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMC41ICogKE1hdGguc3FydCgxIC0gYW1vdW50ICogYW1vdW50KSAtIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDAuNSAqIChNYXRoLnNxcnQoMSAtIChhbW91bnQgLT0gMikgKiBhbW91bnQpICsgMSk7XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgRWxhc3RpYzogT2JqZWN0LmZyZWV6ZSh7XG4gICAgICAgIEluOiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICBpZiAoYW1vdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYW1vdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLU1hdGgucG93KDIsIDEwICogKGFtb3VudCAtIDEpKSAqIE1hdGguc2luKChhbW91bnQgLSAxLjEpICogNSAqIE1hdGguUEkpO1xuICAgICAgICB9LFxuICAgICAgICBPdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmIChhbW91bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbW91bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBNYXRoLnBvdygyLCAtMTAgKiBhbW91bnQpICogTWF0aC5zaW4oKGFtb3VudCAtIDAuMSkgKiA1ICogTWF0aC5QSSkgKyAxO1xuICAgICAgICB9LFxuICAgICAgICBJbk91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgaWYgKGFtb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFtb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW1vdW50ICo9IDI7XG4gICAgICAgICAgICBpZiAoYW1vdW50IDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMC41ICogTWF0aC5wb3coMiwgMTAgKiAoYW1vdW50IC0gMSkpICogTWF0aC5zaW4oKGFtb3VudCAtIDEuMSkgKiA1ICogTWF0aC5QSSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMC41ICogTWF0aC5wb3coMiwgLTEwICogKGFtb3VudCAtIDEpKSAqIE1hdGguc2luKChhbW91bnQgLSAxLjEpICogNSAqIE1hdGguUEkpICsgMTtcbiAgICAgICAgfSxcbiAgICB9KSxcbiAgICBCYWNrOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHZhciBzID0gMS43MDE1ODtcbiAgICAgICAgICAgIHJldHVybiBhbW91bnQgPT09IDEgPyAxIDogYW1vdW50ICogYW1vdW50ICogKChzICsgMSkgKiBhbW91bnQgLSBzKTtcbiAgICAgICAgfSxcbiAgICAgICAgT3V0OiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICB2YXIgcyA9IDEuNzAxNTg7XG4gICAgICAgICAgICByZXR1cm4gYW1vdW50ID09PSAwID8gMCA6IC0tYW1vdW50ICogYW1vdW50ICogKChzICsgMSkgKiBhbW91bnQgKyBzKSArIDE7XG4gICAgICAgIH0sXG4gICAgICAgIEluT3V0OiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICB2YXIgcyA9IDEuNzAxNTggKiAxLjUyNTtcbiAgICAgICAgICAgIGlmICgoYW1vdW50ICo9IDIpIDwgMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgKiAoYW1vdW50ICogYW1vdW50ICogKChzICsgMSkgKiBhbW91bnQgLSBzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMC41ICogKChhbW91bnQgLT0gMikgKiBhbW91bnQgKiAoKHMgKyAxKSAqIGFtb3VudCArIHMpICsgMik7XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgQm91bmNlOiBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgSW46IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIHJldHVybiAxIC0gRWFzaW5nLkJvdW5jZS5PdXQoMSAtIGFtb3VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgaWYgKGFtb3VudCA8IDEgLyAyLjc1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDcuNTYyNSAqIGFtb3VudCAqIGFtb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFtb3VudCA8IDIgLyAyLjc1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDcuNTYyNSAqIChhbW91bnQgLT0gMS41IC8gMi43NSkgKiBhbW91bnQgKyAwLjc1O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYW1vdW50IDwgMi41IC8gMi43NSkge1xuICAgICAgICAgICAgICAgIHJldHVybiA3LjU2MjUgKiAoYW1vdW50IC09IDIuMjUgLyAyLjc1KSAqIGFtb3VudCArIDAuOTM3NTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiA3LjU2MjUgKiAoYW1vdW50IC09IDIuNjI1IC8gMi43NSkgKiBhbW91bnQgKyAwLjk4NDM3NTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgIGlmIChhbW91bnQgPCAwLjUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gRWFzaW5nLkJvdW5jZS5JbihhbW91bnQgKiAyKSAqIDAuNTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBFYXNpbmcuQm91bmNlLk91dChhbW91bnQgKiAyIC0gMSkgKiAwLjUgKyAwLjU7XG4gICAgICAgIH0sXG4gICAgfSksXG4gICAgZ2VuZXJhdGVQb3c6IGZ1bmN0aW9uIChwb3dlcikge1xuICAgICAgICBpZiAocG93ZXIgPT09IHZvaWQgMCkgeyBwb3dlciA9IDQ7IH1cbiAgICAgICAgcG93ZXIgPSBwb3dlciA8IE51bWJlci5FUFNJTE9OID8gTnVtYmVyLkVQU0lMT04gOiBwb3dlcjtcbiAgICAgICAgcG93ZXIgPSBwb3dlciA+IDEwMDAwID8gMTAwMDAgOiBwb3dlcjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIEluOiBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KGFtb3VudCwgcG93ZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE91dDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAxIC0gTWF0aC5wb3coKDEgLSBhbW91bnQpLCBwb3dlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSW5PdXQ6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW1vdW50IDwgMC41KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnBvdygoYW1vdW50ICogMiksIHBvd2VyKSAvIDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAoMSAtIE1hdGgucG93KCgyIC0gYW1vdW50ICogMiksIHBvd2VyKSkgLyAyICsgMC41O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxufSk7XG5cbnZhciBub3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcblxuLyoqXG4gKiBDb250cm9sbGluZyBncm91cHMgb2YgdHdlZW5zXG4gKlxuICogVXNpbmcgdGhlIFRXRUVOIHNpbmdsZXRvbiB0byBtYW5hZ2UgeW91ciB0d2VlbnMgY2FuIGNhdXNlIGlzc3VlcyBpbiBsYXJnZSBhcHBzIHdpdGggbWFueSBjb21wb25lbnRzLlxuICogSW4gdGhlc2UgY2FzZXMsIHlvdSBtYXkgd2FudCB0byBjcmVhdGUgeW91ciBvd24gc21hbGxlciBncm91cHMgb2YgdHdlZW5cbiAqL1xudmFyIEdyb3VwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdyb3VwKCkge1xuICAgICAgICB2YXIgdHdlZW5zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB0d2VlbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90d2VlbnMgPSB7fTtcbiAgICAgICAgdGhpcy5fdHdlZW5zQWRkZWREdXJpbmdVcGRhdGUgPSB7fTtcbiAgICAgICAgdGhpcy5hZGQuYXBwbHkodGhpcywgdHdlZW5zKTtcbiAgICB9XG4gICAgR3JvdXAucHJvdG90eXBlLmdldEFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX3R3ZWVucykubWFwKGZ1bmN0aW9uICh0d2VlbklkKSB7IHJldHVybiBfdGhpcy5fdHdlZW5zW3R3ZWVuSWRdOyB9KTtcbiAgICB9O1xuICAgIEdyb3VwLnByb3RvdHlwZS5yZW1vdmVBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3R3ZWVucyA9IHt9O1xuICAgIH07XG4gICAgR3JvdXAucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgdHdlZW5zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB0d2VlbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfYiA9IDAsIHR3ZWVuc18xID0gdHdlZW5zOyBfYiA8IHR3ZWVuc18xLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgdmFyIHR3ZWVuID0gdHdlZW5zXzFbX2JdO1xuICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gYW55IG90aGVyIGdyb3VwIGZpcnN0LCBhIHR3ZWVuIGNhbiBvbmx5IGJlIGluIG9uZSBncm91cCBhdCBhIHRpbWUuXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGxpYnJhcnkgaW50ZXJuYWwgYWNjZXNzXG4gICAgICAgICAgICAoX2EgPSB0d2Vlbi5fZ3JvdXApID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmUodHdlZW4pO1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBsaWJyYXJ5IGludGVybmFsIGFjY2Vzc1xuICAgICAgICAgICAgdHdlZW4uX2dyb3VwID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuX3R3ZWVuc1t0d2Vlbi5nZXRJZCgpXSA9IHR3ZWVuO1xuICAgICAgICAgICAgdGhpcy5fdHdlZW5zQWRkZWREdXJpbmdVcGRhdGVbdHdlZW4uZ2V0SWQoKV0gPSB0d2VlbjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgR3JvdXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHR3ZWVucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdHdlZW5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2EgPSAwLCB0d2VlbnNfMiA9IHR3ZWVuczsgX2EgPCB0d2VlbnNfMi5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciB0d2VlbiA9IHR3ZWVuc18yW19hXTtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgbGlicmFyeSBpbnRlcm5hbCBhY2Nlc3NcbiAgICAgICAgICAgIHR3ZWVuLl9ncm91cCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl90d2VlbnNbdHdlZW4uZ2V0SWQoKV07XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fdHdlZW5zQWRkZWREdXJpbmdVcGRhdGVbdHdlZW4uZ2V0SWQoKV07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKiBSZXR1cm4gdHJ1ZSBpZiBhbGwgdHdlZW5zIGluIHRoZSBncm91cCBhcmUgbm90IHBhdXNlZCBvciBwbGF5aW5nLiAqL1xuICAgIEdyb3VwLnByb3RvdHlwZS5hbGxTdG9wcGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBbGwoKS5ldmVyeShmdW5jdGlvbiAodHdlZW4pIHsgcmV0dXJuICF0d2Vlbi5pc1BsYXlpbmcoKTsgfSk7XG4gICAgfTtcbiAgICBHcm91cC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRpbWUsIHByZXNlcnZlKSB7XG4gICAgICAgIGlmICh0aW1lID09PSB2b2lkIDApIHsgdGltZSA9IG5vdygpOyB9XG4gICAgICAgIGlmIChwcmVzZXJ2ZSA9PT0gdm9pZCAwKSB7IHByZXNlcnZlID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgdHdlZW5JZHMgPSBPYmplY3Qua2V5cyh0aGlzLl90d2VlbnMpO1xuICAgICAgICBpZiAodHdlZW5JZHMubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyBUd2VlbnMgYXJlIHVwZGF0ZWQgaW4gXCJiYXRjaGVzXCIuIElmIHlvdSBhZGQgYSBuZXcgdHdlZW4gZHVyaW5nIGFuXG4gICAgICAgIC8vIHVwZGF0ZSwgdGhlbiB0aGUgbmV3IHR3ZWVuIHdpbGwgYmUgdXBkYXRlZCBpbiB0aGUgbmV4dCBiYXRjaC5cbiAgICAgICAgLy8gSWYgeW91IHJlbW92ZSBhIHR3ZWVuIGR1cmluZyBhbiB1cGRhdGUsIGl0IG1heSBvciBtYXkgbm90IGJlIHVwZGF0ZWQuXG4gICAgICAgIC8vIEhvd2V2ZXIsIGlmIHRoZSByZW1vdmVkIHR3ZWVuIHdhcyBhZGRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgYmF0Y2gsXG4gICAgICAgIC8vIHRoZW4gaXQgd2lsbCBub3QgYmUgdXBkYXRlZC5cbiAgICAgICAgd2hpbGUgKHR3ZWVuSWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3R3ZWVuc0FkZGVkRHVyaW5nVXBkYXRlID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR3ZWVuSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHR3ZWVuID0gdGhpcy5fdHdlZW5zW3R3ZWVuSWRzW2ldXTtcbiAgICAgICAgICAgICAgICB2YXIgYXV0b1N0YXJ0ID0gIXByZXNlcnZlO1xuICAgICAgICAgICAgICAgIGlmICh0d2VlbiAmJiB0d2Vlbi51cGRhdGUodGltZSwgYXV0b1N0YXJ0KSA9PT0gZmFsc2UgJiYgIXByZXNlcnZlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSh0d2Vlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0d2VlbklkcyA9IE9iamVjdC5rZXlzKHRoaXMuX3R3ZWVuc0FkZGVkRHVyaW5nVXBkYXRlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEdyb3VwO1xufSgpKTtcblxuLyoqXG4gKlxuICovXG52YXIgSW50ZXJwb2xhdGlvbiA9IHtcbiAgICBMaW5lYXI6IGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICAgIHZhciBtID0gdi5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgZiA9IG0gKiBrO1xuICAgICAgICB2YXIgaSA9IE1hdGguZmxvb3IoZik7XG4gICAgICAgIHZhciBmbiA9IEludGVycG9sYXRpb24uVXRpbHMuTGluZWFyO1xuICAgICAgICBpZiAoayA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmbih2WzBdLCB2WzFdLCBmKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoayA+IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmbih2W21dLCB2W20gLSAxXSwgbSAtIGYpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmbih2W2ldLCB2W2kgKyAxID4gbSA/IG0gOiBpICsgMV0sIGYgLSBpKTtcbiAgICB9LFxuICAgIEJlemllcjogZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgdmFyIGIgPSAwO1xuICAgICAgICB2YXIgbiA9IHYubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIHB3ID0gTWF0aC5wb3c7XG4gICAgICAgIHZhciBibiA9IEludGVycG9sYXRpb24uVXRpbHMuQmVybnN0ZWluO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBuOyBpKyspIHtcbiAgICAgICAgICAgIGIgKz0gcHcoMSAtIGssIG4gLSBpKSAqIHB3KGssIGkpICogdltpXSAqIGJuKG4sIGkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiO1xuICAgIH0sXG4gICAgQ2F0bXVsbFJvbTogZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgdmFyIG0gPSB2Lmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBmID0gbSAqIGs7XG4gICAgICAgIHZhciBpID0gTWF0aC5mbG9vcihmKTtcbiAgICAgICAgdmFyIGZuID0gSW50ZXJwb2xhdGlvbi5VdGlscy5DYXRtdWxsUm9tO1xuICAgICAgICBpZiAodlswXSA9PT0gdlttXSkge1xuICAgICAgICAgICAgaWYgKGsgPCAwKSB7XG4gICAgICAgICAgICAgICAgaSA9IE1hdGguZmxvb3IoKGYgPSBtICogKDEgKyBrKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZuKHZbKGkgLSAxICsgbSkgJSBtXSwgdltpXSwgdlsoaSArIDEpICUgbV0sIHZbKGkgKyAyKSAlIG1dLCBmIC0gaSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoayA8IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdlswXSAtIChmbih2WzBdLCB2WzBdLCB2WzFdLCB2WzFdLCAtZikgLSB2WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrID4gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2W21dIC0gKGZuKHZbbV0sIHZbbV0sIHZbbSAtIDFdLCB2W20gLSAxXSwgZiAtIG0pIC0gdlttXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4odltpID8gaSAtIDEgOiAwXSwgdltpXSwgdlttIDwgaSArIDEgPyBtIDogaSArIDFdLCB2W20gPCBpICsgMiA/IG0gOiBpICsgMl0sIGYgLSBpKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgVXRpbHM6IHtcbiAgICAgICAgTGluZWFyOiBmdW5jdGlvbiAocDAsIHAxLCB0KSB7XG4gICAgICAgICAgICByZXR1cm4gKHAxIC0gcDApICogdCArIHAwO1xuICAgICAgICB9LFxuICAgICAgICBCZXJuc3RlaW46IGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICAgICAgICB2YXIgZmMgPSBJbnRlcnBvbGF0aW9uLlV0aWxzLkZhY3RvcmlhbDtcbiAgICAgICAgICAgIHJldHVybiBmYyhuKSAvIGZjKGkpIC8gZmMobiAtIGkpO1xuICAgICAgICB9LFxuICAgICAgICBGYWN0b3JpYWw6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYSA9IFsxXTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgICAgIHZhciBzID0gMTtcbiAgICAgICAgICAgICAgICBpZiAoYVtuXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVtuXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IG47IGkgPiAxOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgcyAqPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhW25dID0gcztcbiAgICAgICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pKCksXG4gICAgICAgIENhdG11bGxSb206IGZ1bmN0aW9uIChwMCwgcDEsIHAyLCBwMywgdCkge1xuICAgICAgICAgICAgdmFyIHYwID0gKHAyIC0gcDApICogMC41O1xuICAgICAgICAgICAgdmFyIHYxID0gKHAzIC0gcDEpICogMC41O1xuICAgICAgICAgICAgdmFyIHQyID0gdCAqIHQ7XG4gICAgICAgICAgICB2YXIgdDMgPSB0ICogdDI7XG4gICAgICAgICAgICByZXR1cm4gKDIgKiBwMSAtIDIgKiBwMiArIHYwICsgdjEpICogdDMgKyAoLTMgKiBwMSArIDMgKiBwMiAtIDIgKiB2MCAtIHYxKSAqIHQyICsgdjAgKiB0ICsgcDE7XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbi8qKlxuICogVXRpbHNcbiAqL1xudmFyIFNlcXVlbmNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcXVlbmNlKCkge1xuICAgIH1cbiAgICBTZXF1ZW5jZS5uZXh0SWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBTZXF1ZW5jZS5fbmV4dElkKys7XG4gICAgfTtcbiAgICBTZXF1ZW5jZS5fbmV4dElkID0gMDtcbiAgICByZXR1cm4gU2VxdWVuY2U7XG59KCkpO1xuXG52YXIgbWFpbkdyb3VwID0gbmV3IEdyb3VwKCk7XG5cbi8qKlxuICogVHdlZW4uanMgLSBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS90d2VlbmpzL3R3ZWVuLmpzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2VlbmpzL3R3ZWVuLmpzL2dyYXBocy9jb250cmlidXRvcnMgZm9yIHRoZSBmdWxsIGxpc3Qgb2YgY29udHJpYnV0b3JzLlxuICogVGhhbmsgeW91IGFsbCwgeW91J3JlIGF3ZXNvbWUhXG4gKi9cbnZhciBUd2VlbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUd2VlbihvYmplY3QsIGdyb3VwKSB7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhdXNlU3RhcnQgPSAwO1xuICAgICAgICB0aGlzLl92YWx1ZXNTdGFydCA9IHt9O1xuICAgICAgICB0aGlzLl92YWx1ZXNFbmQgPSB7fTtcbiAgICAgICAgdGhpcy5fdmFsdWVzU3RhcnRSZXBlYXQgPSB7fTtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSAxMDAwO1xuICAgICAgICB0aGlzLl9pc0R5bmFtaWMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faW5pdGlhbFJlcGVhdCA9IDA7XG4gICAgICAgIHRoaXMuX3JlcGVhdCA9IDA7XG4gICAgICAgIHRoaXMuX3lveW8gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3JldmVyc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RlbGF5VGltZSA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXJ0VGltZSA9IDA7XG4gICAgICAgIHRoaXMuX2Vhc2luZ0Z1bmN0aW9uID0gRWFzaW5nLkxpbmVhci5Ob25lO1xuICAgICAgICB0aGlzLl9pbnRlcnBvbGF0aW9uRnVuY3Rpb24gPSBJbnRlcnBvbGF0aW9uLkxpbmVhcjtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHRoaXMuX2NoYWluZWRUd2VlbnMgPSBbXTtcbiAgICAgICAgdGhpcy5fb25TdGFydENhbGxiYWNrRmlyZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fb25FdmVyeVN0YXJ0Q2FsbGJhY2tGaXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pZCA9IFNlcXVlbmNlLm5leHRJZCgpO1xuICAgICAgICB0aGlzLl9pc0NoYWluU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzQXJlU2V0VXAgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZ29Ub0VuZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9vYmplY3QgPSBvYmplY3Q7XG4gICAgICAgIGlmICh0eXBlb2YgZ3JvdXAgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aGlzLl9ncm91cCA9IGdyb3VwO1xuICAgICAgICAgICAgZ3JvdXAuYWRkKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFVzZSBcInRydWVcIiB0byByZXN0b3JlIG9sZCBiZWhhdmlvciAod2lsbCBiZSByZW1vdmVkIGluIGZ1dHVyZSByZWxlYXNlKS5cbiAgICAgICAgZWxzZSBpZiAoZ3JvdXAgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2dyb3VwID0gbWFpbkdyb3VwO1xuICAgICAgICAgICAgbWFpbkdyb3VwLmFkZCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBUd2Vlbi5wcm90b3R5cGUuZ2V0SWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZDtcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5pc1BsYXlpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1BsYXlpbmc7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1BhdXNlZDtcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5nZXREdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2R1cmF0aW9uO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLnRvID0gZnVuY3Rpb24gKHRhcmdldCwgZHVyYXRpb24pIHtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09PSB2b2lkIDApIHsgZHVyYXRpb24gPSAxMDAwOyB9XG4gICAgICAgIGlmICh0aGlzLl9pc1BsYXlpbmcpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgY2FsbCBUd2Vlbi50bygpIHdoaWxlIFR3ZWVuIGlzIGFscmVhZHkgc3RhcnRlZCBvciBwYXVzZWQuIFN0b3AgdGhlIFR3ZWVuIGZpcnN0LicpO1xuICAgICAgICB0aGlzLl92YWx1ZXNFbmQgPSB0YXJnZXQ7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXNBcmVTZXRVcCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IGR1cmF0aW9uIDwgMCA/IDAgOiBkdXJhdGlvbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICAgICAgaWYgKGR1cmF0aW9uID09PSB2b2lkIDApIHsgZHVyYXRpb24gPSAxMDAwOyB9XG4gICAgICAgIHRoaXMuX2R1cmF0aW9uID0gZHVyYXRpb24gPCAwID8gMCA6IGR1cmF0aW9uO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5keW5hbWljID0gZnVuY3Rpb24gKGR5bmFtaWMpIHtcbiAgICAgICAgaWYgKGR5bmFtaWMgPT09IHZvaWQgMCkgeyBkeW5hbWljID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5faXNEeW5hbWljID0gZHluYW1pYztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAodGltZSwgb3ZlcnJpZGVTdGFydGluZ1ZhbHVlcykge1xuICAgICAgICBpZiAodGltZSA9PT0gdm9pZCAwKSB7IHRpbWUgPSBub3coKTsgfVxuICAgICAgICBpZiAob3ZlcnJpZGVTdGFydGluZ1ZhbHVlcyA9PT0gdm9pZCAwKSB7IG92ZXJyaWRlU3RhcnRpbmdWYWx1ZXMgPSBmYWxzZTsgfVxuICAgICAgICBpZiAodGhpcy5faXNQbGF5aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXBlYXQgPSB0aGlzLl9pbml0aWFsUmVwZWF0O1xuICAgICAgICBpZiAodGhpcy5fcmV2ZXJzZWQpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIHdlcmUgcmV2ZXJzZWQgKGYuZS4gdXNpbmcgdGhlIHlveW8gZmVhdHVyZSkgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAgICAgICAvLyBmbGlwIHRoZSB0d2VlbiBkaXJlY3Rpb24gYmFjayB0byBmb3J3YXJkLlxuICAgICAgICAgICAgdGhpcy5fcmV2ZXJzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3dhcEVuZFN0YXJ0UmVwZWF0VmFsdWVzKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gPSB0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faXNQbGF5aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fb25TdGFydENhbGxiYWNrRmlyZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fb25FdmVyeVN0YXJ0Q2FsbGJhY2tGaXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0NoYWluU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zdGFydFRpbWUgPSB0aW1lO1xuICAgICAgICB0aGlzLl9zdGFydFRpbWUgKz0gdGhpcy5fZGVsYXlUaW1lO1xuICAgICAgICBpZiAoIXRoaXMuX3Byb3BlcnRpZXNBcmVTZXRVcCB8fCBvdmVycmlkZVN0YXJ0aW5nVmFsdWVzKSB7XG4gICAgICAgICAgICB0aGlzLl9wcm9wZXJ0aWVzQXJlU2V0VXAgPSB0cnVlO1xuICAgICAgICAgICAgLy8gSWYgZHluYW1pYyBpcyBub3QgZW5hYmxlZCwgY2xvbmUgdGhlIGVuZCB2YWx1ZXMgaW5zdGVhZCBvZiB1c2luZyB0aGUgcGFzc2VkLWluIGVuZCB2YWx1ZXMuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzRHluYW1pYykge1xuICAgICAgICAgICAgICAgIHZhciB0bXAgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMuX3ZhbHVlc0VuZClcbiAgICAgICAgICAgICAgICAgICAgdG1wW3Byb3BdID0gdGhpcy5fdmFsdWVzRW5kW3Byb3BdO1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlc0VuZCA9IHRtcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3NldHVwUHJvcGVydGllcyh0aGlzLl9vYmplY3QsIHRoaXMuX3ZhbHVlc1N0YXJ0LCB0aGlzLl92YWx1ZXNFbmQsIHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0LCBvdmVycmlkZVN0YXJ0aW5nVmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5zdGFydEZyb21DdXJyZW50VmFsdWVzID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnQodGltZSwgdHJ1ZSk7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuX3NldHVwUHJvcGVydGllcyA9IGZ1bmN0aW9uIChfb2JqZWN0LCBfdmFsdWVzU3RhcnQsIF92YWx1ZXNFbmQsIF92YWx1ZXNTdGFydFJlcGVhdCwgb3ZlcnJpZGVTdGFydGluZ1ZhbHVlcykge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBfdmFsdWVzRW5kKSB7XG4gICAgICAgICAgICB2YXIgc3RhcnRWYWx1ZSA9IF9vYmplY3RbcHJvcGVydHldO1xuICAgICAgICAgICAgdmFyIHN0YXJ0VmFsdWVJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzdGFydFZhbHVlKTtcbiAgICAgICAgICAgIHZhciBwcm9wVHlwZSA9IHN0YXJ0VmFsdWVJc0FycmF5ID8gJ2FycmF5JyA6IHR5cGVvZiBzdGFydFZhbHVlO1xuICAgICAgICAgICAgdmFyIGlzSW50ZXJwb2xhdGlvbkxpc3QgPSAhc3RhcnRWYWx1ZUlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheShfdmFsdWVzRW5kW3Byb3BlcnR5XSk7XG4gICAgICAgICAgICAvLyBJZiBgdG8oKWAgc3BlY2lmaWVzIGEgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGV4aXN0IGluIHRoZSBzb3VyY2Ugb2JqZWN0LFxuICAgICAgICAgICAgLy8gd2Ugc2hvdWxkIG5vdCBzZXQgdGhhdCBwcm9wZXJ0eSBpbiB0aGUgb2JqZWN0XG4gICAgICAgICAgICBpZiAocHJvcFR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHByb3BUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBpZiBhbiBBcnJheSB3YXMgcHJvdmlkZWQgYXMgcHJvcGVydHkgdmFsdWVcbiAgICAgICAgICAgIGlmIChpc0ludGVycG9sYXRpb25MaXN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZFZhbHVlcyA9IF92YWx1ZXNFbmRbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIGlmIChlbmRWYWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBIYW5kbGUgYW4gYXJyYXkgb2YgcmVsYXRpdmUgdmFsdWVzLlxuICAgICAgICAgICAgICAgIC8vIENyZWF0ZXMgYSBsb2NhbCBjb3B5IG9mIHRoZSBBcnJheSB3aXRoIHRoZSBzdGFydCB2YWx1ZSBhdCB0aGUgZnJvbnRcbiAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IFtzdGFydFZhbHVlXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGVuZFZhbHVlcy5sZW5ndGg7IGkgPCBsOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5faGFuZGxlUmVsYXRpdmVWYWx1ZShzdGFydFZhbHVlLCBlbmRWYWx1ZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc0ludGVycG9sYXRpb25MaXN0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZvdW5kIGludmFsaWQgaW50ZXJwb2xhdGlvbiBsaXN0LiBTa2lwcGluZy4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlbXAucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpc0ludGVycG9sYXRpb25MaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIChfdmFsdWVzU3RhcnRbcHJvcGVydHldID09PSB1bmRlZmluZWQpIHsgLy8gaGFuZGxlIGVuZCB2YWx1ZXMgb25seSB0aGUgZmlyc3QgdGltZS4gTk9UIE5FRURFRD8gc2V0dXBQcm9wZXJ0aWVzIGlzIG5vdyBndWFyZGVkIGJ5IF9wcm9wZXJ0aWVzQXJlU2V0VXAuXG4gICAgICAgICAgICAgICAgICAgIF92YWx1ZXNFbmRbcHJvcGVydHldID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGhhbmRsZSB0aGUgZGVlcG5lc3Mgb2YgdGhlIHZhbHVlc1xuICAgICAgICAgICAgaWYgKChwcm9wVHlwZSA9PT0gJ29iamVjdCcgfHwgc3RhcnRWYWx1ZUlzQXJyYXkpICYmIHN0YXJ0VmFsdWUgJiYgIWlzSW50ZXJwb2xhdGlvbkxpc3QpIHtcbiAgICAgICAgICAgICAgICBfdmFsdWVzU3RhcnRbcHJvcGVydHldID0gc3RhcnRWYWx1ZUlzQXJyYXkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIHZhciBuZXN0ZWRPYmplY3QgPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gbmVzdGVkT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF92YWx1ZXNTdGFydFtwcm9wZXJ0eV1bcHJvcF0gPSBuZXN0ZWRPYmplY3RbcHJvcF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRPRE8/IHJlcGVhdCBuZXN0ZWQgdmFsdWVzPyBBbmQgeW95bz8gQW5kIGFycmF5IHZhbHVlcz9cbiAgICAgICAgICAgICAgICBfdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldID0gc3RhcnRWYWx1ZUlzQXJyYXkgPyBbXSA6IHt9O1xuICAgICAgICAgICAgICAgIHZhciBlbmRWYWx1ZXMgPSBfdmFsdWVzRW5kW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICAvLyBJZiBkeW5hbWljIGlzIG5vdCBlbmFibGVkLCBjbG9uZSB0aGUgZW5kIHZhbHVlcyBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBwYXNzZWQtaW4gZW5kIHZhbHVlcy5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzRHluYW1pYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZW5kVmFsdWVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgdG1wW3Byb3BdID0gZW5kVmFsdWVzW3Byb3BdO1xuICAgICAgICAgICAgICAgICAgICBfdmFsdWVzRW5kW3Byb3BlcnR5XSA9IGVuZFZhbHVlcyA9IHRtcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBQcm9wZXJ0aWVzKG5lc3RlZE9iamVjdCwgX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSwgZW5kVmFsdWVzLCBfdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldLCBvdmVycmlkZVN0YXJ0aW5nVmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIHN0YXJ0aW5nIHZhbHVlLCBidXQgb25seSBvbmNlIHVubGVzcyBvdmVycmlkZSBpcyByZXF1ZXN0ZWQuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBfdmFsdWVzU3RhcnRbcHJvcGVydHldID09PSAndW5kZWZpbmVkJyB8fCBvdmVycmlkZVN0YXJ0aW5nVmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gPSBzdGFydFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0VmFsdWVJc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIEZJWE1FP1xuICAgICAgICAgICAgICAgICAgICBfdmFsdWVzU3RhcnRbcHJvcGVydHldICo9IDEuMDsgLy8gRW5zdXJlcyB3ZSdyZSB1c2luZyBudW1iZXJzLCBub3Qgc3RyaW5nc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXNJbnRlcnBvbGF0aW9uTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBGSVhNRT9cbiAgICAgICAgICAgICAgICAgICAgX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IF92YWx1ZXNFbmRbcHJvcGVydHldLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IF92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gfHwgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzQ2hhaW5TdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pc0NoYWluU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnN0b3BDaGFpbmVkVHdlZW5zKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5fb25TdG9wQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX29uU3RvcENhbGxiYWNrKHRoaXMuX29iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9nb1RvRW5kID0gdHJ1ZTtcbiAgICAgICAgdGhpcy51cGRhdGUodGhpcy5fc3RhcnRUaW1lICsgdGhpcy5fZHVyYXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIGlmICh0aW1lID09PSB2b2lkIDApIHsgdGltZSA9IG5vdygpOyB9XG4gICAgICAgIGlmICh0aGlzLl9pc1BhdXNlZCB8fCAhdGhpcy5faXNQbGF5aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3BhdXNlU3RhcnQgPSB0aW1lO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAodGltZSkge1xuICAgICAgICBpZiAodGltZSA9PT0gdm9pZCAwKSB7IHRpbWUgPSBub3coKTsgfVxuICAgICAgICBpZiAoIXRoaXMuX2lzUGF1c2VkIHx8ICF0aGlzLl9pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3N0YXJ0VGltZSArPSB0aW1lIC0gdGhpcy5fcGF1c2VTdGFydDtcbiAgICAgICAgdGhpcy5fcGF1c2VTdGFydCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLnN0b3BDaGFpbmVkVHdlZW5zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbnVtQ2hhaW5lZFR3ZWVucyA9IHRoaXMuX2NoYWluZWRUd2VlbnMubGVuZ3RoOyBpIDwgbnVtQ2hhaW5lZFR3ZWVuczsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFpbmVkVHdlZW5zW2ldLnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5ncm91cCA9IGZ1bmN0aW9uIChncm91cCkge1xuICAgICAgICBpZiAoIWdyb3VwKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ3R3ZWVuLmdyb3VwKCkgd2l0aG91dCBhcmdzIGhhcyBiZWVuIHJlbW92ZWQsIHVzZSBncm91cC5hZGQodHdlZW4pIGluc3RlYWQuJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBncm91cC5hZGQodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgdHdlZW4gZnJvbSB3aGljaGV2ZXIgZ3JvdXAgaXQgaXMgaW4uXG4gICAgICovXG4gICAgVHdlZW4ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLl9ncm91cCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbiAoYW1vdW50KSB7XG4gICAgICAgIGlmIChhbW91bnQgPT09IHZvaWQgMCkgeyBhbW91bnQgPSAwOyB9XG4gICAgICAgIHRoaXMuX2RlbGF5VGltZSA9IGFtb3VudDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUucmVwZWF0ID0gZnVuY3Rpb24gKHRpbWVzKSB7XG4gICAgICAgIGlmICh0aW1lcyA9PT0gdm9pZCAwKSB7IHRpbWVzID0gMDsgfVxuICAgICAgICB0aGlzLl9pbml0aWFsUmVwZWF0ID0gdGltZXM7XG4gICAgICAgIHRoaXMuX3JlcGVhdCA9IHRpbWVzO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5yZXBlYXREZWxheSA9IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgICAgdGhpcy5fcmVwZWF0RGVsYXlUaW1lID0gYW1vdW50O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS55b3lvID0gZnVuY3Rpb24gKHlveW8pIHtcbiAgICAgICAgaWYgKHlveW8gPT09IHZvaWQgMCkgeyB5b3lvID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5feW95byA9IHlveW87XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLmVhc2luZyA9IGZ1bmN0aW9uIChlYXNpbmdGdW5jdGlvbikge1xuICAgICAgICBpZiAoZWFzaW5nRnVuY3Rpb24gPT09IHZvaWQgMCkgeyBlYXNpbmdGdW5jdGlvbiA9IEVhc2luZy5MaW5lYXIuTm9uZTsgfVxuICAgICAgICB0aGlzLl9lYXNpbmdGdW5jdGlvbiA9IGVhc2luZ0Z1bmN0aW9uO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5pbnRlcnBvbGF0aW9uID0gZnVuY3Rpb24gKGludGVycG9sYXRpb25GdW5jdGlvbikge1xuICAgICAgICBpZiAoaW50ZXJwb2xhdGlvbkZ1bmN0aW9uID09PSB2b2lkIDApIHsgaW50ZXJwb2xhdGlvbkZ1bmN0aW9uID0gSW50ZXJwb2xhdGlvbi5MaW5lYXI7IH1cbiAgICAgICAgdGhpcy5faW50ZXJwb2xhdGlvbkZ1bmN0aW9uID0gaW50ZXJwb2xhdGlvbkZ1bmN0aW9uO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIFR3ZWVuLnByb3RvdHlwZS5jaGFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHR3ZWVucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdHdlZW5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2hhaW5lZFR3ZWVucyA9IHR3ZWVucztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUub25TdGFydCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vblN0YXJ0Q2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUub25FdmVyeVN0YXJ0ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uRXZlcnlTdGFydENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLm9uVXBkYXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uVXBkYXRlQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBUd2Vlbi5wcm90b3R5cGUub25SZXBlYXQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25SZXBlYXRDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5vbkNvbXBsZXRlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uQ29tcGxldGVDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5vblN0b3AgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25TdG9wQ2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHRoZSB0d2VlbiBpcyBzdGlsbCBwbGF5aW5nIGFmdGVyIHRoZSB1cGRhdGUsIGZhbHNlXG4gICAgICogb3RoZXJ3aXNlIChjYWxsaW5nIHVwZGF0ZSBvbiBhIHBhdXNlZCB0d2VlbiBzdGlsbCByZXR1cm5zIHRydWUgYmVjYXVzZVxuICAgICAqIGl0IGlzIHN0aWxsIHBsYXlpbmcsIGp1c3QgcGF1c2VkKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdXRvU3RhcnQgLSBXaGVuIHRydWUsIGNhbGxpbmcgdXBkYXRlIHdpbGwgaW1wbGljaXRseSBjYWxsIHN0YXJ0KClcbiAgICAgKiBhcyB3ZWxsLiBOb3RlLCBpZiB5b3Ugc3RvcCgpIG9yIGVuZCgpIHRoZSB0d2VlbiwgYnV0IGFyZSBzdGlsbCBjYWxsaW5nXG4gICAgICogdXBkYXRlKCksIGl0IHdpbGwgc3RhcnQgYWdhaW4hXG4gICAgICovXG4gICAgVHdlZW4ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh0aW1lLCBhdXRvU3RhcnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGltZSA9PT0gdm9pZCAwKSB7IHRpbWUgPSBub3coKTsgfVxuICAgICAgICBpZiAoYXV0b1N0YXJ0ID09PSB2b2lkIDApIHsgYXV0b1N0YXJ0ID0gVHdlZW4uYXV0b1N0YXJ0T25VcGRhdGU7IH1cbiAgICAgICAgaWYgKHRoaXMuX2lzUGF1c2VkKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciBwcm9wZXJ0eTtcbiAgICAgICAgaWYgKCF0aGlzLl9nb1RvRW5kICYmICF0aGlzLl9pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgIGlmIChhdXRvU3RhcnQpXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCh0aW1lLCB0cnVlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZ29Ub0VuZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGltZSA8IHRoaXMuX3N0YXJ0VGltZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX29uU3RhcnRDYWxsYmFja0ZpcmVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX29uU3RhcnRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRoaXMuX29uU3RhcnRDYWxsYmFjayh0aGlzLl9vYmplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb25TdGFydENhbGxiYWNrRmlyZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9vbkV2ZXJ5U3RhcnRDYWxsYmFja0ZpcmVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX29uRXZlcnlTdGFydENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25FdmVyeVN0YXJ0Q2FsbGJhY2sodGhpcy5fb2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX29uRXZlcnlTdGFydENhbGxiYWNrRmlyZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbGFwc2VkVGltZSA9IHRpbWUgLSB0aGlzLl9zdGFydFRpbWU7XG4gICAgICAgIHZhciBkdXJhdGlvbkFuZERlbGF5ID0gdGhpcy5fZHVyYXRpb24gKyAoKF9hID0gdGhpcy5fcmVwZWF0RGVsYXlUaW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLl9kZWxheVRpbWUpO1xuICAgICAgICB2YXIgdG90YWxUaW1lID0gdGhpcy5fZHVyYXRpb24gKyB0aGlzLl9yZXBlYXQgKiBkdXJhdGlvbkFuZERlbGF5O1xuICAgICAgICB2YXIgY2FsY3VsYXRlRWxhcHNlZFBvcnRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuX2R1cmF0aW9uID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgaWYgKGVsYXBzZWRUaW1lID4gdG90YWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdGltZXNSZXBlYXRlZCA9IE1hdGgudHJ1bmMoZWxhcHNlZFRpbWUgLyBkdXJhdGlvbkFuZERlbGF5KTtcbiAgICAgICAgICAgIHZhciB0aW1lSW50b0N1cnJlbnRSZXBlYXQgPSBlbGFwc2VkVGltZSAtIHRpbWVzUmVwZWF0ZWQgKiBkdXJhdGlvbkFuZERlbGF5O1xuICAgICAgICAgICAgLy8gVE9ETyB1c2UgJT9cbiAgICAgICAgICAgIC8vIGNvbnN0IHRpbWVJbnRvQ3VycmVudFJlcGVhdCA9IGVsYXBzZWRUaW1lICUgZHVyYXRpb25BbmREZWxheVxuICAgICAgICAgICAgdmFyIHBvcnRpb24gPSBNYXRoLm1pbih0aW1lSW50b0N1cnJlbnRSZXBlYXQgLyBfdGhpcy5fZHVyYXRpb24sIDEpO1xuICAgICAgICAgICAgaWYgKHBvcnRpb24gPT09IDAgJiYgZWxhcHNlZFRpbWUgPT09IF90aGlzLl9kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBvcnRpb247XG4gICAgICAgIH07XG4gICAgICAgIHZhciBlbGFwc2VkID0gY2FsY3VsYXRlRWxhcHNlZFBvcnRpb24oKTtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fZWFzaW5nRnVuY3Rpb24oZWxhcHNlZCk7XG4gICAgICAgIC8vIHByb3BlcnRpZXMgdHJhbnNmb3JtYXRpb25zXG4gICAgICAgIHRoaXMuX3VwZGF0ZVByb3BlcnRpZXModGhpcy5fb2JqZWN0LCB0aGlzLl92YWx1ZXNTdGFydCwgdGhpcy5fdmFsdWVzRW5kLCB2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLl9vblVwZGF0ZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9vblVwZGF0ZUNhbGxiYWNrKHRoaXMuX29iamVjdCwgZWxhcHNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2R1cmF0aW9uID09PSAwIHx8IGVsYXBzZWRUaW1lID49IHRoaXMuX2R1cmF0aW9uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVwZWF0ID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZUNvdW50ID0gTWF0aC5taW4oTWF0aC50cnVuYygoZWxhcHNlZFRpbWUgLSB0aGlzLl9kdXJhdGlvbikgLyBkdXJhdGlvbkFuZERlbGF5KSArIDEsIHRoaXMuX3JlcGVhdCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzRmluaXRlKHRoaXMuX3JlcGVhdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVwZWF0IC09IGNvbXBsZXRlQ291bnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJlYXNzaWduIHN0YXJ0aW5nIHZhbHVlcywgcmVzdGFydCBieSBtYWtpbmcgc3RhcnRUaW1lID0gbm93XG4gICAgICAgICAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiB0aGlzLl92YWx1ZXNTdGFydFJlcGVhdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3lveW8gJiYgdHlwZW9mIHRoaXMuX3ZhbHVlc0VuZFtwcm9wZXJ0eV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgRklYTUU/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzU3RhcnRSZXBlYXRbcHJvcGVydHldICsgcGFyc2VGbG9hdCh0aGlzLl92YWx1ZXNFbmRbcHJvcGVydHldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5feW95bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3dhcEVuZFN0YXJ0UmVwZWF0VmFsdWVzKHByb3BlcnR5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNTdGFydFtwcm9wZXJ0eV0gPSB0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl95b3lvKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JldmVyc2VkID0gIXRoaXMuX3JldmVyc2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFRpbWUgKz0gZHVyYXRpb25BbmREZWxheSAqIGNvbXBsZXRlQ291bnQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29uUmVwZWF0Q2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25SZXBlYXRDYWxsYmFjayh0aGlzLl9vYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9vbkV2ZXJ5U3RhcnRDYWxsYmFja0ZpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb25Db21wbGV0ZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQ29tcGxldGVDYWxsYmFjayh0aGlzLl9vYmplY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbnVtQ2hhaW5lZFR3ZWVucyA9IHRoaXMuX2NoYWluZWRUd2VlbnMubGVuZ3RoOyBpIDwgbnVtQ2hhaW5lZFR3ZWVuczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1ha2UgdGhlIGNoYWluZWQgdHdlZW5zIHN0YXJ0IGV4YWN0bHkgYXQgdGhlIHRpbWUgdGhleSBzaG91bGQsXG4gICAgICAgICAgICAgICAgICAgIC8vIGV2ZW4gaWYgdGhlIGB1cGRhdGUoKWAgbWV0aG9kIHdhcyBjYWxsZWQgd2F5IHBhc3QgdGhlIGR1cmF0aW9uIG9mIHRoZSB0d2VlblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFpbmVkVHdlZW5zW2ldLnN0YXJ0KHRoaXMuX3N0YXJ0VGltZSArIHRoaXMuX2R1cmF0aW9uLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5fdXBkYXRlUHJvcGVydGllcyA9IGZ1bmN0aW9uIChfb2JqZWN0LCBfdmFsdWVzU3RhcnQsIF92YWx1ZXNFbmQsIHZhbHVlKSB7XG4gICAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIF92YWx1ZXNFbmQpIHtcbiAgICAgICAgICAgIC8vIERvbid0IHVwZGF0ZSBwcm9wZXJ0aWVzIHRoYXQgZG8gbm90IGV4aXN0IGluIHRoZSBzb3VyY2Ugb2JqZWN0XG4gICAgICAgICAgICBpZiAoX3ZhbHVlc1N0YXJ0W3Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSBfdmFsdWVzU3RhcnRbcHJvcGVydHldIHx8IDA7XG4gICAgICAgICAgICB2YXIgZW5kID0gX3ZhbHVlc0VuZFtwcm9wZXJ0eV07XG4gICAgICAgICAgICB2YXIgc3RhcnRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShfb2JqZWN0W3Byb3BlcnR5XSk7XG4gICAgICAgICAgICB2YXIgZW5kSXNBcnJheSA9IEFycmF5LmlzQXJyYXkoZW5kKTtcbiAgICAgICAgICAgIHZhciBpc0ludGVycG9sYXRpb25MaXN0ID0gIXN0YXJ0SXNBcnJheSAmJiBlbmRJc0FycmF5O1xuICAgICAgICAgICAgaWYgKGlzSW50ZXJwb2xhdGlvbkxpc3QpIHtcbiAgICAgICAgICAgICAgICBfb2JqZWN0W3Byb3BlcnR5XSA9IHRoaXMuX2ludGVycG9sYXRpb25GdW5jdGlvbihlbmQsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdvYmplY3QnICYmIGVuZCkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgRklYTUU/XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlUHJvcGVydGllcyhfb2JqZWN0W3Byb3BlcnR5XSwgc3RhcnQsIGVuZCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUGFyc2VzIHJlbGF0aXZlIGVuZCB2YWx1ZXMgd2l0aCBzdGFydCBhcyBiYXNlIChlLmcuOiArMTAsIC0zKVxuICAgICAgICAgICAgICAgIGVuZCA9IHRoaXMuX2hhbmRsZVJlbGF0aXZlVmFsdWUoc3RhcnQsIGVuZCk7XG4gICAgICAgICAgICAgICAgLy8gUHJvdGVjdCBhZ2FpbnN0IG5vbiBudW1lcmljIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlbmQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIEZJWE1FP1xuICAgICAgICAgICAgICAgICAgICBfb2JqZWN0W3Byb3BlcnR5XSA9IHN0YXJ0ICsgKGVuZCAtIHN0YXJ0KSAqIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgVHdlZW4ucHJvdG90eXBlLl9oYW5kbGVSZWxhdGl2ZVZhbHVlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbmQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQuY2hhckF0KDApID09PSAnKycgfHwgZW5kLmNoYXJBdCgwKSA9PT0gJy0nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhcnQgKyBwYXJzZUZsb2F0KGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZW5kKTtcbiAgICB9O1xuICAgIFR3ZWVuLnByb3RvdHlwZS5fc3dhcEVuZFN0YXJ0UmVwZWF0VmFsdWVzID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgIHZhciB0bXAgPSB0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV07XG4gICAgICAgIHZhciBlbmRWYWx1ZSA9IHRoaXMuX3ZhbHVlc0VuZFtwcm9wZXJ0eV07XG4gICAgICAgIGlmICh0eXBlb2YgZW5kVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV0gPSB0aGlzLl92YWx1ZXNTdGFydFJlcGVhdFtwcm9wZXJ0eV0gKyBwYXJzZUZsb2F0KGVuZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1N0YXJ0UmVwZWF0W3Byb3BlcnR5XSA9IHRoaXMuX3ZhbHVlc0VuZFtwcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsdWVzRW5kW3Byb3BlcnR5XSA9IHRtcDtcbiAgICB9O1xuICAgIFR3ZWVuLmF1dG9TdGFydE9uVXBkYXRlID0gZmFsc2U7XG4gICAgcmV0dXJuIFR3ZWVuO1xufSgpKTtcblxudmFyIFZFUlNJT04gPSAnMjUuMC4wJztcblxuLyoqXG4gKiBUd2Vlbi5qcyAtIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3R3ZWVuanMvdHdlZW4uanNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3ZWVuanMvdHdlZW4uanMvZ3JhcGhzL2NvbnRyaWJ1dG9ycyBmb3IgdGhlIGZ1bGwgbGlzdCBvZiBjb250cmlidXRvcnMuXG4gKiBUaGFuayB5b3UgYWxsLCB5b3UncmUgYXdlc29tZSFcbiAqL1xudmFyIG5leHRJZCA9IFNlcXVlbmNlLm5leHRJZDtcbi8qKlxuICogQ29udHJvbGxpbmcgZ3JvdXBzIG9mIHR3ZWVuc1xuICpcbiAqIFVzaW5nIHRoZSBUV0VFTiBzaW5nbGV0b24gdG8gbWFuYWdlIHlvdXIgdHdlZW5zIGNhbiBjYXVzZSBpc3N1ZXMgaW4gbGFyZ2UgYXBwcyB3aXRoIG1hbnkgY29tcG9uZW50cy5cbiAqIEluIHRoZXNlIGNhc2VzLCB5b3UgbWF5IHdhbnQgdG8gY3JlYXRlIHlvdXIgb3duIHNtYWxsZXIgZ3JvdXBzIG9mIHR3ZWVucy5cbiAqL1xudmFyIFRXRUVOID0gbWFpbkdyb3VwO1xuLy8gVGhpcyBpcyB0aGUgYmVzdCB3YXkgdG8gZXhwb3J0IHRoaW5ncyBpbiBhIHdheSB0aGF0J3MgY29tcGF0aWJsZSB3aXRoIGJvdGggRVNcbi8vIE1vZHVsZXMgYW5kIENvbW1vbkpTLCB3aXRob3V0IGJ1aWxkIGhhY2tzLCBhbmQgc28gYXMgbm90IHRvIGJyZWFrIHRoZVxuLy8gZXhpc3RpbmcgQVBJLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzE5NjEjaXNzdWVjb21tZW50LTQyMzAzNzg4MVxuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGUgZ2xvYmFsIFRXRUVOIEdyb3VwIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZvbGxvd2luZyBtYWpvclxuICogcmVsZWFzZS4gVG8gbWlncmF0ZSwgY3JlYXRlIGEgYG5ldyBHcm91cCgpYCBpbnN0ZWFkIG9mIHVzaW5nIGBUV0VFTmAgYXMgYVxuICogZ3JvdXAuXG4gKlxuICogT2xkIGNvZGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICpcbiAqIC8vLi4uXG4gKlxuICogY29uc3QgdHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4ob2JqKVxuICogY29uc3QgdHdlZW4yID0gbmV3IFRXRUVOLlR3ZWVuKG9iajIpXG4gKlxuICogLy8uLi5cbiAqXG4gKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gKiAgIFRXRUVOLnVwZGF0ZSh0aW1lKVxuICogICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBOZXcgY29kZTpcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IHtUd2VlbiwgR3JvdXB9IGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICpcbiAqIC8vLi4uXG4gKlxuICogY29uc3QgdHdlZW4gPSBuZXcgVHdlZW4ob2JqKVxuICogY29uc3QgdHdlZW4yID0gbmV3IFRXRUVOLlR3ZWVuKG9iajIpXG4gKlxuICogLy8uLi5cbiAqXG4gKiBjb25zdCBncm91cCA9IG5ldyBHcm91cCgpXG4gKiBncm91cC5hZGQodHdlZW4pXG4gKiBncm91cC5hZGQodHdlZW4yKVxuICpcbiAqIC8vLi4uXG4gKlxuICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGxvb3AodGltZSkge1xuICogICBncm91cC51cGRhdGUodGltZSlcbiAqICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApXG4gKiB9KVxuICogYGBgXG4gKi9cbnZhciBnZXRBbGwgPSBUV0VFTi5nZXRBbGwuYmluZChUV0VFTik7XG4vKipcbiAqIEBkZXByZWNhdGVkIFRoZSBnbG9iYWwgVFdFRU4gR3JvdXAgd2lsbCBiZSByZW1vdmVkIGluIGEgZm9sbG93aW5nIG1ham9yXG4gKiByZWxlYXNlLiBUbyBtaWdyYXRlLCBjcmVhdGUgYSBgbmV3IEdyb3VwKClgIGluc3RlYWQgb2YgdXNpbmcgYFRXRUVOYCBhcyBhXG4gKiBncm91cC5cbiAqXG4gKiBPbGQgY29kZTpcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0ICogYXMgVFdFRU4gZnJvbSAnQHR3ZWVuanMvdHdlZW4uanMnXG4gKlxuICogLy8uLi5cbiAqXG4gKiBjb25zdCB0d2VlbiA9IG5ldyBUV0VFTi5Ud2VlbihvYmopXG4gKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAqXG4gKiAvLy4uLlxuICpcbiAqIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiBsb29wKHRpbWUpIHtcbiAqICAgVFdFRU4udXBkYXRlKHRpbWUpXG4gKiAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuICogfSlcbiAqIGBgYFxuICpcbiAqIE5ldyBjb2RlOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQge1R3ZWVuLCBHcm91cH0gZnJvbSAnQHR3ZWVuanMvdHdlZW4uanMnXG4gKlxuICogLy8uLi5cbiAqXG4gKiBjb25zdCB0d2VlbiA9IG5ldyBUd2VlbihvYmopXG4gKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAqXG4gKiAvLy4uLlxuICpcbiAqIGNvbnN0IGdyb3VwID0gbmV3IEdyb3VwKClcbiAqIGdyb3VwLmFkZCh0d2VlbilcbiAqIGdyb3VwLmFkZCh0d2VlbjIpXG4gKlxuICogLy8uLi5cbiAqXG4gKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gKiAgIGdyb3VwLnVwZGF0ZSh0aW1lKVxuICogICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAqIH0pXG4gKiBgYGBcbiAqL1xudmFyIHJlbW92ZUFsbCA9IFRXRUVOLnJlbW92ZUFsbC5iaW5kKFRXRUVOKTtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVGhlIGdsb2JhbCBUV0VFTiBHcm91cCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmb2xsb3dpbmcgbWFqb3JcbiAqIHJlbGVhc2UuIFRvIG1pZ3JhdGUsIGNyZWF0ZSBhIGBuZXcgR3JvdXAoKWAgaW5zdGVhZCBvZiB1c2luZyBgVFdFRU5gIGFzIGFcbiAqIGdyb3VwLlxuICpcbiAqIE9sZCBjb2RlOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBUV0VFTiBmcm9tICdAdHdlZW5qcy90d2Vlbi5qcydcbiAqXG4gKiAvLy4uLlxuICpcbiAqIGNvbnN0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG9iailcbiAqIGNvbnN0IHR3ZWVuMiA9IG5ldyBUV0VFTi5Ud2VlbihvYmoyKVxuICpcbiAqIC8vLi4uXG4gKlxuICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGxvb3AodGltZSkge1xuICogICBUV0VFTi51cGRhdGUodGltZSlcbiAqICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApXG4gKiB9KVxuICogYGBgXG4gKlxuICogTmV3IGNvZGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCB7VHdlZW4sIEdyb3VwfSBmcm9tICdAdHdlZW5qcy90d2Vlbi5qcydcbiAqXG4gKiAvLy4uLlxuICpcbiAqIGNvbnN0IHR3ZWVuID0gbmV3IFR3ZWVuKG9iailcbiAqIGNvbnN0IHR3ZWVuMiA9IG5ldyBUV0VFTi5Ud2VlbihvYmoyKVxuICpcbiAqIC8vLi4uXG4gKlxuICogY29uc3QgZ3JvdXAgPSBuZXcgR3JvdXAoKVxuICogZ3JvdXAuYWRkKHR3ZWVuKVxuICogZ3JvdXAuYWRkKHR3ZWVuMilcbiAqXG4gKiAvLy4uLlxuICpcbiAqIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiBsb29wKHRpbWUpIHtcbiAqICAgZ3JvdXAudXBkYXRlKHRpbWUpXG4gKiAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuICogfSlcbiAqIGBgYFxuICovXG52YXIgYWRkID0gVFdFRU4uYWRkLmJpbmQoVFdFRU4pO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBUaGUgZ2xvYmFsIFRXRUVOIEdyb3VwIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZvbGxvd2luZyBtYWpvclxuICogcmVsZWFzZS4gVG8gbWlncmF0ZSwgY3JlYXRlIGEgYG5ldyBHcm91cCgpYCBpbnN0ZWFkIG9mIHVzaW5nIGBUV0VFTmAgYXMgYVxuICogZ3JvdXAuXG4gKlxuICogT2xkIGNvZGU6XG4gKlxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICpcbiAqIC8vLi4uXG4gKlxuICogY29uc3QgdHdlZW4gPSBuZXcgVFdFRU4uVHdlZW4ob2JqKVxuICogY29uc3QgdHdlZW4yID0gbmV3IFRXRUVOLlR3ZWVuKG9iajIpXG4gKlxuICogLy8uLi5cbiAqXG4gKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gKiAgIFRXRUVOLnVwZGF0ZSh0aW1lKVxuICogICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAqIH0pXG4gKiBgYGBcbiAqXG4gKiBOZXcgY29kZTpcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IHtUd2VlbiwgR3JvdXB9IGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICpcbiAqIC8vLi4uXG4gKlxuICogY29uc3QgdHdlZW4gPSBuZXcgVHdlZW4ob2JqKVxuICogY29uc3QgdHdlZW4yID0gbmV3IFRXRUVOLlR3ZWVuKG9iajIpXG4gKlxuICogLy8uLi5cbiAqXG4gKiBjb25zdCBncm91cCA9IG5ldyBHcm91cCgpXG4gKiBncm91cC5hZGQodHdlZW4pXG4gKiBncm91cC5hZGQodHdlZW4yKVxuICpcbiAqIC8vLi4uXG4gKlxuICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGxvb3AodGltZSkge1xuICogICBncm91cC51cGRhdGUodGltZSlcbiAqICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGxvb3ApXG4gKiB9KVxuICogYGBgXG4gKi9cbnZhciByZW1vdmUgPSBUV0VFTi5yZW1vdmUuYmluZChUV0VFTik7XG4vKipcbiAqIEBkZXByZWNhdGVkIFRoZSBnbG9iYWwgVFdFRU4gR3JvdXAgd2lsbCBiZSByZW1vdmVkIGluIGEgZm9sbG93aW5nIG1ham9yXG4gKiByZWxlYXNlLiBUbyBtaWdyYXRlLCBjcmVhdGUgYSBgbmV3IEdyb3VwKClgIGluc3RlYWQgb2YgdXNpbmcgYFRXRUVOYCBhcyBhXG4gKiBncm91cC5cbiAqXG4gKiBPbGQgY29kZTpcbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0ICogYXMgVFdFRU4gZnJvbSAnQHR3ZWVuanMvdHdlZW4uanMnXG4gKlxuICogLy8uLi5cbiAqXG4gKiBjb25zdCB0d2VlbiA9IG5ldyBUV0VFTi5Ud2VlbihvYmopXG4gKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAqXG4gKiAvLy4uLlxuICpcbiAqIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiBsb29wKHRpbWUpIHtcbiAqICAgVFdFRU4udXBkYXRlKHRpbWUpXG4gKiAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuICogfSlcbiAqIGBgYFxuICpcbiAqIE5ldyBjb2RlOlxuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQge1R3ZWVuLCBHcm91cH0gZnJvbSAnQHR3ZWVuanMvdHdlZW4uanMnXG4gKlxuICogLy8uLi5cbiAqXG4gKiBjb25zdCB0d2VlbiA9IG5ldyBUd2VlbihvYmopXG4gKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAqXG4gKiAvLy4uLlxuICpcbiAqIGNvbnN0IGdyb3VwID0gbmV3IEdyb3VwKClcbiAqIGdyb3VwLmFkZCh0d2VlbilcbiAqIGdyb3VwLmFkZCh0d2VlbjIpXG4gKlxuICogLy8uLi5cbiAqXG4gKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gKiAgIGdyb3VwLnVwZGF0ZSh0aW1lKVxuICogICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAqIH0pXG4gKiBgYGBcbiAqL1xudmFyIHVwZGF0ZSA9IFRXRUVOLnVwZGF0ZS5iaW5kKFRXRUVOKTtcbnZhciBleHBvcnRzJDEgPSB7XG4gICAgRWFzaW5nOiBFYXNpbmcsXG4gICAgR3JvdXA6IEdyb3VwLFxuICAgIEludGVycG9sYXRpb246IEludGVycG9sYXRpb24sXG4gICAgbm93OiBub3csXG4gICAgU2VxdWVuY2U6IFNlcXVlbmNlLFxuICAgIG5leHRJZDogbmV4dElkLFxuICAgIFR3ZWVuOiBUd2VlbixcbiAgICBWRVJTSU9OOiBWRVJTSU9OLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFRoZSBnbG9iYWwgVFdFRU4gR3JvdXAgd2lsbCBiZSByZW1vdmVkIGluIGEgZm9sbG93aW5nIG1ham9yXG4gICAgICogcmVsZWFzZS4gVG8gbWlncmF0ZSwgY3JlYXRlIGEgYG5ldyBHcm91cCgpYCBpbnN0ZWFkIG9mIHVzaW5nIGBUV0VFTmAgYXMgYVxuICAgICAqIGdyb3VwLlxuICAgICAqXG4gICAgICogT2xkIGNvZGU6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gICAgICogICBUV0VFTi51cGRhdGUodGltZSlcbiAgICAgKiAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBOZXcgY29kZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHtUd2VlbiwgR3JvdXB9IGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiBjb25zdCBncm91cCA9IG5ldyBHcm91cCgpXG4gICAgICogZ3JvdXAuYWRkKHR3ZWVuKVxuICAgICAqIGdyb3VwLmFkZCh0d2VlbjIpXG4gICAgICpcbiAgICAgKiAvLy4uLlxuICAgICAqXG4gICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGxvb3AodGltZSkge1xuICAgICAqICAgZ3JvdXAudXBkYXRlKHRpbWUpXG4gICAgICogICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldEFsbDogZ2V0QWxsLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFRoZSBnbG9iYWwgVFdFRU4gR3JvdXAgd2lsbCBiZSByZW1vdmVkIGluIGEgZm9sbG93aW5nIG1ham9yXG4gICAgICogcmVsZWFzZS4gVG8gbWlncmF0ZSwgY3JlYXRlIGEgYG5ldyBHcm91cCgpYCBpbnN0ZWFkIG9mIHVzaW5nIGBUV0VFTmAgYXMgYVxuICAgICAqIGdyb3VwLlxuICAgICAqXG4gICAgICogT2xkIGNvZGU6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gICAgICogICBUV0VFTi51cGRhdGUodGltZSlcbiAgICAgKiAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBOZXcgY29kZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHtUd2VlbiwgR3JvdXB9IGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiBjb25zdCBncm91cCA9IG5ldyBHcm91cCgpXG4gICAgICogZ3JvdXAuYWRkKHR3ZWVuKVxuICAgICAqIGdyb3VwLmFkZCh0d2VlbjIpXG4gICAgICpcbiAgICAgKiAvLy4uLlxuICAgICAqXG4gICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGxvb3AodGltZSkge1xuICAgICAqICAgZ3JvdXAudXBkYXRlKHRpbWUpXG4gICAgICogICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlbW92ZUFsbDogcmVtb3ZlQWxsLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFRoZSBnbG9iYWwgVFdFRU4gR3JvdXAgd2lsbCBiZSByZW1vdmVkIGluIGEgZm9sbG93aW5nIG1ham9yXG4gICAgICogcmVsZWFzZS4gVG8gbWlncmF0ZSwgY3JlYXRlIGEgYG5ldyBHcm91cCgpYCBpbnN0ZWFkIG9mIHVzaW5nIGBUV0VFTmAgYXMgYVxuICAgICAqIGdyb3VwLlxuICAgICAqXG4gICAgICogT2xkIGNvZGU6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gICAgICogICBUV0VFTi51cGRhdGUodGltZSlcbiAgICAgKiAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBOZXcgY29kZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHtUd2VlbiwgR3JvdXB9IGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiBjb25zdCBncm91cCA9IG5ldyBHcm91cCgpXG4gICAgICogZ3JvdXAuYWRkKHR3ZWVuKVxuICAgICAqIGdyb3VwLmFkZCh0d2VlbjIpXG4gICAgICpcbiAgICAgKiAvLy4uLlxuICAgICAqXG4gICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGxvb3AodGltZSkge1xuICAgICAqICAgZ3JvdXAudXBkYXRlKHRpbWUpXG4gICAgICogICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGFkZDogYWRkLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFRoZSBnbG9iYWwgVFdFRU4gR3JvdXAgd2lsbCBiZSByZW1vdmVkIGluIGEgZm9sbG93aW5nIG1ham9yXG4gICAgICogcmVsZWFzZS4gVG8gbWlncmF0ZSwgY3JlYXRlIGEgYG5ldyBHcm91cCgpYCBpbnN0ZWFkIG9mIHVzaW5nIGBUV0VFTmAgYXMgYVxuICAgICAqIGdyb3VwLlxuICAgICAqXG4gICAgICogT2xkIGNvZGU6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gICAgICogICBUV0VFTi51cGRhdGUodGltZSlcbiAgICAgKiAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBOZXcgY29kZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHtUd2VlbiwgR3JvdXB9IGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiBjb25zdCBncm91cCA9IG5ldyBHcm91cCgpXG4gICAgICogZ3JvdXAuYWRkKHR3ZWVuKVxuICAgICAqIGdyb3VwLmFkZCh0d2VlbjIpXG4gICAgICpcbiAgICAgKiAvLy4uLlxuICAgICAqXG4gICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGxvb3AodGltZSkge1xuICAgICAqICAgZ3JvdXAudXBkYXRlKHRpbWUpXG4gICAgICogICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlbW92ZTogcmVtb3ZlLFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFRoZSBnbG9iYWwgVFdFRU4gR3JvdXAgd2lsbCBiZSByZW1vdmVkIGluIGEgZm9sbG93aW5nIG1ham9yXG4gICAgICogcmVsZWFzZS4gVG8gbWlncmF0ZSwgY3JlYXRlIGEgYG5ldyBHcm91cCgpYCBpbnN0ZWFkIG9mIHVzaW5nIGBUV0VFTmAgYXMgYVxuICAgICAqIGdyb3VwLlxuICAgICAqXG4gICAgICogT2xkIGNvZGU6XG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGltcG9ydCAqIGFzIFRXRUVOIGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gbG9vcCh0aW1lKSB7XG4gICAgICogICBUV0VFTi51cGRhdGUodGltZSlcbiAgICAgKiAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKVxuICAgICAqIH0pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBOZXcgY29kZTpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogaW1wb3J0IHtUd2VlbiwgR3JvdXB9IGZyb20gJ0B0d2VlbmpzL3R3ZWVuLmpzJ1xuICAgICAqXG4gICAgICogLy8uLi5cbiAgICAgKlxuICAgICAqIGNvbnN0IHR3ZWVuID0gbmV3IFR3ZWVuKG9iailcbiAgICAgKiBjb25zdCB0d2VlbjIgPSBuZXcgVFdFRU4uVHdlZW4ob2JqMilcbiAgICAgKlxuICAgICAqIC8vLi4uXG4gICAgICpcbiAgICAgKiBjb25zdCBncm91cCA9IG5ldyBHcm91cCgpXG4gICAgICogZ3JvdXAuYWRkKHR3ZWVuKVxuICAgICAqIGdyb3VwLmFkZCh0d2VlbjIpXG4gICAgICpcbiAgICAgKiAvLy4uLlxuICAgICAqXG4gICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIGxvb3AodGltZSkge1xuICAgICAqICAgZ3JvdXAudXBkYXRlKHRpbWUpXG4gICAgICogICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcClcbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHVwZGF0ZTogdXBkYXRlLFxufTtcblxuZXhwb3J0cy5FYXNpbmcgPSBFYXNpbmc7XG5leHBvcnRzLkdyb3VwID0gR3JvdXA7XG5leHBvcnRzLkludGVycG9sYXRpb24gPSBJbnRlcnBvbGF0aW9uO1xuZXhwb3J0cy5TZXF1ZW5jZSA9IFNlcXVlbmNlO1xuZXhwb3J0cy5Ud2VlbiA9IFR3ZWVuO1xuZXhwb3J0cy5WRVJTSU9OID0gVkVSU0lPTjtcbmV4cG9ydHMuYWRkID0gYWRkO1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cyQxO1xuZXhwb3J0cy5nZXRBbGwgPSBnZXRBbGw7XG5leHBvcnRzLm5leHRJZCA9IG5leHRJZDtcbmV4cG9ydHMubm93ID0gbm93O1xuZXhwb3J0cy5yZW1vdmUgPSByZW1vdmU7XG5leHBvcnRzLnJlbW92ZUFsbCA9IHJlbW92ZUFsbDtcbmV4cG9ydHMudXBkYXRlID0gdXBkYXRlO1xuIiwiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNSBjYW5ub24uanMgQXV0aG9yc1xuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uXG4gKiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvblxuICogZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0XG4gKiByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSxcbiAqIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllc1xuICogb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gKiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcbiAqIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4gKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXG4gKiBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4gKiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbiAqIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbiFmdW5jdGlvbihlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmZhbHNlKWRlZmluZShbXSxlKTtlbHNle3ZhciBmO1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/Zj13aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9mPWdsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmKGY9c2VsZiksZi5DQU5OT049ZSgpfX0oZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cz17XG4gIFwibmFtZVwiOiBcImNhbm5vblwiLFxuICBcInZlcnNpb25cIjogXCIwLjYuMlwiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiQSBsaWdodHdlaWdodCAzRCBwaHlzaWNzIGVuZ2luZSB3cml0dGVuIGluIEphdmFTY3JpcHQuXCIsXG4gIFwiaG9tZXBhZ2VcIjogXCJodHRwczovL2dpdGh1Yi5jb20vc2NodGVwcGUvY2Fubm9uLmpzXCIsXG4gIFwiYXV0aG9yXCI6IFwiU3RlZmFuIEhlZG1hbiA8c2NodGVwcGVAZ21haWwuY29tPiAoaHR0cDovL3N0ZWZmZS5zZSlcIixcbiAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgXCJjYW5ub24uanNcIixcbiAgICBcImNhbm5vblwiLFxuICAgIFwicGh5c2ljc1wiLFxuICAgIFwiZW5naW5lXCIsXG4gICAgXCIzZFwiXG4gIF0sXG4gIFwibWFpblwiOiBcIi4vYnVpbGQvY2Fubm9uLmpzXCIsXG4gIFwiZW5naW5lc1wiOiB7XG4gICAgXCJub2RlXCI6IFwiKlwiXG4gIH0sXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vc2NodGVwcGUvY2Fubm9uLmpzLmdpdFwiXG4gIH0sXG4gIFwiYnVnc1wiOiB7XG4gICAgXCJ1cmxcIjogXCJodHRwczovL2dpdGh1Yi5jb20vc2NodGVwcGUvY2Fubm9uLmpzL2lzc3Vlc1wiXG4gIH0sXG4gIFwibGljZW5zZXNcIjogW1xuICAgIHtcbiAgICAgIFwidHlwZVwiOiBcIk1JVFwiXG4gICAgfVxuICBdLFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJqc2hpbnRcIjogXCJsYXRlc3RcIixcbiAgICBcInVnbGlmeS1qc1wiOiBcImxhdGVzdFwiLFxuICAgIFwibm9kZXVuaXRcIjogXCJeMC45LjBcIixcbiAgICBcImdydW50XCI6IFwifjAuNC4wXCIsXG4gICAgXCJncnVudC1jb250cmliLWpzaGludFwiOiBcIn4wLjEuMVwiLFxuICAgIFwiZ3J1bnQtY29udHJpYi1ub2RldW5pdFwiOiBcIl4wLjQuMVwiLFxuICAgIFwiZ3J1bnQtY29udHJpYi1jb25jYXRcIjogXCJ+MC4xLjNcIixcbiAgICBcImdydW50LWNvbnRyaWItdWdsaWZ5XCI6IFwiXjAuNS4xXCIsXG4gICAgXCJncnVudC1icm93c2VyaWZ5XCI6IFwiXjIuMS40XCIsXG4gICAgXCJncnVudC1jb250cmliLXl1aWRvY1wiOiBcIl4wLjUuMlwiLFxuICAgIFwiYnJvd3NlcmlmeVwiOiBcIipcIlxuICB9LFxuICBcImRlcGVuZGVuY2llc1wiOiB7fVxufVxuXG59LHt9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbi8vIEV4cG9ydCBjbGFzc2VzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB2ZXJzaW9uIDogICAgICAgICAgICAgICAgICAgICAgIF9kZXJlcV8oJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb24sXG5cbiAgICBBQUJCIDogICAgICAgICAgICAgICAgICAgICAgICAgIF9kZXJlcV8oJy4vY29sbGlzaW9uL0FBQkInKSxcbiAgICBBcnJheUNvbGxpc2lvbk1hdHJpeCA6ICAgICAgICAgIF9kZXJlcV8oJy4vY29sbGlzaW9uL0FycmF5Q29sbGlzaW9uTWF0cml4JyksXG4gICAgQm9keSA6ICAgICAgICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL29iamVjdHMvQm9keScpLFxuICAgIEJveCA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi9zaGFwZXMvQm94JyksXG4gICAgQnJvYWRwaGFzZSA6ICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL2NvbGxpc2lvbi9Ccm9hZHBoYXNlJyksXG4gICAgQ29uc3RyYWludCA6ICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL2NvbnN0cmFpbnRzL0NvbnN0cmFpbnQnKSxcbiAgICBDb250YWN0RXF1YXRpb24gOiAgICAgICAgICAgICAgIF9kZXJlcV8oJy4vZXF1YXRpb25zL0NvbnRhY3RFcXVhdGlvbicpLFxuICAgIE5hcnJvd3BoYXNlIDogICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi93b3JsZC9OYXJyb3dwaGFzZScpLFxuICAgIENvbmVUd2lzdENvbnN0cmFpbnQgOiAgICAgICAgICAgX2RlcmVxXygnLi9jb25zdHJhaW50cy9Db25lVHdpc3RDb25zdHJhaW50JyksXG4gICAgQ29udGFjdE1hdGVyaWFsIDogICAgICAgICAgICAgICBfZGVyZXFfKCcuL21hdGVyaWFsL0NvbnRhY3RNYXRlcmlhbCcpLFxuICAgIENvbnZleFBvbHloZWRyb24gOiAgICAgICAgICAgICAgX2RlcmVxXygnLi9zaGFwZXMvQ29udmV4UG9seWhlZHJvbicpLFxuICAgIEN5bGluZGVyIDogICAgICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi9zaGFwZXMvQ3lsaW5kZXInKSxcbiAgICBEaXN0YW5jZUNvbnN0cmFpbnQgOiAgICAgICAgICAgIF9kZXJlcV8oJy4vY29uc3RyYWludHMvRGlzdGFuY2VDb25zdHJhaW50JyksXG4gICAgRXF1YXRpb24gOiAgICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL2VxdWF0aW9ucy9FcXVhdGlvbicpLFxuICAgIEV2ZW50VGFyZ2V0IDogICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi91dGlscy9FdmVudFRhcmdldCcpLFxuICAgIEZyaWN0aW9uRXF1YXRpb24gOiAgICAgICAgICAgICAgX2RlcmVxXygnLi9lcXVhdGlvbnMvRnJpY3Rpb25FcXVhdGlvbicpLFxuICAgIEdTU29sdmVyIDogICAgICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi9zb2x2ZXIvR1NTb2x2ZXInKSxcbiAgICBHcmlkQnJvYWRwaGFzZSA6ICAgICAgICAgICAgICAgIF9kZXJlcV8oJy4vY29sbGlzaW9uL0dyaWRCcm9hZHBoYXNlJyksXG4gICAgSGVpZ2h0ZmllbGQgOiAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL3NoYXBlcy9IZWlnaHRmaWVsZCcpLFxuICAgIEhpbmdlQ29uc3RyYWludCA6ICAgICAgICAgICAgICAgX2RlcmVxXygnLi9jb25zdHJhaW50cy9IaW5nZUNvbnN0cmFpbnQnKSxcbiAgICBMb2NrQ29uc3RyYWludCA6ICAgICAgICAgICAgICAgIF9kZXJlcV8oJy4vY29uc3RyYWludHMvTG9ja0NvbnN0cmFpbnQnKSxcbiAgICBNYXQzIDogICAgICAgICAgICAgICAgICAgICAgICAgIF9kZXJlcV8oJy4vbWF0aC9NYXQzJyksXG4gICAgTWF0ZXJpYWwgOiAgICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL21hdGVyaWFsL01hdGVyaWFsJyksXG4gICAgTmFpdmVCcm9hZHBoYXNlIDogICAgICAgICAgICAgICBfZGVyZXFfKCcuL2NvbGxpc2lvbi9OYWl2ZUJyb2FkcGhhc2UnKSxcbiAgICBPYmplY3RDb2xsaXNpb25NYXRyaXggOiAgICAgICAgIF9kZXJlcV8oJy4vY29sbGlzaW9uL09iamVjdENvbGxpc2lvbk1hdHJpeCcpLFxuICAgIFBvb2wgOiAgICAgICAgICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi91dGlscy9Qb29sJyksXG4gICAgUGFydGljbGUgOiAgICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL3NoYXBlcy9QYXJ0aWNsZScpLFxuICAgIFBsYW5lIDogICAgICAgICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi9zaGFwZXMvUGxhbmUnKSxcbiAgICBQb2ludFRvUG9pbnRDb25zdHJhaW50IDogICAgICAgIF9kZXJlcV8oJy4vY29uc3RyYWludHMvUG9pbnRUb1BvaW50Q29uc3RyYWludCcpLFxuICAgIFF1YXRlcm5pb24gOiAgICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi9tYXRoL1F1YXRlcm5pb24nKSxcbiAgICBSYXkgOiAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kZXJlcV8oJy4vY29sbGlzaW9uL1JheScpLFxuICAgIFJheWNhc3RWZWhpY2xlIDogICAgICAgICAgICAgICAgX2RlcmVxXygnLi9vYmplY3RzL1JheWNhc3RWZWhpY2xlJyksXG4gICAgUmF5Y2FzdFJlc3VsdCA6ICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL2NvbGxpc2lvbi9SYXljYXN0UmVzdWx0JyksXG4gICAgUmlnaWRWZWhpY2xlIDogICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL29iamVjdHMvUmlnaWRWZWhpY2xlJyksXG4gICAgUm90YXRpb25hbEVxdWF0aW9uIDogICAgICAgICAgICBfZGVyZXFfKCcuL2VxdWF0aW9ucy9Sb3RhdGlvbmFsRXF1YXRpb24nKSxcbiAgICBSb3RhdGlvbmFsTW90b3JFcXVhdGlvbiA6ICAgICAgIF9kZXJlcV8oJy4vZXF1YXRpb25zL1JvdGF0aW9uYWxNb3RvckVxdWF0aW9uJyksXG4gICAgU0FQQnJvYWRwaGFzZSA6ICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL2NvbGxpc2lvbi9TQVBCcm9hZHBoYXNlJyksXG4gICAgU1BIU3lzdGVtIDogICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL29iamVjdHMvU1BIU3lzdGVtJyksXG4gICAgU2hhcGUgOiAgICAgICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL3NoYXBlcy9TaGFwZScpLFxuICAgIFNvbHZlciA6ICAgICAgICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi9zb2x2ZXIvU29sdmVyJyksXG4gICAgU3BoZXJlIDogICAgICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL3NoYXBlcy9TcGhlcmUnKSxcbiAgICBTcGxpdFNvbHZlciA6ICAgICAgICAgICAgICAgICAgIF9kZXJlcV8oJy4vc29sdmVyL1NwbGl0U29sdmVyJyksXG4gICAgU3ByaW5nIDogICAgICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL29iamVjdHMvU3ByaW5nJyksXG4gICAgVHJpbWVzaCA6ICAgICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL3NoYXBlcy9UcmltZXNoJyksXG4gICAgVmVjMyA6ICAgICAgICAgICAgICAgICAgICAgICAgICBfZGVyZXFfKCcuL21hdGgvVmVjMycpLFxuICAgIFZlYzNQb29sIDogICAgICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi91dGlscy9WZWMzUG9vbCcpLFxuICAgIFdvcmxkIDogICAgICAgICAgICAgICAgICAgICAgICAgX2RlcmVxXygnLi93b3JsZC9Xb3JsZCcpLFxufTtcblxufSx7XCIuLi9wYWNrYWdlLmpzb25cIjoxLFwiLi9jb2xsaXNpb24vQUFCQlwiOjMsXCIuL2NvbGxpc2lvbi9BcnJheUNvbGxpc2lvbk1hdHJpeFwiOjQsXCIuL2NvbGxpc2lvbi9Ccm9hZHBoYXNlXCI6NSxcIi4vY29sbGlzaW9uL0dyaWRCcm9hZHBoYXNlXCI6NixcIi4vY29sbGlzaW9uL05haXZlQnJvYWRwaGFzZVwiOjcsXCIuL2NvbGxpc2lvbi9PYmplY3RDb2xsaXNpb25NYXRyaXhcIjo4LFwiLi9jb2xsaXNpb24vUmF5XCI6OSxcIi4vY29sbGlzaW9uL1JheWNhc3RSZXN1bHRcIjoxMCxcIi4vY29sbGlzaW9uL1NBUEJyb2FkcGhhc2VcIjoxMSxcIi4vY29uc3RyYWludHMvQ29uZVR3aXN0Q29uc3RyYWludFwiOjEyLFwiLi9jb25zdHJhaW50cy9Db25zdHJhaW50XCI6MTMsXCIuL2NvbnN0cmFpbnRzL0Rpc3RhbmNlQ29uc3RyYWludFwiOjE0LFwiLi9jb25zdHJhaW50cy9IaW5nZUNvbnN0cmFpbnRcIjoxNSxcIi4vY29uc3RyYWludHMvTG9ja0NvbnN0cmFpbnRcIjoxNixcIi4vY29uc3RyYWludHMvUG9pbnRUb1BvaW50Q29uc3RyYWludFwiOjE3LFwiLi9lcXVhdGlvbnMvQ29udGFjdEVxdWF0aW9uXCI6MTksXCIuL2VxdWF0aW9ucy9FcXVhdGlvblwiOjIwLFwiLi9lcXVhdGlvbnMvRnJpY3Rpb25FcXVhdGlvblwiOjIxLFwiLi9lcXVhdGlvbnMvUm90YXRpb25hbEVxdWF0aW9uXCI6MjIsXCIuL2VxdWF0aW9ucy9Sb3RhdGlvbmFsTW90b3JFcXVhdGlvblwiOjIzLFwiLi9tYXRlcmlhbC9Db250YWN0TWF0ZXJpYWxcIjoyNCxcIi4vbWF0ZXJpYWwvTWF0ZXJpYWxcIjoyNSxcIi4vbWF0aC9NYXQzXCI6MjcsXCIuL21hdGgvUXVhdGVybmlvblwiOjI4LFwiLi9tYXRoL1ZlYzNcIjozMCxcIi4vb2JqZWN0cy9Cb2R5XCI6MzEsXCIuL29iamVjdHMvUmF5Y2FzdFZlaGljbGVcIjozMixcIi4vb2JqZWN0cy9SaWdpZFZlaGljbGVcIjozMyxcIi4vb2JqZWN0cy9TUEhTeXN0ZW1cIjozNCxcIi4vb2JqZWN0cy9TcHJpbmdcIjozNSxcIi4vc2hhcGVzL0JveFwiOjM3LFwiLi9zaGFwZXMvQ29udmV4UG9seWhlZHJvblwiOjM4LFwiLi9zaGFwZXMvQ3lsaW5kZXJcIjozOSxcIi4vc2hhcGVzL0hlaWdodGZpZWxkXCI6NDAsXCIuL3NoYXBlcy9QYXJ0aWNsZVwiOjQxLFwiLi9zaGFwZXMvUGxhbmVcIjo0MixcIi4vc2hhcGVzL1NoYXBlXCI6NDMsXCIuL3NoYXBlcy9TcGhlcmVcIjo0NCxcIi4vc2hhcGVzL1RyaW1lc2hcIjo0NSxcIi4vc29sdmVyL0dTU29sdmVyXCI6NDYsXCIuL3NvbHZlci9Tb2x2ZXJcIjo0NyxcIi4vc29sdmVyL1NwbGl0U29sdmVyXCI6NDgsXCIuL3V0aWxzL0V2ZW50VGFyZ2V0XCI6NDksXCIuL3V0aWxzL1Bvb2xcIjo1MSxcIi4vdXRpbHMvVmVjM1Bvb2xcIjo1NCxcIi4vd29ybGQvTmFycm93cGhhc2VcIjo1NSxcIi4vd29ybGQvV29ybGRcIjo1Nn1dLDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBVdGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzL1V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gQUFCQjtcblxuLyoqXG4gKiBBeGlzIGFsaWduZWQgYm91bmRpbmcgYm94IGNsYXNzLlxuICogQGNsYXNzIEFBQkJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtWZWMzfSAgIFtvcHRpb25zLnVwcGVyQm91bmRdXG4gKiBAcGFyYW0ge1ZlYzN9ICAgW29wdGlvbnMubG93ZXJCb3VuZF1cbiAqL1xuZnVuY3Rpb24gQUFCQihvcHRpb25zKXtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb3dlciBib3VuZCBvZiB0aGUgYm91bmRpbmcgYm94LlxuICAgICAqIEBwcm9wZXJ0eSBsb3dlckJvdW5kXG4gICAgICogQHR5cGUge1ZlYzN9XG4gICAgICovXG4gICAgdGhpcy5sb3dlckJvdW5kID0gbmV3IFZlYzMoKTtcbiAgICBpZihvcHRpb25zLmxvd2VyQm91bmQpe1xuICAgICAgICB0aGlzLmxvd2VyQm91bmQuY29weShvcHRpb25zLmxvd2VyQm91bmQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgYm91bmRpbmcgYm94LlxuICAgICAqIEBwcm9wZXJ0eSB1cHBlckJvdW5kXG4gICAgICogQHR5cGUge1ZlYzN9XG4gICAgICovXG4gICAgdGhpcy51cHBlckJvdW5kID0gbmV3IFZlYzMoKTtcbiAgICBpZihvcHRpb25zLnVwcGVyQm91bmQpe1xuICAgICAgICB0aGlzLnVwcGVyQm91bmQuY29weShvcHRpb25zLnVwcGVyQm91bmQpO1xuICAgIH1cbn1cblxudmFyIHRtcCA9IG5ldyBWZWMzKCk7XG5cbi8qKlxuICogU2V0IHRoZSBBQUJCIGJvdW5kcyBmcm9tIGEgc2V0IG9mIHBvaW50cy5cbiAqIEBtZXRob2Qgc2V0RnJvbVBvaW50c1xuICogQHBhcmFtIHtBcnJheX0gcG9pbnRzIEFuIGFycmF5IG9mIFZlYzMncy5cbiAqIEBwYXJhbSB7VmVjM30gcG9zaXRpb25cbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcXVhdGVybmlvblxuICogQHBhcmFtIHtudW1iZXJ9IHNraW5TaXplXG4gKiBAcmV0dXJuIHtBQUJCfSBUaGUgc2VsZiBvYmplY3RcbiAqL1xuQUFCQi5wcm90b3R5cGUuc2V0RnJvbVBvaW50cyA9IGZ1bmN0aW9uKHBvaW50cywgcG9zaXRpb24sIHF1YXRlcm5pb24sIHNraW5TaXplKXtcbiAgICB2YXIgbCA9IHRoaXMubG93ZXJCb3VuZCxcbiAgICAgICAgdSA9IHRoaXMudXBwZXJCb3VuZCxcbiAgICAgICAgcSA9IHF1YXRlcm5pb247XG5cbiAgICAvLyBTZXQgdG8gdGhlIGZpcnN0IHBvaW50XG4gICAgbC5jb3B5KHBvaW50c1swXSk7XG4gICAgaWYocSl7XG4gICAgICAgIHEudm11bHQobCwgbCk7XG4gICAgfVxuICAgIHUuY29weShsKTtcblxuICAgIGZvcih2YXIgaSA9IDE7IGk8cG9pbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdmFyIHAgPSBwb2ludHNbaV07XG5cbiAgICAgICAgaWYocSl7XG4gICAgICAgICAgICBxLnZtdWx0KHAsIHRtcCk7XG4gICAgICAgICAgICBwID0gdG1wO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYocC54ID4gdS54KXsgdS54ID0gcC54OyB9XG4gICAgICAgIGlmKHAueCA8IGwueCl7IGwueCA9IHAueDsgfVxuICAgICAgICBpZihwLnkgPiB1LnkpeyB1LnkgPSBwLnk7IH1cbiAgICAgICAgaWYocC55IDwgbC55KXsgbC55ID0gcC55OyB9XG4gICAgICAgIGlmKHAueiA+IHUueil7IHUueiA9IHAuejsgfVxuICAgICAgICBpZihwLnogPCBsLnopeyBsLnogPSBwLno7IH1cbiAgICB9XG5cbiAgICAvLyBBZGQgb2Zmc2V0XG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICAgIHBvc2l0aW9uLnZhZGQobCwgbCk7XG4gICAgICAgIHBvc2l0aW9uLnZhZGQodSwgdSk7XG4gICAgfVxuXG4gICAgaWYoc2tpblNpemUpe1xuICAgICAgICBsLnggLT0gc2tpblNpemU7XG4gICAgICAgIGwueSAtPSBza2luU2l6ZTtcbiAgICAgICAgbC56IC09IHNraW5TaXplO1xuICAgICAgICB1LnggKz0gc2tpblNpemU7XG4gICAgICAgIHUueSArPSBza2luU2l6ZTtcbiAgICAgICAgdS56ICs9IHNraW5TaXplO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDb3B5IGJvdW5kcyBmcm9tIGFuIEFBQkIgdG8gdGhpcyBBQUJCXG4gKiBAbWV0aG9kIGNvcHlcbiAqIEBwYXJhbSAge0FBQkJ9IGFhYmIgU291cmNlIHRvIGNvcHkgZnJvbVxuICogQHJldHVybiB7QUFCQn0gVGhlIHRoaXMgb2JqZWN0LCBmb3IgY2hhaW5hYmlsaXR5XG4gKi9cbkFBQkIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbihhYWJiKXtcbiAgICB0aGlzLmxvd2VyQm91bmQuY29weShhYWJiLmxvd2VyQm91bmQpO1xuICAgIHRoaXMudXBwZXJCb3VuZC5jb3B5KGFhYmIudXBwZXJCb3VuZCk7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENsb25lIGFuIEFBQkJcbiAqIEBtZXRob2QgY2xvbmVcbiAqL1xuQUFCQi5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBuZXcgQUFCQigpLmNvcHkodGhpcyk7XG59O1xuXG4vKipcbiAqIEV4dGVuZCB0aGlzIEFBQkIgc28gdGhhdCBpdCBjb3ZlcnMgdGhlIGdpdmVuIEFBQkIgdG9vLlxuICogQG1ldGhvZCBleHRlbmRcbiAqIEBwYXJhbSAge0FBQkJ9IGFhYmJcbiAqL1xuQUFCQi5wcm90b3R5cGUuZXh0ZW5kID0gZnVuY3Rpb24oYWFiYil7XG4gICAgLy8gRXh0ZW5kIGxvd2VyIGJvdW5kXG4gICAgdmFyIGwgPSBhYWJiLmxvd2VyQm91bmQueDtcbiAgICBpZih0aGlzLmxvd2VyQm91bmQueCA+IGwpe1xuICAgICAgICB0aGlzLmxvd2VyQm91bmQueCA9IGw7XG4gICAgfVxuXG4gICAgLy8gVXBwZXJcbiAgICB2YXIgdSA9IGFhYmIudXBwZXJCb3VuZC54O1xuICAgIGlmKHRoaXMudXBwZXJCb3VuZC54IDwgdSl7XG4gICAgICAgIHRoaXMudXBwZXJCb3VuZC54ID0gdTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgbG93ZXIgYm91bmRcbiAgICB2YXIgbCA9IGFhYmIubG93ZXJCb3VuZC55O1xuICAgIGlmKHRoaXMubG93ZXJCb3VuZC55ID4gbCl7XG4gICAgICAgIHRoaXMubG93ZXJCb3VuZC55ID0gbDtcbiAgICB9XG5cbiAgICAvLyBVcHBlclxuICAgIHZhciB1ID0gYWFiYi51cHBlckJvdW5kLnk7XG4gICAgaWYodGhpcy51cHBlckJvdW5kLnkgPCB1KXtcbiAgICAgICAgdGhpcy51cHBlckJvdW5kLnkgPSB1O1xuICAgIH1cblxuICAgIC8vIEV4dGVuZCBsb3dlciBib3VuZFxuICAgIHZhciBsID0gYWFiYi5sb3dlckJvdW5kLno7XG4gICAgaWYodGhpcy5sb3dlckJvdW5kLnogPiBsKXtcbiAgICAgICAgdGhpcy5sb3dlckJvdW5kLnogPSBsO1xuICAgIH1cblxuICAgIC8vIFVwcGVyXG4gICAgdmFyIHUgPSBhYWJiLnVwcGVyQm91bmQuejtcbiAgICBpZih0aGlzLnVwcGVyQm91bmQueiA8IHUpe1xuICAgICAgICB0aGlzLnVwcGVyQm91bmQueiA9IHU7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIEFBQkIgb3ZlcmxhcHMgdGhpcyBBQUJCLlxuICogQG1ldGhvZCBvdmVybGFwc1xuICogQHBhcmFtICB7QUFCQn0gYWFiYlxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuQUFCQi5wcm90b3R5cGUub3ZlcmxhcHMgPSBmdW5jdGlvbihhYWJiKXtcbiAgICB2YXIgbDEgPSB0aGlzLmxvd2VyQm91bmQsXG4gICAgICAgIHUxID0gdGhpcy51cHBlckJvdW5kLFxuICAgICAgICBsMiA9IGFhYmIubG93ZXJCb3VuZCxcbiAgICAgICAgdTIgPSBhYWJiLnVwcGVyQm91bmQ7XG5cbiAgICAvLyAgICAgIGwyICAgICAgICB1MlxuICAgIC8vICAgICAgfC0tLS0tLS0tLXxcbiAgICAvLyB8LS0tLS0tLS18XG4gICAgLy8gbDEgICAgICAgdTFcblxuICAgIHJldHVybiAoKGwyLnggPD0gdTEueCAmJiB1MS54IDw9IHUyLngpIHx8IChsMS54IDw9IHUyLnggJiYgdTIueCA8PSB1MS54KSkgJiZcbiAgICAgICAgICAgKChsMi55IDw9IHUxLnkgJiYgdTEueSA8PSB1Mi55KSB8fCAobDEueSA8PSB1Mi55ICYmIHUyLnkgPD0gdTEueSkpICYmXG4gICAgICAgICAgICgobDIueiA8PSB1MS56ICYmIHUxLnogPD0gdTIueikgfHwgKGwxLnogPD0gdTIueiAmJiB1Mi56IDw9IHUxLnopKTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBBQUJCIGlzIGZ1bGx5IGNvbnRhaW5lZCBpbiB0aGlzIEFBQkIuXG4gKiBAbWV0aG9kIGNvbnRhaW5zXG4gKiBAcGFyYW0ge0FBQkJ9IGFhYmJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbkFBQkIucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24oYWFiYil7XG4gICAgdmFyIGwxID0gdGhpcy5sb3dlckJvdW5kLFxuICAgICAgICB1MSA9IHRoaXMudXBwZXJCb3VuZCxcbiAgICAgICAgbDIgPSBhYWJiLmxvd2VyQm91bmQsXG4gICAgICAgIHUyID0gYWFiYi51cHBlckJvdW5kO1xuXG4gICAgLy8gICAgICBsMiAgICAgICAgdTJcbiAgICAvLyAgICAgIHwtLS0tLS0tLS18XG4gICAgLy8gfC0tLS0tLS0tLS0tLS0tLXxcbiAgICAvLyBsMSAgICAgICAgICAgICAgdTFcblxuICAgIHJldHVybiAoXG4gICAgICAgIChsMS54IDw9IGwyLnggJiYgdTEueCA+PSB1Mi54KSAmJlxuICAgICAgICAobDEueSA8PSBsMi55ICYmIHUxLnkgPj0gdTIueSkgJiZcbiAgICAgICAgKGwxLnogPD0gbDIueiAmJiB1MS56ID49IHUyLnopXG4gICAgKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBnZXRDb3JuZXJzXG4gKiBAcGFyYW0ge1ZlYzN9IGFcbiAqIEBwYXJhbSB7VmVjM30gYlxuICogQHBhcmFtIHtWZWMzfSBjXG4gKiBAcGFyYW0ge1ZlYzN9IGRcbiAqIEBwYXJhbSB7VmVjM30gZVxuICogQHBhcmFtIHtWZWMzfSBmXG4gKiBAcGFyYW0ge1ZlYzN9IGdcbiAqIEBwYXJhbSB7VmVjM30gaFxuICovXG5BQUJCLnByb3RvdHlwZS5nZXRDb3JuZXJzID0gZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZiwgZywgaCl7XG4gICAgdmFyIGwgPSB0aGlzLmxvd2VyQm91bmQsXG4gICAgICAgIHUgPSB0aGlzLnVwcGVyQm91bmQ7XG5cbiAgICBhLmNvcHkobCk7XG4gICAgYi5zZXQoIHUueCwgbC55LCBsLnogKTtcbiAgICBjLnNldCggdS54LCB1LnksIGwueiApO1xuICAgIGQuc2V0KCBsLngsIHUueSwgdS56ICk7XG4gICAgZS5zZXQoIHUueCwgbC55LCBsLnogKTtcbiAgICBmLnNldCggbC54LCB1LnksIGwueiApO1xuICAgIGcuc2V0KCBsLngsIGwueSwgdS56ICk7XG4gICAgaC5jb3B5KHUpO1xufTtcblxudmFyIHRyYW5zZm9ybUludG9GcmFtZV9jb3JuZXJzID0gW1xuICAgIG5ldyBWZWMzKCksXG4gICAgbmV3IFZlYzMoKSxcbiAgICBuZXcgVmVjMygpLFxuICAgIG5ldyBWZWMzKCksXG4gICAgbmV3IFZlYzMoKSxcbiAgICBuZXcgVmVjMygpLFxuICAgIG5ldyBWZWMzKCksXG4gICAgbmV3IFZlYzMoKVxuXTtcblxuLyoqXG4gKiBHZXQgdGhlIHJlcHJlc2VudGF0aW9uIG9mIGFuIEFBQkIgaW4gYW5vdGhlciBmcmFtZS5cbiAqIEBtZXRob2QgdG9Mb2NhbEZyYW1lXG4gKiBAcGFyYW0gIHtUcmFuc2Zvcm19IGZyYW1lXG4gKiBAcGFyYW0gIHtBQUJCfSB0YXJnZXRcbiAqIEByZXR1cm4ge0FBQkJ9IFRoZSBcInRhcmdldFwiIEFBQkIgb2JqZWN0LlxuICovXG5BQUJCLnByb3RvdHlwZS50b0xvY2FsRnJhbWUgPSBmdW5jdGlvbihmcmFtZSwgdGFyZ2V0KXtcblxuICAgIHZhciBjb3JuZXJzID0gdHJhbnNmb3JtSW50b0ZyYW1lX2Nvcm5lcnM7XG4gICAgdmFyIGEgPSBjb3JuZXJzWzBdO1xuICAgIHZhciBiID0gY29ybmVyc1sxXTtcbiAgICB2YXIgYyA9IGNvcm5lcnNbMl07XG4gICAgdmFyIGQgPSBjb3JuZXJzWzNdO1xuICAgIHZhciBlID0gY29ybmVyc1s0XTtcbiAgICB2YXIgZiA9IGNvcm5lcnNbNV07XG4gICAgdmFyIGcgPSBjb3JuZXJzWzZdO1xuICAgIHZhciBoID0gY29ybmVyc1s3XTtcblxuICAgIC8vIEdldCBjb3JuZXJzIGluIGN1cnJlbnQgZnJhbWVcbiAgICB0aGlzLmdldENvcm5lcnMoYSwgYiwgYywgZCwgZSwgZiwgZywgaCk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gdGhlbSB0byBuZXcgbG9jYWwgZnJhbWVcbiAgICBmb3IodmFyIGk9MDsgaSAhPT0gODsgaSsrKXtcbiAgICAgICAgdmFyIGNvcm5lciA9IGNvcm5lcnNbaV07XG4gICAgICAgIGZyYW1lLnBvaW50VG9Mb2NhbChjb3JuZXIsIGNvcm5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldC5zZXRGcm9tUG9pbnRzKGNvcm5lcnMpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHJlcHJlc2VudGF0aW9uIG9mIGFuIEFBQkIgaW4gdGhlIGdsb2JhbCBmcmFtZS5cbiAqIEBtZXRob2QgdG9Xb3JsZEZyYW1lXG4gKiBAcGFyYW0gIHtUcmFuc2Zvcm19IGZyYW1lXG4gKiBAcGFyYW0gIHtBQUJCfSB0YXJnZXRcbiAqIEByZXR1cm4ge0FBQkJ9IFRoZSBcInRhcmdldFwiIEFBQkIgb2JqZWN0LlxuICovXG5BQUJCLnByb3RvdHlwZS50b1dvcmxkRnJhbWUgPSBmdW5jdGlvbihmcmFtZSwgdGFyZ2V0KXtcblxuICAgIHZhciBjb3JuZXJzID0gdHJhbnNmb3JtSW50b0ZyYW1lX2Nvcm5lcnM7XG4gICAgdmFyIGEgPSBjb3JuZXJzWzBdO1xuICAgIHZhciBiID0gY29ybmVyc1sxXTtcbiAgICB2YXIgYyA9IGNvcm5lcnNbMl07XG4gICAgdmFyIGQgPSBjb3JuZXJzWzNdO1xuICAgIHZhciBlID0gY29ybmVyc1s0XTtcbiAgICB2YXIgZiA9IGNvcm5lcnNbNV07XG4gICAgdmFyIGcgPSBjb3JuZXJzWzZdO1xuICAgIHZhciBoID0gY29ybmVyc1s3XTtcblxuICAgIC8vIEdldCBjb3JuZXJzIGluIGN1cnJlbnQgZnJhbWVcbiAgICB0aGlzLmdldENvcm5lcnMoYSwgYiwgYywgZCwgZSwgZiwgZywgaCk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gdGhlbSB0byBuZXcgbG9jYWwgZnJhbWVcbiAgICBmb3IodmFyIGk9MDsgaSAhPT0gODsgaSsrKXtcbiAgICAgICAgdmFyIGNvcm5lciA9IGNvcm5lcnNbaV07XG4gICAgICAgIGZyYW1lLnBvaW50VG9Xb3JsZChjb3JuZXIsIGNvcm5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldC5zZXRGcm9tUG9pbnRzKGNvcm5lcnMpO1xufTtcblxufSx7XCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4uL3V0aWxzL1V0aWxzXCI6NTN9XSw0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXlDb2xsaXNpb25NYXRyaXg7XG5cbi8qKlxuICogQ29sbGlzaW9uIFwibWF0cml4XCIuIEl0J3MgYWN0dWFsbHkgYSB0cmlhbmd1bGFyLXNoYXBlZCBhcnJheSBvZiB3aGV0aGVyIHR3byBib2RpZXMgYXJlIHRvdWNoaW5nIHRoaXMgc3RlcCwgZm9yIHJlZmVyZW5jZSBuZXh0IHN0ZXBcbiAqIEBjbGFzcyBBcnJheUNvbGxpc2lvbk1hdHJpeFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEFycmF5Q29sbGlzaW9uTWF0cml4KCkge1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1hdHJpeCBzdG9yYWdlXG4gICAgICogQHByb3BlcnR5IG1hdHJpeFxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cblx0dGhpcy5tYXRyaXggPSBbXTtcbn1cblxuLyoqXG4gKiBHZXQgYW4gZWxlbWVudFxuICogQG1ldGhvZCBnZXRcbiAqIEBwYXJhbSAge051bWJlcn0gaVxuICogQHBhcmFtICB7TnVtYmVyfSBqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbkFycmF5Q29sbGlzaW9uTWF0cml4LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihpLCBqKSB7XG5cdGkgPSBpLmluZGV4O1xuXHRqID0gai5pbmRleDtcbiAgICBpZiAoaiA+IGkpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBqO1xuICAgICAgICBqID0gaTtcbiAgICAgICAgaSA9IHRlbXA7XG4gICAgfVxuXHRyZXR1cm4gdGhpcy5tYXRyaXhbKGkqKGkgKyAxKT4+MSkgKyBqLTFdO1xufTtcblxuLyoqXG4gKiBTZXQgYW4gZWxlbWVudFxuICogQG1ldGhvZCBzZXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBpXG4gKiBAcGFyYW0ge051bWJlcn0galxuICogQHBhcmFtIHtOdW1iZXJ9IHZhbHVlXG4gKi9cbkFycmF5Q29sbGlzaW9uTWF0cml4LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihpLCBqLCB2YWx1ZSkge1xuXHRpID0gaS5pbmRleDtcblx0aiA9IGouaW5kZXg7XG4gICAgaWYgKGogPiBpKSB7XG4gICAgICAgIHZhciB0ZW1wID0gajtcbiAgICAgICAgaiA9IGk7XG4gICAgICAgIGkgPSB0ZW1wO1xuICAgIH1cblx0dGhpcy5tYXRyaXhbKGkqKGkgKyAxKT4+MSkgKyBqLTFdID0gdmFsdWUgPyAxIDogMDtcbn07XG5cbi8qKlxuICogU2V0cyBhbGwgZWxlbWVudHMgdG8gemVyb1xuICogQG1ldGhvZCByZXNldFxuICovXG5BcnJheUNvbGxpc2lvbk1hdHJpeC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcblx0Zm9yICh2YXIgaT0wLCBsPXRoaXMubWF0cml4Lmxlbmd0aDsgaSE9PWw7IGkrKykge1xuXHRcdHRoaXMubWF0cml4W2ldPTA7XG5cdH1cbn07XG5cbi8qKlxuICogU2V0cyB0aGUgbWF4IG51bWJlciBvZiBvYmplY3RzXG4gKiBAbWV0aG9kIHNldE51bU9iamVjdHNcbiAqIEBwYXJhbSB7TnVtYmVyfSBuXG4gKi9cbkFycmF5Q29sbGlzaW9uTWF0cml4LnByb3RvdHlwZS5zZXROdW1PYmplY3RzID0gZnVuY3Rpb24obikge1xuXHR0aGlzLm1hdHJpeC5sZW5ndGggPSBuKihuLTEpPj4xO1xufTtcblxufSx7fV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQm9keSA9IF9kZXJlcV8oJy4uL29iamVjdHMvQm9keScpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBRdWF0ZXJuaW9uID0gX2RlcmVxXygnLi4vbWF0aC9RdWF0ZXJuaW9uJyk7XG52YXIgU2hhcGUgPSBfZGVyZXFfKCcuLi9zaGFwZXMvU2hhcGUnKTtcbnZhciBQbGFuZSA9IF9kZXJlcV8oJy4uL3NoYXBlcy9QbGFuZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJyb2FkcGhhc2U7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYnJvYWRwaGFzZSBpbXBsZW1lbnRhdGlvbnNcbiAqIEBjbGFzcyBCcm9hZHBoYXNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdXRob3Igc2NodGVwcGVcbiAqL1xuZnVuY3Rpb24gQnJvYWRwaGFzZSgpe1xuICAgIC8qKlxuICAgICogVGhlIHdvcmxkIHRvIHNlYXJjaCBmb3IgY29sbGlzaW9ucyBpbi5cbiAgICAqIEBwcm9wZXJ0eSB3b3JsZFxuICAgICogQHR5cGUge1dvcmxkfVxuICAgICovXG4gICAgdGhpcy53b3JsZCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIGJyb2FkcGhhc2UgdXNlcyBib3VuZGluZyBib3hlcyBmb3IgaW50ZXJzZWN0aW9uIHRlc3QsIGVsc2UgaXQgdXNlcyBib3VuZGluZyBzcGhlcmVzLlxuICAgICAqIEBwcm9wZXJ0eSB1c2VCb3VuZGluZ0JveGVzXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy51c2VCb3VuZGluZ0JveGVzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdG8gdHJ1ZSBpZiB0aGUgb2JqZWN0cyBpbiB0aGUgd29ybGQgbW92ZWQuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBkaXJ0eVxuICAgICAqL1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xufVxuXG4vKipcbiAqIEdldCB0aGUgY29sbGlzaW9uIHBhaXJzIGZyb20gdGhlIHdvcmxkXG4gKiBAbWV0aG9kIGNvbGxpc2lvblBhaXJzXG4gKiBAcGFyYW0ge1dvcmxkfSB3b3JsZCBUaGUgd29ybGQgdG8gc2VhcmNoIGluXG4gKiBAcGFyYW0ge0FycmF5fSBwMSBFbXB0eSBhcnJheSB0byBiZSBmaWxsZWQgd2l0aCBib2R5IG9iamVjdHNcbiAqIEBwYXJhbSB7QXJyYXl9IHAyIEVtcHR5IGFycmF5IHRvIGJlIGZpbGxlZCB3aXRoIGJvZHkgb2JqZWN0c1xuICovXG5Ccm9hZHBoYXNlLnByb3RvdHlwZS5jb2xsaXNpb25QYWlycyA9IGZ1bmN0aW9uKHdvcmxkLHAxLHAyKXtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb2xsaXNpb25QYWlycyBub3QgaW1wbGVtZW50ZWQgZm9yIHRoaXMgQnJvYWRQaGFzZSBjbGFzcyFcIik7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGEgYm9keSBwYWlyIG5lZWRzIHRvIGJlIGludGVyc2VjdGlvbiB0ZXN0ZWQgYXQgYWxsLlxuICogQG1ldGhvZCBuZWVkQnJvYWRwaGFzZUNvbGxpc2lvblxuICogQHBhcmFtIHtCb2R5fSBib2R5QVxuICogQHBhcmFtIHtCb2R5fSBib2R5QlxuICogQHJldHVybiB7Ym9vbH1cbiAqL1xudmFyIEJyb2FkcGhhc2VfbmVlZEJyb2FkcGhhc2VDb2xsaXNpb25fU1RBVElDX09SX0tJTkVNQVRJQyA9IEJvZHkuU1RBVElDIHwgQm9keS5LSU5FTUFUSUM7XG5Ccm9hZHBoYXNlLnByb3RvdHlwZS5uZWVkQnJvYWRwaGFzZUNvbGxpc2lvbiA9IGZ1bmN0aW9uKGJvZHlBLGJvZHlCKXtcblxuICAgIC8vIENoZWNrIGNvbGxpc2lvbiBmaWx0ZXIgbWFza3NcbiAgICBpZiggKGJvZHlBLmNvbGxpc2lvbkZpbHRlckdyb3VwICYgYm9keUIuY29sbGlzaW9uRmlsdGVyTWFzayk9PT0wIHx8IChib2R5Qi5jb2xsaXNpb25GaWx0ZXJHcm91cCAmIGJvZHlBLmNvbGxpc2lvbkZpbHRlck1hc2spPT09MCl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayB0eXBlc1xuICAgIGlmKCgoYm9keUEudHlwZSAmIEJyb2FkcGhhc2VfbmVlZEJyb2FkcGhhc2VDb2xsaXNpb25fU1RBVElDX09SX0tJTkVNQVRJQykhPT0wIHx8IGJvZHlBLnNsZWVwU3RhdGUgPT09IEJvZHkuU0xFRVBJTkcpICYmXG4gICAgICAgKChib2R5Qi50eXBlICYgQnJvYWRwaGFzZV9uZWVkQnJvYWRwaGFzZUNvbGxpc2lvbl9TVEFUSUNfT1JfS0lORU1BVElDKSE9PTAgfHwgYm9keUIuc2xlZXBTdGF0ZSA9PT0gQm9keS5TTEVFUElORykpIHtcbiAgICAgICAgLy8gQm90aCBib2RpZXMgYXJlIHN0YXRpYywga2luZW1hdGljIG9yIHNsZWVwaW5nLiBTa2lwLlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBib3VuZGluZyB2b2x1bWVzIG9mIHR3byBib2RpZXMgaW50ZXJzZWN0LlxuICogQG1ldGhvZCBpbnRlcnNlY3Rpb25UZXN0XG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlBXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlCXG4gKiBAcGFyYW0ge2FycmF5fSBwYWlyczFcbiAqIEBwYXJhbSB7YXJyYXl9IHBhaXJzMlxuICAqL1xuQnJvYWRwaGFzZS5wcm90b3R5cGUuaW50ZXJzZWN0aW9uVGVzdCA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5QiwgcGFpcnMxLCBwYWlyczIpe1xuICAgIGlmKHRoaXMudXNlQm91bmRpbmdCb3hlcyl7XG4gICAgICAgIHRoaXMuZG9Cb3VuZGluZ0JveEJyb2FkcGhhc2UoYm9keUEsYm9keUIscGFpcnMxLHBhaXJzMik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kb0JvdW5kaW5nU3BoZXJlQnJvYWRwaGFzZShib2R5QSxib2R5QixwYWlyczEscGFpcnMyKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBib3VuZGluZyBzcGhlcmVzIG9mIHR3byBib2RpZXMgYXJlIGludGVyc2VjdGluZy5cbiAqIEBtZXRob2QgZG9Cb3VuZGluZ1NwaGVyZUJyb2FkcGhhc2VcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUFcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUJcbiAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzMSBib2R5QSBpcyBhcHBlbmRlZCB0byB0aGlzIGFycmF5IGlmIGludGVyc2VjdGlvblxuICogQHBhcmFtIHtBcnJheX0gcGFpcnMyIGJvZHlCIGlzIGFwcGVuZGVkIHRvIHRoaXMgYXJyYXkgaWYgaW50ZXJzZWN0aW9uXG4gKi9cbnZhciBCcm9hZHBoYXNlX2NvbGxpc2lvblBhaXJzX3IgPSBuZXcgVmVjMygpLCAvLyBUZW1wIG9iamVjdHNcbiAgICBCcm9hZHBoYXNlX2NvbGxpc2lvblBhaXJzX25vcm1hbCA9ICBuZXcgVmVjMygpLFxuICAgIEJyb2FkcGhhc2VfY29sbGlzaW9uUGFpcnNfcXVhdCA9ICBuZXcgUXVhdGVybmlvbigpLFxuICAgIEJyb2FkcGhhc2VfY29sbGlzaW9uUGFpcnNfcmVscG9zICA9ICBuZXcgVmVjMygpO1xuQnJvYWRwaGFzZS5wcm90b3R5cGUuZG9Cb3VuZGluZ1NwaGVyZUJyb2FkcGhhc2UgPSBmdW5jdGlvbihib2R5QSxib2R5QixwYWlyczEscGFpcnMyKXtcbiAgICB2YXIgciA9IEJyb2FkcGhhc2VfY29sbGlzaW9uUGFpcnNfcjtcbiAgICBib2R5Qi5wb3NpdGlvbi52c3ViKGJvZHlBLnBvc2l0aW9uLHIpO1xuICAgIHZhciBib3VuZGluZ1JhZGl1c1N1bTIgPSBNYXRoLnBvdyhib2R5QS5ib3VuZGluZ1JhZGl1cyArIGJvZHlCLmJvdW5kaW5nUmFkaXVzLCAyKTtcbiAgICB2YXIgbm9ybTIgPSByLm5vcm0yKCk7XG4gICAgaWYobm9ybTIgPCBib3VuZGluZ1JhZGl1c1N1bTIpe1xuICAgICAgICBwYWlyczEucHVzaChib2R5QSk7XG4gICAgICAgIHBhaXJzMi5wdXNoKGJvZHlCKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBib3VuZGluZyBib3hlcyBvZiB0d28gYm9kaWVzIGFyZSBpbnRlcnNlY3RpbmcuXG4gKiBAbWV0aG9kIGRvQm91bmRpbmdCb3hCcm9hZHBoYXNlXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlBXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlCXG4gKiBAcGFyYW0ge0FycmF5fSBwYWlyczFcbiAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzMlxuICovXG5Ccm9hZHBoYXNlLnByb3RvdHlwZS5kb0JvdW5kaW5nQm94QnJvYWRwaGFzZSA9IGZ1bmN0aW9uKGJvZHlBLGJvZHlCLHBhaXJzMSxwYWlyczIpe1xuICAgIGlmKGJvZHlBLmFhYmJOZWVkc1VwZGF0ZSl7XG4gICAgICAgIGJvZHlBLmNvbXB1dGVBQUJCKCk7XG4gICAgfVxuICAgIGlmKGJvZHlCLmFhYmJOZWVkc1VwZGF0ZSl7XG4gICAgICAgIGJvZHlCLmNvbXB1dGVBQUJCKCk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgQUFCQiAvIEFBQkJcbiAgICBpZihib2R5QS5hYWJiLm92ZXJsYXBzKGJvZHlCLmFhYmIpKXtcbiAgICAgICAgcGFpcnMxLnB1c2goYm9keUEpO1xuICAgICAgICBwYWlyczIucHVzaChib2R5Qik7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmVzIGR1cGxpY2F0ZSBwYWlycyBmcm9tIHRoZSBwYWlyIGFycmF5cy5cbiAqIEBtZXRob2QgbWFrZVBhaXJzVW5pcXVlXG4gKiBAcGFyYW0ge0FycmF5fSBwYWlyczFcbiAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzMlxuICovXG52YXIgQnJvYWRwaGFzZV9tYWtlUGFpcnNVbmlxdWVfdGVtcCA9IHsga2V5czpbXSB9LFxuICAgIEJyb2FkcGhhc2VfbWFrZVBhaXJzVW5pcXVlX3AxID0gW10sXG4gICAgQnJvYWRwaGFzZV9tYWtlUGFpcnNVbmlxdWVfcDIgPSBbXTtcbkJyb2FkcGhhc2UucHJvdG90eXBlLm1ha2VQYWlyc1VuaXF1ZSA9IGZ1bmN0aW9uKHBhaXJzMSxwYWlyczIpe1xuICAgIHZhciB0ID0gQnJvYWRwaGFzZV9tYWtlUGFpcnNVbmlxdWVfdGVtcCxcbiAgICAgICAgcDEgPSBCcm9hZHBoYXNlX21ha2VQYWlyc1VuaXF1ZV9wMSxcbiAgICAgICAgcDIgPSBCcm9hZHBoYXNlX21ha2VQYWlyc1VuaXF1ZV9wMixcbiAgICAgICAgTiA9IHBhaXJzMS5sZW5ndGg7XG5cbiAgICBmb3IodmFyIGk9MDsgaSE9PU47IGkrKyl7XG4gICAgICAgIHAxW2ldID0gcGFpcnMxW2ldO1xuICAgICAgICBwMltpXSA9IHBhaXJzMltpXTtcbiAgICB9XG5cbiAgICBwYWlyczEubGVuZ3RoID0gMDtcbiAgICBwYWlyczIubGVuZ3RoID0gMDtcblxuICAgIGZvcih2YXIgaT0wOyBpIT09TjsgaSsrKXtcbiAgICAgICAgdmFyIGlkMSA9IHAxW2ldLmlkLFxuICAgICAgICAgICAgaWQyID0gcDJbaV0uaWQ7XG4gICAgICAgIHZhciBrZXkgPSBpZDEgPCBpZDIgPyBpZDErXCIsXCIraWQyIDogIGlkMitcIixcIitpZDE7XG4gICAgICAgIHRba2V5XSA9IGk7XG4gICAgICAgIHQua2V5cy5wdXNoKGtleSk7XG4gICAgfVxuXG4gICAgZm9yKHZhciBpPTA7IGkhPT10LmtleXMubGVuZ3RoOyBpKyspe1xuICAgICAgICB2YXIga2V5ID0gdC5rZXlzLnBvcCgpLFxuICAgICAgICAgICAgcGFpckluZGV4ID0gdFtrZXldO1xuICAgICAgICBwYWlyczEucHVzaChwMVtwYWlySW5kZXhdKTtcbiAgICAgICAgcGFpcnMyLnB1c2gocDJbcGFpckluZGV4XSk7XG4gICAgICAgIGRlbGV0ZSB0W2tleV07XG4gICAgfVxufTtcblxuLyoqXG4gKiBUbyBiZSBpbXBsZW1lbnRlZCBieSBzdWJjYXNzZXNcbiAqIEBtZXRob2Qgc2V0V29ybGRcbiAqIEBwYXJhbSB7V29ybGR9IHdvcmxkXG4gKi9cbkJyb2FkcGhhc2UucHJvdG90eXBlLnNldFdvcmxkID0gZnVuY3Rpb24od29ybGQpe1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgYm91bmRpbmcgc3BoZXJlcyBvZiB0d28gYm9kaWVzIG92ZXJsYXAuXG4gKiBAbWV0aG9kIGJvdW5kaW5nU3BoZXJlQ2hlY2tcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUFcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnZhciBic2NfZGlzdCA9IG5ldyBWZWMzKCk7XG5Ccm9hZHBoYXNlLmJvdW5kaW5nU3BoZXJlQ2hlY2sgPSBmdW5jdGlvbihib2R5QSxib2R5Qil7XG4gICAgdmFyIGRpc3QgPSBic2NfZGlzdDtcbiAgICBib2R5QS5wb3NpdGlvbi52c3ViKGJvZHlCLnBvc2l0aW9uLGRpc3QpO1xuICAgIHJldHVybiBNYXRoLnBvdyhib2R5QS5zaGFwZS5ib3VuZGluZ1NwaGVyZVJhZGl1cyArIGJvZHlCLnNoYXBlLmJvdW5kaW5nU3BoZXJlUmFkaXVzLDIpID4gZGlzdC5ub3JtMigpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFsbCB0aGUgYm9kaWVzIHdpdGhpbiB0aGUgQUFCQi5cbiAqIEBtZXRob2QgYWFiYlF1ZXJ5XG4gKiBAcGFyYW0gIHtXb3JsZH0gd29ybGRcbiAqIEBwYXJhbSAge0FBQkJ9IGFhYmJcbiAqIEBwYXJhbSAge2FycmF5fSByZXN1bHQgQW4gYXJyYXkgdG8gc3RvcmUgcmVzdWx0aW5nIGJvZGllcyBpbi5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5Ccm9hZHBoYXNlLnByb3RvdHlwZS5hYWJiUXVlcnkgPSBmdW5jdGlvbih3b3JsZCwgYWFiYiwgcmVzdWx0KXtcbiAgICBjb25zb2xlLndhcm4oJy5hYWJiUXVlcnkgaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgQnJvYWRwaGFzZSBzdWJjbGFzcy4nKTtcbiAgICByZXR1cm4gW107XG59O1xufSx7XCIuLi9tYXRoL1F1YXRlcm5pb25cIjoyOCxcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi4vb2JqZWN0cy9Cb2R5XCI6MzEsXCIuLi9zaGFwZXMvUGxhbmVcIjo0MixcIi4uL3NoYXBlcy9TaGFwZVwiOjQzfV0sNjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IEdyaWRCcm9hZHBoYXNlO1xuXG52YXIgQnJvYWRwaGFzZSA9IF9kZXJlcV8oJy4vQnJvYWRwaGFzZScpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBTaGFwZSA9IF9kZXJlcV8oJy4uL3NoYXBlcy9TaGFwZScpO1xuXG4vKipcbiAqIEF4aXMgYWxpZ25lZCB1bmlmb3JtIGdyaWQgYnJvYWRwaGFzZS5cbiAqIEBjbGFzcyBHcmlkQnJvYWRwaGFzZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBCcm9hZHBoYXNlXG4gKiBAdG9kbyBOZWVkcyBzdXBwb3J0IGZvciBtb3JlIHRoYW4ganVzdCBwbGFuZXMgYW5kIHNwaGVyZXMuXG4gKiBAcGFyYW0ge1ZlYzN9IGFhYmJNaW5cbiAqIEBwYXJhbSB7VmVjM30gYWFiYk1heFxuICogQHBhcmFtIHtOdW1iZXJ9IG54IE51bWJlciBvZiBib3hlcyBhbG9uZyB4XG4gKiBAcGFyYW0ge051bWJlcn0gbnkgTnVtYmVyIG9mIGJveGVzIGFsb25nIHlcbiAqIEBwYXJhbSB7TnVtYmVyfSBueiBOdW1iZXIgb2YgYm94ZXMgYWxvbmcgelxuICovXG5mdW5jdGlvbiBHcmlkQnJvYWRwaGFzZShhYWJiTWluLGFhYmJNYXgsbngsbnksbnope1xuICAgIEJyb2FkcGhhc2UuYXBwbHkodGhpcyk7XG4gICAgdGhpcy5ueCA9IG54IHx8IDEwO1xuICAgIHRoaXMubnkgPSBueSB8fCAxMDtcbiAgICB0aGlzLm56ID0gbnogfHwgMTA7XG4gICAgdGhpcy5hYWJiTWluID0gYWFiYk1pbiB8fCBuZXcgVmVjMygxMDAsMTAwLDEwMCk7XG4gICAgdGhpcy5hYWJiTWF4ID0gYWFiYk1heCB8fCBuZXcgVmVjMygtMTAwLC0xMDAsLTEwMCk7XG5cdHZhciBuYmlucyA9IHRoaXMubnggKiB0aGlzLm55ICogdGhpcy5uejtcblx0aWYgKG5iaW5zIDw9IDApIHtcblx0XHR0aHJvdyBcIkdyaWRCcm9hZHBoYXNlOiBFYWNoIGRpbWVuc2lvbidzIG4gbXVzdCBiZSA+MFwiO1xuXHR9XG4gICAgdGhpcy5iaW5zID0gW107XG5cdHRoaXMuYmluTGVuZ3RocyA9IFtdOyAvL1JhdGhlciB0aGFuIGNvbnRpbnVhbGx5IHJlc2l6aW5nIGFycmF5cyAodGhyYXNoaW5nIHRoZSBtZW1vcnkpLCBqdXN0IHJlY29yZCBsZW5ndGggYW5kIGFsbG93IHRoZW0gdG8gZ3Jvd1xuXHR0aGlzLmJpbnMubGVuZ3RoID0gbmJpbnM7XG5cdHRoaXMuYmluTGVuZ3Rocy5sZW5ndGggPSBuYmlucztcblx0Zm9yICh2YXIgaT0wO2k8bmJpbnM7aSsrKSB7XG5cdFx0dGhpcy5iaW5zW2ldPVtdO1xuXHRcdHRoaXMuYmluTGVuZ3Roc1tpXT0wO1xuXHR9XG59XG5HcmlkQnJvYWRwaGFzZS5wcm90b3R5cGUgPSBuZXcgQnJvYWRwaGFzZSgpO1xuR3JpZEJyb2FkcGhhc2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR3JpZEJyb2FkcGhhc2U7XG5cbi8qKlxuICogR2V0IGFsbCB0aGUgY29sbGlzaW9uIHBhaXJzIGluIHRoZSBwaHlzaWNzIHdvcmxkXG4gKiBAbWV0aG9kIGNvbGxpc2lvblBhaXJzXG4gKiBAcGFyYW0ge1dvcmxkfSB3b3JsZFxuICogQHBhcmFtIHtBcnJheX0gcGFpcnMxXG4gKiBAcGFyYW0ge0FycmF5fSBwYWlyczJcbiAqL1xudmFyIEdyaWRCcm9hZHBoYXNlX2NvbGxpc2lvblBhaXJzX2QgPSBuZXcgVmVjMygpO1xudmFyIEdyaWRCcm9hZHBoYXNlX2NvbGxpc2lvblBhaXJzX2JpblBvcyA9IG5ldyBWZWMzKCk7XG5HcmlkQnJvYWRwaGFzZS5wcm90b3R5cGUuY29sbGlzaW9uUGFpcnMgPSBmdW5jdGlvbih3b3JsZCxwYWlyczEscGFpcnMyKXtcbiAgICB2YXIgTiA9IHdvcmxkLm51bU9iamVjdHMoKSxcbiAgICAgICAgYm9kaWVzID0gd29ybGQuYm9kaWVzO1xuXG4gICAgdmFyIG1heCA9IHRoaXMuYWFiYk1heCxcbiAgICAgICAgbWluID0gdGhpcy5hYWJiTWluLFxuICAgICAgICBueCA9IHRoaXMubngsXG4gICAgICAgIG55ID0gdGhpcy5ueSxcbiAgICAgICAgbnogPSB0aGlzLm56O1xuXG5cdHZhciB4c3RlcCA9IG55Km56O1xuXHR2YXIgeXN0ZXAgPSBuejtcblx0dmFyIHpzdGVwID0gMTtcblxuICAgIHZhciB4bWF4ID0gbWF4LngsXG4gICAgICAgIHltYXggPSBtYXgueSxcbiAgICAgICAgem1heCA9IG1heC56LFxuICAgICAgICB4bWluID0gbWluLngsXG4gICAgICAgIHltaW4gPSBtaW4ueSxcbiAgICAgICAgem1pbiA9IG1pbi56O1xuXG4gICAgdmFyIHhtdWx0ID0gbnggLyAoeG1heC14bWluKSxcbiAgICAgICAgeW11bHQgPSBueSAvICh5bWF4LXltaW4pLFxuICAgICAgICB6bXVsdCA9IG56IC8gKHptYXgtem1pbik7XG5cbiAgICB2YXIgYmluc2l6ZVggPSAoeG1heCAtIHhtaW4pIC8gbngsXG4gICAgICAgIGJpbnNpemVZID0gKHltYXggLSB5bWluKSAvIG55LFxuICAgICAgICBiaW5zaXplWiA9ICh6bWF4IC0gem1pbikgLyBuejtcblxuXHR2YXIgYmluUmFkaXVzID0gTWF0aC5zcXJ0KGJpbnNpemVYKmJpbnNpemVYICsgYmluc2l6ZVkqYmluc2l6ZVkgKyBiaW5zaXplWipiaW5zaXplWikgKiAwLjU7XG5cbiAgICB2YXIgdHlwZXMgPSBTaGFwZS50eXBlcztcbiAgICB2YXIgU1BIRVJFID0gICAgICAgICAgICB0eXBlcy5TUEhFUkUsXG4gICAgICAgIFBMQU5FID0gICAgICAgICAgICAgdHlwZXMuUExBTkUsXG4gICAgICAgIEJPWCA9ICAgICAgICAgICAgICAgdHlwZXMuQk9YLFxuICAgICAgICBDT01QT1VORCA9ICAgICAgICAgIHR5cGVzLkNPTVBPVU5ELFxuICAgICAgICBDT05WRVhQT0xZSEVEUk9OID0gIHR5cGVzLkNPTlZFWFBPTFlIRURST047XG5cbiAgICB2YXIgYmlucz10aGlzLmJpbnMsXG5cdFx0YmluTGVuZ3Rocz10aGlzLmJpbkxlbmd0aHMsXG4gICAgICAgIE5iaW5zPXRoaXMuYmlucy5sZW5ndGg7XG5cbiAgICAvLyBSZXNldCBiaW5zXG4gICAgZm9yKHZhciBpPTA7IGkhPT1OYmluczsgaSsrKXtcbiAgICAgICAgYmluTGVuZ3Roc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGNlaWwgPSBNYXRoLmNlaWw7XG5cdHZhciBtaW4gPSBNYXRoLm1pbjtcblx0dmFyIG1heCA9IE1hdGgubWF4O1xuXG5cdGZ1bmN0aW9uIGFkZEJveFRvQmlucyh4MCx5MCx6MCx4MSx5MSx6MSxiaSkge1xuXHRcdHZhciB4b2ZmMCA9ICgoeDAgLSB4bWluKSAqIHhtdWx0KXwwLFxuXHRcdFx0eW9mZjAgPSAoKHkwIC0geW1pbikgKiB5bXVsdCl8MCxcblx0XHRcdHpvZmYwID0gKCh6MCAtIHptaW4pICogem11bHQpfDAsXG5cdFx0XHR4b2ZmMSA9IGNlaWwoKHgxIC0geG1pbikgKiB4bXVsdCksXG5cdFx0XHR5b2ZmMSA9IGNlaWwoKHkxIC0geW1pbikgKiB5bXVsdCksXG5cdFx0XHR6b2ZmMSA9IGNlaWwoKHoxIC0gem1pbikgKiB6bXVsdCk7XG5cblx0XHRpZiAoeG9mZjAgPCAwKSB7IHhvZmYwID0gMDsgfSBlbHNlIGlmICh4b2ZmMCA+PSBueCkgeyB4b2ZmMCA9IG54IC0gMTsgfVxuXHRcdGlmICh5b2ZmMCA8IDApIHsgeW9mZjAgPSAwOyB9IGVsc2UgaWYgKHlvZmYwID49IG55KSB7IHlvZmYwID0gbnkgLSAxOyB9XG5cdFx0aWYgKHpvZmYwIDwgMCkgeyB6b2ZmMCA9IDA7IH0gZWxzZSBpZiAoem9mZjAgPj0gbnopIHsgem9mZjAgPSBueiAtIDE7IH1cblx0XHRpZiAoeG9mZjEgPCAwKSB7IHhvZmYxID0gMDsgfSBlbHNlIGlmICh4b2ZmMSA+PSBueCkgeyB4b2ZmMSA9IG54IC0gMTsgfVxuXHRcdGlmICh5b2ZmMSA8IDApIHsgeW9mZjEgPSAwOyB9IGVsc2UgaWYgKHlvZmYxID49IG55KSB7IHlvZmYxID0gbnkgLSAxOyB9XG5cdFx0aWYgKHpvZmYxIDwgMCkgeyB6b2ZmMSA9IDA7IH0gZWxzZSBpZiAoem9mZjEgPj0gbnopIHsgem9mZjEgPSBueiAtIDE7IH1cblxuXHRcdHhvZmYwICo9IHhzdGVwO1xuXHRcdHlvZmYwICo9IHlzdGVwO1xuXHRcdHpvZmYwICo9IHpzdGVwO1xuXHRcdHhvZmYxICo9IHhzdGVwO1xuXHRcdHlvZmYxICo9IHlzdGVwO1xuXHRcdHpvZmYxICo9IHpzdGVwO1xuXG5cdFx0Zm9yICh2YXIgeG9mZiA9IHhvZmYwOyB4b2ZmIDw9IHhvZmYxOyB4b2ZmICs9IHhzdGVwKSB7XG5cdFx0XHRmb3IgKHZhciB5b2ZmID0geW9mZjA7IHlvZmYgPD0geW9mZjE7IHlvZmYgKz0geXN0ZXApIHtcblx0XHRcdFx0Zm9yICh2YXIgem9mZiA9IHpvZmYwOyB6b2ZmIDw9IHpvZmYxOyB6b2ZmICs9IHpzdGVwKSB7XG5cdFx0XHRcdFx0dmFyIGlkeCA9IHhvZmYreW9mZit6b2ZmO1xuXHRcdFx0XHRcdGJpbnNbaWR4XVtiaW5MZW5ndGhzW2lkeF0rK10gPSBiaTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG4gICAgLy8gUHV0IGFsbCBib2RpZXMgaW50byB0aGUgYmluc1xuICAgIGZvcih2YXIgaT0wOyBpIT09TjsgaSsrKXtcbiAgICAgICAgdmFyIGJpID0gYm9kaWVzW2ldO1xuICAgICAgICB2YXIgc2kgPSBiaS5zaGFwZTtcblxuICAgICAgICBzd2l0Y2goc2kudHlwZSl7XG4gICAgICAgIGNhc2UgU1BIRVJFOlxuICAgICAgICAgICAgLy8gUHV0IGluIGJpblxuICAgICAgICAgICAgLy8gY2hlY2sgaWYgb3ZlcmxhcCB3aXRoIG90aGVyIGJpbnNcbiAgICAgICAgICAgIHZhciB4ID0gYmkucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICB5ID0gYmkucG9zaXRpb24ueSxcbiAgICAgICAgICAgICAgICB6ID0gYmkucG9zaXRpb24uejtcbiAgICAgICAgICAgIHZhciByID0gc2kucmFkaXVzO1xuXG5cdFx0XHRhZGRCb3hUb0JpbnMoeC1yLCB5LXIsIHotciwgeCtyLCB5K3IsIHorciwgYmkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQTEFORTpcbiAgICAgICAgICAgIGlmKHNpLndvcmxkTm9ybWFsTmVlZHNVcGRhdGUpe1xuICAgICAgICAgICAgICAgIHNpLmNvbXB1dGVXb3JsZE5vcm1hbChiaS5xdWF0ZXJuaW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwbGFuZU5vcm1hbCA9IHNpLndvcmxkTm9ybWFsO1xuXG5cdFx0XHQvL1JlbGF0aXZlIHBvc2l0aW9uIGZyb20gb3JpZ2luIG9mIHBsYW5lIG9iamVjdCB0byB0aGUgZmlyc3QgYmluXG5cdFx0XHQvL0luY3JlbWVudGVkIGFzIHdlIGl0ZXJhdGUgdGhyb3VnaCB0aGUgYmluc1xuXHRcdFx0dmFyIHhyZXNldCA9IHhtaW4gKyBiaW5zaXplWCowLjUgLSBiaS5wb3NpdGlvbi54LFxuXHRcdFx0XHR5cmVzZXQgPSB5bWluICsgYmluc2l6ZVkqMC41IC0gYmkucG9zaXRpb24ueSxcblx0XHRcdFx0enJlc2V0ID0gem1pbiArIGJpbnNpemVaKjAuNSAtIGJpLnBvc2l0aW9uLno7XG5cbiAgICAgICAgICAgIHZhciBkID0gR3JpZEJyb2FkcGhhc2VfY29sbGlzaW9uUGFpcnNfZDtcblx0XHRcdGQuc2V0KHhyZXNldCwgeXJlc2V0LCB6cmVzZXQpO1xuXG5cdFx0XHRmb3IgKHZhciB4aSA9IDAsIHhvZmYgPSAwOyB4aSAhPT0gbng7IHhpKyssIHhvZmYgKz0geHN0ZXAsIGQueSA9IHlyZXNldCwgZC54ICs9IGJpbnNpemVYKSB7XG5cdFx0XHRcdGZvciAodmFyIHlpID0gMCwgeW9mZiA9IDA7IHlpICE9PSBueTsgeWkrKywgeW9mZiArPSB5c3RlcCwgZC56ID0genJlc2V0LCBkLnkgKz0gYmluc2l6ZVkpIHtcblx0XHRcdFx0XHRmb3IgKHZhciB6aSA9IDAsIHpvZmYgPSAwOyB6aSAhPT0gbno7IHppKyssIHpvZmYgKz0genN0ZXAsIGQueiArPSBiaW5zaXplWikge1xuXHRcdFx0XHRcdFx0aWYgKGQuZG90KHBsYW5lTm9ybWFsKSA8IGJpblJhZGl1cykge1xuXHRcdFx0XHRcdFx0XHR2YXIgaWR4ID0geG9mZiArIHlvZmYgKyB6b2ZmO1xuXHRcdFx0XHRcdFx0XHRiaW5zW2lkeF1bYmluTGVuZ3Roc1tpZHhdKytdID0gYmk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuXHRcdFx0aWYgKGJpLmFhYmJOZWVkc1VwZGF0ZSkge1xuXHRcdFx0XHRiaS5jb21wdXRlQUFCQigpO1xuXHRcdFx0fVxuXG5cdFx0XHRhZGRCb3hUb0JpbnMoXG5cdFx0XHRcdGJpLmFhYmIubG93ZXJCb3VuZC54LFxuXHRcdFx0XHRiaS5hYWJiLmxvd2VyQm91bmQueSxcblx0XHRcdFx0YmkuYWFiYi5sb3dlckJvdW5kLnosXG5cdFx0XHRcdGJpLmFhYmIudXBwZXJCb3VuZC54LFxuXHRcdFx0XHRiaS5hYWJiLnVwcGVyQm91bmQueSxcblx0XHRcdFx0YmkuYWFiYi51cHBlckJvdW5kLnosXG5cdFx0XHRcdGJpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZWFjaCBiaW5cbiAgICBmb3IodmFyIGk9MDsgaSE9PU5iaW5zOyBpKyspe1xuXHRcdHZhciBiaW5MZW5ndGggPSBiaW5MZW5ndGhzW2ldO1xuXHRcdC8vU2tpcCBiaW5zIHdpdGggbm8gcG90ZW50aWFsIGNvbGxpc2lvbnNcblx0XHRpZiAoYmluTGVuZ3RoID4gMSkge1xuXHRcdFx0dmFyIGJpbiA9IGJpbnNbaV07XG5cblx0XHRcdC8vIERvIE5eMiBicm9hZHBoYXNlIGluc2lkZVxuXHRcdFx0Zm9yKHZhciB4aT0wOyB4aSE9PWJpbkxlbmd0aDsgeGkrKyl7XG5cdFx0XHRcdHZhciBiaSA9IGJpblt4aV07XG5cdFx0XHRcdGZvcih2YXIgeWk9MDsgeWkhPT14aTsgeWkrKyl7XG5cdFx0XHRcdFx0dmFyIGJqID0gYmluW3lpXTtcblx0XHRcdFx0XHRpZih0aGlzLm5lZWRCcm9hZHBoYXNlQ29sbGlzaW9uKGJpLGJqKSl7XG5cdFx0XHRcdFx0XHR0aGlzLmludGVyc2VjdGlvblRlc3QoYmksYmoscGFpcnMxLHBhaXJzMik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuICAgIH1cblxuLy9cdGZvciAodmFyIHppID0gMCwgem9mZj0wOyB6aSA8IG56OyB6aSsrLCB6b2ZmKz0genN0ZXApIHtcbi8vXHRcdGNvbnNvbGUubG9nKFwibGF5ZXIgXCIremkpO1xuLy9cdFx0Zm9yICh2YXIgeWkgPSAwLCB5b2ZmPTA7IHlpIDwgbnk7IHlpKyssIHlvZmYgKz0geXN0ZXApIHtcbi8vXHRcdFx0dmFyIHJvdyA9ICcnO1xuLy9cdFx0XHRmb3IgKHZhciB4aSA9IDAsIHhvZmY9MDsgeGkgPCBueDsgeGkrKywgeG9mZiArPSB4c3RlcCkge1xuLy9cdFx0XHRcdHZhciBpZHggPSB4b2ZmICsgeW9mZiArIHpvZmY7XG4vL1x0XHRcdFx0cm93ICs9ICcgJyArIGJpbkxlbmd0aHNbaWR4XTtcbi8vXHRcdFx0fVxuLy9cdFx0XHRjb25zb2xlLmxvZyhyb3cpO1xuLy9cdFx0fVxuLy9cdH1cblxuICAgIHRoaXMubWFrZVBhaXJzVW5pcXVlKHBhaXJzMSxwYWlyczIpO1xufTtcblxufSx7XCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4uL3NoYXBlcy9TaGFwZVwiOjQzLFwiLi9Ccm9hZHBoYXNlXCI6NX1dLDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBOYWl2ZUJyb2FkcGhhc2U7XG5cbnZhciBCcm9hZHBoYXNlID0gX2RlcmVxXygnLi9Ccm9hZHBoYXNlJyk7XG52YXIgQUFCQiA9IF9kZXJlcV8oJy4vQUFCQicpO1xuXG4vKipcbiAqIE5haXZlIGJyb2FkcGhhc2UgaW1wbGVtZW50YXRpb24sIHVzZWQgaW4gbGFjayBvZiBiZXR0ZXIgb25lcy5cbiAqIEBjbGFzcyBOYWl2ZUJyb2FkcGhhc2VcbiAqIEBjb25zdHJ1Y3RvclxuICogQGRlc2NyaXB0aW9uIFRoZSBuYWl2ZSBicm9hZHBoYXNlIGxvb2tzIGF0IGFsbCBwb3NzaWJsZSBwYWlycyB3aXRob3V0IHJlc3RyaWN0aW9uLCB0aGVyZWZvcmUgaXQgaGFzIGNvbXBsZXhpdHkgTl4yICh3aGljaCBpcyBiYWQpXG4gKiBAZXh0ZW5kcyBCcm9hZHBoYXNlXG4gKi9cbmZ1bmN0aW9uIE5haXZlQnJvYWRwaGFzZSgpe1xuICAgIEJyb2FkcGhhc2UuYXBwbHkodGhpcyk7XG59XG5OYWl2ZUJyb2FkcGhhc2UucHJvdG90eXBlID0gbmV3IEJyb2FkcGhhc2UoKTtcbk5haXZlQnJvYWRwaGFzZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBOYWl2ZUJyb2FkcGhhc2U7XG5cbi8qKlxuICogR2V0IGFsbCB0aGUgY29sbGlzaW9uIHBhaXJzIGluIHRoZSBwaHlzaWNzIHdvcmxkXG4gKiBAbWV0aG9kIGNvbGxpc2lvblBhaXJzXG4gKiBAcGFyYW0ge1dvcmxkfSB3b3JsZFxuICogQHBhcmFtIHtBcnJheX0gcGFpcnMxXG4gKiBAcGFyYW0ge0FycmF5fSBwYWlyczJcbiAqL1xuTmFpdmVCcm9hZHBoYXNlLnByb3RvdHlwZS5jb2xsaXNpb25QYWlycyA9IGZ1bmN0aW9uKHdvcmxkLHBhaXJzMSxwYWlyczIpe1xuICAgIHZhciBib2RpZXMgPSB3b3JsZC5ib2RpZXMsXG4gICAgICAgIG4gPSBib2RpZXMubGVuZ3RoLFxuICAgICAgICBpLGosYmksYmo7XG5cbiAgICAvLyBOYWl2ZSBOXjIgZnR3IVxuICAgIGZvcihpPTA7IGkhPT1uOyBpKyspe1xuICAgICAgICBmb3Ioaj0wOyBqIT09aTsgaisrKXtcblxuICAgICAgICAgICAgYmkgPSBib2RpZXNbaV07XG4gICAgICAgICAgICBiaiA9IGJvZGllc1tqXTtcblxuICAgICAgICAgICAgaWYoIXRoaXMubmVlZEJyb2FkcGhhc2VDb2xsaXNpb24oYmksYmopKXtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25UZXN0KGJpLGJqLHBhaXJzMSxwYWlyczIpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxudmFyIHRtcEFBQkIgPSBuZXcgQUFCQigpO1xuXG4vKipcbiAqIFJldHVybnMgYWxsIHRoZSBib2RpZXMgd2l0aGluIGFuIEFBQkIuXG4gKiBAbWV0aG9kIGFhYmJRdWVyeVxuICogQHBhcmFtICB7V29ybGR9IHdvcmxkXG4gKiBAcGFyYW0gIHtBQUJCfSBhYWJiXG4gKiBAcGFyYW0ge2FycmF5fSByZXN1bHQgQW4gYXJyYXkgdG8gc3RvcmUgcmVzdWx0aW5nIGJvZGllcyBpbi5cbiAqIEByZXR1cm4ge2FycmF5fVxuICovXG5OYWl2ZUJyb2FkcGhhc2UucHJvdG90eXBlLmFhYmJRdWVyeSA9IGZ1bmN0aW9uKHdvcmxkLCBhYWJiLCByZXN1bHQpe1xuICAgIHJlc3VsdCA9IHJlc3VsdCB8fCBbXTtcblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB3b3JsZC5ib2RpZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICB2YXIgYiA9IHdvcmxkLmJvZGllc1tpXTtcblxuICAgICAgICBpZihiLmFhYmJOZWVkc1VwZGF0ZSl7XG4gICAgICAgICAgICBiLmNvbXB1dGVBQUJCKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVZ2x5IGhhY2sgdW50aWwgQm9keSBnZXRzIGFhYmJcbiAgICAgICAgaWYoYi5hYWJiLm92ZXJsYXBzKGFhYmIpKXtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG59LHtcIi4vQUFCQlwiOjMsXCIuL0Jyb2FkcGhhc2VcIjo1fV0sODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdENvbGxpc2lvbk1hdHJpeDtcblxuLyoqXG4gKiBSZWNvcmRzIHdoYXQgb2JqZWN0cyBhcmUgY29sbGlkaW5nIHdpdGggZWFjaCBvdGhlclxuICogQGNsYXNzIE9iamVjdENvbGxpc2lvbk1hdHJpeFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE9iamVjdENvbGxpc2lvbk1hdHJpeCgpIHtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXRyaXggc3RvcmFnZVxuICAgICAqIEBwcm9wZXJ0eSBtYXRyaXhcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuXHR0aGlzLm1hdHJpeCA9IHt9O1xufVxuXG4vKipcbiAqIEBtZXRob2QgZ2V0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGlcbiAqIEBwYXJhbSAge051bWJlcn0galxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5PYmplY3RDb2xsaXNpb25NYXRyaXgucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGksIGopIHtcblx0aSA9IGkuaWQ7XG5cdGogPSBqLmlkO1xuICAgIGlmIChqID4gaSkge1xuICAgICAgICB2YXIgdGVtcCA9IGo7XG4gICAgICAgIGogPSBpO1xuICAgICAgICBpID0gdGVtcDtcbiAgICB9XG5cdHJldHVybiBpKyctJytqIGluIHRoaXMubWF0cml4O1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldFxuICogQHBhcmFtICB7TnVtYmVyfSBpXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGpcbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZVxuICovXG5PYmplY3RDb2xsaXNpb25NYXRyaXgucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGksIGosIHZhbHVlKSB7XG5cdGkgPSBpLmlkO1xuXHRqID0gai5pZDtcbiAgICBpZiAoaiA+IGkpIHtcbiAgICAgICAgdmFyIHRlbXAgPSBqO1xuICAgICAgICBqID0gaTtcbiAgICAgICAgaSA9IHRlbXA7XG5cdH1cblx0aWYgKHZhbHVlKSB7XG5cdFx0dGhpcy5tYXRyaXhbaSsnLScral0gPSB0cnVlO1xuXHR9XG5cdGVsc2Uge1xuXHRcdGRlbGV0ZSB0aGlzLm1hdHJpeFtpKyctJytqXTtcblx0fVxufTtcblxuLyoqXG4gKiBFbXB0eSB0aGUgbWF0cml4XG4gKiBAbWV0aG9kIHJlc2V0XG4gKi9cbk9iamVjdENvbGxpc2lvbk1hdHJpeC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcblx0dGhpcy5tYXRyaXggPSB7fTtcbn07XG5cbi8qKlxuICogU2V0IG1heCBudW1iZXIgb2Ygb2JqZWN0c1xuICogQG1ldGhvZCBzZXROdW1PYmplY3RzXG4gKiBAcGFyYW0ge051bWJlcn0gblxuICovXG5PYmplY3RDb2xsaXNpb25NYXRyaXgucHJvdG90eXBlLnNldE51bU9iamVjdHMgPSBmdW5jdGlvbihuKSB7XG59O1xuXG59LHt9XSw5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gUmF5O1xuXG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xudmFyIFF1YXRlcm5pb24gPSBfZGVyZXFfKCcuLi9tYXRoL1F1YXRlcm5pb24nKTtcbnZhciBUcmFuc2Zvcm0gPSBfZGVyZXFfKCcuLi9tYXRoL1RyYW5zZm9ybScpO1xudmFyIENvbnZleFBvbHloZWRyb24gPSBfZGVyZXFfKCcuLi9zaGFwZXMvQ29udmV4UG9seWhlZHJvbicpO1xudmFyIEJveCA9IF9kZXJlcV8oJy4uL3NoYXBlcy9Cb3gnKTtcbnZhciBSYXljYXN0UmVzdWx0ID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL1JheWNhc3RSZXN1bHQnKTtcbnZhciBTaGFwZSA9IF9kZXJlcV8oJy4uL3NoYXBlcy9TaGFwZScpO1xudmFyIEFBQkIgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vQUFCQicpO1xuXG4vKipcbiAqIEEgbGluZSBpbiAzRCBzcGFjZSB0aGF0IGludGVyc2VjdHMgYm9kaWVzIGFuZCByZXR1cm4gcG9pbnRzLlxuICogQGNsYXNzIFJheVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1ZlYzN9IGZyb21cbiAqIEBwYXJhbSB7VmVjM30gdG9cbiAqL1xuZnVuY3Rpb24gUmF5KGZyb20sIHRvKXtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1ZlYzN9IGZyb21cbiAgICAgKi9cbiAgICB0aGlzLmZyb20gPSBmcm9tID8gZnJvbS5jbG9uZSgpIDogbmV3IFZlYzMoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7VmVjM30gdG9cbiAgICAgKi9cbiAgICB0aGlzLnRvID0gdG8gPyB0by5jbG9uZSgpIDogbmV3IFZlYzMoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBfZGlyZWN0aW9uXG4gICAgICovXG4gICAgdGhpcy5fZGlyZWN0aW9uID0gbmV3IFZlYzMoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwcmVjaXNpb24gb2YgdGhlIHJheS4gVXNlZCB3aGVuIGNoZWNraW5nIHBhcmFsbGVsaXR5IGV0Yy5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gcHJlY2lzaW9uXG4gICAgICovXG4gICAgdGhpcy5wcmVjaXNpb24gPSAwLjAwMDE7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3Ugd2FudCB0aGUgUmF5IHRvIHRha2UgLmNvbGxpc2lvblJlc3BvbnNlIGZsYWdzIGludG8gYWNjb3VudCBvbiBib2RpZXMgYW5kIHNoYXBlcy5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGNoZWNrQ29sbGlzaW9uUmVzcG9uc2VcbiAgICAgKi9cbiAgICB0aGlzLmNoZWNrQ29sbGlzaW9uUmVzcG9uc2UgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogSWYgc2V0IHRvIHRydWUsIHRoZSByYXkgc2tpcHMgYW55IGhpdHMgd2l0aCBub3JtYWwuZG90KHJheURpcmVjdGlvbikgPCAwLlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gc2tpcEJhY2tmYWNlc1xuICAgICAqL1xuICAgIHRoaXMuc2tpcEJhY2tmYWNlcyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGNvbGxpc2lvbkZpbHRlck1hc2tcbiAgICAgKiBAZGVmYXVsdCAtMVxuICAgICAqL1xuICAgIHRoaXMuY29sbGlzaW9uRmlsdGVyTWFzayA9IC0xO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGNvbGxpc2lvbkZpbHRlckdyb3VwXG4gICAgICogQGRlZmF1bHQgLTFcbiAgICAgKi9cbiAgICB0aGlzLmNvbGxpc2lvbkZpbHRlckdyb3VwID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW50ZXJzZWN0aW9uIG1vZGUuIFNob3VsZCBiZSBSYXkuQU5ZLCBSYXkuQUxMIG9yIFJheS5DTE9TRVNULlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtb2RlXG4gICAgICovXG4gICAgdGhpcy5tb2RlID0gUmF5LkFOWTtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgcmVzdWx0IG9iamVjdC5cbiAgICAgKiBAcHJvcGVydHkge1JheWNhc3RSZXN1bHR9IHJlc3VsdFxuICAgICAqL1xuICAgIHRoaXMucmVzdWx0ID0gbmV3IFJheWNhc3RSZXN1bHQoKTtcblxuICAgIC8qKlxuICAgICAqIFdpbGwgYmUgc2V0IHRvIHRydWUgZHVyaW5nIGludGVyc2VjdFdvcmxkKCkgaWYgdGhlIHJheSBoaXQgYW55dGhpbmcuXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBoYXNIaXRcbiAgICAgKi9cbiAgICB0aGlzLmhhc0hpdCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCwgdXNlci1wcm92aWRlZCByZXN1bHQgY2FsbGJhY2suIFdpbGwgYmUgdXNlZCBpZiBtb2RlIGlzIFJheS5BTEwuXG4gICAgICogQHByb3BlcnR5IHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICB0aGlzLmNhbGxiYWNrID0gZnVuY3Rpb24ocmVzdWx0KXt9O1xufVxuUmF5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJheTtcblxuUmF5LkNMT1NFU1QgPSAxO1xuUmF5LkFOWSA9IDI7XG5SYXkuQUxMID0gNDtcblxudmFyIHRtcEFBQkIgPSBuZXcgQUFCQigpO1xudmFyIHRtcEFycmF5ID0gW107XG5cbi8qKlxuICogRG8gaXRlcnNlY3Rpb24gYWdhaW5zdCBhbGwgYm9kaWVzIGluIHRoZSBnaXZlbiBXb3JsZC5cbiAqIEBtZXRob2QgaW50ZXJzZWN0V29ybGRcbiAqIEBwYXJhbSAge1dvcmxkfSB3b3JsZFxuICogQHBhcmFtICB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHRoZSByYXkgaGl0IGFueXRoaW5nLCBvdGhlcndpc2UgZmFsc2UuXG4gKi9cblJheS5wcm90b3R5cGUuaW50ZXJzZWN0V29ybGQgPSBmdW5jdGlvbiAod29ybGQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgUmF5LkFOWTtcbiAgICB0aGlzLnJlc3VsdCA9IG9wdGlvbnMucmVzdWx0IHx8IG5ldyBSYXljYXN0UmVzdWx0KCk7XG4gICAgdGhpcy5za2lwQmFja2ZhY2VzID0gISFvcHRpb25zLnNraXBCYWNrZmFjZXM7XG4gICAgdGhpcy5jb2xsaXNpb25GaWx0ZXJNYXNrID0gdHlwZW9mKG9wdGlvbnMuY29sbGlzaW9uRmlsdGVyTWFzaykgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJNYXNrIDogLTE7XG4gICAgdGhpcy5jb2xsaXNpb25GaWx0ZXJHcm91cCA9IHR5cGVvZihvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwKSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwIDogLTE7XG4gICAgaWYob3B0aW9ucy5mcm9tKXtcbiAgICAgICAgdGhpcy5mcm9tLmNvcHkob3B0aW9ucy5mcm9tKTtcbiAgICB9XG4gICAgaWYob3B0aW9ucy50byl7XG4gICAgICAgIHRoaXMudG8uY29weShvcHRpb25zLnRvKTtcbiAgICB9XG4gICAgdGhpcy5jYWxsYmFjayA9IG9wdGlvbnMuY2FsbGJhY2sgfHwgZnVuY3Rpb24oKXt9O1xuICAgIHRoaXMuaGFzSGl0ID0gZmFsc2U7XG5cbiAgICB0aGlzLnJlc3VsdC5yZXNldCgpO1xuICAgIHRoaXMuX3VwZGF0ZURpcmVjdGlvbigpO1xuXG4gICAgdGhpcy5nZXRBQUJCKHRtcEFBQkIpO1xuICAgIHRtcEFycmF5Lmxlbmd0aCA9IDA7XG4gICAgd29ybGQuYnJvYWRwaGFzZS5hYWJiUXVlcnkod29ybGQsIHRtcEFBQkIsIHRtcEFycmF5KTtcbiAgICB0aGlzLmludGVyc2VjdEJvZGllcyh0bXBBcnJheSk7XG5cbiAgICByZXR1cm4gdGhpcy5oYXNIaXQ7XG59O1xuXG52YXIgdjEgPSBuZXcgVmVjMygpLFxuICAgIHYyID0gbmV3IFZlYzMoKTtcblxuLypcbiAqIEFzIHBlciBcIkJhcnljZW50cmljIFRlY2huaXF1ZVwiIGFzIG5hbWVkIGhlcmUgaHR0cDovL3d3dy5ibGFja3Bhd24uY29tL3RleHRzL3BvaW50aW5wb2x5L2RlZmF1bHQuaHRtbCBCdXQgd2l0aG91dCB0aGUgZGl2aXNpb25cbiAqL1xuUmF5LnBvaW50SW5UcmlhbmdsZSA9IHBvaW50SW5UcmlhbmdsZTtcbmZ1bmN0aW9uIHBvaW50SW5UcmlhbmdsZShwLCBhLCBiLCBjKSB7XG4gICAgYy52c3ViKGEsdjApO1xuICAgIGIudnN1YihhLHYxKTtcbiAgICBwLnZzdWIoYSx2Mik7XG5cbiAgICB2YXIgZG90MDAgPSB2MC5kb3QoIHYwICk7XG4gICAgdmFyIGRvdDAxID0gdjAuZG90KCB2MSApO1xuICAgIHZhciBkb3QwMiA9IHYwLmRvdCggdjIgKTtcbiAgICB2YXIgZG90MTEgPSB2MS5kb3QoIHYxICk7XG4gICAgdmFyIGRvdDEyID0gdjEuZG90KCB2MiApO1xuXG4gICAgdmFyIHUsdjtcblxuICAgIHJldHVybiAgKCAodSA9IGRvdDExICogZG90MDIgLSBkb3QwMSAqIGRvdDEyKSA+PSAwICkgJiZcbiAgICAgICAgICAgICggKHYgPSBkb3QwMCAqIGRvdDEyIC0gZG90MDEgKiBkb3QwMikgPj0gMCApICYmXG4gICAgICAgICAgICAoIHUgKyB2IDwgKCBkb3QwMCAqIGRvdDExIC0gZG90MDEgKiBkb3QwMSApICk7XG59XG5cbi8qKlxuICogU2hvb3QgYSByYXkgYXQgYSBib2R5LCBnZXQgYmFjayBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaGl0LlxuICogQG1ldGhvZCBpbnRlcnNlY3RCb2R5XG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCb2R5fSBib2R5XG4gKiBAcGFyYW0ge1JheWNhc3RSZXN1bHR9IFtyZXN1bHRdIERlcHJlY2F0ZWQgLSBzZXQgdGhlIHJlc3VsdCBwcm9wZXJ0eSBvZiB0aGUgUmF5IGluc3RlYWQuXG4gKi9cbnZhciBpbnRlcnNlY3RCb2R5X3hpID0gbmV3IFZlYzMoKTtcbnZhciBpbnRlcnNlY3RCb2R5X3FpID0gbmV3IFF1YXRlcm5pb24oKTtcblJheS5wcm90b3R5cGUuaW50ZXJzZWN0Qm9keSA9IGZ1bmN0aW9uIChib2R5LCByZXN1bHQpIHtcbiAgICBpZihyZXN1bHQpe1xuICAgICAgICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgdGhpcy5fdXBkYXRlRGlyZWN0aW9uKCk7XG4gICAgfVxuICAgIHZhciBjaGVja0NvbGxpc2lvblJlc3BvbnNlID0gdGhpcy5jaGVja0NvbGxpc2lvblJlc3BvbnNlO1xuXG4gICAgaWYoY2hlY2tDb2xsaXNpb25SZXNwb25zZSAmJiAhYm9keS5jb2xsaXNpb25SZXNwb25zZSl7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZigodGhpcy5jb2xsaXNpb25GaWx0ZXJHcm91cCAmIGJvZHkuY29sbGlzaW9uRmlsdGVyTWFzayk9PT0wIHx8IChib2R5LmNvbGxpc2lvbkZpbHRlckdyb3VwICYgdGhpcy5jb2xsaXNpb25GaWx0ZXJNYXNrKT09PTApe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHhpID0gaW50ZXJzZWN0Qm9keV94aTtcbiAgICB2YXIgcWkgPSBpbnRlcnNlY3RCb2R5X3FpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIE4gPSBib2R5LnNoYXBlcy5sZW5ndGg7IGkgPCBOOyBpKyspIHtcbiAgICAgICAgdmFyIHNoYXBlID0gYm9keS5zaGFwZXNbaV07XG5cbiAgICAgICAgaWYoY2hlY2tDb2xsaXNpb25SZXNwb25zZSAmJiAhc2hhcGUuY29sbGlzaW9uUmVzcG9uc2Upe1xuICAgICAgICAgICAgY29udGludWU7IC8vIFNraXBcbiAgICAgICAgfVxuXG4gICAgICAgIGJvZHkucXVhdGVybmlvbi5tdWx0KGJvZHkuc2hhcGVPcmllbnRhdGlvbnNbaV0sIHFpKTtcbiAgICAgICAgYm9keS5xdWF0ZXJuaW9uLnZtdWx0KGJvZHkuc2hhcGVPZmZzZXRzW2ldLCB4aSk7XG4gICAgICAgIHhpLnZhZGQoYm9keS5wb3NpdGlvbiwgeGkpO1xuXG4gICAgICAgIHRoaXMuaW50ZXJzZWN0U2hhcGUoXG4gICAgICAgICAgICBzaGFwZSxcbiAgICAgICAgICAgIHFpLFxuICAgICAgICAgICAgeGksXG4gICAgICAgICAgICBib2R5XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYodGhpcy5yZXN1bHQuX3Nob3VsZFN0b3Ape1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKipcbiAqIEBtZXRob2QgaW50ZXJzZWN0Qm9kaWVzXG4gKiBAcGFyYW0ge0FycmF5fSBib2RpZXMgQW4gYXJyYXkgb2YgQm9keSBvYmplY3RzLlxuICogQHBhcmFtIHtSYXljYXN0UmVzdWx0fSBbcmVzdWx0XSBEZXByZWNhdGVkXG4gKi9cblJheS5wcm90b3R5cGUuaW50ZXJzZWN0Qm9kaWVzID0gZnVuY3Rpb24gKGJvZGllcywgcmVzdWx0KSB7XG4gICAgaWYocmVzdWx0KXtcbiAgICAgICAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgIHRoaXMuX3VwZGF0ZURpcmVjdGlvbigpO1xuICAgIH1cblxuICAgIGZvciAoIHZhciBpID0gMCwgbCA9IGJvZGllcy5sZW5ndGg7ICF0aGlzLnJlc3VsdC5fc2hvdWxkU3RvcCAmJiBpIDwgbDsgaSArKyApIHtcbiAgICAgICAgdGhpcy5pbnRlcnNlY3RCb2R5KGJvZGllc1tpXSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSBfZGlyZWN0aW9uIHZlY3Rvci5cbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIF91cGRhdGVEaXJlY3Rpb25cbiAqL1xuUmF5LnByb3RvdHlwZS5fdXBkYXRlRGlyZWN0aW9uID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLnRvLnZzdWIodGhpcy5mcm9tLCB0aGlzLl9kaXJlY3Rpb24pO1xuICAgIHRoaXMuX2RpcmVjdGlvbi5ub3JtYWxpemUoKTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpbnRlcnNlY3RTaGFwZVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7U2hhcGV9IHNoYXBlXG4gKiBAcGFyYW0ge1F1YXRlcm5pb259IHF1YXRcbiAqIEBwYXJhbSB7VmVjM30gcG9zaXRpb25cbiAqIEBwYXJhbSB7Qm9keX0gYm9keVxuICovXG5SYXkucHJvdG90eXBlLmludGVyc2VjdFNoYXBlID0gZnVuY3Rpb24oc2hhcGUsIHF1YXQsIHBvc2l0aW9uLCBib2R5KXtcbiAgICB2YXIgZnJvbSA9IHRoaXMuZnJvbTtcblxuXG4gICAgLy8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmVcbiAgICB2YXIgZGlzdGFuY2UgPSBkaXN0YW5jZUZyb21JbnRlcnNlY3Rpb24oZnJvbSwgdGhpcy5fZGlyZWN0aW9uLCBwb3NpdGlvbik7XG4gICAgaWYgKCBkaXN0YW5jZSA+IHNoYXBlLmJvdW5kaW5nU3BoZXJlUmFkaXVzICkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGludGVyc2VjdE1ldGhvZCA9IHRoaXNbc2hhcGUudHlwZV07XG4gICAgaWYoaW50ZXJzZWN0TWV0aG9kKXtcbiAgICAgICAgaW50ZXJzZWN0TWV0aG9kLmNhbGwodGhpcywgc2hhcGUsIHF1YXQsIHBvc2l0aW9uLCBib2R5KTtcbiAgICB9XG59O1xuXG52YXIgdmVjdG9yID0gbmV3IFZlYzMoKTtcbnZhciBub3JtYWwgPSBuZXcgVmVjMygpO1xudmFyIGludGVyc2VjdFBvaW50ID0gbmV3IFZlYzMoKTtcblxudmFyIGEgPSBuZXcgVmVjMygpO1xudmFyIGIgPSBuZXcgVmVjMygpO1xudmFyIGMgPSBuZXcgVmVjMygpO1xudmFyIGQgPSBuZXcgVmVjMygpO1xuXG52YXIgdG1wUmF5Y2FzdFJlc3VsdCA9IG5ldyBSYXljYXN0UmVzdWx0KCk7XG5cbi8qKlxuICogQG1ldGhvZCBpbnRlcnNlY3RCb3hcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtTaGFwZX0gc2hhcGVcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHF1YXRcbiAqIEBwYXJhbSAge1ZlYzN9IHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtCb2R5fSBib2R5XG4gKi9cblJheS5wcm90b3R5cGUuaW50ZXJzZWN0Qm94ID0gZnVuY3Rpb24oc2hhcGUsIHF1YXQsIHBvc2l0aW9uLCBib2R5KXtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3RDb252ZXgoc2hhcGUuY29udmV4UG9seWhlZHJvblJlcHJlc2VudGF0aW9uLCBxdWF0LCBwb3NpdGlvbiwgYm9keSk7XG59O1xuUmF5LnByb3RvdHlwZVtTaGFwZS50eXBlcy5CT1hdID0gUmF5LnByb3RvdHlwZS5pbnRlcnNlY3RCb3g7XG5cbi8qKlxuICogQG1ldGhvZCBpbnRlcnNlY3RQbGFuZVxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge1NoYXBlfSBzaGFwZVxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gcXVhdFxuICogQHBhcmFtICB7VmVjM30gcG9zaXRpb25cbiAqIEBwYXJhbSAge0JvZHl9IGJvZHlcbiAqL1xuUmF5LnByb3RvdHlwZS5pbnRlcnNlY3RQbGFuZSA9IGZ1bmN0aW9uKHNoYXBlLCBxdWF0LCBwb3NpdGlvbiwgYm9keSl7XG4gICAgdmFyIGZyb20gPSB0aGlzLmZyb207XG4gICAgdmFyIHRvID0gdGhpcy50bztcbiAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5fZGlyZWN0aW9uO1xuXG4gICAgLy8gR2V0IHBsYW5lIG5vcm1hbFxuICAgIHZhciB3b3JsZE5vcm1hbCA9IG5ldyBWZWMzKDAsIDAsIDEpO1xuICAgIHF1YXQudm11bHQod29ybGROb3JtYWwsIHdvcmxkTm9ybWFsKTtcblxuICAgIHZhciBsZW4gPSBuZXcgVmVjMygpO1xuICAgIGZyb20udnN1Yihwb3NpdGlvbiwgbGVuKTtcbiAgICB2YXIgcGxhbmVUb0Zyb20gPSBsZW4uZG90KHdvcmxkTm9ybWFsKTtcbiAgICB0by52c3ViKHBvc2l0aW9uLCBsZW4pO1xuICAgIHZhciBwbGFuZVRvVG8gPSBsZW4uZG90KHdvcmxkTm9ybWFsKTtcblxuICAgIGlmKHBsYW5lVG9Gcm9tICogcGxhbmVUb1RvID4gMCl7XG4gICAgICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgYXJlIG9uIHRoZSBzYW1lIHNpZGUgb2YgdGhlIHBsYW5lLi4uIGJhaWwgb3V0XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZihmcm9tLmRpc3RhbmNlVG8odG8pIDwgcGxhbmVUb0Zyb20pe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5fZG90X2RpciA9IHdvcmxkTm9ybWFsLmRvdChkaXJlY3Rpb24pO1xuXG4gICAgaWYgKE1hdGguYWJzKG5fZG90X2RpcikgPCB0aGlzLnByZWNpc2lvbikge1xuICAgICAgICAvLyBObyBpbnRlcnNlY3Rpb25cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwbGFuZVBvaW50VG9Gcm9tID0gbmV3IFZlYzMoKTtcbiAgICB2YXIgZGlyX3NjYWxlZF93aXRoX3QgPSBuZXcgVmVjMygpO1xuICAgIHZhciBoaXRQb2ludFdvcmxkID0gbmV3IFZlYzMoKTtcblxuICAgIGZyb20udnN1Yihwb3NpdGlvbiwgcGxhbmVQb2ludFRvRnJvbSk7XG4gICAgdmFyIHQgPSAtd29ybGROb3JtYWwuZG90KHBsYW5lUG9pbnRUb0Zyb20pIC8gbl9kb3RfZGlyO1xuICAgIGRpcmVjdGlvbi5zY2FsZSh0LCBkaXJfc2NhbGVkX3dpdGhfdCk7XG4gICAgZnJvbS52YWRkKGRpcl9zY2FsZWRfd2l0aF90LCBoaXRQb2ludFdvcmxkKTtcblxuICAgIHRoaXMucmVwb3J0SW50ZXJzZWN0aW9uKHdvcmxkTm9ybWFsLCBoaXRQb2ludFdvcmxkLCBzaGFwZSwgYm9keSwgLTEpO1xufTtcblJheS5wcm90b3R5cGVbU2hhcGUudHlwZXMuUExBTkVdID0gUmF5LnByb3RvdHlwZS5pbnRlcnNlY3RQbGFuZTtcblxuLyoqXG4gKiBHZXQgdGhlIHdvcmxkIEFBQkIgb2YgdGhlIHJheS5cbiAqIEBtZXRob2QgZ2V0QUFCQlxuICogQHBhcmFtICB7QUFCQn0gYWFiYlxuICovXG5SYXkucHJvdG90eXBlLmdldEFBQkIgPSBmdW5jdGlvbihyZXN1bHQpe1xuICAgIHZhciB0byA9IHRoaXMudG87XG4gICAgdmFyIGZyb20gPSB0aGlzLmZyb207XG4gICAgcmVzdWx0Lmxvd2VyQm91bmQueCA9IE1hdGgubWluKHRvLngsIGZyb20ueCk7XG4gICAgcmVzdWx0Lmxvd2VyQm91bmQueSA9IE1hdGgubWluKHRvLnksIGZyb20ueSk7XG4gICAgcmVzdWx0Lmxvd2VyQm91bmQueiA9IE1hdGgubWluKHRvLnosIGZyb20ueik7XG4gICAgcmVzdWx0LnVwcGVyQm91bmQueCA9IE1hdGgubWF4KHRvLngsIGZyb20ueCk7XG4gICAgcmVzdWx0LnVwcGVyQm91bmQueSA9IE1hdGgubWF4KHRvLnksIGZyb20ueSk7XG4gICAgcmVzdWx0LnVwcGVyQm91bmQueiA9IE1hdGgubWF4KHRvLnosIGZyb20ueik7XG59O1xuXG52YXIgaW50ZXJzZWN0Q29udmV4T3B0aW9ucyA9IHtcbiAgICBmYWNlTGlzdDogWzBdXG59O1xuXG4vKipcbiAqIEBtZXRob2QgaW50ZXJzZWN0SGVpZ2h0ZmllbGRcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtTaGFwZX0gc2hhcGVcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHF1YXRcbiAqIEBwYXJhbSAge1ZlYzN9IHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtCb2R5fSBib2R5XG4gKi9cblJheS5wcm90b3R5cGUuaW50ZXJzZWN0SGVpZ2h0ZmllbGQgPSBmdW5jdGlvbihzaGFwZSwgcXVhdCwgcG9zaXRpb24sIGJvZHkpe1xuICAgIHZhciBkYXRhID0gc2hhcGUuZGF0YSxcbiAgICAgICAgdyA9IHNoYXBlLmVsZW1lbnRTaXplLFxuICAgICAgICB3b3JsZFBpbGxhck9mZnNldCA9IG5ldyBWZWMzKCk7XG5cbiAgICAvLyBDb252ZXJ0IHRoZSByYXkgdG8gbG9jYWwgaGVpZ2h0ZmllbGQgY29vcmRpbmF0ZXNcbiAgICB2YXIgbG9jYWxSYXkgPSBuZXcgUmF5KHRoaXMuZnJvbSwgdGhpcy50byk7XG4gICAgVHJhbnNmb3JtLnBvaW50VG9Mb2NhbEZyYW1lKHBvc2l0aW9uLCBxdWF0LCBsb2NhbFJheS5mcm9tLCBsb2NhbFJheS5mcm9tKTtcbiAgICBUcmFuc2Zvcm0ucG9pbnRUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXQsIGxvY2FsUmF5LnRvLCBsb2NhbFJheS50byk7XG5cbiAgICAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkYXRhIHBvaW50cyB0byB0ZXN0IGFnYWluc3RcbiAgICB2YXIgaW5kZXggPSBbXTtcbiAgICB2YXIgaU1pblggPSBudWxsO1xuICAgIHZhciBpTWluWSA9IG51bGw7XG4gICAgdmFyIGlNYXhYID0gbnVsbDtcbiAgICB2YXIgaU1heFkgPSBudWxsO1xuXG4gICAgdmFyIGluc2lkZSA9IHNoYXBlLmdldEluZGV4T2ZQb3NpdGlvbihsb2NhbFJheS5mcm9tLngsIGxvY2FsUmF5LmZyb20ueSwgaW5kZXgsIGZhbHNlKTtcbiAgICBpZihpbnNpZGUpe1xuICAgICAgICBpTWluWCA9IGluZGV4WzBdO1xuICAgICAgICBpTWluWSA9IGluZGV4WzFdO1xuICAgICAgICBpTWF4WCA9IGluZGV4WzBdO1xuICAgICAgICBpTWF4WSA9IGluZGV4WzFdO1xuICAgIH1cbiAgICBpbnNpZGUgPSBzaGFwZS5nZXRJbmRleE9mUG9zaXRpb24obG9jYWxSYXkudG8ueCwgbG9jYWxSYXkudG8ueSwgaW5kZXgsIGZhbHNlKTtcbiAgICBpZihpbnNpZGUpe1xuICAgICAgICBpZiAoaU1pblggPT09IG51bGwgfHwgaW5kZXhbMF0gPCBpTWluWCkgeyBpTWluWCA9IGluZGV4WzBdOyB9XG4gICAgICAgIGlmIChpTWF4WCA9PT0gbnVsbCB8fCBpbmRleFswXSA+IGlNYXhYKSB7IGlNYXhYID0gaW5kZXhbMF07IH1cbiAgICAgICAgaWYgKGlNaW5ZID09PSBudWxsIHx8IGluZGV4WzFdIDwgaU1pblkpIHsgaU1pblkgPSBpbmRleFsxXTsgfVxuICAgICAgICBpZiAoaU1heFkgPT09IG51bGwgfHwgaW5kZXhbMV0gPiBpTWF4WSkgeyBpTWF4WSA9IGluZGV4WzFdOyB9XG4gICAgfVxuXG4gICAgaWYoaU1pblggPT09IG51bGwpe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG1pbk1heCA9IFtdO1xuICAgIHNoYXBlLmdldFJlY3RNaW5NYXgoaU1pblgsIGlNaW5ZLCBpTWF4WCwgaU1heFksIG1pbk1heCk7XG4gICAgdmFyIG1pbiA9IG1pbk1heFswXTtcbiAgICB2YXIgbWF4ID0gbWluTWF4WzFdO1xuXG4gICAgLy8gLy8gQmFpbCBvdXQgaWYgdGhlIHJheSBjYW4ndCB0b3VjaCB0aGUgYm91bmRpbmcgYm94XG4gICAgLy8gLy8gVE9ET1xuICAgIC8vIHZhciBhYWJiID0gbmV3IEFBQkIoKTtcbiAgICAvLyB0aGlzLmdldEFBQkIoYWFiYik7XG4gICAgLy8gaWYoYWFiYi5pbnRlcnNlY3RzKCkpe1xuICAgIC8vICAgICByZXR1cm47XG4gICAgLy8gfVxuXG4gICAgZm9yKHZhciBpID0gaU1pblg7IGkgPD0gaU1heFg7IGkrKyl7XG4gICAgICAgIGZvcih2YXIgaiA9IGlNaW5ZOyBqIDw9IGlNYXhZOyBqKyspe1xuXG4gICAgICAgICAgICBpZih0aGlzLnJlc3VsdC5fc2hvdWxkU3RvcCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMb3dlciB0cmlhbmdsZVxuICAgICAgICAgICAgc2hhcGUuZ2V0Q29udmV4VHJpYW5nbGVQaWxsYXIoaSwgaiwgZmFsc2UpO1xuICAgICAgICAgICAgVHJhbnNmb3JtLnBvaW50VG9Xb3JsZEZyYW1lKHBvc2l0aW9uLCBxdWF0LCBzaGFwZS5waWxsYXJPZmZzZXQsIHdvcmxkUGlsbGFyT2Zmc2V0KTtcbiAgICAgICAgICAgIHRoaXMuaW50ZXJzZWN0Q29udmV4KHNoYXBlLnBpbGxhckNvbnZleCwgcXVhdCwgd29ybGRQaWxsYXJPZmZzZXQsIGJvZHksIGludGVyc2VjdENvbnZleE9wdGlvbnMpO1xuXG4gICAgICAgICAgICBpZih0aGlzLnJlc3VsdC5fc2hvdWxkU3RvcCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcHBlciB0cmlhbmdsZVxuICAgICAgICAgICAgc2hhcGUuZ2V0Q29udmV4VHJpYW5nbGVQaWxsYXIoaSwgaiwgdHJ1ZSk7XG4gICAgICAgICAgICBUcmFuc2Zvcm0ucG9pbnRUb1dvcmxkRnJhbWUocG9zaXRpb24sIHF1YXQsIHNoYXBlLnBpbGxhck9mZnNldCwgd29ybGRQaWxsYXJPZmZzZXQpO1xuICAgICAgICAgICAgdGhpcy5pbnRlcnNlY3RDb252ZXgoc2hhcGUucGlsbGFyQ29udmV4LCBxdWF0LCB3b3JsZFBpbGxhck9mZnNldCwgYm9keSwgaW50ZXJzZWN0Q29udmV4T3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuUmF5LnByb3RvdHlwZVtTaGFwZS50eXBlcy5IRUlHSFRGSUVMRF0gPSBSYXkucHJvdG90eXBlLmludGVyc2VjdEhlaWdodGZpZWxkO1xuXG52YXIgUmF5X2ludGVyc2VjdFNwaGVyZV9pbnRlcnNlY3Rpb25Qb2ludCA9IG5ldyBWZWMzKCk7XG52YXIgUmF5X2ludGVyc2VjdFNwaGVyZV9ub3JtYWwgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIEBtZXRob2QgaW50ZXJzZWN0U3BoZXJlXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtICB7U2hhcGV9IHNoYXBlXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxdWF0XG4gKiBAcGFyYW0gIHtWZWMzfSBwb3NpdGlvblxuICogQHBhcmFtICB7Qm9keX0gYm9keVxuICovXG5SYXkucHJvdG90eXBlLmludGVyc2VjdFNwaGVyZSA9IGZ1bmN0aW9uKHNoYXBlLCBxdWF0LCBwb3NpdGlvbiwgYm9keSl7XG4gICAgdmFyIGZyb20gPSB0aGlzLmZyb20sXG4gICAgICAgIHRvID0gdGhpcy50byxcbiAgICAgICAgciA9IHNoYXBlLnJhZGl1cztcblxuICAgIHZhciBhID0gTWF0aC5wb3codG8ueCAtIGZyb20ueCwgMikgKyBNYXRoLnBvdyh0by55IC0gZnJvbS55LCAyKSArIE1hdGgucG93KHRvLnogLSBmcm9tLnosIDIpO1xuICAgIHZhciBiID0gMiAqICgodG8ueCAtIGZyb20ueCkgKiAoZnJvbS54IC0gcG9zaXRpb24ueCkgKyAodG8ueSAtIGZyb20ueSkgKiAoZnJvbS55IC0gcG9zaXRpb24ueSkgKyAodG8ueiAtIGZyb20ueikgKiAoZnJvbS56IC0gcG9zaXRpb24ueikpO1xuICAgIHZhciBjID0gTWF0aC5wb3coZnJvbS54IC0gcG9zaXRpb24ueCwgMikgKyBNYXRoLnBvdyhmcm9tLnkgLSBwb3NpdGlvbi55LCAyKSArIE1hdGgucG93KGZyb20ueiAtIHBvc2l0aW9uLnosIDIpIC0gTWF0aC5wb3cociwgMik7XG5cbiAgICB2YXIgZGVsdGEgPSBNYXRoLnBvdyhiLCAyKSAtIDQgKiBhICogYztcblxuICAgIHZhciBpbnRlcnNlY3Rpb25Qb2ludCA9IFJheV9pbnRlcnNlY3RTcGhlcmVfaW50ZXJzZWN0aW9uUG9pbnQ7XG4gICAgdmFyIG5vcm1hbCA9IFJheV9pbnRlcnNlY3RTcGhlcmVfbm9ybWFsO1xuXG4gICAgaWYoZGVsdGEgPCAwKXtcbiAgICAgICAgLy8gTm8gaW50ZXJzZWN0aW9uXG4gICAgICAgIHJldHVybjtcblxuICAgIH0gZWxzZSBpZihkZWx0YSA9PT0gMCl7XG4gICAgICAgIC8vIHNpbmdsZSBpbnRlcnNlY3Rpb24gcG9pbnRcbiAgICAgICAgZnJvbS5sZXJwKHRvLCBkZWx0YSwgaW50ZXJzZWN0aW9uUG9pbnQpO1xuXG4gICAgICAgIGludGVyc2VjdGlvblBvaW50LnZzdWIocG9zaXRpb24sIG5vcm1hbCk7XG4gICAgICAgIG5vcm1hbC5ub3JtYWxpemUoKTtcblxuICAgICAgICB0aGlzLnJlcG9ydEludGVyc2VjdGlvbihub3JtYWwsIGludGVyc2VjdGlvblBvaW50LCBzaGFwZSwgYm9keSwgLTEpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGQxID0gKC0gYiAtIE1hdGguc3FydChkZWx0YSkpIC8gKDIgKiBhKTtcbiAgICAgICAgdmFyIGQyID0gKC0gYiArIE1hdGguc3FydChkZWx0YSkpIC8gKDIgKiBhKTtcblxuICAgICAgICBpZihkMSA+PSAwICYmIGQxIDw9IDEpe1xuICAgICAgICAgICAgZnJvbS5sZXJwKHRvLCBkMSwgaW50ZXJzZWN0aW9uUG9pbnQpO1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQudnN1Yihwb3NpdGlvbiwgbm9ybWFsKTtcbiAgICAgICAgICAgIG5vcm1hbC5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0SW50ZXJzZWN0aW9uKG5vcm1hbCwgaW50ZXJzZWN0aW9uUG9pbnQsIHNoYXBlLCBib2R5LCAtMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0aGlzLnJlc3VsdC5fc2hvdWxkU3RvcCl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZihkMiA+PSAwICYmIGQyIDw9IDEpe1xuICAgICAgICAgICAgZnJvbS5sZXJwKHRvLCBkMiwgaW50ZXJzZWN0aW9uUG9pbnQpO1xuICAgICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnQudnN1Yihwb3NpdGlvbiwgbm9ybWFsKTtcbiAgICAgICAgICAgIG5vcm1hbC5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIHRoaXMucmVwb3J0SW50ZXJzZWN0aW9uKG5vcm1hbCwgaW50ZXJzZWN0aW9uUG9pbnQsIHNoYXBlLCBib2R5LCAtMSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuUmF5LnByb3RvdHlwZVtTaGFwZS50eXBlcy5TUEhFUkVdID0gUmF5LnByb3RvdHlwZS5pbnRlcnNlY3RTcGhlcmU7XG5cblxudmFyIGludGVyc2VjdENvbnZleF9ub3JtYWwgPSBuZXcgVmVjMygpO1xudmFyIGludGVyc2VjdENvbnZleF9taW5EaXN0Tm9ybWFsID0gbmV3IFZlYzMoKTtcbnZhciBpbnRlcnNlY3RDb252ZXhfbWluRGlzdEludGVyc2VjdCA9IG5ldyBWZWMzKCk7XG52YXIgaW50ZXJzZWN0Q29udmV4X3ZlY3RvciA9IG5ldyBWZWMzKCk7XG5cbi8qKlxuICogQG1ldGhvZCBpbnRlcnNlY3RDb252ZXhcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtTaGFwZX0gc2hhcGVcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHF1YXRcbiAqIEBwYXJhbSAge1ZlYzN9IHBvc2l0aW9uXG4gKiBAcGFyYW0gIHtCb2R5fSBib2R5XG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2FycmF5fSBbb3B0aW9ucy5mYWNlTGlzdF1cbiAqL1xuUmF5LnByb3RvdHlwZS5pbnRlcnNlY3RDb252ZXggPSBmdW5jdGlvbiBpbnRlcnNlY3RDb252ZXgoXG4gICAgc2hhcGUsXG4gICAgcXVhdCxcbiAgICBwb3NpdGlvbixcbiAgICBib2R5LFxuICAgIG9wdGlvbnNcbil7XG4gICAgdmFyIG1pbkRpc3ROb3JtYWwgPSBpbnRlcnNlY3RDb252ZXhfbWluRGlzdE5vcm1hbDtcbiAgICB2YXIgbm9ybWFsID0gaW50ZXJzZWN0Q29udmV4X25vcm1hbDtcbiAgICB2YXIgdmVjdG9yID0gaW50ZXJzZWN0Q29udmV4X3ZlY3RvcjtcbiAgICB2YXIgbWluRGlzdEludGVyc2VjdCA9IGludGVyc2VjdENvbnZleF9taW5EaXN0SW50ZXJzZWN0O1xuICAgIHZhciBmYWNlTGlzdCA9IChvcHRpb25zICYmIG9wdGlvbnMuZmFjZUxpc3QpIHx8IG51bGw7XG5cbiAgICAvLyBDaGVja2luZyBmYWNlc1xuICAgIHZhciBmYWNlcyA9IHNoYXBlLmZhY2VzLFxuICAgICAgICB2ZXJ0aWNlcyA9IHNoYXBlLnZlcnRpY2VzLFxuICAgICAgICBub3JtYWxzID0gc2hhcGUuZmFjZU5vcm1hbHM7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMuX2RpcmVjdGlvbjtcblxuICAgIHZhciBmcm9tID0gdGhpcy5mcm9tO1xuICAgIHZhciB0byA9IHRoaXMudG87XG4gICAgdmFyIGZyb21Ub0Rpc3RhbmNlID0gZnJvbS5kaXN0YW5jZVRvKHRvKTtcblxuICAgIHZhciBtaW5EaXN0ID0gLTE7XG4gICAgdmFyIE5mYWNlcyA9IGZhY2VMaXN0ID8gZmFjZUxpc3QubGVuZ3RoIDogZmFjZXMubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdDtcblxuICAgIGZvciAodmFyIGogPSAwOyAhcmVzdWx0Ll9zaG91bGRTdG9wICYmIGogPCBOZmFjZXM7IGorKykge1xuICAgICAgICB2YXIgZmkgPSBmYWNlTGlzdCA/IGZhY2VMaXN0W2pdIDogajtcblxuICAgICAgICB2YXIgZmFjZSA9IGZhY2VzW2ZpXTtcbiAgICAgICAgdmFyIGZhY2VOb3JtYWwgPSBub3JtYWxzW2ZpXTtcbiAgICAgICAgdmFyIHEgPSBxdWF0O1xuICAgICAgICB2YXIgeCA9IHBvc2l0aW9uO1xuXG4gICAgICAgIC8vIGRldGVybWluZSBpZiByYXkgaW50ZXJzZWN0cyB0aGUgcGxhbmUgb2YgdGhlIGZhY2VcbiAgICAgICAgLy8gbm90ZTogdGhpcyB3b3JrcyByZWdhcmRsZXNzIG9mIHRoZSBkaXJlY3Rpb24gb2YgdGhlIGZhY2Ugbm9ybWFsXG5cbiAgICAgICAgLy8gR2V0IHBsYW5lIHBvaW50IGluIHdvcmxkIGNvb3JkaW5hdGVzLi4uXG4gICAgICAgIHZlY3Rvci5jb3B5KHZlcnRpY2VzW2ZhY2VbMF1dKTtcbiAgICAgICAgcS52bXVsdCh2ZWN0b3IsdmVjdG9yKTtcbiAgICAgICAgdmVjdG9yLnZhZGQoeCx2ZWN0b3IpO1xuXG4gICAgICAgIC8vIC4uLmJ1dCBtYWtlIGl0IHJlbGF0aXZlIHRvIHRoZSByYXkgZnJvbS4gV2UnbGwgZml4IHRoaXMgbGF0ZXIuXG4gICAgICAgIHZlY3Rvci52c3ViKGZyb20sdmVjdG9yKTtcblxuICAgICAgICAvLyBHZXQgcGxhbmUgbm9ybWFsXG4gICAgICAgIHEudm11bHQoZmFjZU5vcm1hbCxub3JtYWwpO1xuXG4gICAgICAgIC8vIElmIHRoaXMgZG90IHByb2R1Y3QgaXMgbmVnYXRpdmUsIHdlIGhhdmUgc29tZXRoaW5nIGludGVyZXN0aW5nXG4gICAgICAgIHZhciBkb3QgPSBkaXJlY3Rpb24uZG90KG5vcm1hbCk7XG5cbiAgICAgICAgLy8gQmFpbCBvdXQgaWYgcmF5IGFuZCBwbGFuZSBhcmUgcGFyYWxsZWxcbiAgICAgICAgaWYgKCBNYXRoLmFicyggZG90ICkgPCB0aGlzLnByZWNpc2lvbiApe1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjYWxjIGRpc3RhbmNlIHRvIHBsYW5lXG4gICAgICAgIHZhciBzY2FsYXIgPSBub3JtYWwuZG90KHZlY3RvcikgLyBkb3Q7XG5cbiAgICAgICAgLy8gaWYgbmVnYXRpdmUgZGlzdGFuY2UsIHRoZW4gcGxhbmUgaXMgYmVoaW5kIHJheVxuICAgICAgICBpZiAoc2NhbGFyIDwgMCl7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIChkb3QgPCAwKSB7XG5cbiAgICAgICAgLy8gSW50ZXJzZWN0aW9uIHBvaW50IGlzIGZyb20gKyBkaXJlY3Rpb24gKiBzY2FsYXJcbiAgICAgICAgZGlyZWN0aW9uLm11bHQoc2NhbGFyLGludGVyc2VjdFBvaW50KTtcbiAgICAgICAgaW50ZXJzZWN0UG9pbnQudmFkZChmcm9tLGludGVyc2VjdFBvaW50KTtcblxuICAgICAgICAvLyBhIGlzIHRoZSBwb2ludCB3ZSBjb21wYXJlIHBvaW50cyBiIGFuZCBjIHdpdGguXG4gICAgICAgIGEuY29weSh2ZXJ0aWNlc1tmYWNlWzBdXSk7XG4gICAgICAgIHEudm11bHQoYSxhKTtcbiAgICAgICAgeC52YWRkKGEsYSk7XG5cbiAgICAgICAgZm9yKHZhciBpID0gMTsgIXJlc3VsdC5fc2hvdWxkU3RvcCAmJiBpIDwgZmFjZS5sZW5ndGggLSAxOyBpKyspe1xuICAgICAgICAgICAgLy8gVHJhbnNmb3JtIDMgdmVydGljZXMgdG8gd29ybGQgY29vcmRzXG4gICAgICAgICAgICBiLmNvcHkodmVydGljZXNbZmFjZVtpXV0pO1xuICAgICAgICAgICAgYy5jb3B5KHZlcnRpY2VzW2ZhY2VbaSsxXV0pO1xuICAgICAgICAgICAgcS52bXVsdChiLGIpO1xuICAgICAgICAgICAgcS52bXVsdChjLGMpO1xuICAgICAgICAgICAgeC52YWRkKGIsYik7XG4gICAgICAgICAgICB4LnZhZGQoYyxjKTtcblxuICAgICAgICAgICAgdmFyIGRpc3RhbmNlID0gaW50ZXJzZWN0UG9pbnQuZGlzdGFuY2VUbyhmcm9tKTtcblxuICAgICAgICAgICAgaWYoIShwb2ludEluVHJpYW5nbGUoaW50ZXJzZWN0UG9pbnQsIGEsIGIsIGMpIHx8IHBvaW50SW5UcmlhbmdsZShpbnRlcnNlY3RQb2ludCwgYiwgYSwgYykpIHx8IGRpc3RhbmNlID4gZnJvbVRvRGlzdGFuY2Upe1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlcG9ydEludGVyc2VjdGlvbihub3JtYWwsIGludGVyc2VjdFBvaW50LCBzaGFwZSwgYm9keSwgZmkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIH1cbiAgICB9XG59O1xuUmF5LnByb3RvdHlwZVtTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OXSA9IFJheS5wcm90b3R5cGUuaW50ZXJzZWN0Q29udmV4O1xuXG52YXIgaW50ZXJzZWN0VHJpbWVzaF9ub3JtYWwgPSBuZXcgVmVjMygpO1xudmFyIGludGVyc2VjdFRyaW1lc2hfbG9jYWxEaXJlY3Rpb24gPSBuZXcgVmVjMygpO1xudmFyIGludGVyc2VjdFRyaW1lc2hfbG9jYWxGcm9tID0gbmV3IFZlYzMoKTtcbnZhciBpbnRlcnNlY3RUcmltZXNoX2xvY2FsVG8gPSBuZXcgVmVjMygpO1xudmFyIGludGVyc2VjdFRyaW1lc2hfd29ybGROb3JtYWwgPSBuZXcgVmVjMygpO1xudmFyIGludGVyc2VjdFRyaW1lc2hfd29ybGRJbnRlcnNlY3RQb2ludCA9IG5ldyBWZWMzKCk7XG52YXIgaW50ZXJzZWN0VHJpbWVzaF9sb2NhbEFBQkIgPSBuZXcgQUFCQigpO1xudmFyIGludGVyc2VjdFRyaW1lc2hfdHJpYW5nbGVzID0gW107XG52YXIgaW50ZXJzZWN0VHJpbWVzaF90cmVlVHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybSgpO1xuXG4vKipcbiAqIEBtZXRob2QgaW50ZXJzZWN0VHJpbWVzaFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSAge1NoYXBlfSBzaGFwZVxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gcXVhdFxuICogQHBhcmFtICB7VmVjM30gcG9zaXRpb25cbiAqIEBwYXJhbSAge0JvZHl9IGJvZHlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0b2RvIE9wdGltaXplIGJ5IHRyYW5zZm9ybWluZyB0aGUgd29ybGQgdG8gbG9jYWwgc3BhY2UgZmlyc3QuXG4gKiBAdG9kbyBVc2UgT2N0cmVlIGxvb2t1cFxuICovXG5SYXkucHJvdG90eXBlLmludGVyc2VjdFRyaW1lc2ggPSBmdW5jdGlvbiBpbnRlcnNlY3RUcmltZXNoKFxuICAgIG1lc2gsXG4gICAgcXVhdCxcbiAgICBwb3NpdGlvbixcbiAgICBib2R5LFxuICAgIG9wdGlvbnNcbil7XG4gICAgdmFyIG5vcm1hbCA9IGludGVyc2VjdFRyaW1lc2hfbm9ybWFsO1xuICAgIHZhciB0cmlhbmdsZXMgPSBpbnRlcnNlY3RUcmltZXNoX3RyaWFuZ2xlcztcbiAgICB2YXIgdHJlZVRyYW5zZm9ybSA9IGludGVyc2VjdFRyaW1lc2hfdHJlZVRyYW5zZm9ybTtcbiAgICB2YXIgbWluRGlzdE5vcm1hbCA9IGludGVyc2VjdENvbnZleF9taW5EaXN0Tm9ybWFsO1xuICAgIHZhciB2ZWN0b3IgPSBpbnRlcnNlY3RDb252ZXhfdmVjdG9yO1xuICAgIHZhciBtaW5EaXN0SW50ZXJzZWN0ID0gaW50ZXJzZWN0Q29udmV4X21pbkRpc3RJbnRlcnNlY3Q7XG4gICAgdmFyIGxvY2FsQUFCQiA9IGludGVyc2VjdFRyaW1lc2hfbG9jYWxBQUJCO1xuICAgIHZhciBsb2NhbERpcmVjdGlvbiA9IGludGVyc2VjdFRyaW1lc2hfbG9jYWxEaXJlY3Rpb247XG4gICAgdmFyIGxvY2FsRnJvbSA9IGludGVyc2VjdFRyaW1lc2hfbG9jYWxGcm9tO1xuICAgIHZhciBsb2NhbFRvID0gaW50ZXJzZWN0VHJpbWVzaF9sb2NhbFRvO1xuICAgIHZhciB3b3JsZEludGVyc2VjdFBvaW50ID0gaW50ZXJzZWN0VHJpbWVzaF93b3JsZEludGVyc2VjdFBvaW50O1xuICAgIHZhciB3b3JsZE5vcm1hbCA9IGludGVyc2VjdFRyaW1lc2hfd29ybGROb3JtYWw7XG4gICAgdmFyIGZhY2VMaXN0ID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5mYWNlTGlzdCkgfHwgbnVsbDtcblxuICAgIC8vIENoZWNraW5nIGZhY2VzXG4gICAgdmFyIGluZGljZXMgPSBtZXNoLmluZGljZXMsXG4gICAgICAgIHZlcnRpY2VzID0gbWVzaC52ZXJ0aWNlcyxcbiAgICAgICAgbm9ybWFscyA9IG1lc2guZmFjZU5vcm1hbHM7XG5cbiAgICB2YXIgZnJvbSA9IHRoaXMuZnJvbTtcbiAgICB2YXIgdG8gPSB0aGlzLnRvO1xuICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLl9kaXJlY3Rpb247XG5cbiAgICB2YXIgbWluRGlzdCA9IC0xO1xuICAgIHRyZWVUcmFuc2Zvcm0ucG9zaXRpb24uY29weShwb3NpdGlvbik7XG4gICAgdHJlZVRyYW5zZm9ybS5xdWF0ZXJuaW9uLmNvcHkocXVhdCk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmF5IHRvIGxvY2FsIHNwYWNlIVxuICAgIFRyYW5zZm9ybS52ZWN0b3JUb0xvY2FsRnJhbWUocG9zaXRpb24sIHF1YXQsIGRpcmVjdGlvbiwgbG9jYWxEaXJlY3Rpb24pO1xuICAgIC8vYm9keS52ZWN0b3JUb0xvY2FsRnJhbWUoZGlyZWN0aW9uLCBsb2NhbERpcmVjdGlvbik7XG4gICAgVHJhbnNmb3JtLnBvaW50VG9Mb2NhbEZyYW1lKHBvc2l0aW9uLCBxdWF0LCBmcm9tLCBsb2NhbEZyb20pO1xuICAgIC8vYm9keS5wb2ludFRvTG9jYWxGcmFtZShmcm9tLCBsb2NhbEZyb20pO1xuICAgIFRyYW5zZm9ybS5wb2ludFRvTG9jYWxGcmFtZShwb3NpdGlvbiwgcXVhdCwgdG8sIGxvY2FsVG8pO1xuICAgIC8vYm9keS5wb2ludFRvTG9jYWxGcmFtZSh0bywgbG9jYWxUbyk7XG4gICAgdmFyIGZyb21Ub0Rpc3RhbmNlU3F1YXJlZCA9IGxvY2FsRnJvbS5kaXN0YW5jZVNxdWFyZWQobG9jYWxUbyk7XG5cbiAgICBtZXNoLnRyZWUucmF5UXVlcnkodGhpcywgdHJlZVRyYW5zZm9ybSwgdHJpYW5nbGVzKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBOID0gdHJpYW5nbGVzLmxlbmd0aDsgIXRoaXMucmVzdWx0Ll9zaG91bGRTdG9wICYmIGkgIT09IE47IGkrKykge1xuICAgICAgICB2YXIgdHJpYW5nbGVzSW5kZXggPSB0cmlhbmdsZXNbaV07XG5cbiAgICAgICAgbWVzaC5nZXROb3JtYWwodHJpYW5nbGVzSW5kZXgsIG5vcm1hbCk7XG5cbiAgICAgICAgLy8gZGV0ZXJtaW5lIGlmIHJheSBpbnRlcnNlY3RzIHRoZSBwbGFuZSBvZiB0aGUgZmFjZVxuICAgICAgICAvLyBub3RlOiB0aGlzIHdvcmtzIHJlZ2FyZGxlc3Mgb2YgdGhlIGRpcmVjdGlvbiBvZiB0aGUgZmFjZSBub3JtYWxcblxuICAgICAgICAvLyBHZXQgcGxhbmUgcG9pbnQgaW4gd29ybGQgY29vcmRpbmF0ZXMuLi5cbiAgICAgICAgbWVzaC5nZXRWZXJ0ZXgoaW5kaWNlc1t0cmlhbmdsZXNJbmRleCAqIDNdLCBhKTtcblxuICAgICAgICAvLyAuLi5idXQgbWFrZSBpdCByZWxhdGl2ZSB0byB0aGUgcmF5IGZyb20uIFdlJ2xsIGZpeCB0aGlzIGxhdGVyLlxuICAgICAgICBhLnZzdWIobG9jYWxGcm9tLHZlY3Rvcik7XG5cbiAgICAgICAgLy8gR2V0IHBsYW5lIG5vcm1hbFxuICAgICAgICAvLyBxdWF0LnZtdWx0KG5vcm1hbCwgbm9ybWFsKTtcblxuICAgICAgICAvLyBJZiB0aGlzIGRvdCBwcm9kdWN0IGlzIG5lZ2F0aXZlLCB3ZSBoYXZlIHNvbWV0aGluZyBpbnRlcmVzdGluZ1xuICAgICAgICB2YXIgZG90ID0gbG9jYWxEaXJlY3Rpb24uZG90KG5vcm1hbCk7XG5cbiAgICAgICAgLy8gQmFpbCBvdXQgaWYgcmF5IGFuZCBwbGFuZSBhcmUgcGFyYWxsZWxcbiAgICAgICAgLy8gaWYgKE1hdGguYWJzKCBkb3QgKSA8IHRoaXMucHJlY2lzaW9uKXtcbiAgICAgICAgLy8gICAgIGNvbnRpbnVlO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gY2FsYyBkaXN0YW5jZSB0byBwbGFuZVxuICAgICAgICB2YXIgc2NhbGFyID0gbm9ybWFsLmRvdCh2ZWN0b3IpIC8gZG90O1xuXG4gICAgICAgIC8vIGlmIG5lZ2F0aXZlIGRpc3RhbmNlLCB0aGVuIHBsYW5lIGlzIGJlaGluZCByYXlcbiAgICAgICAgaWYgKHNjYWxhciA8IDApe1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnRlcnNlY3Rpb24gcG9pbnQgaXMgZnJvbSArIGRpcmVjdGlvbiAqIHNjYWxhclxuICAgICAgICBsb2NhbERpcmVjdGlvbi5zY2FsZShzY2FsYXIsaW50ZXJzZWN0UG9pbnQpO1xuICAgICAgICBpbnRlcnNlY3RQb2ludC52YWRkKGxvY2FsRnJvbSxpbnRlcnNlY3RQb2ludCk7XG5cbiAgICAgICAgLy8gR2V0IHRyaWFuZ2xlIHZlcnRpY2VzXG4gICAgICAgIG1lc2guZ2V0VmVydGV4KGluZGljZXNbdHJpYW5nbGVzSW5kZXggKiAzICsgMV0sIGIpO1xuICAgICAgICBtZXNoLmdldFZlcnRleChpbmRpY2VzW3RyaWFuZ2xlc0luZGV4ICogMyArIDJdLCBjKTtcblxuICAgICAgICB2YXIgc3F1YXJlZERpc3RhbmNlID0gaW50ZXJzZWN0UG9pbnQuZGlzdGFuY2VTcXVhcmVkKGxvY2FsRnJvbSk7XG5cbiAgICAgICAgaWYoIShwb2ludEluVHJpYW5nbGUoaW50ZXJzZWN0UG9pbnQsIGIsIGEsIGMpIHx8IHBvaW50SW5UcmlhbmdsZShpbnRlcnNlY3RQb2ludCwgYSwgYiwgYykpIHx8IHNxdWFyZWREaXN0YW5jZSA+IGZyb21Ub0Rpc3RhbmNlU3F1YXJlZCl7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRyYW5zZm9ybSBpbnRlcnNlY3Rwb2ludCBhbmQgbm9ybWFsIHRvIHdvcmxkXG4gICAgICAgIFRyYW5zZm9ybS52ZWN0b3JUb1dvcmxkRnJhbWUocXVhdCwgbm9ybWFsLCB3b3JsZE5vcm1hbCk7XG4gICAgICAgIC8vYm9keS52ZWN0b3JUb1dvcmxkRnJhbWUobm9ybWFsLCB3b3JsZE5vcm1hbCk7XG4gICAgICAgIFRyYW5zZm9ybS5wb2ludFRvV29ybGRGcmFtZShwb3NpdGlvbiwgcXVhdCwgaW50ZXJzZWN0UG9pbnQsIHdvcmxkSW50ZXJzZWN0UG9pbnQpO1xuICAgICAgICAvL2JvZHkucG9pbnRUb1dvcmxkRnJhbWUoaW50ZXJzZWN0UG9pbnQsIHdvcmxkSW50ZXJzZWN0UG9pbnQpO1xuICAgICAgICB0aGlzLnJlcG9ydEludGVyc2VjdGlvbih3b3JsZE5vcm1hbCwgd29ybGRJbnRlcnNlY3RQb2ludCwgbWVzaCwgYm9keSwgdHJpYW5nbGVzSW5kZXgpO1xuICAgIH1cbiAgICB0cmlhbmdsZXMubGVuZ3RoID0gMDtcbn07XG5SYXkucHJvdG90eXBlW1NoYXBlLnR5cGVzLlRSSU1FU0hdID0gUmF5LnByb3RvdHlwZS5pbnRlcnNlY3RUcmltZXNoO1xuXG5cbi8qKlxuICogQG1ldGhvZCByZXBvcnRJbnRlcnNlY3Rpb25cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0gIHtWZWMzfSBub3JtYWxcbiAqIEBwYXJhbSAge1ZlYzN9IGhpdFBvaW50V29ybGRcbiAqIEBwYXJhbSAge1NoYXBlfSBzaGFwZVxuICogQHBhcmFtICB7Qm9keX0gYm9keVxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgaW50ZXJzZWN0aW9ucyBzaG91bGQgY29udGludWVcbiAqL1xuUmF5LnByb3RvdHlwZS5yZXBvcnRJbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihub3JtYWwsIGhpdFBvaW50V29ybGQsIHNoYXBlLCBib2R5LCBoaXRGYWNlSW5kZXgpe1xuICAgIHZhciBmcm9tID0gdGhpcy5mcm9tO1xuICAgIHZhciB0byA9IHRoaXMudG87XG4gICAgdmFyIGRpc3RhbmNlID0gZnJvbS5kaXN0YW5jZVRvKGhpdFBvaW50V29ybGQpO1xuICAgIHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdDtcblxuICAgIC8vIFNraXAgYmFjayBmYWNlcz9cbiAgICBpZih0aGlzLnNraXBCYWNrZmFjZXMgJiYgbm9ybWFsLmRvdCh0aGlzLl9kaXJlY3Rpb24pID4gMCl7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXN1bHQuaGl0RmFjZUluZGV4ID0gdHlwZW9mKGhpdEZhY2VJbmRleCkgIT09ICd1bmRlZmluZWQnID8gaGl0RmFjZUluZGV4IDogLTE7XG5cbiAgICBzd2l0Y2godGhpcy5tb2RlKXtcbiAgICBjYXNlIFJheS5BTEw6XG4gICAgICAgIHRoaXMuaGFzSGl0ID0gdHJ1ZTtcbiAgICAgICAgcmVzdWx0LnNldChcbiAgICAgICAgICAgIGZyb20sXG4gICAgICAgICAgICB0byxcbiAgICAgICAgICAgIG5vcm1hbCxcbiAgICAgICAgICAgIGhpdFBvaW50V29ybGQsXG4gICAgICAgICAgICBzaGFwZSxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBkaXN0YW5jZVxuICAgICAgICApO1xuICAgICAgICByZXN1bHQuaGFzSGl0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICBicmVhaztcblxuICAgIGNhc2UgUmF5LkNMT1NFU1Q6XG5cbiAgICAgICAgLy8gU3RvcmUgaWYgY2xvc2VyIHRoYW4gY3VycmVudCBjbG9zZXN0XG4gICAgICAgIGlmKGRpc3RhbmNlIDwgcmVzdWx0LmRpc3RhbmNlIHx8ICFyZXN1bHQuaGFzSGl0KXtcbiAgICAgICAgICAgIHRoaXMuaGFzSGl0ID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlc3VsdC5oYXNIaXQgPSB0cnVlO1xuICAgICAgICAgICAgcmVzdWx0LnNldChcbiAgICAgICAgICAgICAgICBmcm9tLFxuICAgICAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgICAgIG5vcm1hbCxcbiAgICAgICAgICAgICAgICBoaXRQb2ludFdvcmxkLFxuICAgICAgICAgICAgICAgIHNoYXBlLFxuICAgICAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICAgICAgZGlzdGFuY2VcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFJheS5BTlk6XG5cbiAgICAgICAgLy8gUmVwb3J0IGFuZCBzdG9wLlxuICAgICAgICB0aGlzLmhhc0hpdCA9IHRydWU7XG4gICAgICAgIHJlc3VsdC5oYXNIaXQgPSB0cnVlO1xuICAgICAgICByZXN1bHQuc2V0KFxuICAgICAgICAgICAgZnJvbSxcbiAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgbm9ybWFsLFxuICAgICAgICAgICAgaGl0UG9pbnRXb3JsZCxcbiAgICAgICAgICAgIHNoYXBlLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIGRpc3RhbmNlXG4gICAgICAgICk7XG4gICAgICAgIHJlc3VsdC5fc2hvdWxkU3RvcCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbn07XG5cbnZhciB2MCA9IG5ldyBWZWMzKCksXG4gICAgaW50ZXJzZWN0ID0gbmV3IFZlYzMoKTtcbmZ1bmN0aW9uIGRpc3RhbmNlRnJvbUludGVyc2VjdGlvbihmcm9tLCBkaXJlY3Rpb24sIHBvc2l0aW9uKSB7XG5cbiAgICAvLyB2MCBpcyB2ZWN0b3IgZnJvbSBmcm9tIHRvIHBvc2l0aW9uXG4gICAgcG9zaXRpb24udnN1Yihmcm9tLHYwKTtcbiAgICB2YXIgZG90ID0gdjAuZG90KGRpcmVjdGlvbik7XG5cbiAgICAvLyBpbnRlcnNlY3QgPSBkaXJlY3Rpb24qZG90ICsgZnJvbVxuICAgIGRpcmVjdGlvbi5tdWx0KGRvdCxpbnRlcnNlY3QpO1xuICAgIGludGVyc2VjdC52YWRkKGZyb20saW50ZXJzZWN0KTtcblxuICAgIHZhciBkaXN0YW5jZSA9IHBvc2l0aW9uLmRpc3RhbmNlVG8oaW50ZXJzZWN0KTtcblxuICAgIHJldHVybiBkaXN0YW5jZTtcbn1cblxuXG59LHtcIi4uL2NvbGxpc2lvbi9BQUJCXCI6MyxcIi4uL2NvbGxpc2lvbi9SYXljYXN0UmVzdWx0XCI6MTAsXCIuLi9tYXRoL1F1YXRlcm5pb25cIjoyOCxcIi4uL21hdGgvVHJhbnNmb3JtXCI6MjksXCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4uL3NoYXBlcy9Cb3hcIjozNyxcIi4uL3NoYXBlcy9Db252ZXhQb2x5aGVkcm9uXCI6MzgsXCIuLi9zaGFwZXMvU2hhcGVcIjo0M31dLDEwOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmF5Y2FzdFJlc3VsdDtcblxuLyoqXG4gKiBTdG9yYWdlIGZvciBSYXkgY2FzdGluZyBkYXRhLlxuICogQGNsYXNzIFJheWNhc3RSZXN1bHRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSYXljYXN0UmVzdWx0KCl7XG5cblx0LyoqXG5cdCAqIEBwcm9wZXJ0eSB7VmVjM30gcmF5RnJvbVdvcmxkXG5cdCAqL1xuXHR0aGlzLnJheUZyb21Xb3JsZCA9IG5ldyBWZWMzKCk7XG5cblx0LyoqXG5cdCAqIEBwcm9wZXJ0eSB7VmVjM30gcmF5VG9Xb3JsZFxuXHQgKi9cblx0dGhpcy5yYXlUb1dvcmxkID0gbmV3IFZlYzMoKTtcblxuXHQvKipcblx0ICogQHByb3BlcnR5IHtWZWMzfSBoaXROb3JtYWxXb3JsZFxuXHQgKi9cblx0dGhpcy5oaXROb3JtYWxXb3JsZCA9IG5ldyBWZWMzKCk7XG5cblx0LyoqXG5cdCAqIEBwcm9wZXJ0eSB7VmVjM30gaGl0UG9pbnRXb3JsZFxuXHQgKi9cblx0dGhpcy5oaXRQb2ludFdvcmxkID0gbmV3IFZlYzMoKTtcblxuXHQvKipcblx0ICogQHByb3BlcnR5IHtib29sZWFufSBoYXNIaXRcblx0ICovXG5cdHRoaXMuaGFzSGl0ID0gZmFsc2U7XG5cblx0LyoqXG5cdCAqIFRoZSBoaXQgc2hhcGUsIG9yIG51bGwuXG5cdCAqIEBwcm9wZXJ0eSB7U2hhcGV9IHNoYXBlXG5cdCAqL1xuXHR0aGlzLnNoYXBlID0gbnVsbDtcblxuXHQvKipcblx0ICogVGhlIGhpdCBib2R5LCBvciBudWxsLlxuXHQgKiBAcHJvcGVydHkge0JvZHl9IGJvZHlcblx0ICovXG5cdHRoaXMuYm9keSA9IG51bGw7XG5cblx0LyoqXG5cdCAqIFRoZSBpbmRleCBvZiB0aGUgaGl0IHRyaWFuZ2xlLCBpZiB0aGUgaGl0IHNoYXBlIHdhcyBhIHRyaW1lc2guXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoaXRGYWNlSW5kZXhcblx0ICogQGRlZmF1bHQgLTFcblx0ICovXG5cdHRoaXMuaGl0RmFjZUluZGV4ID0gLTE7XG5cblx0LyoqXG5cdCAqIERpc3RhbmNlIHRvIHRoZSBoaXQuIFdpbGwgYmUgc2V0IHRvIC0xIGlmIHRoZXJlIHdhcyBubyBoaXQuXG5cdCAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkaXN0YW5jZVxuXHQgKiBAZGVmYXVsdCAtMVxuXHQgKi9cblx0dGhpcy5kaXN0YW5jZSA9IC0xO1xuXG5cdC8qKlxuXHQgKiBJZiB0aGUgcmF5IHNob3VsZCBzdG9wIHRyYXZlcnNpbmcgdGhlIGJvZGllcy5cblx0ICogQHByaXZhdGVcblx0ICogQHByb3BlcnR5IHtCb29sZWFufSBfc2hvdWxkU3RvcFxuXHQgKiBAZGVmYXVsdCBmYWxzZVxuXHQgKi9cblx0dGhpcy5fc2hvdWxkU3RvcCA9IGZhbHNlO1xufVxuXG4vKipcbiAqIFJlc2V0IGFsbCByZXN1bHQgZGF0YS5cbiAqIEBtZXRob2QgcmVzZXRcbiAqL1xuUmF5Y2FzdFJlc3VsdC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG5cdHRoaXMucmF5RnJvbVdvcmxkLnNldFplcm8oKTtcblx0dGhpcy5yYXlUb1dvcmxkLnNldFplcm8oKTtcblx0dGhpcy5oaXROb3JtYWxXb3JsZC5zZXRaZXJvKCk7XG5cdHRoaXMuaGl0UG9pbnRXb3JsZC5zZXRaZXJvKCk7XG5cdHRoaXMuaGFzSGl0ID0gZmFsc2U7XG5cdHRoaXMuc2hhcGUgPSBudWxsO1xuXHR0aGlzLmJvZHkgPSBudWxsO1xuXHR0aGlzLmhpdEZhY2VJbmRleCA9IC0xO1xuXHR0aGlzLmRpc3RhbmNlID0gLTE7XG5cdHRoaXMuX3Nob3VsZFN0b3AgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBhYm9ydFxuICovXG5SYXljYXN0UmVzdWx0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCl7XG5cdHRoaXMuX3Nob3VsZFN0b3AgPSB0cnVlO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNldFxuICogQHBhcmFtIHtWZWMzfSByYXlGcm9tV29ybGRcbiAqIEBwYXJhbSB7VmVjM30gcmF5VG9Xb3JsZFxuICogQHBhcmFtIHtWZWMzfSBoaXROb3JtYWxXb3JsZFxuICogQHBhcmFtIHtWZWMzfSBoaXRQb2ludFdvcmxkXG4gKiBAcGFyYW0ge1NoYXBlfSBzaGFwZVxuICogQHBhcmFtIHtCb2R5fSBib2R5XG4gKiBAcGFyYW0ge251bWJlcn0gZGlzdGFuY2VcbiAqL1xuUmF5Y2FzdFJlc3VsdC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oXG5cdHJheUZyb21Xb3JsZCxcblx0cmF5VG9Xb3JsZCxcblx0aGl0Tm9ybWFsV29ybGQsXG5cdGhpdFBvaW50V29ybGQsXG5cdHNoYXBlLFxuXHRib2R5LFxuXHRkaXN0YW5jZVxuKXtcblx0dGhpcy5yYXlGcm9tV29ybGQuY29weShyYXlGcm9tV29ybGQpO1xuXHR0aGlzLnJheVRvV29ybGQuY29weShyYXlUb1dvcmxkKTtcblx0dGhpcy5oaXROb3JtYWxXb3JsZC5jb3B5KGhpdE5vcm1hbFdvcmxkKTtcblx0dGhpcy5oaXRQb2ludFdvcmxkLmNvcHkoaGl0UG9pbnRXb3JsZCk7XG5cdHRoaXMuc2hhcGUgPSBzaGFwZTtcblx0dGhpcy5ib2R5ID0gYm9keTtcblx0dGhpcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xufTtcbn0se1wiLi4vbWF0aC9WZWMzXCI6MzB9XSwxMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgU2hhcGUgPSBfZGVyZXFfKCcuLi9zaGFwZXMvU2hhcGUnKTtcbnZhciBCcm9hZHBoYXNlID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL0Jyb2FkcGhhc2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTQVBCcm9hZHBoYXNlO1xuXG4vKipcbiAqIFN3ZWVwIGFuZCBwcnVuZSBicm9hZHBoYXNlIGFsb25nIG9uZSBheGlzLlxuICpcbiAqIEBjbGFzcyBTQVBCcm9hZHBoYXNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7V29ybGR9IFt3b3JsZF1cbiAqIEBleHRlbmRzIEJyb2FkcGhhc2VcbiAqL1xuZnVuY3Rpb24gU0FQQnJvYWRwaGFzZSh3b3JsZCl7XG4gICAgQnJvYWRwaGFzZS5hcHBseSh0aGlzKTtcblxuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgYm9kaWVzIGN1cnJlbnRseSBpbiB0aGUgYnJvYWRwaGFzZS5cbiAgICAgKiBAcHJvcGVydHkgYXhpc0xpc3RcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5heGlzTGlzdCA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHdvcmxkIHRvIHNlYXJjaCBpbi5cbiAgICAgKiBAcHJvcGVydHkgd29ybGRcbiAgICAgKiBAdHlwZSB7V29ybGR9XG4gICAgICovXG4gICAgdGhpcy53b3JsZCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBeGlzIHRvIHNvcnQgdGhlIGJvZGllcyBhbG9uZy4gU2V0IHRvIDAgZm9yIHggYXhpcywgYW5kIDEgZm9yIHkgYXhpcy4gRm9yIGJlc3QgcGVyZm9ybWFuY2UsIGNob29zZSBhbiBheGlzIHRoYXQgdGhlIGJvZGllcyBhcmUgc3ByZWFkIG91dCBtb3JlIG9uLlxuICAgICAqIEBwcm9wZXJ0eSBheGlzSW5kZXhcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuYXhpc0luZGV4ID0gMDtcblxuICAgIHZhciBheGlzTGlzdCA9IHRoaXMuYXhpc0xpc3Q7XG5cbiAgICB0aGlzLl9hZGRCb2R5SGFuZGxlciA9IGZ1bmN0aW9uKGUpe1xuICAgICAgICBheGlzTGlzdC5wdXNoKGUuYm9keSk7XG4gICAgfTtcblxuICAgIHRoaXMuX3JlbW92ZUJvZHlIYW5kbGVyID0gZnVuY3Rpb24oZSl7XG4gICAgICAgIHZhciBpZHggPSBheGlzTGlzdC5pbmRleE9mKGUuYm9keSk7XG4gICAgICAgIGlmKGlkeCAhPT0gLTEpe1xuICAgICAgICAgICAgYXhpc0xpc3Quc3BsaWNlKGlkeCwxKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBpZih3b3JsZCl7XG4gICAgICAgIHRoaXMuc2V0V29ybGQod29ybGQpO1xuICAgIH1cbn1cblNBUEJyb2FkcGhhc2UucHJvdG90eXBlID0gbmV3IEJyb2FkcGhhc2UoKTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIHdvcmxkXG4gKiBAbWV0aG9kIHNldFdvcmxkXG4gKiBAcGFyYW0gIHtXb3JsZH0gd29ybGRcbiAqL1xuU0FQQnJvYWRwaGFzZS5wcm90b3R5cGUuc2V0V29ybGQgPSBmdW5jdGlvbih3b3JsZCl7XG4gICAgLy8gQ2xlYXIgdGhlIG9sZCBheGlzIGFycmF5XG4gICAgdGhpcy5heGlzTGlzdC5sZW5ndGggPSAwO1xuXG4gICAgLy8gQWRkIGFsbCBib2RpZXMgZnJvbSB0aGUgbmV3IHdvcmxkXG4gICAgZm9yKHZhciBpPTA7IGk8d29ybGQuYm9kaWVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdGhpcy5heGlzTGlzdC5wdXNoKHdvcmxkLmJvZGllc1tpXSk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlIG9sZCBoYW5kbGVycywgaWYgYW55XG4gICAgd29ybGQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFkZEJvZHlcIiwgdGhpcy5fYWRkQm9keUhhbmRsZXIpO1xuICAgIHdvcmxkLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZW1vdmVCb2R5XCIsIHRoaXMuX3JlbW92ZUJvZHlIYW5kbGVyKTtcblxuICAgIC8vIEFkZCBoYW5kbGVycyB0byB1cGRhdGUgdGhlIGxpc3Qgb2YgYm9kaWVzLlxuICAgIHdvcmxkLmFkZEV2ZW50TGlzdGVuZXIoXCJhZGRCb2R5XCIsIHRoaXMuX2FkZEJvZHlIYW5kbGVyKTtcbiAgICB3b3JsZC5hZGRFdmVudExpc3RlbmVyKFwicmVtb3ZlQm9keVwiLCB0aGlzLl9yZW1vdmVCb2R5SGFuZGxlcik7XG5cbiAgICB0aGlzLndvcmxkID0gd29ybGQ7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG59O1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgaW5zZXJ0aW9uU29ydFhcbiAqIEBwYXJhbSAge0FycmF5fSBhXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xuU0FQQnJvYWRwaGFzZS5pbnNlcnRpb25Tb3J0WCA9IGZ1bmN0aW9uKGEpIHtcbiAgICBmb3IodmFyIGk9MSxsPWEubGVuZ3RoO2k8bDtpKyspIHtcbiAgICAgICAgdmFyIHYgPSBhW2ldO1xuICAgICAgICBmb3IodmFyIGo9aSAtIDE7aj49MDtqLS0pIHtcbiAgICAgICAgICAgIGlmKGFbal0uYWFiYi5sb3dlckJvdW5kLnggPD0gdi5hYWJiLmxvd2VyQm91bmQueCl7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhW2orMV0gPSBhW2pdO1xuICAgICAgICB9XG4gICAgICAgIGFbaisxXSA9IHY7XG4gICAgfVxuICAgIHJldHVybiBhO1xufTtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIGluc2VydGlvblNvcnRZXG4gKiBAcGFyYW0gIHtBcnJheX0gYVxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cblNBUEJyb2FkcGhhc2UuaW5zZXJ0aW9uU29ydFkgPSBmdW5jdGlvbihhKSB7XG4gICAgZm9yKHZhciBpPTEsbD1hLmxlbmd0aDtpPGw7aSsrKSB7XG4gICAgICAgIHZhciB2ID0gYVtpXTtcbiAgICAgICAgZm9yKHZhciBqPWkgLSAxO2o+PTA7ai0tKSB7XG4gICAgICAgICAgICBpZihhW2pdLmFhYmIubG93ZXJCb3VuZC55IDw9IHYuYWFiYi5sb3dlckJvdW5kLnkpe1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYVtqKzFdID0gYVtqXTtcbiAgICAgICAgfVxuICAgICAgICBhW2orMV0gPSB2O1xuICAgIH1cbiAgICByZXR1cm4gYTtcbn07XG5cbi8qKlxuICogQHN0YXRpY1xuICogQG1ldGhvZCBpbnNlcnRpb25Tb3J0WlxuICogQHBhcmFtICB7QXJyYXl9IGFcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG5TQVBCcm9hZHBoYXNlLmluc2VydGlvblNvcnRaID0gZnVuY3Rpb24oYSkge1xuICAgIGZvcih2YXIgaT0xLGw9YS5sZW5ndGg7aTxsO2krKykge1xuICAgICAgICB2YXIgdiA9IGFbaV07XG4gICAgICAgIGZvcih2YXIgaj1pIC0gMTtqPj0wO2otLSkge1xuICAgICAgICAgICAgaWYoYVtqXS5hYWJiLmxvd2VyQm91bmQueiA8PSB2LmFhYmIubG93ZXJCb3VuZC56KXtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFbaisxXSA9IGFbal07XG4gICAgICAgIH1cbiAgICAgICAgYVtqKzFdID0gdjtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG59O1xuXG4vKipcbiAqIENvbGxlY3QgYWxsIGNvbGxpc2lvbiBwYWlyc1xuICogQG1ldGhvZCBjb2xsaXNpb25QYWlyc1xuICogQHBhcmFtICB7V29ybGR9IHdvcmxkXG4gKiBAcGFyYW0gIHtBcnJheX0gcDFcbiAqIEBwYXJhbSAge0FycmF5fSBwMlxuICovXG5TQVBCcm9hZHBoYXNlLnByb3RvdHlwZS5jb2xsaXNpb25QYWlycyA9IGZ1bmN0aW9uKHdvcmxkLHAxLHAyKXtcbiAgICB2YXIgYm9kaWVzID0gdGhpcy5heGlzTGlzdCxcbiAgICAgICAgTiA9IGJvZGllcy5sZW5ndGgsXG4gICAgICAgIGF4aXNJbmRleCA9IHRoaXMuYXhpc0luZGV4LFxuICAgICAgICBpLCBqO1xuXG4gICAgaWYodGhpcy5kaXJ0eSl7XG4gICAgICAgIHRoaXMuc29ydExpc3QoKTtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIExvb2sgdGhyb3VnaCB0aGUgbGlzdFxuICAgIGZvcihpPTA7IGkgIT09IE47IGkrKyl7XG4gICAgICAgIHZhciBiaSA9IGJvZGllc1tpXTtcblxuICAgICAgICBmb3Ioaj1pKzE7IGogPCBOOyBqKyspe1xuICAgICAgICAgICAgdmFyIGJqID0gYm9kaWVzW2pdO1xuXG4gICAgICAgICAgICBpZighdGhpcy5uZWVkQnJvYWRwaGFzZUNvbGxpc2lvbihiaSxiaikpe1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZighU0FQQnJvYWRwaGFzZS5jaGVja0JvdW5kcyhiaSxiaixheGlzSW5kZXgpKXtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pbnRlcnNlY3Rpb25UZXN0KGJpLGJqLHAxLHAyKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblNBUEJyb2FkcGhhc2UucHJvdG90eXBlLnNvcnRMaXN0ID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgYXhpc0xpc3QgPSB0aGlzLmF4aXNMaXN0O1xuICAgIHZhciBheGlzSW5kZXggPSB0aGlzLmF4aXNJbmRleDtcbiAgICB2YXIgTiA9IGF4aXNMaXN0Lmxlbmd0aDtcblxuICAgIC8vIFVwZGF0ZSBBQUJCc1xuICAgIGZvcih2YXIgaSA9IDA7IGkhPT1OOyBpKyspe1xuICAgICAgICB2YXIgYmkgPSBheGlzTGlzdFtpXTtcbiAgICAgICAgaWYoYmkuYWFiYk5lZWRzVXBkYXRlKXtcbiAgICAgICAgICAgIGJpLmNvbXB1dGVBQUJCKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTb3J0IHRoZSBsaXN0XG4gICAgaWYoYXhpc0luZGV4ID09PSAwKXtcbiAgICAgICAgU0FQQnJvYWRwaGFzZS5pbnNlcnRpb25Tb3J0WChheGlzTGlzdCk7XG4gICAgfSBlbHNlIGlmKGF4aXNJbmRleCA9PT0gMSl7XG4gICAgICAgIFNBUEJyb2FkcGhhc2UuaW5zZXJ0aW9uU29ydFkoYXhpc0xpc3QpO1xuICAgIH0gZWxzZSBpZihheGlzSW5kZXggPT09IDIpe1xuICAgICAgICBTQVBCcm9hZHBoYXNlLmluc2VydGlvblNvcnRaKGF4aXNMaXN0KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBib3VuZHMgb2YgdHdvIGJvZGllcyBvdmVybGFwLCBhbG9uZyB0aGUgZ2l2ZW4gU0FQIGF4aXMuXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIGNoZWNrQm91bmRzXG4gKiBAcGFyYW0gIHtCb2R5fSBiaVxuICogQHBhcmFtICB7Qm9keX0gYmpcbiAqIEBwYXJhbSAge051bWJlcn0gYXhpc0luZGV4XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG5TQVBCcm9hZHBoYXNlLmNoZWNrQm91bmRzID0gZnVuY3Rpb24oYmksIGJqLCBheGlzSW5kZXgpe1xuICAgIHZhciBiaVBvcztcbiAgICB2YXIgYmpQb3M7XG5cbiAgICBpZihheGlzSW5kZXggPT09IDApe1xuICAgICAgICBiaVBvcyA9IGJpLnBvc2l0aW9uLng7XG4gICAgICAgIGJqUG9zID0gYmoucG9zaXRpb24ueDtcbiAgICB9IGVsc2UgaWYoYXhpc0luZGV4ID09PSAxKXtcbiAgICAgICAgYmlQb3MgPSBiaS5wb3NpdGlvbi55O1xuICAgICAgICBialBvcyA9IGJqLnBvc2l0aW9uLnk7XG4gICAgfSBlbHNlIGlmKGF4aXNJbmRleCA9PT0gMil7XG4gICAgICAgIGJpUG9zID0gYmkucG9zaXRpb24uejtcbiAgICAgICAgYmpQb3MgPSBiai5wb3NpdGlvbi56O1xuICAgIH1cblxuICAgIHZhciByaSA9IGJpLmJvdW5kaW5nUmFkaXVzLFxuICAgICAgICByaiA9IGJqLmJvdW5kaW5nUmFkaXVzLFxuICAgICAgICBib3VuZEExID0gYmlQb3MgLSByaSxcbiAgICAgICAgYm91bmRBMiA9IGJpUG9zICsgcmksXG4gICAgICAgIGJvdW5kQjEgPSBialBvcyAtIHJqLFxuICAgICAgICBib3VuZEIyID0gYmpQb3MgKyByajtcblxuICAgIHJldHVybiBib3VuZEIxIDwgYm91bmRBMjtcbn07XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIHZhcmlhbmNlIG9mIHRoZSBib2R5IHBvc2l0aW9ucyBhbmQgZXN0aW1hdGVzIHRoZSBiZXN0XG4gKiBheGlzIHRvIHVzZS4gV2lsbCBhdXRvbWF0aWNhbGx5IHNldCBwcm9wZXJ0eSAuYXhpc0luZGV4LlxuICogQG1ldGhvZCBhdXRvRGV0ZWN0QXhpc1xuICovXG5TQVBCcm9hZHBoYXNlLnByb3RvdHlwZS5hdXRvRGV0ZWN0QXhpcyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHN1bVg9MCxcbiAgICAgICAgc3VtWDI9MCxcbiAgICAgICAgc3VtWT0wLFxuICAgICAgICBzdW1ZMj0wLFxuICAgICAgICBzdW1aPTAsXG4gICAgICAgIHN1bVoyPTAsXG4gICAgICAgIGJvZGllcyA9IHRoaXMuYXhpc0xpc3QsXG4gICAgICAgIE4gPSBib2RpZXMubGVuZ3RoLFxuICAgICAgICBpbnZOPTEvTjtcblxuICAgIGZvcih2YXIgaT0wOyBpIT09TjsgaSsrKXtcbiAgICAgICAgdmFyIGIgPSBib2RpZXNbaV07XG5cbiAgICAgICAgdmFyIGNlbnRlclggPSBiLnBvc2l0aW9uLng7XG4gICAgICAgIHN1bVggKz0gY2VudGVyWDtcbiAgICAgICAgc3VtWDIgKz0gY2VudGVyWCpjZW50ZXJYO1xuXG4gICAgICAgIHZhciBjZW50ZXJZID0gYi5wb3NpdGlvbi55O1xuICAgICAgICBzdW1ZICs9IGNlbnRlclk7XG4gICAgICAgIHN1bVkyICs9IGNlbnRlclkqY2VudGVyWTtcblxuICAgICAgICB2YXIgY2VudGVyWiA9IGIucG9zaXRpb24uejtcbiAgICAgICAgc3VtWiArPSBjZW50ZXJaO1xuICAgICAgICBzdW1aMiArPSBjZW50ZXJaKmNlbnRlclo7XG4gICAgfVxuXG4gICAgdmFyIHZhcmlhbmNlWCA9IHN1bVgyIC0gc3VtWCpzdW1YKmludk4sXG4gICAgICAgIHZhcmlhbmNlWSA9IHN1bVkyIC0gc3VtWSpzdW1ZKmludk4sXG4gICAgICAgIHZhcmlhbmNlWiA9IHN1bVoyIC0gc3VtWipzdW1aKmludk47XG5cbiAgICBpZih2YXJpYW5jZVggPiB2YXJpYW5jZVkpe1xuICAgICAgICBpZih2YXJpYW5jZVggPiB2YXJpYW5jZVope1xuICAgICAgICAgICAgdGhpcy5heGlzSW5kZXggPSAwO1xuICAgICAgICB9IGVsc2V7XG4gICAgICAgICAgICB0aGlzLmF4aXNJbmRleCA9IDI7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYodmFyaWFuY2VZID4gdmFyaWFuY2VaKXtcbiAgICAgICAgdGhpcy5heGlzSW5kZXggPSAxO1xuICAgIH0gZWxzZXtcbiAgICAgICAgdGhpcy5heGlzSW5kZXggPSAyO1xuICAgIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbGwgdGhlIGJvZGllcyB3aXRoaW4gYW4gQUFCQi5cbiAqIEBtZXRob2QgYWFiYlF1ZXJ5XG4gKiBAcGFyYW0gIHtXb3JsZH0gd29ybGRcbiAqIEBwYXJhbSAge0FBQkJ9IGFhYmJcbiAqIEBwYXJhbSB7YXJyYXl9IHJlc3VsdCBBbiBhcnJheSB0byBzdG9yZSByZXN1bHRpbmcgYm9kaWVzIGluLlxuICogQHJldHVybiB7YXJyYXl9XG4gKi9cblNBUEJyb2FkcGhhc2UucHJvdG90eXBlLmFhYmJRdWVyeSA9IGZ1bmN0aW9uKHdvcmxkLCBhYWJiLCByZXN1bHQpe1xuICAgIHJlc3VsdCA9IHJlc3VsdCB8fCBbXTtcblxuICAgIGlmKHRoaXMuZGlydHkpe1xuICAgICAgICB0aGlzLnNvcnRMaXN0KCk7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgYXhpc0luZGV4ID0gdGhpcy5heGlzSW5kZXgsIGF4aXMgPSAneCc7XG4gICAgaWYoYXhpc0luZGV4ID09PSAxKXsgYXhpcyA9ICd5JzsgfVxuICAgIGlmKGF4aXNJbmRleCA9PT0gMil7IGF4aXMgPSAneic7IH1cblxuICAgIHZhciBheGlzTGlzdCA9IHRoaXMuYXhpc0xpc3Q7XG4gICAgdmFyIGxvd2VyID0gYWFiYi5sb3dlckJvdW5kW2F4aXNdO1xuICAgIHZhciB1cHBlciA9IGFhYmIudXBwZXJCb3VuZFtheGlzXTtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgYXhpc0xpc3QubGVuZ3RoOyBpKyspe1xuICAgICAgICB2YXIgYiA9IGF4aXNMaXN0W2ldO1xuXG4gICAgICAgIGlmKGIuYWFiYk5lZWRzVXBkYXRlKXtcbiAgICAgICAgICAgIGIuY29tcHV0ZUFBQkIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGIuYWFiYi5vdmVybGFwcyhhYWJiKSl7XG4gICAgICAgICAgICByZXN1bHQucHVzaChiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59O1xufSx7XCIuLi9jb2xsaXNpb24vQnJvYWRwaGFzZVwiOjUsXCIuLi9zaGFwZXMvU2hhcGVcIjo0M31dLDEyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gQ29uZVR3aXN0Q29uc3RyYWludDtcblxudmFyIENvbnN0cmFpbnQgPSBfZGVyZXFfKCcuL0NvbnN0cmFpbnQnKTtcbnZhciBQb2ludFRvUG9pbnRDb25zdHJhaW50ID0gX2RlcmVxXygnLi9Qb2ludFRvUG9pbnRDb25zdHJhaW50Jyk7XG52YXIgQ29uZUVxdWF0aW9uID0gX2RlcmVxXygnLi4vZXF1YXRpb25zL0NvbmVFcXVhdGlvbicpO1xudmFyIFJvdGF0aW9uYWxFcXVhdGlvbiA9IF9kZXJlcV8oJy4uL2VxdWF0aW9ucy9Sb3RhdGlvbmFsRXF1YXRpb24nKTtcbnZhciBDb250YWN0RXF1YXRpb24gPSBfZGVyZXFfKCcuLi9lcXVhdGlvbnMvQ29udGFjdEVxdWF0aW9uJyk7XG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xuXG4vKipcbiAqIEBjbGFzcyBDb25lVHdpc3RDb25zdHJhaW50XG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdXRob3Igc2NodGVwcGVcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUFcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7VmVjM30gW29wdGlvbnMucGl2b3RBXVxuICogQHBhcmFtIHtWZWMzfSBbb3B0aW9ucy5waXZvdEJdXG4gKiBAcGFyYW0ge1ZlYzN9IFtvcHRpb25zLmF4aXNBXVxuICogQHBhcmFtIHtWZWMzfSBbb3B0aW9ucy5heGlzQl1cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhGb3JjZT0xZTZdXG4gKiBAZXh0ZW5kcyBQb2ludFRvUG9pbnRDb25zdHJhaW50XG4gKi9cbmZ1bmN0aW9uIENvbmVUd2lzdENvbnN0cmFpbnQoYm9keUEsIGJvZHlCLCBvcHRpb25zKXtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgbWF4Rm9yY2UgPSB0eXBlb2Yob3B0aW9ucy5tYXhGb3JjZSkgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5tYXhGb3JjZSA6IDFlNjtcblxuICAgIC8vIFNldCBwaXZvdCBwb2ludCBpbiBiZXR3ZWVuXG4gICAgdmFyIHBpdm90QSA9IG9wdGlvbnMucGl2b3RBID8gb3B0aW9ucy5waXZvdEEuY2xvbmUoKSA6IG5ldyBWZWMzKCk7XG4gICAgdmFyIHBpdm90QiA9IG9wdGlvbnMucGl2b3RCID8gb3B0aW9ucy5waXZvdEIuY2xvbmUoKSA6IG5ldyBWZWMzKCk7XG4gICAgdGhpcy5heGlzQSA9IG9wdGlvbnMuYXhpc0EgPyBvcHRpb25zLmF4aXNBLmNsb25lKCkgOiBuZXcgVmVjMygpO1xuICAgIHRoaXMuYXhpc0IgPSBvcHRpb25zLmF4aXNCID8gb3B0aW9ucy5heGlzQi5jbG9uZSgpIDogbmV3IFZlYzMoKTtcblxuICAgIFBvaW50VG9Qb2ludENvbnN0cmFpbnQuY2FsbCh0aGlzLCBib2R5QSwgcGl2b3RBLCBib2R5QiwgcGl2b3RCLCBtYXhGb3JjZSk7XG5cbiAgICB0aGlzLmNvbGxpZGVDb25uZWN0ZWQgPSAhIW9wdGlvbnMuY29sbGlkZUNvbm5lY3RlZDtcblxuICAgIHRoaXMuYW5nbGUgPSB0eXBlb2Yob3B0aW9ucy5hbmdsZSkgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5hbmdsZSA6IDA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge0NvbmVFcXVhdGlvbn0gY29uZUVxdWF0aW9uXG4gICAgICovXG4gICAgdmFyIGMgPSB0aGlzLmNvbmVFcXVhdGlvbiA9IG5ldyBDb25lRXF1YXRpb24oYm9keUEsYm9keUIsb3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1JvdGF0aW9uYWxFcXVhdGlvbn0gdHdpc3RFcXVhdGlvblxuICAgICAqL1xuICAgIHZhciB0ID0gdGhpcy50d2lzdEVxdWF0aW9uID0gbmV3IFJvdGF0aW9uYWxFcXVhdGlvbihib2R5QSxib2R5QixvcHRpb25zKTtcbiAgICB0aGlzLnR3aXN0QW5nbGUgPSB0eXBlb2Yob3B0aW9ucy50d2lzdEFuZ2xlKSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLnR3aXN0QW5nbGUgOiAwO1xuXG4gICAgLy8gTWFrZSB0aGUgY29uZSBlcXVhdGlvbiBwdXNoIHRoZSBib2RpZXMgdG93YXJkIHRoZSBjb25lIGF4aXMsIG5vdCBvdXR3YXJkXG4gICAgYy5tYXhGb3JjZSA9IDA7XG4gICAgYy5taW5Gb3JjZSA9IC1tYXhGb3JjZTtcblxuICAgIC8vIE1ha2UgdGhlIHR3aXN0IGVxdWF0aW9uIGFkZCB0b3JxdWUgdG93YXJkIHRoZSBpbml0aWFsIHBvc2l0aW9uXG4gICAgdC5tYXhGb3JjZSA9IDA7XG4gICAgdC5taW5Gb3JjZSA9IC1tYXhGb3JjZTtcblxuICAgIHRoaXMuZXF1YXRpb25zLnB1c2goYywgdCk7XG59XG5Db25lVHdpc3RDb25zdHJhaW50LnByb3RvdHlwZSA9IG5ldyBQb2ludFRvUG9pbnRDb25zdHJhaW50KCk7XG5Db25lVHdpc3RDb25zdHJhaW50LmNvbnN0cnVjdG9yID0gQ29uZVR3aXN0Q29uc3RyYWludDtcblxudmFyIENvbmVUd2lzdENvbnN0cmFpbnRfdXBkYXRlX3RtcFZlYzEgPSBuZXcgVmVjMygpO1xudmFyIENvbmVUd2lzdENvbnN0cmFpbnRfdXBkYXRlX3RtcFZlYzIgPSBuZXcgVmVjMygpO1xuXG5Db25lVHdpc3RDb25zdHJhaW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpe1xuICAgIHZhciBib2R5QSA9IHRoaXMuYm9keUEsXG4gICAgICAgIGJvZHlCID0gdGhpcy5ib2R5QixcbiAgICAgICAgY29uZSA9IHRoaXMuY29uZUVxdWF0aW9uLFxuICAgICAgICB0d2lzdCA9IHRoaXMudHdpc3RFcXVhdGlvbjtcblxuICAgIFBvaW50VG9Qb2ludENvbnN0cmFpbnQucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMpO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBheGVzIHRvIHRoZSBjb25lIGNvbnN0cmFpbnRcbiAgICBib2R5QS52ZWN0b3JUb1dvcmxkRnJhbWUodGhpcy5heGlzQSwgY29uZS5heGlzQSk7XG4gICAgYm9keUIudmVjdG9yVG9Xb3JsZEZyYW1lKHRoaXMuYXhpc0IsIGNvbmUuYXhpc0IpO1xuXG4gICAgLy8gVXBkYXRlIHRoZSB3b3JsZCBheGVzIGluIHRoZSB0d2lzdCBjb25zdHJhaW50XG4gICAgdGhpcy5heGlzQS50YW5nZW50cyh0d2lzdC5heGlzQSwgdHdpc3QuYXhpc0EpO1xuICAgIGJvZHlBLnZlY3RvclRvV29ybGRGcmFtZSh0d2lzdC5heGlzQSwgdHdpc3QuYXhpc0EpO1xuXG4gICAgdGhpcy5heGlzQi50YW5nZW50cyh0d2lzdC5heGlzQiwgdHdpc3QuYXhpc0IpO1xuICAgIGJvZHlCLnZlY3RvclRvV29ybGRGcmFtZSh0d2lzdC5heGlzQiwgdHdpc3QuYXhpc0IpO1xuXG4gICAgY29uZS5hbmdsZSA9IHRoaXMuYW5nbGU7XG4gICAgdHdpc3QubWF4QW5nbGUgPSB0aGlzLnR3aXN0QW5nbGU7XG59O1xuXG5cbn0se1wiLi4vZXF1YXRpb25zL0NvbmVFcXVhdGlvblwiOjE4LFwiLi4vZXF1YXRpb25zL0NvbnRhY3RFcXVhdGlvblwiOjE5LFwiLi4vZXF1YXRpb25zL1JvdGF0aW9uYWxFcXVhdGlvblwiOjIyLFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuL0NvbnN0cmFpbnRcIjoxMyxcIi4vUG9pbnRUb1BvaW50Q29uc3RyYWludFwiOjE3fV0sMTM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBDb25zdHJhaW50O1xuXG52YXIgVXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy9VdGlscycpO1xuXG4vKipcbiAqIENvbnN0cmFpbnQgYmFzZSBjbGFzc1xuICogQGNsYXNzIENvbnN0cmFpbnRcbiAqIEBhdXRob3Igc2NodGVwcGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCb2R5fSBib2R5QVxuICogQHBhcmFtIHtCb2R5fSBib2R5QlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jb2xsaWRlQ29ubmVjdGVkPXRydWVdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLndha2VVcEJvZGllcz10cnVlXVxuICovXG5mdW5jdGlvbiBDb25zdHJhaW50KGJvZHlBLCBib2R5Qiwgb3B0aW9ucyl7XG4gICAgb3B0aW9ucyA9IFV0aWxzLmRlZmF1bHRzKG9wdGlvbnMse1xuICAgICAgICBjb2xsaWRlQ29ubmVjdGVkIDogdHJ1ZSxcbiAgICAgICAgd2FrZVVwQm9kaWVzIDogdHJ1ZSxcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEVxdWF0aW9ucyB0byBiZSBzb2x2ZWQgaW4gdGhpcyBjb25zdHJhaW50XG4gICAgICogQHByb3BlcnR5IGVxdWF0aW9uc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmVxdWF0aW9ucyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtCb2R5fSBib2R5QVxuICAgICAqL1xuICAgIHRoaXMuYm9keUEgPSBib2R5QTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9keX0gYm9keUJcbiAgICAgKi9cbiAgICB0aGlzLmJvZHlCID0gYm9keUI7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gaWRcbiAgICAgKi9cbiAgICB0aGlzLmlkID0gQ29uc3RyYWludC5pZENvdW50ZXIrKztcblxuICAgIC8qKlxuICAgICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRoZSBib2RpZXMgdG8gY29sbGlkZSB3aGVuIHRoZXkgYXJlIGNvbm5lY3RlZC5cbiAgICAgKiBAcHJvcGVydHkgY29sbGlkZUNvbm5lY3RlZFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuY29sbGlkZUNvbm5lY3RlZCA9IG9wdGlvbnMuY29sbGlkZUNvbm5lY3RlZDtcblxuICAgIGlmKG9wdGlvbnMud2FrZVVwQm9kaWVzKXtcbiAgICAgICAgaWYoYm9keUEpe1xuICAgICAgICAgICAgYm9keUEud2FrZVVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoYm9keUIpe1xuICAgICAgICAgICAgYm9keUIud2FrZVVwKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogVXBkYXRlIGFsbCB0aGUgZXF1YXRpb25zIHdpdGggZGF0YS5cbiAqIEBtZXRob2QgdXBkYXRlXG4gKi9cbkNvbnN0cmFpbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwibWV0aG9kIHVwZGF0ZSgpIG5vdCBpbXBsbWVtZW50ZWQgaW4gdGhpcyBDb25zdHJhaW50IHN1YmNsYXNzIVwiKTtcbn07XG5cbi8qKlxuICogRW5hYmxlcyBhbGwgZXF1YXRpb25zIGluIHRoZSBjb25zdHJhaW50LlxuICogQG1ldGhvZCBlbmFibGVcbiAqL1xuQ29uc3RyYWludC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgZXFzID0gdGhpcy5lcXVhdGlvbnM7XG4gICAgZm9yKHZhciBpPTA7IGk8ZXFzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgZXFzW2ldLmVuYWJsZWQgPSB0cnVlO1xuICAgIH1cbn07XG5cbi8qKlxuICogRGlzYWJsZXMgYWxsIGVxdWF0aW9ucyBpbiB0aGUgY29uc3RyYWludC5cbiAqIEBtZXRob2QgZGlzYWJsZVxuICovXG5Db25zdHJhaW50LnByb3RvdHlwZS5kaXNhYmxlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgZXFzID0gdGhpcy5lcXVhdGlvbnM7XG4gICAgZm9yKHZhciBpPTA7IGk8ZXFzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgZXFzW2ldLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG59O1xuXG5Db25zdHJhaW50LmlkQ291bnRlciA9IDA7XG5cbn0se1wiLi4vdXRpbHMvVXRpbHNcIjo1M31dLDE0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gRGlzdGFuY2VDb25zdHJhaW50O1xuXG52YXIgQ29uc3RyYWludCA9IF9kZXJlcV8oJy4vQ29uc3RyYWludCcpO1xudmFyIENvbnRhY3RFcXVhdGlvbiA9IF9kZXJlcV8oJy4uL2VxdWF0aW9ucy9Db250YWN0RXF1YXRpb24nKTtcblxuLyoqXG4gKiBDb25zdHJhaW5zIHR3byBib2RpZXMgdG8gYmUgYXQgYSBjb25zdGFudCBkaXN0YW5jZSBmcm9tIGVhY2ggb3RoZXJzIGNlbnRlciBvZiBtYXNzLlxuICogQGNsYXNzIERpc3RhbmNlQ29uc3RyYWludFxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXV0aG9yIHNjaHRlcHBlXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlBXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlCXG4gKiBAcGFyYW0ge051bWJlcn0gW2Rpc3RhbmNlXSBUaGUgZGlzdGFuY2UgdG8ga2VlcC4gSWYgdW5kZWZpbmVkLCBpdCB3aWxsIGJlIHNldCB0byB0aGUgY3VycmVudCBkaXN0YW5jZSBiZXR3ZWVuIGJvZHlBIGFuZCBib2R5QlxuICogQHBhcmFtIHtOdW1iZXJ9IFttYXhGb3JjZT0xZTZdXG4gKiBAZXh0ZW5kcyBDb25zdHJhaW50XG4gKi9cbmZ1bmN0aW9uIERpc3RhbmNlQ29uc3RyYWludChib2R5QSxib2R5QixkaXN0YW5jZSxtYXhGb3JjZSl7XG4gICAgQ29uc3RyYWludC5jYWxsKHRoaXMsYm9keUEsYm9keUIpO1xuXG4gICAgaWYodHlwZW9mKGRpc3RhbmNlKT09PVwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgZGlzdGFuY2UgPSBib2R5QS5wb3NpdGlvbi5kaXN0YW5jZVRvKGJvZHlCLnBvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBpZih0eXBlb2YobWF4Rm9yY2UpPT09XCJ1bmRlZmluZWRcIikge1xuICAgICAgICBtYXhGb3JjZSA9IDFlNjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gZGlzdGFuY2VcbiAgICAgKi9cbiAgICB0aGlzLmRpc3RhbmNlID0gZGlzdGFuY2U7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge0NvbnRhY3RFcXVhdGlvbn0gZGlzdGFuY2VFcXVhdGlvblxuICAgICAqL1xuICAgIHZhciBlcSA9IHRoaXMuZGlzdGFuY2VFcXVhdGlvbiA9IG5ldyBDb250YWN0RXF1YXRpb24oYm9keUEsIGJvZHlCKTtcbiAgICB0aGlzLmVxdWF0aW9ucy5wdXNoKGVxKTtcblxuICAgIC8vIE1ha2UgaXQgYmlkaXJlY3Rpb25hbFxuICAgIGVxLm1pbkZvcmNlID0gLW1heEZvcmNlO1xuICAgIGVxLm1heEZvcmNlID0gIG1heEZvcmNlO1xufVxuRGlzdGFuY2VDb25zdHJhaW50LnByb3RvdHlwZSA9IG5ldyBDb25zdHJhaW50KCk7XG5cbkRpc3RhbmNlQ29uc3RyYWludC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgYm9keUEgPSB0aGlzLmJvZHlBO1xuICAgIHZhciBib2R5QiA9IHRoaXMuYm9keUI7XG4gICAgdmFyIGVxID0gdGhpcy5kaXN0YW5jZUVxdWF0aW9uO1xuICAgIHZhciBoYWxmRGlzdCA9IHRoaXMuZGlzdGFuY2UgKiAwLjU7XG4gICAgdmFyIG5vcm1hbCA9IGVxLm5pO1xuXG4gICAgYm9keUIucG9zaXRpb24udnN1Yihib2R5QS5wb3NpdGlvbiwgbm9ybWFsKTtcbiAgICBub3JtYWwubm9ybWFsaXplKCk7XG4gICAgbm9ybWFsLm11bHQoaGFsZkRpc3QsIGVxLnJpKTtcbiAgICBub3JtYWwubXVsdCgtaGFsZkRpc3QsIGVxLnJqKTtcbn07XG59LHtcIi4uL2VxdWF0aW9ucy9Db250YWN0RXF1YXRpb25cIjoxOSxcIi4vQ29uc3RyYWludFwiOjEzfV0sMTU6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBIaW5nZUNvbnN0cmFpbnQ7XG5cbnZhciBDb25zdHJhaW50ID0gX2RlcmVxXygnLi9Db25zdHJhaW50Jyk7XG52YXIgUG9pbnRUb1BvaW50Q29uc3RyYWludCA9IF9kZXJlcV8oJy4vUG9pbnRUb1BvaW50Q29uc3RyYWludCcpO1xudmFyIFJvdGF0aW9uYWxFcXVhdGlvbiA9IF9kZXJlcV8oJy4uL2VxdWF0aW9ucy9Sb3RhdGlvbmFsRXF1YXRpb24nKTtcbnZhciBSb3RhdGlvbmFsTW90b3JFcXVhdGlvbiA9IF9kZXJlcV8oJy4uL2VxdWF0aW9ucy9Sb3RhdGlvbmFsTW90b3JFcXVhdGlvbicpO1xudmFyIENvbnRhY3RFcXVhdGlvbiA9IF9kZXJlcV8oJy4uL2VxdWF0aW9ucy9Db250YWN0RXF1YXRpb24nKTtcbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG5cbi8qKlxuICogSGluZ2UgY29uc3RyYWludC4gVGhpbmsgb2YgaXQgYXMgYSBkb29yIGhpbmdlLiBJdCB0cmllcyB0byBrZWVwIHRoZSBkb29yIGluIHRoZSBjb3JyZWN0IHBsYWNlIGFuZCB3aXRoIHRoZSBjb3JyZWN0IG9yaWVudGF0aW9uLlxuICogQGNsYXNzIEhpbmdlQ29uc3RyYWludFxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXV0aG9yIHNjaHRlcHBlXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlBXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlCXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge1ZlYzN9IFtvcHRpb25zLnBpdm90QV0gQSBwb2ludCBkZWZpbmVkIGxvY2FsbHkgaW4gYm9keUEuIFRoaXMgZGVmaW5lcyB0aGUgb2Zmc2V0IG9mIGF4aXNBLlxuICogQHBhcmFtIHtWZWMzfSBbb3B0aW9ucy5heGlzQV0gQW4gYXhpcyB0aGF0IGJvZHlBIGNhbiByb3RhdGUgYXJvdW5kLCBkZWZpbmVkIGxvY2FsbHkgaW4gYm9keUEuXG4gKiBAcGFyYW0ge1ZlYzN9IFtvcHRpb25zLnBpdm90Ql1cbiAqIEBwYXJhbSB7VmVjM30gW29wdGlvbnMuYXhpc0JdXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4Rm9yY2U9MWU2XVxuICogQGV4dGVuZHMgUG9pbnRUb1BvaW50Q29uc3RyYWludFxuICovXG5mdW5jdGlvbiBIaW5nZUNvbnN0cmFpbnQoYm9keUEsIGJvZHlCLCBvcHRpb25zKXtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgbWF4Rm9yY2UgPSB0eXBlb2Yob3B0aW9ucy5tYXhGb3JjZSkgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5tYXhGb3JjZSA6IDFlNjtcbiAgICB2YXIgcGl2b3RBID0gb3B0aW9ucy5waXZvdEEgPyBvcHRpb25zLnBpdm90QS5jbG9uZSgpIDogbmV3IFZlYzMoKTtcbiAgICB2YXIgcGl2b3RCID0gb3B0aW9ucy5waXZvdEIgPyBvcHRpb25zLnBpdm90Qi5jbG9uZSgpIDogbmV3IFZlYzMoKTtcblxuICAgIFBvaW50VG9Qb2ludENvbnN0cmFpbnQuY2FsbCh0aGlzLCBib2R5QSwgcGl2b3RBLCBib2R5QiwgcGl2b3RCLCBtYXhGb3JjZSk7XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGlvbiBheGlzLCBkZWZpbmVkIGxvY2FsbHkgaW4gYm9keUEuXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBheGlzQVxuICAgICAqL1xuICAgIHZhciBheGlzQSA9IHRoaXMuYXhpc0EgPSBvcHRpb25zLmF4aXNBID8gb3B0aW9ucy5heGlzQS5jbG9uZSgpIDogbmV3IFZlYzMoMSwwLDApO1xuICAgIGF4aXNBLm5vcm1hbGl6ZSgpO1xuXG4gICAgLyoqXG4gICAgICogUm90YXRpb24gYXhpcywgZGVmaW5lZCBsb2NhbGx5IGluIGJvZHlCLlxuICAgICAqIEBwcm9wZXJ0eSB7VmVjM30gYXhpc0JcbiAgICAgKi9cbiAgICB2YXIgYXhpc0IgPSB0aGlzLmF4aXNCID0gb3B0aW9ucy5heGlzQiA/IG9wdGlvbnMuYXhpc0IuY2xvbmUoKSA6IG5ldyBWZWMzKDEsMCwwKTtcbiAgICBheGlzQi5ub3JtYWxpemUoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7Um90YXRpb25hbEVxdWF0aW9ufSByb3RhdGlvbmFsRXF1YXRpb24xXG4gICAgICovXG4gICAgdmFyIHIxID0gdGhpcy5yb3RhdGlvbmFsRXF1YXRpb24xID0gbmV3IFJvdGF0aW9uYWxFcXVhdGlvbihib2R5QSxib2R5QixvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7Um90YXRpb25hbEVxdWF0aW9ufSByb3RhdGlvbmFsRXF1YXRpb24yXG4gICAgICovXG4gICAgdmFyIHIyID0gdGhpcy5yb3RhdGlvbmFsRXF1YXRpb24yID0gbmV3IFJvdGF0aW9uYWxFcXVhdGlvbihib2R5QSxib2R5QixvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7Um90YXRpb25hbE1vdG9yRXF1YXRpb259IG1vdG9yRXF1YXRpb25cbiAgICAgKi9cbiAgICB2YXIgbW90b3IgPSB0aGlzLm1vdG9yRXF1YXRpb24gPSBuZXcgUm90YXRpb25hbE1vdG9yRXF1YXRpb24oYm9keUEsYm9keUIsbWF4Rm9yY2UpO1xuICAgIG1vdG9yLmVuYWJsZWQgPSBmYWxzZTsgLy8gTm90IGVuYWJsZWQgYnkgZGVmYXVsdFxuXG4gICAgLy8gRXF1YXRpb25zIHRvIGJlIGZlZCB0byB0aGUgc29sdmVyXG4gICAgdGhpcy5lcXVhdGlvbnMucHVzaChcbiAgICAgICAgcjEsIC8vIHJvdGF0aW9uYWwxXG4gICAgICAgIHIyLCAvLyByb3RhdGlvbmFsMlxuICAgICAgICBtb3RvclxuICAgICk7XG59XG5IaW5nZUNvbnN0cmFpbnQucHJvdG90eXBlID0gbmV3IFBvaW50VG9Qb2ludENvbnN0cmFpbnQoKTtcbkhpbmdlQ29uc3RyYWludC5jb25zdHJ1Y3RvciA9IEhpbmdlQ29uc3RyYWludDtcblxuLyoqXG4gKiBAbWV0aG9kIGVuYWJsZU1vdG9yXG4gKi9cbkhpbmdlQ29uc3RyYWludC5wcm90b3R5cGUuZW5hYmxlTW90b3IgPSBmdW5jdGlvbigpe1xuICAgIHRoaXMubW90b3JFcXVhdGlvbi5lbmFibGVkID0gdHJ1ZTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBkaXNhYmxlTW90b3JcbiAqL1xuSGluZ2VDb25zdHJhaW50LnByb3RvdHlwZS5kaXNhYmxlTW90b3IgPSBmdW5jdGlvbigpe1xuICAgIHRoaXMubW90b3JFcXVhdGlvbi5lbmFibGVkID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0TW90b3JTcGVlZFxuICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkXG4gKi9cbkhpbmdlQ29uc3RyYWludC5wcm90b3R5cGUuc2V0TW90b3JTcGVlZCA9IGZ1bmN0aW9uKHNwZWVkKXtcbiAgICB0aGlzLm1vdG9yRXF1YXRpb24udGFyZ2V0VmVsb2NpdHkgPSBzcGVlZDtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRNb3Rvck1heEZvcmNlXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4Rm9yY2VcbiAqL1xuSGluZ2VDb25zdHJhaW50LnByb3RvdHlwZS5zZXRNb3Rvck1heEZvcmNlID0gZnVuY3Rpb24obWF4Rm9yY2Upe1xuICAgIHRoaXMubW90b3JFcXVhdGlvbi5tYXhGb3JjZSA9IG1heEZvcmNlO1xuICAgIHRoaXMubW90b3JFcXVhdGlvbi5taW5Gb3JjZSA9IC1tYXhGb3JjZTtcbn07XG5cbnZhciBIaW5nZUNvbnN0cmFpbnRfdXBkYXRlX3RtcFZlYzEgPSBuZXcgVmVjMygpO1xudmFyIEhpbmdlQ29uc3RyYWludF91cGRhdGVfdG1wVmVjMiA9IG5ldyBWZWMzKCk7XG5cbkhpbmdlQ29uc3RyYWludC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgYm9keUEgPSB0aGlzLmJvZHlBLFxuICAgICAgICBib2R5QiA9IHRoaXMuYm9keUIsXG4gICAgICAgIG1vdG9yID0gdGhpcy5tb3RvckVxdWF0aW9uLFxuICAgICAgICByMSA9IHRoaXMucm90YXRpb25hbEVxdWF0aW9uMSxcbiAgICAgICAgcjIgPSB0aGlzLnJvdGF0aW9uYWxFcXVhdGlvbjIsXG4gICAgICAgIHdvcmxkQXhpc0EgPSBIaW5nZUNvbnN0cmFpbnRfdXBkYXRlX3RtcFZlYzEsXG4gICAgICAgIHdvcmxkQXhpc0IgPSBIaW5nZUNvbnN0cmFpbnRfdXBkYXRlX3RtcFZlYzI7XG5cbiAgICB2YXIgYXhpc0EgPSB0aGlzLmF4aXNBO1xuICAgIHZhciBheGlzQiA9IHRoaXMuYXhpc0I7XG5cbiAgICBQb2ludFRvUG9pbnRDb25zdHJhaW50LnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzKTtcblxuICAgIC8vIEdldCB3b3JsZCBheGVzXG4gICAgYm9keUEucXVhdGVybmlvbi52bXVsdChheGlzQSwgd29ybGRBeGlzQSk7XG4gICAgYm9keUIucXVhdGVybmlvbi52bXVsdChheGlzQiwgd29ybGRBeGlzQik7XG5cbiAgICB3b3JsZEF4aXNBLnRhbmdlbnRzKHIxLmF4aXNBLCByMi5heGlzQSk7XG4gICAgcjEuYXhpc0IuY29weSh3b3JsZEF4aXNCKTtcbiAgICByMi5heGlzQi5jb3B5KHdvcmxkQXhpc0IpO1xuXG4gICAgaWYodGhpcy5tb3RvckVxdWF0aW9uLmVuYWJsZWQpe1xuICAgICAgICBib2R5QS5xdWF0ZXJuaW9uLnZtdWx0KHRoaXMuYXhpc0EsIG1vdG9yLmF4aXNBKTtcbiAgICAgICAgYm9keUIucXVhdGVybmlvbi52bXVsdCh0aGlzLmF4aXNCLCBtb3Rvci5heGlzQik7XG4gICAgfVxufTtcblxuXG59LHtcIi4uL2VxdWF0aW9ucy9Db250YWN0RXF1YXRpb25cIjoxOSxcIi4uL2VxdWF0aW9ucy9Sb3RhdGlvbmFsRXF1YXRpb25cIjoyMixcIi4uL2VxdWF0aW9ucy9Sb3RhdGlvbmFsTW90b3JFcXVhdGlvblwiOjIzLFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuL0NvbnN0cmFpbnRcIjoxMyxcIi4vUG9pbnRUb1BvaW50Q29uc3RyYWludFwiOjE3fV0sMTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBMb2NrQ29uc3RyYWludDtcblxudmFyIENvbnN0cmFpbnQgPSBfZGVyZXFfKCcuL0NvbnN0cmFpbnQnKTtcbnZhciBQb2ludFRvUG9pbnRDb25zdHJhaW50ID0gX2RlcmVxXygnLi9Qb2ludFRvUG9pbnRDb25zdHJhaW50Jyk7XG52YXIgUm90YXRpb25hbEVxdWF0aW9uID0gX2RlcmVxXygnLi4vZXF1YXRpb25zL1JvdGF0aW9uYWxFcXVhdGlvbicpO1xudmFyIFJvdGF0aW9uYWxNb3RvckVxdWF0aW9uID0gX2RlcmVxXygnLi4vZXF1YXRpb25zL1JvdGF0aW9uYWxNb3RvckVxdWF0aW9uJyk7XG52YXIgQ29udGFjdEVxdWF0aW9uID0gX2RlcmVxXygnLi4vZXF1YXRpb25zL0NvbnRhY3RFcXVhdGlvbicpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcblxuLyoqXG4gKiBMb2NrIGNvbnN0cmFpbnQuIFdpbGwgcmVtb3ZlIGFsbCBkZWdyZWVzIG9mIGZyZWVkb20gYmV0d2VlbiB0aGUgYm9kaWVzLlxuICogQGNsYXNzIExvY2tDb25zdHJhaW50XG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdXRob3Igc2NodGVwcGVcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUFcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUJcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5tYXhGb3JjZT0xZTZdXG4gKiBAZXh0ZW5kcyBQb2ludFRvUG9pbnRDb25zdHJhaW50XG4gKi9cbmZ1bmN0aW9uIExvY2tDb25zdHJhaW50KGJvZHlBLCBib2R5Qiwgb3B0aW9ucyl7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIG1heEZvcmNlID0gdHlwZW9mKG9wdGlvbnMubWF4Rm9yY2UpICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMubWF4Rm9yY2UgOiAxZTY7XG5cbiAgICAvLyBTZXQgcGl2b3QgcG9pbnQgaW4gYmV0d2VlblxuICAgIHZhciBwaXZvdEEgPSBuZXcgVmVjMygpO1xuICAgIHZhciBwaXZvdEIgPSBuZXcgVmVjMygpO1xuICAgIHZhciBoYWxmV2F5ID0gbmV3IFZlYzMoKTtcbiAgICBib2R5QS5wb3NpdGlvbi52YWRkKGJvZHlCLnBvc2l0aW9uLCBoYWxmV2F5KTtcbiAgICBoYWxmV2F5LnNjYWxlKDAuNSwgaGFsZldheSk7XG4gICAgYm9keUIucG9pbnRUb0xvY2FsRnJhbWUoaGFsZldheSwgcGl2b3RCKTtcbiAgICBib2R5QS5wb2ludFRvTG9jYWxGcmFtZShoYWxmV2F5LCBwaXZvdEEpO1xuICAgIFBvaW50VG9Qb2ludENvbnN0cmFpbnQuY2FsbCh0aGlzLCBib2R5QSwgcGl2b3RBLCBib2R5QiwgcGl2b3RCLCBtYXhGb3JjZSk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1JvdGF0aW9uYWxFcXVhdGlvbn0gcm90YXRpb25hbEVxdWF0aW9uMVxuICAgICAqL1xuICAgIHZhciByMSA9IHRoaXMucm90YXRpb25hbEVxdWF0aW9uMSA9IG5ldyBSb3RhdGlvbmFsRXF1YXRpb24oYm9keUEsYm9keUIsb3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1JvdGF0aW9uYWxFcXVhdGlvbn0gcm90YXRpb25hbEVxdWF0aW9uMlxuICAgICAqL1xuICAgIHZhciByMiA9IHRoaXMucm90YXRpb25hbEVxdWF0aW9uMiA9IG5ldyBSb3RhdGlvbmFsRXF1YXRpb24oYm9keUEsYm9keUIsb3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1JvdGF0aW9uYWxFcXVhdGlvbn0gcm90YXRpb25hbEVxdWF0aW9uM1xuICAgICAqL1xuICAgIHZhciByMyA9IHRoaXMucm90YXRpb25hbEVxdWF0aW9uMyA9IG5ldyBSb3RhdGlvbmFsRXF1YXRpb24oYm9keUEsYm9keUIsb3B0aW9ucyk7XG5cbiAgICB0aGlzLmVxdWF0aW9ucy5wdXNoKHIxLCByMiwgcjMpO1xufVxuTG9ja0NvbnN0cmFpbnQucHJvdG90eXBlID0gbmV3IFBvaW50VG9Qb2ludENvbnN0cmFpbnQoKTtcbkxvY2tDb25zdHJhaW50LmNvbnN0cnVjdG9yID0gTG9ja0NvbnN0cmFpbnQ7XG5cbnZhciBMb2NrQ29uc3RyYWludF91cGRhdGVfdG1wVmVjMSA9IG5ldyBWZWMzKCk7XG52YXIgTG9ja0NvbnN0cmFpbnRfdXBkYXRlX3RtcFZlYzIgPSBuZXcgVmVjMygpO1xuXG5Mb2NrQ29uc3RyYWludC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgYm9keUEgPSB0aGlzLmJvZHlBLFxuICAgICAgICBib2R5QiA9IHRoaXMuYm9keUIsXG4gICAgICAgIG1vdG9yID0gdGhpcy5tb3RvckVxdWF0aW9uLFxuICAgICAgICByMSA9IHRoaXMucm90YXRpb25hbEVxdWF0aW9uMSxcbiAgICAgICAgcjIgPSB0aGlzLnJvdGF0aW9uYWxFcXVhdGlvbjIsXG4gICAgICAgIHIzID0gdGhpcy5yb3RhdGlvbmFsRXF1YXRpb24zLFxuICAgICAgICB3b3JsZEF4aXNBID0gTG9ja0NvbnN0cmFpbnRfdXBkYXRlX3RtcFZlYzEsXG4gICAgICAgIHdvcmxkQXhpc0IgPSBMb2NrQ29uc3RyYWludF91cGRhdGVfdG1wVmVjMjtcblxuICAgIFBvaW50VG9Qb2ludENvbnN0cmFpbnQucHJvdG90eXBlLnVwZGF0ZS5jYWxsKHRoaXMpO1xuXG4gICAgYm9keUEudmVjdG9yVG9Xb3JsZEZyYW1lKFZlYzMuVU5JVF9YLCByMS5heGlzQSk7XG4gICAgYm9keUIudmVjdG9yVG9Xb3JsZEZyYW1lKFZlYzMuVU5JVF9ZLCByMS5heGlzQik7XG5cbiAgICBib2R5QS52ZWN0b3JUb1dvcmxkRnJhbWUoVmVjMy5VTklUX1ksIHIyLmF4aXNBKTtcbiAgICBib2R5Qi52ZWN0b3JUb1dvcmxkRnJhbWUoVmVjMy5VTklUX1osIHIyLmF4aXNCKTtcblxuICAgIGJvZHlBLnZlY3RvclRvV29ybGRGcmFtZShWZWMzLlVOSVRfWiwgcjMuYXhpc0EpO1xuICAgIGJvZHlCLnZlY3RvclRvV29ybGRGcmFtZShWZWMzLlVOSVRfWCwgcjMuYXhpc0IpO1xufTtcblxuXG59LHtcIi4uL2VxdWF0aW9ucy9Db250YWN0RXF1YXRpb25cIjoxOSxcIi4uL2VxdWF0aW9ucy9Sb3RhdGlvbmFsRXF1YXRpb25cIjoyMixcIi4uL2VxdWF0aW9ucy9Sb3RhdGlvbmFsTW90b3JFcXVhdGlvblwiOjIzLFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuL0NvbnN0cmFpbnRcIjoxMyxcIi4vUG9pbnRUb1BvaW50Q29uc3RyYWludFwiOjE3fV0sMTc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBQb2ludFRvUG9pbnRDb25zdHJhaW50O1xuXG52YXIgQ29uc3RyYWludCA9IF9kZXJlcV8oJy4vQ29uc3RyYWludCcpO1xudmFyIENvbnRhY3RFcXVhdGlvbiA9IF9kZXJlcV8oJy4uL2VxdWF0aW9ucy9Db250YWN0RXF1YXRpb24nKTtcbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG5cbi8qKlxuICogQ29ubmVjdHMgdHdvIGJvZGllcyBhdCBnaXZlbiBvZmZzZXQgcG9pbnRzLlxuICogQGNsYXNzIFBvaW50VG9Qb2ludENvbnN0cmFpbnRcbiAqIEBleHRlbmRzIENvbnN0cmFpbnRcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCb2R5fSBib2R5QVxuICogQHBhcmFtIHtWZWMzfSBwaXZvdEEgVGhlIHBvaW50IHJlbGF0aXZlIHRvIHRoZSBjZW50ZXIgb2YgbWFzcyBvZiBib2R5QSB3aGljaCBib2R5QSBpcyBjb25zdHJhaW5lZCB0by5cbiAqIEBwYXJhbSB7Qm9keX0gYm9keUIgQm9keSB0aGF0IHdpbGwgYmUgY29uc3RyYWluZWQgaW4gYSBzaW1pbGFyIHdheSB0byB0aGUgc2FtZSBwb2ludCBhcyBib2R5QS4gV2Ugd2lsbCB0aGVyZWZvcmUgZ2V0IGEgbGluayBiZXR3ZWVuIGJvZHlBIGFuZCBib2R5Qi4gSWYgbm90IHNwZWNpZmllZCwgYm9keUEgd2lsbCBiZSBjb25zdHJhaW5lZCB0byBhIHN0YXRpYyBwb2ludC5cbiAqIEBwYXJhbSB7VmVjM30gcGl2b3RCIFNlZSBwaXZvdEEuXG4gKiBAcGFyYW0ge051bWJlcn0gbWF4Rm9yY2UgVGhlIG1heGltdW0gZm9yY2UgdGhhdCBzaG91bGQgYmUgYXBwbGllZCB0byBjb25zdHJhaW4gdGhlIGJvZGllcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogICAgIHZhciBib2R5QSA9IG5ldyBCb2R5KHsgbWFzczogMSB9KTtcbiAqICAgICB2YXIgYm9keUIgPSBuZXcgQm9keSh7IG1hc3M6IDEgfSk7XG4gKiAgICAgYm9keUEucG9zaXRpb24uc2V0KC0xLCAwLCAwKTtcbiAqICAgICBib2R5Qi5wb3NpdGlvbi5zZXQoMSwgMCwgMCk7XG4gKiAgICAgYm9keUEuYWRkU2hhcGUoc2hhcGVBKTtcbiAqICAgICBib2R5Qi5hZGRTaGFwZShzaGFwZUIpO1xuICogICAgIHdvcmxkLmFkZEJvZHkoYm9keUEpO1xuICogICAgIHdvcmxkLmFkZEJvZHkoYm9keUIpO1xuICogICAgIHZhciBsb2NhbFBpdm90QSA9IG5ldyBWZWMzKDEsIDAsIDApO1xuICogICAgIHZhciBsb2NhbFBpdm90QiA9IG5ldyBWZWMzKC0xLCAwLCAwKTtcbiAqICAgICB2YXIgY29uc3RyYWludCA9IG5ldyBQb2ludFRvUG9pbnRDb25zdHJhaW50KGJvZHlBLCBsb2NhbFBpdm90QSwgYm9keUIsIGxvY2FsUGl2b3RCKTtcbiAqICAgICB3b3JsZC5hZGRDb25zdHJhaW50KGNvbnN0cmFpbnQpO1xuICovXG5mdW5jdGlvbiBQb2ludFRvUG9pbnRDb25zdHJhaW50KGJvZHlBLHBpdm90QSxib2R5QixwaXZvdEIsbWF4Rm9yY2Upe1xuICAgIENvbnN0cmFpbnQuY2FsbCh0aGlzLGJvZHlBLGJvZHlCKTtcblxuICAgIG1heEZvcmNlID0gdHlwZW9mKG1heEZvcmNlKSAhPT0gJ3VuZGVmaW5lZCcgPyBtYXhGb3JjZSA6IDFlNjtcblxuICAgIC8qKlxuICAgICAqIFBpdm90LCBkZWZpbmVkIGxvY2FsbHkgaW4gYm9keUEuXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBwaXZvdEFcbiAgICAgKi9cbiAgICB0aGlzLnBpdm90QSA9IHBpdm90QSA/IHBpdm90QS5jbG9uZSgpIDogbmV3IFZlYzMoKTtcblxuICAgIC8qKlxuICAgICAqIFBpdm90LCBkZWZpbmVkIGxvY2FsbHkgaW4gYm9keUIuXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBwaXZvdEJcbiAgICAgKi9cbiAgICB0aGlzLnBpdm90QiA9IHBpdm90QiA/IHBpdm90Qi5jbG9uZSgpIDogbmV3IFZlYzMoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7Q29udGFjdEVxdWF0aW9ufSBlcXVhdGlvblhcbiAgICAgKi9cbiAgICB2YXIgeCA9IHRoaXMuZXF1YXRpb25YID0gbmV3IENvbnRhY3RFcXVhdGlvbihib2R5QSxib2R5Qik7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge0NvbnRhY3RFcXVhdGlvbn0gZXF1YXRpb25ZXG4gICAgICovXG4gICAgdmFyIHkgPSB0aGlzLmVxdWF0aW9uWSA9IG5ldyBDb250YWN0RXF1YXRpb24oYm9keUEsYm9keUIpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtDb250YWN0RXF1YXRpb259IGVxdWF0aW9uWlxuICAgICAqL1xuICAgIHZhciB6ID0gdGhpcy5lcXVhdGlvblogPSBuZXcgQ29udGFjdEVxdWF0aW9uKGJvZHlBLGJvZHlCKTtcblxuICAgIC8vIEVxdWF0aW9ucyB0byBiZSBmZWQgdG8gdGhlIHNvbHZlclxuICAgIHRoaXMuZXF1YXRpb25zLnB1c2goeCwgeSwgeik7XG5cbiAgICAvLyBNYWtlIHRoZSBlcXVhdGlvbnMgYmlkaXJlY3Rpb25hbFxuICAgIHgubWluRm9yY2UgPSB5Lm1pbkZvcmNlID0gei5taW5Gb3JjZSA9IC1tYXhGb3JjZTtcbiAgICB4Lm1heEZvcmNlID0geS5tYXhGb3JjZSA9IHoubWF4Rm9yY2UgPSAgbWF4Rm9yY2U7XG5cbiAgICB4Lm5pLnNldCgxLCAwLCAwKTtcbiAgICB5Lm5pLnNldCgwLCAxLCAwKTtcbiAgICB6Lm5pLnNldCgwLCAwLCAxKTtcbn1cblBvaW50VG9Qb2ludENvbnN0cmFpbnQucHJvdG90eXBlID0gbmV3IENvbnN0cmFpbnQoKTtcblxuUG9pbnRUb1BvaW50Q29uc3RyYWludC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgYm9keUEgPSB0aGlzLmJvZHlBO1xuICAgIHZhciBib2R5QiA9IHRoaXMuYm9keUI7XG4gICAgdmFyIHggPSB0aGlzLmVxdWF0aW9uWDtcbiAgICB2YXIgeSA9IHRoaXMuZXF1YXRpb25ZO1xuICAgIHZhciB6ID0gdGhpcy5lcXVhdGlvblo7XG5cbiAgICAvLyBSb3RhdGUgdGhlIHBpdm90cyB0byB3b3JsZCBzcGFjZVxuICAgIGJvZHlBLnF1YXRlcm5pb24udm11bHQodGhpcy5waXZvdEEseC5yaSk7XG4gICAgYm9keUIucXVhdGVybmlvbi52bXVsdCh0aGlzLnBpdm90Qix4LnJqKTtcblxuICAgIHkucmkuY29weSh4LnJpKTtcbiAgICB5LnJqLmNvcHkoeC5yaik7XG4gICAgei5yaS5jb3B5KHgucmkpO1xuICAgIHoucmouY29weSh4LnJqKTtcbn07XG59LHtcIi4uL2VxdWF0aW9ucy9Db250YWN0RXF1YXRpb25cIjoxOSxcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi9Db25zdHJhaW50XCI6MTN9XSwxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IENvbmVFcXVhdGlvbjtcblxudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBNYXQzID0gX2RlcmVxXygnLi4vbWF0aC9NYXQzJyk7XG52YXIgRXF1YXRpb24gPSBfZGVyZXFfKCcuL0VxdWF0aW9uJyk7XG5cbi8qKlxuICogQ29uZSBlcXVhdGlvbi4gV29ya3MgdG8ga2VlcCB0aGUgZ2l2ZW4gYm9keSB3b3JsZCB2ZWN0b3JzIGFsaWduZWQsIG9yIHRpbHRlZCB3aXRoaW4gYSBnaXZlbiBhbmdsZSBmcm9tIGVhY2ggb3RoZXIuXG4gKiBAY2xhc3MgQ29uZUVxdWF0aW9uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdXRob3Igc2NodGVwcGVcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUFcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUJcbiAqIEBwYXJhbSB7VmVjM30gW29wdGlvbnMuYXhpc0FdIExvY2FsIGF4aXMgaW4gQVxuICogQHBhcmFtIHtWZWMzfSBbb3B0aW9ucy5heGlzQl0gTG9jYWwgYXhpcyBpbiBCXG4gKiBAcGFyYW0ge1ZlYzN9IFtvcHRpb25zLmFuZ2xlXSBUaGUgXCJjb25lIGFuZ2xlXCIgdG8ga2VlcFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heEZvcmNlPTFlNl1cbiAqIEBleHRlbmRzIEVxdWF0aW9uXG4gKi9cbmZ1bmN0aW9uIENvbmVFcXVhdGlvbihib2R5QSwgYm9keUIsIG9wdGlvbnMpe1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciBtYXhGb3JjZSA9IHR5cGVvZihvcHRpb25zLm1heEZvcmNlKSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLm1heEZvcmNlIDogMWU2O1xuXG4gICAgRXF1YXRpb24uY2FsbCh0aGlzLGJvZHlBLGJvZHlCLC1tYXhGb3JjZSwgbWF4Rm9yY2UpO1xuXG4gICAgdGhpcy5heGlzQSA9IG9wdGlvbnMuYXhpc0EgPyBvcHRpb25zLmF4aXNBLmNsb25lKCkgOiBuZXcgVmVjMygxLCAwLCAwKTtcbiAgICB0aGlzLmF4aXNCID0gb3B0aW9ucy5heGlzQiA/IG9wdGlvbnMuYXhpc0IuY2xvbmUoKSA6IG5ldyBWZWMzKDAsIDEsIDApO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbmUgYW5nbGUgdG8ga2VlcFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBhbmdsZVxuICAgICAqL1xuICAgIHRoaXMuYW5nbGUgPSB0eXBlb2Yob3B0aW9ucy5hbmdsZSkgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5hbmdsZSA6IDA7XG59XG5cbkNvbmVFcXVhdGlvbi5wcm90b3R5cGUgPSBuZXcgRXF1YXRpb24oKTtcbkNvbmVFcXVhdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25lRXF1YXRpb247XG5cbnZhciB0bXBWZWMxID0gbmV3IFZlYzMoKTtcbnZhciB0bXBWZWMyID0gbmV3IFZlYzMoKTtcblxuQ29uZUVxdWF0aW9uLnByb3RvdHlwZS5jb21wdXRlQiA9IGZ1bmN0aW9uKGgpe1xuICAgIHZhciBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iLFxuXG4gICAgICAgIG5pID0gdGhpcy5heGlzQSxcbiAgICAgICAgbmogPSB0aGlzLmF4aXNCLFxuXG4gICAgICAgIG5peG5qID0gdG1wVmVjMSxcbiAgICAgICAgbmp4bmkgPSB0bXBWZWMyLFxuXG4gICAgICAgIEdBID0gdGhpcy5qYWNvYmlhbkVsZW1lbnRBLFxuICAgICAgICBHQiA9IHRoaXMuamFjb2JpYW5FbGVtZW50QjtcblxuICAgIC8vIENhbHVjbGF0ZSBjcm9zcyBwcm9kdWN0c1xuICAgIG5pLmNyb3NzKG5qLCBuaXhuaik7XG4gICAgbmouY3Jvc3MobmksIG5qeG5pKTtcblxuICAgIC8vIFRoZSBhbmdsZSBiZXR3ZWVuIHR3byB2ZWN0b3IgaXM6XG4gICAgLy8gY29zKHRoZXRhKSA9IGEgKiBiIC8gKGxlbmd0aChhKSAqIGxlbmd0aChiKSA9IHsgbGVuKGEpID0gbGVuKGIpID0gMSB9ID0gYSAqIGJcblxuICAgIC8vIGcgPSBhICogYlxuICAgIC8vIGdkb3QgPSAoYiB4IGEpICogd2kgKyAoYSB4IGIpICogd2pcbiAgICAvLyBHID0gWzAgYnhhIDAgYXhiXVxuICAgIC8vIFcgPSBbdmkgd2kgdmogd2pdXG4gICAgR0Eucm90YXRpb25hbC5jb3B5KG5qeG5pKTtcbiAgICBHQi5yb3RhdGlvbmFsLmNvcHkobml4bmopO1xuXG4gICAgdmFyIGcgPSBNYXRoLmNvcyh0aGlzLmFuZ2xlKSAtIG5pLmRvdChuaiksXG4gICAgICAgIEdXID0gdGhpcy5jb21wdXRlR1coKSxcbiAgICAgICAgR2lNZiA9IHRoaXMuY29tcHV0ZUdpTWYoKTtcblxuICAgIHZhciBCID0gLSBnICogYSAtIEdXICogYiAtIGggKiBHaU1mO1xuXG4gICAgcmV0dXJuIEI7XG59O1xuXG5cbn0se1wiLi4vbWF0aC9NYXQzXCI6MjcsXCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4vRXF1YXRpb25cIjoyMH1dLDE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gQ29udGFjdEVxdWF0aW9uO1xuXG52YXIgRXF1YXRpb24gPSBfZGVyZXFfKCcuL0VxdWF0aW9uJyk7XG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xudmFyIE1hdDMgPSBfZGVyZXFfKCcuLi9tYXRoL01hdDMnKTtcblxuLyoqXG4gKiBDb250YWN0L25vbi1wZW5ldHJhdGlvbiBjb25zdHJhaW50IGVxdWF0aW9uXG4gKiBAY2xhc3MgQ29udGFjdEVxdWF0aW9uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdXRob3Igc2NodGVwcGVcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUFcbiAqIEBwYXJhbSB7Qm9keX0gYm9keUJcbiAqIEBleHRlbmRzIEVxdWF0aW9uXG4gKi9cbmZ1bmN0aW9uIENvbnRhY3RFcXVhdGlvbihib2R5QSwgYm9keUIsIG1heEZvcmNlKXtcbiAgICBtYXhGb3JjZSA9IHR5cGVvZihtYXhGb3JjZSkgIT09ICd1bmRlZmluZWQnID8gbWF4Rm9yY2UgOiAxZTY7XG4gICAgRXF1YXRpb24uY2FsbCh0aGlzLCBib2R5QSwgYm9keUIsIDAsIG1heEZvcmNlKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSByZXN0aXR1dGlvblxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5yZXN0aXR1dGlvbiA9IDAuMDsgLy8gXCJib3VuY2luZXNzXCI6IHUxID0gLWUqdTBcblxuICAgIC8qKlxuICAgICAqIFdvcmxkLW9yaWVudGVkIHZlY3RvciB0aGF0IGdvZXMgZnJvbSB0aGUgY2VudGVyIG9mIGJpIHRvIHRoZSBjb250YWN0IHBvaW50LlxuICAgICAqIEBwcm9wZXJ0eSB7VmVjM30gcmlcbiAgICAgKi9cbiAgICB0aGlzLnJpID0gbmV3IFZlYzMoKTtcblxuICAgIC8qKlxuICAgICAqIFdvcmxkLW9yaWVudGVkIHZlY3RvciB0aGF0IHN0YXJ0cyBpbiBib2R5IGogcG9zaXRpb24gYW5kIGdvZXMgdG8gdGhlIGNvbnRhY3QgcG9pbnQuXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSByalxuICAgICAqL1xuICAgIHRoaXMucmogPSBuZXcgVmVjMygpO1xuXG4gICAgLyoqXG4gICAgICogQ29udGFjdCBub3JtYWwsIHBvaW50aW5nIG91dCBvZiBib2R5IGkuXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBuaVxuICAgICAqL1xuICAgIHRoaXMubmkgPSBuZXcgVmVjMygpO1xufVxuXG5Db250YWN0RXF1YXRpb24ucHJvdG90eXBlID0gbmV3IEVxdWF0aW9uKCk7XG5Db250YWN0RXF1YXRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29udGFjdEVxdWF0aW9uO1xuXG52YXIgQ29udGFjdEVxdWF0aW9uX2NvbXB1dGVCX3RlbXAxID0gbmV3IFZlYzMoKTsgLy8gVGVtcCB2ZWN0b3JzXG52YXIgQ29udGFjdEVxdWF0aW9uX2NvbXB1dGVCX3RlbXAyID0gbmV3IFZlYzMoKTtcbnZhciBDb250YWN0RXF1YXRpb25fY29tcHV0ZUJfdGVtcDMgPSBuZXcgVmVjMygpO1xuQ29udGFjdEVxdWF0aW9uLnByb3RvdHlwZS5jb21wdXRlQiA9IGZ1bmN0aW9uKGgpe1xuICAgIHZhciBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iLFxuICAgICAgICBiaSA9IHRoaXMuYmksXG4gICAgICAgIGJqID0gdGhpcy5iaixcbiAgICAgICAgcmkgPSB0aGlzLnJpLFxuICAgICAgICByaiA9IHRoaXMucmosXG4gICAgICAgIHJpeG4gPSBDb250YWN0RXF1YXRpb25fY29tcHV0ZUJfdGVtcDEsXG4gICAgICAgIHJqeG4gPSBDb250YWN0RXF1YXRpb25fY29tcHV0ZUJfdGVtcDIsXG5cbiAgICAgICAgdmkgPSBiaS52ZWxvY2l0eSxcbiAgICAgICAgd2kgPSBiaS5hbmd1bGFyVmVsb2NpdHksXG4gICAgICAgIGZpID0gYmkuZm9yY2UsXG4gICAgICAgIHRhdWkgPSBiaS50b3JxdWUsXG5cbiAgICAgICAgdmogPSBiai52ZWxvY2l0eSxcbiAgICAgICAgd2ogPSBiai5hbmd1bGFyVmVsb2NpdHksXG4gICAgICAgIGZqID0gYmouZm9yY2UsXG4gICAgICAgIHRhdWogPSBiai50b3JxdWUsXG5cbiAgICAgICAgcGVuZXRyYXRpb25WZWMgPSBDb250YWN0RXF1YXRpb25fY29tcHV0ZUJfdGVtcDMsXG5cbiAgICAgICAgR0EgPSB0aGlzLmphY29iaWFuRWxlbWVudEEsXG4gICAgICAgIEdCID0gdGhpcy5qYWNvYmlhbkVsZW1lbnRCLFxuXG4gICAgICAgIG4gPSB0aGlzLm5pO1xuXG4gICAgLy8gQ2FsdWNsYXRlIGNyb3NzIHByb2R1Y3RzXG4gICAgcmkuY3Jvc3MobixyaXhuKTtcbiAgICByai5jcm9zcyhuLHJqeG4pO1xuXG4gICAgLy8gZyA9IHhqK3JqIC0oeGkrcmkpXG4gICAgLy8gRyA9IFsgLW5pICAtcml4biAgbmkgIHJqeG4gXVxuICAgIG4ubmVnYXRlKEdBLnNwYXRpYWwpO1xuICAgIHJpeG4ubmVnYXRlKEdBLnJvdGF0aW9uYWwpO1xuICAgIEdCLnNwYXRpYWwuY29weShuKTtcbiAgICBHQi5yb3RhdGlvbmFsLmNvcHkocmp4bik7XG5cbiAgICAvLyBDYWxjdWxhdGUgdGhlIHBlbmV0cmF0aW9uIHZlY3RvclxuICAgIHBlbmV0cmF0aW9uVmVjLmNvcHkoYmoucG9zaXRpb24pO1xuICAgIHBlbmV0cmF0aW9uVmVjLnZhZGQocmoscGVuZXRyYXRpb25WZWMpO1xuICAgIHBlbmV0cmF0aW9uVmVjLnZzdWIoYmkucG9zaXRpb24scGVuZXRyYXRpb25WZWMpO1xuICAgIHBlbmV0cmF0aW9uVmVjLnZzdWIocmkscGVuZXRyYXRpb25WZWMpO1xuXG4gICAgdmFyIGcgPSBuLmRvdChwZW5ldHJhdGlvblZlYyk7XG5cbiAgICAvLyBDb21wdXRlIGl0ZXJhdGlvblxuICAgIHZhciBlUGx1c09uZSA9IHRoaXMucmVzdGl0dXRpb24gKyAxO1xuICAgIHZhciBHVyA9IGVQbHVzT25lICogdmouZG90KG4pIC0gZVBsdXNPbmUgKiB2aS5kb3QobikgKyB3ai5kb3Qocmp4bikgLSB3aS5kb3Qocml4bik7XG4gICAgdmFyIEdpTWYgPSB0aGlzLmNvbXB1dGVHaU1mKCk7XG5cbiAgICB2YXIgQiA9IC0gZyAqIGEgLSBHVyAqIGIgLSBoKkdpTWY7XG5cbiAgICByZXR1cm4gQjtcbn07XG5cbnZhciBDb250YWN0RXF1YXRpb25fZ2V0SW1wYWN0VmVsb2NpdHlBbG9uZ05vcm1hbF92aSA9IG5ldyBWZWMzKCk7XG52YXIgQ29udGFjdEVxdWF0aW9uX2dldEltcGFjdFZlbG9jaXR5QWxvbmdOb3JtYWxfdmogPSBuZXcgVmVjMygpO1xudmFyIENvbnRhY3RFcXVhdGlvbl9nZXRJbXBhY3RWZWxvY2l0eUFsb25nTm9ybWFsX3hpID0gbmV3IFZlYzMoKTtcbnZhciBDb250YWN0RXF1YXRpb25fZ2V0SW1wYWN0VmVsb2NpdHlBbG9uZ05vcm1hbF94aiA9IG5ldyBWZWMzKCk7XG52YXIgQ29udGFjdEVxdWF0aW9uX2dldEltcGFjdFZlbG9jaXR5QWxvbmdOb3JtYWxfcmVsVmVsID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBHZXQgdGhlIGN1cnJlbnQgcmVsYXRpdmUgdmVsb2NpdHkgaW4gdGhlIGNvbnRhY3QgcG9pbnQuXG4gKiBAbWV0aG9kIGdldEltcGFjdFZlbG9jaXR5QWxvbmdOb3JtYWxcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuQ29udGFjdEVxdWF0aW9uLnByb3RvdHlwZS5nZXRJbXBhY3RWZWxvY2l0eUFsb25nTm9ybWFsID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgdmkgPSBDb250YWN0RXF1YXRpb25fZ2V0SW1wYWN0VmVsb2NpdHlBbG9uZ05vcm1hbF92aTtcbiAgICB2YXIgdmogPSBDb250YWN0RXF1YXRpb25fZ2V0SW1wYWN0VmVsb2NpdHlBbG9uZ05vcm1hbF92ajtcbiAgICB2YXIgeGkgPSBDb250YWN0RXF1YXRpb25fZ2V0SW1wYWN0VmVsb2NpdHlBbG9uZ05vcm1hbF94aTtcbiAgICB2YXIgeGogPSBDb250YWN0RXF1YXRpb25fZ2V0SW1wYWN0VmVsb2NpdHlBbG9uZ05vcm1hbF94ajtcbiAgICB2YXIgcmVsVmVsID0gQ29udGFjdEVxdWF0aW9uX2dldEltcGFjdFZlbG9jaXR5QWxvbmdOb3JtYWxfcmVsVmVsO1xuXG4gICAgdGhpcy5iaS5wb3NpdGlvbi52YWRkKHRoaXMucmksIHhpKTtcbiAgICB0aGlzLmJqLnBvc2l0aW9uLnZhZGQodGhpcy5yaiwgeGopO1xuXG4gICAgdGhpcy5iaS5nZXRWZWxvY2l0eUF0V29ybGRQb2ludCh4aSwgdmkpO1xuICAgIHRoaXMuYmouZ2V0VmVsb2NpdHlBdFdvcmxkUG9pbnQoeGosIHZqKTtcblxuICAgIHZpLnZzdWIodmosIHJlbFZlbCk7XG5cbiAgICByZXR1cm4gdGhpcy5uaS5kb3QocmVsVmVsKTtcbn07XG5cblxufSx7XCIuLi9tYXRoL01hdDNcIjoyNyxcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi9FcXVhdGlvblwiOjIwfV0sMjA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBFcXVhdGlvbjtcblxudmFyIEphY29iaWFuRWxlbWVudCA9IF9kZXJlcV8oJy4uL21hdGgvSmFjb2JpYW5FbGVtZW50JyksXG4gICAgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xuXG4vKipcbiAqIEVxdWF0aW9uIGJhc2UgY2xhc3NcbiAqIEBjbGFzcyBFcXVhdGlvblxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXV0aG9yIHNjaHRlcHBlXG4gKiBAcGFyYW0ge0JvZHl9IGJpXG4gKiBAcGFyYW0ge0JvZHl9IGJqXG4gKiBAcGFyYW0ge051bWJlcn0gbWluRm9yY2UgTWluaW11bSAocmVhZDogbmVnYXRpdmUgbWF4KSBmb3JjZSB0byBiZSBhcHBsaWVkIGJ5IHRoZSBjb25zdHJhaW50LlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heEZvcmNlIE1heGltdW0gKHJlYWQ6IHBvc2l0aXZlIG1heCkgZm9yY2UgdG8gYmUgYXBwbGllZCBieSB0aGUgY29uc3RyYWludC5cbiAqL1xuZnVuY3Rpb24gRXF1YXRpb24oYmksYmosbWluRm9yY2UsbWF4Rm9yY2Upe1xuICAgIHRoaXMuaWQgPSBFcXVhdGlvbi5pZCsrO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IG1pbkZvcmNlXG4gICAgICovXG4gICAgdGhpcy5taW5Gb3JjZSA9IHR5cGVvZihtaW5Gb3JjZSk9PT1cInVuZGVmaW5lZFwiID8gLTFlNiA6IG1pbkZvcmNlO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IG1heEZvcmNlXG4gICAgICovXG4gICAgdGhpcy5tYXhGb3JjZSA9IHR5cGVvZihtYXhGb3JjZSk9PT1cInVuZGVmaW5lZFwiID8gMWU2IDogbWF4Rm9yY2U7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgYmlcbiAgICAgKiBAdHlwZSB7Qm9keX1cbiAgICAgKi9cbiAgICB0aGlzLmJpID0gYmk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgYmpcbiAgICAgKiBAdHlwZSB7Qm9keX1cbiAgICAgKi9cbiAgICB0aGlzLmJqID0gYmo7XG5cbiAgICAvKipcbiAgICAgKiBTUE9PSyBwYXJhbWV0ZXJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gYVxuICAgICAqL1xuICAgIHRoaXMuYSA9IDAuMDtcblxuICAgIC8qKlxuICAgICAqIFNQT09LIHBhcmFtZXRlclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBiXG4gICAgICovXG4gICAgdGhpcy5iID0gMC4wO1xuXG4gICAgLyoqXG4gICAgICogU1BPT0sgcGFyYW1ldGVyXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGVwc1xuICAgICAqL1xuICAgIHRoaXMuZXBzID0gMC4wO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtKYWNvYmlhbkVsZW1lbnR9IGphY29iaWFuRWxlbWVudEFcbiAgICAgKi9cbiAgICB0aGlzLmphY29iaWFuRWxlbWVudEEgPSBuZXcgSmFjb2JpYW5FbGVtZW50KCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge0phY29iaWFuRWxlbWVudH0gamFjb2JpYW5FbGVtZW50QlxuICAgICAqL1xuICAgIHRoaXMuamFjb2JpYW5FbGVtZW50QiA9IG5ldyBKYWNvYmlhbkVsZW1lbnQoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZW5hYmxlZFxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICB0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgLy8gU2V0IHR5cGljYWwgc3Bvb2sgcGFyYW1zXG4gICAgdGhpcy5zZXRTcG9va1BhcmFtcygxZTcsNCwxLzYwKTtcbn1cbkVxdWF0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVxdWF0aW9uO1xuXG5FcXVhdGlvbi5pZCA9IDA7XG5cbi8qKlxuICogUmVjYWxjdWxhdGVzIGEsYixlcHMuXG4gKiBAbWV0aG9kIHNldFNwb29rUGFyYW1zXG4gKi9cbkVxdWF0aW9uLnByb3RvdHlwZS5zZXRTcG9va1BhcmFtcyA9IGZ1bmN0aW9uKHN0aWZmbmVzcyxyZWxheGF0aW9uLHRpbWVTdGVwKXtcbiAgICB2YXIgZCA9IHJlbGF4YXRpb24sXG4gICAgICAgIGsgPSBzdGlmZm5lc3MsXG4gICAgICAgIGggPSB0aW1lU3RlcDtcbiAgICB0aGlzLmEgPSA0LjAgLyAoaCAqICgxICsgNCAqIGQpKTtcbiAgICB0aGlzLmIgPSAoNC4wICogZCkgLyAoMSArIDQgKiBkKTtcbiAgICB0aGlzLmVwcyA9IDQuMCAvIChoICogaCAqIGsgKiAoMSArIDQgKiBkKSk7XG59O1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBSSFMgb2YgdGhlIFNQT09LIGVxdWF0aW9uXG4gKiBAbWV0aG9kIGNvbXB1dGVCXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbkVxdWF0aW9uLnByb3RvdHlwZS5jb21wdXRlQiA9IGZ1bmN0aW9uKGEsYixoKXtcbiAgICB2YXIgR1cgPSB0aGlzLmNvbXB1dGVHVygpLFxuICAgICAgICBHcSA9IHRoaXMuY29tcHV0ZUdxKCksXG4gICAgICAgIEdpTWYgPSB0aGlzLmNvbXB1dGVHaU1mKCk7XG4gICAgcmV0dXJuIC0gR3EgKiBhIC0gR1cgKiBiIC0gR2lNZipoO1xufTtcblxuLyoqXG4gKiBDb21wdXRlcyBHKnEsIHdoZXJlIHEgYXJlIHRoZSBnZW5lcmFsaXplZCBib2R5IGNvb3JkaW5hdGVzXG4gKiBAbWV0aG9kIGNvbXB1dGVHcVxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5FcXVhdGlvbi5wcm90b3R5cGUuY29tcHV0ZUdxID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgR0EgPSB0aGlzLmphY29iaWFuRWxlbWVudEEsXG4gICAgICAgIEdCID0gdGhpcy5qYWNvYmlhbkVsZW1lbnRCLFxuICAgICAgICBiaSA9IHRoaXMuYmksXG4gICAgICAgIGJqID0gdGhpcy5iaixcbiAgICAgICAgeGkgPSBiaS5wb3NpdGlvbixcbiAgICAgICAgeGogPSBiai5wb3NpdGlvbjtcbiAgICByZXR1cm4gR0Euc3BhdGlhbC5kb3QoeGkpICsgR0Iuc3BhdGlhbC5kb3QoeGopO1xufTtcblxudmFyIHplcm8gPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIENvbXB1dGVzIEcqVywgd2hlcmUgVyBhcmUgdGhlIGJvZHkgdmVsb2NpdGllc1xuICogQG1ldGhvZCBjb21wdXRlR1dcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuRXF1YXRpb24ucHJvdG90eXBlLmNvbXB1dGVHVyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIEdBID0gdGhpcy5qYWNvYmlhbkVsZW1lbnRBLFxuICAgICAgICBHQiA9IHRoaXMuamFjb2JpYW5FbGVtZW50QixcbiAgICAgICAgYmkgPSB0aGlzLmJpLFxuICAgICAgICBiaiA9IHRoaXMuYmosXG4gICAgICAgIHZpID0gYmkudmVsb2NpdHksXG4gICAgICAgIHZqID0gYmoudmVsb2NpdHksXG4gICAgICAgIHdpID0gYmkuYW5ndWxhclZlbG9jaXR5IHx8IHplcm8sXG4gICAgICAgIHdqID0gYmouYW5ndWxhclZlbG9jaXR5IHx8IHplcm87XG4gICAgcmV0dXJuIEdBLm11bHRpcGx5VmVjdG9ycyh2aSx3aSkgKyBHQi5tdWx0aXBseVZlY3RvcnModmosd2opO1xufTtcblxuXG4vKipcbiAqIENvbXB1dGVzIEcqV2xhbWJkYSwgd2hlcmUgVyBhcmUgdGhlIGJvZHkgdmVsb2NpdGllc1xuICogQG1ldGhvZCBjb21wdXRlR1dsYW1iZGFcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuRXF1YXRpb24ucHJvdG90eXBlLmNvbXB1dGVHV2xhbWJkYSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIEdBID0gdGhpcy5qYWNvYmlhbkVsZW1lbnRBLFxuICAgICAgICBHQiA9IHRoaXMuamFjb2JpYW5FbGVtZW50QixcbiAgICAgICAgYmkgPSB0aGlzLmJpLFxuICAgICAgICBiaiA9IHRoaXMuYmosXG4gICAgICAgIHZpID0gYmkudmxhbWJkYSxcbiAgICAgICAgdmogPSBiai52bGFtYmRhLFxuICAgICAgICB3aSA9IGJpLndsYW1iZGEgfHwgemVybyxcbiAgICAgICAgd2ogPSBiai53bGFtYmRhIHx8IHplcm87XG4gICAgcmV0dXJuIEdBLm11bHRpcGx5VmVjdG9ycyh2aSx3aSkgKyBHQi5tdWx0aXBseVZlY3RvcnModmosd2opO1xufTtcblxuLyoqXG4gKiBDb21wdXRlcyBHKmludihNKSpmLCB3aGVyZSBNIGlzIHRoZSBtYXNzIG1hdHJpeCB3aXRoIGRpYWdvbmFsIGJsb2NrcyBmb3IgZWFjaCBib2R5LCBhbmQgZiBhcmUgdGhlIGZvcmNlcyBvbiB0aGUgYm9kaWVzLlxuICogQG1ldGhvZCBjb21wdXRlR2lNZlxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG52YXIgaU1maSA9IG5ldyBWZWMzKCksXG4gICAgaU1maiA9IG5ldyBWZWMzKCksXG4gICAgaW52SWlfdm11bHRfdGF1aSA9IG5ldyBWZWMzKCksXG4gICAgaW52SWpfdm11bHRfdGF1aiA9IG5ldyBWZWMzKCk7XG5FcXVhdGlvbi5wcm90b3R5cGUuY29tcHV0ZUdpTWYgPSBmdW5jdGlvbigpe1xuICAgIHZhciBHQSA9IHRoaXMuamFjb2JpYW5FbGVtZW50QSxcbiAgICAgICAgR0IgPSB0aGlzLmphY29iaWFuRWxlbWVudEIsXG4gICAgICAgIGJpID0gdGhpcy5iaSxcbiAgICAgICAgYmogPSB0aGlzLmJqLFxuICAgICAgICBmaSA9IGJpLmZvcmNlLFxuICAgICAgICB0aSA9IGJpLnRvcnF1ZSxcbiAgICAgICAgZmogPSBiai5mb3JjZSxcbiAgICAgICAgdGogPSBiai50b3JxdWUsXG4gICAgICAgIGludk1hc3NpID0gYmkuaW52TWFzc1NvbHZlLFxuICAgICAgICBpbnZNYXNzaiA9IGJqLmludk1hc3NTb2x2ZTtcblxuICAgIGlmKGJpLmludkluZXJ0aWFXb3JsZFNvbHZlKXsgYmkuaW52SW5lcnRpYVdvcmxkU29sdmUudm11bHQodGksaW52SWlfdm11bHRfdGF1aSk7IH1cbiAgICBlbHNlIHsgaW52SWlfdm11bHRfdGF1aS5zZXQoMCwwLDApOyB9XG4gICAgaWYoYmouaW52SW5lcnRpYVdvcmxkU29sdmUpeyBiai5pbnZJbmVydGlhV29ybGRTb2x2ZS52bXVsdCh0aixpbnZJal92bXVsdF90YXVqKTsgfVxuICAgIGVsc2UgeyBpbnZJal92bXVsdF90YXVqLnNldCgwLDAsMCk7IH1cblxuICAgIGZpLm11bHQoaW52TWFzc2ksaU1maSk7XG4gICAgZmoubXVsdChpbnZNYXNzaixpTWZqKTtcblxuICAgIHJldHVybiBHQS5tdWx0aXBseVZlY3RvcnMoaU1maSxpbnZJaV92bXVsdF90YXVpKSArIEdCLm11bHRpcGx5VmVjdG9ycyhpTWZqLGludklqX3ZtdWx0X3RhdWopO1xufTtcblxuLyoqXG4gKiBDb21wdXRlcyBHKmludihNKSpHJ1xuICogQG1ldGhvZCBjb21wdXRlR2lNR3RcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xudmFyIHRtcCA9IG5ldyBWZWMzKCk7XG5FcXVhdGlvbi5wcm90b3R5cGUuY29tcHV0ZUdpTUd0ID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgR0EgPSB0aGlzLmphY29iaWFuRWxlbWVudEEsXG4gICAgICAgIEdCID0gdGhpcy5qYWNvYmlhbkVsZW1lbnRCLFxuICAgICAgICBiaSA9IHRoaXMuYmksXG4gICAgICAgIGJqID0gdGhpcy5iaixcbiAgICAgICAgaW52TWFzc2kgPSBiaS5pbnZNYXNzU29sdmUsXG4gICAgICAgIGludk1hc3NqID0gYmouaW52TWFzc1NvbHZlLFxuICAgICAgICBpbnZJaSA9IGJpLmludkluZXJ0aWFXb3JsZFNvbHZlLFxuICAgICAgICBpbnZJaiA9IGJqLmludkluZXJ0aWFXb3JsZFNvbHZlLFxuICAgICAgICByZXN1bHQgPSBpbnZNYXNzaSArIGludk1hc3NqO1xuXG4gICAgaWYoaW52SWkpe1xuICAgICAgICBpbnZJaS52bXVsdChHQS5yb3RhdGlvbmFsLHRtcCk7XG4gICAgICAgIHJlc3VsdCArPSB0bXAuZG90KEdBLnJvdGF0aW9uYWwpO1xuICAgIH1cblxuICAgIGlmKGludklqKXtcbiAgICAgICAgaW52SWoudm11bHQoR0Iucm90YXRpb25hbCx0bXApO1xuICAgICAgICByZXN1bHQgKz0gdG1wLmRvdChHQi5yb3RhdGlvbmFsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIHJlc3VsdDtcbn07XG5cbnZhciBhZGRUb1dsYW1iZGFfdGVtcCA9IG5ldyBWZWMzKCksXG4gICAgYWRkVG9XbGFtYmRhX0dpID0gbmV3IFZlYzMoKSxcbiAgICBhZGRUb1dsYW1iZGFfR2ogPSBuZXcgVmVjMygpLFxuICAgIGFkZFRvV2xhbWJkYV9yaSA9IG5ldyBWZWMzKCksXG4gICAgYWRkVG9XbGFtYmRhX3JqID0gbmV3IFZlYzMoKSxcbiAgICBhZGRUb1dsYW1iZGFfTWRpYWcgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIEFkZCBjb25zdHJhaW50IHZlbG9jaXR5IHRvIHRoZSBib2RpZXMuXG4gKiBAbWV0aG9kIGFkZFRvV2xhbWJkYVxuICogQHBhcmFtIHtOdW1iZXJ9IGRlbHRhbGFtYmRhXG4gKi9cbkVxdWF0aW9uLnByb3RvdHlwZS5hZGRUb1dsYW1iZGEgPSBmdW5jdGlvbihkZWx0YWxhbWJkYSl7XG4gICAgdmFyIEdBID0gdGhpcy5qYWNvYmlhbkVsZW1lbnRBLFxuICAgICAgICBHQiA9IHRoaXMuamFjb2JpYW5FbGVtZW50QixcbiAgICAgICAgYmkgPSB0aGlzLmJpLFxuICAgICAgICBiaiA9IHRoaXMuYmosXG4gICAgICAgIHRlbXAgPSBhZGRUb1dsYW1iZGFfdGVtcDtcblxuICAgIC8vIEFkZCB0byBsaW5lYXIgdmVsb2NpdHlcbiAgICAvLyB2X2xhbWJkYSArPSBpbnYoTSkgKiBkZWx0YV9sYW1iYSAqIEdcbiAgICBHQS5zcGF0aWFsLm11bHQoYmkuaW52TWFzc1NvbHZlICogZGVsdGFsYW1iZGEsdGVtcCk7XG4gICAgYmkudmxhbWJkYS52YWRkKHRlbXAsIGJpLnZsYW1iZGEpO1xuXG4gICAgR0Iuc3BhdGlhbC5tdWx0KGJqLmludk1hc3NTb2x2ZSAqIGRlbHRhbGFtYmRhLHRlbXApO1xuICAgIGJqLnZsYW1iZGEudmFkZCh0ZW1wLCBiai52bGFtYmRhKTtcblxuICAgIC8vIEFkZCB0byBhbmd1bGFyIHZlbG9jaXR5XG4gICAgaWYoYmkuaW52SW5lcnRpYVdvcmxkU29sdmUpe1xuICAgICAgICBiaS5pbnZJbmVydGlhV29ybGRTb2x2ZS52bXVsdChHQS5yb3RhdGlvbmFsLHRlbXApO1xuICAgICAgICB0ZW1wLm11bHQoZGVsdGFsYW1iZGEsdGVtcCk7XG4gICAgICAgIGJpLndsYW1iZGEudmFkZCh0ZW1wLGJpLndsYW1iZGEpO1xuICAgIH1cblxuICAgIGlmKGJqLmludkluZXJ0aWFXb3JsZFNvbHZlKXtcbiAgICAgICAgYmouaW52SW5lcnRpYVdvcmxkU29sdmUudm11bHQoR0Iucm90YXRpb25hbCx0ZW1wKTtcbiAgICAgICAgdGVtcC5tdWx0KGRlbHRhbGFtYmRhLHRlbXApO1xuICAgICAgICBiai53bGFtYmRhLnZhZGQodGVtcCxiai53bGFtYmRhKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIGRlbm9taW5hdG9yIHBhcnQgb2YgdGhlIFNQT09LIGVxdWF0aW9uOiBDID0gRyppbnYoTSkqRycgKyBlcHNcbiAqIEBtZXRob2QgY29tcHV0ZUludkNcbiAqIEBwYXJhbSAge051bWJlcn0gZXBzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbkVxdWF0aW9uLnByb3RvdHlwZS5jb21wdXRlQyA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHRoaXMuY29tcHV0ZUdpTUd0KCkgKyB0aGlzLmVwcztcbn07XG5cbn0se1wiLi4vbWF0aC9KYWNvYmlhbkVsZW1lbnRcIjoyNixcIi4uL21hdGgvVmVjM1wiOjMwfV0sMjE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBGcmljdGlvbkVxdWF0aW9uO1xuXG52YXIgRXF1YXRpb24gPSBfZGVyZXFfKCcuL0VxdWF0aW9uJyk7XG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xudmFyIE1hdDMgPSBfZGVyZXFfKCcuLi9tYXRoL01hdDMnKTtcblxuLyoqXG4gKiBDb25zdHJhaW5zIHRoZSBzbGlwcGluZyBpbiBhIGNvbnRhY3QgYWxvbmcgYSB0YW5nZW50XG4gKiBAY2xhc3MgRnJpY3Rpb25FcXVhdGlvblxuICogQGNvbnN0cnVjdG9yXG4gKiBAYXV0aG9yIHNjaHRlcHBlXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlBXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlCXG4gKiBAcGFyYW0ge051bWJlcn0gc2xpcEZvcmNlIHNob3VsZCBiZSArLUZfZnJpY3Rpb24gPSArLW11ICogRl9ub3JtYWwgPSArLW11ICogbSAqIGdcbiAqIEBleHRlbmRzIEVxdWF0aW9uXG4gKi9cbmZ1bmN0aW9uIEZyaWN0aW9uRXF1YXRpb24oYm9keUEsIGJvZHlCLCBzbGlwRm9yY2Upe1xuICAgIEVxdWF0aW9uLmNhbGwodGhpcyxib2R5QSwgYm9keUIsIC1zbGlwRm9yY2UsIHNsaXBGb3JjZSk7XG4gICAgdGhpcy5yaSA9IG5ldyBWZWMzKCk7XG4gICAgdGhpcy5yaiA9IG5ldyBWZWMzKCk7XG4gICAgdGhpcy50ID0gbmV3IFZlYzMoKTsgLy8gdGFuZ2VudFxufVxuXG5GcmljdGlvbkVxdWF0aW9uLnByb3RvdHlwZSA9IG5ldyBFcXVhdGlvbigpO1xuRnJpY3Rpb25FcXVhdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGcmljdGlvbkVxdWF0aW9uO1xuXG52YXIgRnJpY3Rpb25FcXVhdGlvbl9jb21wdXRlQl90ZW1wMSA9IG5ldyBWZWMzKCk7XG52YXIgRnJpY3Rpb25FcXVhdGlvbl9jb21wdXRlQl90ZW1wMiA9IG5ldyBWZWMzKCk7XG5GcmljdGlvbkVxdWF0aW9uLnByb3RvdHlwZS5jb21wdXRlQiA9IGZ1bmN0aW9uKGgpe1xuICAgIHZhciBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iLFxuICAgICAgICBiaSA9IHRoaXMuYmksXG4gICAgICAgIGJqID0gdGhpcy5iaixcbiAgICAgICAgcmkgPSB0aGlzLnJpLFxuICAgICAgICByaiA9IHRoaXMucmosXG4gICAgICAgIHJpeHQgPSBGcmljdGlvbkVxdWF0aW9uX2NvbXB1dGVCX3RlbXAxLFxuICAgICAgICByanh0ID0gRnJpY3Rpb25FcXVhdGlvbl9jb21wdXRlQl90ZW1wMixcbiAgICAgICAgdCA9IHRoaXMudDtcblxuICAgIC8vIENhbHVjbGF0ZSBjcm9zcyBwcm9kdWN0c1xuICAgIHJpLmNyb3NzKHQscml4dCk7XG4gICAgcmouY3Jvc3ModCxyanh0KTtcblxuICAgIC8vIEcgPSBbLXQgLXJpeHQgdCByanh0XVxuICAgIC8vIEFuZCByZW1lbWJlciwgdGhpcyBpcyBhIHB1cmUgdmVsb2NpdHkgY29uc3RyYWludCwgZyBpcyBhbHdheXMgemVybyFcbiAgICB2YXIgR0EgPSB0aGlzLmphY29iaWFuRWxlbWVudEEsXG4gICAgICAgIEdCID0gdGhpcy5qYWNvYmlhbkVsZW1lbnRCO1xuICAgIHQubmVnYXRlKEdBLnNwYXRpYWwpO1xuICAgIHJpeHQubmVnYXRlKEdBLnJvdGF0aW9uYWwpO1xuICAgIEdCLnNwYXRpYWwuY29weSh0KTtcbiAgICBHQi5yb3RhdGlvbmFsLmNvcHkocmp4dCk7XG5cbiAgICB2YXIgR1cgPSB0aGlzLmNvbXB1dGVHVygpO1xuICAgIHZhciBHaU1mID0gdGhpcy5jb21wdXRlR2lNZigpO1xuXG4gICAgdmFyIEIgPSAtIEdXICogYiAtIGggKiBHaU1mO1xuXG4gICAgcmV0dXJuIEI7XG59O1xuXG59LHtcIi4uL21hdGgvTWF0M1wiOjI3LFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuL0VxdWF0aW9uXCI6MjB9XSwyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFJvdGF0aW9uYWxFcXVhdGlvbjtcblxudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBNYXQzID0gX2RlcmVxXygnLi4vbWF0aC9NYXQzJyk7XG52YXIgRXF1YXRpb24gPSBfZGVyZXFfKCcuL0VxdWF0aW9uJyk7XG5cbi8qKlxuICogUm90YXRpb25hbCBjb25zdHJhaW50LiBXb3JrcyB0byBrZWVwIHRoZSBsb2NhbCB2ZWN0b3JzIG9ydGhvZ29uYWwgdG8gZWFjaCBvdGhlciBpbiB3b3JsZCBzcGFjZS5cbiAqIEBjbGFzcyBSb3RhdGlvbmFsRXF1YXRpb25cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1dGhvciBzY2h0ZXBwZVxuICogQHBhcmFtIHtCb2R5fSBib2R5QVxuICogQHBhcmFtIHtCb2R5fSBib2R5QlxuICogQHBhcmFtIHtWZWMzfSBbb3B0aW9ucy5heGlzQV1cbiAqIEBwYXJhbSB7VmVjM30gW29wdGlvbnMuYXhpc0JdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4Rm9yY2VdXG4gKiBAZXh0ZW5kcyBFcXVhdGlvblxuICovXG5mdW5jdGlvbiBSb3RhdGlvbmFsRXF1YXRpb24oYm9keUEsIGJvZHlCLCBvcHRpb25zKXtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgbWF4Rm9yY2UgPSB0eXBlb2Yob3B0aW9ucy5tYXhGb3JjZSkgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5tYXhGb3JjZSA6IDFlNjtcblxuICAgIEVxdWF0aW9uLmNhbGwodGhpcyxib2R5QSxib2R5QiwtbWF4Rm9yY2UsIG1heEZvcmNlKTtcblxuICAgIHRoaXMuYXhpc0EgPSBvcHRpb25zLmF4aXNBID8gb3B0aW9ucy5heGlzQS5jbG9uZSgpIDogbmV3IFZlYzMoMSwgMCwgMCk7XG4gICAgdGhpcy5heGlzQiA9IG9wdGlvbnMuYXhpc0IgPyBvcHRpb25zLmF4aXNCLmNsb25lKCkgOiBuZXcgVmVjMygwLCAxLCAwKTtcblxuICAgIHRoaXMubWF4QW5nbGUgPSBNYXRoLlBJIC8gMjtcbn1cblxuUm90YXRpb25hbEVxdWF0aW9uLnByb3RvdHlwZSA9IG5ldyBFcXVhdGlvbigpO1xuUm90YXRpb25hbEVxdWF0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJvdGF0aW9uYWxFcXVhdGlvbjtcblxudmFyIHRtcFZlYzEgPSBuZXcgVmVjMygpO1xudmFyIHRtcFZlYzIgPSBuZXcgVmVjMygpO1xuXG5Sb3RhdGlvbmFsRXF1YXRpb24ucHJvdG90eXBlLmNvbXB1dGVCID0gZnVuY3Rpb24oaCl7XG4gICAgdmFyIGEgPSB0aGlzLmEsXG4gICAgICAgIGIgPSB0aGlzLmIsXG5cbiAgICAgICAgbmkgPSB0aGlzLmF4aXNBLFxuICAgICAgICBuaiA9IHRoaXMuYXhpc0IsXG5cbiAgICAgICAgbml4bmogPSB0bXBWZWMxLFxuICAgICAgICBuanhuaSA9IHRtcFZlYzIsXG5cbiAgICAgICAgR0EgPSB0aGlzLmphY29iaWFuRWxlbWVudEEsXG4gICAgICAgIEdCID0gdGhpcy5qYWNvYmlhbkVsZW1lbnRCO1xuXG4gICAgLy8gQ2FsdWNsYXRlIGNyb3NzIHByb2R1Y3RzXG4gICAgbmkuY3Jvc3MobmosIG5peG5qKTtcbiAgICBuai5jcm9zcyhuaSwgbmp4bmkpO1xuXG4gICAgLy8gZyA9IG5pICogbmpcbiAgICAvLyBnZG90ID0gKG5qIHggbmkpICogd2kgKyAobmkgeCBuaikgKiB3alxuICAgIC8vIEcgPSBbMCBuanhuaSAwIG5peG5qXVxuICAgIC8vIFcgPSBbdmkgd2kgdmogd2pdXG4gICAgR0Eucm90YXRpb25hbC5jb3B5KG5qeG5pKTtcbiAgICBHQi5yb3RhdGlvbmFsLmNvcHkobml4bmopO1xuXG4gICAgdmFyIGcgPSBNYXRoLmNvcyh0aGlzLm1heEFuZ2xlKSAtIG5pLmRvdChuaiksXG4gICAgICAgIEdXID0gdGhpcy5jb21wdXRlR1coKSxcbiAgICAgICAgR2lNZiA9IHRoaXMuY29tcHV0ZUdpTWYoKTtcblxuICAgIHZhciBCID0gLSBnICogYSAtIEdXICogYiAtIGggKiBHaU1mO1xuXG4gICAgcmV0dXJuIEI7XG59O1xuXG5cbn0se1wiLi4vbWF0aC9NYXQzXCI6MjcsXCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4vRXF1YXRpb25cIjoyMH1dLDIzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gUm90YXRpb25hbE1vdG9yRXF1YXRpb247XG5cbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG52YXIgTWF0MyA9IF9kZXJlcV8oJy4uL21hdGgvTWF0MycpO1xudmFyIEVxdWF0aW9uID0gX2RlcmVxXygnLi9FcXVhdGlvbicpO1xuXG4vKipcbiAqIFJvdGF0aW9uYWwgbW90b3IgY29uc3RyYWludC4gVHJpZXMgdG8ga2VlcCB0aGUgcmVsYXRpdmUgYW5ndWxhciB2ZWxvY2l0eSBvZiB0aGUgYm9kaWVzIHRvIGEgZ2l2ZW4gdmFsdWUuXG4gKiBAY2xhc3MgUm90YXRpb25hbE1vdG9yRXF1YXRpb25cbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1dGhvciBzY2h0ZXBwZVxuICogQHBhcmFtIHtCb2R5fSBib2R5QVxuICogQHBhcmFtIHtCb2R5fSBib2R5QlxuICogQHBhcmFtIHtOdW1iZXJ9IG1heEZvcmNlXG4gKiBAZXh0ZW5kcyBFcXVhdGlvblxuICovXG5mdW5jdGlvbiBSb3RhdGlvbmFsTW90b3JFcXVhdGlvbihib2R5QSwgYm9keUIsIG1heEZvcmNlKXtcbiAgICBtYXhGb3JjZSA9IHR5cGVvZihtYXhGb3JjZSkhPT0ndW5kZWZpbmVkJyA/IG1heEZvcmNlIDogMWU2O1xuICAgIEVxdWF0aW9uLmNhbGwodGhpcyxib2R5QSxib2R5QiwtbWF4Rm9yY2UsbWF4Rm9yY2UpO1xuXG4gICAgLyoqXG4gICAgICogV29ybGQgb3JpZW50ZWQgcm90YXRpb25hbCBheGlzXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBheGlzQVxuICAgICAqL1xuICAgIHRoaXMuYXhpc0EgPSBuZXcgVmVjMygpO1xuXG4gICAgLyoqXG4gICAgICogV29ybGQgb3JpZW50ZWQgcm90YXRpb25hbCBheGlzXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBheGlzQlxuICAgICAqL1xuICAgIHRoaXMuYXhpc0IgPSBuZXcgVmVjMygpOyAvLyBXb3JsZCBvcmllbnRlZCByb3RhdGlvbmFsIGF4aXNcblxuICAgIC8qKlxuICAgICAqIE1vdG9yIHZlbG9jaXR5XG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHRhcmdldFZlbG9jaXR5XG4gICAgICovXG4gICAgdGhpcy50YXJnZXRWZWxvY2l0eSA9IDA7XG59XG5cblJvdGF0aW9uYWxNb3RvckVxdWF0aW9uLnByb3RvdHlwZSA9IG5ldyBFcXVhdGlvbigpO1xuUm90YXRpb25hbE1vdG9yRXF1YXRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUm90YXRpb25hbE1vdG9yRXF1YXRpb247XG5cblJvdGF0aW9uYWxNb3RvckVxdWF0aW9uLnByb3RvdHlwZS5jb21wdXRlQiA9IGZ1bmN0aW9uKGgpe1xuICAgIHZhciBhID0gdGhpcy5hLFxuICAgICAgICBiID0gdGhpcy5iLFxuICAgICAgICBiaSA9IHRoaXMuYmksXG4gICAgICAgIGJqID0gdGhpcy5iaixcblxuICAgICAgICBheGlzQSA9IHRoaXMuYXhpc0EsXG4gICAgICAgIGF4aXNCID0gdGhpcy5heGlzQixcblxuICAgICAgICBHQSA9IHRoaXMuamFjb2JpYW5FbGVtZW50QSxcbiAgICAgICAgR0IgPSB0aGlzLmphY29iaWFuRWxlbWVudEI7XG5cbiAgICAvLyBnID0gMFxuICAgIC8vIGdkb3QgPSBheGlzQSAqIHdpIC0gYXhpc0IgKiB3alxuICAgIC8vIGdkb3QgPSBHICogVyA9IEcgKiBbdmkgd2kgdmogd2pdXG4gICAgLy8gPT5cbiAgICAvLyBHID0gWzAgYXhpc0EgMCAtYXhpc0JdXG5cbiAgICBHQS5yb3RhdGlvbmFsLmNvcHkoYXhpc0EpO1xuICAgIGF4aXNCLm5lZ2F0ZShHQi5yb3RhdGlvbmFsKTtcblxuICAgIHZhciBHVyA9IHRoaXMuY29tcHV0ZUdXKCkgLSB0aGlzLnRhcmdldFZlbG9jaXR5LFxuICAgICAgICBHaU1mID0gdGhpcy5jb21wdXRlR2lNZigpO1xuXG4gICAgdmFyIEIgPSAtIEdXICogYiAtIGggKiBHaU1mO1xuXG4gICAgcmV0dXJuIEI7XG59O1xuXG59LHtcIi4uL21hdGgvTWF0M1wiOjI3LFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuL0VxdWF0aW9uXCI6MjB9XSwyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgVXRpbHMgPSBfZGVyZXFfKCcuLi91dGlscy9VdGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRhY3RNYXRlcmlhbDtcblxuLyoqXG4gKiBEZWZpbmVzIHdoYXQgaGFwcGVucyB3aGVuIHR3byBtYXRlcmlhbHMgbWVldC5cbiAqIEBjbGFzcyBDb250YWN0TWF0ZXJpYWxcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtNYXRlcmlhbH0gbTFcbiAqIEBwYXJhbSB7TWF0ZXJpYWx9IG0yXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZnJpY3Rpb249MC4zXVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLnJlc3RpdHV0aW9uPTAuM11cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5jb250YWN0RXF1YXRpb25TdGlmZm5lc3M9MWU3XVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmNvbnRhY3RFcXVhdGlvblJlbGF4YXRpb249M11cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5mcmljdGlvbkVxdWF0aW9uU3RpZmZuZXNzPTFlN11cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5mcmljdGlvbkVxdWF0aW9uUmVsYXhhdGlvbj0zXVxuICovXG5mdW5jdGlvbiBDb250YWN0TWF0ZXJpYWwobTEsIG0yLCBvcHRpb25zKXtcbiAgICBvcHRpb25zID0gVXRpbHMuZGVmYXVsdHMob3B0aW9ucywge1xuICAgICAgICBmcmljdGlvbjogMC4zLFxuICAgICAgICByZXN0aXR1dGlvbjogMC4zLFxuICAgICAgICBjb250YWN0RXF1YXRpb25TdGlmZm5lc3M6IDFlNyxcbiAgICAgICAgY29udGFjdEVxdWF0aW9uUmVsYXhhdGlvbjogMyxcbiAgICAgICAgZnJpY3Rpb25FcXVhdGlvblN0aWZmbmVzczogMWU3LFxuICAgICAgICBmcmljdGlvbkVxdWF0aW9uUmVsYXhhdGlvbjogM1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogSWRlbnRpZmllciBvZiB0aGlzIG1hdGVyaWFsXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGlkXG4gICAgICovXG4gICAgdGhpcy5pZCA9IENvbnRhY3RNYXRlcmlhbC5pZENvdW50ZXIrKztcblxuICAgIC8qKlxuICAgICAqIFBhcnRpY2lwYXRpbmcgbWF0ZXJpYWxzXG4gICAgICogQHByb3BlcnR5IHtBcnJheX0gbWF0ZXJpYWxzXG4gICAgICogQHRvZG8gIFNob3VsZCBiZSAubWF0ZXJpYWxBIGFuZCAubWF0ZXJpYWxCIGluc3RlYWRcbiAgICAgKi9cbiAgICB0aGlzLm1hdGVyaWFscyA9IFttMSwgbTJdO1xuXG4gICAgLyoqXG4gICAgICogRnJpY3Rpb24gY29lZmZpY2llbnRcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZnJpY3Rpb25cbiAgICAgKi9cbiAgICB0aGlzLmZyaWN0aW9uID0gb3B0aW9ucy5mcmljdGlvbjtcblxuICAgIC8qKlxuICAgICAqIFJlc3RpdHV0aW9uIGNvZWZmaWNpZW50XG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJlc3RpdHV0aW9uXG4gICAgICovXG4gICAgdGhpcy5yZXN0aXR1dGlvbiA9IG9wdGlvbnMucmVzdGl0dXRpb247XG5cbiAgICAvKipcbiAgICAgKiBTdGlmZm5lc3Mgb2YgdGhlIHByb2R1Y2VkIGNvbnRhY3QgZXF1YXRpb25zXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGNvbnRhY3RFcXVhdGlvblN0aWZmbmVzc1xuICAgICAqL1xuICAgIHRoaXMuY29udGFjdEVxdWF0aW9uU3RpZmZuZXNzID0gb3B0aW9ucy5jb250YWN0RXF1YXRpb25TdGlmZm5lc3M7XG5cbiAgICAvKipcbiAgICAgKiBSZWxheGF0aW9uIHRpbWUgb2YgdGhlIHByb2R1Y2VkIGNvbnRhY3QgZXF1YXRpb25zXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGNvbnRhY3RFcXVhdGlvblJlbGF4YXRpb25cbiAgICAgKi9cbiAgICB0aGlzLmNvbnRhY3RFcXVhdGlvblJlbGF4YXRpb24gPSBvcHRpb25zLmNvbnRhY3RFcXVhdGlvblJlbGF4YXRpb247XG5cbiAgICAvKipcbiAgICAgKiBTdGlmZm5lc3Mgb2YgdGhlIHByb2R1Y2VkIGZyaWN0aW9uIGVxdWF0aW9uc1xuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBmcmljdGlvbkVxdWF0aW9uU3RpZmZuZXNzXG4gICAgICovXG4gICAgdGhpcy5mcmljdGlvbkVxdWF0aW9uU3RpZmZuZXNzID0gb3B0aW9ucy5mcmljdGlvbkVxdWF0aW9uU3RpZmZuZXNzO1xuXG4gICAgLyoqXG4gICAgICogUmVsYXhhdGlvbiB0aW1lIG9mIHRoZSBwcm9kdWNlZCBmcmljdGlvbiBlcXVhdGlvbnNcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZnJpY3Rpb25FcXVhdGlvblJlbGF4YXRpb25cbiAgICAgKi9cbiAgICB0aGlzLmZyaWN0aW9uRXF1YXRpb25SZWxheGF0aW9uID0gb3B0aW9ucy5mcmljdGlvbkVxdWF0aW9uUmVsYXhhdGlvbjtcbn1cblxuQ29udGFjdE1hdGVyaWFsLmlkQ291bnRlciA9IDA7XG5cbn0se1wiLi4vdXRpbHMvVXRpbHNcIjo1M31dLDI1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gTWF0ZXJpYWw7XG5cbi8qKlxuICogRGVmaW5lcyBhIHBoeXNpY3MgbWF0ZXJpYWwuXG4gKiBAY2xhc3MgTWF0ZXJpYWxcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQGF1dGhvciBzY2h0ZXBwZVxuICovXG5mdW5jdGlvbiBNYXRlcmlhbChvcHRpb25zKXtcbiAgICB2YXIgbmFtZSA9ICcnO1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLy8gQmFja3dhcmRzIGNvbXBhdGliaWxpdHkgZml4XG4gICAgaWYodHlwZW9mKG9wdGlvbnMpID09PSAnc3RyaW5nJyl7XG4gICAgICAgIG5hbWUgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgfSBlbHNlIGlmKHR5cGVvZihvcHRpb25zKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbmFtZSA9ICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBuYW1lXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gICAgLyoqXG4gICAgICogbWF0ZXJpYWwgaWQuXG4gICAgICogQHByb3BlcnR5IGlkXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmlkID0gTWF0ZXJpYWwuaWRDb3VudGVyKys7XG5cbiAgICAvKipcbiAgICAgKiBGcmljdGlvbiBmb3IgdGhpcyBtYXRlcmlhbC4gSWYgbm9uLW5lZ2F0aXZlLCBpdCB3aWxsIGJlIHVzZWQgaW5zdGVhZCBvZiB0aGUgZnJpY3Rpb24gZ2l2ZW4gYnkgQ29udGFjdE1hdGVyaWFscy4gSWYgdGhlcmUncyBubyBtYXRjaGluZyBDb250YWN0TWF0ZXJpYWwsIHRoZSB2YWx1ZSBmcm9tIC5kZWZhdWx0Q29udGFjdE1hdGVyaWFsIGluIHRoZSBXb3JsZCB3aWxsIGJlIHVzZWQuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGZyaWN0aW9uXG4gICAgICovXG4gICAgdGhpcy5mcmljdGlvbiA9IHR5cGVvZihvcHRpb25zLmZyaWN0aW9uKSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmZyaWN0aW9uIDogLTE7XG5cbiAgICAvKipcbiAgICAgKiBSZXN0aXR1dGlvbiBmb3IgdGhpcyBtYXRlcmlhbC4gSWYgbm9uLW5lZ2F0aXZlLCBpdCB3aWxsIGJlIHVzZWQgaW5zdGVhZCBvZiB0aGUgcmVzdGl0dXRpb24gZ2l2ZW4gYnkgQ29udGFjdE1hdGVyaWFscy4gSWYgdGhlcmUncyBubyBtYXRjaGluZyBDb250YWN0TWF0ZXJpYWwsIHRoZSB2YWx1ZSBmcm9tIC5kZWZhdWx0Q29udGFjdE1hdGVyaWFsIGluIHRoZSBXb3JsZCB3aWxsIGJlIHVzZWQuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHJlc3RpdHV0aW9uXG4gICAgICovXG4gICAgdGhpcy5yZXN0aXR1dGlvbiA9IHR5cGVvZihvcHRpb25zLnJlc3RpdHV0aW9uKSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLnJlc3RpdHV0aW9uIDogLTE7XG59XG5cbk1hdGVyaWFsLmlkQ291bnRlciA9IDA7XG5cbn0se31dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gSmFjb2JpYW5FbGVtZW50O1xuXG52YXIgVmVjMyA9IF9kZXJlcV8oJy4vVmVjMycpO1xuXG4vKipcbiAqIEFuIGVsZW1lbnQgY29udGFpbmluZyA2IGVudHJpZXMsIDMgc3BhdGlhbCBhbmQgMyByb3RhdGlvbmFsIGRlZ3JlZXMgb2YgZnJlZWRvbS5cbiAqIEBjbGFzcyBKYWNvYmlhbkVsZW1lbnRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBKYWNvYmlhbkVsZW1lbnQoKXtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7VmVjM30gc3BhdGlhbFxuICAgICAqL1xuICAgIHRoaXMuc3BhdGlhbCA9IG5ldyBWZWMzKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1ZlYzN9IHJvdGF0aW9uYWxcbiAgICAgKi9cbiAgICB0aGlzLnJvdGF0aW9uYWwgPSBuZXcgVmVjMygpO1xufVxuXG4vKipcbiAqIE11bHRpcGx5IHdpdGggb3RoZXIgSmFjb2JpYW5FbGVtZW50XG4gKiBAbWV0aG9kIG11bHRpcGx5RWxlbWVudFxuICogQHBhcmFtICB7SmFjb2JpYW5FbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbkphY29iaWFuRWxlbWVudC5wcm90b3R5cGUubXVsdGlwbHlFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCl7XG4gICAgcmV0dXJuIGVsZW1lbnQuc3BhdGlhbC5kb3QodGhpcy5zcGF0aWFsKSArIGVsZW1lbnQucm90YXRpb25hbC5kb3QodGhpcy5yb3RhdGlvbmFsKTtcbn07XG5cbi8qKlxuICogTXVsdGlwbHkgd2l0aCB0d28gdmVjdG9yc1xuICogQG1ldGhvZCBtdWx0aXBseVZlY3RvcnNcbiAqIEBwYXJhbSAge1ZlYzN9IHNwYXRpYWxcbiAqIEBwYXJhbSAge1ZlYzN9IHJvdGF0aW9uYWxcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuSmFjb2JpYW5FbGVtZW50LnByb3RvdHlwZS5tdWx0aXBseVZlY3RvcnMgPSBmdW5jdGlvbihzcGF0aWFsLHJvdGF0aW9uYWwpe1xuICAgIHJldHVybiBzcGF0aWFsLmRvdCh0aGlzLnNwYXRpYWwpICsgcm90YXRpb25hbC5kb3QodGhpcy5yb3RhdGlvbmFsKTtcbn07XG5cbn0se1wiLi9WZWMzXCI6MzB9XSwyNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IE1hdDM7XG5cbnZhciBWZWMzID0gX2RlcmVxXygnLi9WZWMzJyk7XG5cbi8qKlxuICogQSAzeDMgbWF0cml4LlxuICogQGNsYXNzIE1hdDNcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIGFycmF5IGVsZW1lbnRzIEFycmF5IG9mIG5pbmUgZWxlbWVudHMuIE9wdGlvbmFsLlxuICogQGF1dGhvciBzY2h0ZXBwZSAvIGh0dHA6Ly9naXRodWIuY29tL3NjaHRlcHBlXG4gKi9cbmZ1bmN0aW9uIE1hdDMoZWxlbWVudHMpe1xuICAgIC8qKlxuICAgICAqIEEgdmVjdG9yIG9mIGxlbmd0aCA5LCBjb250YWluaW5nIGFsbCBtYXRyaXggZWxlbWVudHNcbiAgICAgKiBAcHJvcGVydHkge0FycmF5fSBlbGVtZW50c1xuICAgICAqL1xuICAgIGlmKGVsZW1lbnRzKXtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbMCwwLDAsMCwwLDAsMCwwLDBdO1xuICAgIH1cbn1cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXRyaXggdG8gaWRlbnRpdHlcbiAqIEBtZXRob2QgaWRlbnRpdHlcbiAqIEB0b2RvIFNob3VsZCBwZXJoYXBzIGJlIHJlbmFtZWQgdG8gc2V0SWRlbnRpdHkoKSB0byBiZSBtb3JlIGNsZWFyLlxuICogQHRvZG8gQ3JlYXRlIGFub3RoZXIgZnVuY3Rpb24gdGhhdCBpbW1lZGlhdGVseSBjcmVhdGVzIGFuIGlkZW50aXR5IG1hdHJpeCBlZy4gZXllKClcbiAqL1xuTWF0My5wcm90b3R5cGUuaWRlbnRpdHkgPSBmdW5jdGlvbigpe1xuICAgIHZhciBlID0gdGhpcy5lbGVtZW50cztcbiAgICBlWzBdID0gMTtcbiAgICBlWzFdID0gMDtcbiAgICBlWzJdID0gMDtcblxuICAgIGVbM10gPSAwO1xuICAgIGVbNF0gPSAxO1xuICAgIGVbNV0gPSAwO1xuXG4gICAgZVs2XSA9IDA7XG4gICAgZVs3XSA9IDA7XG4gICAgZVs4XSA9IDE7XG59O1xuXG4vKipcbiAqIFNldCBhbGwgZWxlbWVudHMgdG8gemVyb1xuICogQG1ldGhvZCBzZXRaZXJvXG4gKi9cbk1hdDMucHJvdG90eXBlLnNldFplcm8gPSBmdW5jdGlvbigpe1xuICAgIHZhciBlID0gdGhpcy5lbGVtZW50cztcbiAgICBlWzBdID0gMDtcbiAgICBlWzFdID0gMDtcbiAgICBlWzJdID0gMDtcbiAgICBlWzNdID0gMDtcbiAgICBlWzRdID0gMDtcbiAgICBlWzVdID0gMDtcbiAgICBlWzZdID0gMDtcbiAgICBlWzddID0gMDtcbiAgICBlWzhdID0gMDtcbn07XG5cbi8qKlxuICogU2V0cyB0aGUgbWF0cml4IGRpYWdvbmFsIGVsZW1lbnRzIGZyb20gYSBWZWMzXG4gKiBAbWV0aG9kIHNldFRyYWNlXG4gKiBAcGFyYW0ge1ZlYzN9IHZlYzNcbiAqL1xuTWF0My5wcm90b3R5cGUuc2V0VHJhY2UgPSBmdW5jdGlvbih2ZWMzKXtcbiAgICB2YXIgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgZVswXSA9IHZlYzMueDtcbiAgICBlWzRdID0gdmVjMy55O1xuICAgIGVbOF0gPSB2ZWMzLno7XG59O1xuXG4vKipcbiAqIEdldHMgdGhlIG1hdHJpeCBkaWFnb25hbCBlbGVtZW50c1xuICogQG1ldGhvZCBnZXRUcmFjZVxuICogQHJldHVybiB7VmVjM31cbiAqL1xuTWF0My5wcm90b3R5cGUuZ2V0VHJhY2UgPSBmdW5jdGlvbih0YXJnZXQpe1xuICAgIHZhciB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFZlYzMoKTtcbiAgICB2YXIgZSA9IHRoaXMuZWxlbWVudHM7XG4gICAgdGFyZ2V0LnggPSBlWzBdO1xuICAgIHRhcmdldC55ID0gZVs0XTtcbiAgICB0YXJnZXQueiA9IGVbOF07XG59O1xuXG4vKipcbiAqIE1hdHJpeC1WZWN0b3IgbXVsdGlwbGljYXRpb25cbiAqIEBtZXRob2Qgdm11bHRcbiAqIEBwYXJhbSB7VmVjM30gdiBUaGUgdmVjdG9yIHRvIG11bHRpcGx5IHdpdGhcbiAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0IE9wdGlvbmFsLCB0YXJnZXQgdG8gc2F2ZSB0aGUgcmVzdWx0IGluLlxuICovXG5NYXQzLnByb3RvdHlwZS52bXVsdCA9IGZ1bmN0aW9uKHYsdGFyZ2V0KXtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFZlYzMoKTtcblxuICAgIHZhciBlID0gdGhpcy5lbGVtZW50cyxcbiAgICAgICAgeCA9IHYueCxcbiAgICAgICAgeSA9IHYueSxcbiAgICAgICAgeiA9IHYuejtcbiAgICB0YXJnZXQueCA9IGVbMF0qeCArIGVbMV0qeSArIGVbMl0qejtcbiAgICB0YXJnZXQueSA9IGVbM10qeCArIGVbNF0qeSArIGVbNV0qejtcbiAgICB0YXJnZXQueiA9IGVbNl0qeCArIGVbN10qeSArIGVbOF0qejtcblxuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIE1hdHJpeC1zY2FsYXIgbXVsdGlwbGljYXRpb25cbiAqIEBtZXRob2Qgc211bHRcbiAqIEBwYXJhbSB7TnVtYmVyfSBzXG4gKi9cbk1hdDMucHJvdG90eXBlLnNtdWx0ID0gZnVuY3Rpb24ocyl7XG4gICAgZm9yKHZhciBpPTA7IGk8dGhpcy5lbGVtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0gKj0gcztcbiAgICB9XG59O1xuXG4vKipcbiAqIE1hdHJpeCBtdWx0aXBsaWNhdGlvblxuICogQG1ldGhvZCBtbXVsdFxuICogQHBhcmFtIHtNYXQzfSBtIE1hdHJpeCB0byBtdWx0aXBseSB3aXRoIGZyb20gbGVmdCBzaWRlLlxuICogQHJldHVybiB7TWF0M30gVGhlIHJlc3VsdC5cbiAqL1xuTWF0My5wcm90b3R5cGUubW11bHQgPSBmdW5jdGlvbihtLHRhcmdldCl7XG4gICAgdmFyIHIgPSB0YXJnZXQgfHwgbmV3IE1hdDMoKTtcbiAgICBmb3IodmFyIGk9MDsgaTwzOyBpKyspe1xuICAgICAgICBmb3IodmFyIGo9MDsgajwzOyBqKyspe1xuICAgICAgICAgICAgdmFyIHN1bSA9IDAuMDtcbiAgICAgICAgICAgIGZvcih2YXIgaz0wOyBrPDM7IGsrKyl7XG4gICAgICAgICAgICAgICAgc3VtICs9IG0uZWxlbWVudHNbaStrKjNdICogdGhpcy5lbGVtZW50c1trK2oqM107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByLmVsZW1lbnRzW2kraiozXSA9IHN1bTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbn07XG5cbi8qKlxuICogU2NhbGUgZWFjaCBjb2x1bW4gb2YgdGhlIG1hdHJpeFxuICogQG1ldGhvZCBzY2FsZVxuICogQHBhcmFtIHtWZWMzfSB2XG4gKiBAcmV0dXJuIHtNYXQzfSBUaGUgcmVzdWx0LlxuICovXG5NYXQzLnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uKHYsdGFyZ2V0KXtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IE1hdDMoKTtcbiAgICB2YXIgZSA9IHRoaXMuZWxlbWVudHMsXG4gICAgICAgIHQgPSB0YXJnZXQuZWxlbWVudHM7XG4gICAgZm9yKHZhciBpPTA7IGkhPT0zOyBpKyspe1xuICAgICAgICB0WzMqaSArIDBdID0gdi54ICogZVszKmkgKyAwXTtcbiAgICAgICAgdFszKmkgKyAxXSA9IHYueSAqIGVbMyppICsgMV07XG4gICAgICAgIHRbMyppICsgMl0gPSB2LnogKiBlWzMqaSArIDJdO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBTb2x2ZSBBeD1iXG4gKiBAbWV0aG9kIHNvbHZlXG4gKiBAcGFyYW0ge1ZlYzN9IGIgVGhlIHJpZ2h0IGhhbmQgc2lkZVxuICogQHBhcmFtIHtWZWMzfSB0YXJnZXQgT3B0aW9uYWwuIFRhcmdldCB2ZWN0b3IgdG8gc2F2ZSBpbi5cbiAqIEByZXR1cm4ge1ZlYzN9IFRoZSBzb2x1dGlvbiB4XG4gKiBAdG9kbyBzaG91bGQgcmV1c2UgYXJyYXlzXG4gKi9cbk1hdDMucHJvdG90eXBlLnNvbHZlID0gZnVuY3Rpb24oYix0YXJnZXQpe1xuICAgIHRhcmdldCA9IHRhcmdldCB8fCBuZXcgVmVjMygpO1xuXG4gICAgLy8gQ29uc3RydWN0IGVxdWF0aW9uc1xuICAgIHZhciBuciA9IDM7IC8vIG51bSByb3dzXG4gICAgdmFyIG5jID0gNDsgLy8gbnVtIGNvbHNcbiAgICB2YXIgZXFucyA9IFtdO1xuICAgIGZvcih2YXIgaT0wOyBpPG5yKm5jOyBpKyspe1xuICAgICAgICBlcW5zLnB1c2goMCk7XG4gICAgfVxuICAgIHZhciBpLGo7XG4gICAgZm9yKGk9MDsgaTwzOyBpKyspe1xuICAgICAgICBmb3Ioaj0wOyBqPDM7IGorKyl7XG4gICAgICAgICAgICBlcW5zW2krbmMqal0gPSB0aGlzLmVsZW1lbnRzW2krMypqXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlcW5zWzMrNCowXSA9IGIueDtcbiAgICBlcW5zWzMrNCoxXSA9IGIueTtcbiAgICBlcW5zWzMrNCoyXSA9IGIuejtcblxuICAgIC8vIENvbXB1dGUgcmlnaHQgdXBwZXIgdHJpYW5ndWxhciB2ZXJzaW9uIG9mIHRoZSBtYXRyaXggLSBHYXVzcyBlbGltaW5hdGlvblxuICAgIHZhciBuID0gMywgayA9IG4sIG5wO1xuICAgIHZhciBrcCA9IDQ7IC8vIG51bSByb3dzXG4gICAgdmFyIHAsIGVscztcbiAgICBkbyB7XG4gICAgICAgIGkgPSBrIC0gbjtcbiAgICAgICAgaWYgKGVxbnNbaStuYyppXSA9PT0gMCkge1xuICAgICAgICAgICAgLy8gdGhlIHBpdm90IGlzIG51bGwsIHN3YXAgbGluZXNcbiAgICAgICAgICAgIGZvciAoaiA9IGkgKyAxOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVxbnNbaStuYypqXSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBucCA9IGtwO1xuICAgICAgICAgICAgICAgICAgICBkbyB7ICAvLyBkbyBsaWduZSggaSApID0gbGlnbmUoIGkgKSArIGxpZ25lKCBrIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBrcCAtIG5wO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXFuc1twK25jKmldICs9IGVxbnNbcCtuYypqXTtcbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1ucCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXFuc1tpK25jKmldICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGogPSBpICsgMTsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBtdWx0aXBsaWVyID0gZXFuc1tpK25jKmpdIC8gZXFuc1tpK25jKmldO1xuICAgICAgICAgICAgICAgIG5wID0ga3A7XG4gICAgICAgICAgICAgICAgZG8geyAgLy8gZG8gbGlnbmUoIGsgKSA9IGxpZ25lKCBrICkgLSBtdWx0aXBsaWVyICogbGlnbmUoIGkgKVxuICAgICAgICAgICAgICAgICAgICBwID0ga3AgLSBucDtcbiAgICAgICAgICAgICAgICAgICAgZXFuc1twK25jKmpdID0gcCA8PSBpID8gMCA6IGVxbnNbcCtuYypqXSAtIGVxbnNbcCtuYyppXSAqIG11bHRpcGxpZXIgO1xuICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbnApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSB3aGlsZSAoLS1uKTtcblxuICAgIC8vIEdldCB0aGUgc29sdXRpb25cbiAgICB0YXJnZXQueiA9IGVxbnNbMipuYyszXSAvIGVxbnNbMipuYysyXTtcbiAgICB0YXJnZXQueSA9IChlcW5zWzEqbmMrM10gLSBlcW5zWzEqbmMrMl0qdGFyZ2V0LnopIC8gZXFuc1sxKm5jKzFdO1xuICAgIHRhcmdldC54ID0gKGVxbnNbMCpuYyszXSAtIGVxbnNbMCpuYysyXSp0YXJnZXQueiAtIGVxbnNbMCpuYysxXSp0YXJnZXQueSkgLyBlcW5zWzAqbmMrMF07XG5cbiAgICBpZihpc05hTih0YXJnZXQueCkgfHwgaXNOYU4odGFyZ2V0LnkpIHx8IGlzTmFOKHRhcmdldC56KSB8fCB0YXJnZXQueD09PUluZmluaXR5IHx8IHRhcmdldC55PT09SW5maW5pdHkgfHwgdGFyZ2V0Lno9PT1JbmZpbml0eSl7XG4gICAgICAgIHRocm93IFwiQ291bGQgbm90IHNvbHZlIGVxdWF0aW9uISBHb3QgeD1bXCIrdGFyZ2V0LnRvU3RyaW5nKCkrXCJdLCBiPVtcIitiLnRvU3RyaW5nKCkrXCJdLCBBPVtcIit0aGlzLnRvU3RyaW5nKCkrXCJdXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2V0IGFuIGVsZW1lbnQgaW4gdGhlIG1hdHJpeCBieSBpbmRleC4gSW5kZXggc3RhcnRzIGF0IDAsIG5vdCAxISEhXG4gKiBAbWV0aG9kIGVcbiAqIEBwYXJhbSB7TnVtYmVyfSByb3dcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2x1bW5cbiAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSBPcHRpb25hbC4gSWYgcHJvdmlkZWQsIHRoZSBtYXRyaXggZWxlbWVudCB3aWxsIGJlIHNldCB0byB0aGlzIHZhbHVlLlxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5NYXQzLnByb3RvdHlwZS5lID0gZnVuY3Rpb24oIHJvdyAsIGNvbHVtbiAsdmFsdWUpe1xuICAgIGlmKHZhbHVlPT09dW5kZWZpbmVkKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHNbY29sdW1uKzMqcm93XTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXQgdmFsdWVcbiAgICAgICAgdGhpcy5lbGVtZW50c1tjb2x1bW4rMypyb3ddID0gdmFsdWU7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDb3B5IGFub3RoZXIgbWF0cml4IGludG8gdGhpcyBtYXRyaXggb2JqZWN0LlxuICogQG1ldGhvZCBjb3B5XG4gKiBAcGFyYW0ge01hdDN9IHNvdXJjZVxuICogQHJldHVybiB7TWF0M30gdGhpc1xuICovXG5NYXQzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24oc291cmNlKXtcbiAgICBmb3IodmFyIGk9MDsgaSA8IHNvdXJjZS5lbGVtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0gPSBzb3VyY2UuZWxlbWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXguXG4gKiBAbWV0aG9kIHRvU3RyaW5nXG4gKiBAcmV0dXJuIHN0cmluZ1xuICovXG5NYXQzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHIgPSBcIlwiO1xuICAgIHZhciBzZXAgPSBcIixcIjtcbiAgICBmb3IodmFyIGk9MDsgaTw5OyBpKyspe1xuICAgICAgICByICs9IHRoaXMuZWxlbWVudHNbaV0gKyBzZXA7XG4gICAgfVxuICAgIHJldHVybiByO1xufTtcblxuLyoqXG4gKiByZXZlcnNlIHRoZSBtYXRyaXhcbiAqIEBtZXRob2QgcmV2ZXJzZVxuICogQHBhcmFtIHtNYXQzfSB0YXJnZXQgT3B0aW9uYWwuIFRhcmdldCBtYXRyaXggdG8gc2F2ZSBpbi5cbiAqIEByZXR1cm4ge01hdDN9IFRoZSBzb2x1dGlvbiB4XG4gKi9cbk1hdDMucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbih0YXJnZXQpe1xuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IG5ldyBNYXQzKCk7XG5cbiAgICAvLyBDb25zdHJ1Y3QgZXF1YXRpb25zXG4gICAgdmFyIG5yID0gMzsgLy8gbnVtIHJvd3NcbiAgICB2YXIgbmMgPSA2OyAvLyBudW0gY29sc1xuICAgIHZhciBlcW5zID0gW107XG4gICAgZm9yKHZhciBpPTA7IGk8bnIqbmM7IGkrKyl7XG4gICAgICAgIGVxbnMucHVzaCgwKTtcbiAgICB9XG4gICAgdmFyIGksajtcbiAgICBmb3IoaT0wOyBpPDM7IGkrKyl7XG4gICAgICAgIGZvcihqPTA7IGo8MzsgaisrKXtcbiAgICAgICAgICAgIGVxbnNbaStuYypqXSA9IHRoaXMuZWxlbWVudHNbaSszKmpdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVxbnNbMys2KjBdID0gMTtcbiAgICBlcW5zWzMrNioxXSA9IDA7XG4gICAgZXFuc1szKzYqMl0gPSAwO1xuICAgIGVxbnNbNCs2KjBdID0gMDtcbiAgICBlcW5zWzQrNioxXSA9IDE7XG4gICAgZXFuc1s0KzYqMl0gPSAwO1xuICAgIGVxbnNbNSs2KjBdID0gMDtcbiAgICBlcW5zWzUrNioxXSA9IDA7XG4gICAgZXFuc1s1KzYqMl0gPSAxO1xuXG4gICAgLy8gQ29tcHV0ZSByaWdodCB1cHBlciB0cmlhbmd1bGFyIHZlcnNpb24gb2YgdGhlIG1hdHJpeCAtIEdhdXNzIGVsaW1pbmF0aW9uXG4gICAgdmFyIG4gPSAzLCBrID0gbiwgbnA7XG4gICAgdmFyIGtwID0gbmM7IC8vIG51bSByb3dzXG4gICAgdmFyIHA7XG4gICAgZG8ge1xuICAgICAgICBpID0gayAtIG47XG4gICAgICAgIGlmIChlcW5zW2krbmMqaV0gPT09IDApIHtcbiAgICAgICAgICAgIC8vIHRoZSBwaXZvdCBpcyBudWxsLCBzd2FwIGxpbmVzXG4gICAgICAgICAgICBmb3IgKGogPSBpICsgMTsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChlcW5zW2krbmMqal0gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbnAgPSBrcDtcbiAgICAgICAgICAgICAgICAgICAgZG8geyAvLyBkbyBsaW5lKCBpICkgPSBsaW5lKCBpICkgKyBsaW5lKCBrIClcbiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBrcCAtIG5wO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXFuc1twK25jKmldICs9IGVxbnNbcCtuYypqXTtcbiAgICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1ucCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXFuc1tpK25jKmldICE9PSAwKSB7XG4gICAgICAgICAgICBmb3IgKGogPSBpICsgMTsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBtdWx0aXBsaWVyID0gZXFuc1tpK25jKmpdIC8gZXFuc1tpK25jKmldO1xuICAgICAgICAgICAgICAgIG5wID0ga3A7XG4gICAgICAgICAgICAgICAgZG8geyAvLyBkbyBsaW5lKCBrICkgPSBsaW5lKCBrICkgLSBtdWx0aXBsaWVyICogbGluZSggaSApXG4gICAgICAgICAgICAgICAgICAgIHAgPSBrcCAtIG5wO1xuICAgICAgICAgICAgICAgICAgICBlcW5zW3ArbmMqal0gPSBwIDw9IGkgPyAwIDogZXFuc1twK25jKmpdIC0gZXFuc1twK25jKmldICogbXVsdGlwbGllciA7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1ucCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IHdoaWxlICgtLW4pO1xuXG4gICAgLy8gZWxpbWluYXRlIHRoZSB1cHBlciBsZWZ0IHRyaWFuZ2xlIG9mIHRoZSBtYXRyaXhcbiAgICBpID0gMjtcbiAgICBkbyB7XG4gICAgICAgIGogPSBpLTE7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHZhciBtdWx0aXBsaWVyID0gZXFuc1tpK25jKmpdIC8gZXFuc1tpK25jKmldO1xuICAgICAgICAgICAgbnAgPSBuYztcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBwID0gbmMgLSBucDtcbiAgICAgICAgICAgICAgICBlcW5zW3ArbmMqal0gPSAgZXFuc1twK25jKmpdIC0gZXFuc1twK25jKmldICogbXVsdGlwbGllciA7XG4gICAgICAgICAgICB9IHdoaWxlICgtLW5wKTtcbiAgICAgICAgfSB3aGlsZSAoai0tKTtcbiAgICB9IHdoaWxlICgtLWkpO1xuXG4gICAgLy8gb3BlcmF0aW9ucyBvbiB0aGUgZGlhZ29uYWxcbiAgICBpID0gMjtcbiAgICBkbyB7XG4gICAgICAgIHZhciBtdWx0aXBsaWVyID0gMSAvIGVxbnNbaStuYyppXTtcbiAgICAgICAgbnAgPSBuYztcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgcCA9IG5jIC0gbnA7XG4gICAgICAgICAgICBlcW5zW3ArbmMqaV0gPSBlcW5zW3ArbmMqaV0gKiBtdWx0aXBsaWVyIDtcbiAgICAgICAgfSB3aGlsZSAoLS1ucCk7XG4gICAgfSB3aGlsZSAoaS0tKTtcblxuICAgIGkgPSAyO1xuICAgIGRvIHtcbiAgICAgICAgaiA9IDI7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHAgPSBlcW5zW25yK2orbmMqaV07XG4gICAgICAgICAgICBpZiggaXNOYU4oIHAgKSB8fCBwID09PUluZmluaXR5ICl7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJDb3VsZCBub3QgcmV2ZXJzZSEgQT1bXCIrdGhpcy50b1N0cmluZygpK1wiXVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFyZ2V0LmUoIGkgLCBqICwgcCApO1xuICAgICAgICB9IHdoaWxlIChqLS0pO1xuICAgIH0gd2hpbGUgKGktLSk7XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1hdHJpeCBmcm9tIGEgcXVhdGVyaW9uXG4gKiBAbWV0aG9kIHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb25cbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcVxuICovXG5NYXQzLnByb3RvdHlwZS5zZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uID0gZnVuY3Rpb24oIHEgKSB7XG4gICAgdmFyIHggPSBxLngsIHkgPSBxLnksIHogPSBxLnosIHcgPSBxLncsXG4gICAgICAgIHgyID0geCArIHgsIHkyID0geSArIHksIHoyID0geiArIHosXG4gICAgICAgIHh4ID0geCAqIHgyLCB4eSA9IHggKiB5MiwgeHogPSB4ICogejIsXG4gICAgICAgIHl5ID0geSAqIHkyLCB5eiA9IHkgKiB6MiwgenogPSB6ICogejIsXG4gICAgICAgIHd4ID0gdyAqIHgyLCB3eSA9IHcgKiB5Miwgd3ogPSB3ICogejIsXG4gICAgICAgIGUgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgZVszKjAgKyAwXSA9IDEgLSAoIHl5ICsgenogKTtcbiAgICBlWzMqMCArIDFdID0geHkgLSB3ejtcbiAgICBlWzMqMCArIDJdID0geHogKyB3eTtcblxuICAgIGVbMyoxICsgMF0gPSB4eSArIHd6O1xuICAgIGVbMyoxICsgMV0gPSAxIC0gKCB4eCArIHp6ICk7XG4gICAgZVszKjEgKyAyXSA9IHl6IC0gd3g7XG5cbiAgICBlWzMqMiArIDBdID0geHogLSB3eTtcbiAgICBlWzMqMiArIDFdID0geXogKyB3eDtcbiAgICBlWzMqMiArIDJdID0gMSAtICggeHggKyB5eSApO1xuXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFRyYW5zcG9zZSB0aGUgbWF0cml4XG4gKiBAbWV0aG9kIHRyYW5zcG9zZVxuICogQHBhcmFtICB7TWF0M30gdGFyZ2V0IFdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHQuXG4gKiBAcmV0dXJuIHtNYXQzfSBUaGUgdGFyZ2V0IE1hdDMsIG9yIGEgbmV3IE1hdDMgaWYgdGFyZ2V0IHdhcyBvbWl0dGVkLlxuICovXG5NYXQzLnByb3RvdHlwZS50cmFuc3Bvc2UgPSBmdW5jdGlvbiggdGFyZ2V0ICkge1xuICAgIHRhcmdldCA9IHRhcmdldCB8fCBuZXcgTWF0MygpO1xuXG4gICAgdmFyIE10ID0gdGFyZ2V0LmVsZW1lbnRzLFxuICAgICAgICBNID0gdGhpcy5lbGVtZW50cztcblxuICAgIGZvcih2YXIgaT0wOyBpIT09MzsgaSsrKXtcbiAgICAgICAgZm9yKHZhciBqPTA7IGohPT0zOyBqKyspe1xuICAgICAgICAgICAgTXRbMyppICsgal0gPSBNWzMqaiArIGldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cbn0se1wiLi9WZWMzXCI6MzB9XSwyODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFF1YXRlcm5pb247XG5cbnZhciBWZWMzID0gX2RlcmVxXygnLi9WZWMzJyk7XG5cbi8qKlxuICogQSBRdWF0ZXJuaW9uIGRlc2NyaWJlcyBhIHJvdGF0aW9uIGluIDNEIHNwYWNlLiBUaGUgUXVhdGVybmlvbiBpcyBtYXRoZW1hdGljYWxseSBkZWZpbmVkIGFzIFEgPSB4KmkgKyB5KmogKyB6KmsgKyB3LCB3aGVyZSAoaSxqLGspIGFyZSBpbWFnaW5hcnkgYmFzaXMgdmVjdG9ycy4gKHgseSx6KSBjYW4gYmUgc2VlbiBhcyBhIHZlY3RvciByZWxhdGVkIHRvIHRoZSBheGlzIG9mIHJvdGF0aW9uLCB3aGlsZSB0aGUgcmVhbCBtdWx0aXBsaWVyLCB3LCBpcyByZWxhdGVkIHRvIHRoZSBhbW91bnQgb2Ygcm90YXRpb24uXG4gKiBAY2xhc3MgUXVhdGVybmlvblxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge051bWJlcn0geCBNdWx0aXBsaWVyIG9mIHRoZSBpbWFnaW5hcnkgYmFzaXMgdmVjdG9yIGkuXG4gKiBAcGFyYW0ge051bWJlcn0geSBNdWx0aXBsaWVyIG9mIHRoZSBpbWFnaW5hcnkgYmFzaXMgdmVjdG9yIGouXG4gKiBAcGFyYW0ge051bWJlcn0geiBNdWx0aXBsaWVyIG9mIHRoZSBpbWFnaW5hcnkgYmFzaXMgdmVjdG9yIGsuXG4gKiBAcGFyYW0ge051bWJlcn0gdyBNdWx0aXBsaWVyIG9mIHRoZSByZWFsIHBhcnQuXG4gKiBAc2VlIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUXVhdGVybmlvblxuICovXG5mdW5jdGlvbiBRdWF0ZXJuaW9uKHgseSx6LHcpe1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB4XG4gICAgICovXG4gICAgdGhpcy54ID0geCE9PXVuZGVmaW5lZCA/IHggOiAwO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHlcbiAgICAgKi9cbiAgICB0aGlzLnkgPSB5IT09dW5kZWZpbmVkID8geSA6IDA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gelxuICAgICAqL1xuICAgIHRoaXMueiA9IHohPT11bmRlZmluZWQgPyB6IDogMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtdWx0aXBsaWVyIG9mIHRoZSByZWFsIHF1YXRlcm5pb24gYmFzaXMgdmVjdG9yLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB3XG4gICAgICovXG4gICAgdGhpcy53ID0gdyE9PXVuZGVmaW5lZCA/IHcgOiAxO1xufVxuXG4vKipcbiAqIFNldCB0aGUgdmFsdWUgb2YgdGhlIHF1YXRlcm5pb24uXG4gKiBAbWV0aG9kIHNldFxuICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiBAcGFyYW0ge051bWJlcn0gelxuICogQHBhcmFtIHtOdW1iZXJ9IHdcbiAqL1xuUXVhdGVybmlvbi5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oeCx5LHosdyl7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMueiA9IHo7XG4gICAgdGhpcy53ID0gdztcbn07XG5cbi8qKlxuICogQ29udmVydCB0byBhIHJlYWRhYmxlIGZvcm1hdFxuICogQG1ldGhvZCB0b1N0cmluZ1xuICogQHJldHVybiBzdHJpbmdcbiAqL1xuUXVhdGVybmlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLngrXCIsXCIrdGhpcy55K1wiLFwiK3RoaXMueitcIixcIit0aGlzLnc7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgdG8gYW4gQXJyYXlcbiAqIEBtZXRob2QgdG9BcnJheVxuICogQHJldHVybiBBcnJheVxuICovXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gW3RoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMud107XG59O1xuXG4vKipcbiAqIFNldCB0aGUgcXVhdGVybmlvbiBjb21wb25lbnRzIGdpdmVuIGFuIGF4aXMgYW5kIGFuIGFuZ2xlLlxuICogQG1ldGhvZCBzZXRGcm9tQXhpc0FuZ2xlXG4gKiBAcGFyYW0ge1ZlYzN9IGF4aXNcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbmdsZSBpbiByYWRpYW5zXG4gKi9cblF1YXRlcm5pb24ucHJvdG90eXBlLnNldEZyb21BeGlzQW5nbGUgPSBmdW5jdGlvbihheGlzLGFuZ2xlKXtcbiAgICB2YXIgcyA9IE1hdGguc2luKGFuZ2xlKjAuNSk7XG4gICAgdGhpcy54ID0gYXhpcy54ICogcztcbiAgICB0aGlzLnkgPSBheGlzLnkgKiBzO1xuICAgIHRoaXMueiA9IGF4aXMueiAqIHM7XG4gICAgdGhpcy53ID0gTWF0aC5jb3MoYW5nbGUqMC41KTtcbn07XG5cbi8qKlxuICogQ29udmVydHMgdGhlIHF1YXRlcm5pb24gdG8gYXhpcy9hbmdsZSByZXByZXNlbnRhdGlvbi5cbiAqIEBtZXRob2QgdG9BeGlzQW5nbGVcbiAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0QXhpcyBPcHRpb25hbC4gQSB2ZWN0b3Igb2JqZWN0IHRvIHJldXNlIGZvciBzdG9yaW5nIHRoZSBheGlzLlxuICogQHJldHVybiBBcnJheSBBbiBhcnJheSwgZmlyc3QgZWxlbW50IGlzIHRoZSBheGlzIGFuZCB0aGUgc2Vjb25kIGlzIHRoZSBhbmdsZSBpbiByYWRpYW5zLlxuICovXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS50b0F4aXNBbmdsZSA9IGZ1bmN0aW9uKHRhcmdldEF4aXMpe1xuICAgIHRhcmdldEF4aXMgPSB0YXJnZXRBeGlzIHx8IG5ldyBWZWMzKCk7XG4gICAgdGhpcy5ub3JtYWxpemUoKTsgLy8gaWYgdz4xIGFjb3MgYW5kIHNxcnQgd2lsbCBwcm9kdWNlIGVycm9ycywgdGhpcyBjYW50IGhhcHBlbiBpZiBxdWF0ZXJuaW9uIGlzIG5vcm1hbGlzZWRcbiAgICB2YXIgYW5nbGUgPSAyICogTWF0aC5hY29zKHRoaXMudyk7XG4gICAgdmFyIHMgPSBNYXRoLnNxcnQoMS10aGlzLncqdGhpcy53KTsgLy8gYXNzdW1pbmcgcXVhdGVybmlvbiBub3JtYWxpc2VkIHRoZW4gdyBpcyBsZXNzIHRoYW4gMSwgc28gdGVybSBhbHdheXMgcG9zaXRpdmUuXG4gICAgaWYgKHMgPCAwLjAwMSkgeyAvLyB0ZXN0IHRvIGF2b2lkIGRpdmlkZSBieSB6ZXJvLCBzIGlzIGFsd2F5cyBwb3NpdGl2ZSBkdWUgdG8gc3FydFxuICAgICAgICAvLyBpZiBzIGNsb3NlIHRvIHplcm8gdGhlbiBkaXJlY3Rpb24gb2YgYXhpcyBub3QgaW1wb3J0YW50XG4gICAgICAgIHRhcmdldEF4aXMueCA9IHRoaXMueDsgLy8gaWYgaXQgaXMgaW1wb3J0YW50IHRoYXQgYXhpcyBpcyBub3JtYWxpc2VkIHRoZW4gcmVwbGFjZSB3aXRoIHg9MTsgeT16PTA7XG4gICAgICAgIHRhcmdldEF4aXMueSA9IHRoaXMueTtcbiAgICAgICAgdGFyZ2V0QXhpcy56ID0gdGhpcy56O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldEF4aXMueCA9IHRoaXMueCAvIHM7IC8vIG5vcm1hbGlzZSBheGlzXG4gICAgICAgIHRhcmdldEF4aXMueSA9IHRoaXMueSAvIHM7XG4gICAgICAgIHRhcmdldEF4aXMueiA9IHRoaXMueiAvIHM7XG4gICAgfVxuICAgIHJldHVybiBbdGFyZ2V0QXhpcyxhbmdsZV07XG59O1xuXG52YXIgc2Z2X3QxID0gbmV3IFZlYzMoKSxcbiAgICBzZnZfdDIgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIFNldCB0aGUgcXVhdGVybmlvbiB2YWx1ZSBnaXZlbiB0d28gdmVjdG9ycy4gVGhlIHJlc3VsdGluZyByb3RhdGlvbiB3aWxsIGJlIHRoZSBuZWVkZWQgcm90YXRpb24gdG8gcm90YXRlIHUgdG8gdi5cbiAqIEBtZXRob2Qgc2V0RnJvbVZlY3RvcnNcbiAqIEBwYXJhbSB7VmVjM30gdVxuICogQHBhcmFtIHtWZWMzfSB2XG4gKi9cblF1YXRlcm5pb24ucHJvdG90eXBlLnNldEZyb21WZWN0b3JzID0gZnVuY3Rpb24odSx2KXtcbiAgICBpZih1LmlzQW50aXBhcmFsbGVsVG8odikpe1xuICAgICAgICB2YXIgdDEgPSBzZnZfdDE7XG4gICAgICAgIHZhciB0MiA9IHNmdl90MjtcblxuICAgICAgICB1LnRhbmdlbnRzKHQxLHQyKTtcbiAgICAgICAgdGhpcy5zZXRGcm9tQXhpc0FuZ2xlKHQxLE1hdGguUEkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhID0gdS5jcm9zcyh2KTtcbiAgICAgICAgdGhpcy54ID0gYS54O1xuICAgICAgICB0aGlzLnkgPSBhLnk7XG4gICAgICAgIHRoaXMueiA9IGEuejtcbiAgICAgICAgdGhpcy53ID0gTWF0aC5zcXJ0KE1hdGgucG93KHUubm9ybSgpLDIpICogTWF0aC5wb3codi5ub3JtKCksMikpICsgdS5kb3Qodik7XG4gICAgICAgIHRoaXMubm9ybWFsaXplKCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBRdWF0ZXJuaW9uIG11bHRpcGxpY2F0aW9uXG4gKiBAbWV0aG9kIG11bHRcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcVxuICogQHBhcmFtIHtRdWF0ZXJuaW9ufSB0YXJnZXQgT3B0aW9uYWwuXG4gKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufVxuICovXG52YXIgUXVhdGVybmlvbl9tdWx0X3ZhID0gbmV3IFZlYzMoKTtcbnZhciBRdWF0ZXJuaW9uX211bHRfdmIgPSBuZXcgVmVjMygpO1xudmFyIFF1YXRlcm5pb25fbXVsdF92YXh2YiA9IG5ldyBWZWMzKCk7XG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5tdWx0ID0gZnVuY3Rpb24ocSx0YXJnZXQpe1xuICAgIHRhcmdldCA9IHRhcmdldCB8fCBuZXcgUXVhdGVybmlvbigpO1xuICAgIHZhciB3ID0gdGhpcy53LFxuICAgICAgICB2YSA9IFF1YXRlcm5pb25fbXVsdF92YSxcbiAgICAgICAgdmIgPSBRdWF0ZXJuaW9uX211bHRfdmIsXG4gICAgICAgIHZheHZiID0gUXVhdGVybmlvbl9tdWx0X3ZheHZiO1xuXG4gICAgdmEuc2V0KHRoaXMueCx0aGlzLnksdGhpcy56KTtcbiAgICB2Yi5zZXQocS54LHEueSxxLnopO1xuICAgIHRhcmdldC53ID0gdypxLncgLSB2YS5kb3QodmIpO1xuICAgIHZhLmNyb3NzKHZiLHZheHZiKTtcblxuICAgIHRhcmdldC54ID0gdyAqIHZiLnggKyBxLncqdmEueCArIHZheHZiLng7XG4gICAgdGFyZ2V0LnkgPSB3ICogdmIueSArIHEudyp2YS55ICsgdmF4dmIueTtcbiAgICB0YXJnZXQueiA9IHcgKiB2Yi56ICsgcS53KnZhLnogKyB2YXh2Yi56O1xuXG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBpbnZlcnNlIHF1YXRlcm5pb24gcm90YXRpb24uXG4gKiBAbWV0aG9kIGludmVyc2VcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gdGFyZ2V0XG4gKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufVxuICovXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5pbnZlcnNlID0gZnVuY3Rpb24odGFyZ2V0KXtcbiAgICB2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMueiwgdyA9IHRoaXMudztcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFF1YXRlcm5pb24oKTtcblxuICAgIHRoaXMuY29uanVnYXRlKHRhcmdldCk7XG4gICAgdmFyIGlub3JtMiA9IDEvKHgqeCArIHkqeSArIHoqeiArIHcqdyk7XG4gICAgdGFyZ2V0LnggKj0gaW5vcm0yO1xuICAgIHRhcmdldC55ICo9IGlub3JtMjtcbiAgICB0YXJnZXQueiAqPSBpbm9ybTI7XG4gICAgdGFyZ2V0LncgKj0gaW5vcm0yO1xuXG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBxdWF0ZXJuaW9uIGNvbmp1Z2F0ZVxuICogQG1ldGhvZCBjb25qdWdhdGVcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gdGFyZ2V0XG4gKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufVxuICovXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbih0YXJnZXQpe1xuICAgIHRhcmdldCA9IHRhcmdldCB8fCBuZXcgUXVhdGVybmlvbigpO1xuXG4gICAgdGFyZ2V0LnggPSAtdGhpcy54O1xuICAgIHRhcmdldC55ID0gLXRoaXMueTtcbiAgICB0YXJnZXQueiA9IC10aGlzLno7XG4gICAgdGFyZ2V0LncgPSB0aGlzLnc7XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIHF1YXRlcm5pb24uIE5vdGUgdGhhdCB0aGlzIGNoYW5nZXMgdGhlIHZhbHVlcyBvZiB0aGUgcXVhdGVybmlvbi5cbiAqIEBtZXRob2Qgbm9ybWFsaXplXG4gKi9cblF1YXRlcm5pb24ucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGwgPSBNYXRoLnNxcnQodGhpcy54KnRoaXMueCt0aGlzLnkqdGhpcy55K3RoaXMueip0aGlzLnordGhpcy53KnRoaXMudyk7XG4gICAgaWYgKCBsID09PSAwICkge1xuICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICB0aGlzLnkgPSAwO1xuICAgICAgICB0aGlzLnogPSAwO1xuICAgICAgICB0aGlzLncgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGwgPSAxIC8gbDtcbiAgICAgICAgdGhpcy54ICo9IGw7XG4gICAgICAgIHRoaXMueSAqPSBsO1xuICAgICAgICB0aGlzLnogKj0gbDtcbiAgICAgICAgdGhpcy53ICo9IGw7XG4gICAgfVxufTtcblxuLyoqXG4gKiBBcHByb3hpbWF0aW9uIG9mIHF1YXRlcm5pb24gbm9ybWFsaXphdGlvbi4gV29ya3MgYmVzdCB3aGVuIHF1YXQgaXMgYWxyZWFkeSBhbG1vc3Qtbm9ybWFsaXplZC5cbiAqIEBtZXRob2Qgbm9ybWFsaXplRmFzdFxuICogQHNlZSBodHRwOi8vanNwZXJmLmNvbS9mYXN0LXF1YXRlcm5pb24tbm9ybWFsaXphdGlvblxuICogQGF1dGhvciB1bnBoYXNlZCwgaHR0cHM6Ly9naXRodWIuY29tL3VucGhhc2VkXG4gKi9cblF1YXRlcm5pb24ucHJvdG90eXBlLm5vcm1hbGl6ZUZhc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGYgPSAoMy4wLSh0aGlzLngqdGhpcy54K3RoaXMueSp0aGlzLnkrdGhpcy56KnRoaXMueit0aGlzLncqdGhpcy53KSkvMi4wO1xuICAgIGlmICggZiA9PT0gMCApIHtcbiAgICAgICAgdGhpcy54ID0gMDtcbiAgICAgICAgdGhpcy55ID0gMDtcbiAgICAgICAgdGhpcy56ID0gMDtcbiAgICAgICAgdGhpcy53ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnggKj0gZjtcbiAgICAgICAgdGhpcy55ICo9IGY7XG4gICAgICAgIHRoaXMueiAqPSBmO1xuICAgICAgICB0aGlzLncgKj0gZjtcbiAgICB9XG59O1xuXG4vKipcbiAqIE11bHRpcGx5IHRoZSBxdWF0ZXJuaW9uIGJ5IGEgdmVjdG9yXG4gKiBAbWV0aG9kIHZtdWx0XG4gKiBAcGFyYW0ge1ZlYzN9IHZcbiAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0IE9wdGlvbmFsXG4gKiBAcmV0dXJuIHtWZWMzfVxuICovXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS52bXVsdCA9IGZ1bmN0aW9uKHYsdGFyZ2V0KXtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFZlYzMoKTtcblxuICAgIHZhciB4ID0gdi54LFxuICAgICAgICB5ID0gdi55LFxuICAgICAgICB6ID0gdi56O1xuXG4gICAgdmFyIHF4ID0gdGhpcy54LFxuICAgICAgICBxeSA9IHRoaXMueSxcbiAgICAgICAgcXogPSB0aGlzLnosXG4gICAgICAgIHF3ID0gdGhpcy53O1xuXG4gICAgLy8gcSp2XG4gICAgdmFyIGl4ID0gIHF3ICogeCArIHF5ICogeiAtIHF6ICogeSxcbiAgICBpeSA9ICBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHosXG4gICAgaXogPSAgcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4LFxuICAgIGl3ID0gLXF4ICogeCAtIHF5ICogeSAtIHF6ICogejtcblxuICAgIHRhcmdldC54ID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcbiAgICB0YXJnZXQueSA9IGl5ICogcXcgKyBpdyAqIC1xeSArIGl6ICogLXF4IC0gaXggKiAtcXo7XG4gICAgdGFyZ2V0LnogPSBpeiAqIHF3ICsgaXcgKiAtcXogKyBpeCAqIC1xeSAtIGl5ICogLXF4O1xuXG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogQ29waWVzIHZhbHVlIG9mIHNvdXJjZSB0byB0aGlzIHF1YXRlcm5pb24uXG4gKiBAbWV0aG9kIGNvcHlcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gc291cmNlXG4gKiBAcmV0dXJuIHtRdWF0ZXJuaW9ufSB0aGlzXG4gKi9cblF1YXRlcm5pb24ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbihzb3VyY2Upe1xuICAgIHRoaXMueCA9IHNvdXJjZS54O1xuICAgIHRoaXMueSA9IHNvdXJjZS55O1xuICAgIHRoaXMueiA9IHNvdXJjZS56O1xuICAgIHRoaXMudyA9IHNvdXJjZS53O1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IHRoZSBxdWF0ZXJuaW9uIHRvIGV1bGVyIGFuZ2xlIHJlcHJlc2VudGF0aW9uLiBPcmRlcjogWVpYLCBhcyB0aGlzIHBhZ2UgZGVzY3JpYmVzOiBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9zdGFuZGFyZHMvaW5kZXguaHRtXG4gKiBAbWV0aG9kIHRvRXVsZXJcbiAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0XG4gKiBAcGFyYW0gc3RyaW5nIG9yZGVyIFRocmVlLWNoYXJhY3RlciBzdHJpbmcgZS5nLiBcIllaWFwiLCB3aGljaCBhbHNvIGlzIGRlZmF1bHQuXG4gKi9cblF1YXRlcm5pb24ucHJvdG90eXBlLnRvRXVsZXIgPSBmdW5jdGlvbih0YXJnZXQsb3JkZXIpe1xuICAgIG9yZGVyID0gb3JkZXIgfHwgXCJZWlhcIjtcblxuICAgIHZhciBoZWFkaW5nLCBhdHRpdHVkZSwgYmFuaztcbiAgICB2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMueiwgdyA9IHRoaXMudztcblxuICAgIHN3aXRjaChvcmRlcil7XG4gICAgY2FzZSBcIllaWFwiOlxuICAgICAgICB2YXIgdGVzdCA9IHgqeSArIHoqdztcbiAgICAgICAgaWYgKHRlc3QgPiAwLjQ5OSkgeyAvLyBzaW5ndWxhcml0eSBhdCBub3J0aCBwb2xlXG4gICAgICAgICAgICBoZWFkaW5nID0gMiAqIE1hdGguYXRhbjIoeCx3KTtcbiAgICAgICAgICAgIGF0dGl0dWRlID0gTWF0aC5QSS8yO1xuICAgICAgICAgICAgYmFuayA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRlc3QgPCAtMC40OTkpIHsgLy8gc2luZ3VsYXJpdHkgYXQgc291dGggcG9sZVxuICAgICAgICAgICAgaGVhZGluZyA9IC0yICogTWF0aC5hdGFuMih4LHcpO1xuICAgICAgICAgICAgYXR0aXR1ZGUgPSAtIE1hdGguUEkvMjtcbiAgICAgICAgICAgIGJhbmsgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmKGlzTmFOKGhlYWRpbmcpKXtcbiAgICAgICAgICAgIHZhciBzcXggPSB4Kng7XG4gICAgICAgICAgICB2YXIgc3F5ID0geSp5O1xuICAgICAgICAgICAgdmFyIHNxeiA9IHoqejtcbiAgICAgICAgICAgIGhlYWRpbmcgPSBNYXRoLmF0YW4yKDIqeSp3IC0gMip4KnogLCAxIC0gMipzcXkgLSAyKnNxeik7IC8vIEhlYWRpbmdcbiAgICAgICAgICAgIGF0dGl0dWRlID0gTWF0aC5hc2luKDIqdGVzdCk7IC8vIGF0dGl0dWRlXG4gICAgICAgICAgICBiYW5rID0gTWF0aC5hdGFuMigyKngqdyAtIDIqeSp6ICwgMSAtIDIqc3F4IC0gMipzcXopOyAvLyBiYW5rXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXVsZXIgb3JkZXIgXCIrb3JkZXIrXCIgbm90IHN1cHBvcnRlZCB5ZXQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC55ID0gaGVhZGluZztcbiAgICB0YXJnZXQueiA9IGF0dGl0dWRlO1xuICAgIHRhcmdldC54ID0gYmFuaztcbn07XG5cbi8qKlxuICogU2VlIGh0dHA6Ly93d3cubWF0aHdvcmtzLmNvbS9tYXRsYWJjZW50cmFsL2ZpbGVleGNoYW5nZS8yMDY5Ni1mdW5jdGlvbi10by1jb252ZXJ0LWJldHdlZW4tZGNtLWV1bGVyLWFuZ2xlcy1xdWF0ZXJuaW9ucy1hbmQtZXVsZXItdmVjdG9ycy9jb250ZW50L1NwaW5DYWxjLm1cbiAqIEBtZXRob2Qgc2V0RnJvbUV1bGVyXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqIEBwYXJhbSB7TnVtYmVyfSB6XG4gKiBAcGFyYW0ge1N0cmluZ30gb3JkZXIgVGhlIG9yZGVyIHRvIGFwcGx5IGFuZ2xlczogJ1hZWicgb3IgJ1lYWicgb3IgYW55IG90aGVyIGNvbWJpbmF0aW9uXG4gKi9cblF1YXRlcm5pb24ucHJvdG90eXBlLnNldEZyb21FdWxlciA9IGZ1bmN0aW9uICggeCwgeSwgeiwgb3JkZXIgKSB7XG4gICAgb3JkZXIgPSBvcmRlciB8fCBcIlhZWlwiO1xuXG4gICAgdmFyIGMxID0gTWF0aC5jb3MoIHggLyAyICk7XG4gICAgdmFyIGMyID0gTWF0aC5jb3MoIHkgLyAyICk7XG4gICAgdmFyIGMzID0gTWF0aC5jb3MoIHogLyAyICk7XG4gICAgdmFyIHMxID0gTWF0aC5zaW4oIHggLyAyICk7XG4gICAgdmFyIHMyID0gTWF0aC5zaW4oIHkgLyAyICk7XG4gICAgdmFyIHMzID0gTWF0aC5zaW4oIHogLyAyICk7XG5cbiAgICBpZiAoIG9yZGVyID09PSAnWFlaJyApIHtcblxuICAgICAgICB0aGlzLnggPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG4gICAgICAgIHRoaXMueSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcbiAgICAgICAgdGhpcy56ID0gYzEgKiBjMiAqIHMzICsgczEgKiBzMiAqIGMzO1xuICAgICAgICB0aGlzLncgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG5cbiAgICB9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1lYWicgKSB7XG5cbiAgICAgICAgdGhpcy54ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgICAgICB0aGlzLnkgPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG4gICAgICAgIHRoaXMueiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcbiAgICAgICAgdGhpcy53ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXG4gICAgfSBlbHNlIGlmICggb3JkZXIgPT09ICdaWFknICkge1xuXG4gICAgICAgIHRoaXMueCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcbiAgICAgICAgdGhpcy55ID0gYzEgKiBzMiAqIGMzICsgczEgKiBjMiAqIHMzO1xuICAgICAgICB0aGlzLnogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG4gICAgICAgIHRoaXMudyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcblxuICAgIH0gZWxzZSBpZiAoIG9yZGVyID09PSAnWllYJyApIHtcblxuICAgICAgICB0aGlzLnggPSBzMSAqIGMyICogYzMgLSBjMSAqIHMyICogczM7XG4gICAgICAgIHRoaXMueSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcbiAgICAgICAgdGhpcy56ID0gYzEgKiBjMiAqIHMzIC0gczEgKiBzMiAqIGMzO1xuICAgICAgICB0aGlzLncgPSBjMSAqIGMyICogYzMgKyBzMSAqIHMyICogczM7XG5cbiAgICB9IGVsc2UgaWYgKCBvcmRlciA9PT0gJ1laWCcgKSB7XG5cbiAgICAgICAgdGhpcy54ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuICAgICAgICB0aGlzLnkgPSBjMSAqIHMyICogYzMgKyBzMSAqIGMyICogczM7XG4gICAgICAgIHRoaXMueiA9IGMxICogYzIgKiBzMyAtIHMxICogczIgKiBjMztcbiAgICAgICAgdGhpcy53ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXG4gICAgfSBlbHNlIGlmICggb3JkZXIgPT09ICdYWlknICkge1xuXG4gICAgICAgIHRoaXMueCA9IHMxICogYzIgKiBjMyAtIGMxICogczIgKiBzMztcbiAgICAgICAgdGhpcy55ID0gYzEgKiBzMiAqIGMzIC0gczEgKiBjMiAqIHMzO1xuICAgICAgICB0aGlzLnogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG4gICAgICAgIHRoaXMudyA9IGMxICogYzIgKiBjMyArIHMxICogczIgKiBzMztcblxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuXG59O1xuXG5RdWF0ZXJuaW9uLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIG5ldyBRdWF0ZXJuaW9uKHRoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMudyk7XG59O1xufSx7XCIuL1ZlYzNcIjozMH1dLDI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBWZWMzID0gX2RlcmVxXygnLi9WZWMzJyk7XG52YXIgUXVhdGVybmlvbiA9IF9kZXJlcV8oJy4vUXVhdGVybmlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTtcblxuLyoqXG4gKiBAY2xhc3MgVHJhbnNmb3JtXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gVHJhbnNmb3JtKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHQvKipcblx0ICogQHByb3BlcnR5IHtWZWMzfSBwb3NpdGlvblxuXHQgKi9cblx0dGhpcy5wb3NpdGlvbiA9IG5ldyBWZWMzKCk7XG4gICAgaWYob3B0aW9ucy5wb3NpdGlvbil7XG4gICAgICAgIHRoaXMucG9zaXRpb24uY29weShvcHRpb25zLnBvc2l0aW9uKTtcbiAgICB9XG5cblx0LyoqXG5cdCAqIEBwcm9wZXJ0eSB7UXVhdGVybmlvbn0gcXVhdGVybmlvblxuXHQgKi9cblx0dGhpcy5xdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcbiAgICBpZihvcHRpb25zLnF1YXRlcm5pb24pe1xuICAgICAgICB0aGlzLnF1YXRlcm5pb24uY29weShvcHRpb25zLnF1YXRlcm5pb24pO1xuICAgIH1cbn1cblxudmFyIHRtcFF1YXQgPSBuZXcgUXVhdGVybmlvbigpO1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgcG9pbnRUb0xvY2FGcmFtZVxuICogQHBhcmFtIHtWZWMzfSBwb3NpdGlvblxuICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1ZlYzN9IHdvcmxkUG9pbnRcbiAqIEBwYXJhbSB7VmVjM30gcmVzdWx0XG4gKi9cblRyYW5zZm9ybS5wb2ludFRvTG9jYWxGcmFtZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCB3b3JsZFBvaW50LCByZXN1bHQpe1xuICAgIHZhciByZXN1bHQgPSByZXN1bHQgfHwgbmV3IFZlYzMoKTtcbiAgICB3b3JsZFBvaW50LnZzdWIocG9zaXRpb24sIHJlc3VsdCk7XG4gICAgcXVhdGVybmlvbi5jb25qdWdhdGUodG1wUXVhdCk7XG4gICAgdG1wUXVhdC52bXVsdChyZXN1bHQsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogR2V0IGEgZ2xvYmFsIHBvaW50IGluIGxvY2FsIHRyYW5zZm9ybSBjb29yZGluYXRlcy5cbiAqIEBtZXRob2QgcG9pbnRUb0xvY2FsXG4gKiBAcGFyYW0gIHtWZWMzfSBwb2ludFxuICogQHBhcmFtICB7VmVjM30gcmVzdWx0XG4gKiBAcmV0dXJuIHtWZWMzfSBUaGUgXCJyZXN1bHRcIiB2ZWN0b3Igb2JqZWN0XG4gKi9cblRyYW5zZm9ybS5wcm90b3R5cGUucG9pbnRUb0xvY2FsID0gZnVuY3Rpb24od29ybGRQb2ludCwgcmVzdWx0KXtcbiAgICByZXR1cm4gVHJhbnNmb3JtLnBvaW50VG9Mb2NhbEZyYW1lKHRoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgd29ybGRQb2ludCwgcmVzdWx0KTtcbn07XG5cbi8qKlxuICogQHN0YXRpY1xuICogQG1ldGhvZCBwb2ludFRvV29ybGRGcmFtZVxuICogQHBhcmFtIHtWZWMzfSBwb3NpdGlvblxuICogQHBhcmFtIHtWZWMzfSBxdWF0ZXJuaW9uXG4gKiBAcGFyYW0ge1ZlYzN9IGxvY2FsUG9pbnRcbiAqIEBwYXJhbSB7VmVjM30gcmVzdWx0XG4gKi9cblRyYW5zZm9ybS5wb2ludFRvV29ybGRGcmFtZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCBsb2NhbFBvaW50LCByZXN1bHQpe1xuICAgIHZhciByZXN1bHQgPSByZXN1bHQgfHwgbmV3IFZlYzMoKTtcbiAgICBxdWF0ZXJuaW9uLnZtdWx0KGxvY2FsUG9pbnQsIHJlc3VsdCk7XG4gICAgcmVzdWx0LnZhZGQocG9zaXRpb24sIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogR2V0IGEgbG9jYWwgcG9pbnQgaW4gZ2xvYmFsIHRyYW5zZm9ybSBjb29yZGluYXRlcy5cbiAqIEBtZXRob2QgcG9pbnRUb1dvcmxkXG4gKiBAcGFyYW0gIHtWZWMzfSBwb2ludFxuICogQHBhcmFtICB7VmVjM30gcmVzdWx0XG4gKiBAcmV0dXJuIHtWZWMzfSBUaGUgXCJyZXN1bHRcIiB2ZWN0b3Igb2JqZWN0XG4gKi9cblRyYW5zZm9ybS5wcm90b3R5cGUucG9pbnRUb1dvcmxkID0gZnVuY3Rpb24obG9jYWxQb2ludCwgcmVzdWx0KXtcbiAgICByZXR1cm4gVHJhbnNmb3JtLnBvaW50VG9Xb3JsZEZyYW1lKHRoaXMucG9zaXRpb24sIHRoaXMucXVhdGVybmlvbiwgbG9jYWxQb2ludCwgcmVzdWx0KTtcbn07XG5cblxuVHJhbnNmb3JtLnByb3RvdHlwZS52ZWN0b3JUb1dvcmxkRnJhbWUgPSBmdW5jdGlvbihsb2NhbFZlY3RvciwgcmVzdWx0KXtcbiAgICB2YXIgcmVzdWx0ID0gcmVzdWx0IHx8IG5ldyBWZWMzKCk7XG4gICAgdGhpcy5xdWF0ZXJuaW9uLnZtdWx0KGxvY2FsVmVjdG9yLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG5UcmFuc2Zvcm0udmVjdG9yVG9Xb3JsZEZyYW1lID0gZnVuY3Rpb24ocXVhdGVybmlvbiwgbG9jYWxWZWN0b3IsIHJlc3VsdCl7XG4gICAgcXVhdGVybmlvbi52bXVsdChsb2NhbFZlY3RvciwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuVHJhbnNmb3JtLnZlY3RvclRvTG9jYWxGcmFtZSA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBxdWF0ZXJuaW9uLCB3b3JsZFZlY3RvciwgcmVzdWx0KXtcbiAgICB2YXIgcmVzdWx0ID0gcmVzdWx0IHx8IG5ldyBWZWMzKCk7XG4gICAgcXVhdGVybmlvbi53ICo9IC0xO1xuICAgIHF1YXRlcm5pb24udm11bHQod29ybGRWZWN0b3IsIHJlc3VsdCk7XG4gICAgcXVhdGVybmlvbi53ICo9IC0xO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG59LHtcIi4vUXVhdGVybmlvblwiOjI4LFwiLi9WZWMzXCI6MzB9XSwzMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFZlYzM7XG5cbnZhciBNYXQzID0gX2RlcmVxXygnLi9NYXQzJyk7XG5cbi8qKlxuICogMy1kaW1lbnNpb25hbCB2ZWN0b3JcbiAqIEBjbGFzcyBWZWMzXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogQHBhcmFtIHtOdW1iZXJ9IHpcbiAqIEBhdXRob3Igc2NodGVwcGVcbiAqIEBleGFtcGxlXG4gKiAgICAgdmFyIHYgPSBuZXcgVmVjMygxLCAyLCAzKTtcbiAqICAgICBjb25zb2xlLmxvZygneD0nICsgdi54KTsgLy8geD0xXG4gKi9cbmZ1bmN0aW9uIFZlYzMoeCx5LHope1xuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB4XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLnggPSB4fHwwLjA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgeVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy55ID0geXx8MC4wO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHpcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMueiA9IHp8fDAuMDtcbn1cblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAcHJvcGVydHkge1ZlYzN9IFpFUk9cbiAqL1xuVmVjMy5aRVJPID0gbmV3IFZlYzMoMCwgMCwgMCk7XG5cbi8qKlxuICogQHN0YXRpY1xuICogQHByb3BlcnR5IHtWZWMzfSBVTklUX1hcbiAqL1xuVmVjMy5VTklUX1ggPSBuZXcgVmVjMygxLCAwLCAwKTtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAcHJvcGVydHkge1ZlYzN9IFVOSVRfWVxuICovXG5WZWMzLlVOSVRfWSA9IG5ldyBWZWMzKDAsIDEsIDApO1xuXG4vKipcbiAqIEBzdGF0aWNcbiAqIEBwcm9wZXJ0eSB7VmVjM30gVU5JVF9aXG4gKi9cblZlYzMuVU5JVF9aID0gbmV3IFZlYzMoMCwgMCwgMSk7XG5cbi8qKlxuICogVmVjdG9yIGNyb3NzIHByb2R1Y3RcbiAqIEBtZXRob2QgY3Jvc3NcbiAqIEBwYXJhbSB7VmVjM30gdlxuICogQHBhcmFtIHtWZWMzfSB0YXJnZXQgT3B0aW9uYWwuIFRhcmdldCB0byBzYXZlIGluLlxuICogQHJldHVybiB7VmVjM31cbiAqL1xuVmVjMy5wcm90b3R5cGUuY3Jvc3MgPSBmdW5jdGlvbih2LHRhcmdldCl7XG4gICAgdmFyIHZ4PXYueCwgdnk9di55LCB2ej12LnosIHg9dGhpcy54LCB5PXRoaXMueSwgej10aGlzLno7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IG5ldyBWZWMzKCk7XG5cbiAgICB0YXJnZXQueCA9ICh5ICogdnopIC0gKHogKiB2eSk7XG4gICAgdGFyZ2V0LnkgPSAoeiAqIHZ4KSAtICh4ICogdnopO1xuICAgIHRhcmdldC56ID0gKHggKiB2eSkgLSAoeSAqIHZ4KTtcblxuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgdmVjdG9ycycgMyBlbGVtZW50c1xuICogQG1ldGhvZCBzZXRcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogQHBhcmFtIHtOdW1iZXJ9IHpcbiAqIEByZXR1cm4gVmVjM1xuICovXG5WZWMzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbih4LHkseil7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMueiA9IHo7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFNldCBhbGwgY29tcG9uZW50cyBvZiB0aGUgdmVjdG9yIHRvIHplcm8uXG4gKiBAbWV0aG9kIHNldFplcm9cbiAqL1xuVmVjMy5wcm90b3R5cGUuc2V0WmVybyA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy54ID0gdGhpcy55ID0gdGhpcy56ID0gMDtcbn07XG5cbi8qKlxuICogVmVjdG9yIGFkZGl0aW9uXG4gKiBAbWV0aG9kIHZhZGRcbiAqIEBwYXJhbSB7VmVjM30gdlxuICogQHBhcmFtIHtWZWMzfSB0YXJnZXQgT3B0aW9uYWwuXG4gKiBAcmV0dXJuIHtWZWMzfVxuICovXG5WZWMzLnByb3RvdHlwZS52YWRkID0gZnVuY3Rpb24odix0YXJnZXQpe1xuICAgIGlmKHRhcmdldCl7XG4gICAgICAgIHRhcmdldC54ID0gdi54ICsgdGhpcy54O1xuICAgICAgICB0YXJnZXQueSA9IHYueSArIHRoaXMueTtcbiAgICAgICAgdGFyZ2V0LnogPSB2LnogKyB0aGlzLno7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWMzKHRoaXMueCArIHYueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnkgKyB2LnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy56ICsgdi56KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFZlY3RvciBzdWJ0cmFjdGlvblxuICogQG1ldGhvZCB2c3ViXG4gKiBAcGFyYW0ge1ZlYzN9IHZcbiAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0IE9wdGlvbmFsLiBUYXJnZXQgdG8gc2F2ZSBpbi5cbiAqIEByZXR1cm4ge1ZlYzN9XG4gKi9cblZlYzMucHJvdG90eXBlLnZzdWIgPSBmdW5jdGlvbih2LHRhcmdldCl7XG4gICAgaWYodGFyZ2V0KXtcbiAgICAgICAgdGFyZ2V0LnggPSB0aGlzLnggLSB2Lng7XG4gICAgICAgIHRhcmdldC55ID0gdGhpcy55IC0gdi55O1xuICAgICAgICB0YXJnZXQueiA9IHRoaXMueiAtIHYuejtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IFZlYzModGhpcy54LXYueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnktdi55LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuei12LnopO1xuICAgIH1cbn07XG5cbi8qKlxuICogR2V0IHRoZSBjcm9zcyBwcm9kdWN0IG1hdHJpeCBhX2Nyb3NzIGZyb20gYSB2ZWN0b3IsIHN1Y2ggdGhhdCBhIHggYiA9IGFfY3Jvc3MgKiBiID0gY1xuICogQG1ldGhvZCBjcm9zc21hdFxuICogQHNlZSBodHRwOi8vd3d3OC5jcy51bXUuc2Uva3Vyc2VyL1REQkQyNC9WVDA2L2xlY3R1cmVzL0xlY3R1cmU2LnBkZlxuICogQHJldHVybiB7TWF0M31cbiAqL1xuVmVjMy5wcm90b3R5cGUuY3Jvc3NtYXQgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBuZXcgTWF0MyhbICAgICAwLCAgLXRoaXMueiwgICB0aGlzLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy56LCAgICAgICAgMCwgIC10aGlzLngsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAtdGhpcy55LCAgIHRoaXMueCwgICAgICAgIDBdKTtcbn07XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSB2ZWN0b3IuIE5vdGUgdGhhdCB0aGlzIGNoYW5nZXMgdGhlIHZhbHVlcyBpbiB0aGUgdmVjdG9yLlxuICogQG1ldGhvZCBub3JtYWxpemVcbiAqIEByZXR1cm4ge051bWJlcn0gUmV0dXJucyB0aGUgbm9ybSBvZiB0aGUgdmVjdG9yXG4gKi9cblZlYzMucHJvdG90eXBlLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHg9dGhpcy54LCB5PXRoaXMueSwgej10aGlzLno7XG4gICAgdmFyIG4gPSBNYXRoLnNxcnQoeCp4ICsgeSp5ICsgeip6KTtcbiAgICBpZihuPjAuMCl7XG4gICAgICAgIHZhciBpbnZOID0gMS9uO1xuICAgICAgICB0aGlzLnggKj0gaW52TjtcbiAgICAgICAgdGhpcy55ICo9IGludk47XG4gICAgICAgIHRoaXMueiAqPSBpbnZOO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1ha2Ugc29tZXRoaW5nIHVwXG4gICAgICAgIHRoaXMueCA9IDA7XG4gICAgICAgIHRoaXMueSA9IDA7XG4gICAgICAgIHRoaXMueiA9IDA7XG4gICAgfVxuICAgIHJldHVybiBuO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIHZlcnNpb24gb2YgdGhpcyB2ZWN0b3IgdGhhdCBpcyBvZiBsZW5ndGggMS5cbiAqIEBtZXRob2QgdW5pdFxuICogQHBhcmFtIHtWZWMzfSB0YXJnZXQgT3B0aW9uYWwgdGFyZ2V0IHRvIHNhdmUgaW5cbiAqIEByZXR1cm4ge1ZlYzN9IFJldHVybnMgdGhlIHVuaXQgdmVjdG9yXG4gKi9cblZlYzMucHJvdG90eXBlLnVuaXQgPSBmdW5jdGlvbih0YXJnZXQpe1xuICAgIHRhcmdldCA9IHRhcmdldCB8fCBuZXcgVmVjMygpO1xuICAgIHZhciB4PXRoaXMueCwgeT10aGlzLnksIHo9dGhpcy56O1xuICAgIHZhciBuaW52ID0gTWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeik7XG4gICAgaWYobmludj4wLjApe1xuICAgICAgICBuaW52ID0gMS4wL25pbnY7XG4gICAgICAgIHRhcmdldC54ID0geCAqIG5pbnY7XG4gICAgICAgIHRhcmdldC55ID0geSAqIG5pbnY7XG4gICAgICAgIHRhcmdldC56ID0geiAqIG5pbnY7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LnggPSAxO1xuICAgICAgICB0YXJnZXQueSA9IDA7XG4gICAgICAgIHRhcmdldC56ID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBsZW5ndGggb2YgdGhlIHZlY3RvclxuICogQG1ldGhvZCBub3JtXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAZGVwcmVjYXRlZCBVc2UgLmxlbmd0aCgpIGluc3RlYWRcbiAqL1xuVmVjMy5wcm90b3R5cGUubm9ybSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHg9dGhpcy54LCB5PXRoaXMueSwgej10aGlzLno7XG4gICAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnopO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGxlbmd0aCBvZiB0aGUgdmVjdG9yXG4gKiBAbWV0aG9kIGxlbmd0aFxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5WZWMzLnByb3RvdHlwZS5sZW5ndGggPSBWZWMzLnByb3RvdHlwZS5ub3JtO1xuXG4vKipcbiAqIEdldCB0aGUgc3F1YXJlZCBsZW5ndGggb2YgdGhlIHZlY3RvclxuICogQG1ldGhvZCBub3JtMlxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGRlcHJlY2F0ZWQgVXNlIC5sZW5ndGhTcXVhcmVkKCkgaW5zdGVhZC5cbiAqL1xuVmVjMy5wcm90b3R5cGUubm9ybTIgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmRvdCh0aGlzKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBzcXVhcmVkIGxlbmd0aCBvZiB0aGUgdmVjdG9yLlxuICogQG1ldGhvZCBsZW5ndGhTcXVhcmVkXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cblZlYzMucHJvdG90eXBlLmxlbmd0aFNxdWFyZWQgPSBWZWMzLnByb3RvdHlwZS5ub3JtMjtcblxuLyoqXG4gKiBHZXQgZGlzdGFuY2UgZnJvbSB0aGlzIHBvaW50IHRvIGFub3RoZXIgcG9pbnRcbiAqIEBtZXRob2QgZGlzdGFuY2VUb1xuICogQHBhcmFtICB7VmVjM30gcFxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5WZWMzLnByb3RvdHlwZS5kaXN0YW5jZVRvID0gZnVuY3Rpb24ocCl7XG4gICAgdmFyIHg9dGhpcy54LCB5PXRoaXMueSwgej10aGlzLno7XG4gICAgdmFyIHB4PXAueCwgcHk9cC55LCBwej1wLno7XG4gICAgcmV0dXJuIE1hdGguc3FydCgocHgteCkqKHB4LXgpK1xuICAgICAgICAgICAgICAgICAgICAgKHB5LXkpKihweS15KStcbiAgICAgICAgICAgICAgICAgICAgIChwei16KSoocHoteikpO1xufTtcblxuLyoqXG4gKiBHZXQgc3F1YXJlZCBkaXN0YW5jZSBmcm9tIHRoaXMgcG9pbnQgdG8gYW5vdGhlciBwb2ludFxuICogQG1ldGhvZCBkaXN0YW5jZVNxdWFyZWRcbiAqIEBwYXJhbSAge1ZlYzN9IHBcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuVmVjMy5wcm90b3R5cGUuZGlzdGFuY2VTcXVhcmVkID0gZnVuY3Rpb24ocCl7XG4gICAgdmFyIHg9dGhpcy54LCB5PXRoaXMueSwgej10aGlzLno7XG4gICAgdmFyIHB4PXAueCwgcHk9cC55LCBwej1wLno7XG4gICAgcmV0dXJuIChweC14KSoocHgteCkgKyAocHkteSkqKHB5LXkpICsgKHB6LXopKihwei16KTtcbn07XG5cbi8qKlxuICogTXVsdGlwbHkgYWxsIHRoZSBjb21wb25lbnRzIG9mIHRoZSB2ZWN0b3Igd2l0aCBhIHNjYWxhci5cbiAqIEBkZXByZWNhdGVkIFVzZSAuc2NhbGUgaW5zdGVhZFxuICogQG1ldGhvZCBtdWx0XG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGFyXG4gKiBAcGFyYW0ge1ZlYzN9IHRhcmdldCBUaGUgdmVjdG9yIHRvIHNhdmUgdGhlIHJlc3VsdCBpbi5cbiAqIEByZXR1cm4ge1ZlYzN9XG4gKiBAZGVwcmVjYXRlZCBVc2UgLnNjYWxlKCkgaW5zdGVhZFxuICovXG5WZWMzLnByb3RvdHlwZS5tdWx0ID0gZnVuY3Rpb24oc2NhbGFyLHRhcmdldCl7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IG5ldyBWZWMzKCk7XG4gICAgdmFyIHggPSB0aGlzLngsXG4gICAgICAgIHkgPSB0aGlzLnksXG4gICAgICAgIHogPSB0aGlzLno7XG4gICAgdGFyZ2V0LnggPSBzY2FsYXIgKiB4O1xuICAgIHRhcmdldC55ID0gc2NhbGFyICogeTtcbiAgICB0YXJnZXQueiA9IHNjYWxhciAqIHo7XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogTXVsdGlwbHkgdGhlIHZlY3RvciB3aXRoIGEgc2NhbGFyLlxuICogQG1ldGhvZCBzY2FsZVxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxhclxuICogQHBhcmFtIHtWZWMzfSB0YXJnZXRcbiAqIEByZXR1cm4ge1ZlYzN9XG4gKi9cblZlYzMucHJvdG90eXBlLnNjYWxlID0gVmVjMy5wcm90b3R5cGUubXVsdDtcblxuLyoqXG4gKiBDYWxjdWxhdGUgZG90IHByb2R1Y3RcbiAqIEBtZXRob2QgZG90XG4gKiBAcGFyYW0ge1ZlYzN9IHZcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuVmVjMy5wcm90b3R5cGUuZG90ID0gZnVuY3Rpb24odil7XG4gICAgcmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSArIHRoaXMueiAqIHYuejtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBpc1plcm9cbiAqIEByZXR1cm4gYm9vbFxuICovXG5WZWMzLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLng9PT0wICYmIHRoaXMueT09PTAgJiYgdGhpcy56PT09MDtcbn07XG5cbi8qKlxuICogTWFrZSB0aGUgdmVjdG9yIHBvaW50IGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG4gKiBAbWV0aG9kIG5lZ2F0ZVxuICogQHBhcmFtIHtWZWMzfSB0YXJnZXQgT3B0aW9uYWwgdGFyZ2V0IHRvIHNhdmUgaW5cbiAqIEByZXR1cm4ge1ZlYzN9XG4gKi9cblZlYzMucHJvdG90eXBlLm5lZ2F0ZSA9IGZ1bmN0aW9uKHRhcmdldCl7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IG5ldyBWZWMzKCk7XG4gICAgdGFyZ2V0LnggPSAtdGhpcy54O1xuICAgIHRhcmdldC55ID0gLXRoaXMueTtcbiAgICB0YXJnZXQueiA9IC10aGlzLno7XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cbi8qKlxuICogQ29tcHV0ZSB0d28gYXJ0aWZpY2lhbCB0YW5nZW50cyB0byB0aGUgdmVjdG9yXG4gKiBAbWV0aG9kIHRhbmdlbnRzXG4gKiBAcGFyYW0ge1ZlYzN9IHQxIFZlY3RvciBvYmplY3QgdG8gc2F2ZSB0aGUgZmlyc3QgdGFuZ2VudCBpblxuICogQHBhcmFtIHtWZWMzfSB0MiBWZWN0b3Igb2JqZWN0IHRvIHNhdmUgdGhlIHNlY29uZCB0YW5nZW50IGluXG4gKi9cbnZhciBWZWMzX3RhbmdlbnRzX24gPSBuZXcgVmVjMygpO1xudmFyIFZlYzNfdGFuZ2VudHNfcmFuZFZlYyA9IG5ldyBWZWMzKCk7XG5WZWMzLnByb3RvdHlwZS50YW5nZW50cyA9IGZ1bmN0aW9uKHQxLHQyKXtcbiAgICB2YXIgbm9ybSA9IHRoaXMubm9ybSgpO1xuICAgIGlmKG5vcm0+MC4wKXtcbiAgICAgICAgdmFyIG4gPSBWZWMzX3RhbmdlbnRzX247XG4gICAgICAgIHZhciBpbm9ybSA9IDEvbm9ybTtcbiAgICAgICAgbi5zZXQodGhpcy54Kmlub3JtLHRoaXMueSppbm9ybSx0aGlzLnoqaW5vcm0pO1xuICAgICAgICB2YXIgcmFuZFZlYyA9IFZlYzNfdGFuZ2VudHNfcmFuZFZlYztcbiAgICAgICAgaWYoTWF0aC5hYnMobi54KSA8IDAuOSl7XG4gICAgICAgICAgICByYW5kVmVjLnNldCgxLDAsMCk7XG4gICAgICAgICAgICBuLmNyb3NzKHJhbmRWZWMsdDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFuZFZlYy5zZXQoMCwxLDApO1xuICAgICAgICAgICAgbi5jcm9zcyhyYW5kVmVjLHQxKTtcbiAgICAgICAgfVxuICAgICAgICBuLmNyb3NzKHQxLHQyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGUgbm9ybWFsIGxlbmd0aCBpcyB6ZXJvLCBtYWtlIHNvbWV0aGluZyB1cFxuICAgICAgICB0MS5zZXQoMSwgMCwgMCk7XG4gICAgICAgIHQyLnNldCgwLCAxLCAwKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRvIGEgbW9yZSByZWFkYWJsZSBmb3JtYXRcbiAqIEBtZXRob2QgdG9TdHJpbmdcbiAqIEByZXR1cm4gc3RyaW5nXG4gKi9cblZlYzMucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy54K1wiLFwiK3RoaXMueStcIixcIit0aGlzLno7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIHRvIGFuIGFycmF5XG4gKiBAbWV0aG9kIHRvQXJyYXlcbiAqIEByZXR1cm4gQXJyYXlcbiAqL1xuVmVjMy5wcm90b3R5cGUudG9BcnJheSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIFt0aGlzLngsIHRoaXMueSwgdGhpcy56XTtcbn07XG5cbi8qKlxuICogQ29waWVzIHZhbHVlIG9mIHNvdXJjZSB0byB0aGlzIHZlY3Rvci5cbiAqIEBtZXRob2QgY29weVxuICogQHBhcmFtIHtWZWMzfSBzb3VyY2VcbiAqIEByZXR1cm4ge1ZlYzN9IHRoaXNcbiAqL1xuVmVjMy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uKHNvdXJjZSl7XG4gICAgdGhpcy54ID0gc291cmNlLng7XG4gICAgdGhpcy55ID0gc291cmNlLnk7XG4gICAgdGhpcy56ID0gc291cmNlLno7XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogRG8gYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWN0b3JzXG4gKiBAbWV0aG9kIGxlcnBcbiAqIEBwYXJhbSB7VmVjM30gdlxuICogQHBhcmFtIHtOdW1iZXJ9IHQgQSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLiAwIHdpbGwgbWFrZSB0aGlzIGZ1bmN0aW9uIHJldHVybiB1LCBhbmQgMSB3aWxsIG1ha2UgaXQgcmV0dXJuIHYuIE51bWJlcnMgaW4gYmV0d2VlbiB3aWxsIGdlbmVyYXRlIGEgdmVjdG9yIGluIGJldHdlZW4gdGhlbS5cbiAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0XG4gKi9cblZlYzMucHJvdG90eXBlLmxlcnAgPSBmdW5jdGlvbih2LHQsdGFyZ2V0KXtcbiAgICB2YXIgeD10aGlzLngsIHk9dGhpcy55LCB6PXRoaXMuejtcbiAgICB0YXJnZXQueCA9IHggKyAodi54LXgpKnQ7XG4gICAgdGFyZ2V0LnkgPSB5ICsgKHYueS15KSp0O1xuICAgIHRhcmdldC56ID0geiArICh2LnoteikqdDtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB2ZWN0b3IgZXF1YWxzIGlzIGFsbW9zdCBlcXVhbCB0byBhbm90aGVyIG9uZS5cbiAqIEBtZXRob2QgYWxtb3N0RXF1YWxzXG4gKiBAcGFyYW0ge1ZlYzN9IHZcbiAqIEBwYXJhbSB7TnVtYmVyfSBwcmVjaXNpb25cbiAqIEByZXR1cm4gYm9vbFxuICovXG5WZWMzLnByb3RvdHlwZS5hbG1vc3RFcXVhbHMgPSBmdW5jdGlvbih2LHByZWNpc2lvbil7XG4gICAgaWYocHJlY2lzaW9uPT09dW5kZWZpbmVkKXtcbiAgICAgICAgcHJlY2lzaW9uID0gMWUtNjtcbiAgICB9XG4gICAgaWYoIE1hdGguYWJzKHRoaXMueC12LngpPnByZWNpc2lvbiB8fFxuICAgICAgICBNYXRoLmFicyh0aGlzLnktdi55KT5wcmVjaXNpb24gfHxcbiAgICAgICAgTWF0aC5hYnModGhpcy56LXYueik+cHJlY2lzaW9uKXtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB2ZWN0b3IgaXMgYWxtb3N0IHplcm9cbiAqIEBtZXRob2QgYWxtb3N0WmVyb1xuICogQHBhcmFtIHtOdW1iZXJ9IHByZWNpc2lvblxuICovXG5WZWMzLnByb3RvdHlwZS5hbG1vc3RaZXJvID0gZnVuY3Rpb24ocHJlY2lzaW9uKXtcbiAgICBpZihwcmVjaXNpb249PT11bmRlZmluZWQpe1xuICAgICAgICBwcmVjaXNpb24gPSAxZS02O1xuICAgIH1cbiAgICBpZiggTWF0aC5hYnModGhpcy54KT5wcmVjaXNpb24gfHxcbiAgICAgICAgTWF0aC5hYnModGhpcy55KT5wcmVjaXNpb24gfHxcbiAgICAgICAgTWF0aC5hYnModGhpcy56KT5wcmVjaXNpb24pe1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcblxudmFyIGFudGlwX25lZyA9IG5ldyBWZWMzKCk7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHZlY3RvciBpcyBhbnRpLXBhcmFsbGVsIHRvIGFub3RoZXIgdmVjdG9yLlxuICogQG1ldGhvZCBpc0FudGlwYXJhbGxlbFRvXG4gKiBAcGFyYW0gIHtWZWMzfSAgdlxuICogQHBhcmFtICB7TnVtYmVyfSAgcHJlY2lzaW9uIFNldCB0byB6ZXJvIGZvciBleGFjdCBjb21wYXJpc29uc1xuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xuVmVjMy5wcm90b3R5cGUuaXNBbnRpcGFyYWxsZWxUbyA9IGZ1bmN0aW9uKHYscHJlY2lzaW9uKXtcbiAgICB0aGlzLm5lZ2F0ZShhbnRpcF9uZWcpO1xuICAgIHJldHVybiBhbnRpcF9uZWcuYWxtb3N0RXF1YWxzKHYscHJlY2lzaW9uKTtcbn07XG5cbi8qKlxuICogQ2xvbmUgdGhlIHZlY3RvclxuICogQG1ldGhvZCBjbG9uZVxuICogQHJldHVybiB7VmVjM31cbiAqL1xuVmVjMy5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiBuZXcgVmVjMyh0aGlzLngsIHRoaXMueSwgdGhpcy56KTtcbn07XG59LHtcIi4vTWF0M1wiOjI3fV0sMzE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBCb2R5O1xuXG52YXIgRXZlbnRUYXJnZXQgPSBfZGVyZXFfKCcuLi91dGlscy9FdmVudFRhcmdldCcpO1xudmFyIFNoYXBlID0gX2RlcmVxXygnLi4vc2hhcGVzL1NoYXBlJyk7XG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xudmFyIE1hdDMgPSBfZGVyZXFfKCcuLi9tYXRoL01hdDMnKTtcbnZhciBRdWF0ZXJuaW9uID0gX2RlcmVxXygnLi4vbWF0aC9RdWF0ZXJuaW9uJyk7XG52YXIgTWF0ZXJpYWwgPSBfZGVyZXFfKCcuLi9tYXRlcmlhbC9NYXRlcmlhbCcpO1xudmFyIEFBQkIgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vQUFCQicpO1xudmFyIEJveCA9IF9kZXJlcV8oJy4uL3NoYXBlcy9Cb3gnKTtcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBhbGwgYm9keSB0eXBlcy5cbiAqIEBjbGFzcyBCb2R5XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEV2ZW50VGFyZ2V0XG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge1ZlYzN9IFtvcHRpb25zLnBvc2l0aW9uXVxuICogQHBhcmFtIHtWZWMzfSBbb3B0aW9ucy52ZWxvY2l0eV1cbiAqIEBwYXJhbSB7VmVjM30gW29wdGlvbnMuYW5ndWxhclZlbG9jaXR5XVxuICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBbb3B0aW9ucy5xdWF0ZXJuaW9uXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1hc3NdXG4gKiBAcGFyYW0ge01hdGVyaWFsfSBbb3B0aW9ucy5tYXRlcmlhbF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy50eXBlXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxpbmVhckRhbXBpbmc9MC4wMV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5hbmd1bGFyRGFtcGluZz0wLjAxXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbGxvd1NsZWVwPXRydWVdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2xlZXBTcGVlZExpbWl0PTAuMV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zbGVlcFRpbWVMaW1pdD0xXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwPTFdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY29sbGlzaW9uRmlsdGVyTWFzaz0xXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5maXhlZFJvdGF0aW9uPWZhbHNlXVxuICogQHBhcmFtIHtCb2R5fSBbb3B0aW9ucy5zaGFwZV1cbiAqIEBleGFtcGxlXG4gKiAgICAgdmFyIGJvZHkgPSBuZXcgQm9keSh7XG4gKiAgICAgICAgIG1hc3M6IDFcbiAqICAgICB9KTtcbiAqICAgICB2YXIgc2hhcGUgPSBuZXcgU3BoZXJlKDEpO1xuICogICAgIGJvZHkuYWRkU2hhcGUoc2hhcGUpO1xuICogICAgIHdvcmxkLmFkZChib2R5KTtcbiAqL1xuZnVuY3Rpb24gQm9keShvcHRpb25zKXtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIEV2ZW50VGFyZ2V0LmFwcGx5KHRoaXMpO1xuXG4gICAgdGhpcy5pZCA9IEJvZHkuaWRDb3VudGVyKys7XG5cbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIHdvcmxkIHRoZSBib2R5IGlzIGxpdmluZyBpblxuICAgICAqIEBwcm9wZXJ0eSB3b3JsZFxuICAgICAqIEB0eXBlIHtXb3JsZH1cbiAgICAgKi9cbiAgICB0aGlzLndvcmxkID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCBCRUZPUkUgc3RlcHBpbmcgdGhlIHN5c3RlbS4gVXNlIGl0IHRvIGFwcGx5IGZvcmNlcywgZm9yIGV4YW1wbGUuIEluc2lkZSB0aGUgZnVuY3Rpb24sIFwidGhpc1wiIHdpbGwgcmVmZXIgdG8gdGhpcyBCb2R5IG9iamVjdC5cbiAgICAgKiBAcHJvcGVydHkgcHJlU3RlcFxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgV29ybGQgZXZlbnRzIGluc3RlYWRcbiAgICAgKi9cbiAgICB0aGlzLnByZVN0ZXAgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyB1c2VkIEFGVEVSIHN0ZXBwaW5nIHRoZSBzeXN0ZW0uIEluc2lkZSB0aGUgZnVuY3Rpb24sIFwidGhpc1wiIHdpbGwgcmVmZXIgdG8gdGhpcyBCb2R5IG9iamVjdC5cbiAgICAgKiBAcHJvcGVydHkgcG9zdFN0ZXBcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIFdvcmxkIGV2ZW50cyBpbnN0ZWFkXG4gICAgICovXG4gICAgdGhpcy5wb3N0U3RlcCA9IG51bGw7XG5cbiAgICB0aGlzLnZsYW1iZGEgPSBuZXcgVmVjMygpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IGNvbGxpc2lvbkZpbHRlckdyb3VwXG4gICAgICovXG4gICAgdGhpcy5jb2xsaXNpb25GaWx0ZXJHcm91cCA9IHR5cGVvZihvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwKSA9PT0gJ251bWJlcicgPyBvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwIDogMTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBjb2xsaXNpb25GaWx0ZXJNYXNrXG4gICAgICovXG4gICAgdGhpcy5jb2xsaXNpb25GaWx0ZXJNYXNrID0gdHlwZW9mKG9wdGlvbnMuY29sbGlzaW9uRmlsdGVyTWFzaykgPT09ICdudW1iZXInID8gb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJNYXNrIDogMTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gcHJvZHVjZSBjb250YWN0IGZvcmNlcyB3aGVuIGluIGNvbnRhY3Qgd2l0aCBvdGhlciBib2RpZXMuIE5vdGUgdGhhdCBjb250YWN0cyB3aWxsIGJlIGdlbmVyYXRlZCwgYnV0IHRoZXkgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gY29sbGlzaW9uUmVzcG9uc2VcbiAgICAgKi9cblx0dGhpcy5jb2xsaXNpb25SZXNwb25zZSA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgcG9zaXRpb25cbiAgICAgKiBAdHlwZSB7VmVjM31cbiAgICAgKi9cbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFZlYzMoKTtcblxuICAgIGlmKG9wdGlvbnMucG9zaXRpb24pe1xuICAgICAgICB0aGlzLnBvc2l0aW9uLmNvcHkob3B0aW9ucy5wb3NpdGlvbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBwcmV2aW91c1Bvc2l0aW9uXG4gICAgICovXG4gICAgdGhpcy5wcmV2aW91c1Bvc2l0aW9uID0gbmV3IFZlYzMoKTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWwgcG9zaXRpb24gb2YgdGhlIGJvZHlcbiAgICAgKiBAcHJvcGVydHkgaW5pdFBvc2l0aW9uXG4gICAgICogQHR5cGUge1ZlYzN9XG4gICAgICovXG4gICAgdGhpcy5pbml0UG9zaXRpb24gPSBuZXcgVmVjMygpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHZlbG9jaXR5XG4gICAgICogQHR5cGUge1ZlYzN9XG4gICAgICovXG4gICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBWZWMzKCk7XG5cbiAgICBpZihvcHRpb25zLnZlbG9jaXR5KXtcbiAgICAgICAgdGhpcy52ZWxvY2l0eS5jb3B5KG9wdGlvbnMudmVsb2NpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBpbml0VmVsb2NpdHlcbiAgICAgKiBAdHlwZSB7VmVjM31cbiAgICAgKi9cbiAgICB0aGlzLmluaXRWZWxvY2l0eSA9IG5ldyBWZWMzKCk7XG5cbiAgICAvKipcbiAgICAgKiBMaW5lYXIgZm9yY2Ugb24gdGhlIGJvZHlcbiAgICAgKiBAcHJvcGVydHkgZm9yY2VcbiAgICAgKiBAdHlwZSB7VmVjM31cbiAgICAgKi9cbiAgICB0aGlzLmZvcmNlID0gbmV3IFZlYzMoKTtcblxuICAgIHZhciBtYXNzID0gdHlwZW9mKG9wdGlvbnMubWFzcykgPT09ICdudW1iZXInID8gb3B0aW9ucy5tYXNzIDogMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBtYXNzXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG4gICAgdGhpcy5tYXNzID0gbWFzcztcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBpbnZNYXNzXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmludk1hc3MgPSBtYXNzID4gMCA/IDEuMCAvIG1hc3MgOiAwO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IG1hdGVyaWFsXG4gICAgICogQHR5cGUge01hdGVyaWFsfVxuICAgICAqL1xuICAgIHRoaXMubWF0ZXJpYWwgPSBvcHRpb25zLm1hdGVyaWFsIHx8IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgbGluZWFyRGFtcGluZ1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5saW5lYXJEYW1waW5nID0gdHlwZW9mKG9wdGlvbnMubGluZWFyRGFtcGluZykgPT09ICdudW1iZXInID8gb3B0aW9ucy5saW5lYXJEYW1waW5nIDogMC4wMTtcblxuICAgIC8qKlxuICAgICAqIE9uZSBvZjogQm9keS5EWU5BTUlDLCBCb2R5LlNUQVRJQyBhbmQgQm9keS5LSU5FTUFUSUMuXG4gICAgICogQHByb3BlcnR5IHR5cGVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IChtYXNzIDw9IDAuMCA/IEJvZHkuU1RBVElDIDogQm9keS5EWU5BTUlDKTtcbiAgICBpZih0eXBlb2Yob3B0aW9ucy50eXBlKSA9PT0gdHlwZW9mKEJvZHkuU1RBVElDKSl7XG4gICAgICAgIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCB0aGUgYm9keSB3aWxsIGF1dG9tYXRpY2FsbHkgZmFsbCB0byBzbGVlcC5cbiAgICAgKiBAcHJvcGVydHkgYWxsb3dTbGVlcFxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICB0aGlzLmFsbG93U2xlZXAgPSB0eXBlb2Yob3B0aW9ucy5hbGxvd1NsZWVwKSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmFsbG93U2xlZXAgOiB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzbGVlcCBzdGF0ZS5cbiAgICAgKiBAcHJvcGVydHkgc2xlZXBTdGF0ZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zbGVlcFN0YXRlID0gMDtcblxuICAgIC8qKlxuICAgICAqIElmIHRoZSBzcGVlZCAodGhlIG5vcm0gb2YgdGhlIHZlbG9jaXR5KSBpcyBzbWFsbGVyIHRoYW4gdGhpcyB2YWx1ZSwgdGhlIGJvZHkgaXMgY29uc2lkZXJlZCBzbGVlcHkuXG4gICAgICogQHByb3BlcnR5IHNsZWVwU3BlZWRMaW1pdFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQGRlZmF1bHQgMC4xXG4gICAgICovXG4gICAgdGhpcy5zbGVlcFNwZWVkTGltaXQgPSB0eXBlb2Yob3B0aW9ucy5zbGVlcFNwZWVkTGltaXQpICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuc2xlZXBTcGVlZExpbWl0IDogMC4xO1xuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIGJvZHkgaGFzIGJlZW4gc2xlZXB5IGZvciB0aGlzIHNsZWVwVGltZUxpbWl0IHNlY29uZHMsIGl0IGlzIGNvbnNpZGVyZWQgc2xlZXBpbmcuXG4gICAgICogQHByb3BlcnR5IHNsZWVwVGltZUxpbWl0XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG4gICAgdGhpcy5zbGVlcFRpbWVMaW1pdCA9IHR5cGVvZihvcHRpb25zLnNsZWVwVGltZUxpbWl0KSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLnNsZWVwVGltZUxpbWl0IDogMTtcblxuICAgIHRoaXMudGltZUxhc3RTbGVlcHkgPSAwO1xuXG4gICAgdGhpcy5fd2FrZVVwQWZ0ZXJOYXJyb3dwaGFzZSA9IGZhbHNlO1xuXG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGlvbmFsIGZvcmNlIG9uIHRoZSBib2R5LCBhcm91bmQgY2VudGVyIG9mIG1hc3NcbiAgICAgKiBAcHJvcGVydHkge1ZlYzN9IHRvcnF1ZVxuICAgICAqL1xuICAgIHRoaXMudG9ycXVlID0gbmV3IFZlYzMoKTtcblxuICAgIC8qKlxuICAgICAqIE9yaWVudGF0aW9uIG9mIHRoZSBib2R5XG4gICAgICogQHByb3BlcnR5IHF1YXRlcm5pb25cbiAgICAgKiBAdHlwZSB7UXVhdGVybmlvbn1cbiAgICAgKi9cbiAgICB0aGlzLnF1YXRlcm5pb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG4gICAgaWYob3B0aW9ucy5xdWF0ZXJuaW9uKXtcbiAgICAgICAgdGhpcy5xdWF0ZXJuaW9uLmNvcHkob3B0aW9ucy5xdWF0ZXJuaW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgaW5pdFF1YXRlcm5pb25cbiAgICAgKiBAdHlwZSB7UXVhdGVybmlvbn1cbiAgICAgKi9cbiAgICB0aGlzLmluaXRRdWF0ZXJuaW9uID0gbmV3IFF1YXRlcm5pb24oKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBhbmd1bGFyVmVsb2NpdHlcbiAgICAgKiBAdHlwZSB7VmVjM31cbiAgICAgKi9cbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSA9IG5ldyBWZWMzKCk7XG5cbiAgICBpZihvcHRpb25zLmFuZ3VsYXJWZWxvY2l0eSl7XG4gICAgICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5LmNvcHkob3B0aW9ucy5hbmd1bGFyVmVsb2NpdHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBpbml0QW5ndWxhclZlbG9jaXR5XG4gICAgICogQHR5cGUge1ZlYzN9XG4gICAgICovXG4gICAgdGhpcy5pbml0QW5ndWxhclZlbG9jaXR5ID0gbmV3IFZlYzMoKTtcblxuICAgIHRoaXMuaW50ZXJwb2xhdGVkUG9zaXRpb24gPSBuZXcgVmVjMygpO1xuICAgIHRoaXMuaW50ZXJwb2xhdGVkUXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgc2hhcGVzXG4gICAgICogQHR5cGUge2FycmF5fVxuICAgICAqL1xuICAgIHRoaXMuc2hhcGVzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgc2hhcGVPZmZzZXRzXG4gICAgICogQHR5cGUge2FycmF5fVxuICAgICAqL1xuICAgIHRoaXMuc2hhcGVPZmZzZXRzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgc2hhcGVPcmllbnRhdGlvbnNcbiAgICAgKiBAdHlwZSB7YXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5zaGFwZU9yaWVudGF0aW9ucyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IGluZXJ0aWFcbiAgICAgKiBAdHlwZSB7VmVjM31cbiAgICAgKi9cbiAgICB0aGlzLmluZXJ0aWEgPSBuZXcgVmVjMygpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBpbnZJbmVydGlhXG4gICAgICovXG4gICAgdGhpcy5pbnZJbmVydGlhID0gbmV3IFZlYzMoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TWF0M30gaW52SW5lcnRpYVdvcmxkXG4gICAgICovXG4gICAgdGhpcy5pbnZJbmVydGlhV29ybGQgPSBuZXcgTWF0MygpO1xuXG4gICAgdGhpcy5pbnZNYXNzU29sdmUgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBpbnZJbmVydGlhU29sdmVcbiAgICAgKi9cbiAgICB0aGlzLmludkluZXJ0aWFTb2x2ZSA9IG5ldyBWZWMzKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge01hdDN9IGludkluZXJ0aWFXb3JsZFNvbHZlXG4gICAgICovXG4gICAgdGhpcy5pbnZJbmVydGlhV29ybGRTb2x2ZSA9IG5ldyBNYXQzKCk7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdG8gdHJ1ZSBpZiB5b3UgZG9uJ3Qgd2FudCB0aGUgYm9keSB0byByb3RhdGUuIE1ha2Ugc3VyZSB0byBydW4gLnVwZGF0ZU1hc3NQcm9wZXJ0aWVzKCkgYWZ0ZXIgY2hhbmdpbmcgdGhpcy5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGZpeGVkUm90YXRpb25cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIHRoaXMuZml4ZWRSb3RhdGlvbiA9IHR5cGVvZihvcHRpb25zLmZpeGVkUm90YXRpb24pICE9PSBcInVuZGVmaW5lZFwiID8gb3B0aW9ucy5maXhlZFJvdGF0aW9uIDogZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gYW5ndWxhckRhbXBpbmdcbiAgICAgKi9cbiAgICB0aGlzLmFuZ3VsYXJEYW1waW5nID0gdHlwZW9mKG9wdGlvbnMuYW5ndWxhckRhbXBpbmcpICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuYW5ndWxhckRhbXBpbmcgOiAwLjAxO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IGFhYmJcbiAgICAgKiBAdHlwZSB7QUFCQn1cbiAgICAgKi9cbiAgICB0aGlzLmFhYmIgPSBuZXcgQUFCQigpO1xuXG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBBQUJCIG5lZWRzIHRvIGJlIHVwZGF0ZWQgYmVmb3JlIHVzZS5cbiAgICAgKiBAcHJvcGVydHkgYWFiYk5lZWRzVXBkYXRlXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICovXG4gICAgdGhpcy5hYWJiTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG4gICAgdGhpcy53bGFtYmRhID0gbmV3IFZlYzMoKTtcblxuICAgIGlmKG9wdGlvbnMuc2hhcGUpe1xuICAgICAgICB0aGlzLmFkZFNoYXBlKG9wdGlvbnMuc2hhcGUpO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlTWFzc1Byb3BlcnRpZXMoKTtcbn1cbkJvZHkucHJvdG90eXBlID0gbmV3IEV2ZW50VGFyZ2V0KCk7XG5Cb2R5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJvZHk7XG5cbi8qKlxuICogQSBkeW5hbWljIGJvZHkgaXMgZnVsbHkgc2ltdWxhdGVkLiBDYW4gYmUgbW92ZWQgbWFudWFsbHkgYnkgdGhlIHVzZXIsIGJ1dCBub3JtYWxseSB0aGV5IG1vdmUgYWNjb3JkaW5nIHRvIGZvcmNlcy4gQSBkeW5hbWljIGJvZHkgY2FuIGNvbGxpZGUgd2l0aCBhbGwgYm9keSB0eXBlcy4gQSBkeW5hbWljIGJvZHkgYWx3YXlzIGhhcyBmaW5pdGUsIG5vbi16ZXJvIG1hc3MuXG4gKiBAc3RhdGljXG4gKiBAcHJvcGVydHkgRFlOQU1JQ1xuICogQHR5cGUge051bWJlcn1cbiAqL1xuQm9keS5EWU5BTUlDID0gMTtcblxuLyoqXG4gKiBBIHN0YXRpYyBib2R5IGRvZXMgbm90IG1vdmUgZHVyaW5nIHNpbXVsYXRpb24gYW5kIGJlaGF2ZXMgYXMgaWYgaXQgaGFzIGluZmluaXRlIG1hc3MuIFN0YXRpYyBib2RpZXMgY2FuIGJlIG1vdmVkIG1hbnVhbGx5IGJ5IHNldHRpbmcgdGhlIHBvc2l0aW9uIG9mIHRoZSBib2R5LiBUaGUgdmVsb2NpdHkgb2YgYSBzdGF0aWMgYm9keSBpcyBhbHdheXMgemVyby4gU3RhdGljIGJvZGllcyBkbyBub3QgY29sbGlkZSB3aXRoIG90aGVyIHN0YXRpYyBvciBraW5lbWF0aWMgYm9kaWVzLlxuICogQHN0YXRpY1xuICogQHByb3BlcnR5IFNUQVRJQ1xuICogQHR5cGUge051bWJlcn1cbiAqL1xuQm9keS5TVEFUSUMgPSAyO1xuXG4vKipcbiAqIEEga2luZW1hdGljIGJvZHkgbW92ZXMgdW5kZXIgc2ltdWxhdGlvbiBhY2NvcmRpbmcgdG8gaXRzIHZlbG9jaXR5LiBUaGV5IGRvIG5vdCByZXNwb25kIHRvIGZvcmNlcy4gVGhleSBjYW4gYmUgbW92ZWQgbWFudWFsbHksIGJ1dCBub3JtYWxseSBhIGtpbmVtYXRpYyBib2R5IGlzIG1vdmVkIGJ5IHNldHRpbmcgaXRzIHZlbG9jaXR5LiBBIGtpbmVtYXRpYyBib2R5IGJlaGF2ZXMgYXMgaWYgaXQgaGFzIGluZmluaXRlIG1hc3MuIEtpbmVtYXRpYyBib2RpZXMgZG8gbm90IGNvbGxpZGUgd2l0aCBvdGhlciBzdGF0aWMgb3Iga2luZW1hdGljIGJvZGllcy5cbiAqIEBzdGF0aWNcbiAqIEBwcm9wZXJ0eSBLSU5FTUFUSUNcbiAqIEB0eXBlIHtOdW1iZXJ9XG4gKi9cbkJvZHkuS0lORU1BVElDID0gNDtcblxuXG5cbi8qKlxuICogQHN0YXRpY1xuICogQHByb3BlcnR5IEFXQUtFXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5Cb2R5LkFXQUtFID0gMDtcblxuLyoqXG4gKiBAc3RhdGljXG4gKiBAcHJvcGVydHkgU0xFRVBZXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5Cb2R5LlNMRUVQWSA9IDE7XG5cbi8qKlxuICogQHN0YXRpY1xuICogQHByb3BlcnR5IFNMRUVQSU5HXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5Cb2R5LlNMRUVQSU5HID0gMjtcblxuQm9keS5pZENvdW50ZXIgPSAwO1xuXG4vKipcbiAqIFdha2UgdGhlIGJvZHkgdXAuXG4gKiBAbWV0aG9kIHdha2VVcFxuICovXG5Cb2R5LnByb3RvdHlwZS53YWtlVXAgPSBmdW5jdGlvbigpe1xuICAgIHZhciBzID0gdGhpcy5zbGVlcFN0YXRlO1xuICAgIHRoaXMuc2xlZXBTdGF0ZSA9IDA7XG4gICAgaWYocyA9PT0gQm9keS5TTEVFUElORyl7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTpcIndha2V1cFwifSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBGb3JjZSBib2R5IHNsZWVwXG4gKiBAbWV0aG9kIHNsZWVwXG4gKi9cbkJvZHkucHJvdG90eXBlLnNsZWVwID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLnNsZWVwU3RhdGUgPSBCb2R5LlNMRUVQSU5HO1xuICAgIHRoaXMudmVsb2NpdHkuc2V0KDAsMCwwKTtcbiAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eS5zZXQoMCwwLDApO1xufTtcblxuQm9keS5zbGVlcHlFdmVudCA9IHtcbiAgICB0eXBlOiBcInNsZWVweVwiXG59O1xuXG5Cb2R5LnNsZWVwRXZlbnQgPSB7XG4gICAgdHlwZTogXCJzbGVlcFwiXG59O1xuXG4vKipcbiAqIENhbGxlZCBldmVyeSB0aW1lc3RlcCB0byB1cGRhdGUgaW50ZXJuYWwgc2xlZXAgdGltZXIgYW5kIGNoYW5nZSBzbGVlcCBzdGF0ZSBpZiBuZWVkZWQuXG4gKiBAbWV0aG9kIHNsZWVwVGlja1xuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWUgVGhlIHdvcmxkIHRpbWUgaW4gc2Vjb25kc1xuICovXG5Cb2R5LnByb3RvdHlwZS5zbGVlcFRpY2sgPSBmdW5jdGlvbih0aW1lKXtcbiAgICBpZih0aGlzLmFsbG93U2xlZXApe1xuICAgICAgICB2YXIgc2xlZXBTdGF0ZSA9IHRoaXMuc2xlZXBTdGF0ZTtcbiAgICAgICAgdmFyIHNwZWVkU3F1YXJlZCA9IHRoaXMudmVsb2NpdHkubm9ybTIoKSArIHRoaXMuYW5ndWxhclZlbG9jaXR5Lm5vcm0yKCk7XG4gICAgICAgIHZhciBzcGVlZExpbWl0U3F1YXJlZCA9IE1hdGgucG93KHRoaXMuc2xlZXBTcGVlZExpbWl0LDIpO1xuICAgICAgICBpZihzbGVlcFN0YXRlPT09Qm9keS5BV0FLRSAmJiBzcGVlZFNxdWFyZWQgPCBzcGVlZExpbWl0U3F1YXJlZCl7XG4gICAgICAgICAgICB0aGlzLnNsZWVwU3RhdGUgPSBCb2R5LlNMRUVQWTsgLy8gU2xlZXB5XG4gICAgICAgICAgICB0aGlzLnRpbWVMYXN0U2xlZXB5ID0gdGltZTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChCb2R5LnNsZWVweUV2ZW50KTtcbiAgICAgICAgfSBlbHNlIGlmKHNsZWVwU3RhdGU9PT1Cb2R5LlNMRUVQWSAmJiBzcGVlZFNxdWFyZWQgPiBzcGVlZExpbWl0U3F1YXJlZCl7XG4gICAgICAgICAgICB0aGlzLndha2VVcCgpOyAvLyBXYWtlIHVwXG4gICAgICAgIH0gZWxzZSBpZihzbGVlcFN0YXRlPT09Qm9keS5TTEVFUFkgJiYgKHRpbWUgLSB0aGlzLnRpbWVMYXN0U2xlZXB5ICkgPiB0aGlzLnNsZWVwVGltZUxpbWl0KXtcbiAgICAgICAgICAgIHRoaXMuc2xlZXAoKTsgLy8gU2xlZXBpbmdcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChCb2R5LnNsZWVwRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBJZiB0aGUgYm9keSBpcyBzbGVlcGluZywgaXQgc2hvdWxkIGJlIGltbW92YWJsZSAvIGhhdmUgaW5maW5pdGUgbWFzcyBkdXJpbmcgc29sdmUuIFdlIHNvbHZlIGl0IGJ5IGhhdmluZyBhIHNlcGFyYXRlIFwic29sdmUgbWFzc1wiLlxuICogQG1ldGhvZCB1cGRhdGVTb2x2ZU1hc3NQcm9wZXJ0aWVzXG4gKi9cbkJvZHkucHJvdG90eXBlLnVwZGF0ZVNvbHZlTWFzc1Byb3BlcnRpZXMgPSBmdW5jdGlvbigpe1xuICAgIGlmKHRoaXMuc2xlZXBTdGF0ZSA9PT0gQm9keS5TTEVFUElORyB8fCB0aGlzLnR5cGUgPT09IEJvZHkuS0lORU1BVElDKXtcbiAgICAgICAgdGhpcy5pbnZNYXNzU29sdmUgPSAwO1xuICAgICAgICB0aGlzLmludkluZXJ0aWFTb2x2ZS5zZXRaZXJvKCk7XG4gICAgICAgIHRoaXMuaW52SW5lcnRpYVdvcmxkU29sdmUuc2V0WmVybygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaW52TWFzc1NvbHZlID0gdGhpcy5pbnZNYXNzO1xuICAgICAgICB0aGlzLmludkluZXJ0aWFTb2x2ZS5jb3B5KHRoaXMuaW52SW5lcnRpYSk7XG4gICAgICAgIHRoaXMuaW52SW5lcnRpYVdvcmxkU29sdmUuY29weSh0aGlzLmludkluZXJ0aWFXb3JsZCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgd29ybGQgcG9pbnQgdG8gbG9jYWwgYm9keSBmcmFtZS5cbiAqIEBtZXRob2QgcG9pbnRUb0xvY2FsRnJhbWVcbiAqIEBwYXJhbSAge1ZlYzN9IHdvcmxkUG9pbnRcbiAqIEBwYXJhbSAge1ZlYzN9IHJlc3VsdFxuICogQHJldHVybiB7VmVjM31cbiAqL1xuQm9keS5wcm90b3R5cGUucG9pbnRUb0xvY2FsRnJhbWUgPSBmdW5jdGlvbih3b3JsZFBvaW50LHJlc3VsdCl7XG4gICAgdmFyIHJlc3VsdCA9IHJlc3VsdCB8fCBuZXcgVmVjMygpO1xuICAgIHdvcmxkUG9pbnQudnN1Yih0aGlzLnBvc2l0aW9uLHJlc3VsdCk7XG4gICAgdGhpcy5xdWF0ZXJuaW9uLmNvbmp1Z2F0ZSgpLnZtdWx0KHJlc3VsdCxyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSB3b3JsZCB2ZWN0b3IgdG8gbG9jYWwgYm9keSBmcmFtZS5cbiAqIEBtZXRob2QgdmVjdG9yVG9Mb2NhbEZyYW1lXG4gKiBAcGFyYW0gIHtWZWMzfSB3b3JsZFBvaW50XG4gKiBAcGFyYW0gIHtWZWMzfSByZXN1bHRcbiAqIEByZXR1cm4ge1ZlYzN9XG4gKi9cbkJvZHkucHJvdG90eXBlLnZlY3RvclRvTG9jYWxGcmFtZSA9IGZ1bmN0aW9uKHdvcmxkVmVjdG9yLCByZXN1bHQpe1xuICAgIHZhciByZXN1bHQgPSByZXN1bHQgfHwgbmV3IFZlYzMoKTtcbiAgICB0aGlzLnF1YXRlcm5pb24uY29uanVnYXRlKCkudm11bHQod29ybGRWZWN0b3IscmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgbG9jYWwgYm9keSBwb2ludCB0byB3b3JsZCBmcmFtZS5cbiAqIEBtZXRob2QgcG9pbnRUb1dvcmxkRnJhbWVcbiAqIEBwYXJhbSAge1ZlYzN9IGxvY2FsUG9pbnRcbiAqIEBwYXJhbSAge1ZlYzN9IHJlc3VsdFxuICogQHJldHVybiB7VmVjM31cbiAqL1xuQm9keS5wcm90b3R5cGUucG9pbnRUb1dvcmxkRnJhbWUgPSBmdW5jdGlvbihsb2NhbFBvaW50LHJlc3VsdCl7XG4gICAgdmFyIHJlc3VsdCA9IHJlc3VsdCB8fCBuZXcgVmVjMygpO1xuICAgIHRoaXMucXVhdGVybmlvbi52bXVsdChsb2NhbFBvaW50LHJlc3VsdCk7XG4gICAgcmVzdWx0LnZhZGQodGhpcy5wb3NpdGlvbixyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgYSBsb2NhbCBib2R5IHBvaW50IHRvIHdvcmxkIGZyYW1lLlxuICogQG1ldGhvZCB2ZWN0b3JUb1dvcmxkRnJhbWVcbiAqIEBwYXJhbSAge1ZlYzN9IGxvY2FsVmVjdG9yXG4gKiBAcGFyYW0gIHtWZWMzfSByZXN1bHRcbiAqIEByZXR1cm4ge1ZlYzN9XG4gKi9cbkJvZHkucHJvdG90eXBlLnZlY3RvclRvV29ybGRGcmFtZSA9IGZ1bmN0aW9uKGxvY2FsVmVjdG9yLCByZXN1bHQpe1xuICAgIHZhciByZXN1bHQgPSByZXN1bHQgfHwgbmV3IFZlYzMoKTtcbiAgICB0aGlzLnF1YXRlcm5pb24udm11bHQobG9jYWxWZWN0b3IsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciB0bXBWZWMgPSBuZXcgVmVjMygpO1xudmFyIHRtcFF1YXQgPSBuZXcgUXVhdGVybmlvbigpO1xuXG4vKipcbiAqIEFkZCBhIHNoYXBlIHRvIHRoZSBib2R5IHdpdGggYSBsb2NhbCBvZmZzZXQgYW5kIG9yaWVudGF0aW9uLlxuICogQG1ldGhvZCBhZGRTaGFwZVxuICogQHBhcmFtIHtTaGFwZX0gc2hhcGVcbiAqIEBwYXJhbSB7VmVjM30gb2Zmc2V0XG4gKiBAcGFyYW0ge1F1YXRlcm5pb259IHF1YXRlcm5pb25cbiAqIEByZXR1cm4ge0JvZHl9IFRoZSBib2R5IG9iamVjdCwgZm9yIGNoYWluYWJpbGl0eS5cbiAqL1xuQm9keS5wcm90b3R5cGUuYWRkU2hhcGUgPSBmdW5jdGlvbihzaGFwZSwgX29mZnNldCwgX29yaWVudGF0aW9uKXtcbiAgICB2YXIgb2Zmc2V0ID0gbmV3IFZlYzMoKTtcbiAgICB2YXIgb3JpZW50YXRpb24gPSBuZXcgUXVhdGVybmlvbigpO1xuXG4gICAgaWYoX29mZnNldCl7XG4gICAgICAgIG9mZnNldC5jb3B5KF9vZmZzZXQpO1xuICAgIH1cbiAgICBpZihfb3JpZW50YXRpb24pe1xuICAgICAgICBvcmllbnRhdGlvbi5jb3B5KF9vcmllbnRhdGlvbik7XG4gICAgfVxuXG4gICAgdGhpcy5zaGFwZXMucHVzaChzaGFwZSk7XG4gICAgdGhpcy5zaGFwZU9mZnNldHMucHVzaChvZmZzZXQpO1xuICAgIHRoaXMuc2hhcGVPcmllbnRhdGlvbnMucHVzaChvcmllbnRhdGlvbik7XG4gICAgdGhpcy51cGRhdGVNYXNzUHJvcGVydGllcygpO1xuICAgIHRoaXMudXBkYXRlQm91bmRpbmdSYWRpdXMoKTtcblxuICAgIHRoaXMuYWFiYk5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgdGhlIGJvdW5kaW5nIHJhZGl1cyBvZiB0aGUgYm9keS4gU2hvdWxkIGJlIGRvbmUgaWYgYW55IG9mIHRoZSBzaGFwZXMgYXJlIGNoYW5nZWQuXG4gKiBAbWV0aG9kIHVwZGF0ZUJvdW5kaW5nUmFkaXVzXG4gKi9cbkJvZHkucHJvdG90eXBlLnVwZGF0ZUJvdW5kaW5nUmFkaXVzID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgc2hhcGVzID0gdGhpcy5zaGFwZXMsXG4gICAgICAgIHNoYXBlT2Zmc2V0cyA9IHRoaXMuc2hhcGVPZmZzZXRzLFxuICAgICAgICBOID0gc2hhcGVzLmxlbmd0aCxcbiAgICAgICAgcmFkaXVzID0gMDtcblxuICAgIGZvcih2YXIgaT0wOyBpIT09TjsgaSsrKXtcbiAgICAgICAgdmFyIHNoYXBlID0gc2hhcGVzW2ldO1xuICAgICAgICBzaGFwZS51cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gc2hhcGVPZmZzZXRzW2ldLm5vcm0oKSxcbiAgICAgICAgICAgIHIgPSBzaGFwZS5ib3VuZGluZ1NwaGVyZVJhZGl1cztcbiAgICAgICAgaWYob2Zmc2V0ICsgciA+IHJhZGl1cyl7XG4gICAgICAgICAgICByYWRpdXMgPSBvZmZzZXQgKyByO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5ib3VuZGluZ1JhZGl1cyA9IHJhZGl1cztcbn07XG5cbnZhciBjb21wdXRlQUFCQl9zaGFwZUFBQkIgPSBuZXcgQUFCQigpO1xuXG4vKipcbiAqIFVwZGF0ZXMgdGhlIC5hYWJiXG4gKiBAbWV0aG9kIGNvbXB1dGVBQUJCXG4gKiBAdG9kbyByZW5hbWUgdG8gdXBkYXRlQUFCQigpXG4gKi9cbkJvZHkucHJvdG90eXBlLmNvbXB1dGVBQUJCID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgc2hhcGVzID0gdGhpcy5zaGFwZXMsXG4gICAgICAgIHNoYXBlT2Zmc2V0cyA9IHRoaXMuc2hhcGVPZmZzZXRzLFxuICAgICAgICBzaGFwZU9yaWVudGF0aW9ucyA9IHRoaXMuc2hhcGVPcmllbnRhdGlvbnMsXG4gICAgICAgIE4gPSBzaGFwZXMubGVuZ3RoLFxuICAgICAgICBvZmZzZXQgPSB0bXBWZWMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gdG1wUXVhdCxcbiAgICAgICAgYm9keVF1YXQgPSB0aGlzLnF1YXRlcm5pb24sXG4gICAgICAgIGFhYmIgPSB0aGlzLmFhYmIsXG4gICAgICAgIHNoYXBlQUFCQiA9IGNvbXB1dGVBQUJCX3NoYXBlQUFCQjtcblxuICAgIGZvcih2YXIgaT0wOyBpIT09TjsgaSsrKXtcbiAgICAgICAgdmFyIHNoYXBlID0gc2hhcGVzW2ldO1xuXG4gICAgICAgIC8vIEdldCBzaGFwZSB3b3JsZCBxdWF0ZXJuaW9uXG4gICAgICAgIHNoYXBlT3JpZW50YXRpb25zW2ldLm11bHQoYm9keVF1YXQsIG9yaWVudGF0aW9uKTtcblxuICAgICAgICAvLyBHZXQgc2hhcGUgd29ybGQgcG9zaXRpb25cbiAgICAgICAgb3JpZW50YXRpb24udm11bHQoc2hhcGVPZmZzZXRzW2ldLCBvZmZzZXQpO1xuICAgICAgICBvZmZzZXQudmFkZCh0aGlzLnBvc2l0aW9uLCBvZmZzZXQpO1xuXG4gICAgICAgIC8vIHZlYzIucm90YXRlKG9mZnNldCwgc2hhcGVPZmZzZXRzW2ldLCBib2R5QW5nbGUpO1xuICAgICAgICAvLyB2ZWMyLmFkZChvZmZzZXQsIG9mZnNldCwgdGhpcy5wb3NpdGlvbik7XG5cbiAgICAgICAgLy8gR2V0IHNoYXBlIEFBQkJcbiAgICAgICAgc2hhcGUuY2FsY3VsYXRlV29ybGRBQUJCKG9mZnNldCwgb3JpZW50YXRpb24sIHNoYXBlQUFCQi5sb3dlckJvdW5kLCBzaGFwZUFBQkIudXBwZXJCb3VuZCk7XG5cbiAgICAgICAgaWYoaSA9PT0gMCl7XG4gICAgICAgICAgICBhYWJiLmNvcHkoc2hhcGVBQUJCKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFhYmIuZXh0ZW5kKHNoYXBlQUFCQik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFhYmJOZWVkc1VwZGF0ZSA9IGZhbHNlO1xufTtcblxudmFyIHVpd19tMSA9IG5ldyBNYXQzKCksXG4gICAgdWl3X20yID0gbmV3IE1hdDMoKSxcbiAgICB1aXdfbTMgPSBuZXcgTWF0MygpO1xuXG4vKipcbiAqIFVwZGF0ZSAuaW5lcnRpYVdvcmxkIGFuZCAuaW52SW5lcnRpYVdvcmxkXG4gKiBAbWV0aG9kIHVwZGF0ZUluZXJ0aWFXb3JsZFxuICovXG5Cb2R5LnByb3RvdHlwZS51cGRhdGVJbmVydGlhV29ybGQgPSBmdW5jdGlvbihmb3JjZSl7XG4gICAgdmFyIEkgPSB0aGlzLmludkluZXJ0aWE7XG4gICAgaWYgKEkueCA9PT0gSS55ICYmIEkueSA9PT0gSS56ICYmICFmb3JjZSkge1xuICAgICAgICAvLyBJZiBpbmVydGlhIE0gPSBzKkksIHdoZXJlIEkgaXMgaWRlbnRpdHkgYW5kIHMgYSBzY2FsYXIsIHRoZW5cbiAgICAgICAgLy8gICAgUipNKlInID0gUioocypJKSpSJyA9IHMqUipJKlInID0gcypSKlInID0gcypJID0gTVxuICAgICAgICAvLyB3aGVyZSBSIGlzIHRoZSByb3RhdGlvbiBtYXRyaXguXG4gICAgICAgIC8vIEluIG90aGVyIHdvcmRzLCB3ZSBkb24ndCBoYXZlIHRvIHRyYW5zZm9ybSB0aGUgaW5lcnRpYSBpZiBhbGxcbiAgICAgICAgLy8gaW5lcnRpYSBkaWFnb25hbCBlbnRyaWVzIGFyZSBlcXVhbC5cbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbTEgPSB1aXdfbTEsXG4gICAgICAgICAgICBtMiA9IHVpd19tMixcbiAgICAgICAgICAgIG0zID0gdWl3X20zO1xuICAgICAgICBtMS5zZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKHRoaXMucXVhdGVybmlvbik7XG4gICAgICAgIG0xLnRyYW5zcG9zZShtMik7XG4gICAgICAgIG0xLnNjYWxlKEksbTEpO1xuICAgICAgICBtMS5tbXVsdChtMix0aGlzLmludkluZXJ0aWFXb3JsZCk7XG4gICAgICAgIC8vbTMuZ2V0VHJhY2UodGhpcy5pbnZJbmVydGlhV29ybGQpO1xuICAgIH1cblxuICAgIC8qXG4gICAgdGhpcy5xdWF0ZXJuaW9uLnZtdWx0KHRoaXMuaW5lcnRpYSx0aGlzLmluZXJ0aWFXb3JsZCk7XG4gICAgdGhpcy5xdWF0ZXJuaW9uLnZtdWx0KHRoaXMuaW52SW5lcnRpYSx0aGlzLmludkluZXJ0aWFXb3JsZCk7XG4gICAgKi9cbn07XG5cbi8qKlxuICogQXBwbHkgZm9yY2UgdG8gYSB3b3JsZCBwb2ludC4gVGhpcyBjb3VsZCBmb3IgZXhhbXBsZSBiZSBhIHBvaW50IG9uIHRoZSBCb2R5IHN1cmZhY2UuIEFwcGx5aW5nIGZvcmNlIHRoaXMgd2F5IHdpbGwgYWRkIHRvIEJvZHkuZm9yY2UgYW5kIEJvZHkudG9ycXVlLlxuICogQG1ldGhvZCBhcHBseUZvcmNlXG4gKiBAcGFyYW0gIHtWZWMzfSBmb3JjZSBUaGUgYW1vdW50IG9mIGZvcmNlIHRvIGFkZC5cbiAqIEBwYXJhbSAge1ZlYzN9IHdvcmxkUG9pbnQgQSB3b3JsZCBwb2ludCB0byBhcHBseSB0aGUgZm9yY2Ugb24uXG4gKi9cbnZhciBCb2R5X2FwcGx5Rm9yY2VfciA9IG5ldyBWZWMzKCk7XG52YXIgQm9keV9hcHBseUZvcmNlX3JvdEZvcmNlID0gbmV3IFZlYzMoKTtcbkJvZHkucHJvdG90eXBlLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbihmb3JjZSx3b3JsZFBvaW50KXtcbiAgICBpZih0aGlzLnR5cGUgIT09IEJvZHkuRFlOQU1JQyl7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIHBvaW50IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBib2R5IGNlbnRlclxuICAgIHZhciByID0gQm9keV9hcHBseUZvcmNlX3I7XG4gICAgd29ybGRQb2ludC52c3ViKHRoaXMucG9zaXRpb24scik7XG5cbiAgICAvLyBDb21wdXRlIHByb2R1Y2VkIHJvdGF0aW9uYWwgZm9yY2VcbiAgICB2YXIgcm90Rm9yY2UgPSBCb2R5X2FwcGx5Rm9yY2Vfcm90Rm9yY2U7XG4gICAgci5jcm9zcyhmb3JjZSxyb3RGb3JjZSk7XG5cbiAgICAvLyBBZGQgbGluZWFyIGZvcmNlXG4gICAgdGhpcy5mb3JjZS52YWRkKGZvcmNlLHRoaXMuZm9yY2UpO1xuXG4gICAgLy8gQWRkIHJvdGF0aW9uYWwgZm9yY2VcbiAgICB0aGlzLnRvcnF1ZS52YWRkKHJvdEZvcmNlLHRoaXMudG9ycXVlKTtcbn07XG5cbi8qKlxuICogQXBwbHkgZm9yY2UgdG8gYSBsb2NhbCBwb2ludCBpbiB0aGUgYm9keS5cbiAqIEBtZXRob2QgYXBwbHlMb2NhbEZvcmNlXG4gKiBAcGFyYW0gIHtWZWMzfSBmb3JjZSBUaGUgZm9yY2UgdmVjdG9yIHRvIGFwcGx5LCBkZWZpbmVkIGxvY2FsbHkgaW4gdGhlIGJvZHkgZnJhbWUuXG4gKiBAcGFyYW0gIHtWZWMzfSBsb2NhbFBvaW50IEEgbG9jYWwgcG9pbnQgaW4gdGhlIGJvZHkgdG8gYXBwbHkgdGhlIGZvcmNlIG9uLlxuICovXG52YXIgQm9keV9hcHBseUxvY2FsRm9yY2Vfd29ybGRGb3JjZSA9IG5ldyBWZWMzKCk7XG52YXIgQm9keV9hcHBseUxvY2FsRm9yY2Vfd29ybGRQb2ludCA9IG5ldyBWZWMzKCk7XG5Cb2R5LnByb3RvdHlwZS5hcHBseUxvY2FsRm9yY2UgPSBmdW5jdGlvbihsb2NhbEZvcmNlLCBsb2NhbFBvaW50KXtcbiAgICBpZih0aGlzLnR5cGUgIT09IEJvZHkuRFlOQU1JQyl7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgd29ybGRGb3JjZSA9IEJvZHlfYXBwbHlMb2NhbEZvcmNlX3dvcmxkRm9yY2U7XG4gICAgdmFyIHdvcmxkUG9pbnQgPSBCb2R5X2FwcGx5TG9jYWxGb3JjZV93b3JsZFBvaW50O1xuXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBmb3JjZSB2ZWN0b3IgdG8gd29ybGQgc3BhY2VcbiAgICB0aGlzLnZlY3RvclRvV29ybGRGcmFtZShsb2NhbEZvcmNlLCB3b3JsZEZvcmNlKTtcbiAgICB0aGlzLnBvaW50VG9Xb3JsZEZyYW1lKGxvY2FsUG9pbnQsIHdvcmxkUG9pbnQpO1xuXG4gICAgdGhpcy5hcHBseUZvcmNlKHdvcmxkRm9yY2UsIHdvcmxkUG9pbnQpO1xufTtcblxuLyoqXG4gKiBBcHBseSBpbXB1bHNlIHRvIGEgd29ybGQgcG9pbnQuIFRoaXMgY291bGQgZm9yIGV4YW1wbGUgYmUgYSBwb2ludCBvbiB0aGUgQm9keSBzdXJmYWNlLiBBbiBpbXB1bHNlIGlzIGEgZm9yY2UgYWRkZWQgdG8gYSBib2R5IGR1cmluZyBhIHNob3J0IHBlcmlvZCBvZiB0aW1lIChpbXB1bHNlID0gZm9yY2UgKiB0aW1lKS4gSW1wdWxzZXMgd2lsbCBiZSBhZGRlZCB0byBCb2R5LnZlbG9jaXR5IGFuZCBCb2R5LmFuZ3VsYXJWZWxvY2l0eS5cbiAqIEBtZXRob2QgYXBwbHlJbXB1bHNlXG4gKiBAcGFyYW0gIHtWZWMzfSBpbXB1bHNlIFRoZSBhbW91bnQgb2YgaW1wdWxzZSB0byBhZGQuXG4gKiBAcGFyYW0gIHtWZWMzfSB3b3JsZFBvaW50IEEgd29ybGQgcG9pbnQgdG8gYXBwbHkgdGhlIGZvcmNlIG9uLlxuICovXG52YXIgQm9keV9hcHBseUltcHVsc2VfciA9IG5ldyBWZWMzKCk7XG52YXIgQm9keV9hcHBseUltcHVsc2VfdmVsbyA9IG5ldyBWZWMzKCk7XG52YXIgQm9keV9hcHBseUltcHVsc2Vfcm90VmVsbyA9IG5ldyBWZWMzKCk7XG5Cb2R5LnByb3RvdHlwZS5hcHBseUltcHVsc2UgPSBmdW5jdGlvbihpbXB1bHNlLCB3b3JsZFBvaW50KXtcbiAgICBpZih0aGlzLnR5cGUgIT09IEJvZHkuRFlOQU1JQyl7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDb21wdXRlIHBvaW50IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBib2R5IGNlbnRlclxuICAgIHZhciByID0gQm9keV9hcHBseUltcHVsc2VfcjtcbiAgICB3b3JsZFBvaW50LnZzdWIodGhpcy5wb3NpdGlvbixyKTtcblxuICAgIC8vIENvbXB1dGUgcHJvZHVjZWQgY2VudHJhbCBpbXB1bHNlIHZlbG9jaXR5XG4gICAgdmFyIHZlbG8gPSBCb2R5X2FwcGx5SW1wdWxzZV92ZWxvO1xuICAgIHZlbG8uY29weShpbXB1bHNlKTtcbiAgICB2ZWxvLm11bHQodGhpcy5pbnZNYXNzLHZlbG8pO1xuXG4gICAgLy8gQWRkIGxpbmVhciBpbXB1bHNlXG4gICAgdGhpcy52ZWxvY2l0eS52YWRkKHZlbG8sIHRoaXMudmVsb2NpdHkpO1xuXG4gICAgLy8gQ29tcHV0ZSBwcm9kdWNlZCByb3RhdGlvbmFsIGltcHVsc2UgdmVsb2NpdHlcbiAgICB2YXIgcm90VmVsbyA9IEJvZHlfYXBwbHlJbXB1bHNlX3JvdFZlbG87XG4gICAgci5jcm9zcyhpbXB1bHNlLHJvdFZlbG8pO1xuXG4gICAgLypcbiAgICByb3RWZWxvLnggKj0gdGhpcy5pbnZJbmVydGlhLng7XG4gICAgcm90VmVsby55ICo9IHRoaXMuaW52SW5lcnRpYS55O1xuICAgIHJvdFZlbG8ueiAqPSB0aGlzLmludkluZXJ0aWEuejtcbiAgICAqL1xuICAgIHRoaXMuaW52SW5lcnRpYVdvcmxkLnZtdWx0KHJvdFZlbG8scm90VmVsbyk7XG5cbiAgICAvLyBBZGQgcm90YXRpb25hbCBJbXB1bHNlXG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHkudmFkZChyb3RWZWxvLCB0aGlzLmFuZ3VsYXJWZWxvY2l0eSk7XG59O1xuXG4vKipcbiAqIEFwcGx5IGxvY2FsbHktZGVmaW5lZCBpbXB1bHNlIHRvIGEgbG9jYWwgcG9pbnQgaW4gdGhlIGJvZHkuXG4gKiBAbWV0aG9kIGFwcGx5TG9jYWxJbXB1bHNlXG4gKiBAcGFyYW0gIHtWZWMzfSBmb3JjZSBUaGUgZm9yY2UgdmVjdG9yIHRvIGFwcGx5LCBkZWZpbmVkIGxvY2FsbHkgaW4gdGhlIGJvZHkgZnJhbWUuXG4gKiBAcGFyYW0gIHtWZWMzfSBsb2NhbFBvaW50IEEgbG9jYWwgcG9pbnQgaW4gdGhlIGJvZHkgdG8gYXBwbHkgdGhlIGZvcmNlIG9uLlxuICovXG52YXIgQm9keV9hcHBseUxvY2FsSW1wdWxzZV93b3JsZEltcHVsc2UgPSBuZXcgVmVjMygpO1xudmFyIEJvZHlfYXBwbHlMb2NhbEltcHVsc2Vfd29ybGRQb2ludCA9IG5ldyBWZWMzKCk7XG5Cb2R5LnByb3RvdHlwZS5hcHBseUxvY2FsSW1wdWxzZSA9IGZ1bmN0aW9uKGxvY2FsSW1wdWxzZSwgbG9jYWxQb2ludCl7XG4gICAgaWYodGhpcy50eXBlICE9PSBCb2R5LkRZTkFNSUMpe1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHdvcmxkSW1wdWxzZSA9IEJvZHlfYXBwbHlMb2NhbEltcHVsc2Vfd29ybGRJbXB1bHNlO1xuICAgIHZhciB3b3JsZFBvaW50ID0gQm9keV9hcHBseUxvY2FsSW1wdWxzZV93b3JsZFBvaW50O1xuXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBmb3JjZSB2ZWN0b3IgdG8gd29ybGQgc3BhY2VcbiAgICB0aGlzLnZlY3RvclRvV29ybGRGcmFtZShsb2NhbEltcHVsc2UsIHdvcmxkSW1wdWxzZSk7XG4gICAgdGhpcy5wb2ludFRvV29ybGRGcmFtZShsb2NhbFBvaW50LCB3b3JsZFBvaW50KTtcblxuICAgIHRoaXMuYXBwbHlJbXB1bHNlKHdvcmxkSW1wdWxzZSwgd29ybGRQb2ludCk7XG59O1xuXG52YXIgQm9keV91cGRhdGVNYXNzUHJvcGVydGllc19oYWxmRXh0ZW50cyA9IG5ldyBWZWMzKCk7XG5cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCB3aGVuZXZlciB5b3UgY2hhbmdlIHRoZSBib2R5IHNoYXBlIG9yIG1hc3MuXG4gKiBAbWV0aG9kIHVwZGF0ZU1hc3NQcm9wZXJ0aWVzXG4gKi9cbkJvZHkucHJvdG90eXBlLnVwZGF0ZU1hc3NQcm9wZXJ0aWVzID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgaGFsZkV4dGVudHMgPSBCb2R5X3VwZGF0ZU1hc3NQcm9wZXJ0aWVzX2hhbGZFeHRlbnRzO1xuXG4gICAgdGhpcy5pbnZNYXNzID0gdGhpcy5tYXNzID4gMCA/IDEuMCAvIHRoaXMubWFzcyA6IDA7XG4gICAgdmFyIEkgPSB0aGlzLmluZXJ0aWE7XG4gICAgdmFyIGZpeGVkID0gdGhpcy5maXhlZFJvdGF0aW9uO1xuXG4gICAgLy8gQXBwcm94aW1hdGUgd2l0aCBBQUJCIGJveFxuICAgIHRoaXMuY29tcHV0ZUFBQkIoKTtcbiAgICBoYWxmRXh0ZW50cy5zZXQoXG4gICAgICAgICh0aGlzLmFhYmIudXBwZXJCb3VuZC54LXRoaXMuYWFiYi5sb3dlckJvdW5kLngpIC8gMixcbiAgICAgICAgKHRoaXMuYWFiYi51cHBlckJvdW5kLnktdGhpcy5hYWJiLmxvd2VyQm91bmQueSkgLyAyLFxuICAgICAgICAodGhpcy5hYWJiLnVwcGVyQm91bmQuei10aGlzLmFhYmIubG93ZXJCb3VuZC56KSAvIDJcbiAgICApO1xuICAgIEJveC5jYWxjdWxhdGVJbmVydGlhKGhhbGZFeHRlbnRzLCB0aGlzLm1hc3MsIEkpO1xuXG4gICAgdGhpcy5pbnZJbmVydGlhLnNldChcbiAgICAgICAgSS54ID4gMCAmJiAhZml4ZWQgPyAxLjAgLyBJLnggOiAwLFxuICAgICAgICBJLnkgPiAwICYmICFmaXhlZCA/IDEuMCAvIEkueSA6IDAsXG4gICAgICAgIEkueiA+IDAgJiYgIWZpeGVkID8gMS4wIC8gSS56IDogMFxuICAgICk7XG4gICAgdGhpcy51cGRhdGVJbmVydGlhV29ybGQodHJ1ZSk7XG59O1xuXG4vKipcbiAqIEdldCB3b3JsZCB2ZWxvY2l0eSBvZiBhIHBvaW50IGluIHRoZSBib2R5LlxuICogQG1ldGhvZCBnZXRWZWxvY2l0eUF0V29ybGRQb2ludFxuICogQHBhcmFtICB7VmVjM30gd29ybGRQb2ludFxuICogQHBhcmFtICB7VmVjM30gcmVzdWx0XG4gKiBAcmV0dXJuIHtWZWMzfSBUaGUgcmVzdWx0IHZlY3Rvci5cbiAqL1xuQm9keS5wcm90b3R5cGUuZ2V0VmVsb2NpdHlBdFdvcmxkUG9pbnQgPSBmdW5jdGlvbih3b3JsZFBvaW50LCByZXN1bHQpe1xuICAgIHZhciByID0gbmV3IFZlYzMoKTtcbiAgICB3b3JsZFBvaW50LnZzdWIodGhpcy5wb3NpdGlvbiwgcik7XG4gICAgdGhpcy5hbmd1bGFyVmVsb2NpdHkuY3Jvc3MociwgcmVzdWx0KTtcbiAgICB0aGlzLnZlbG9jaXR5LnZhZGQocmVzdWx0LCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG59LHtcIi4uL2NvbGxpc2lvbi9BQUJCXCI6MyxcIi4uL21hdGVyaWFsL01hdGVyaWFsXCI6MjUsXCIuLi9tYXRoL01hdDNcIjoyNyxcIi4uL21hdGgvUXVhdGVybmlvblwiOjI4LFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuLi9zaGFwZXMvQm94XCI6MzcsXCIuLi9zaGFwZXMvU2hhcGVcIjo0MyxcIi4uL3V0aWxzL0V2ZW50VGFyZ2V0XCI6NDl9XSwzMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQm9keSA9IF9kZXJlcV8oJy4vQm9keScpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBRdWF0ZXJuaW9uID0gX2RlcmVxXygnLi4vbWF0aC9RdWF0ZXJuaW9uJyk7XG52YXIgUmF5Y2FzdFJlc3VsdCA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9SYXljYXN0UmVzdWx0Jyk7XG52YXIgUmF5ID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL1JheScpO1xudmFyIFdoZWVsSW5mbyA9IF9kZXJlcV8oJy4uL29iamVjdHMvV2hlZWxJbmZvJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmF5Y2FzdFZlaGljbGU7XG5cbi8qKlxuICogVmVoaWNsZSBoZWxwZXIgY2xhc3MgdGhhdCBjYXN0cyByYXlzIGZyb20gdGhlIHdoZWVsIHBvc2l0aW9ucyB0b3dhcmRzIHRoZSBncm91bmQgYW5kIGFwcGxpZXMgZm9yY2VzLlxuICogQGNsYXNzIFJheWNhc3RWZWhpY2xlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Qm9keX0gW29wdGlvbnMuY2hhc3Npc0JvZHldIFRoZSBjYXIgY2hhc3NpcyBib2R5LlxuICogQHBhcmFtIHtpbnRlZ2VyfSBbb3B0aW9ucy5pbmRleFJpZ2h0QXhpc10gQXhpcyB0byB1c2UgZm9yIHJpZ2h0LiB4PTAsIHk9MSwgej0yXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRpb25zLmluZGV4TGVmdEF4aXNdXG4gKiBAcGFyYW0ge2ludGVnZXJ9IFtvcHRpb25zLmluZGV4VXBBeGlzXVxuICovXG5mdW5jdGlvbiBSYXljYXN0VmVoaWNsZShvcHRpb25zKXtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9keX0gY2hhc3Npc0JvZHlcbiAgICAgKi9cbiAgICB0aGlzLmNoYXNzaXNCb2R5ID0gb3B0aW9ucy5jaGFzc2lzQm9keTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIFdoZWVsSW5mbyBvYmplY3RzLlxuICAgICAqIEBwcm9wZXJ0eSB7YXJyYXl9IHdoZWVsSW5mb3NcbiAgICAgKi9cbiAgICB0aGlzLndoZWVsSW5mb3MgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFdpbGwgYmUgc2V0IHRvIHRydWUgaWYgdGhlIGNhciBpcyBzbGlkaW5nLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc2xpZGluZ1xuICAgICAqL1xuICAgIHRoaXMuc2xpZGluZyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtXb3JsZH0gd29ybGRcbiAgICAgKi9cbiAgICB0aGlzLndvcmxkID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEluZGV4IG9mIHRoZSByaWdodCBheGlzLCAwPXgsIDE9eSwgMj16XG4gICAgICogQHByb3BlcnR5IHtpbnRlZ2VyfSBpbmRleFJpZ2h0QXhpc1xuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICB0aGlzLmluZGV4UmlnaHRBeGlzID0gdHlwZW9mKG9wdGlvbnMuaW5kZXhSaWdodEF4aXMpICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMuaW5kZXhSaWdodEF4aXMgOiAxO1xuXG4gICAgLyoqXG4gICAgICogSW5kZXggb2YgdGhlIGZvcndhcmQgYXhpcywgMD14LCAxPXksIDI9elxuICAgICAqIEBwcm9wZXJ0eSB7aW50ZWdlcn0gaW5kZXhGb3J3YXJkQXhpc1xuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cbiAgICB0aGlzLmluZGV4Rm9yd2FyZEF4aXMgPSB0eXBlb2Yob3B0aW9ucy5pbmRleEZvcndhcmRBeGlzKSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmluZGV4Rm9yd2FyZEF4aXMgOiAwO1xuXG4gICAgLyoqXG4gICAgICogSW5kZXggb2YgdGhlIHVwIGF4aXMsIDA9eCwgMT15LCAyPXpcbiAgICAgKiBAcHJvcGVydHkge2ludGVnZXJ9IGluZGV4VXBBeGlzXG4gICAgICogQGRlZmF1bHQgMlxuICAgICAqL1xuICAgIHRoaXMuaW5kZXhVcEF4aXMgPSB0eXBlb2Yob3B0aW9ucy5pbmRleFVwQXhpcykgIT09ICd1bmRlZmluZWQnID8gb3B0aW9ucy5pbmRleFVwQXhpcyA6IDI7XG59XG5cbnZhciB0bXBWZWMxID0gbmV3IFZlYzMoKTtcbnZhciB0bXBWZWMyID0gbmV3IFZlYzMoKTtcbnZhciB0bXBWZWMzID0gbmV3IFZlYzMoKTtcbnZhciB0bXBWZWM0ID0gbmV3IFZlYzMoKTtcbnZhciB0bXBWZWM1ID0gbmV3IFZlYzMoKTtcbnZhciB0bXBWZWM2ID0gbmV3IFZlYzMoKTtcbnZhciB0bXBSYXkgPSBuZXcgUmF5KCk7XG5cbi8qKlxuICogQWRkIGEgd2hlZWwuIEZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3B0aW9ucywgc2VlIFdoZWVsSW5mby5cbiAqIEBtZXRob2QgYWRkV2hlZWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqL1xuUmF5Y2FzdFZlaGljbGUucHJvdG90eXBlLmFkZFdoZWVsID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB2YXIgaW5mbyA9IG5ldyBXaGVlbEluZm8ob3B0aW9ucyk7XG4gICAgdmFyIGluZGV4ID0gdGhpcy53aGVlbEluZm9zLmxlbmd0aDtcbiAgICB0aGlzLndoZWVsSW5mb3MucHVzaChpbmZvKTtcblxuICAgIHJldHVybiBpbmRleDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBzdGVlcmluZyB2YWx1ZSBvZiBhIHdoZWVsLlxuICogQG1ldGhvZCBzZXRTdGVlcmluZ1ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7aW50ZWdlcn0gd2hlZWxJbmRleFxuICovXG5SYXljYXN0VmVoaWNsZS5wcm90b3R5cGUuc2V0U3RlZXJpbmdWYWx1ZSA9IGZ1bmN0aW9uKHZhbHVlLCB3aGVlbEluZGV4KXtcbiAgICB2YXIgd2hlZWwgPSB0aGlzLndoZWVsSW5mb3Nbd2hlZWxJbmRleF07XG4gICAgd2hlZWwuc3RlZXJpbmcgPSB2YWx1ZTtcbn07XG5cbnZhciB0b3JxdWUgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIFNldCB0aGUgd2hlZWwgZm9yY2UgdG8gYXBwbHkgb24gb25lIG9mIHRoZSB3aGVlbHMgZWFjaCB0aW1lIHN0ZXBcbiAqIEBtZXRob2QgYXBwbHlFbmdpbmVGb3JjZVxuICogQHBhcmFtICB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtICB7aW50ZWdlcn0gd2hlZWxJbmRleFxuICovXG5SYXljYXN0VmVoaWNsZS5wcm90b3R5cGUuYXBwbHlFbmdpbmVGb3JjZSA9IGZ1bmN0aW9uKHZhbHVlLCB3aGVlbEluZGV4KXtcbiAgICB0aGlzLndoZWVsSW5mb3Nbd2hlZWxJbmRleF0uZW5naW5lRm9yY2UgPSB2YWx1ZTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBicmFraW5nIGZvcmNlIG9mIGEgd2hlZWxcbiAqIEBtZXRob2Qgc2V0QnJha2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBicmFrZVxuICogQHBhcmFtIHtpbnRlZ2VyfSB3aGVlbEluZGV4XG4gKi9cblJheWNhc3RWZWhpY2xlLnByb3RvdHlwZS5zZXRCcmFrZSA9IGZ1bmN0aW9uKGJyYWtlLCB3aGVlbEluZGV4KXtcbiAgICB0aGlzLndoZWVsSW5mb3Nbd2hlZWxJbmRleF0uYnJha2UgPSBicmFrZTtcbn07XG5cbi8qKlxuICogQWRkIHRoZSB2ZWhpY2xlIGluY2x1ZGluZyBpdHMgY29uc3RyYWludHMgdG8gdGhlIHdvcmxkLlxuICogQG1ldGhvZCBhZGRUb1dvcmxkXG4gKiBAcGFyYW0ge1dvcmxkfSB3b3JsZFxuICovXG5SYXljYXN0VmVoaWNsZS5wcm90b3R5cGUuYWRkVG9Xb3JsZCA9IGZ1bmN0aW9uKHdvcmxkKXtcbiAgICB2YXIgY29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzO1xuICAgIHdvcmxkLmFkZCh0aGlzLmNoYXNzaXNCb2R5KTtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgdGhpcy5wcmVTdGVwQ2FsbGJhY2sgPSBmdW5jdGlvbigpe1xuICAgICAgICB0aGF0LnVwZGF0ZVZlaGljbGUod29ybGQuZHQpO1xuICAgIH07XG4gICAgd29ybGQuYWRkRXZlbnRMaXN0ZW5lcigncHJlU3RlcCcsIHRoaXMucHJlU3RlcENhbGxiYWNrKTtcbiAgICB0aGlzLndvcmxkID0gd29ybGQ7XG59O1xuXG4vKipcbiAqIEdldCBvbmUgb2YgdGhlIHdoZWVsIGF4bGVzLCB3b3JsZC1vcmllbnRlZC5cbiAqIEBwcml2YXRlXG4gKiBAbWV0aG9kIGdldFZlaGljbGVBeGlzV29ybGRcbiAqIEBwYXJhbSAge2ludGVnZXJ9IGF4aXNJbmRleFxuICogQHBhcmFtICB7VmVjM30gcmVzdWx0XG4gKi9cblJheWNhc3RWZWhpY2xlLnByb3RvdHlwZS5nZXRWZWhpY2xlQXhpc1dvcmxkID0gZnVuY3Rpb24oYXhpc0luZGV4LCByZXN1bHQpe1xuICAgIHJlc3VsdC5zZXQoXG4gICAgICAgIGF4aXNJbmRleCA9PT0gMCA/IDEgOiAwLFxuICAgICAgICBheGlzSW5kZXggPT09IDEgPyAxIDogMCxcbiAgICAgICAgYXhpc0luZGV4ID09PSAyID8gMSA6IDBcbiAgICApO1xuICAgIHRoaXMuY2hhc3Npc0JvZHkudmVjdG9yVG9Xb3JsZEZyYW1lKHJlc3VsdCwgcmVzdWx0KTtcbn07XG5cblJheWNhc3RWZWhpY2xlLnByb3RvdHlwZS51cGRhdGVWZWhpY2xlID0gZnVuY3Rpb24odGltZVN0ZXApe1xuICAgIHZhciB3aGVlbEluZm9zID0gdGhpcy53aGVlbEluZm9zO1xuICAgIHZhciBudW1XaGVlbHMgPSB3aGVlbEluZm9zLmxlbmd0aDtcbiAgICB2YXIgY2hhc3Npc0JvZHkgPSB0aGlzLmNoYXNzaXNCb2R5O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1XaGVlbHM7IGkrKykge1xuICAgICAgICB0aGlzLnVwZGF0ZVdoZWVsVHJhbnNmb3JtKGkpO1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudFZlaGljbGVTcGVlZEttSG91ciA9IDMuNiAqIGNoYXNzaXNCb2R5LnZlbG9jaXR5Lm5vcm0oKTtcblxuICAgIHZhciBmb3J3YXJkV29ybGQgPSBuZXcgVmVjMygpO1xuICAgIHRoaXMuZ2V0VmVoaWNsZUF4aXNXb3JsZCh0aGlzLmluZGV4Rm9yd2FyZEF4aXMsIGZvcndhcmRXb3JsZCk7XG5cbiAgICBpZiAoZm9yd2FyZFdvcmxkLmRvdChjaGFzc2lzQm9keS52ZWxvY2l0eSkgPCAwKXtcbiAgICAgICAgdGhpcy5jdXJyZW50VmVoaWNsZVNwZWVkS21Ib3VyICo9IC0xO1xuICAgIH1cblxuICAgIC8vIHNpbXVsYXRlIHN1c3BlbnNpb25cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVdoZWVsczsgaSsrKSB7XG4gICAgICAgIHRoaXMuY2FzdFJheSh3aGVlbEluZm9zW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVN1c3BlbnNpb24odGltZVN0ZXApO1xuXG4gICAgdmFyIGltcHVsc2UgPSBuZXcgVmVjMygpO1xuICAgIHZhciByZWxwb3MgPSBuZXcgVmVjMygpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtV2hlZWxzOyBpKyspIHtcbiAgICAgICAgLy9hcHBseSBzdXNwZW5zaW9uIGZvcmNlXG4gICAgICAgIHZhciB3aGVlbCA9IHdoZWVsSW5mb3NbaV07XG4gICAgICAgIHZhciBzdXNwZW5zaW9uRm9yY2UgPSB3aGVlbC5zdXNwZW5zaW9uRm9yY2U7XG4gICAgICAgIGlmIChzdXNwZW5zaW9uRm9yY2UgPiB3aGVlbC5tYXhTdXNwZW5zaW9uRm9yY2UpIHtcbiAgICAgICAgICAgIHN1c3BlbnNpb25Gb3JjZSA9IHdoZWVsLm1heFN1c3BlbnNpb25Gb3JjZTtcbiAgICAgICAgfVxuICAgICAgICB3aGVlbC5yYXljYXN0UmVzdWx0LmhpdE5vcm1hbFdvcmxkLnNjYWxlKHN1c3BlbnNpb25Gb3JjZSAqIHRpbWVTdGVwLCBpbXB1bHNlKTtcblxuICAgICAgICB3aGVlbC5yYXljYXN0UmVzdWx0LmhpdFBvaW50V29ybGQudnN1YihjaGFzc2lzQm9keS5wb3NpdGlvbiwgcmVscG9zKTtcbiAgICAgICAgY2hhc3Npc0JvZHkuYXBwbHlJbXB1bHNlKGltcHVsc2UsIHdoZWVsLnJheWNhc3RSZXN1bHQuaGl0UG9pbnRXb3JsZC8qcmVscG9zKi8pO1xuICAgIH1cblxuICAgIHRoaXMudXBkYXRlRnJpY3Rpb24odGltZVN0ZXApO1xuXG4gICAgdmFyIGhpdE5vcm1hbFdvcmxkU2NhbGVkV2l0aFByb2ogPSBuZXcgVmVjMygpO1xuICAgIHZhciBmd2QgID0gbmV3IFZlYzMoKTtcbiAgICB2YXIgdmVsID0gbmV3IFZlYzMoKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtV2hlZWxzOyBpKyspIHtcbiAgICAgICAgdmFyIHdoZWVsID0gd2hlZWxJbmZvc1tpXTtcbiAgICAgICAgLy92YXIgcmVscG9zID0gbmV3IFZlYzMoKTtcbiAgICAgICAgLy93aGVlbC5jaGFzc2lzQ29ubmVjdGlvblBvaW50V29ybGQudnN1YihjaGFzc2lzQm9keS5wb3NpdGlvbiwgcmVscG9zKTtcbiAgICAgICAgY2hhc3Npc0JvZHkuZ2V0VmVsb2NpdHlBdFdvcmxkUG9pbnQod2hlZWwuY2hhc3Npc0Nvbm5lY3Rpb25Qb2ludFdvcmxkLCB2ZWwpO1xuXG4gICAgICAgIC8vIEhhY2sgdG8gZ2V0IHRoZSByb3RhdGlvbiBpbiB0aGUgY29ycmVjdCBkaXJlY3Rpb25cbiAgICAgICAgdmFyIG0gPSAxO1xuICAgICAgICBzd2l0Y2godGhpcy5pbmRleFVwQXhpcyl7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIG0gPSAtMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdoZWVsLmlzSW5Db250YWN0KSB7XG5cbiAgICAgICAgICAgIHRoaXMuZ2V0VmVoaWNsZUF4aXNXb3JsZCh0aGlzLmluZGV4Rm9yd2FyZEF4aXMsIGZ3ZCk7XG4gICAgICAgICAgICB2YXIgcHJvaiA9IGZ3ZC5kb3Qod2hlZWwucmF5Y2FzdFJlc3VsdC5oaXROb3JtYWxXb3JsZCk7XG4gICAgICAgICAgICB3aGVlbC5yYXljYXN0UmVzdWx0LmhpdE5vcm1hbFdvcmxkLnNjYWxlKHByb2osIGhpdE5vcm1hbFdvcmxkU2NhbGVkV2l0aFByb2opO1xuXG4gICAgICAgICAgICBmd2QudnN1YihoaXROb3JtYWxXb3JsZFNjYWxlZFdpdGhQcm9qLCBmd2QpO1xuXG4gICAgICAgICAgICB2YXIgcHJvajIgPSBmd2QuZG90KHZlbCk7XG4gICAgICAgICAgICB3aGVlbC5kZWx0YVJvdGF0aW9uID0gbSAqIHByb2oyICogdGltZVN0ZXAgLyB3aGVlbC5yYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZigod2hlZWwuc2xpZGluZyB8fCAhd2hlZWwuaXNJbkNvbnRhY3QpICYmIHdoZWVsLmVuZ2luZUZvcmNlICE9PSAwICYmIHdoZWVsLnVzZUN1c3RvbVNsaWRpbmdSb3RhdGlvbmFsU3BlZWQpe1xuICAgICAgICAgICAgLy8gQXBwbHkgY3VzdG9tIHJvdGF0aW9uIHdoZW4gYWNjZWxlcmF0aW5nIGFuZCBzbGlkaW5nXG4gICAgICAgICAgICB3aGVlbC5kZWx0YVJvdGF0aW9uID0gKHdoZWVsLmVuZ2luZUZvcmNlID4gMCA/IDEgOiAtMSkgKiB3aGVlbC5jdXN0b21TbGlkaW5nUm90YXRpb25hbFNwZWVkICogdGltZVN0ZXA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBMb2NrIHdoZWVsc1xuICAgICAgICBpZihNYXRoLmFicyh3aGVlbC5icmFrZSkgPiBNYXRoLmFicyh3aGVlbC5lbmdpbmVGb3JjZSkpe1xuICAgICAgICAgICAgd2hlZWwuZGVsdGFSb3RhdGlvbiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB3aGVlbC5yb3RhdGlvbiArPSB3aGVlbC5kZWx0YVJvdGF0aW9uOyAvLyBVc2UgdGhlIG9sZCB2YWx1ZVxuICAgICAgICB3aGVlbC5kZWx0YVJvdGF0aW9uICo9IDAuOTk7IC8vIGRhbXBpbmcgb2Ygcm90YXRpb24gd2hlbiBub3QgaW4gY29udGFjdFxuICAgIH1cbn07XG5cblJheWNhc3RWZWhpY2xlLnByb3RvdHlwZS51cGRhdGVTdXNwZW5zaW9uID0gZnVuY3Rpb24oZGVsdGFUaW1lKSB7XG4gICAgdmFyIGNoYXNzaXNCb2R5ID0gdGhpcy5jaGFzc2lzQm9keTtcbiAgICB2YXIgY2hhc3Npc01hc3MgPSBjaGFzc2lzQm9keS5tYXNzO1xuICAgIHZhciB3aGVlbEluZm9zID0gdGhpcy53aGVlbEluZm9zO1xuICAgIHZhciBudW1XaGVlbHMgPSB3aGVlbEluZm9zLmxlbmd0aDtcblxuICAgIGZvciAodmFyIHdfaXQgPSAwOyB3X2l0IDwgbnVtV2hlZWxzOyB3X2l0Kyspe1xuICAgICAgICB2YXIgd2hlZWwgPSB3aGVlbEluZm9zW3dfaXRdO1xuXG4gICAgICAgIGlmICh3aGVlbC5pc0luQ29udGFjdCl7XG4gICAgICAgICAgICB2YXIgZm9yY2U7XG5cbiAgICAgICAgICAgIC8vIFNwcmluZ1xuICAgICAgICAgICAgdmFyIHN1c3BfbGVuZ3RoID0gd2hlZWwuc3VzcGVuc2lvblJlc3RMZW5ndGg7XG4gICAgICAgICAgICB2YXIgY3VycmVudF9sZW5ndGggPSB3aGVlbC5zdXNwZW5zaW9uTGVuZ3RoO1xuICAgICAgICAgICAgdmFyIGxlbmd0aF9kaWZmID0gKHN1c3BfbGVuZ3RoIC0gY3VycmVudF9sZW5ndGgpO1xuXG4gICAgICAgICAgICBmb3JjZSA9IHdoZWVsLnN1c3BlbnNpb25TdGlmZm5lc3MgKiBsZW5ndGhfZGlmZiAqIHdoZWVsLmNsaXBwZWRJbnZDb250YWN0RG90U3VzcGVuc2lvbjtcblxuICAgICAgICAgICAgLy8gRGFtcGVyXG4gICAgICAgICAgICB2YXIgcHJvamVjdGVkX3JlbF92ZWwgPSB3aGVlbC5zdXNwZW5zaW9uUmVsYXRpdmVWZWxvY2l0eTtcbiAgICAgICAgICAgIHZhciBzdXNwX2RhbXBpbmc7XG4gICAgICAgICAgICBpZiAocHJvamVjdGVkX3JlbF92ZWwgPCAwKSB7XG4gICAgICAgICAgICAgICAgc3VzcF9kYW1waW5nID0gd2hlZWwuZGFtcGluZ0NvbXByZXNzaW9uO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdXNwX2RhbXBpbmcgPSB3aGVlbC5kYW1waW5nUmVsYXhhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcmNlIC09IHN1c3BfZGFtcGluZyAqIHByb2plY3RlZF9yZWxfdmVsO1xuXG4gICAgICAgICAgICB3aGVlbC5zdXNwZW5zaW9uRm9yY2UgPSBmb3JjZSAqIGNoYXNzaXNNYXNzO1xuICAgICAgICAgICAgaWYgKHdoZWVsLnN1c3BlbnNpb25Gb3JjZSA8IDApIHtcbiAgICAgICAgICAgICAgICB3aGVlbC5zdXNwZW5zaW9uRm9yY2UgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlZWwuc3VzcGVuc2lvbkZvcmNlID0gMDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHRoZSB2ZWhpY2xlIGluY2x1ZGluZyBpdHMgY29uc3RyYWludHMgZnJvbSB0aGUgd29ybGQuXG4gKiBAbWV0aG9kIHJlbW92ZUZyb21Xb3JsZFxuICogQHBhcmFtIHtXb3JsZH0gd29ybGRcbiAqL1xuUmF5Y2FzdFZlaGljbGUucHJvdG90eXBlLnJlbW92ZUZyb21Xb3JsZCA9IGZ1bmN0aW9uKHdvcmxkKXtcbiAgICB2YXIgY29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzO1xuICAgIHdvcmxkLnJlbW92ZSh0aGlzLmNoYXNzaXNCb2R5KTtcbiAgICB3b3JsZC5yZW1vdmVFdmVudExpc3RlbmVyKCdwcmVTdGVwJywgdGhpcy5wcmVTdGVwQ2FsbGJhY2spO1xuICAgIHRoaXMud29ybGQgPSBudWxsO1xufTtcblxudmFyIGNhc3RSYXlfcmF5dmVjdG9yID0gbmV3IFZlYzMoKTtcbnZhciBjYXN0UmF5X3RhcmdldCA9IG5ldyBWZWMzKCk7XG5SYXljYXN0VmVoaWNsZS5wcm90b3R5cGUuY2FzdFJheSA9IGZ1bmN0aW9uKHdoZWVsKSB7XG4gICAgdmFyIHJheXZlY3RvciA9IGNhc3RSYXlfcmF5dmVjdG9yO1xuICAgIHZhciB0YXJnZXQgPSBjYXN0UmF5X3RhcmdldDtcblxuICAgIHRoaXMudXBkYXRlV2hlZWxUcmFuc2Zvcm1Xb3JsZCh3aGVlbCk7XG4gICAgdmFyIGNoYXNzaXNCb2R5ID0gdGhpcy5jaGFzc2lzQm9keTtcblxuICAgIHZhciBkZXB0aCA9IC0xO1xuXG4gICAgdmFyIHJheWxlbiA9IHdoZWVsLnN1c3BlbnNpb25SZXN0TGVuZ3RoICsgd2hlZWwucmFkaXVzO1xuXG4gICAgd2hlZWwuZGlyZWN0aW9uV29ybGQuc2NhbGUocmF5bGVuLCByYXl2ZWN0b3IpO1xuICAgIHZhciBzb3VyY2UgPSB3aGVlbC5jaGFzc2lzQ29ubmVjdGlvblBvaW50V29ybGQ7XG4gICAgc291cmNlLnZhZGQocmF5dmVjdG9yLCB0YXJnZXQpO1xuICAgIHZhciByYXljYXN0UmVzdWx0ID0gd2hlZWwucmF5Y2FzdFJlc3VsdDtcblxuICAgIHZhciBwYXJhbSA9IDA7XG5cbiAgICByYXljYXN0UmVzdWx0LnJlc2V0KCk7XG4gICAgLy8gVHVybiBvZmYgcmF5IGNvbGxpc2lvbiB3aXRoIHRoZSBjaGFzc2lzIHRlbXBvcmFyaWx5XG4gICAgdmFyIG9sZFN0YXRlID0gY2hhc3Npc0JvZHkuY29sbGlzaW9uUmVzcG9uc2U7XG4gICAgY2hhc3Npc0JvZHkuY29sbGlzaW9uUmVzcG9uc2UgPSBmYWxzZTtcblxuICAgIC8vIENhc3QgcmF5IGFnYWluc3Qgd29ybGRcbiAgICB0aGlzLndvcmxkLnJheVRlc3Qoc291cmNlLCB0YXJnZXQsIHJheWNhc3RSZXN1bHQpO1xuICAgIGNoYXNzaXNCb2R5LmNvbGxpc2lvblJlc3BvbnNlID0gb2xkU3RhdGU7XG5cbiAgICB2YXIgb2JqZWN0ID0gcmF5Y2FzdFJlc3VsdC5ib2R5O1xuXG4gICAgd2hlZWwucmF5Y2FzdFJlc3VsdC5ncm91bmRPYmplY3QgPSAwO1xuXG4gICAgaWYgKG9iamVjdCkge1xuICAgICAgICBkZXB0aCA9IHJheWNhc3RSZXN1bHQuZGlzdGFuY2U7XG4gICAgICAgIHdoZWVsLnJheWNhc3RSZXN1bHQuaGl0Tm9ybWFsV29ybGQgID0gcmF5Y2FzdFJlc3VsdC5oaXROb3JtYWxXb3JsZDtcbiAgICAgICAgd2hlZWwuaXNJbkNvbnRhY3QgPSB0cnVlO1xuXG4gICAgICAgIHZhciBoaXREaXN0YW5jZSA9IHJheWNhc3RSZXN1bHQuZGlzdGFuY2U7XG4gICAgICAgIHdoZWVsLnN1c3BlbnNpb25MZW5ndGggPSBoaXREaXN0YW5jZSAtIHdoZWVsLnJhZGl1cztcblxuICAgICAgICAvLyBjbGFtcCBvbiBtYXggc3VzcGVuc2lvbiB0cmF2ZWxcbiAgICAgICAgdmFyIG1pblN1c3BlbnNpb25MZW5ndGggPSB3aGVlbC5zdXNwZW5zaW9uUmVzdExlbmd0aCAtIHdoZWVsLm1heFN1c3BlbnNpb25UcmF2ZWw7XG4gICAgICAgIHZhciBtYXhTdXNwZW5zaW9uTGVuZ3RoID0gd2hlZWwuc3VzcGVuc2lvblJlc3RMZW5ndGggKyB3aGVlbC5tYXhTdXNwZW5zaW9uVHJhdmVsO1xuICAgICAgICBpZiAod2hlZWwuc3VzcGVuc2lvbkxlbmd0aCA8IG1pblN1c3BlbnNpb25MZW5ndGgpIHtcbiAgICAgICAgICAgIHdoZWVsLnN1c3BlbnNpb25MZW5ndGggPSBtaW5TdXNwZW5zaW9uTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3aGVlbC5zdXNwZW5zaW9uTGVuZ3RoID4gbWF4U3VzcGVuc2lvbkxlbmd0aCkge1xuICAgICAgICAgICAgd2hlZWwuc3VzcGVuc2lvbkxlbmd0aCA9IG1heFN1c3BlbnNpb25MZW5ndGg7XG4gICAgICAgICAgICB3aGVlbC5yYXljYXN0UmVzdWx0LnJlc2V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVub21pbmF0b3IgPSB3aGVlbC5yYXljYXN0UmVzdWx0LmhpdE5vcm1hbFdvcmxkLmRvdCh3aGVlbC5kaXJlY3Rpb25Xb3JsZCk7XG5cbiAgICAgICAgdmFyIGNoYXNzaXNfdmVsb2NpdHlfYXRfY29udGFjdFBvaW50ID0gbmV3IFZlYzMoKTtcbiAgICAgICAgY2hhc3Npc0JvZHkuZ2V0VmVsb2NpdHlBdFdvcmxkUG9pbnQod2hlZWwucmF5Y2FzdFJlc3VsdC5oaXRQb2ludFdvcmxkLCBjaGFzc2lzX3ZlbG9jaXR5X2F0X2NvbnRhY3RQb2ludCk7XG5cbiAgICAgICAgdmFyIHByb2pWZWwgPSB3aGVlbC5yYXljYXN0UmVzdWx0LmhpdE5vcm1hbFdvcmxkLmRvdCggY2hhc3Npc192ZWxvY2l0eV9hdF9jb250YWN0UG9pbnQgKTtcblxuICAgICAgICBpZiAoZGVub21pbmF0b3IgPj0gLTAuMSkge1xuICAgICAgICAgICAgd2hlZWwuc3VzcGVuc2lvblJlbGF0aXZlVmVsb2NpdHkgPSAwO1xuICAgICAgICAgICAgd2hlZWwuY2xpcHBlZEludkNvbnRhY3REb3RTdXNwZW5zaW9uID0gMSAvIDAuMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpbnYgPSAtMSAvIGRlbm9taW5hdG9yO1xuICAgICAgICAgICAgd2hlZWwuc3VzcGVuc2lvblJlbGF0aXZlVmVsb2NpdHkgPSBwcm9qVmVsICogaW52O1xuICAgICAgICAgICAgd2hlZWwuY2xpcHBlZEludkNvbnRhY3REb3RTdXNwZW5zaW9uID0gaW52O1xuICAgICAgICB9XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vcHV0IHdoZWVsIGluZm8gYXMgaW4gcmVzdCBwb3NpdGlvblxuICAgICAgICB3aGVlbC5zdXNwZW5zaW9uTGVuZ3RoID0gd2hlZWwuc3VzcGVuc2lvblJlc3RMZW5ndGggKyAwICogd2hlZWwubWF4U3VzcGVuc2lvblRyYXZlbDtcbiAgICAgICAgd2hlZWwuc3VzcGVuc2lvblJlbGF0aXZlVmVsb2NpdHkgPSAwLjA7XG4gICAgICAgIHdoZWVsLmRpcmVjdGlvbldvcmxkLnNjYWxlKC0xLCB3aGVlbC5yYXljYXN0UmVzdWx0LmhpdE5vcm1hbFdvcmxkKTtcbiAgICAgICAgd2hlZWwuY2xpcHBlZEludkNvbnRhY3REb3RTdXNwZW5zaW9uID0gMS4wO1xuICAgIH1cblxuICAgIHJldHVybiBkZXB0aDtcbn07XG5cblJheWNhc3RWZWhpY2xlLnByb3RvdHlwZS51cGRhdGVXaGVlbFRyYW5zZm9ybVdvcmxkID0gZnVuY3Rpb24od2hlZWwpe1xuICAgIHdoZWVsLmlzSW5Db250YWN0ID0gZmFsc2U7XG4gICAgdmFyIGNoYXNzaXNCb2R5ID0gdGhpcy5jaGFzc2lzQm9keTtcbiAgICBjaGFzc2lzQm9keS5wb2ludFRvV29ybGRGcmFtZSh3aGVlbC5jaGFzc2lzQ29ubmVjdGlvblBvaW50TG9jYWwsIHdoZWVsLmNoYXNzaXNDb25uZWN0aW9uUG9pbnRXb3JsZCk7XG4gICAgY2hhc3Npc0JvZHkudmVjdG9yVG9Xb3JsZEZyYW1lKHdoZWVsLmRpcmVjdGlvbkxvY2FsLCB3aGVlbC5kaXJlY3Rpb25Xb3JsZCk7XG4gICAgY2hhc3Npc0JvZHkudmVjdG9yVG9Xb3JsZEZyYW1lKHdoZWVsLmF4bGVMb2NhbCwgd2hlZWwuYXhsZVdvcmxkKTtcbn07XG5cblxuLyoqXG4gKiBVcGRhdGUgb25lIG9mIHRoZSB3aGVlbCB0cmFuc2Zvcm0uXG4gKiBOb3RlIHdoZW4gcmVuZGVyaW5nIHdoZWVsczogZHVyaW5nIGVhY2ggc3RlcCwgd2hlZWwgdHJhbnNmb3JtcyBhcmUgdXBkYXRlZCBCRUZPUkUgdGhlIGNoYXNzaXM7IGllLiB0aGVpciBwb3NpdGlvbiBiZWNvbWVzIGludmFsaWQgYWZ0ZXIgdGhlIHN0ZXAuIFRodXMgd2hlbiB5b3UgcmVuZGVyIHdoZWVscywgeW91IG11c3QgdXBkYXRlIHdoZWVsIHRyYW5zZm9ybXMgYmVmb3JlIHJlbmRlcmluZyB0aGVtLiBTZWUgcmF5Y2FzdFZlaGljbGUgZGVtbyBmb3IgYW4gZXhhbXBsZS5cbiAqIEBtZXRob2QgdXBkYXRlV2hlZWxUcmFuc2Zvcm1cbiAqIEBwYXJhbSB7aW50ZWdlcn0gd2hlZWxJbmRleCBUaGUgd2hlZWwgaW5kZXggdG8gdXBkYXRlLlxuICovXG5SYXljYXN0VmVoaWNsZS5wcm90b3R5cGUudXBkYXRlV2hlZWxUcmFuc2Zvcm0gPSBmdW5jdGlvbih3aGVlbEluZGV4KXtcbiAgICB2YXIgdXAgPSB0bXBWZWM0O1xuICAgIHZhciByaWdodCA9IHRtcFZlYzU7XG4gICAgdmFyIGZ3ZCA9IHRtcFZlYzY7XG5cbiAgICB2YXIgd2hlZWwgPSB0aGlzLndoZWVsSW5mb3Nbd2hlZWxJbmRleF07XG4gICAgdGhpcy51cGRhdGVXaGVlbFRyYW5zZm9ybVdvcmxkKHdoZWVsKTtcblxuICAgIHdoZWVsLmRpcmVjdGlvbkxvY2FsLnNjYWxlKC0xLCB1cCk7XG4gICAgcmlnaHQuY29weSh3aGVlbC5heGxlTG9jYWwpO1xuICAgIHVwLmNyb3NzKHJpZ2h0LCBmd2QpO1xuICAgIGZ3ZC5ub3JtYWxpemUoKTtcbiAgICByaWdodC5ub3JtYWxpemUoKTtcblxuICAgIC8vIFJvdGF0ZSBhcm91bmQgc3RlZXJpbmcgb3ZlciB0aGUgd2hlZWxBeGxlXG4gICAgdmFyIHN0ZWVyaW5nID0gd2hlZWwuc3RlZXJpbmc7XG4gICAgdmFyIHN0ZWVyaW5nT3JuID0gbmV3IFF1YXRlcm5pb24oKTtcbiAgICBzdGVlcmluZ09ybi5zZXRGcm9tQXhpc0FuZ2xlKHVwLCBzdGVlcmluZyk7XG5cbiAgICB2YXIgcm90YXRpbmdPcm4gPSBuZXcgUXVhdGVybmlvbigpO1xuICAgIHJvdGF0aW5nT3JuLnNldEZyb21BeGlzQW5nbGUocmlnaHQsIHdoZWVsLnJvdGF0aW9uKTtcblxuICAgIC8vIFdvcmxkIHJvdGF0aW9uIG9mIHRoZSB3aGVlbFxuICAgIHZhciBxID0gd2hlZWwud29ybGRUcmFuc2Zvcm0ucXVhdGVybmlvbjtcbiAgICB0aGlzLmNoYXNzaXNCb2R5LnF1YXRlcm5pb24ubXVsdChzdGVlcmluZ09ybiwgcSk7XG4gICAgcS5tdWx0KHJvdGF0aW5nT3JuLCBxKTtcblxuICAgIHEubm9ybWFsaXplKCk7XG5cbiAgICAvLyB3b3JsZCBwb3NpdGlvbiBvZiB0aGUgd2hlZWxcbiAgICB2YXIgcCA9IHdoZWVsLndvcmxkVHJhbnNmb3JtLnBvc2l0aW9uO1xuICAgIHAuY29weSh3aGVlbC5kaXJlY3Rpb25Xb3JsZCk7XG4gICAgcC5zY2FsZSh3aGVlbC5zdXNwZW5zaW9uTGVuZ3RoLCBwKTtcbiAgICBwLnZhZGQod2hlZWwuY2hhc3Npc0Nvbm5lY3Rpb25Qb2ludFdvcmxkLCBwKTtcbn07XG5cbnZhciBkaXJlY3Rpb25zID0gW1xuICAgIG5ldyBWZWMzKDEsIDAsIDApLFxuICAgIG5ldyBWZWMzKDAsIDEsIDApLFxuICAgIG5ldyBWZWMzKDAsIDAsIDEpXG5dO1xuXG4vKipcbiAqIEdldCB0aGUgd29ybGQgdHJhbnNmb3JtIG9mIG9uZSBvZiB0aGUgd2hlZWxzXG4gKiBAbWV0aG9kIGdldFdoZWVsVHJhbnNmb3JtV29ybGRcbiAqIEBwYXJhbSAge2ludGVnZXJ9IHdoZWVsSW5kZXhcbiAqIEByZXR1cm4ge1RyYW5zZm9ybX1cbiAqL1xuUmF5Y2FzdFZlaGljbGUucHJvdG90eXBlLmdldFdoZWVsVHJhbnNmb3JtV29ybGQgPSBmdW5jdGlvbih3aGVlbEluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMud2hlZWxJbmZvc1t3aGVlbEluZGV4XS53b3JsZFRyYW5zZm9ybTtcbn07XG5cblxudmFyIHVwZGF0ZUZyaWN0aW9uX3N1cmZOb3JtYWxXU19zY2FsZWRfcHJvaiA9IG5ldyBWZWMzKCk7XG52YXIgdXBkYXRlRnJpY3Rpb25fYXhsZSA9IFtdO1xudmFyIHVwZGF0ZUZyaWN0aW9uX2ZvcndhcmRXUyA9IFtdO1xudmFyIHNpZGVGcmljdGlvblN0aWZmbmVzczIgPSAxO1xuUmF5Y2FzdFZlaGljbGUucHJvdG90eXBlLnVwZGF0ZUZyaWN0aW9uID0gZnVuY3Rpb24odGltZVN0ZXApIHtcbiAgICB2YXIgc3VyZk5vcm1hbFdTX3NjYWxlZF9wcm9qID0gdXBkYXRlRnJpY3Rpb25fc3VyZk5vcm1hbFdTX3NjYWxlZF9wcm9qO1xuXG4gICAgLy9jYWxjdWxhdGUgdGhlIGltcHVsc2UsIHNvIHRoYXQgdGhlIHdoZWVscyBkb24ndCBtb3ZlIHNpZGV3YXJkc1xuICAgIHZhciB3aGVlbEluZm9zID0gdGhpcy53aGVlbEluZm9zO1xuICAgIHZhciBudW1XaGVlbHMgPSB3aGVlbEluZm9zLmxlbmd0aDtcbiAgICB2YXIgY2hhc3Npc0JvZHkgPSB0aGlzLmNoYXNzaXNCb2R5O1xuICAgIHZhciBmb3J3YXJkV1MgPSB1cGRhdGVGcmljdGlvbl9mb3J3YXJkV1M7XG4gICAgdmFyIGF4bGUgPSB1cGRhdGVGcmljdGlvbl9heGxlO1xuXG4gICAgdmFyIG51bVdoZWVsc09uR3JvdW5kID0gMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtV2hlZWxzOyBpKyspIHtcbiAgICAgICAgdmFyIHdoZWVsID0gd2hlZWxJbmZvc1tpXTtcblxuICAgICAgICB2YXIgZ3JvdW5kT2JqZWN0ID0gd2hlZWwucmF5Y2FzdFJlc3VsdC5ib2R5O1xuICAgICAgICBpZiAoZ3JvdW5kT2JqZWN0KXtcbiAgICAgICAgICAgIG51bVdoZWVsc09uR3JvdW5kKys7XG4gICAgICAgIH1cblxuICAgICAgICB3aGVlbC5zaWRlSW1wdWxzZSA9IDA7XG4gICAgICAgIHdoZWVsLmZvcndhcmRJbXB1bHNlID0gMDtcbiAgICAgICAgaWYoIWZvcndhcmRXU1tpXSl7XG4gICAgICAgICAgICBmb3J3YXJkV1NbaV0gPSBuZXcgVmVjMygpO1xuICAgICAgICB9XG4gICAgICAgIGlmKCFheGxlW2ldKXtcbiAgICAgICAgICAgIGF4bGVbaV0gPSBuZXcgVmVjMygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1XaGVlbHM7IGkrKyl7XG4gICAgICAgIHZhciB3aGVlbCA9IHdoZWVsSW5mb3NbaV07XG5cbiAgICAgICAgdmFyIGdyb3VuZE9iamVjdCA9IHdoZWVsLnJheWNhc3RSZXN1bHQuYm9keTtcblxuICAgICAgICBpZiAoZ3JvdW5kT2JqZWN0KSB7XG4gICAgICAgICAgICB2YXIgYXhsZWkgPSBheGxlW2ldO1xuICAgICAgICAgICAgdmFyIHdoZWVsVHJhbnMgPSB0aGlzLmdldFdoZWVsVHJhbnNmb3JtV29ybGQoaSk7XG5cbiAgICAgICAgICAgIC8vIEdldCB3b3JsZCBheGxlXG4gICAgICAgICAgICB3aGVlbFRyYW5zLnZlY3RvclRvV29ybGRGcmFtZShkaXJlY3Rpb25zW3RoaXMuaW5kZXhSaWdodEF4aXNdLCBheGxlaSk7XG5cbiAgICAgICAgICAgIHZhciBzdXJmTm9ybWFsV1MgPSB3aGVlbC5yYXljYXN0UmVzdWx0LmhpdE5vcm1hbFdvcmxkO1xuICAgICAgICAgICAgdmFyIHByb2ogPSBheGxlaS5kb3Qoc3VyZk5vcm1hbFdTKTtcbiAgICAgICAgICAgIHN1cmZOb3JtYWxXUy5zY2FsZShwcm9qLCBzdXJmTm9ybWFsV1Nfc2NhbGVkX3Byb2opO1xuICAgICAgICAgICAgYXhsZWkudnN1YihzdXJmTm9ybWFsV1Nfc2NhbGVkX3Byb2osIGF4bGVpKTtcbiAgICAgICAgICAgIGF4bGVpLm5vcm1hbGl6ZSgpO1xuXG4gICAgICAgICAgICBzdXJmTm9ybWFsV1MuY3Jvc3MoYXhsZWksIGZvcndhcmRXU1tpXSk7XG4gICAgICAgICAgICBmb3J3YXJkV1NbaV0ubm9ybWFsaXplKCk7XG5cbiAgICAgICAgICAgIHdoZWVsLnNpZGVJbXB1bHNlID0gcmVzb2x2ZVNpbmdsZUJpbGF0ZXJhbChcbiAgICAgICAgICAgICAgICBjaGFzc2lzQm9keSxcbiAgICAgICAgICAgICAgICB3aGVlbC5yYXljYXN0UmVzdWx0LmhpdFBvaW50V29ybGQsXG4gICAgICAgICAgICAgICAgZ3JvdW5kT2JqZWN0LFxuICAgICAgICAgICAgICAgIHdoZWVsLnJheWNhc3RSZXN1bHQuaGl0UG9pbnRXb3JsZCxcbiAgICAgICAgICAgICAgICBheGxlaVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgd2hlZWwuc2lkZUltcHVsc2UgKj0gc2lkZUZyaWN0aW9uU3RpZmZuZXNzMjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzaWRlRmFjdG9yID0gMTtcbiAgICB2YXIgZndkRmFjdG9yID0gMC41O1xuXG4gICAgdGhpcy5zbGlkaW5nID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1XaGVlbHM7IGkrKykge1xuICAgICAgICB2YXIgd2hlZWwgPSB3aGVlbEluZm9zW2ldO1xuICAgICAgICB2YXIgZ3JvdW5kT2JqZWN0ID0gd2hlZWwucmF5Y2FzdFJlc3VsdC5ib2R5O1xuXG4gICAgICAgIHZhciByb2xsaW5nRnJpY3Rpb24gPSAwO1xuXG4gICAgICAgIHdoZWVsLnNsaXBJbmZvID0gMTtcbiAgICAgICAgaWYgKGdyb3VuZE9iamVjdCkge1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRSb2xsaW5nRnJpY3Rpb25JbXB1bHNlID0gMDtcbiAgICAgICAgICAgIHZhciBtYXhJbXB1bHNlID0gd2hlZWwuYnJha2UgPyB3aGVlbC5icmFrZSA6IGRlZmF1bHRSb2xsaW5nRnJpY3Rpb25JbXB1bHNlO1xuXG4gICAgICAgICAgICAvLyBidFdoZWVsQ29udGFjdFBvaW50IGNvbnRhY3RQdChjaGFzc2lzQm9keSxncm91bmRPYmplY3Qsd2hlZWxJbmZyYXljYXN0SW5mby5oaXRQb2ludFdvcmxkLGZvcndhcmRXU1t3aGVlbF0sbWF4SW1wdWxzZSk7XG4gICAgICAgICAgICAvLyByb2xsaW5nRnJpY3Rpb24gPSBjYWxjUm9sbGluZ0ZyaWN0aW9uKGNvbnRhY3RQdCk7XG4gICAgICAgICAgICByb2xsaW5nRnJpY3Rpb24gPSBjYWxjUm9sbGluZ0ZyaWN0aW9uKGNoYXNzaXNCb2R5LCBncm91bmRPYmplY3QsIHdoZWVsLnJheWNhc3RSZXN1bHQuaGl0UG9pbnRXb3JsZCwgZm9yd2FyZFdTW2ldLCBtYXhJbXB1bHNlKTtcblxuICAgICAgICAgICAgcm9sbGluZ0ZyaWN0aW9uICs9IHdoZWVsLmVuZ2luZUZvcmNlICogdGltZVN0ZXA7XG5cbiAgICAgICAgICAgIC8vIHJvbGxpbmdGcmljdGlvbiA9IDA7XG4gICAgICAgICAgICB2YXIgZmFjdG9yID0gbWF4SW1wdWxzZSAvIHJvbGxpbmdGcmljdGlvbjtcbiAgICAgICAgICAgIHdoZWVsLnNsaXBJbmZvICo9IGZhY3RvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vc3dpdGNoIGJldHdlZW4gYWN0aXZlIHJvbGxpbmcgKHRocm90dGxlKSwgYnJha2luZyBhbmQgbm9uLWFjdGl2ZSByb2xsaW5nIGZyaWN0aW9uIChudGhyb3R0bGUvYnJlYWspXG5cbiAgICAgICAgd2hlZWwuZm9yd2FyZEltcHVsc2UgPSAwO1xuICAgICAgICB3aGVlbC5za2lkSW5mbyA9IDE7XG5cbiAgICAgICAgaWYgKGdyb3VuZE9iamVjdCkge1xuICAgICAgICAgICAgd2hlZWwuc2tpZEluZm8gPSAxO1xuXG4gICAgICAgICAgICB2YXIgbWF4aW1wID0gd2hlZWwuc3VzcGVuc2lvbkZvcmNlICogdGltZVN0ZXAgKiB3aGVlbC5mcmljdGlvblNsaXA7XG4gICAgICAgICAgICB2YXIgbWF4aW1wU2lkZSA9IG1heGltcDtcblxuICAgICAgICAgICAgdmFyIG1heGltcFNxdWFyZWQgPSBtYXhpbXAgKiBtYXhpbXBTaWRlO1xuXG4gICAgICAgICAgICB3aGVlbC5mb3J3YXJkSW1wdWxzZSA9IHJvbGxpbmdGcmljdGlvbjsvL3doZWVsSW5mby5lbmdpbmVGb3JjZSogdGltZVN0ZXA7XG5cbiAgICAgICAgICAgIHZhciB4ID0gd2hlZWwuZm9yd2FyZEltcHVsc2UgKiBmd2RGYWN0b3I7XG4gICAgICAgICAgICB2YXIgeSA9IHdoZWVsLnNpZGVJbXB1bHNlICogc2lkZUZhY3RvcjtcblxuICAgICAgICAgICAgdmFyIGltcHVsc2VTcXVhcmVkID0geCAqIHggKyB5ICogeTtcblxuICAgICAgICAgICAgd2hlZWwuc2xpZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGltcHVsc2VTcXVhcmVkID4gbWF4aW1wU3F1YXJlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2xpZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgd2hlZWwuc2xpZGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICB2YXIgZmFjdG9yID0gbWF4aW1wIC8gTWF0aC5zcXJ0KGltcHVsc2VTcXVhcmVkKTtcblxuICAgICAgICAgICAgICAgIHdoZWVsLnNraWRJbmZvICo9IGZhY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLnNsaWRpbmcpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1XaGVlbHM7IGkrKykge1xuICAgICAgICAgICAgdmFyIHdoZWVsID0gd2hlZWxJbmZvc1tpXTtcbiAgICAgICAgICAgIGlmICh3aGVlbC5zaWRlSW1wdWxzZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmICh3aGVlbC5za2lkSW5mbyA8IDEpe1xuICAgICAgICAgICAgICAgICAgICB3aGVlbC5mb3J3YXJkSW1wdWxzZSAqPSB3aGVlbC5za2lkSW5mbztcbiAgICAgICAgICAgICAgICAgICAgd2hlZWwuc2lkZUltcHVsc2UgKj0gd2hlZWwuc2tpZEluZm87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdGhlIGltcHVsc2VzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1XaGVlbHM7IGkrKykge1xuICAgICAgICB2YXIgd2hlZWwgPSB3aGVlbEluZm9zW2ldO1xuXG4gICAgICAgIHZhciByZWxfcG9zID0gbmV3IFZlYzMoKTtcbiAgICAgICAgLy93aGVlbC5yYXljYXN0UmVzdWx0LmhpdFBvaW50V29ybGQudnN1YihjaGFzc2lzQm9keS5wb3NpdGlvbiwgcmVsX3Bvcyk7XG4gICAgICAgIC8vIGNhbm5vbnMgYXBwbHlpbXB1bHNlIGlzIHVzaW5nIHdvcmxkIGNvb3JkIGZvciB0aGUgcG9zaXRpb25cbiAgICAgICAgcmVsX3Bvcy5jb3B5KHdoZWVsLnJheWNhc3RSZXN1bHQuaGl0UG9pbnRXb3JsZCk7XG5cbiAgICAgICAgaWYgKHdoZWVsLmZvcndhcmRJbXB1bHNlICE9PSAwKSB7XG4gICAgICAgICAgICB2YXIgaW1wdWxzZSA9IG5ldyBWZWMzKCk7XG4gICAgICAgICAgICBmb3J3YXJkV1NbaV0uc2NhbGUod2hlZWwuZm9yd2FyZEltcHVsc2UsIGltcHVsc2UpO1xuICAgICAgICAgICAgY2hhc3Npc0JvZHkuYXBwbHlJbXB1bHNlKGltcHVsc2UsIHJlbF9wb3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHdoZWVsLnNpZGVJbXB1bHNlICE9PSAwKXtcbiAgICAgICAgICAgIHZhciBncm91bmRPYmplY3QgPSB3aGVlbC5yYXljYXN0UmVzdWx0LmJvZHk7XG5cbiAgICAgICAgICAgIHZhciByZWxfcG9zMiA9IG5ldyBWZWMzKCk7XG4gICAgICAgICAgICAvL3doZWVsLnJheWNhc3RSZXN1bHQuaGl0UG9pbnRXb3JsZC52c3ViKGdyb3VuZE9iamVjdC5wb3NpdGlvbiwgcmVsX3BvczIpO1xuICAgICAgICAgICAgcmVsX3BvczIuY29weSh3aGVlbC5yYXljYXN0UmVzdWx0LmhpdFBvaW50V29ybGQpO1xuICAgICAgICAgICAgdmFyIHNpZGVJbXAgPSBuZXcgVmVjMygpO1xuICAgICAgICAgICAgYXhsZVtpXS5zY2FsZSh3aGVlbC5zaWRlSW1wdWxzZSwgc2lkZUltcCk7XG5cbiAgICAgICAgICAgIC8vIFNjYWxlIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiBpbiB0aGUgdXAgZGlyZWN0aW9uIHdpdGggcm9sbEluZmx1ZW5jZS5cbiAgICAgICAgICAgIC8vIElmIHJvbGxJbmZsdWVuY2UgaXMgMSwgdGhlIGltcHVsc2Ugd2lsbCBiZSBhcHBsaWVkIG9uIHRoZSBoaXRQb2ludCAoZWFzeSB0byByb2xsIG92ZXIpLCBpZiBpdCBpcyB6ZXJvIGl0IHdpbGwgYmUgYXBwbGllZCBpbiB0aGUgc2FtZSBwbGFuZSBhcyB0aGUgY2VudGVyIG9mIG1hc3MgKG5vdCBlYXN5IHRvIHJvbGwgb3ZlcikuXG4gICAgICAgICAgICBjaGFzc2lzQm9keS5wb2ludFRvTG9jYWxGcmFtZShyZWxfcG9zLCByZWxfcG9zKTtcbiAgICAgICAgICAgIHJlbF9wb3NbJ3h5eidbdGhpcy5pbmRleFVwQXhpc11dICo9IHdoZWVsLnJvbGxJbmZsdWVuY2U7XG4gICAgICAgICAgICBjaGFzc2lzQm9keS5wb2ludFRvV29ybGRGcmFtZShyZWxfcG9zLCByZWxfcG9zKTtcbiAgICAgICAgICAgIGNoYXNzaXNCb2R5LmFwcGx5SW1wdWxzZShzaWRlSW1wLCByZWxfcG9zKTtcblxuICAgICAgICAgICAgLy9hcHBseSBmcmljdGlvbiBpbXB1bHNlIG9uIHRoZSBncm91bmRcbiAgICAgICAgICAgIHNpZGVJbXAuc2NhbGUoLTEsIHNpZGVJbXApO1xuICAgICAgICAgICAgZ3JvdW5kT2JqZWN0LmFwcGx5SW1wdWxzZShzaWRlSW1wLCByZWxfcG9zMik7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgY2FsY1JvbGxpbmdGcmljdGlvbl92ZWwxID0gbmV3IFZlYzMoKTtcbnZhciBjYWxjUm9sbGluZ0ZyaWN0aW9uX3ZlbDIgPSBuZXcgVmVjMygpO1xudmFyIGNhbGNSb2xsaW5nRnJpY3Rpb25fdmVsID0gbmV3IFZlYzMoKTtcblxuZnVuY3Rpb24gY2FsY1JvbGxpbmdGcmljdGlvbihib2R5MCwgYm9keTEsIGZyaWN0aW9uUG9zV29ybGQsIGZyaWN0aW9uRGlyZWN0aW9uV29ybGQsIG1heEltcHVsc2UpIHtcbiAgICB2YXIgajEgPSAwO1xuICAgIHZhciBjb250YWN0UG9zV29ybGQgPSBmcmljdGlvblBvc1dvcmxkO1xuXG4gICAgLy8gdmFyIHJlbF9wb3MxID0gbmV3IFZlYzMoKTtcbiAgICAvLyB2YXIgcmVsX3BvczIgPSBuZXcgVmVjMygpO1xuICAgIHZhciB2ZWwxID0gY2FsY1JvbGxpbmdGcmljdGlvbl92ZWwxO1xuICAgIHZhciB2ZWwyID0gY2FsY1JvbGxpbmdGcmljdGlvbl92ZWwyO1xuICAgIHZhciB2ZWwgPSBjYWxjUm9sbGluZ0ZyaWN0aW9uX3ZlbDtcbiAgICAvLyBjb250YWN0UG9zV29ybGQudnN1Yihib2R5MC5wb3NpdGlvbiwgcmVsX3BvczEpO1xuICAgIC8vIGNvbnRhY3RQb3NXb3JsZC52c3ViKGJvZHkxLnBvc2l0aW9uLCByZWxfcG9zMik7XG5cbiAgICBib2R5MC5nZXRWZWxvY2l0eUF0V29ybGRQb2ludChjb250YWN0UG9zV29ybGQsIHZlbDEpO1xuICAgIGJvZHkxLmdldFZlbG9jaXR5QXRXb3JsZFBvaW50KGNvbnRhY3RQb3NXb3JsZCwgdmVsMik7XG4gICAgdmVsMS52c3ViKHZlbDIsIHZlbCk7XG5cbiAgICB2YXIgdnJlbCA9IGZyaWN0aW9uRGlyZWN0aW9uV29ybGQuZG90KHZlbCk7XG5cbiAgICB2YXIgZGVub20wID0gY29tcHV0ZUltcHVsc2VEZW5vbWluYXRvcihib2R5MCwgZnJpY3Rpb25Qb3NXb3JsZCwgZnJpY3Rpb25EaXJlY3Rpb25Xb3JsZCk7XG4gICAgdmFyIGRlbm9tMSA9IGNvbXB1dGVJbXB1bHNlRGVub21pbmF0b3IoYm9keTEsIGZyaWN0aW9uUG9zV29ybGQsIGZyaWN0aW9uRGlyZWN0aW9uV29ybGQpO1xuICAgIHZhciByZWxheGF0aW9uID0gMTtcbiAgICB2YXIgamFjRGlhZ0FCSW52ID0gcmVsYXhhdGlvbiAvIChkZW5vbTAgKyBkZW5vbTEpO1xuXG4gICAgLy8gY2FsY3VsYXRlIGogdGhhdCBtb3ZlcyB1cyB0byB6ZXJvIHJlbGF0aXZlIHZlbG9jaXR5XG4gICAgajEgPSAtdnJlbCAqIGphY0RpYWdBQkludjtcblxuICAgIGlmIChtYXhJbXB1bHNlIDwgajEpIHtcbiAgICAgICAgajEgPSBtYXhJbXB1bHNlO1xuICAgIH1cbiAgICBpZiAoajEgPCAtbWF4SW1wdWxzZSkge1xuICAgICAgICBqMSA9IC1tYXhJbXB1bHNlO1xuICAgIH1cblxuICAgIHJldHVybiBqMTtcbn1cblxudmFyIGNvbXB1dGVJbXB1bHNlRGVub21pbmF0b3JfcjAgPSBuZXcgVmVjMygpO1xudmFyIGNvbXB1dGVJbXB1bHNlRGVub21pbmF0b3JfYzAgPSBuZXcgVmVjMygpO1xudmFyIGNvbXB1dGVJbXB1bHNlRGVub21pbmF0b3JfdmVjID0gbmV3IFZlYzMoKTtcbnZhciBjb21wdXRlSW1wdWxzZURlbm9taW5hdG9yX20gPSBuZXcgVmVjMygpO1xuZnVuY3Rpb24gY29tcHV0ZUltcHVsc2VEZW5vbWluYXRvcihib2R5LCBwb3MsIG5vcm1hbCkge1xuICAgIHZhciByMCA9IGNvbXB1dGVJbXB1bHNlRGVub21pbmF0b3JfcjA7XG4gICAgdmFyIGMwID0gY29tcHV0ZUltcHVsc2VEZW5vbWluYXRvcl9jMDtcbiAgICB2YXIgdmVjID0gY29tcHV0ZUltcHVsc2VEZW5vbWluYXRvcl92ZWM7XG4gICAgdmFyIG0gPSBjb21wdXRlSW1wdWxzZURlbm9taW5hdG9yX207XG5cbiAgICBwb3MudnN1Yihib2R5LnBvc2l0aW9uLCByMCk7XG4gICAgcjAuY3Jvc3Mobm9ybWFsLCBjMCk7XG4gICAgYm9keS5pbnZJbmVydGlhV29ybGQudm11bHQoYzAsIG0pO1xuICAgIG0uY3Jvc3MocjAsIHZlYyk7XG5cbiAgICByZXR1cm4gYm9keS5pbnZNYXNzICsgbm9ybWFsLmRvdCh2ZWMpO1xufVxuXG5cbnZhciByZXNvbHZlU2luZ2xlQmlsYXRlcmFsX3ZlbDEgPSBuZXcgVmVjMygpO1xudmFyIHJlc29sdmVTaW5nbGVCaWxhdGVyYWxfdmVsMiA9IG5ldyBWZWMzKCk7XG52YXIgcmVzb2x2ZVNpbmdsZUJpbGF0ZXJhbF92ZWwgPSBuZXcgVmVjMygpO1xuXG4vL2JpbGF0ZXJhbCBjb25zdHJhaW50IGJldHdlZW4gdHdvIGR5bmFtaWMgb2JqZWN0c1xuZnVuY3Rpb24gcmVzb2x2ZVNpbmdsZUJpbGF0ZXJhbChib2R5MSwgcG9zMSwgYm9keTIsIHBvczIsIG5vcm1hbCwgaW1wdWxzZSl7XG4gICAgdmFyIG5vcm1hbExlblNxciA9IG5vcm1hbC5ub3JtMigpO1xuICAgIGlmIChub3JtYWxMZW5TcXIgPiAxLjEpe1xuICAgICAgICByZXR1cm4gMDsgLy8gbm8gaW1wdWxzZVxuICAgIH1cbiAgICAvLyB2YXIgcmVsX3BvczEgPSBuZXcgVmVjMygpO1xuICAgIC8vIHZhciByZWxfcG9zMiA9IG5ldyBWZWMzKCk7XG4gICAgLy8gcG9zMS52c3ViKGJvZHkxLnBvc2l0aW9uLCByZWxfcG9zMSk7XG4gICAgLy8gcG9zMi52c3ViKGJvZHkyLnBvc2l0aW9uLCByZWxfcG9zMik7XG5cbiAgICB2YXIgdmVsMSA9IHJlc29sdmVTaW5nbGVCaWxhdGVyYWxfdmVsMTtcbiAgICB2YXIgdmVsMiA9IHJlc29sdmVTaW5nbGVCaWxhdGVyYWxfdmVsMjtcbiAgICB2YXIgdmVsID0gcmVzb2x2ZVNpbmdsZUJpbGF0ZXJhbF92ZWw7XG4gICAgYm9keTEuZ2V0VmVsb2NpdHlBdFdvcmxkUG9pbnQocG9zMSwgdmVsMSk7XG4gICAgYm9keTIuZ2V0VmVsb2NpdHlBdFdvcmxkUG9pbnQocG9zMiwgdmVsMik7XG5cbiAgICB2ZWwxLnZzdWIodmVsMiwgdmVsKTtcblxuICAgIHZhciByZWxfdmVsID0gbm9ybWFsLmRvdCh2ZWwpO1xuXG4gICAgdmFyIGNvbnRhY3REYW1waW5nID0gMC4yO1xuICAgIHZhciBtYXNzVGVybSA9IDEgLyAoYm9keTEuaW52TWFzcyArIGJvZHkyLmludk1hc3MpO1xuICAgIHZhciBpbXB1bHNlID0gLSBjb250YWN0RGFtcGluZyAqIHJlbF92ZWwgKiBtYXNzVGVybTtcblxuICAgIHJldHVybiBpbXB1bHNlO1xufVxufSx7XCIuLi9jb2xsaXNpb24vUmF5XCI6OSxcIi4uL2NvbGxpc2lvbi9SYXljYXN0UmVzdWx0XCI6MTAsXCIuLi9tYXRoL1F1YXRlcm5pb25cIjoyOCxcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi4vb2JqZWN0cy9XaGVlbEluZm9cIjozNixcIi4vQm9keVwiOjMxfV0sMzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIEJvZHkgPSBfZGVyZXFfKCcuL0JvZHknKTtcbnZhciBTcGhlcmUgPSBfZGVyZXFfKCcuLi9zaGFwZXMvU3BoZXJlJyk7XG52YXIgQm94ID0gX2RlcmVxXygnLi4vc2hhcGVzL0JveCcpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBIaW5nZUNvbnN0cmFpbnQgPSBfZGVyZXFfKCcuLi9jb25zdHJhaW50cy9IaW5nZUNvbnN0cmFpbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSaWdpZFZlaGljbGU7XG5cbi8qKlxuICogU2ltcGxlIHZlaGljbGUgaGVscGVyIGNsYXNzIHdpdGggc3BoZXJpY2FsIHJpZ2lkIGJvZHkgd2hlZWxzLlxuICogQGNsYXNzIFJpZ2lkVmVoaWNsZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0JvZHl9IFtvcHRpb25zLmNoYXNzaXNCb2R5XVxuICovXG5mdW5jdGlvbiBSaWdpZFZlaGljbGUob3B0aW9ucyl7XG4gICAgdGhpcy53aGVlbEJvZGllcyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IGNvb3JkaW5hdGVTeXN0ZW1cbiAgICAgKiBAdHlwZSB7VmVjM31cbiAgICAgKi9cbiAgICB0aGlzLmNvb3JkaW5hdGVTeXN0ZW0gPSB0eXBlb2Yob3B0aW9ucy5jb29yZGluYXRlU3lzdGVtKT09PSd1bmRlZmluZWQnID8gbmV3IFZlYzMoMSwgMiwgMykgOiBvcHRpb25zLmNvb3JkaW5hdGVTeXN0ZW0uY2xvbmUoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7Qm9keX0gY2hhc3Npc0JvZHlcbiAgICAgKi9cbiAgICB0aGlzLmNoYXNzaXNCb2R5ID0gb3B0aW9ucy5jaGFzc2lzQm9keTtcblxuICAgIGlmKCF0aGlzLmNoYXNzaXNCb2R5KXtcbiAgICAgICAgLy8gTm8gY2hhc3NpcyBib2R5IGdpdmVuLiBDcmVhdGUgaXQhXG4gICAgICAgIHZhciBjaGFzc2lzU2hhcGUgPSBuZXcgQm94KG5ldyBWZWMzKDUsIDIsIDAuNSkpO1xuICAgICAgICB0aGlzLmNoYXNzaXNCb2R5ID0gbmV3IEJvZHkoMSwgY2hhc3Npc1NoYXBlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgY29uc3RyYWludHNcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5jb25zdHJhaW50cyA9IFtdO1xuXG4gICAgdGhpcy53aGVlbEF4ZXMgPSBbXTtcbiAgICB0aGlzLndoZWVsRm9yY2VzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgd2hlZWxcbiAqIEBtZXRob2QgYWRkV2hlZWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmlzRnJvbnRXaGVlbF1cbiAqIEBwYXJhbSB7VmVjM30gW29wdGlvbnMucG9zaXRpb25dIFBvc2l0aW9uIG9mIHRoZSB3aGVlbCwgbG9jYWxseSBpbiB0aGUgY2hhc3NpcyBib2R5LlxuICogQHBhcmFtIHtWZWMzfSBbb3B0aW9ucy5kaXJlY3Rpb25dIFNsaWRlIGRpcmVjdGlvbiBvZiB0aGUgd2hlZWwgYWxvbmcgdGhlIHN1c3BlbnNpb24uXG4gKiBAcGFyYW0ge1ZlYzN9IFtvcHRpb25zLmF4aXNdIEF4aXMgb2Ygcm90YXRpb24gb2YgdGhlIHdoZWVsLCBsb2NhbGx5IGRlZmluZWQgaW4gdGhlIGNoYXNzaXMuXG4gKiBAcGFyYW0ge0JvZHl9IFtvcHRpb25zLmJvZHldIFRoZSB3aGVlbCBib2R5LlxuICovXG5SaWdpZFZlaGljbGUucHJvdG90eXBlLmFkZFdoZWVsID0gZnVuY3Rpb24ob3B0aW9ucyl7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIHdoZWVsQm9keSA9IG9wdGlvbnMuYm9keTtcbiAgICBpZighd2hlZWxCb2R5KXtcbiAgICAgICAgd2hlZWxCb2R5ID0gIG5ldyBCb2R5KDEsIG5ldyBTcGhlcmUoMS4yKSk7XG4gICAgfVxuICAgIHRoaXMud2hlZWxCb2RpZXMucHVzaCh3aGVlbEJvZHkpO1xuICAgIHRoaXMud2hlZWxGb3JjZXMucHVzaCgwKTtcblxuICAgIC8vIFBvc2l0aW9uIGNvbnN0cmFpbiB3aGVlbHNcbiAgICB2YXIgemVybyA9IG5ldyBWZWMzKCk7XG4gICAgdmFyIHBvc2l0aW9uID0gdHlwZW9mKG9wdGlvbnMucG9zaXRpb24pICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMucG9zaXRpb24uY2xvbmUoKSA6IG5ldyBWZWMzKCk7XG5cbiAgICAvLyBTZXQgcG9zaXRpb24gbG9jYWxseSB0byB0aGUgY2hhc3Npc1xuICAgIHZhciB3b3JsZFBvc2l0aW9uID0gbmV3IFZlYzMoKTtcbiAgICB0aGlzLmNoYXNzaXNCb2R5LnBvaW50VG9Xb3JsZEZyYW1lKHBvc2l0aW9uLCB3b3JsZFBvc2l0aW9uKTtcbiAgICB3aGVlbEJvZHkucG9zaXRpb24uc2V0KHdvcmxkUG9zaXRpb24ueCwgd29ybGRQb3NpdGlvbi55LCB3b3JsZFBvc2l0aW9uLnopO1xuXG4gICAgLy8gQ29uc3RyYWluIHdoZWVsXG4gICAgdmFyIGF4aXMgPSB0eXBlb2Yob3B0aW9ucy5heGlzKSAhPT0gJ3VuZGVmaW5lZCcgPyBvcHRpb25zLmF4aXMuY2xvbmUoKSA6IG5ldyBWZWMzKDAsIDEsIDApO1xuICAgIHRoaXMud2hlZWxBeGVzLnB1c2goYXhpcyk7XG5cbiAgICB2YXIgaGluZ2VDb25zdHJhaW50ID0gbmV3IEhpbmdlQ29uc3RyYWludCh0aGlzLmNoYXNzaXNCb2R5LCB3aGVlbEJvZHksIHtcbiAgICAgICAgcGl2b3RBOiBwb3NpdGlvbixcbiAgICAgICAgYXhpc0E6IGF4aXMsXG4gICAgICAgIHBpdm90QjogVmVjMy5aRVJPLFxuICAgICAgICBheGlzQjogYXhpcyxcbiAgICAgICAgY29sbGlkZUNvbm5lY3RlZDogZmFsc2VcbiAgICB9KTtcbiAgICB0aGlzLmNvbnN0cmFpbnRzLnB1c2goaGluZ2VDb25zdHJhaW50KTtcblxuICAgIHJldHVybiB0aGlzLndoZWVsQm9kaWVzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc3RlZXJpbmcgdmFsdWUgb2YgYSB3aGVlbC5cbiAqIEBtZXRob2Qgc2V0U3RlZXJpbmdWYWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHdoZWVsSW5kZXhcbiAqIEB0b2RvIGNoZWNrIGNvb3JkaW5hdGVTeXN0ZW1cbiAqL1xuUmlnaWRWZWhpY2xlLnByb3RvdHlwZS5zZXRTdGVlcmluZ1ZhbHVlID0gZnVuY3Rpb24odmFsdWUsIHdoZWVsSW5kZXgpe1xuICAgIC8vIFNldCBhbmdsZSBvZiB0aGUgaGluZ2UgYXhpc1xuICAgIHZhciBheGlzID0gdGhpcy53aGVlbEF4ZXNbd2hlZWxJbmRleF07XG5cbiAgICB2YXIgYyA9IE1hdGguY29zKHZhbHVlKSxcbiAgICAgICAgcyA9IE1hdGguc2luKHZhbHVlKSxcbiAgICAgICAgeCA9IGF4aXMueCxcbiAgICAgICAgeSA9IGF4aXMueTtcbiAgICB0aGlzLmNvbnN0cmFpbnRzW3doZWVsSW5kZXhdLmF4aXNBLnNldChcbiAgICAgICAgYyp4IC1zKnksXG4gICAgICAgIHMqeCArYyp5LFxuICAgICAgICAwXG4gICAgKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSB0YXJnZXQgcm90YXRpb25hbCBzcGVlZCBvZiB0aGUgaGluZ2UgY29uc3RyYWludC5cbiAqIEBtZXRob2Qgc2V0TW90b3JTcGVlZFxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHdoZWVsSW5kZXhcbiAqL1xuUmlnaWRWZWhpY2xlLnByb3RvdHlwZS5zZXRNb3RvclNwZWVkID0gZnVuY3Rpb24odmFsdWUsIHdoZWVsSW5kZXgpe1xuICAgIHZhciBoaW5nZUNvbnN0cmFpbnQgPSB0aGlzLmNvbnN0cmFpbnRzW3doZWVsSW5kZXhdO1xuICAgIGhpbmdlQ29uc3RyYWludC5lbmFibGVNb3RvcigpO1xuICAgIGhpbmdlQ29uc3RyYWludC5tb3RvclRhcmdldFZlbG9jaXR5ID0gdmFsdWU7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgdGFyZ2V0IHJvdGF0aW9uYWwgc3BlZWQgb2YgdGhlIGhpbmdlIGNvbnN0cmFpbnQuXG4gKiBAbWV0aG9kIGRpc2FibGVNb3RvclxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHdoZWVsSW5kZXhcbiAqL1xuUmlnaWRWZWhpY2xlLnByb3RvdHlwZS5kaXNhYmxlTW90b3IgPSBmdW5jdGlvbih3aGVlbEluZGV4KXtcbiAgICB2YXIgaGluZ2VDb25zdHJhaW50ID0gdGhpcy5jb25zdHJhaW50c1t3aGVlbEluZGV4XTtcbiAgICBoaW5nZUNvbnN0cmFpbnQuZGlzYWJsZU1vdG9yKCk7XG59O1xuXG52YXIgdG9ycXVlID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBTZXQgdGhlIHdoZWVsIGZvcmNlIHRvIGFwcGx5IG9uIG9uZSBvZiB0aGUgd2hlZWxzIGVhY2ggdGltZSBzdGVwXG4gKiBAbWV0aG9kIHNldFdoZWVsRm9yY2VcbiAqIEBwYXJhbSAge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSAge2ludGVnZXJ9IHdoZWVsSW5kZXhcbiAqL1xuUmlnaWRWZWhpY2xlLnByb3RvdHlwZS5zZXRXaGVlbEZvcmNlID0gZnVuY3Rpb24odmFsdWUsIHdoZWVsSW5kZXgpe1xuICAgIHRoaXMud2hlZWxGb3JjZXNbd2hlZWxJbmRleF0gPSB2YWx1ZTtcbn07XG5cbi8qKlxuICogQXBwbHkgYSB0b3JxdWUgb24gb25lIG9mIHRoZSB3aGVlbHMuXG4gKiBAbWV0aG9kIGFwcGx5V2hlZWxGb3JjZVxuICogQHBhcmFtICB7bnVtYmVyfSB2YWx1ZVxuICogQHBhcmFtICB7aW50ZWdlcn0gd2hlZWxJbmRleFxuICovXG5SaWdpZFZlaGljbGUucHJvdG90eXBlLmFwcGx5V2hlZWxGb3JjZSA9IGZ1bmN0aW9uKHZhbHVlLCB3aGVlbEluZGV4KXtcbiAgICB2YXIgYXhpcyA9IHRoaXMud2hlZWxBeGVzW3doZWVsSW5kZXhdO1xuICAgIHZhciB3aGVlbEJvZHkgPSB0aGlzLndoZWVsQm9kaWVzW3doZWVsSW5kZXhdO1xuICAgIHZhciBib2R5VG9ycXVlID0gd2hlZWxCb2R5LnRvcnF1ZTtcblxuICAgIGF4aXMuc2NhbGUodmFsdWUsIHRvcnF1ZSk7XG4gICAgd2hlZWxCb2R5LnZlY3RvclRvV29ybGRGcmFtZSh0b3JxdWUsIHRvcnF1ZSk7XG4gICAgYm9keVRvcnF1ZS52YWRkKHRvcnF1ZSwgYm9keVRvcnF1ZSk7XG59O1xuXG4vKipcbiAqIEFkZCB0aGUgdmVoaWNsZSBpbmNsdWRpbmcgaXRzIGNvbnN0cmFpbnRzIHRvIHRoZSB3b3JsZC5cbiAqIEBtZXRob2QgYWRkVG9Xb3JsZFxuICogQHBhcmFtIHtXb3JsZH0gd29ybGRcbiAqL1xuUmlnaWRWZWhpY2xlLnByb3RvdHlwZS5hZGRUb1dvcmxkID0gZnVuY3Rpb24od29ybGQpe1xuICAgIHZhciBjb25zdHJhaW50cyA9IHRoaXMuY29uc3RyYWludHM7XG4gICAgdmFyIGJvZGllcyA9IHRoaXMud2hlZWxCb2RpZXMuY29uY2F0KFt0aGlzLmNoYXNzaXNCb2R5XSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB3b3JsZC5hZGQoYm9kaWVzW2ldKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHdvcmxkLmFkZENvbnN0cmFpbnQoY29uc3RyYWludHNbaV0pO1xuICAgIH1cblxuICAgIHdvcmxkLmFkZEV2ZW50TGlzdGVuZXIoJ3ByZVN0ZXAnLCB0aGlzLl91cGRhdGUuYmluZCh0aGlzKSk7XG59O1xuXG5SaWdpZFZlaGljbGUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbigpe1xuICAgIHZhciB3aGVlbEZvcmNlcyA9IHRoaXMud2hlZWxGb3JjZXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aGVlbEZvcmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLmFwcGx5V2hlZWxGb3JjZSh3aGVlbEZvcmNlc1tpXSwgaSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgdGhlIHZlaGljbGUgaW5jbHVkaW5nIGl0cyBjb25zdHJhaW50cyBmcm9tIHRoZSB3b3JsZC5cbiAqIEBtZXRob2QgcmVtb3ZlRnJvbVdvcmxkXG4gKiBAcGFyYW0ge1dvcmxkfSB3b3JsZFxuICovXG5SaWdpZFZlaGljbGUucHJvdG90eXBlLnJlbW92ZUZyb21Xb3JsZCA9IGZ1bmN0aW9uKHdvcmxkKXtcbiAgICB2YXIgY29uc3RyYWludHMgPSB0aGlzLmNvbnN0cmFpbnRzO1xuICAgIHZhciBib2RpZXMgPSB0aGlzLndoZWVsQm9kaWVzLmNvbmNhdChbdGhpcy5jaGFzc2lzQm9keV0pO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgd29ybGQucmVtb3ZlKGJvZGllc1tpXSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb25zdHJhaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB3b3JsZC5yZW1vdmVDb25zdHJhaW50KGNvbnN0cmFpbnRzW2ldKTtcbiAgICB9XG59O1xuXG52YXIgd29ybGRBeGlzID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBHZXQgY3VycmVudCByb3RhdGlvbmFsIHZlbG9jaXR5IG9mIGEgd2hlZWxcbiAqIEBtZXRob2QgZ2V0V2hlZWxTcGVlZFxuICogQHBhcmFtIHtpbnRlZ2VyfSB3aGVlbEluZGV4XG4gKi9cblJpZ2lkVmVoaWNsZS5wcm90b3R5cGUuZ2V0V2hlZWxTcGVlZCA9IGZ1bmN0aW9uKHdoZWVsSW5kZXgpe1xuICAgIHZhciBheGlzID0gdGhpcy53aGVlbEF4ZXNbd2hlZWxJbmRleF07XG4gICAgdmFyIHdoZWVsQm9keSA9IHRoaXMud2hlZWxCb2RpZXNbd2hlZWxJbmRleF07XG4gICAgdmFyIHcgPSB3aGVlbEJvZHkuYW5ndWxhclZlbG9jaXR5O1xuICAgIHRoaXMuY2hhc3Npc0JvZHkudmVjdG9yVG9Xb3JsZEZyYW1lKGF4aXMsIHdvcmxkQXhpcyk7XG4gICAgcmV0dXJuIHcuZG90KHdvcmxkQXhpcyk7XG59O1xuXG59LHtcIi4uL2NvbnN0cmFpbnRzL0hpbmdlQ29uc3RyYWludFwiOjE1LFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuLi9zaGFwZXMvQm94XCI6MzcsXCIuLi9zaGFwZXMvU3BoZXJlXCI6NDQsXCIuL0JvZHlcIjozMX1dLDM0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gU1BIU3lzdGVtO1xuXG52YXIgU2hhcGUgPSBfZGVyZXFfKCcuLi9zaGFwZXMvU2hhcGUnKTtcbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG52YXIgUXVhdGVybmlvbiA9IF9kZXJlcV8oJy4uL21hdGgvUXVhdGVybmlvbicpO1xudmFyIFBhcnRpY2xlID0gX2RlcmVxXygnLi4vc2hhcGVzL1BhcnRpY2xlJyk7XG52YXIgQm9keSA9IF9kZXJlcV8oJy4uL29iamVjdHMvQm9keScpO1xudmFyIE1hdGVyaWFsID0gX2RlcmVxXygnLi4vbWF0ZXJpYWwvTWF0ZXJpYWwnKTtcblxuLyoqXG4gKiBTbW9vdGhlZC1wYXJ0aWNsZSBoeWRyb2R5bmFtaWNzIHN5c3RlbVxuICogQGNsYXNzIFNQSFN5c3RlbVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFNQSFN5c3RlbSgpe1xuICAgIHRoaXMucGFydGljbGVzID0gW107XG5cdFxuICAgIC8qKlxuICAgICAqIERlbnNpdHkgb2YgdGhlIHN5c3RlbSAoa2cvbTMpLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkZW5zaXR5XG4gICAgICovXG4gICAgdGhpcy5kZW5zaXR5ID0gMTtcblx0XG4gICAgLyoqXG4gICAgICogRGlzdGFuY2UgYmVsb3cgd2hpY2ggdHdvIHBhcnRpY2xlcyBhcmUgY29uc2lkZXJlZCB0byBiZSBuZWlnaGJvcnMuXG4gICAgICogSXQgc2hvdWxkIGJlIGFkanVzdGVkIHNvIHRoZXJlIGFyZSBhYm91dCAxNS0yMCBuZWlnaGJvciBwYXJ0aWNsZXMgd2l0aGluIHRoaXMgcmFkaXVzLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzbW9vdGhpbmdSYWRpdXNcbiAgICAgKi9cbiAgICB0aGlzLnNtb290aGluZ1JhZGl1cyA9IDE7XG4gICAgdGhpcy5zcGVlZE9mU291bmQgPSAxO1xuXHRcbiAgICAvKipcbiAgICAgKiBWaXNjb3NpdHkgb2YgdGhlIHN5c3RlbS5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gdmlzY29zaXR5XG4gICAgICovXG4gICAgdGhpcy52aXNjb3NpdHkgPSAwLjAxO1xuICAgIHRoaXMuZXBzID0gMC4wMDAwMDE7XG5cbiAgICAvLyBTdHVmZiBDb21wdXRlZCBwZXIgcGFydGljbGVcbiAgICB0aGlzLnByZXNzdXJlcyA9IFtdO1xuICAgIHRoaXMuZGVuc2l0aWVzID0gW107XG4gICAgdGhpcy5uZWlnaGJvcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBwYXJ0aWNsZSB0byB0aGUgc3lzdGVtLlxuICogQG1ldGhvZCBhZGRcbiAqIEBwYXJhbSB7Qm9keX0gcGFydGljbGVcbiAqL1xuU1BIU3lzdGVtLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihwYXJ0aWNsZSl7XG4gICAgdGhpcy5wYXJ0aWNsZXMucHVzaChwYXJ0aWNsZSk7XG4gICAgaWYodGhpcy5uZWlnaGJvcnMubGVuZ3RoIDwgdGhpcy5wYXJ0aWNsZXMubGVuZ3RoKXtcbiAgICAgICAgdGhpcy5uZWlnaGJvcnMucHVzaChbXSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgYSBwYXJ0aWNsZSBmcm9tIHRoZSBzeXN0ZW0uXG4gKiBAbWV0aG9kIHJlbW92ZVxuICogQHBhcmFtIHtCb2R5fSBwYXJ0aWNsZVxuICovXG5TUEhTeXN0ZW0ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKHBhcnRpY2xlKXtcbiAgICB2YXIgaWR4ID0gdGhpcy5wYXJ0aWNsZXMuaW5kZXhPZihwYXJ0aWNsZSk7XG4gICAgaWYoaWR4ICE9PSAtMSl7XG4gICAgICAgIHRoaXMucGFydGljbGVzLnNwbGljZShpZHgsMSk7XG4gICAgICAgIGlmKHRoaXMubmVpZ2hib3JzLmxlbmd0aCA+IHRoaXMucGFydGljbGVzLmxlbmd0aCl7XG4gICAgICAgICAgICB0aGlzLm5laWdoYm9ycy5wb3AoKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogR2V0IG5laWdoYm9ycyB3aXRoaW4gc21vb3RoaW5nIHZvbHVtZSwgc2F2ZSBpbiB0aGUgYXJyYXkgbmVpZ2hib3JzXG4gKiBAbWV0aG9kIGdldE5laWdoYm9yc1xuICogQHBhcmFtIHtCb2R5fSBwYXJ0aWNsZVxuICogQHBhcmFtIHtBcnJheX0gbmVpZ2hib3JzXG4gKi9cbnZhciBTUEhTeXN0ZW1fZ2V0TmVpZ2hib3JzX2Rpc3QgPSBuZXcgVmVjMygpO1xuU1BIU3lzdGVtLnByb3RvdHlwZS5nZXROZWlnaGJvcnMgPSBmdW5jdGlvbihwYXJ0aWNsZSxuZWlnaGJvcnMpe1xuICAgIHZhciBOID0gdGhpcy5wYXJ0aWNsZXMubGVuZ3RoLFxuICAgICAgICBpZCA9IHBhcnRpY2xlLmlkLFxuICAgICAgICBSMiA9IHRoaXMuc21vb3RoaW5nUmFkaXVzICogdGhpcy5zbW9vdGhpbmdSYWRpdXMsXG4gICAgICAgIGRpc3QgPSBTUEhTeXN0ZW1fZ2V0TmVpZ2hib3JzX2Rpc3Q7XG4gICAgZm9yKHZhciBpPTA7IGkhPT1OOyBpKyspe1xuICAgICAgICB2YXIgcCA9IHRoaXMucGFydGljbGVzW2ldO1xuICAgICAgICBwLnBvc2l0aW9uLnZzdWIocGFydGljbGUucG9zaXRpb24sZGlzdCk7XG4gICAgICAgIGlmKGlkIT09cC5pZCAmJiBkaXN0Lm5vcm0yKCkgPCBSMil7XG4gICAgICAgICAgICBuZWlnaGJvcnMucHVzaChwKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIFRlbXAgdmVjdG9ycyBmb3IgY2FsY3VsYXRpb25cbnZhciBTUEhTeXN0ZW1fdXBkYXRlX2Rpc3QgPSBuZXcgVmVjMygpLFxuICAgIFNQSFN5c3RlbV91cGRhdGVfYV9wcmVzc3VyZSA9IG5ldyBWZWMzKCksXG4gICAgU1BIU3lzdGVtX3VwZGF0ZV9hX3Zpc2MgPSBuZXcgVmVjMygpLFxuICAgIFNQSFN5c3RlbV91cGRhdGVfZ3JhZFcgPSBuZXcgVmVjMygpLFxuICAgIFNQSFN5c3RlbV91cGRhdGVfcl92ZWMgPSBuZXcgVmVjMygpLFxuICAgIFNQSFN5c3RlbV91cGRhdGVfdSA9IG5ldyBWZWMzKCk7IC8vIFJlbGF0aXZlIHZlbG9jaXR5XG5TUEhTeXN0ZW0ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIE4gPSB0aGlzLnBhcnRpY2xlcy5sZW5ndGgsXG4gICAgICAgIGRpc3QgPSBTUEhTeXN0ZW1fdXBkYXRlX2Rpc3QsXG4gICAgICAgIGNzID0gdGhpcy5zcGVlZE9mU291bmQsXG4gICAgICAgIGVwcyA9IHRoaXMuZXBzO1xuXG4gICAgZm9yKHZhciBpPTA7IGkhPT1OOyBpKyspe1xuICAgICAgICB2YXIgcCA9IHRoaXMucGFydGljbGVzW2ldOyAvLyBDdXJyZW50IHBhcnRpY2xlXG4gICAgICAgIHZhciBuZWlnaGJvcnMgPSB0aGlzLm5laWdoYm9yc1tpXTtcblxuICAgICAgICAvLyBHZXQgbmVpZ2hib3JzXG4gICAgICAgIG5laWdoYm9ycy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmdldE5laWdoYm9ycyhwLG5laWdoYm9ycyk7XG4gICAgICAgIG5laWdoYm9ycy5wdXNoKHRoaXMucGFydGljbGVzW2ldKTsgLy8gQWRkIGN1cnJlbnQgdG9vXG4gICAgICAgIHZhciBudW1OZWlnaGJvcnMgPSBuZWlnaGJvcnMubGVuZ3RoO1xuXG4gICAgICAgIC8vIEFjY3VtdWxhdGUgZGVuc2l0eSBmb3IgdGhlIHBhcnRpY2xlXG4gICAgICAgIHZhciBzdW0gPSAwLjA7XG4gICAgICAgIGZvcih2YXIgaj0wOyBqIT09bnVtTmVpZ2hib3JzOyBqKyspe1xuXG4gICAgICAgICAgICAvL3ByaW50ZihcIkN1cnJlbnQgcGFydGljbGUgaGFzIHBvc2l0aW9uICVmICVmICVmXFxuXCIsb2JqZWN0c1tpZF0ucG9zLngoKSxvYmplY3RzW2lkXS5wb3MueSgpLG9iamVjdHNbaWRdLnBvcy56KCkpO1xuICAgICAgICAgICAgcC5wb3NpdGlvbi52c3ViKG5laWdoYm9yc1tqXS5wb3NpdGlvbiwgZGlzdCk7XG4gICAgICAgICAgICB2YXIgbGVuID0gZGlzdC5ub3JtKCk7XG5cbiAgICAgICAgICAgIHZhciB3ZWlnaHQgPSB0aGlzLncobGVuKTtcbiAgICAgICAgICAgIHN1bSArPSBuZWlnaGJvcnNbal0ubWFzcyAqIHdlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNhdmVcbiAgICAgICAgdGhpcy5kZW5zaXRpZXNbaV0gPSBzdW07XG4gICAgICAgIHRoaXMucHJlc3N1cmVzW2ldID0gY3MgKiBjcyAqICh0aGlzLmRlbnNpdGllc1tpXSAtIHRoaXMuZGVuc2l0eSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIGZvcmNlc1xuXG4gICAgLy8gU3VtIHRvIHRoZXNlIGFjY2VsZXJhdGlvbnNcbiAgICB2YXIgYV9wcmVzc3VyZT0gU1BIU3lzdGVtX3VwZGF0ZV9hX3ByZXNzdXJlO1xuICAgIHZhciBhX3Zpc2MgPSAgICBTUEhTeXN0ZW1fdXBkYXRlX2FfdmlzYztcbiAgICB2YXIgZ3JhZFcgPSAgICAgU1BIU3lzdGVtX3VwZGF0ZV9ncmFkVztcbiAgICB2YXIgcl92ZWMgPSAgICAgU1BIU3lzdGVtX3VwZGF0ZV9yX3ZlYztcbiAgICB2YXIgdSA9ICAgICAgICAgU1BIU3lzdGVtX3VwZGF0ZV91O1xuXG4gICAgZm9yKHZhciBpPTA7IGkhPT1OOyBpKyspe1xuXG4gICAgICAgIHZhciBwYXJ0aWNsZSA9IHRoaXMucGFydGljbGVzW2ldO1xuXG4gICAgICAgIGFfcHJlc3N1cmUuc2V0KDAsMCwwKTtcbiAgICAgICAgYV92aXNjLnNldCgwLDAsMCk7XG5cbiAgICAgICAgLy8gSW5pdCB2YXJzXG4gICAgICAgIHZhciBQaWo7XG4gICAgICAgIHZhciBuYWJsYTtcbiAgICAgICAgdmFyIFZpajtcblxuICAgICAgICAvLyBTdW0gdXAgZm9yIGFsbCBvdGhlciBuZWlnaGJvcnNcbiAgICAgICAgdmFyIG5laWdoYm9ycyA9IHRoaXMubmVpZ2hib3JzW2ldO1xuICAgICAgICB2YXIgbnVtTmVpZ2hib3JzID0gbmVpZ2hib3JzLmxlbmd0aDtcblxuICAgICAgICAvL3ByaW50ZihcIk5laWdoYm9yczogXCIpO1xuICAgICAgICBmb3IodmFyIGo9MDsgaiE9PW51bU5laWdoYm9yczsgaisrKXtcblxuICAgICAgICAgICAgdmFyIG5laWdoYm9yID0gbmVpZ2hib3JzW2pdO1xuICAgICAgICAgICAgLy9wcmludGYoXCIlZCBcIixuaik7XG5cbiAgICAgICAgICAgIC8vIEdldCByIG9uY2UgZm9yIGFsbC4uXG4gICAgICAgICAgICBwYXJ0aWNsZS5wb3NpdGlvbi52c3ViKG5laWdoYm9yLnBvc2l0aW9uLHJfdmVjKTtcbiAgICAgICAgICAgIHZhciByID0gcl92ZWMubm9ybSgpO1xuXG4gICAgICAgICAgICAvLyBQcmVzc3VyZSBjb250cmlidXRpb25cbiAgICAgICAgICAgIFBpaiA9IC1uZWlnaGJvci5tYXNzICogKHRoaXMucHJlc3N1cmVzW2ldIC8gKHRoaXMuZGVuc2l0aWVzW2ldKnRoaXMuZGVuc2l0aWVzW2ldICsgZXBzKSArIHRoaXMucHJlc3N1cmVzW2pdIC8gKHRoaXMuZGVuc2l0aWVzW2pdKnRoaXMuZGVuc2l0aWVzW2pdICsgZXBzKSk7XG4gICAgICAgICAgICB0aGlzLmdyYWR3KHJfdmVjLCBncmFkVyk7XG4gICAgICAgICAgICAvLyBBZGQgdG8gcHJlc3N1cmUgYWNjZWxlcmF0aW9uXG4gICAgICAgICAgICBncmFkVy5tdWx0KFBpaiAsIGdyYWRXKTtcbiAgICAgICAgICAgIGFfcHJlc3N1cmUudmFkZChncmFkVywgYV9wcmVzc3VyZSk7XG5cbiAgICAgICAgICAgIC8vIFZpc2Nvc2l0eSBjb250cmlidXRpb25cbiAgICAgICAgICAgIG5laWdoYm9yLnZlbG9jaXR5LnZzdWIocGFydGljbGUudmVsb2NpdHksIHUpO1xuICAgICAgICAgICAgdS5tdWx0KCAxLjAgLyAoMC4wMDAxK3RoaXMuZGVuc2l0aWVzW2ldICogdGhpcy5kZW5zaXRpZXNbal0pICogdGhpcy52aXNjb3NpdHkgKiBuZWlnaGJvci5tYXNzICwgdSApO1xuICAgICAgICAgICAgbmFibGEgPSB0aGlzLm5hYmxhdyhyKTtcbiAgICAgICAgICAgIHUubXVsdChuYWJsYSx1KTtcbiAgICAgICAgICAgIC8vIEFkZCB0byB2aXNjb3NpdHkgYWNjZWxlcmF0aW9uXG4gICAgICAgICAgICBhX3Zpc2MudmFkZCggdSwgYV92aXNjICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYWxjdWxhdGUgZm9yY2VcbiAgICAgICAgYV92aXNjLm11bHQocGFydGljbGUubWFzcywgYV92aXNjKTtcbiAgICAgICAgYV9wcmVzc3VyZS5tdWx0KHBhcnRpY2xlLm1hc3MsIGFfcHJlc3N1cmUpO1xuXG4gICAgICAgIC8vIEFkZCBmb3JjZSB0byBwYXJ0aWNsZXNcbiAgICAgICAgcGFydGljbGUuZm9yY2UudmFkZChhX3Zpc2MsIHBhcnRpY2xlLmZvcmNlKTtcbiAgICAgICAgcGFydGljbGUuZm9yY2UudmFkZChhX3ByZXNzdXJlLCBwYXJ0aWNsZS5mb3JjZSk7XG4gICAgfVxufTtcblxuLy8gQ2FsY3VsYXRlIHRoZSB3ZWlnaHQgdXNpbmcgdGhlIFcocikgd2VpZ2h0ZnVuY3Rpb25cblNQSFN5c3RlbS5wcm90b3R5cGUudyA9IGZ1bmN0aW9uKHIpe1xuICAgIC8vIDMxNVxuICAgIHZhciBoID0gdGhpcy5zbW9vdGhpbmdSYWRpdXM7XG4gICAgcmV0dXJuIDMxNS4wLyg2NC4wKk1hdGguUEkqTWF0aC5wb3coaCw5KSkgKiBNYXRoLnBvdyhoKmgtcipyLDMpO1xufTtcblxuLy8gY2FsY3VsYXRlIGdyYWRpZW50IG9mIHRoZSB3ZWlnaHQgZnVuY3Rpb25cblNQSFN5c3RlbS5wcm90b3R5cGUuZ3JhZHcgPSBmdW5jdGlvbihyVmVjLHJlc3VsdFZlYyl7XG4gICAgdmFyIHIgPSByVmVjLm5vcm0oKSxcbiAgICAgICAgaCA9IHRoaXMuc21vb3RoaW5nUmFkaXVzO1xuICAgIHJWZWMubXVsdCg5NDUuMC8oMzIuMCpNYXRoLlBJKk1hdGgucG93KGgsOSkpICogTWF0aC5wb3coKGgqaC1yKnIpLDIpICwgcmVzdWx0VmVjKTtcbn07XG5cbi8vIENhbGN1bGF0ZSBuYWJsYShXKVxuU1BIU3lzdGVtLnByb3RvdHlwZS5uYWJsYXcgPSBmdW5jdGlvbihyKXtcbiAgICB2YXIgaCA9IHRoaXMuc21vb3RoaW5nUmFkaXVzO1xuICAgIHZhciBuYWJsYSA9IDk0NS4wLygzMi4wKk1hdGguUEkqTWF0aC5wb3coaCw5KSkgKiAoaCpoLXIqcikqKDcqcipyIC0gMypoKmgpO1xuICAgIHJldHVybiBuYWJsYTtcbn07XG5cbn0se1wiLi4vbWF0ZXJpYWwvTWF0ZXJpYWxcIjoyNSxcIi4uL21hdGgvUXVhdGVybmlvblwiOjI4LFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuLi9vYmplY3RzL0JvZHlcIjozMSxcIi4uL3NoYXBlcy9QYXJ0aWNsZVwiOjQxLFwiLi4vc2hhcGVzL1NoYXBlXCI6NDN9XSwzNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNwcmluZztcblxuLyoqXG4gKiBBIHNwcmluZywgY29ubmVjdGluZyB0d28gYm9kaWVzLlxuICpcbiAqIEBjbGFzcyBTcHJpbmdcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCb2R5fSBib2R5QVxuICogQHBhcmFtIHtCb2R5fSBib2R5QlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnJlc3RMZW5ndGhdICAgQSBudW1iZXIgPiAwLiBEZWZhdWx0OiAxXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc3RpZmZuZXNzXSAgICBBIG51bWJlciA+PSAwLiBEZWZhdWx0OiAxMDBcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5kYW1waW5nXSAgICAgIEEgbnVtYmVyID49IDAuIERlZmF1bHQ6IDFcbiAqIEBwYXJhbSB7VmVjM30gIFtvcHRpb25zLndvcmxkQW5jaG9yQV0gV2hlcmUgdG8gaG9vayB0aGUgc3ByaW5nIHRvIGJvZHkgQSwgaW4gd29ybGQgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge1ZlYzN9ICBbb3B0aW9ucy53b3JsZEFuY2hvckJdXG4gKiBAcGFyYW0ge1ZlYzN9ICBbb3B0aW9ucy5sb2NhbEFuY2hvckFdIFdoZXJlIHRvIGhvb2sgdGhlIHNwcmluZyB0byBib2R5IEEsIGluIGxvY2FsIGJvZHkgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge1ZlYzN9ICBbb3B0aW9ucy5sb2NhbEFuY2hvckJdXG4gKi9cbmZ1bmN0aW9uIFNwcmluZyhib2R5QSxib2R5QixvcHRpb25zKXtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIC8qKlxuICAgICAqIFJlc3QgbGVuZ3RoIG9mIHRoZSBzcHJpbmcuXG4gICAgICogQHByb3BlcnR5IHJlc3RMZW5ndGhcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucmVzdExlbmd0aCA9IHR5cGVvZihvcHRpb25zLnJlc3RMZW5ndGgpID09PSBcIm51bWJlclwiID8gb3B0aW9ucy5yZXN0TGVuZ3RoIDogMTtcblxuICAgIC8qKlxuICAgICAqIFN0aWZmbmVzcyBvZiB0aGUgc3ByaW5nLlxuICAgICAqIEBwcm9wZXJ0eSBzdGlmZm5lc3NcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuc3RpZmZuZXNzID0gb3B0aW9ucy5zdGlmZm5lc3MgfHwgMTAwO1xuXG4gICAgLyoqXG4gICAgICogRGFtcGluZyBvZiB0aGUgc3ByaW5nLlxuICAgICAqIEBwcm9wZXJ0eSBkYW1waW5nXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmRhbXBpbmcgPSBvcHRpb25zLmRhbXBpbmcgfHwgMTtcblxuICAgIC8qKlxuICAgICAqIEZpcnN0IGNvbm5lY3RlZCBib2R5LlxuICAgICAqIEBwcm9wZXJ0eSBib2R5QVxuICAgICAqIEB0eXBlIHtCb2R5fVxuICAgICAqL1xuICAgIHRoaXMuYm9keUEgPSBib2R5QTtcblxuICAgIC8qKlxuICAgICAqIFNlY29uZCBjb25uZWN0ZWQgYm9keS5cbiAgICAgKiBAcHJvcGVydHkgYm9keUJcbiAgICAgKiBAdHlwZSB7Qm9keX1cbiAgICAgKi9cbiAgICB0aGlzLmJvZHlCID0gYm9keUI7XG5cbiAgICAvKipcbiAgICAgKiBBbmNob3IgZm9yIGJvZHlBIGluIGxvY2FsIGJvZHlBIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwcm9wZXJ0eSBsb2NhbEFuY2hvckFcbiAgICAgKiBAdHlwZSB7VmVjM31cbiAgICAgKi9cbiAgICB0aGlzLmxvY2FsQW5jaG9yQSA9IG5ldyBWZWMzKCk7XG5cbiAgICAvKipcbiAgICAgKiBBbmNob3IgZm9yIGJvZHlCIGluIGxvY2FsIGJvZHlCIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwcm9wZXJ0eSBsb2NhbEFuY2hvckJcbiAgICAgKiBAdHlwZSB7VmVjM31cbiAgICAgKi9cbiAgICB0aGlzLmxvY2FsQW5jaG9yQiA9IG5ldyBWZWMzKCk7XG5cbiAgICBpZihvcHRpb25zLmxvY2FsQW5jaG9yQSl7XG4gICAgICAgIHRoaXMubG9jYWxBbmNob3JBLmNvcHkob3B0aW9ucy5sb2NhbEFuY2hvckEpO1xuICAgIH1cbiAgICBpZihvcHRpb25zLmxvY2FsQW5jaG9yQil7XG4gICAgICAgIHRoaXMubG9jYWxBbmNob3JCLmNvcHkob3B0aW9ucy5sb2NhbEFuY2hvckIpO1xuICAgIH1cbiAgICBpZihvcHRpb25zLndvcmxkQW5jaG9yQSl7XG4gICAgICAgIHRoaXMuc2V0V29ybGRBbmNob3JBKG9wdGlvbnMud29ybGRBbmNob3JBKTtcbiAgICB9XG4gICAgaWYob3B0aW9ucy53b3JsZEFuY2hvckIpe1xuICAgICAgICB0aGlzLnNldFdvcmxkQW5jaG9yQihvcHRpb25zLndvcmxkQW5jaG9yQik7XG4gICAgfVxufVxuXG4vKipcbiAqIFNldCB0aGUgYW5jaG9yIHBvaW50IG9uIGJvZHkgQSwgdXNpbmcgd29ybGQgY29vcmRpbmF0ZXMuXG4gKiBAbWV0aG9kIHNldFdvcmxkQW5jaG9yQVxuICogQHBhcmFtIHtWZWMzfSB3b3JsZEFuY2hvckFcbiAqL1xuU3ByaW5nLnByb3RvdHlwZS5zZXRXb3JsZEFuY2hvckEgPSBmdW5jdGlvbih3b3JsZEFuY2hvckEpe1xuICAgIHRoaXMuYm9keUEucG9pbnRUb0xvY2FsRnJhbWUod29ybGRBbmNob3JBLHRoaXMubG9jYWxBbmNob3JBKTtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBhbmNob3IgcG9pbnQgb24gYm9keSBCLCB1c2luZyB3b3JsZCBjb29yZGluYXRlcy5cbiAqIEBtZXRob2Qgc2V0V29ybGRBbmNob3JCXG4gKiBAcGFyYW0ge1ZlYzN9IHdvcmxkQW5jaG9yQlxuICovXG5TcHJpbmcucHJvdG90eXBlLnNldFdvcmxkQW5jaG9yQiA9IGZ1bmN0aW9uKHdvcmxkQW5jaG9yQil7XG4gICAgdGhpcy5ib2R5Qi5wb2ludFRvTG9jYWxGcmFtZSh3b3JsZEFuY2hvckIsdGhpcy5sb2NhbEFuY2hvckIpO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGFuY2hvciBwb2ludCBvbiBib2R5IEEsIGluIHdvcmxkIGNvb3JkaW5hdGVzLlxuICogQG1ldGhvZCBnZXRXb3JsZEFuY2hvckFcbiAqIEBwYXJhbSB7VmVjM30gcmVzdWx0IFRoZSB2ZWN0b3IgdG8gc3RvcmUgdGhlIHJlc3VsdCBpbi5cbiAqL1xuU3ByaW5nLnByb3RvdHlwZS5nZXRXb3JsZEFuY2hvckEgPSBmdW5jdGlvbihyZXN1bHQpe1xuICAgIHRoaXMuYm9keUEucG9pbnRUb1dvcmxkRnJhbWUodGhpcy5sb2NhbEFuY2hvckEscmVzdWx0KTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBhbmNob3IgcG9pbnQgb24gYm9keSBCLCBpbiB3b3JsZCBjb29yZGluYXRlcy5cbiAqIEBtZXRob2QgZ2V0V29ybGRBbmNob3JCXG4gKiBAcGFyYW0ge1ZlYzN9IHJlc3VsdCBUaGUgdmVjdG9yIHRvIHN0b3JlIHRoZSByZXN1bHQgaW4uXG4gKi9cblNwcmluZy5wcm90b3R5cGUuZ2V0V29ybGRBbmNob3JCID0gZnVuY3Rpb24ocmVzdWx0KXtcbiAgICB0aGlzLmJvZHlCLnBvaW50VG9Xb3JsZEZyYW1lKHRoaXMubG9jYWxBbmNob3JCLHJlc3VsdCk7XG59O1xuXG52YXIgYXBwbHlGb3JjZV9yID0gICAgICAgICAgICAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV9yX3VuaXQgPSAgICAgICAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV91ID0gICAgICAgICAgICAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV9mID0gICAgICAgICAgICAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV93b3JsZEFuY2hvckEgPSAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV93b3JsZEFuY2hvckIgPSAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV9yaSA9ICAgICAgICAgICAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV9yaiA9ICAgICAgICAgICAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV9yaV94X2YgPSAgICAgICAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV9yal94X2YgPSAgICAgICAgIG5ldyBWZWMzKCksXG4gICAgYXBwbHlGb3JjZV90bXAgPSAgICAgICAgICAgIG5ldyBWZWMzKCk7XG5cbi8qKlxuICogQXBwbHkgdGhlIHNwcmluZyBmb3JjZSB0byB0aGUgY29ubmVjdGVkIGJvZGllcy5cbiAqIEBtZXRob2QgYXBwbHlGb3JjZVxuICovXG5TcHJpbmcucHJvdG90eXBlLmFwcGx5Rm9yY2UgPSBmdW5jdGlvbigpe1xuICAgIHZhciBrID0gdGhpcy5zdGlmZm5lc3MsXG4gICAgICAgIGQgPSB0aGlzLmRhbXBpbmcsXG4gICAgICAgIGwgPSB0aGlzLnJlc3RMZW5ndGgsXG4gICAgICAgIGJvZHlBID0gdGhpcy5ib2R5QSxcbiAgICAgICAgYm9keUIgPSB0aGlzLmJvZHlCLFxuICAgICAgICByID0gYXBwbHlGb3JjZV9yLFxuICAgICAgICByX3VuaXQgPSBhcHBseUZvcmNlX3JfdW5pdCxcbiAgICAgICAgdSA9IGFwcGx5Rm9yY2VfdSxcbiAgICAgICAgZiA9IGFwcGx5Rm9yY2VfZixcbiAgICAgICAgdG1wID0gYXBwbHlGb3JjZV90bXA7XG5cbiAgICB2YXIgd29ybGRBbmNob3JBID0gYXBwbHlGb3JjZV93b3JsZEFuY2hvckEsXG4gICAgICAgIHdvcmxkQW5jaG9yQiA9IGFwcGx5Rm9yY2Vfd29ybGRBbmNob3JCLFxuICAgICAgICByaSA9IGFwcGx5Rm9yY2VfcmksXG4gICAgICAgIHJqID0gYXBwbHlGb3JjZV9yaixcbiAgICAgICAgcmlfeF9mID0gYXBwbHlGb3JjZV9yaV94X2YsXG4gICAgICAgIHJqX3hfZiA9IGFwcGx5Rm9yY2VfcmpfeF9mO1xuXG4gICAgLy8gR2V0IHdvcmxkIGFuY2hvcnNcbiAgICB0aGlzLmdldFdvcmxkQW5jaG9yQSh3b3JsZEFuY2hvckEpO1xuICAgIHRoaXMuZ2V0V29ybGRBbmNob3JCKHdvcmxkQW5jaG9yQik7XG5cbiAgICAvLyBHZXQgb2Zmc2V0IHBvaW50c1xuICAgIHdvcmxkQW5jaG9yQS52c3ViKGJvZHlBLnBvc2l0aW9uLHJpKTtcbiAgICB3b3JsZEFuY2hvckIudnN1Yihib2R5Qi5wb3NpdGlvbixyaik7XG5cbiAgICAvLyBDb21wdXRlIGRpc3RhbmNlIHZlY3RvciBiZXR3ZWVuIHdvcmxkIGFuY2hvciBwb2ludHNcbiAgICB3b3JsZEFuY2hvckIudnN1Yih3b3JsZEFuY2hvckEscik7XG4gICAgdmFyIHJsZW4gPSByLm5vcm0oKTtcbiAgICByX3VuaXQuY29weShyKTtcbiAgICByX3VuaXQubm9ybWFsaXplKCk7XG5cbiAgICAvLyBDb21wdXRlIHJlbGF0aXZlIHZlbG9jaXR5IG9mIHRoZSBhbmNob3IgcG9pbnRzLCB1XG4gICAgYm9keUIudmVsb2NpdHkudnN1Yihib2R5QS52ZWxvY2l0eSx1KTtcbiAgICAvLyBBZGQgcm90YXRpb25hbCB2ZWxvY2l0eVxuXG4gICAgYm9keUIuYW5ndWxhclZlbG9jaXR5LmNyb3NzKHJqLHRtcCk7XG4gICAgdS52YWRkKHRtcCx1KTtcbiAgICBib2R5QS5hbmd1bGFyVmVsb2NpdHkuY3Jvc3MocmksdG1wKTtcbiAgICB1LnZzdWIodG1wLHUpO1xuXG4gICAgLy8gRiA9IC0gayAqICggeCAtIEwgKSAtIEQgKiAoIHUgKVxuICAgIHJfdW5pdC5tdWx0KC1rKihybGVuLWwpIC0gZCp1LmRvdChyX3VuaXQpLCBmKTtcblxuICAgIC8vIEFkZCBmb3JjZXMgdG8gYm9kaWVzXG4gICAgYm9keUEuZm9yY2UudnN1YihmLGJvZHlBLmZvcmNlKTtcbiAgICBib2R5Qi5mb3JjZS52YWRkKGYsYm9keUIuZm9yY2UpO1xuXG4gICAgLy8gQW5ndWxhciBmb3JjZVxuICAgIHJpLmNyb3NzKGYscmlfeF9mKTtcbiAgICByai5jcm9zcyhmLHJqX3hfZik7XG4gICAgYm9keUEudG9ycXVlLnZzdWIocmlfeF9mLGJvZHlBLnRvcnF1ZSk7XG4gICAgYm9keUIudG9ycXVlLnZhZGQocmpfeF9mLGJvZHlCLnRvcnF1ZSk7XG59O1xuXG59LHtcIi4uL21hdGgvVmVjM1wiOjMwfV0sMzY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBUcmFuc2Zvcm0gPSBfZGVyZXFfKCcuLi9tYXRoL1RyYW5zZm9ybScpO1xudmFyIFJheWNhc3RSZXN1bHQgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vUmF5Y2FzdFJlc3VsdCcpO1xudmFyIFV0aWxzID0gX2RlcmVxXygnLi4vdXRpbHMvVXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBXaGVlbEluZm87XG5cbi8qKlxuICogQGNsYXNzIFdoZWVsSW5mb1xuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKlxuICogQHBhcmFtIHtWZWMzfSBbb3B0aW9ucy5jaGFzc2lzQ29ubmVjdGlvblBvaW50TG9jYWxdXG4gKiBAcGFyYW0ge1ZlYzN9IFtvcHRpb25zLmNoYXNzaXNDb25uZWN0aW9uUG9pbnRXb3JsZF1cbiAqIEBwYXJhbSB7VmVjM30gW29wdGlvbnMuZGlyZWN0aW9uTG9jYWxdXG4gKiBAcGFyYW0ge1ZlYzN9IFtvcHRpb25zLmRpcmVjdGlvbldvcmxkXVxuICogQHBhcmFtIHtWZWMzfSBbb3B0aW9ucy5heGxlTG9jYWxdXG4gKiBAcGFyYW0ge1ZlYzN9IFtvcHRpb25zLmF4bGVXb3JsZF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zdXNwZW5zaW9uUmVzdExlbmd0aD0xXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnN1c3BlbnNpb25NYXhMZW5ndGg9Ml1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5yYWRpdXM9MV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zdXNwZW5zaW9uU3RpZmZuZXNzPTEwMF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5kYW1waW5nQ29tcHJlc3Npb249MTBdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZGFtcGluZ1JlbGF4YXRpb249MTBdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZnJpY3Rpb25TbGlwPTEwMDAwXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnN0ZWVyaW5nPTBdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucm90YXRpb249MF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5kZWx0YVJvdGF0aW9uPTBdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucm9sbEluZmx1ZW5jZT0wLjAxXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFN1c3BlbnNpb25Gb3JjZV1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaXNGcm9udFdoZWVsPXRydWVdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY2xpcHBlZEludkNvbnRhY3REb3RTdXNwZW5zaW9uPTFdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc3VzcGVuc2lvblJlbGF0aXZlVmVsb2NpdHk9MF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zdXNwZW5zaW9uRm9yY2U9MF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5za2lkSW5mbz0wXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnN1c3BlbnNpb25MZW5ndGg9MF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhTdXNwZW5zaW9uVHJhdmVsPTFdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVzZUN1c3RvbVNsaWRpbmdSb3RhdGlvbmFsU3BlZWQ9ZmFsc2VdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY3VzdG9tU2xpZGluZ1JvdGF0aW9uYWxTcGVlZD0tMC4xXVxuICovXG5mdW5jdGlvbiBXaGVlbEluZm8ob3B0aW9ucyl7XG4gICAgb3B0aW9ucyA9IFV0aWxzLmRlZmF1bHRzKG9wdGlvbnMsIHtcbiAgICAgICAgY2hhc3Npc0Nvbm5lY3Rpb25Qb2ludExvY2FsOiBuZXcgVmVjMygpLFxuICAgICAgICBjaGFzc2lzQ29ubmVjdGlvblBvaW50V29ybGQ6IG5ldyBWZWMzKCksXG4gICAgICAgIGRpcmVjdGlvbkxvY2FsOiBuZXcgVmVjMygpLFxuICAgICAgICBkaXJlY3Rpb25Xb3JsZDogbmV3IFZlYzMoKSxcbiAgICAgICAgYXhsZUxvY2FsOiBuZXcgVmVjMygpLFxuICAgICAgICBheGxlV29ybGQ6IG5ldyBWZWMzKCksXG4gICAgICAgIHN1c3BlbnNpb25SZXN0TGVuZ3RoOiAxLFxuICAgICAgICBzdXNwZW5zaW9uTWF4TGVuZ3RoOiAyLFxuICAgICAgICByYWRpdXM6IDEsXG4gICAgICAgIHN1c3BlbnNpb25TdGlmZm5lc3M6IDEwMCxcbiAgICAgICAgZGFtcGluZ0NvbXByZXNzaW9uOiAxMCxcbiAgICAgICAgZGFtcGluZ1JlbGF4YXRpb246IDEwLFxuICAgICAgICBmcmljdGlvblNsaXA6IDEwMDAwLFxuICAgICAgICBzdGVlcmluZzogMCxcbiAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgIGRlbHRhUm90YXRpb246IDAsXG4gICAgICAgIHJvbGxJbmZsdWVuY2U6IDAuMDEsXG4gICAgICAgIG1heFN1c3BlbnNpb25Gb3JjZTogTnVtYmVyLk1BWF9WQUxVRSxcbiAgICAgICAgaXNGcm9udFdoZWVsOiB0cnVlLFxuICAgICAgICBjbGlwcGVkSW52Q29udGFjdERvdFN1c3BlbnNpb246IDEsXG4gICAgICAgIHN1c3BlbnNpb25SZWxhdGl2ZVZlbG9jaXR5OiAwLFxuICAgICAgICBzdXNwZW5zaW9uRm9yY2U6IDAsXG4gICAgICAgIHNraWRJbmZvOiAwLFxuICAgICAgICBzdXNwZW5zaW9uTGVuZ3RoOiAwLFxuICAgICAgICBtYXhTdXNwZW5zaW9uVHJhdmVsOiAxLFxuICAgICAgICB1c2VDdXN0b21TbGlkaW5nUm90YXRpb25hbFNwZWVkOiBmYWxzZSxcbiAgICAgICAgY3VzdG9tU2xpZGluZ1JvdGF0aW9uYWxTcGVlZDogLTAuMVxuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogTWF4IHRyYXZlbCBkaXN0YW5jZSBvZiB0aGUgc3VzcGVuc2lvbiwgaW4gbWV0ZXJzLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXhTdXNwZW5zaW9uVHJhdmVsXG4gICAgICovXG4gICAgdGhpcy5tYXhTdXNwZW5zaW9uVHJhdmVsID0gb3B0aW9ucy5tYXhTdXNwZW5zaW9uVHJhdmVsO1xuXG4gICAgLyoqXG4gICAgICogU3BlZWQgdG8gYXBwbHkgdG8gdGhlIHdoZWVsIHJvdGF0aW9uIHdoZW4gdGhlIHdoZWVsIGlzIHNsaWRpbmcuXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGN1c3RvbVNsaWRpbmdSb3RhdGlvbmFsU3BlZWRcbiAgICAgKi9cbiAgICB0aGlzLmN1c3RvbVNsaWRpbmdSb3RhdGlvbmFsU3BlZWQgPSBvcHRpb25zLmN1c3RvbVNsaWRpbmdSb3RhdGlvbmFsU3BlZWQ7XG5cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgY3VzdG9tU2xpZGluZ1JvdGF0aW9uYWxTcGVlZCBzaG91bGQgYmUgdXNlZC5cbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHVzZUN1c3RvbVNsaWRpbmdSb3RhdGlvbmFsU3BlZWRcbiAgICAgKi9cbiAgICB0aGlzLnVzZUN1c3RvbVNsaWRpbmdSb3RhdGlvbmFsU3BlZWQgPSBvcHRpb25zLnVzZUN1c3RvbVNsaWRpbmdSb3RhdGlvbmFsU3BlZWQ7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IHNsaWRpbmdcbiAgICAgKi9cbiAgICB0aGlzLnNsaWRpbmcgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENvbm5lY3Rpb24gcG9pbnQsIGRlZmluZWQgbG9jYWxseSBpbiB0aGUgY2hhc3NpcyBib2R5IGZyYW1lLlxuICAgICAqIEBwcm9wZXJ0eSB7VmVjM30gY2hhc3Npc0Nvbm5lY3Rpb25Qb2ludExvY2FsXG4gICAgICovXG4gICAgdGhpcy5jaGFzc2lzQ29ubmVjdGlvblBvaW50TG9jYWwgPSBvcHRpb25zLmNoYXNzaXNDb25uZWN0aW9uUG9pbnRMb2NhbC5jbG9uZSgpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBjaGFzc2lzQ29ubmVjdGlvblBvaW50V29ybGRcbiAgICAgKi9cbiAgICB0aGlzLmNoYXNzaXNDb25uZWN0aW9uUG9pbnRXb3JsZCA9IG9wdGlvbnMuY2hhc3Npc0Nvbm5lY3Rpb25Qb2ludFdvcmxkLmNsb25lKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1ZlYzN9IGRpcmVjdGlvbkxvY2FsXG4gICAgICovXG4gICAgdGhpcy5kaXJlY3Rpb25Mb2NhbCA9IG9wdGlvbnMuZGlyZWN0aW9uTG9jYWwuY2xvbmUoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7VmVjM30gZGlyZWN0aW9uV29ybGRcbiAgICAgKi9cbiAgICB0aGlzLmRpcmVjdGlvbldvcmxkID0gb3B0aW9ucy5kaXJlY3Rpb25Xb3JsZC5jbG9uZSgpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBheGxlTG9jYWxcbiAgICAgKi9cbiAgICB0aGlzLmF4bGVMb2NhbCA9IG9wdGlvbnMuYXhsZUxvY2FsLmNsb25lKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge1ZlYzN9IGF4bGVXb3JsZFxuICAgICAqL1xuICAgIHRoaXMuYXhsZVdvcmxkID0gb3B0aW9ucy5heGxlV29ybGQuY2xvbmUoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdXNwZW5zaW9uUmVzdExlbmd0aFxuICAgICAqL1xuICAgIHRoaXMuc3VzcGVuc2lvblJlc3RMZW5ndGggPSBvcHRpb25zLnN1c3BlbnNpb25SZXN0TGVuZ3RoO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHN1c3BlbnNpb25NYXhMZW5ndGhcbiAgICAgKi9cbiAgICB0aGlzLnN1c3BlbnNpb25NYXhMZW5ndGggPSBvcHRpb25zLnN1c3BlbnNpb25NYXhMZW5ndGg7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gcmFkaXVzXG4gICAgICovXG4gICAgdGhpcy5yYWRpdXMgPSBvcHRpb25zLnJhZGl1cztcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzdXNwZW5zaW9uU3RpZmZuZXNzXG4gICAgICovXG4gICAgdGhpcy5zdXNwZW5zaW9uU3RpZmZuZXNzID0gb3B0aW9ucy5zdXNwZW5zaW9uU3RpZmZuZXNzO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGRhbXBpbmdDb21wcmVzc2lvblxuICAgICAqL1xuICAgIHRoaXMuZGFtcGluZ0NvbXByZXNzaW9uID0gb3B0aW9ucy5kYW1waW5nQ29tcHJlc3Npb247XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gZGFtcGluZ1JlbGF4YXRpb25cbiAgICAgKi9cbiAgICB0aGlzLmRhbXBpbmdSZWxheGF0aW9uID0gb3B0aW9ucy5kYW1waW5nUmVsYXhhdGlvbjtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmcmljdGlvblNsaXBcbiAgICAgKi9cbiAgICB0aGlzLmZyaWN0aW9uU2xpcCA9IG9wdGlvbnMuZnJpY3Rpb25TbGlwO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHN0ZWVyaW5nXG4gICAgICovXG4gICAgdGhpcy5zdGVlcmluZyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGlvbiB2YWx1ZSwgaW4gcmFkaWFucy5cbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gcm90YXRpb25cbiAgICAgKi9cbiAgICB0aGlzLnJvdGF0aW9uID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkZWx0YVJvdGF0aW9uXG4gICAgICovXG4gICAgdGhpcy5kZWx0YVJvdGF0aW9uID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByb2xsSW5mbHVlbmNlXG4gICAgICovXG4gICAgdGhpcy5yb2xsSW5mbHVlbmNlID0gb3B0aW9ucy5yb2xsSW5mbHVlbmNlO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IG1heFN1c3BlbnNpb25Gb3JjZVxuICAgICAqL1xuICAgIHRoaXMubWF4U3VzcGVuc2lvbkZvcmNlID0gb3B0aW9ucy5tYXhTdXNwZW5zaW9uRm9yY2U7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gZW5naW5lRm9yY2VcbiAgICAgKi9cbiAgICB0aGlzLmVuZ2luZUZvcmNlID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBicmFrZVxuICAgICAqL1xuICAgIHRoaXMuYnJha2UgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGlzRnJvbnRXaGVlbFxuICAgICAqL1xuICAgIHRoaXMuaXNGcm9udFdoZWVsID0gb3B0aW9ucy5pc0Zyb250V2hlZWw7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gY2xpcHBlZEludkNvbnRhY3REb3RTdXNwZW5zaW9uXG4gICAgICovXG4gICAgdGhpcy5jbGlwcGVkSW52Q29udGFjdERvdFN1c3BlbnNpb24gPSAxO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHN1c3BlbnNpb25SZWxhdGl2ZVZlbG9jaXR5XG4gICAgICovXG4gICAgdGhpcy5zdXNwZW5zaW9uUmVsYXRpdmVWZWxvY2l0eSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc3VzcGVuc2lvbkZvcmNlXG4gICAgICovXG4gICAgdGhpcy5zdXNwZW5zaW9uRm9yY2UgPSAwO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IHNraWRJbmZvXG4gICAgICovXG4gICAgdGhpcy5za2lkSW5mbyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc3VzcGVuc2lvbkxlbmd0aFxuICAgICAqL1xuICAgIHRoaXMuc3VzcGVuc2lvbkxlbmd0aCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lkZUltcHVsc2VcbiAgICAgKi9cbiAgICB0aGlzLnNpZGVJbXB1bHNlID0gMDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBmb3J3YXJkSW1wdWxzZVxuICAgICAqL1xuICAgIHRoaXMuZm9yd2FyZEltcHVsc2UgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJlc3VsdCBmcm9tIHJheWNhc3RpbmdcbiAgICAgKiBAcHJvcGVydHkge1JheWNhc3RSZXN1bHR9IHJheWNhc3RSZXN1bHRcbiAgICAgKi9cbiAgICB0aGlzLnJheWNhc3RSZXN1bHQgPSBuZXcgUmF5Y2FzdFJlc3VsdCgpO1xuXG4gICAgLyoqXG4gICAgICogV2hlZWwgd29ybGQgdHJhbnNmb3JtXG4gICAgICogQHByb3BlcnR5IHtUcmFuc2Zvcm19IHdvcmxkVHJhbnNmb3JtXG4gICAgICovXG4gICAgdGhpcy53b3JsZFRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0oKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNJbkNvbnRhY3RcbiAgICAgKi9cbiAgICB0aGlzLmlzSW5Db250YWN0ID0gZmFsc2U7XG59XG5cbnZhciBjaGFzc2lzX3ZlbG9jaXR5X2F0X2NvbnRhY3RQb2ludCA9IG5ldyBWZWMzKCk7XG52YXIgcmVscG9zID0gbmV3IFZlYzMoKTtcbnZhciBjaGFzc2lzX3ZlbG9jaXR5X2F0X2NvbnRhY3RQb2ludCA9IG5ldyBWZWMzKCk7XG5XaGVlbEluZm8ucHJvdG90eXBlLnVwZGF0ZVdoZWVsID0gZnVuY3Rpb24oY2hhc3Npcyl7XG4gICAgdmFyIHJheWNhc3RSZXN1bHQgPSB0aGlzLnJheWNhc3RSZXN1bHQ7XG5cbiAgICBpZiAodGhpcy5pc0luQ29udGFjdCl7XG4gICAgICAgIHZhciBwcm9qZWN0PSByYXljYXN0UmVzdWx0LmhpdE5vcm1hbFdvcmxkLmRvdChyYXljYXN0UmVzdWx0LmRpcmVjdGlvbldvcmxkKTtcbiAgICAgICAgcmF5Y2FzdFJlc3VsdC5oaXRQb2ludFdvcmxkLnZzdWIoY2hhc3Npcy5wb3NpdGlvbiwgcmVscG9zKTtcbiAgICAgICAgY2hhc3Npcy5nZXRWZWxvY2l0eUF0V29ybGRQb2ludChyZWxwb3MsIGNoYXNzaXNfdmVsb2NpdHlfYXRfY29udGFjdFBvaW50KTtcbiAgICAgICAgdmFyIHByb2pWZWwgPSByYXljYXN0UmVzdWx0LmhpdE5vcm1hbFdvcmxkLmRvdCggY2hhc3Npc192ZWxvY2l0eV9hdF9jb250YWN0UG9pbnQgKTtcbiAgICAgICAgaWYgKHByb2plY3QgPj0gLTAuMSkge1xuICAgICAgICAgICAgdGhpcy5zdXNwZW5zaW9uUmVsYXRpdmVWZWxvY2l0eSA9IDAuMDtcbiAgICAgICAgICAgIHRoaXMuY2xpcHBlZEludkNvbnRhY3REb3RTdXNwZW5zaW9uID0gMS4wIC8gMC4xO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGludiA9IC0xIC8gcHJvamVjdDtcbiAgICAgICAgICAgIHRoaXMuc3VzcGVuc2lvblJlbGF0aXZlVmVsb2NpdHkgPSBwcm9qVmVsICogaW52O1xuICAgICAgICAgICAgdGhpcy5jbGlwcGVkSW52Q29udGFjdERvdFN1c3BlbnNpb24gPSBpbnY7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE5vdCBpbiBjb250YWN0IDogcG9zaXRpb24gd2hlZWwgaW4gYSBuaWNlIChyZXN0IGxlbmd0aCkgcG9zaXRpb25cbiAgICAgICAgcmF5Y2FzdFJlc3VsdC5zdXNwZW5zaW9uTGVuZ3RoID0gdGhpcy5zdXNwZW5zaW9uUmVzdExlbmd0aDtcbiAgICAgICAgdGhpcy5zdXNwZW5zaW9uUmVsYXRpdmVWZWxvY2l0eSA9IDAuMDtcbiAgICAgICAgcmF5Y2FzdFJlc3VsdC5kaXJlY3Rpb25Xb3JsZC5zY2FsZSgtMSwgcmF5Y2FzdFJlc3VsdC5oaXROb3JtYWxXb3JsZCk7XG4gICAgICAgIHRoaXMuY2xpcHBlZEludkNvbnRhY3REb3RTdXNwZW5zaW9uID0gMS4wO1xuICAgIH1cbn07XG59LHtcIi4uL2NvbGxpc2lvbi9SYXljYXN0UmVzdWx0XCI6MTAsXCIuLi9tYXRoL1RyYW5zZm9ybVwiOjI5LFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuLi91dGlscy9VdGlsc1wiOjUzfV0sMzc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBCb3g7XG5cbnZhciBTaGFwZSA9IF9kZXJlcV8oJy4vU2hhcGUnKTtcbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG52YXIgQ29udmV4UG9seWhlZHJvbiA9IF9kZXJlcV8oJy4vQ29udmV4UG9seWhlZHJvbicpO1xuXG4vKipcbiAqIEEgM2QgYm94IHNoYXBlLlxuICogQGNsYXNzIEJveFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1ZlYzN9IGhhbGZFeHRlbnRzXG4gKiBAYXV0aG9yIHNjaHRlcHBlXG4gKiBAZXh0ZW5kcyBTaGFwZVxuICovXG5mdW5jdGlvbiBCb3goaGFsZkV4dGVudHMpe1xuICAgIFNoYXBlLmNhbGwodGhpcyk7XG5cbiAgICB0aGlzLnR5cGUgPSBTaGFwZS50eXBlcy5CT1g7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgaGFsZkV4dGVudHNcbiAgICAgKiBAdHlwZSB7VmVjM31cbiAgICAgKi9cbiAgICB0aGlzLmhhbGZFeHRlbnRzID0gaGFsZkV4dGVudHM7XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IHRoZSBjb250YWN0IGdlbmVyYXRvciB0byBtYWtlIGNvbnRhY3RzIHdpdGggb3RoZXIgY29udmV4IHBvbHloZWRyYSBmb3IgZXhhbXBsZVxuICAgICAqIEBwcm9wZXJ0eSBjb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb25cbiAgICAgKiBAdHlwZSB7Q29udmV4UG9seWhlZHJvbn1cbiAgICAgKi9cbiAgICB0aGlzLmNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbiA9IG51bGw7XG5cbiAgICB0aGlzLnVwZGF0ZUNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbigpO1xuICAgIHRoaXMudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMoKTtcbn1cbkJveC5wcm90b3R5cGUgPSBuZXcgU2hhcGUoKTtcbkJveC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCb3g7XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgbG9jYWwgY29udmV4IHBvbHloZWRyb24gcmVwcmVzZW50YXRpb24gdXNlZCBmb3Igc29tZSBjb2xsaXNpb25zLlxuICogQG1ldGhvZCB1cGRhdGVDb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb25cbiAqL1xuQm94LnByb3RvdHlwZS51cGRhdGVDb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24gPSBmdW5jdGlvbigpe1xuICAgIHZhciBzeCA9IHRoaXMuaGFsZkV4dGVudHMueDtcbiAgICB2YXIgc3kgPSB0aGlzLmhhbGZFeHRlbnRzLnk7XG4gICAgdmFyIHN6ID0gdGhpcy5oYWxmRXh0ZW50cy56O1xuICAgIHZhciBWID0gVmVjMztcblxuICAgIHZhciB2ZXJ0aWNlcyA9IFtcbiAgICAgICAgbmV3IFYoLXN4LC1zeSwtc3opLFxuICAgICAgICBuZXcgViggc3gsLXN5LC1zeiksXG4gICAgICAgIG5ldyBWKCBzeCwgc3ksLXN6KSxcbiAgICAgICAgbmV3IFYoLXN4LCBzeSwtc3opLFxuICAgICAgICBuZXcgVigtc3gsLXN5LCBzeiksXG4gICAgICAgIG5ldyBWKCBzeCwtc3ksIHN6KSxcbiAgICAgICAgbmV3IFYoIHN4LCBzeSwgc3opLFxuICAgICAgICBuZXcgVigtc3gsIHN5LCBzeilcbiAgICBdO1xuXG4gICAgdmFyIGluZGljZXMgPSBbXG4gICAgICAgIFszLDIsMSwwXSwgLy8gLXpcbiAgICAgICAgWzQsNSw2LDddLCAvLyArelxuICAgICAgICBbNSw0LDAsMV0sIC8vIC15XG4gICAgICAgIFsyLDMsNyw2XSwgLy8gK3lcbiAgICAgICAgWzAsNCw3LDNdLCAvLyAteFxuICAgICAgICBbMSwyLDYsNV0sIC8vICt4XG4gICAgXTtcblxuICAgIHZhciBheGVzID0gW1xuICAgICAgICBuZXcgVigwLCAwLCAxKSxcbiAgICAgICAgbmV3IFYoMCwgMSwgMCksXG4gICAgICAgIG5ldyBWKDEsIDAsIDApXG4gICAgXTtcblxuICAgIHZhciBoID0gbmV3IENvbnZleFBvbHloZWRyb24odmVydGljZXMsIGluZGljZXMpO1xuICAgIHRoaXMuY29udmV4UG9seWhlZHJvblJlcHJlc2VudGF0aW9uID0gaDtcbiAgICBoLm1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBjYWxjdWxhdGVMb2NhbEluZXJ0aWFcbiAqIEBwYXJhbSAge051bWJlcn0gbWFzc1xuICogQHBhcmFtICB7VmVjM30gdGFyZ2V0XG4gKiBAcmV0dXJuIHtWZWMzfVxuICovXG5Cb3gucHJvdG90eXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYSA9IGZ1bmN0aW9uKG1hc3MsdGFyZ2V0KXtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFZlYzMoKTtcbiAgICBCb3guY2FsY3VsYXRlSW5lcnRpYSh0aGlzLmhhbGZFeHRlbnRzLCBtYXNzLCB0YXJnZXQpO1xuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuXG5Cb3guY2FsY3VsYXRlSW5lcnRpYSA9IGZ1bmN0aW9uKGhhbGZFeHRlbnRzLG1hc3MsdGFyZ2V0KXtcbiAgICB2YXIgZSA9IGhhbGZFeHRlbnRzO1xuICAgIHRhcmdldC54ID0gMS4wIC8gMTIuMCAqIG1hc3MgKiAoICAgMiplLnkqMiplLnkgKyAyKmUueioyKmUueiApO1xuICAgIHRhcmdldC55ID0gMS4wIC8gMTIuMCAqIG1hc3MgKiAoICAgMiplLngqMiplLnggKyAyKmUueioyKmUueiApO1xuICAgIHRhcmdldC56ID0gMS4wIC8gMTIuMCAqIG1hc3MgKiAoICAgMiplLnkqMiplLnkgKyAyKmUueCoyKmUueCApO1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGJveCA2IHNpZGUgbm9ybWFsc1xuICogQG1ldGhvZCBnZXRTaWRlTm9ybWFsc1xuICogQHBhcmFtIHthcnJheX0gICAgICBzaXhUYXJnZXRWZWN0b3JzIEFuIGFycmF5IG9mIDYgdmVjdG9ycywgdG8gc3RvcmUgdGhlIHJlc3VsdGluZyBzaWRlIG5vcm1hbHMgaW4uXG4gKiBAcGFyYW0ge1F1YXRlcm5pb259IHF1YXQgICAgICAgICAgICAgT3JpZW50YXRpb24gdG8gYXBwbHkgdG8gdGhlIG5vcm1hbCB2ZWN0b3JzLiBJZiBub3QgcHJvdmlkZWQsIHRoZSB2ZWN0b3JzIHdpbGwgYmUgaW4gcmVzcGVjdCB0byB0aGUgbG9jYWwgZnJhbWUuXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuQm94LnByb3RvdHlwZS5nZXRTaWRlTm9ybWFscyA9IGZ1bmN0aW9uKHNpeFRhcmdldFZlY3RvcnMscXVhdCl7XG4gICAgdmFyIHNpZGVzID0gc2l4VGFyZ2V0VmVjdG9ycztcbiAgICB2YXIgZXggPSB0aGlzLmhhbGZFeHRlbnRzO1xuICAgIHNpZGVzWzBdLnNldCggIGV4LngsICAgICAwLCAgICAgMCk7XG4gICAgc2lkZXNbMV0uc2V0KCAgICAgMCwgIGV4LnksICAgICAwKTtcbiAgICBzaWRlc1syXS5zZXQoICAgICAwLCAgICAgMCwgIGV4LnopO1xuICAgIHNpZGVzWzNdLnNldCggLWV4LngsICAgICAwLCAgICAgMCk7XG4gICAgc2lkZXNbNF0uc2V0KCAgICAgMCwgLWV4LnksICAgICAwKTtcbiAgICBzaWRlc1s1XS5zZXQoICAgICAwLCAgICAgMCwgLWV4LnopO1xuXG4gICAgaWYocXVhdCE9PXVuZGVmaW5lZCl7XG4gICAgICAgIGZvcih2YXIgaT0wOyBpIT09c2lkZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgcXVhdC52bXVsdChzaWRlc1tpXSxzaWRlc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2lkZXM7XG59O1xuXG5Cb3gucHJvdG90eXBlLnZvbHVtZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIDguMCAqIHRoaXMuaGFsZkV4dGVudHMueCAqIHRoaXMuaGFsZkV4dGVudHMueSAqIHRoaXMuaGFsZkV4dGVudHMuejtcbn07XG5cbkJveC5wcm90b3R5cGUudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMgPSBmdW5jdGlvbigpe1xuICAgIHRoaXMuYm91bmRpbmdTcGhlcmVSYWRpdXMgPSB0aGlzLmhhbGZFeHRlbnRzLm5vcm0oKTtcbn07XG5cbnZhciB3b3JsZENvcm5lclRlbXBQb3MgPSBuZXcgVmVjMygpO1xudmFyIHdvcmxkQ29ybmVyVGVtcE5lZyA9IG5ldyBWZWMzKCk7XG5Cb3gucHJvdG90eXBlLmZvckVhY2hXb3JsZENvcm5lciA9IGZ1bmN0aW9uKHBvcyxxdWF0LGNhbGxiYWNrKXtcblxuICAgIHZhciBlID0gdGhpcy5oYWxmRXh0ZW50cztcbiAgICB2YXIgY29ybmVycyA9IFtbICBlLngsICBlLnksICBlLnpdLFxuICAgICAgICAgICAgICAgICAgIFsgLWUueCwgIGUueSwgIGUuel0sXG4gICAgICAgICAgICAgICAgICAgWyAtZS54LCAtZS55LCAgZS56XSxcbiAgICAgICAgICAgICAgICAgICBbIC1lLngsIC1lLnksIC1lLnpdLFxuICAgICAgICAgICAgICAgICAgIFsgIGUueCwgLWUueSwgLWUuel0sXG4gICAgICAgICAgICAgICAgICAgWyAgZS54LCAgZS55LCAtZS56XSxcbiAgICAgICAgICAgICAgICAgICBbIC1lLngsICBlLnksIC1lLnpdLFxuICAgICAgICAgICAgICAgICAgIFsgIGUueCwgLWUueSwgIGUuel1dO1xuICAgIGZvcih2YXIgaT0wOyBpPGNvcm5lcnMubGVuZ3RoOyBpKyspe1xuICAgICAgICB3b3JsZENvcm5lclRlbXBQb3Muc2V0KGNvcm5lcnNbaV1bMF0sY29ybmVyc1tpXVsxXSxjb3JuZXJzW2ldWzJdKTtcbiAgICAgICAgcXVhdC52bXVsdCh3b3JsZENvcm5lclRlbXBQb3Msd29ybGRDb3JuZXJUZW1wUG9zKTtcbiAgICAgICAgcG9zLnZhZGQod29ybGRDb3JuZXJUZW1wUG9zLHdvcmxkQ29ybmVyVGVtcFBvcyk7XG4gICAgICAgIGNhbGxiYWNrKHdvcmxkQ29ybmVyVGVtcFBvcy54LFxuICAgICAgICAgICAgICAgICB3b3JsZENvcm5lclRlbXBQb3MueSxcbiAgICAgICAgICAgICAgICAgd29ybGRDb3JuZXJUZW1wUG9zLnopO1xuICAgIH1cbn07XG5cbnZhciB3b3JsZENvcm5lcnNUZW1wID0gW1xuICAgIG5ldyBWZWMzKCksXG4gICAgbmV3IFZlYzMoKSxcbiAgICBuZXcgVmVjMygpLFxuICAgIG5ldyBWZWMzKCksXG4gICAgbmV3IFZlYzMoKSxcbiAgICBuZXcgVmVjMygpLFxuICAgIG5ldyBWZWMzKCksXG4gICAgbmV3IFZlYzMoKVxuXTtcbkJveC5wcm90b3R5cGUuY2FsY3VsYXRlV29ybGRBQUJCID0gZnVuY3Rpb24ocG9zLHF1YXQsbWluLG1heCl7XG5cbiAgICB2YXIgZSA9IHRoaXMuaGFsZkV4dGVudHM7XG4gICAgd29ybGRDb3JuZXJzVGVtcFswXS5zZXQoZS54LCBlLnksIGUueik7XG4gICAgd29ybGRDb3JuZXJzVGVtcFsxXS5zZXQoLWUueCwgIGUueSwgZS56KTtcbiAgICB3b3JsZENvcm5lcnNUZW1wWzJdLnNldCgtZS54LCAtZS55LCBlLnopO1xuICAgIHdvcmxkQ29ybmVyc1RlbXBbM10uc2V0KC1lLngsIC1lLnksIC1lLnopO1xuICAgIHdvcmxkQ29ybmVyc1RlbXBbNF0uc2V0KGUueCwgLWUueSwgLWUueik7XG4gICAgd29ybGRDb3JuZXJzVGVtcFs1XS5zZXQoZS54LCAgZS55LCAtZS56KTtcbiAgICB3b3JsZENvcm5lcnNUZW1wWzZdLnNldCgtZS54LCAgZS55LCAtZS56KTtcbiAgICB3b3JsZENvcm5lcnNUZW1wWzddLnNldChlLngsIC1lLnksICBlLnopO1xuXG4gICAgdmFyIHdjID0gd29ybGRDb3JuZXJzVGVtcFswXTtcbiAgICBxdWF0LnZtdWx0KHdjLCB3Yyk7XG4gICAgcG9zLnZhZGQod2MsIHdjKTtcbiAgICBtYXguY29weSh3Yyk7XG4gICAgbWluLmNvcHkod2MpO1xuICAgIGZvcih2YXIgaT0xOyBpPDg7IGkrKyl7XG4gICAgICAgIHZhciB3YyA9IHdvcmxkQ29ybmVyc1RlbXBbaV07XG4gICAgICAgIHF1YXQudm11bHQod2MsIHdjKTtcbiAgICAgICAgcG9zLnZhZGQod2MsIHdjKTtcbiAgICAgICAgdmFyIHggPSB3Yy54O1xuICAgICAgICB2YXIgeSA9IHdjLnk7XG4gICAgICAgIHZhciB6ID0gd2MuejtcbiAgICAgICAgaWYoeCA+IG1heC54KXtcbiAgICAgICAgICAgIG1heC54ID0geDtcbiAgICAgICAgfVxuICAgICAgICBpZih5ID4gbWF4Lnkpe1xuICAgICAgICAgICAgbWF4LnkgPSB5O1xuICAgICAgICB9XG4gICAgICAgIGlmKHogPiBtYXgueil7XG4gICAgICAgICAgICBtYXgueiA9IHo7XG4gICAgICAgIH1cblxuICAgICAgICBpZih4IDwgbWluLngpe1xuICAgICAgICAgICAgbWluLnggPSB4O1xuICAgICAgICB9XG4gICAgICAgIGlmKHkgPCBtaW4ueSl7XG4gICAgICAgICAgICBtaW4ueSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoeiA8IG1pbi56KXtcbiAgICAgICAgICAgIG1pbi56ID0gejtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCBlYWNoIGF4aXMgbWF4XG4gICAgLy8gbWluLnNldChJbmZpbml0eSxJbmZpbml0eSxJbmZpbml0eSk7XG4gICAgLy8gbWF4LnNldCgtSW5maW5pdHksLUluZmluaXR5LC1JbmZpbml0eSk7XG4gICAgLy8gdGhpcy5mb3JFYWNoV29ybGRDb3JuZXIocG9zLHF1YXQsZnVuY3Rpb24oeCx5LHope1xuICAgIC8vICAgICBpZih4ID4gbWF4Lngpe1xuICAgIC8vICAgICAgICAgbWF4LnggPSB4O1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGlmKHkgPiBtYXgueSl7XG4gICAgLy8gICAgICAgICBtYXgueSA9IHk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgaWYoeiA+IG1heC56KXtcbiAgICAvLyAgICAgICAgIG1heC56ID0gejtcbiAgICAvLyAgICAgfVxuXG4gICAgLy8gICAgIGlmKHggPCBtaW4ueCl7XG4gICAgLy8gICAgICAgICBtaW4ueCA9IHg7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgaWYoeSA8IG1pbi55KXtcbiAgICAvLyAgICAgICAgIG1pbi55ID0geTtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICBpZih6IDwgbWluLnope1xuICAgIC8vICAgICAgICAgbWluLnogPSB6O1xuICAgIC8vICAgICB9XG4gICAgLy8gfSk7XG59O1xuXG59LHtcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi9Db252ZXhQb2x5aGVkcm9uXCI6MzgsXCIuL1NoYXBlXCI6NDN9XSwzODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IENvbnZleFBvbHloZWRyb247XG5cbnZhciBTaGFwZSA9IF9kZXJlcV8oJy4vU2hhcGUnKTtcbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG52YXIgUXVhdGVybmlvbiA9IF9kZXJlcV8oJy4uL21hdGgvUXVhdGVybmlvbicpO1xudmFyIFRyYW5zZm9ybSA9IF9kZXJlcV8oJy4uL21hdGgvVHJhbnNmb3JtJyk7XG5cbi8qKlxuICogQSBzZXQgb2YgcG9seWdvbnMgZGVzY3JpYmluZyBhIGNvbnZleCBzaGFwZS5cbiAqIEBjbGFzcyBDb252ZXhQb2x5aGVkcm9uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFNoYXBlXG4gKiBAZGVzY3JpcHRpb24gVGhlIHNoYXBlIE1VU1QgYmUgY29udmV4IGZvciB0aGUgY29kZSB0byB3b3JrIHByb3Blcmx5LiBObyBwb2x5Z29ucyBtYXkgYmUgY29wbGFuYXIgKGNvbnRhaW5lZFxuICogaW4gdGhlIHNhbWUgM0QgcGxhbmUpLCBpbnN0ZWFkIHRoZXNlIHNob3VsZCBiZSBtZXJnZWQgaW50byBvbmUgcG9seWdvbi5cbiAqXG4gKiBAcGFyYW0ge2FycmF5fSBwb2ludHMgQW4gYXJyYXkgb2YgVmVjMydzXG4gKiBAcGFyYW0ge2FycmF5fSBmYWNlcyBBcnJheSBvZiBpbnRlZ2VyIGFycmF5cywgZGVzY3JpYmluZyB3aGljaCB2ZXJ0aWNlcyB0aGF0IGlzIGluY2x1ZGVkIGluIGVhY2ggZmFjZS5cbiAqXG4gKiBAYXV0aG9yIHFpYW8gLyBodHRwczovL2dpdGh1Yi5jb20vcWlhbyAob3JpZ2luYWwgYXV0aG9yLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3FpYW8vdGhyZWUuanMvY29tbWl0Lzg1MDI2ZjBjNzY5ZTQwMDAxNDhhNjdkNDVhOWU5YjljNTEwODgzNmYpXG4gKiBAYXV0aG9yIHNjaHRlcHBlIC8gaHR0cHM6Ly9naXRodWIuY29tL3NjaHRlcHBlXG4gKiBAc2VlIGh0dHA6Ly93d3cuYWx0ZGV2YmxvZ2FkYXkuY29tLzIwMTEvMDUvMTMvY29udGFjdC1nZW5lcmF0aW9uLWJldHdlZW4tM2QtY29udmV4LW1lc2hlcy9cbiAqIEBzZWUgaHR0cDovL2J1bGxldC5nb29nbGVjb2RlLmNvbS9zdm4vdHJ1bmsvc3JjL0J1bGxldENvbGxpc2lvbi9OYXJyb3dQaGFzZUNvbGxpc2lvbi9idFBvbHloZWRyYWxDb250YWN0Q2xpcHBpbmcuY3BwXG4gKlxuICogQHRvZG8gTW92ZSB0aGUgY2xpcHBpbmcgZnVuY3Rpb25zIHRvIENvbnRhY3RHZW5lcmF0b3I/XG4gKiBAdG9kbyBBdXRvbWF0aWNhbGx5IG1lcmdlIGNvcGxhbmFyIHBvbHlnb25zIGluIGNvbnN0cnVjdG9yLlxuICovXG5mdW5jdGlvbiBDb252ZXhQb2x5aGVkcm9uKHBvaW50cywgZmFjZXMsIHVuaXF1ZUF4ZXMpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgU2hhcGUuY2FsbCh0aGlzKTtcbiAgICB0aGlzLnR5cGUgPSBTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgVmVjM1xuICAgICAqIEBwcm9wZXJ0eSB2ZXJ0aWNlc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2VzID0gcG9pbnRzfHxbXTtcblxuICAgIHRoaXMud29ybGRWZXJ0aWNlcyA9IFtdOyAvLyBXb3JsZCB0cmFuc2Zvcm1lZCB2ZXJzaW9uIG9mIC52ZXJ0aWNlc1xuICAgIHRoaXMud29ybGRWZXJ0aWNlc05lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIGludGVnZXIgYXJyYXlzLCBpbmRpY2F0aW5nIHdoaWNoIHZlcnRpY2VzIGVhY2ggZmFjZSBjb25zaXN0cyBvZlxuICAgICAqIEBwcm9wZXJ0eSBmYWNlc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmZhY2VzID0gZmFjZXN8fFtdO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgVmVjM1xuICAgICAqIEBwcm9wZXJ0eSBmYWNlTm9ybWFsc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmZhY2VOb3JtYWxzID0gW107XG4gICAgdGhpcy5jb21wdXRlTm9ybWFscygpO1xuXG4gICAgdGhpcy53b3JsZEZhY2VOb3JtYWxzTmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgIHRoaXMud29ybGRGYWNlTm9ybWFscyA9IFtdOyAvLyBXb3JsZCB0cmFuc2Zvcm1lZCB2ZXJzaW9uIG9mIC5mYWNlTm9ybWFsc1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgVmVjM1xuICAgICAqIEBwcm9wZXJ0eSB1bmlxdWVFZGdlc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLnVuaXF1ZUVkZ2VzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBJZiBnaXZlbiwgdGhlc2UgbG9jYWxseSBkZWZpbmVkLCBub3JtYWxpemVkIGF4ZXMgYXJlIHRoZSBvbmx5IG9uZXMgYmVpbmcgY2hlY2tlZCB3aGVuIGRvaW5nIHNlcGFyYXRpbmcgYXhpcyBjaGVjay5cbiAgICAgKiBAcHJvcGVydHkge0FycmF5fSB1bmlxdWVBeGVzXG4gICAgICovXG4gICAgdGhpcy51bmlxdWVBeGVzID0gdW5pcXVlQXhlcyA/IHVuaXF1ZUF4ZXMuc2xpY2UoKSA6IG51bGw7XG5cbiAgICB0aGlzLmNvbXB1dGVFZGdlcygpO1xuICAgIHRoaXMudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMoKTtcbn1cbkNvbnZleFBvbHloZWRyb24ucHJvdG90eXBlID0gbmV3IFNoYXBlKCk7XG5Db252ZXhQb2x5aGVkcm9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnZleFBvbHloZWRyb247XG5cbnZhciBjb21wdXRlRWRnZXNfdG1wRWRnZSA9IG5ldyBWZWMzKCk7XG4vKipcbiAqIENvbXB1dGVzIHVuaXF1ZUVkZ2VzXG4gKiBAbWV0aG9kIGNvbXB1dGVFZGdlc1xuICovXG5Db252ZXhQb2x5aGVkcm9uLnByb3RvdHlwZS5jb21wdXRlRWRnZXMgPSBmdW5jdGlvbigpe1xuICAgIHZhciBmYWNlcyA9IHRoaXMuZmFjZXM7XG4gICAgdmFyIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcztcbiAgICB2YXIgbnYgPSB2ZXJ0aWNlcy5sZW5ndGg7XG4gICAgdmFyIGVkZ2VzID0gdGhpcy51bmlxdWVFZGdlcztcblxuICAgIGVkZ2VzLmxlbmd0aCA9IDA7XG5cbiAgICB2YXIgZWRnZSA9IGNvbXB1dGVFZGdlc190bXBFZGdlO1xuXG4gICAgZm9yKHZhciBpPTA7IGkgIT09IGZhY2VzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdmFyIGZhY2UgPSBmYWNlc1tpXTtcbiAgICAgICAgdmFyIG51bVZlcnRpY2VzID0gZmFjZS5sZW5ndGg7XG4gICAgICAgIGZvcih2YXIgaiA9IDA7IGogIT09IG51bVZlcnRpY2VzOyBqKyspe1xuICAgICAgICAgICAgdmFyIGsgPSAoIGorMSApICUgbnVtVmVydGljZXM7XG4gICAgICAgICAgICB2ZXJ0aWNlc1tmYWNlW2pdXS52c3ViKHZlcnRpY2VzW2ZhY2Vba11dLCBlZGdlKTtcbiAgICAgICAgICAgIGVkZ2Uubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvcih2YXIgcD0wOyBwICE9PSBlZGdlcy5sZW5ndGg7IHArKyl7XG4gICAgICAgICAgICAgICAgaWYgKGVkZ2VzW3BdLmFsbW9zdEVxdWFscyhlZGdlKSB8fCBlZGdlc1twXS5hbG1vc3RFcXVhbHMoZWRnZSkpe1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFmb3VuZCl7XG4gICAgICAgICAgICAgICAgZWRnZXMucHVzaChlZGdlLmNsb25lKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBub3JtYWxzIG9mIHRoZSBmYWNlcy4gV2lsbCByZXVzZSBleGlzdGluZyBWZWMzIG9iamVjdHMgaW4gdGhlIC5mYWNlTm9ybWFscyBhcnJheSBpZiB0aGV5IGV4aXN0LlxuICogQG1ldGhvZCBjb21wdXRlTm9ybWFsc1xuICovXG5Db252ZXhQb2x5aGVkcm9uLnByb3RvdHlwZS5jb21wdXRlTm9ybWFscyA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5mYWNlTm9ybWFscy5sZW5ndGggPSB0aGlzLmZhY2VzLmxlbmd0aDtcblxuICAgIC8vIEdlbmVyYXRlIG5vcm1hbHNcbiAgICBmb3IodmFyIGk9MDsgaTx0aGlzLmZhY2VzLmxlbmd0aDsgaSsrKXtcblxuICAgICAgICAvLyBDaGVjayBzbyBhbGwgdmVydGljZXMgZXhpc3RzIGZvciB0aGlzIGZhY2VcbiAgICAgICAgZm9yKHZhciBqPTA7IGo8dGhpcy5mYWNlc1tpXS5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICBpZighdGhpcy52ZXJ0aWNlc1t0aGlzLmZhY2VzW2ldW2pdXSl7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmVydGV4IFwiK3RoaXMuZmFjZXNbaV1bal0rXCIgbm90IGZvdW5kIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuID0gdGhpcy5mYWNlTm9ybWFsc1tpXSB8fCBuZXcgVmVjMygpO1xuICAgICAgICB0aGlzLmdldEZhY2VOb3JtYWwoaSxuKTtcbiAgICAgICAgbi5uZWdhdGUobik7XG4gICAgICAgIHRoaXMuZmFjZU5vcm1hbHNbaV0gPSBuO1xuICAgICAgICB2YXIgdmVydGV4ID0gdGhpcy52ZXJ0aWNlc1t0aGlzLmZhY2VzW2ldWzBdXTtcbiAgICAgICAgaWYobi5kb3QodmVydGV4KSA8IDApe1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIi5mYWNlTm9ybWFsc1tcIiArIGkgKyBcIl0gPSBWZWMzKFwiK24udG9TdHJpbmcoKStcIikgbG9va3MgbGlrZSBpdCBwb2ludHMgaW50byB0aGUgc2hhcGU/IFRoZSB2ZXJ0aWNlcyBmb2xsb3cuIE1ha2Ugc3VyZSB0aGV5IGFyZSBvcmRlcmVkIENDVyBhcm91bmQgdGhlIG5vcm1hbCwgdXNpbmcgdGhlIHJpZ2h0IGhhbmQgcnVsZS5cIik7XG4gICAgICAgICAgICBmb3IodmFyIGo9MDsgajx0aGlzLmZhY2VzW2ldLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCIudmVydGljZXNbXCIrdGhpcy5mYWNlc1tpXVtqXStcIl0gPSBWZWMzKFwiK3RoaXMudmVydGljZXNbdGhpcy5mYWNlc1tpXVtqXV0udG9TdHJpbmcoKStcIilcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKipcbiAqIEdldCBmYWNlIG5vcm1hbCBnaXZlbiAzIHZlcnRpY2VzXG4gKiBAc3RhdGljXG4gKiBAbWV0aG9kIGdldEZhY2VOb3JtYWxcbiAqIEBwYXJhbSB7VmVjM30gdmFcbiAqIEBwYXJhbSB7VmVjM30gdmJcbiAqIEBwYXJhbSB7VmVjM30gdmNcbiAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0XG4gKi9cbnZhciBjYiA9IG5ldyBWZWMzKCk7XG52YXIgYWIgPSBuZXcgVmVjMygpO1xuQ29udmV4UG9seWhlZHJvbi5jb21wdXRlTm9ybWFsID0gZnVuY3Rpb24gKCB2YSwgdmIsIHZjLCB0YXJnZXQgKSB7XG4gICAgdmIudnN1Yih2YSxhYik7XG4gICAgdmMudnN1Yih2YixjYik7XG4gICAgY2IuY3Jvc3MoYWIsdGFyZ2V0KTtcbiAgICBpZiAoICF0YXJnZXQuaXNaZXJvKCkgKSB7XG4gICAgICAgIHRhcmdldC5ub3JtYWxpemUoKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIG5vcm1hbCBvZiBhIGZhY2UgZnJvbSBpdHMgdmVydGljZXNcbiAqIEBtZXRob2QgZ2V0RmFjZU5vcm1hbFxuICogQHBhcmFtICB7TnVtYmVyfSBpXG4gKiBAcGFyYW0gIHtWZWMzfSB0YXJnZXRcbiAqL1xuQ29udmV4UG9seWhlZHJvbi5wcm90b3R5cGUuZ2V0RmFjZU5vcm1hbCA9IGZ1bmN0aW9uKGksdGFyZ2V0KXtcbiAgICB2YXIgZiA9IHRoaXMuZmFjZXNbaV07XG4gICAgdmFyIHZhID0gdGhpcy52ZXJ0aWNlc1tmWzBdXTtcbiAgICB2YXIgdmIgPSB0aGlzLnZlcnRpY2VzW2ZbMV1dO1xuICAgIHZhciB2YyA9IHRoaXMudmVydGljZXNbZlsyXV07XG4gICAgcmV0dXJuIENvbnZleFBvbHloZWRyb24uY29tcHV0ZU5vcm1hbCh2YSx2Yix2Yyx0YXJnZXQpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIGNsaXBBZ2FpbnN0SHVsbFxuICogQHBhcmFtIHtWZWMzfSBwb3NBXG4gKiBAcGFyYW0ge1F1YXRlcm5pb259IHF1YXRBXG4gKiBAcGFyYW0ge0NvbnZleFBvbHloZWRyb259IGh1bGxCXG4gKiBAcGFyYW0ge1ZlYzN9IHBvc0JcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcXVhdEJcbiAqIEBwYXJhbSB7VmVjM30gc2VwYXJhdGluZ05vcm1hbFxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbkRpc3QgQ2xhbXAgZGlzdGFuY2VcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEaXN0XG4gKiBAcGFyYW0ge2FycmF5fSByZXN1bHQgVGhlIGFuIGFycmF5IG9mIGNvbnRhY3QgcG9pbnQgb2JqZWN0cywgc2VlIGNsaXBGYWNlQWdhaW5zdEh1bGxcbiAqIEBzZWUgaHR0cDovL2J1bGxldC5nb29nbGVjb2RlLmNvbS9zdm4vdHJ1bmsvc3JjL0J1bGxldENvbGxpc2lvbi9OYXJyb3dQaGFzZUNvbGxpc2lvbi9idFBvbHloZWRyYWxDb250YWN0Q2xpcHBpbmcuY3BwXG4gKi9cbnZhciBjYWhfV29ybGROb3JtYWwgPSBuZXcgVmVjMygpO1xuQ29udmV4UG9seWhlZHJvbi5wcm90b3R5cGUuY2xpcEFnYWluc3RIdWxsID0gZnVuY3Rpb24ocG9zQSxxdWF0QSxodWxsQixwb3NCLHF1YXRCLHNlcGFyYXRpbmdOb3JtYWwsbWluRGlzdCxtYXhEaXN0LHJlc3VsdCl7XG4gICAgdmFyIFdvcmxkTm9ybWFsID0gY2FoX1dvcmxkTm9ybWFsO1xuICAgIHZhciBodWxsQSA9IHRoaXM7XG4gICAgdmFyIGN1ck1heERpc3QgPSBtYXhEaXN0O1xuICAgIHZhciBjbG9zZXN0RmFjZUIgPSAtMTtcbiAgICB2YXIgZG1heCA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuICAgIGZvcih2YXIgZmFjZT0wOyBmYWNlIDwgaHVsbEIuZmFjZXMubGVuZ3RoOyBmYWNlKyspe1xuICAgICAgICBXb3JsZE5vcm1hbC5jb3B5KGh1bGxCLmZhY2VOb3JtYWxzW2ZhY2VdKTtcbiAgICAgICAgcXVhdEIudm11bHQoV29ybGROb3JtYWwsV29ybGROb3JtYWwpO1xuICAgICAgICAvL3Bvc0IudmFkZChXb3JsZE5vcm1hbCxXb3JsZE5vcm1hbCk7XG4gICAgICAgIHZhciBkID0gV29ybGROb3JtYWwuZG90KHNlcGFyYXRpbmdOb3JtYWwpO1xuICAgICAgICBpZiAoZCA+IGRtYXgpe1xuICAgICAgICAgICAgZG1heCA9IGQ7XG4gICAgICAgICAgICBjbG9zZXN0RmFjZUIgPSBmYWNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciB3b3JsZFZlcnRzQjEgPSBbXTtcbiAgICB2YXIgcG9seUIgPSBodWxsQi5mYWNlc1tjbG9zZXN0RmFjZUJdO1xuICAgIHZhciBudW1WZXJ0aWNlcyA9IHBvbHlCLmxlbmd0aDtcbiAgICBmb3IodmFyIGUwPTA7IGUwPG51bVZlcnRpY2VzOyBlMCsrKXtcbiAgICAgICAgdmFyIGIgPSBodWxsQi52ZXJ0aWNlc1twb2x5QltlMF1dO1xuICAgICAgICB2YXIgd29ybGRiID0gbmV3IFZlYzMoKTtcbiAgICAgICAgd29ybGRiLmNvcHkoYik7XG4gICAgICAgIHF1YXRCLnZtdWx0KHdvcmxkYix3b3JsZGIpO1xuICAgICAgICBwb3NCLnZhZGQod29ybGRiLHdvcmxkYik7XG4gICAgICAgIHdvcmxkVmVydHNCMS5wdXNoKHdvcmxkYik7XG4gICAgfVxuXG4gICAgaWYgKGNsb3Nlc3RGYWNlQj49MCl7XG4gICAgICAgIHRoaXMuY2xpcEZhY2VBZ2FpbnN0SHVsbChzZXBhcmF0aW5nTm9ybWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zQSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YXRBLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ybGRWZXJ0c0IxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluRGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heERpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQpO1xuICAgIH1cbn07XG5cbi8qKlxuICogRmluZCB0aGUgc2VwYXJhdGluZyBheGlzIGJldHdlZW4gdGhpcyBodWxsIGFuZCBhbm90aGVyXG4gKiBAbWV0aG9kIGZpbmRTZXBhcmF0aW5nQXhpc1xuICogQHBhcmFtIHtDb252ZXhQb2x5aGVkcm9ufSBodWxsQlxuICogQHBhcmFtIHtWZWMzfSBwb3NBXG4gKiBAcGFyYW0ge1F1YXRlcm5pb259IHF1YXRBXG4gKiBAcGFyYW0ge1ZlYzN9IHBvc0JcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcXVhdEJcbiAqIEBwYXJhbSB7VmVjM30gdGFyZ2V0IFRoZSB0YXJnZXQgdmVjdG9yIHRvIHNhdmUgdGhlIGF4aXMgaW5cbiAqIEByZXR1cm4ge2Jvb2x9IFJldHVybnMgZmFsc2UgaWYgYSBzZXBhcmF0aW9uIGlzIGZvdW5kLCBlbHNlIHRydWVcbiAqL1xudmFyIGZzYV9mYWNlQU5vcm1hbFdTMyA9IG5ldyBWZWMzKCksXG4gICAgZnNhX1dvcmxkbm9ybWFsMSA9IG5ldyBWZWMzKCksXG4gICAgZnNhX2RlbHRhQyA9IG5ldyBWZWMzKCksXG4gICAgZnNhX3dvcmxkRWRnZTAgPSBuZXcgVmVjMygpLFxuICAgIGZzYV93b3JsZEVkZ2UxID0gbmV3IFZlYzMoKSxcbiAgICBmc2FfQ3Jvc3MgPSBuZXcgVmVjMygpO1xuQ29udmV4UG9seWhlZHJvbi5wcm90b3R5cGUuZmluZFNlcGFyYXRpbmdBeGlzID0gZnVuY3Rpb24oaHVsbEIscG9zQSxxdWF0QSxwb3NCLHF1YXRCLHRhcmdldCwgZmFjZUxpc3RBLCBmYWNlTGlzdEIpe1xuICAgIHZhciBmYWNlQU5vcm1hbFdTMyA9IGZzYV9mYWNlQU5vcm1hbFdTMyxcbiAgICAgICAgV29ybGRub3JtYWwxID0gZnNhX1dvcmxkbm9ybWFsMSxcbiAgICAgICAgZGVsdGFDID0gZnNhX2RlbHRhQyxcbiAgICAgICAgd29ybGRFZGdlMCA9IGZzYV93b3JsZEVkZ2UwLFxuICAgICAgICB3b3JsZEVkZ2UxID0gZnNhX3dvcmxkRWRnZTEsXG4gICAgICAgIENyb3NzID0gZnNhX0Nyb3NzO1xuXG4gICAgdmFyIGRtaW4gPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgIHZhciBodWxsQSA9IHRoaXM7XG4gICAgdmFyIGN1clBsYW5lVGVzdHM9MDtcblxuICAgIGlmKCFodWxsQS51bmlxdWVBeGVzKXtcblxuICAgICAgICB2YXIgbnVtRmFjZXNBID0gZmFjZUxpc3RBID8gZmFjZUxpc3RBLmxlbmd0aCA6IGh1bGxBLmZhY2VzLmxlbmd0aDtcblxuICAgICAgICAvLyBUZXN0IGZhY2Ugbm9ybWFscyBmcm9tIGh1bGxBXG4gICAgICAgIGZvcih2YXIgaT0wOyBpPG51bUZhY2VzQTsgaSsrKXtcbiAgICAgICAgICAgIHZhciBmaSA9IGZhY2VMaXN0QSA/IGZhY2VMaXN0QVtpXSA6IGk7XG5cbiAgICAgICAgICAgIC8vIEdldCB3b3JsZCBmYWNlIG5vcm1hbFxuICAgICAgICAgICAgZmFjZUFOb3JtYWxXUzMuY29weShodWxsQS5mYWNlTm9ybWFsc1tmaV0pO1xuICAgICAgICAgICAgcXVhdEEudm11bHQoZmFjZUFOb3JtYWxXUzMsZmFjZUFOb3JtYWxXUzMpO1xuXG4gICAgICAgICAgICB2YXIgZCA9IGh1bGxBLnRlc3RTZXBBeGlzKGZhY2VBTm9ybWFsV1MzLCBodWxsQiwgcG9zQSwgcXVhdEEsIHBvc0IsIHF1YXRCKTtcbiAgICAgICAgICAgIGlmKGQ9PT1mYWxzZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihkPGRtaW4pe1xuICAgICAgICAgICAgICAgIGRtaW4gPSBkO1xuICAgICAgICAgICAgICAgIHRhcmdldC5jb3B5KGZhY2VBTm9ybWFsV1MzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIHtcblxuICAgICAgICAvLyBUZXN0IHVuaXF1ZSBheGVzXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgIT09IGh1bGxBLnVuaXF1ZUF4ZXMubGVuZ3RoOyBpKyspe1xuXG4gICAgICAgICAgICAvLyBHZXQgd29ybGQgYXhpc1xuICAgICAgICAgICAgcXVhdEEudm11bHQoaHVsbEEudW5pcXVlQXhlc1tpXSxmYWNlQU5vcm1hbFdTMyk7XG5cbiAgICAgICAgICAgIHZhciBkID0gaHVsbEEudGVzdFNlcEF4aXMoZmFjZUFOb3JtYWxXUzMsIGh1bGxCLCBwb3NBLCBxdWF0QSwgcG9zQiwgcXVhdEIpO1xuICAgICAgICAgICAgaWYoZD09PWZhbHNlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGQ8ZG1pbil7XG4gICAgICAgICAgICAgICAgZG1pbiA9IGQ7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmNvcHkoZmFjZUFOb3JtYWxXUzMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYoIWh1bGxCLnVuaXF1ZUF4ZXMpe1xuXG4gICAgICAgIC8vIFRlc3QgZmFjZSBub3JtYWxzIGZyb20gaHVsbEJcbiAgICAgICAgdmFyIG51bUZhY2VzQiA9IGZhY2VMaXN0QiA/IGZhY2VMaXN0Qi5sZW5ndGggOiBodWxsQi5mYWNlcy5sZW5ndGg7XG4gICAgICAgIGZvcih2YXIgaT0wO2k8bnVtRmFjZXNCO2krKyl7XG5cbiAgICAgICAgICAgIHZhciBmaSA9IGZhY2VMaXN0QiA/IGZhY2VMaXN0QltpXSA6IGk7XG5cbiAgICAgICAgICAgIFdvcmxkbm9ybWFsMS5jb3B5KGh1bGxCLmZhY2VOb3JtYWxzW2ZpXSk7XG4gICAgICAgICAgICBxdWF0Qi52bXVsdChXb3JsZG5vcm1hbDEsV29ybGRub3JtYWwxKTtcbiAgICAgICAgICAgIGN1clBsYW5lVGVzdHMrKztcbiAgICAgICAgICAgIHZhciBkID0gaHVsbEEudGVzdFNlcEF4aXMoV29ybGRub3JtYWwxLCBodWxsQixwb3NBLHF1YXRBLHBvc0IscXVhdEIpO1xuICAgICAgICAgICAgaWYoZD09PWZhbHNlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGQ8ZG1pbil7XG4gICAgICAgICAgICAgICAgZG1pbiA9IGQ7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmNvcHkoV29ybGRub3JtYWwxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG5cbiAgICAgICAgLy8gVGVzdCB1bmlxdWUgYXhlcyBpbiBCXG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgIT09IGh1bGxCLnVuaXF1ZUF4ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgcXVhdEIudm11bHQoaHVsbEIudW5pcXVlQXhlc1tpXSxXb3JsZG5vcm1hbDEpO1xuXG4gICAgICAgICAgICBjdXJQbGFuZVRlc3RzKys7XG4gICAgICAgICAgICB2YXIgZCA9IGh1bGxBLnRlc3RTZXBBeGlzKFdvcmxkbm9ybWFsMSwgaHVsbEIscG9zQSxxdWF0QSxwb3NCLHF1YXRCKTtcbiAgICAgICAgICAgIGlmKGQ9PT1mYWxzZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihkPGRtaW4pe1xuICAgICAgICAgICAgICAgIGRtaW4gPSBkO1xuICAgICAgICAgICAgICAgIHRhcmdldC5jb3B5KFdvcmxkbm9ybWFsMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUZXN0IGVkZ2VzXG4gICAgZm9yKHZhciBlMD0wOyBlMCAhPT0gaHVsbEEudW5pcXVlRWRnZXMubGVuZ3RoOyBlMCsrKXtcblxuICAgICAgICAvLyBHZXQgd29ybGQgZWRnZVxuICAgICAgICBxdWF0QS52bXVsdChodWxsQS51bmlxdWVFZGdlc1tlMF0sd29ybGRFZGdlMCk7XG5cbiAgICAgICAgZm9yKHZhciBlMT0wOyBlMSAhPT0gaHVsbEIudW5pcXVlRWRnZXMubGVuZ3RoOyBlMSsrKXtcblxuICAgICAgICAgICAgLy8gR2V0IHdvcmxkIGVkZ2UgMlxuICAgICAgICAgICAgcXVhdEIudm11bHQoaHVsbEIudW5pcXVlRWRnZXNbZTFdLCB3b3JsZEVkZ2UxKTtcbiAgICAgICAgICAgIHdvcmxkRWRnZTAuY3Jvc3Mod29ybGRFZGdlMSxDcm9zcyk7XG5cbiAgICAgICAgICAgIGlmKCFDcm9zcy5hbG1vc3RaZXJvKCkpe1xuICAgICAgICAgICAgICAgIENyb3NzLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgICAgIHZhciBkaXN0ID0gaHVsbEEudGVzdFNlcEF4aXMoQ3Jvc3MsIGh1bGxCLCBwb3NBLCBxdWF0QSwgcG9zQiwgcXVhdEIpO1xuICAgICAgICAgICAgICAgIGlmKGRpc3QgPT09IGZhbHNlKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihkaXN0IDwgZG1pbil7XG4gICAgICAgICAgICAgICAgICAgIGRtaW4gPSBkaXN0O1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuY29weShDcm9zcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcG9zQi52c3ViKHBvc0EsZGVsdGFDKTtcbiAgICBpZigoZGVsdGFDLmRvdCh0YXJnZXQpKT4wLjApe1xuICAgICAgICB0YXJnZXQubmVnYXRlKHRhcmdldCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG52YXIgbWF4bWluQT1bXSwgbWF4bWluQj1bXTtcblxuLyoqXG4gKiBUZXN0IHNlcGFyYXRpbmcgYXhpcyBhZ2FpbnN0IHR3byBodWxscy4gQm90aCBodWxscyBhcmUgcHJvamVjdGVkIG9udG8gdGhlIGF4aXMgYW5kIHRoZSBvdmVybGFwIHNpemUgaXMgcmV0dXJuZWQgaWYgdGhlcmUgaXMgb25lLlxuICogQG1ldGhvZCB0ZXN0U2VwQXhpc1xuICogQHBhcmFtIHtWZWMzfSBheGlzXG4gKiBAcGFyYW0ge0NvbnZleFBvbHloZWRyb259IGh1bGxCXG4gKiBAcGFyYW0ge1ZlYzN9IHBvc0FcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcXVhdEFcbiAqIEBwYXJhbSB7VmVjM30gcG9zQlxuICogQHBhcmFtIHtRdWF0ZXJuaW9ufSBxdWF0QlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgb3ZlcmxhcCBkZXB0aCwgb3IgRkFMU0UgaWYgbm8gcGVuZXRyYXRpb24uXG4gKi9cbkNvbnZleFBvbHloZWRyb24ucHJvdG90eXBlLnRlc3RTZXBBeGlzID0gZnVuY3Rpb24oYXhpcywgaHVsbEIsIHBvc0EsIHF1YXRBLCBwb3NCLCBxdWF0Qil7XG4gICAgdmFyIGh1bGxBPXRoaXM7XG4gICAgQ29udmV4UG9seWhlZHJvbi5wcm9qZWN0KGh1bGxBLCBheGlzLCBwb3NBLCBxdWF0QSwgbWF4bWluQSk7XG4gICAgQ29udmV4UG9seWhlZHJvbi5wcm9qZWN0KGh1bGxCLCBheGlzLCBwb3NCLCBxdWF0QiwgbWF4bWluQik7XG4gICAgdmFyIG1heEEgPSBtYXhtaW5BWzBdO1xuICAgIHZhciBtaW5BID0gbWF4bWluQVsxXTtcbiAgICB2YXIgbWF4QiA9IG1heG1pbkJbMF07XG4gICAgdmFyIG1pbkIgPSBtYXhtaW5CWzFdO1xuICAgIGlmKG1heEE8bWluQiB8fCBtYXhCPG1pbkEpe1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIFNlcGFyYXRlZFxuICAgIH1cbiAgICB2YXIgZDAgPSBtYXhBIC0gbWluQjtcbiAgICB2YXIgZDEgPSBtYXhCIC0gbWluQTtcbiAgICB2YXIgZGVwdGggPSBkMDxkMSA/IGQwOmQxO1xuICAgIHJldHVybiBkZXB0aDtcbn07XG5cbnZhciBjbGlfYWFiYm1pbiA9IG5ldyBWZWMzKCksXG4gICAgY2xpX2FhYmJtYXggPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIEBtZXRob2QgY2FsY3VsYXRlTG9jYWxJbmVydGlhXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG1hc3NcbiAqIEBwYXJhbSAge1ZlYzN9IHRhcmdldFxuICovXG5Db252ZXhQb2x5aGVkcm9uLnByb3RvdHlwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWEgPSBmdW5jdGlvbihtYXNzLHRhcmdldCl7XG4gICAgLy8gQXBwcm94aW1hdGUgd2l0aCBib3ggaW5lcnRpYVxuICAgIC8vIEV4YWN0IGluZXJ0aWEgY2FsY3VsYXRpb24gaXMgb3ZlcmtpbGwsIGJ1dCBzZWUgaHR0cDovL2dlb21ldHJpY3Rvb2xzLmNvbS9Eb2N1bWVudGF0aW9uL1BvbHloZWRyYWxNYXNzUHJvcGVydGllcy5wZGYgZm9yIHRoZSBjb3JyZWN0IHdheSB0byBkbyBpdFxuICAgIHRoaXMuY29tcHV0ZUxvY2FsQUFCQihjbGlfYWFiYm1pbixjbGlfYWFiYm1heCk7XG4gICAgdmFyIHggPSBjbGlfYWFiYm1heC54IC0gY2xpX2FhYmJtaW4ueCxcbiAgICAgICAgeSA9IGNsaV9hYWJibWF4LnkgLSBjbGlfYWFiYm1pbi55LFxuICAgICAgICB6ID0gY2xpX2FhYmJtYXgueiAtIGNsaV9hYWJibWluLno7XG4gICAgdGFyZ2V0LnggPSAxLjAgLyAxMi4wICogbWFzcyAqICggMip5KjIqeSArIDIqeioyKnogKTtcbiAgICB0YXJnZXQueSA9IDEuMCAvIDEyLjAgKiBtYXNzICogKCAyKngqMip4ICsgMip6KjIqeiApO1xuICAgIHRhcmdldC56ID0gMS4wIC8gMTIuMCAqIG1hc3MgKiAoIDIqeSoyKnkgKyAyKngqMip4ICk7XG59O1xuXG4vKipcbiAqIEBtZXRob2QgZ2V0UGxhbmVDb25zdGFudE9mRmFjZVxuICogQHBhcmFtICB7TnVtYmVyfSBmYWNlX2kgSW5kZXggb2YgdGhlIGZhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuQ29udmV4UG9seWhlZHJvbi5wcm90b3R5cGUuZ2V0UGxhbmVDb25zdGFudE9mRmFjZSA9IGZ1bmN0aW9uKGZhY2VfaSl7XG4gICAgdmFyIGYgPSB0aGlzLmZhY2VzW2ZhY2VfaV07XG4gICAgdmFyIG4gPSB0aGlzLmZhY2VOb3JtYWxzW2ZhY2VfaV07XG4gICAgdmFyIHYgPSB0aGlzLnZlcnRpY2VzW2ZbMF1dO1xuICAgIHZhciBjID0gLW4uZG90KHYpO1xuICAgIHJldHVybiBjO1xufTtcblxuLyoqXG4gKiBDbGlwIGEgZmFjZSBhZ2FpbnN0IGEgaHVsbC5cbiAqIEBtZXRob2QgY2xpcEZhY2VBZ2FpbnN0SHVsbFxuICogQHBhcmFtIHtWZWMzfSBzZXBhcmF0aW5nTm9ybWFsXG4gKiBAcGFyYW0ge1ZlYzN9IHBvc0FcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcXVhdEFcbiAqIEBwYXJhbSB7QXJyYXl9IHdvcmxkVmVydHNCMSBBbiBhcnJheSBvZiBWZWMzIHdpdGggdmVydGljZXMgaW4gdGhlIHdvcmxkIGZyYW1lLlxuICogQHBhcmFtIHtOdW1iZXJ9IG1pbkRpc3QgRGlzdGFuY2UgY2xhbXBpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBtYXhEaXN0XG4gKiBAcGFyYW0gQXJyYXkgcmVzdWx0IEFycmF5IHRvIHN0b3JlIHJlc3VsdGluZyBjb250YWN0IHBvaW50cyBpbi4gV2lsbCBiZSBvYmplY3RzIHdpdGggcHJvcGVydGllczogcG9pbnQsIGRlcHRoLCBub3JtYWwuIFRoZXNlIGFyZSByZXByZXNlbnRlZCBpbiB3b3JsZCBjb29yZGluYXRlcy5cbiAqL1xudmFyIGNmYWhfZmFjZUFOb3JtYWxXUyA9IG5ldyBWZWMzKCksXG4gICAgY2ZhaF9lZGdlMCA9IG5ldyBWZWMzKCksXG4gICAgY2ZhaF9Xb3JsZEVkZ2UwID0gbmV3IFZlYzMoKSxcbiAgICBjZmFoX3dvcmxkUGxhbmVBbm9ybWFsMSA9IG5ldyBWZWMzKCksXG4gICAgY2ZhaF9wbGFuZU5vcm1hbFdTMSA9IG5ldyBWZWMzKCksXG4gICAgY2ZhaF93b3JsZEExID0gbmV3IFZlYzMoKSxcbiAgICBjZmFoX2xvY2FsUGxhbmVOb3JtYWwgPSBuZXcgVmVjMygpLFxuICAgIGNmYWhfcGxhbmVOb3JtYWxXUyA9IG5ldyBWZWMzKCk7XG5Db252ZXhQb2x5aGVkcm9uLnByb3RvdHlwZS5jbGlwRmFjZUFnYWluc3RIdWxsID0gZnVuY3Rpb24oc2VwYXJhdGluZ05vcm1hbCwgcG9zQSwgcXVhdEEsIHdvcmxkVmVydHNCMSwgbWluRGlzdCwgbWF4RGlzdCxyZXN1bHQpe1xuICAgIHZhciBmYWNlQU5vcm1hbFdTID0gY2ZhaF9mYWNlQU5vcm1hbFdTLFxuICAgICAgICBlZGdlMCA9IGNmYWhfZWRnZTAsXG4gICAgICAgIFdvcmxkRWRnZTAgPSBjZmFoX1dvcmxkRWRnZTAsXG4gICAgICAgIHdvcmxkUGxhbmVBbm9ybWFsMSA9IGNmYWhfd29ybGRQbGFuZUFub3JtYWwxLFxuICAgICAgICBwbGFuZU5vcm1hbFdTMSA9IGNmYWhfcGxhbmVOb3JtYWxXUzEsXG4gICAgICAgIHdvcmxkQTEgPSBjZmFoX3dvcmxkQTEsXG4gICAgICAgIGxvY2FsUGxhbmVOb3JtYWwgPSBjZmFoX2xvY2FsUGxhbmVOb3JtYWwsXG4gICAgICAgIHBsYW5lTm9ybWFsV1MgPSBjZmFoX3BsYW5lTm9ybWFsV1M7XG5cbiAgICB2YXIgaHVsbEEgPSB0aGlzO1xuICAgIHZhciB3b3JsZFZlcnRzQjIgPSBbXTtcbiAgICB2YXIgcFZ0eEluID0gd29ybGRWZXJ0c0IxO1xuICAgIHZhciBwVnR4T3V0ID0gd29ybGRWZXJ0c0IyO1xuICAgIC8vIEZpbmQgdGhlIGZhY2Ugd2l0aCBub3JtYWwgY2xvc2VzdCB0byB0aGUgc2VwYXJhdGluZyBheGlzXG4gICAgdmFyIGNsb3Nlc3RGYWNlQSA9IC0xO1xuICAgIHZhciBkbWluID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICBmb3IodmFyIGZhY2U9MDsgZmFjZTxodWxsQS5mYWNlcy5sZW5ndGg7IGZhY2UrKyl7XG4gICAgICAgIGZhY2VBTm9ybWFsV1MuY29weShodWxsQS5mYWNlTm9ybWFsc1tmYWNlXSk7XG4gICAgICAgIHF1YXRBLnZtdWx0KGZhY2VBTm9ybWFsV1MsZmFjZUFOb3JtYWxXUyk7XG4gICAgICAgIC8vcG9zQS52YWRkKGZhY2VBTm9ybWFsV1MsZmFjZUFOb3JtYWxXUyk7XG4gICAgICAgIHZhciBkID0gZmFjZUFOb3JtYWxXUy5kb3Qoc2VwYXJhdGluZ05vcm1hbCk7XG4gICAgICAgIGlmIChkIDwgZG1pbil7XG4gICAgICAgICAgICBkbWluID0gZDtcbiAgICAgICAgICAgIGNsb3Nlc3RGYWNlQSA9IGZhY2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNsb3Nlc3RGYWNlQSA8IDApe1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIi0tLSBkaWQgbm90IGZpbmQgYW55IGNsb3Nlc3QgZmFjZS4uLiAtLS1cIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy9jb25zb2xlLmxvZyhcImNsb3Nlc3QgQTogXCIsY2xvc2VzdEZhY2VBKTtcbiAgICAvLyBHZXQgdGhlIGZhY2UgYW5kIGNvbnN0cnVjdCBjb25uZWN0ZWQgZmFjZXNcbiAgICB2YXIgcG9seUEgPSBodWxsQS5mYWNlc1tjbG9zZXN0RmFjZUFdO1xuICAgIHBvbHlBLmNvbm5lY3RlZEZhY2VzID0gW107XG4gICAgZm9yKHZhciBpPTA7IGk8aHVsbEEuZmFjZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBmb3IodmFyIGo9MDsgajxodWxsQS5mYWNlc1tpXS5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICBpZihwb2x5QS5pbmRleE9mKGh1bGxBLmZhY2VzW2ldW2pdKSE9PS0xIC8qIFNoYXJpbmcgYSB2ZXJ0ZXgqLyAmJiBpIT09Y2xvc2VzdEZhY2VBIC8qIE5vdCB0aGUgb25lIHdlIGFyZSBsb29raW5nIGZvciBjb25uZWN0aW9ucyBmcm9tICovICYmIHBvbHlBLmNvbm5lY3RlZEZhY2VzLmluZGV4T2YoaSk9PT0tMSAvKiBOb3QgYWxyZWFkeSBhZGRlZCAqLyApe1xuICAgICAgICAgICAgICAgIHBvbHlBLmNvbm5lY3RlZEZhY2VzLnB1c2goaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ2xpcCB0aGUgcG9seWdvbiB0byB0aGUgYmFjayBvZiB0aGUgcGxhbmVzIG9mIGFsbCBmYWNlcyBvZiBodWxsIEEsIHRoYXQgYXJlIGFkamFjZW50IHRvIHRoZSB3aXRuZXNzIGZhY2VcbiAgICB2YXIgbnVtQ29udGFjdHMgPSBwVnR4SW4ubGVuZ3RoO1xuICAgIHZhciBudW1WZXJ0aWNlc0EgPSBwb2x5QS5sZW5ndGg7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvcih2YXIgZTA9MDsgZTA8bnVtVmVydGljZXNBOyBlMCsrKXtcbiAgICAgICAgdmFyIGEgPSBodWxsQS52ZXJ0aWNlc1twb2x5QVtlMF1dO1xuICAgICAgICB2YXIgYiA9IGh1bGxBLnZlcnRpY2VzW3BvbHlBWyhlMCsxKSVudW1WZXJ0aWNlc0FdXTtcbiAgICAgICAgYS52c3ViKGIsZWRnZTApO1xuICAgICAgICBXb3JsZEVkZ2UwLmNvcHkoZWRnZTApO1xuICAgICAgICBxdWF0QS52bXVsdChXb3JsZEVkZ2UwLFdvcmxkRWRnZTApO1xuICAgICAgICBwb3NBLnZhZGQoV29ybGRFZGdlMCxXb3JsZEVkZ2UwKTtcbiAgICAgICAgd29ybGRQbGFuZUFub3JtYWwxLmNvcHkodGhpcy5mYWNlTm9ybWFsc1tjbG9zZXN0RmFjZUFdKTsvL3RyYW5zQS5nZXRCYXNpcygpKiBidFZlY3RvcjMocG9seUEubV9wbGFuZVswXSxwb2x5QS5tX3BsYW5lWzFdLHBvbHlBLm1fcGxhbmVbMl0pO1xuICAgICAgICBxdWF0QS52bXVsdCh3b3JsZFBsYW5lQW5vcm1hbDEsd29ybGRQbGFuZUFub3JtYWwxKTtcbiAgICAgICAgcG9zQS52YWRkKHdvcmxkUGxhbmVBbm9ybWFsMSx3b3JsZFBsYW5lQW5vcm1hbDEpO1xuICAgICAgICBXb3JsZEVkZ2UwLmNyb3NzKHdvcmxkUGxhbmVBbm9ybWFsMSxwbGFuZU5vcm1hbFdTMSk7XG4gICAgICAgIHBsYW5lTm9ybWFsV1MxLm5lZ2F0ZShwbGFuZU5vcm1hbFdTMSk7XG4gICAgICAgIHdvcmxkQTEuY29weShhKTtcbiAgICAgICAgcXVhdEEudm11bHQod29ybGRBMSx3b3JsZEExKTtcbiAgICAgICAgcG9zQS52YWRkKHdvcmxkQTEsd29ybGRBMSk7XG4gICAgICAgIHZhciBwbGFuZUVxV1MxID0gLXdvcmxkQTEuZG90KHBsYW5lTm9ybWFsV1MxKTtcbiAgICAgICAgdmFyIHBsYW5lRXFXUztcbiAgICAgICAgaWYodHJ1ZSl7XG4gICAgICAgICAgICB2YXIgb3RoZXJGYWNlID0gcG9seUEuY29ubmVjdGVkRmFjZXNbZTBdO1xuICAgICAgICAgICAgbG9jYWxQbGFuZU5vcm1hbC5jb3B5KHRoaXMuZmFjZU5vcm1hbHNbb3RoZXJGYWNlXSk7XG4gICAgICAgICAgICB2YXIgbG9jYWxQbGFuZUVxID0gdGhpcy5nZXRQbGFuZUNvbnN0YW50T2ZGYWNlKG90aGVyRmFjZSk7XG5cbiAgICAgICAgICAgIHBsYW5lTm9ybWFsV1MuY29weShsb2NhbFBsYW5lTm9ybWFsKTtcbiAgICAgICAgICAgIHF1YXRBLnZtdWx0KHBsYW5lTm9ybWFsV1MscGxhbmVOb3JtYWxXUyk7XG4gICAgICAgICAgICAvL3Bvc0EudmFkZChwbGFuZU5vcm1hbFdTLHBsYW5lTm9ybWFsV1MpO1xuICAgICAgICAgICAgdmFyIHBsYW5lRXFXUyA9IGxvY2FsUGxhbmVFcSAtIHBsYW5lTm9ybWFsV1MuZG90KHBvc0EpO1xuICAgICAgICB9IGVsc2UgIHtcbiAgICAgICAgICAgIHBsYW5lTm9ybWFsV1MuY29weShwbGFuZU5vcm1hbFdTMSk7XG4gICAgICAgICAgICBwbGFuZUVxV1MgPSBwbGFuZUVxV1MxO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xpcCBmYWNlIGFnYWluc3Qgb3VyIGNvbnN0cnVjdGVkIHBsYW5lXG4gICAgICAgIHRoaXMuY2xpcEZhY2VBZ2FpbnN0UGxhbmUocFZ0eEluLCBwVnR4T3V0LCBwbGFuZU5vcm1hbFdTLCBwbGFuZUVxV1MpO1xuXG4gICAgICAgIC8vIFRocm93IGF3YXkgYWxsIGNsaXBwZWQgcG9pbnRzLCBidXQgc2F2ZSB0aGUgcmVhbWluaW5nIHVudGlsIG5leHQgY2xpcFxuICAgICAgICB3aGlsZShwVnR4SW4ubGVuZ3RoKXtcbiAgICAgICAgICAgIHBWdHhJbi5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlKHBWdHhPdXQubGVuZ3RoKXtcbiAgICAgICAgICAgIHBWdHhJbi5wdXNoKHBWdHhPdXQuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL2NvbnNvbGUubG9nKFwiUmVzdWx0aW5nIHBvaW50cyBhZnRlciBjbGlwOlwiLHBWdHhJbik7XG5cbiAgICAvLyBvbmx5IGtlZXAgY29udGFjdCBwb2ludHMgdGhhdCBhcmUgYmVoaW5kIHRoZSB3aXRuZXNzIGZhY2VcbiAgICBsb2NhbFBsYW5lTm9ybWFsLmNvcHkodGhpcy5mYWNlTm9ybWFsc1tjbG9zZXN0RmFjZUFdKTtcblxuICAgIHZhciBsb2NhbFBsYW5lRXEgPSB0aGlzLmdldFBsYW5lQ29uc3RhbnRPZkZhY2UoY2xvc2VzdEZhY2VBKTtcbiAgICBwbGFuZU5vcm1hbFdTLmNvcHkobG9jYWxQbGFuZU5vcm1hbCk7XG4gICAgcXVhdEEudm11bHQocGxhbmVOb3JtYWxXUyxwbGFuZU5vcm1hbFdTKTtcblxuICAgIHZhciBwbGFuZUVxV1MgPSBsb2NhbFBsYW5lRXEgLSBwbGFuZU5vcm1hbFdTLmRvdChwb3NBKTtcbiAgICBmb3IgKHZhciBpPTA7IGk8cFZ0eEluLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdmFyIGRlcHRoID0gcGxhbmVOb3JtYWxXUy5kb3QocFZ0eEluW2ldKSArIHBsYW5lRXFXUzsgLy8/Pz9cbiAgICAgICAgLypjb25zb2xlLmxvZyhcImRlcHRoIGNhbGMgZnJvbSBub3JtYWw9XCIscGxhbmVOb3JtYWxXUy50b1N0cmluZygpLFwiIGFuZCBjb25zdGFudCBcIitwbGFuZUVxV1MrXCIgYW5kIHZlcnRleCBcIixwVnR4SW5baV0udG9TdHJpbmcoKSxcIiBnaXZlcyBcIitkZXB0aCk7Ki9cbiAgICAgICAgaWYgKGRlcHRoIDw9bWluRGlzdCl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImNsYW1wZWQ6IGRlcHRoPVwiK2RlcHRoK1wiIHRvIG1pbkRpc3Q9XCIrKG1pbkRpc3QrXCJcIikpO1xuICAgICAgICAgICAgZGVwdGggPSBtaW5EaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlcHRoIDw9bWF4RGlzdCl7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBwVnR4SW5baV07XG4gICAgICAgICAgICBpZihkZXB0aDw9MCl7XG4gICAgICAgICAgICAgICAgLypjb25zb2xlLmxvZyhcIkdvdCBjb250YWN0IHBvaW50IFwiLHBvaW50LnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICBcIiwgZGVwdGg9XCIsZGVwdGgsXG4gICAgICAgICAgICAgICAgICBcImNvbnRhY3Qgbm9ybWFsPVwiLHNlcGFyYXRpbmdOb3JtYWwudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgIFwicGxhbmVcIixwbGFuZU5vcm1hbFdTLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICBcInBsYW5lQ29uc3RhbnRcIixwbGFuZUVxV1MpOyovXG4gICAgICAgICAgICAgICAgdmFyIHAgPSB7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50OnBvaW50LFxuICAgICAgICAgICAgICAgICAgICBub3JtYWw6cGxhbmVOb3JtYWxXUyxcbiAgICAgICAgICAgICAgICAgICAgZGVwdGg6IGRlcHRoLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKipcbiAqIENsaXAgYSBmYWNlIGluIGEgaHVsbCBhZ2FpbnN0IHRoZSBiYWNrIG9mIGEgcGxhbmUuXG4gKiBAbWV0aG9kIGNsaXBGYWNlQWdhaW5zdFBsYW5lXG4gKiBAcGFyYW0ge0FycmF5fSBpblZlcnRpY2VzXG4gKiBAcGFyYW0ge0FycmF5fSBvdXRWZXJ0aWNlc1xuICogQHBhcmFtIHtWZWMzfSBwbGFuZU5vcm1hbFxuICogQHBhcmFtIHtOdW1iZXJ9IHBsYW5lQ29uc3RhbnQgVGhlIGNvbnN0YW50IGluIHRoZSBtYXRoZW1hdGljYWwgcGxhbmUgZXF1YXRpb25cbiAqL1xuQ29udmV4UG9seWhlZHJvbi5wcm90b3R5cGUuY2xpcEZhY2VBZ2FpbnN0UGxhbmUgPSBmdW5jdGlvbihpblZlcnRpY2VzLG91dFZlcnRpY2VzLCBwbGFuZU5vcm1hbCwgcGxhbmVDb25zdGFudCl7XG4gICAgdmFyIG5fZG90X2ZpcnN0LCBuX2RvdF9sYXN0O1xuICAgIHZhciBudW1WZXJ0cyA9IGluVmVydGljZXMubGVuZ3RoO1xuXG4gICAgaWYobnVtVmVydHMgPCAyKXtcbiAgICAgICAgcmV0dXJuIG91dFZlcnRpY2VzO1xuICAgIH1cblxuICAgIHZhciBmaXJzdFZlcnRleCA9IGluVmVydGljZXNbaW5WZXJ0aWNlcy5sZW5ndGgtMV0sXG4gICAgICAgIGxhc3RWZXJ0ZXggPSAgIGluVmVydGljZXNbMF07XG5cbiAgICBuX2RvdF9maXJzdCA9IHBsYW5lTm9ybWFsLmRvdChmaXJzdFZlcnRleCkgKyBwbGFuZUNvbnN0YW50O1xuXG4gICAgZm9yKHZhciB2aSA9IDA7IHZpIDwgbnVtVmVydHM7IHZpKyspe1xuICAgICAgICBsYXN0VmVydGV4ID0gaW5WZXJ0aWNlc1t2aV07XG4gICAgICAgIG5fZG90X2xhc3QgPSBwbGFuZU5vcm1hbC5kb3QobGFzdFZlcnRleCkgKyBwbGFuZUNvbnN0YW50O1xuICAgICAgICBpZihuX2RvdF9maXJzdCA8IDApe1xuICAgICAgICAgICAgaWYobl9kb3RfbGFzdCA8IDApe1xuICAgICAgICAgICAgICAgIC8vIFN0YXJ0IDwgMCwgZW5kIDwgMCwgc28gb3V0cHV0IGxhc3RWZXJ0ZXhcbiAgICAgICAgICAgICAgICB2YXIgbmV3diA9IG5ldyBWZWMzKCk7XG4gICAgICAgICAgICAgICAgbmV3di5jb3B5KGxhc3RWZXJ0ZXgpO1xuICAgICAgICAgICAgICAgIG91dFZlcnRpY2VzLnB1c2gobmV3dik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFN0YXJ0IDwgMCwgZW5kID49IDAsIHNvIG91dHB1dCBpbnRlcnNlY3Rpb25cbiAgICAgICAgICAgICAgICB2YXIgbmV3diA9IG5ldyBWZWMzKCk7XG4gICAgICAgICAgICAgICAgZmlyc3RWZXJ0ZXgubGVycChsYXN0VmVydGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbl9kb3RfZmlyc3QgLyAobl9kb3RfZmlyc3QgLSBuX2RvdF9sYXN0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld3YpO1xuICAgICAgICAgICAgICAgIG91dFZlcnRpY2VzLnB1c2gobmV3dik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZihuX2RvdF9sYXN0PDApe1xuICAgICAgICAgICAgICAgIC8vIFN0YXJ0ID49IDAsIGVuZCA8IDAgc28gb3V0cHV0IGludGVyc2VjdGlvbiBhbmQgZW5kXG4gICAgICAgICAgICAgICAgdmFyIG5ld3YgPSBuZXcgVmVjMygpO1xuICAgICAgICAgICAgICAgIGZpcnN0VmVydGV4LmxlcnAobGFzdFZlcnRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5fZG90X2ZpcnN0IC8gKG5fZG90X2ZpcnN0IC0gbl9kb3RfbGFzdCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXd2KTtcbiAgICAgICAgICAgICAgICBvdXRWZXJ0aWNlcy5wdXNoKG5ld3YpO1xuICAgICAgICAgICAgICAgIG91dFZlcnRpY2VzLnB1c2gobGFzdFZlcnRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RWZXJ0ZXggPSBsYXN0VmVydGV4O1xuICAgICAgICBuX2RvdF9maXJzdCA9IG5fZG90X2xhc3Q7XG4gICAgfVxuICAgIHJldHVybiBvdXRWZXJ0aWNlcztcbn07XG5cbi8vIFVwZGF0ZXMgLndvcmxkVmVydGljZXMgYW5kIHNldHMgLndvcmxkVmVydGljZXNOZWVkc1VwZGF0ZSB0byBmYWxzZS5cbkNvbnZleFBvbHloZWRyb24ucHJvdG90eXBlLmNvbXB1dGVXb3JsZFZlcnRpY2VzID0gZnVuY3Rpb24ocG9zaXRpb24scXVhdCl7XG4gICAgdmFyIE4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcbiAgICB3aGlsZSh0aGlzLndvcmxkVmVydGljZXMubGVuZ3RoIDwgTil7XG4gICAgICAgIHRoaXMud29ybGRWZXJ0aWNlcy5wdXNoKCBuZXcgVmVjMygpICk7XG4gICAgfVxuXG4gICAgdmFyIHZlcnRzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgd29ybGRWZXJ0cyA9IHRoaXMud29ybGRWZXJ0aWNlcztcbiAgICBmb3IodmFyIGk9MDsgaSE9PU47IGkrKyl7XG4gICAgICAgIHF1YXQudm11bHQoIHZlcnRzW2ldICwgd29ybGRWZXJ0c1tpXSApO1xuICAgICAgICBwb3NpdGlvbi52YWRkKCB3b3JsZFZlcnRzW2ldICwgd29ybGRWZXJ0c1tpXSApO1xuICAgIH1cblxuICAgIHRoaXMud29ybGRWZXJ0aWNlc05lZWRzVXBkYXRlID0gZmFsc2U7XG59O1xuXG52YXIgY29tcHV0ZUxvY2FsQUFCQl93b3JsZFZlcnQgPSBuZXcgVmVjMygpO1xuQ29udmV4UG9seWhlZHJvbi5wcm90b3R5cGUuY29tcHV0ZUxvY2FsQUFCQiA9IGZ1bmN0aW9uKGFhYmJtaW4sYWFiYm1heCl7XG4gICAgdmFyIG4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCxcbiAgICAgICAgdmVydGljZXMgPSB0aGlzLnZlcnRpY2VzLFxuICAgICAgICB3b3JsZFZlcnQgPSBjb21wdXRlTG9jYWxBQUJCX3dvcmxkVmVydDtcblxuICAgIGFhYmJtaW4uc2V0KE51bWJlci5NQVhfVkFMVUUsIE51bWJlci5NQVhfVkFMVUUsIE51bWJlci5NQVhfVkFMVUUpO1xuICAgIGFhYmJtYXguc2V0KC1OdW1iZXIuTUFYX1ZBTFVFLCAtTnVtYmVyLk1BWF9WQUxVRSwgLU51bWJlci5NQVhfVkFMVUUpO1xuXG4gICAgZm9yKHZhciBpPTA7IGk8bjsgaSsrKXtcbiAgICAgICAgdmFyIHYgPSB2ZXJ0aWNlc1tpXTtcbiAgICAgICAgaWYgICAgICh2LnggPCBhYWJibWluLngpe1xuICAgICAgICAgICAgYWFiYm1pbi54ID0gdi54O1xuICAgICAgICB9IGVsc2UgaWYodi54ID4gYWFiYm1heC54KXtcbiAgICAgICAgICAgIGFhYmJtYXgueCA9IHYueDtcbiAgICAgICAgfVxuICAgICAgICBpZiAgICAgKHYueSA8IGFhYmJtaW4ueSl7XG4gICAgICAgICAgICBhYWJibWluLnkgPSB2Lnk7XG4gICAgICAgIH0gZWxzZSBpZih2LnkgPiBhYWJibWF4Lnkpe1xuICAgICAgICAgICAgYWFiYm1heC55ID0gdi55O1xuICAgICAgICB9XG4gICAgICAgIGlmICAgICAodi56IDwgYWFiYm1pbi56KXtcbiAgICAgICAgICAgIGFhYmJtaW4ueiA9IHYuejtcbiAgICAgICAgfSBlbHNlIGlmKHYueiA+IGFhYmJtYXgueil7XG4gICAgICAgICAgICBhYWJibWF4LnogPSB2Lno7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKipcbiAqIFVwZGF0ZXMgLndvcmxkVmVydGljZXMgYW5kIHNldHMgLndvcmxkVmVydGljZXNOZWVkc1VwZGF0ZSB0byBmYWxzZS5cbiAqIEBtZXRob2QgY29tcHV0ZVdvcmxkRmFjZU5vcm1hbHNcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHF1YXRcbiAqL1xuQ29udmV4UG9seWhlZHJvbi5wcm90b3R5cGUuY29tcHV0ZVdvcmxkRmFjZU5vcm1hbHMgPSBmdW5jdGlvbihxdWF0KXtcbiAgICB2YXIgTiA9IHRoaXMuZmFjZU5vcm1hbHMubGVuZ3RoO1xuICAgIHdoaWxlKHRoaXMud29ybGRGYWNlTm9ybWFscy5sZW5ndGggPCBOKXtcbiAgICAgICAgdGhpcy53b3JsZEZhY2VOb3JtYWxzLnB1c2goIG5ldyBWZWMzKCkgKTtcbiAgICB9XG5cbiAgICB2YXIgbm9ybWFscyA9IHRoaXMuZmFjZU5vcm1hbHMsXG4gICAgICAgIHdvcmxkTm9ybWFscyA9IHRoaXMud29ybGRGYWNlTm9ybWFscztcbiAgICBmb3IodmFyIGk9MDsgaSE9PU47IGkrKyl7XG4gICAgICAgIHF1YXQudm11bHQoIG5vcm1hbHNbaV0gLCB3b3JsZE5vcm1hbHNbaV0gKTtcbiAgICB9XG5cbiAgICB0aGlzLndvcmxkRmFjZU5vcm1hbHNOZWVkc1VwZGF0ZSA9IGZhbHNlO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzXG4gKi9cbkNvbnZleFBvbHloZWRyb24ucHJvdG90eXBlLnVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzID0gZnVuY3Rpb24oKXtcbiAgICAvLyBBc3N1bWUgcG9pbnRzIGFyZSBkaXN0cmlidXRlZCB3aXRoIGxvY2FsICgwLDAsMCkgYXMgY2VudGVyXG4gICAgdmFyIG1heDIgPSAwO1xuICAgIHZhciB2ZXJ0cyA9IHRoaXMudmVydGljZXM7XG4gICAgZm9yKHZhciBpPTAsIE49dmVydHMubGVuZ3RoOyBpIT09TjsgaSsrKSB7XG4gICAgICAgIHZhciBub3JtMiA9IHZlcnRzW2ldLm5vcm0yKCk7XG4gICAgICAgIGlmKG5vcm0yID4gbWF4Mil7XG4gICAgICAgICAgICBtYXgyID0gbm9ybTI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5ib3VuZGluZ1NwaGVyZVJhZGl1cyA9IE1hdGguc3FydChtYXgyKTtcbn07XG5cbnZhciB0ZW1wV29ybGRWZXJ0ZXggPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIEBtZXRob2QgY2FsY3VsYXRlV29ybGRBQUJCXG4gKiBAcGFyYW0ge1ZlYzN9ICAgICAgICBwb3NcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gIHF1YXRcbiAqIEBwYXJhbSB7VmVjM30gICAgICAgIG1pblxuICogQHBhcmFtIHtWZWMzfSAgICAgICAgbWF4XG4gKi9cbkNvbnZleFBvbHloZWRyb24ucHJvdG90eXBlLmNhbGN1bGF0ZVdvcmxkQUFCQiA9IGZ1bmN0aW9uKHBvcyxxdWF0LG1pbixtYXgpe1xuICAgIHZhciBuID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGgsIHZlcnRzID0gdGhpcy52ZXJ0aWNlcztcbiAgICB2YXIgbWlueCxtaW55LG1pbnosbWF4eCxtYXh5LG1heHo7XG4gICAgZm9yKHZhciBpPTA7IGk8bjsgaSsrKXtcbiAgICAgICAgdGVtcFdvcmxkVmVydGV4LmNvcHkodmVydHNbaV0pO1xuICAgICAgICBxdWF0LnZtdWx0KHRlbXBXb3JsZFZlcnRleCx0ZW1wV29ybGRWZXJ0ZXgpO1xuICAgICAgICBwb3MudmFkZCh0ZW1wV29ybGRWZXJ0ZXgsdGVtcFdvcmxkVmVydGV4KTtcbiAgICAgICAgdmFyIHYgPSB0ZW1wV29ybGRWZXJ0ZXg7XG4gICAgICAgIGlmICAgICAodi54IDwgbWlueCB8fCBtaW54PT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgIG1pbnggPSB2Lng7XG4gICAgICAgIH0gZWxzZSBpZih2LnggPiBtYXh4IHx8IG1heHg9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgbWF4eCA9IHYueDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICAgICAodi55IDwgbWlueSB8fCBtaW55PT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgIG1pbnkgPSB2Lnk7XG4gICAgICAgIH0gZWxzZSBpZih2LnkgPiBtYXh5IHx8IG1heHk9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgbWF4eSA9IHYueTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICAgICAodi56IDwgbWlueiB8fCBtaW56PT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgIG1pbnogPSB2Lno7XG4gICAgICAgIH0gZWxzZSBpZih2LnogPiBtYXh6IHx8IG1heHo9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgbWF4eiA9IHYuejtcbiAgICAgICAgfVxuICAgIH1cbiAgICBtaW4uc2V0KG1pbngsbWlueSxtaW56KTtcbiAgICBtYXguc2V0KG1heHgsbWF4eSxtYXh6KTtcbn07XG5cbi8qKlxuICogR2V0IGFwcHJveGltYXRlIGNvbnZleCB2b2x1bWVcbiAqIEBtZXRob2Qgdm9sdW1lXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cbkNvbnZleFBvbHloZWRyb24ucHJvdG90eXBlLnZvbHVtZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIDQuMCAqIE1hdGguUEkgKiB0aGlzLmJvdW5kaW5nU3BoZXJlUmFkaXVzIC8gMy4wO1xufTtcblxuLyoqXG4gKiBHZXQgYW4gYXZlcmFnZSBvZiBhbGwgdGhlIHZlcnRpY2VzIHBvc2l0aW9uc1xuICogQG1ldGhvZCBnZXRBdmVyYWdlUG9pbnRMb2NhbFxuICogQHBhcmFtICB7VmVjM30gdGFyZ2V0XG4gKiBAcmV0dXJuIHtWZWMzfVxuICovXG5Db252ZXhQb2x5aGVkcm9uLnByb3RvdHlwZS5nZXRBdmVyYWdlUG9pbnRMb2NhbCA9IGZ1bmN0aW9uKHRhcmdldCl7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IG5ldyBWZWMzKCk7XG4gICAgdmFyIG4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCxcbiAgICAgICAgdmVydHMgPSB0aGlzLnZlcnRpY2VzO1xuICAgIGZvcih2YXIgaT0wOyBpPG47IGkrKyl7XG4gICAgICAgIHRhcmdldC52YWRkKHZlcnRzW2ldLHRhcmdldCk7XG4gICAgfVxuICAgIHRhcmdldC5tdWx0KDEvbix0YXJnZXQpO1xuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybSBhbGwgbG9jYWwgcG9pbnRzLiBXaWxsIGNoYW5nZSB0aGUgLnZlcnRpY2VzXG4gKiBAbWV0aG9kIHRyYW5zZm9ybUFsbFBvaW50c1xuICogQHBhcmFtICB7VmVjM30gb2Zmc2V0XG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxdWF0XG4gKi9cbkNvbnZleFBvbHloZWRyb24ucHJvdG90eXBlLnRyYW5zZm9ybUFsbFBvaW50cyA9IGZ1bmN0aW9uKG9mZnNldCxxdWF0KXtcbiAgICB2YXIgbiA9IHRoaXMudmVydGljZXMubGVuZ3RoLFxuICAgICAgICB2ZXJ0cyA9IHRoaXMudmVydGljZXM7XG5cbiAgICAvLyBBcHBseSByb3RhdGlvblxuICAgIGlmKHF1YXQpe1xuICAgICAgICAvLyBSb3RhdGUgdmVydGljZXNcbiAgICAgICAgZm9yKHZhciBpPTA7IGk8bjsgaSsrKXtcbiAgICAgICAgICAgIHZhciB2ID0gdmVydHNbaV07XG4gICAgICAgICAgICBxdWF0LnZtdWx0KHYsdik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUm90YXRlIGZhY2Ugbm9ybWFsc1xuICAgICAgICBmb3IodmFyIGk9MDsgaTx0aGlzLmZhY2VOb3JtYWxzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciB2ID0gdGhpcy5mYWNlTm9ybWFsc1tpXTtcbiAgICAgICAgICAgIHF1YXQudm11bHQodix2KTtcbiAgICAgICAgfVxuICAgICAgICAvKlxuICAgICAgICAvLyBSb3RhdGUgZWRnZXNcbiAgICAgICAgZm9yKHZhciBpPTA7IGk8dGhpcy51bmlxdWVFZGdlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgdiA9IHRoaXMudW5pcXVlRWRnZXNbaV07XG4gICAgICAgICAgICBxdWF0LnZtdWx0KHYsdik7XG4gICAgICAgIH0qL1xuICAgIH1cblxuICAgIC8vIEFwcGx5IG9mZnNldFxuICAgIGlmKG9mZnNldCl7XG4gICAgICAgIGZvcih2YXIgaT0wOyBpPG47IGkrKyl7XG4gICAgICAgICAgICB2YXIgdiA9IHZlcnRzW2ldO1xuICAgICAgICAgICAgdi52YWRkKG9mZnNldCx2KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgcCBpcyBpbnNpZGUgdGhlIHBvbHloZWRyYS4gTXVzdCBiZSBpbiBsb2NhbCBjb29yZHMuIFRoZSBwb2ludCBsaWVzIG91dHNpZGUgb2YgdGhlIGNvbnZleCBodWxsIG9mIHRoZSBvdGhlciBwb2ludHMgaWYgYW5kIG9ubHkgaWYgdGhlIGRpcmVjdGlvbiBvZiBhbGwgdGhlIHZlY3RvcnMgZnJvbSBpdCB0byB0aG9zZSBvdGhlciBwb2ludHMgYXJlIG9uIGxlc3MgdGhhbiBvbmUgaGFsZiBvZiBhIHNwaGVyZSBhcm91bmQgaXQuXG4gKiBAbWV0aG9kIHBvaW50SXNJbnNpZGVcbiAqIEBwYXJhbSAge1ZlYzN9IHAgICAgICBBIHBvaW50IGdpdmVuIGluIGxvY2FsIGNvb3JkaW5hdGVzXG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICovXG52YXIgQ29udmV4UG9seWhlZHJvbl9wb2ludElzSW5zaWRlID0gbmV3IFZlYzMoKTtcbnZhciBDb252ZXhQb2x5aGVkcm9uX3ZUb1AgPSBuZXcgVmVjMygpO1xudmFyIENvbnZleFBvbHloZWRyb25fdlRvUG9pbnRJbnNpZGUgPSBuZXcgVmVjMygpO1xuQ29udmV4UG9seWhlZHJvbi5wcm90b3R5cGUucG9pbnRJc0luc2lkZSA9IGZ1bmN0aW9uKHApe1xuICAgIHZhciBuID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGgsXG4gICAgICAgIHZlcnRzID0gdGhpcy52ZXJ0aWNlcyxcbiAgICAgICAgZmFjZXMgPSB0aGlzLmZhY2VzLFxuICAgICAgICBub3JtYWxzID0gdGhpcy5mYWNlTm9ybWFscztcbiAgICB2YXIgcG9zaXRpdmVSZXN1bHQgPSBudWxsO1xuICAgIHZhciBOID0gdGhpcy5mYWNlcy5sZW5ndGg7XG4gICAgdmFyIHBvaW50SW5zaWRlID0gQ29udmV4UG9seWhlZHJvbl9wb2ludElzSW5zaWRlO1xuICAgIHRoaXMuZ2V0QXZlcmFnZVBvaW50TG9jYWwocG9pbnRJbnNpZGUpO1xuICAgIGZvcih2YXIgaT0wOyBpPE47IGkrKyl7XG4gICAgICAgIHZhciBudW1WZXJ0aWNlcyA9IHRoaXMuZmFjZXNbaV0ubGVuZ3RoO1xuICAgICAgICB2YXIgbiA9IG5vcm1hbHNbaV07XG4gICAgICAgIHZhciB2ID0gdmVydHNbZmFjZXNbaV1bMF1dOyAvLyBXZSBvbmx5IG5lZWQgb25lIHBvaW50IGluIHRoZSBmYWNlXG5cbiAgICAgICAgLy8gVGhpcyBkb3QgcHJvZHVjdCBkZXRlcm1pbmVzIHdoaWNoIHNpZGUgb2YgdGhlIGVkZ2UgdGhlIHBvaW50IGlzXG4gICAgICAgIHZhciB2VG9QID0gQ29udmV4UG9seWhlZHJvbl92VG9QO1xuICAgICAgICBwLnZzdWIodix2VG9QKTtcbiAgICAgICAgdmFyIHIxID0gbi5kb3QodlRvUCk7XG5cbiAgICAgICAgdmFyIHZUb1BvaW50SW5zaWRlID0gQ29udmV4UG9seWhlZHJvbl92VG9Qb2ludEluc2lkZTtcbiAgICAgICAgcG9pbnRJbnNpZGUudnN1Yih2LHZUb1BvaW50SW5zaWRlKTtcbiAgICAgICAgdmFyIHIyID0gbi5kb3QodlRvUG9pbnRJbnNpZGUpO1xuXG4gICAgICAgIGlmKChyMTwwICYmIHIyPjApIHx8IChyMT4wICYmIHIyPDApKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gRW5jb3VudGVyZWQgc29tZSBvdGhlciBzaWduLiBFeGl0LlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgd2UgZ290IGhlcmUsIGFsbCBkb3QgcHJvZHVjdHMgd2VyZSBvZiB0aGUgc2FtZSBzaWduLlxuICAgIHJldHVybiBwb3NpdGl2ZVJlc3VsdCA/IDEgOiAtMTtcbn07XG5cbi8qKlxuICogR2V0IG1heCBhbmQgbWluIGRvdCBwcm9kdWN0IG9mIGEgY29udmV4IGh1bGwgYXQgcG9zaXRpb24gKHBvcyxxdWF0KSBwcm9qZWN0ZWQgb250byBhbiBheGlzLiBSZXN1bHRzIGFyZSBzYXZlZCBpbiB0aGUgYXJyYXkgbWF4bWluLlxuICogQHN0YXRpY1xuICogQG1ldGhvZCBwcm9qZWN0XG4gKiBAcGFyYW0ge0NvbnZleFBvbHloZWRyb259IGh1bGxcbiAqIEBwYXJhbSB7VmVjM30gYXhpc1xuICogQHBhcmFtIHtWZWMzfSBwb3NcbiAqIEBwYXJhbSB7UXVhdGVybmlvbn0gcXVhdFxuICogQHBhcmFtIHthcnJheX0gcmVzdWx0IHJlc3VsdFswXSBhbmQgcmVzdWx0WzFdIHdpbGwgYmUgc2V0IHRvIG1heGltdW0gYW5kIG1pbmltdW0sIHJlc3BlY3RpdmVseS5cbiAqL1xudmFyIHByb2plY3Rfd29ybGRWZXJ0ZXggPSBuZXcgVmVjMygpO1xudmFyIHByb2plY3RfbG9jYWxBeGlzID0gbmV3IFZlYzMoKTtcbnZhciBwcm9qZWN0X2xvY2FsT3JpZ2luID0gbmV3IFZlYzMoKTtcbkNvbnZleFBvbHloZWRyb24ucHJvamVjdCA9IGZ1bmN0aW9uKGh1bGwsIGF4aXMsIHBvcywgcXVhdCwgcmVzdWx0KXtcbiAgICB2YXIgbiA9IGh1bGwudmVydGljZXMubGVuZ3RoLFxuICAgICAgICB3b3JsZFZlcnRleCA9IHByb2plY3Rfd29ybGRWZXJ0ZXgsXG4gICAgICAgIGxvY2FsQXhpcyA9IHByb2plY3RfbG9jYWxBeGlzLFxuICAgICAgICBtYXggPSAwLFxuICAgICAgICBtaW4gPSAwLFxuICAgICAgICBsb2NhbE9yaWdpbiA9IHByb2plY3RfbG9jYWxPcmlnaW4sXG4gICAgICAgIHZzID0gaHVsbC52ZXJ0aWNlcztcblxuICAgIGxvY2FsT3JpZ2luLnNldFplcm8oKTtcblxuICAgIC8vIFRyYW5zZm9ybSB0aGUgYXhpcyB0byBsb2NhbFxuICAgIFRyYW5zZm9ybS52ZWN0b3JUb0xvY2FsRnJhbWUocG9zLCBxdWF0LCBheGlzLCBsb2NhbEF4aXMpO1xuICAgIFRyYW5zZm9ybS5wb2ludFRvTG9jYWxGcmFtZShwb3MsIHF1YXQsIGxvY2FsT3JpZ2luLCBsb2NhbE9yaWdpbik7XG4gICAgdmFyIGFkZCA9IGxvY2FsT3JpZ2luLmRvdChsb2NhbEF4aXMpO1xuXG4gICAgbWluID0gbWF4ID0gdnNbMF0uZG90KGxvY2FsQXhpcyk7XG5cbiAgICBmb3IodmFyIGkgPSAxOyBpIDwgbjsgaSsrKXtcbiAgICAgICAgdmFyIHZhbCA9IHZzW2ldLmRvdChsb2NhbEF4aXMpO1xuXG4gICAgICAgIGlmKHZhbCA+IG1heCl7XG4gICAgICAgICAgICBtYXggPSB2YWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZih2YWwgPCBtaW4pe1xuICAgICAgICAgICAgbWluID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbWluIC09IGFkZDtcbiAgICBtYXggLT0gYWRkO1xuXG4gICAgaWYobWluID4gbWF4KXtcbiAgICAgICAgLy8gSW5jb25zaXN0ZW50IC0gc3dhcFxuICAgICAgICB2YXIgdGVtcCA9IG1pbjtcbiAgICAgICAgbWluID0gbWF4O1xuICAgICAgICBtYXggPSB0ZW1wO1xuICAgIH1cbiAgICAvLyBPdXRwdXRcbiAgICByZXN1bHRbMF0gPSBtYXg7XG4gICAgcmVzdWx0WzFdID0gbWluO1xufTtcblxufSx7XCIuLi9tYXRoL1F1YXRlcm5pb25cIjoyOCxcIi4uL21hdGgvVHJhbnNmb3JtXCI6MjksXCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4vU2hhcGVcIjo0M31dLDM5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gQ3lsaW5kZXI7XG5cbnZhciBTaGFwZSA9IF9kZXJlcV8oJy4vU2hhcGUnKTtcbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG52YXIgUXVhdGVybmlvbiA9IF9kZXJlcV8oJy4uL21hdGgvUXVhdGVybmlvbicpO1xudmFyIENvbnZleFBvbHloZWRyb24gPSBfZGVyZXFfKCcuL0NvbnZleFBvbHloZWRyb24nKTtcblxuLyoqXG4gKiBAY2xhc3MgQ3lsaW5kZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQ29udmV4UG9seWhlZHJvblxuICogQGF1dGhvciBzY2h0ZXBwZSAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1c1RvcFxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1c0JvdHRvbVxuICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodFxuICogQHBhcmFtIHtOdW1iZXJ9IG51bVNlZ21lbnRzIFRoZSBudW1iZXIgb2Ygc2VnbWVudHMgdG8gYnVpbGQgdGhlIGN5bGluZGVyIG91dCBvZlxuICovXG5mdW5jdGlvbiBDeWxpbmRlciggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCAsIG51bVNlZ21lbnRzICkge1xuICAgIHZhciBOID0gbnVtU2VnbWVudHMsXG4gICAgICAgIHZlcnRzID0gW10sXG4gICAgICAgIGF4ZXMgPSBbXSxcbiAgICAgICAgZmFjZXMgPSBbXSxcbiAgICAgICAgYm90dG9tZmFjZSA9IFtdLFxuICAgICAgICB0b3BmYWNlID0gW10sXG4gICAgICAgIGNvcyA9IE1hdGguY29zLFxuICAgICAgICBzaW4gPSBNYXRoLnNpbjtcblxuICAgIC8vIEZpcnN0IGJvdHRvbSBwb2ludFxuICAgIHZlcnRzLnB1c2gobmV3IFZlYzMocmFkaXVzQm90dG9tKmNvcygwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXNCb3R0b20qc2luKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1oZWlnaHQqMC41KSk7XG4gICAgYm90dG9tZmFjZS5wdXNoKDApO1xuXG4gICAgLy8gRmlyc3QgdG9wIHBvaW50XG4gICAgdmVydHMucHVzaChuZXcgVmVjMyhyYWRpdXNUb3AqY29zKDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1c1RvcCpzaW4oMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0KjAuNSkpO1xuICAgIHRvcGZhY2UucHVzaCgxKTtcblxuICAgIGZvcih2YXIgaT0wOyBpPE47IGkrKyl7XG4gICAgICAgIHZhciB0aGV0YSA9IDIqTWF0aC5QSS9OICogKGkrMSk7XG4gICAgICAgIHZhciB0aGV0YU4gPSAyKk1hdGguUEkvTiAqIChpKzAuNSk7XG4gICAgICAgIGlmKGk8Ti0xKXtcbiAgICAgICAgICAgIC8vIEJvdHRvbVxuICAgICAgICAgICAgdmVydHMucHVzaChuZXcgVmVjMyhyYWRpdXNCb3R0b20qY29zKHRoZXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1c0JvdHRvbSpzaW4odGhldGEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLWhlaWdodCowLjUpKTtcbiAgICAgICAgICAgIGJvdHRvbWZhY2UucHVzaCgyKmkrMik7XG4gICAgICAgICAgICAvLyBUb3BcbiAgICAgICAgICAgIHZlcnRzLnB1c2gobmV3IFZlYzMocmFkaXVzVG9wKmNvcyh0aGV0YSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXNUb3Aqc2luKHRoZXRhKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCowLjUpKTtcbiAgICAgICAgICAgIHRvcGZhY2UucHVzaCgyKmkrMyk7XG5cbiAgICAgICAgICAgIC8vIEZhY2VcbiAgICAgICAgICAgIGZhY2VzLnB1c2goWzIqaSsyLCAyKmkrMywgMippKzEsMippXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmYWNlcy5wdXNoKFswLDEsIDIqaSsxLCAyKmldKTsgLy8gQ29ubmVjdFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXhpczogd2UgY2FuIGN1dCBvZmYgaGFsZiBvZiB0aGVtIGlmIHdlIGhhdmUgZXZlbiBudW1iZXIgb2Ygc2VnbWVudHNcbiAgICAgICAgaWYoTiAlIDIgPT09IDEgfHwgaSA8IE4gLyAyKXtcbiAgICAgICAgICAgIGF4ZXMucHVzaChuZXcgVmVjMyhjb3ModGhldGFOKSwgc2luKHRoZXRhTiksIDApKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmYWNlcy5wdXNoKHRvcGZhY2UpO1xuICAgIGF4ZXMucHVzaChuZXcgVmVjMygwLDAsMSkpO1xuXG4gICAgLy8gUmVvcmRlciBib3R0b20gZmFjZVxuICAgIHZhciB0ZW1wID0gW107XG4gICAgZm9yKHZhciBpPTA7IGk8Ym90dG9tZmFjZS5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHRlbXAucHVzaChib3R0b21mYWNlW2JvdHRvbWZhY2UubGVuZ3RoIC0gaSAtIDFdKTtcbiAgICB9XG4gICAgZmFjZXMucHVzaCh0ZW1wKTtcblxuICAgIHRoaXMudHlwZSA9IFNoYXBlLnR5cGVzLkNPTlZFWFBPTFlIRURST047XG4gICAgQ29udmV4UG9seWhlZHJvbi5jYWxsKCB0aGlzLCB2ZXJ0cywgZmFjZXMsIGF4ZXMgKTtcbn1cblxuQ3lsaW5kZXIucHJvdG90eXBlID0gbmV3IENvbnZleFBvbHloZWRyb24oKTtcblxufSx7XCIuLi9tYXRoL1F1YXRlcm5pb25cIjoyOCxcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi9Db252ZXhQb2x5aGVkcm9uXCI6MzgsXCIuL1NoYXBlXCI6NDN9XSw0MDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgU2hhcGUgPSBfZGVyZXFfKCcuL1NoYXBlJyk7XG52YXIgQ29udmV4UG9seWhlZHJvbiA9IF9kZXJlcV8oJy4vQ29udmV4UG9seWhlZHJvbicpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBVdGlscyA9IF9kZXJlcV8oJy4uL3V0aWxzL1V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gSGVpZ2h0ZmllbGQ7XG5cbi8qKlxuICogSGVpZ2h0ZmllbGQgc2hhcGUgY2xhc3MuIEhlaWdodCBkYXRhIGlzIGdpdmVuIGFzIGFuIGFycmF5LiBUaGVzZSBkYXRhIHBvaW50cyBhcmUgc3ByZWFkIG91dCBldmVubHkgd2l0aCBhIGdpdmVuIGRpc3RhbmNlLlxuICogQGNsYXNzIEhlaWdodGZpZWxkXG4gKiBAZXh0ZW5kcyBTaGFwZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBkYXRhIEFuIGFycmF5IG9mIFkgdmFsdWVzIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGNvbnN0cnVjdCB0aGUgdGVycmFpbi5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWluVmFsdWVdIE1pbmltdW0gdmFsdWUgb2YgdGhlIGRhdGEgcG9pbnRzIGluIHRoZSBkYXRhIGFycmF5LiBXaWxsIGJlIGNvbXB1dGVkIGF1dG9tYXRpY2FsbHkgaWYgbm90IGdpdmVuLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm1heFZhbHVlXSBNYXhpbXVtIHZhbHVlLlxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmVsZW1lbnRTaXplPTAuMV0gV29ybGQgc3BhY2luZyBiZXR3ZWVuIHRoZSBkYXRhIHBvaW50cyBpbiBYIGRpcmVjdGlvbi5cbiAqIEB0b2RvIFNob3VsZCBiZSBwb3NzaWJsZSB0byB1c2UgYWxvbmcgYWxsIGF4ZXMsIG5vdCBqdXN0IHlcbiAqXG4gKiBAZXhhbXBsZVxuICogICAgIC8vIEdlbmVyYXRlIHNvbWUgaGVpZ2h0IGRhdGEgKHktdmFsdWVzKS5cbiAqICAgICB2YXIgZGF0YSA9IFtdO1xuICogICAgIGZvcih2YXIgaSA9IDA7IGkgPCAxMDAwOyBpKyspe1xuICogICAgICAgICB2YXIgeSA9IDAuNSAqIE1hdGguY29zKDAuMiAqIGkpO1xuICogICAgICAgICBkYXRhLnB1c2goeSk7XG4gKiAgICAgfVxuICpcbiAqICAgICAvLyBDcmVhdGUgdGhlIGhlaWdodGZpZWxkIHNoYXBlXG4gKiAgICAgdmFyIGhlaWdodGZpZWxkU2hhcGUgPSBuZXcgSGVpZ2h0ZmllbGQoZGF0YSwge1xuICogICAgICAgICBlbGVtZW50U2l6ZTogMSAvLyBEaXN0YW5jZSBiZXR3ZWVuIHRoZSBkYXRhIHBvaW50cyBpbiBYIGFuZCBZIGRpcmVjdGlvbnNcbiAqICAgICB9KTtcbiAqICAgICB2YXIgaGVpZ2h0ZmllbGRCb2R5ID0gbmV3IEJvZHkoKTtcbiAqICAgICBoZWlnaHRmaWVsZEJvZHkuYWRkU2hhcGUoaGVpZ2h0ZmllbGRTaGFwZSk7XG4gKiAgICAgd29ybGQuYWRkQm9keShoZWlnaHRmaWVsZEJvZHkpO1xuICovXG5mdW5jdGlvbiBIZWlnaHRmaWVsZChkYXRhLCBvcHRpb25zKXtcbiAgICBvcHRpb25zID0gVXRpbHMuZGVmYXVsdHMob3B0aW9ucywge1xuICAgICAgICBtYXhWYWx1ZSA6IG51bGwsXG4gICAgICAgIG1pblZhbHVlIDogbnVsbCxcbiAgICAgICAgZWxlbWVudFNpemUgOiAxXG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBudW1iZXJzLCBvciBoZWlnaHQgdmFsdWVzLCB0aGF0IGFyZSBzcHJlYWQgb3V0IGFsb25nIHRoZSB4IGF4aXMuXG4gICAgICogQHByb3BlcnR5IHthcnJheX0gZGF0YVxuICAgICAqL1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICAvKipcbiAgICAgKiBNYXggdmFsdWUgb2YgdGhlIGRhdGFcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gbWF4VmFsdWVcbiAgICAgKi9cbiAgICB0aGlzLm1heFZhbHVlID0gb3B0aW9ucy5tYXhWYWx1ZTtcblxuICAgIC8qKlxuICAgICAqIE1heCB2YWx1ZSBvZiB0aGUgZGF0YVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtaW5WYWx1ZVxuICAgICAqL1xuICAgIHRoaXMubWluVmFsdWUgPSBvcHRpb25zLm1pblZhbHVlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHdpZHRoIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBlbGVtZW50U2l6ZVxuICAgICAqIEB0b2RvIGVsZW1lbnRTaXplWCBhbmQgWVxuICAgICAqL1xuICAgIHRoaXMuZWxlbWVudFNpemUgPSBvcHRpb25zLmVsZW1lbnRTaXplO1xuXG4gICAgaWYob3B0aW9ucy5taW5WYWx1ZSA9PT0gbnVsbCl7XG4gICAgICAgIHRoaXMudXBkYXRlTWluVmFsdWUoKTtcbiAgICB9XG4gICAgaWYob3B0aW9ucy5tYXhWYWx1ZSA9PT0gbnVsbCl7XG4gICAgICAgIHRoaXMudXBkYXRlTWF4VmFsdWUoKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhY2hlRW5hYmxlZCA9IHRydWU7XG5cbiAgICBTaGFwZS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5waWxsYXJDb252ZXggPSBuZXcgQ29udmV4UG9seWhlZHJvbigpO1xuICAgIHRoaXMucGlsbGFyT2Zmc2V0ID0gbmV3IFZlYzMoKTtcblxuICAgIHRoaXMudHlwZSA9IFNoYXBlLnR5cGVzLkhFSUdIVEZJRUxEO1xuICAgIHRoaXMudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMoKTtcblxuICAgIC8vIFwiaV9qX2lzVXBwZXJcIiA9PiB7IGNvbnZleDogLi4uLCBvZmZzZXQ6IC4uLiB9XG4gICAgLy8gZm9yIGV4YW1wbGU6XG4gICAgLy8gX2NhY2hlZFBpbGxhcnNbXCIwXzJfMVwiXVxuICAgIHRoaXMuX2NhY2hlZFBpbGxhcnMgPSB7fTtcbn1cbkhlaWdodGZpZWxkLnByb3RvdHlwZSA9IG5ldyBTaGFwZSgpO1xuXG4vKipcbiAqIENhbGwgd2hlbmV2ZXIgeW91IGNoYW5nZSB0aGUgZGF0YSBhcnJheS5cbiAqIEBtZXRob2QgdXBkYXRlXG4gKi9cbkhlaWdodGZpZWxkLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpe1xuICAgIHRoaXMuX2NhY2hlZFBpbGxhcnMgPSB7fTtcbn07XG5cbi8qKlxuICogVXBkYXRlIHRoZSAubWluVmFsdWUgcHJvcGVydHlcbiAqIEBtZXRob2QgdXBkYXRlTWluVmFsdWVcbiAqL1xuSGVpZ2h0ZmllbGQucHJvdG90eXBlLnVwZGF0ZU1pblZhbHVlID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICB2YXIgbWluVmFsdWUgPSBkYXRhWzBdWzBdO1xuICAgIGZvcih2YXIgaT0wOyBpICE9PSBkYXRhLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgZm9yKHZhciBqPTA7IGogIT09IGRhdGFbaV0ubGVuZ3RoOyBqKyspe1xuICAgICAgICAgICAgdmFyIHYgPSBkYXRhW2ldW2pdO1xuICAgICAgICAgICAgaWYodiA8IG1pblZhbHVlKXtcbiAgICAgICAgICAgICAgICBtaW5WYWx1ZSA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5taW5WYWx1ZSA9IG1pblZhbHVlO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgdGhlIC5tYXhWYWx1ZSBwcm9wZXJ0eVxuICogQG1ldGhvZCB1cGRhdGVNYXhWYWx1ZVxuICovXG5IZWlnaHRmaWVsZC5wcm90b3R5cGUudXBkYXRlTWF4VmFsdWUgPSBmdW5jdGlvbigpe1xuICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgIHZhciBtYXhWYWx1ZSA9IGRhdGFbMF1bMF07XG4gICAgZm9yKHZhciBpPTA7IGkgIT09IGRhdGEubGVuZ3RoOyBpKyspe1xuICAgICAgICBmb3IodmFyIGo9MDsgaiAhPT0gZGF0YVtpXS5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICB2YXIgdiA9IGRhdGFbaV1bal07XG4gICAgICAgICAgICBpZih2ID4gbWF4VmFsdWUpe1xuICAgICAgICAgICAgICAgIG1heFZhbHVlID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1heFZhbHVlID0gbWF4VmFsdWU7XG59O1xuXG4vKipcbiAqIFNldCB0aGUgaGVpZ2h0IHZhbHVlIGF0IGFuIGluZGV4LiBEb24ndCBmb3JnZXQgdG8gdXBkYXRlIG1heFZhbHVlIGFuZCBtaW5WYWx1ZSBhZnRlciB5b3UncmUgZG9uZS5cbiAqIEBtZXRob2Qgc2V0SGVpZ2h0VmFsdWVBdEluZGV4XG4gKiBAcGFyYW0ge2ludGVnZXJ9IHhpXG4gKiBAcGFyYW0ge2ludGVnZXJ9IHlpXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqL1xuSGVpZ2h0ZmllbGQucHJvdG90eXBlLnNldEhlaWdodFZhbHVlQXRJbmRleCA9IGZ1bmN0aW9uKHhpLCB5aSwgdmFsdWUpe1xuICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgIGRhdGFbeGldW3lpXSA9IHZhbHVlO1xuXG4gICAgLy8gSW52YWxpZGF0ZSBjYWNoZVxuICAgIHRoaXMuY2xlYXJDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSwgeWksIGZhbHNlKTtcbiAgICBpZih4aSA+IDApe1xuICAgICAgICB0aGlzLmNsZWFyQ2FjaGVkQ29udmV4VHJpYW5nbGVQaWxsYXIoeGkgLSAxLCB5aSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuY2xlYXJDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSAtIDEsIHlpLCBmYWxzZSk7XG4gICAgfVxuICAgIGlmKHlpID4gMCl7XG4gICAgICAgIHRoaXMuY2xlYXJDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSwgeWkgLSAxLCB0cnVlKTtcbiAgICAgICAgdGhpcy5jbGVhckNhY2hlZENvbnZleFRyaWFuZ2xlUGlsbGFyKHhpLCB5aSAtIDEsIGZhbHNlKTtcbiAgICB9XG4gICAgaWYoeWkgPiAwICYmIHhpID4gMCl7XG4gICAgICAgIHRoaXMuY2xlYXJDYWNoZWRDb252ZXhUcmlhbmdsZVBpbGxhcih4aSAtIDEsIHlpIC0gMSwgdHJ1ZSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBHZXQgbWF4L21pbiBpbiBhIHJlY3RhbmdsZSBpbiB0aGUgbWF0cml4IGRhdGFcbiAqIEBtZXRob2QgZ2V0UmVjdE1pbk1heFxuICogQHBhcmFtICB7aW50ZWdlcn0gaU1pblhcbiAqIEBwYXJhbSAge2ludGVnZXJ9IGlNaW5ZXG4gKiBAcGFyYW0gIHtpbnRlZ2VyfSBpTWF4WFxuICogQHBhcmFtICB7aW50ZWdlcn0gaU1heFlcbiAqIEBwYXJhbSAge2FycmF5fSBbcmVzdWx0XSBBbiBhcnJheSB0byBzdG9yZSB0aGUgcmVzdWx0cyBpbi5cbiAqIEByZXR1cm4ge2FycmF5fSBUaGUgcmVzdWx0IGFycmF5LCBpZiBpdCB3YXMgcGFzc2VkIGluLiBNaW5pbXVtIHdpbGwgYmUgYXQgcG9zaXRpb24gMCBhbmQgbWF4IGF0IDEuXG4gKi9cbkhlaWdodGZpZWxkLnByb3RvdHlwZS5nZXRSZWN0TWluTWF4ID0gZnVuY3Rpb24gKGlNaW5YLCBpTWluWSwgaU1heFgsIGlNYXhZLCByZXN1bHQpIHtcbiAgICByZXN1bHQgPSByZXN1bHQgfHwgW107XG5cbiAgICAvLyBHZXQgbWF4IGFuZCBtaW4gb2YgdGhlIGRhdGFcbiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YSxcbiAgICAgICAgbWF4ID0gdGhpcy5taW5WYWx1ZTsgLy8gU2V0IGZpcnN0IHZhbHVlXG4gICAgZm9yKHZhciBpID0gaU1pblg7IGkgPD0gaU1heFg7IGkrKyl7XG4gICAgICAgIGZvcih2YXIgaiA9IGlNaW5ZOyBqIDw9IGlNYXhZOyBqKyspe1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IGRhdGFbaV1bal07XG4gICAgICAgICAgICBpZihoZWlnaHQgPiBtYXgpe1xuICAgICAgICAgICAgICAgIG1heCA9IGhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc3VsdFswXSA9IHRoaXMubWluVmFsdWU7XG4gICAgcmVzdWx0WzFdID0gbWF4O1xufTtcblxuLyoqXG4gKiBHZXQgdGhlIGluZGV4IG9mIGEgbG9jYWwgcG9zaXRpb24gb24gdGhlIGhlaWdodGZpZWxkLiBUaGUgaW5kZXhlcyBpbmRpY2F0ZSB0aGUgcmVjdGFuZ2xlcywgc28gaWYgeW91ciB0ZXJyYWluIGlzIG1hZGUgb2YgTiB4IE4gaGVpZ2h0IGRhdGEgcG9pbnRzLCB5b3Ugd2lsbCBoYXZlIHJlY3RhbmdsZSBpbmRleGVzIHJhbmdpbmcgZnJvbSAwIHRvIE4tMS5cbiAqIEBtZXRob2QgZ2V0SW5kZXhPZlBvc2l0aW9uXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSAge251bWJlcn0geVxuICogQHBhcmFtICB7YXJyYXl9IHJlc3VsdCBUd28tZWxlbWVudCBhcnJheVxuICogQHBhcmFtICB7Ym9vbGVhbn0gY2xhbXAgSWYgdGhlIHBvc2l0aW9uIHNob3VsZCBiZSBjbGFtcGVkIHRvIHRoZSBoZWlnaHRmaWVsZCBlZGdlLlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuSGVpZ2h0ZmllbGQucHJvdG90eXBlLmdldEluZGV4T2ZQb3NpdGlvbiA9IGZ1bmN0aW9uICh4LCB5LCByZXN1bHQsIGNsYW1wKSB7XG5cbiAgICAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSBkYXRhIHBvaW50cyB0byB0ZXN0IGFnYWluc3RcbiAgICB2YXIgdyA9IHRoaXMuZWxlbWVudFNpemU7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgdmFyIHhpID0gTWF0aC5mbG9vcih4IC8gdyk7XG4gICAgdmFyIHlpID0gTWF0aC5mbG9vcih5IC8gdyk7XG5cbiAgICByZXN1bHRbMF0gPSB4aTtcbiAgICByZXN1bHRbMV0gPSB5aTtcblxuICAgIGlmKGNsYW1wKXtcbiAgICAgICAgLy8gQ2xhbXAgaW5kZXggdG8gZWRnZXNcbiAgICAgICAgaWYoeGkgPCAwKXsgeGkgPSAwOyB9XG4gICAgICAgIGlmKHlpIDwgMCl7IHlpID0gMDsgfVxuICAgICAgICBpZih4aSA+PSBkYXRhLmxlbmd0aCAtIDEpeyB4aSA9IGRhdGEubGVuZ3RoIC0gMTsgfVxuICAgICAgICBpZih5aSA+PSBkYXRhWzBdLmxlbmd0aCAtIDEpeyB5aSA9IGRhdGFbMF0ubGVuZ3RoIC0gMTsgfVxuICAgIH1cblxuICAgIC8vIEJhaWwgb3V0IGlmIHdlIGFyZSBvdXQgb2YgdGhlIHRlcnJhaW5cbiAgICBpZih4aSA8IDAgfHwgeWkgPCAwIHx8IHhpID49IGRhdGEubGVuZ3RoLTEgfHwgeWkgPj0gZGF0YVswXS5sZW5ndGgtMSl7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbkhlaWdodGZpZWxkLnByb3RvdHlwZS5nZXRIZWlnaHRBdCA9IGZ1bmN0aW9uKHgsIHksIGVkZ2VDbGFtcCl7XG4gICAgdmFyIGlkeCA9IFtdO1xuICAgIHRoaXMuZ2V0SW5kZXhPZlBvc2l0aW9uKHgsIHksIGlkeCwgZWRnZUNsYW1wKTtcblxuICAgIC8vIFRPRE86IGdldCB1cHBlciBvciBsb3dlciB0cmlhbmdsZSwgdGhlbiB1c2UgYmFyeWNlbnRyaWMgaW50ZXJwb2xhdGlvbiB0byBnZXQgdGhlIGhlaWdodCBpbiB0aGUgdHJpYW5nbGUuXG4gICAgdmFyIG1pbm1heCA9IFtdO1xuICAgIHRoaXMuZ2V0UmVjdE1pbk1heChpZHhbMF0sIGlkeFsxXSArIDEsIGlkeFswXSwgaWR4WzFdICsgMSwgbWlubWF4KTtcblxuICAgIHJldHVybiAobWlubWF4WzBdICsgbWlubWF4WzFdKSAvIDI7IC8vIGF2ZXJhZ2Vcbn07XG5cbkhlaWdodGZpZWxkLnByb3RvdHlwZS5nZXRDYWNoZUNvbnZleFRyaWFuZ2xlUGlsbGFyS2V5ID0gZnVuY3Rpb24oeGksIHlpLCBnZXRVcHBlclRyaWFuZ2xlKXtcbiAgICByZXR1cm4geGkgKyAnXycgKyB5aSArICdfJyArIChnZXRVcHBlclRyaWFuZ2xlID8gMSA6IDApO1xufTtcblxuSGVpZ2h0ZmllbGQucHJvdG90eXBlLmdldENhY2hlZENvbnZleFRyaWFuZ2xlUGlsbGFyID0gZnVuY3Rpb24oeGksIHlpLCBnZXRVcHBlclRyaWFuZ2xlKXtcbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkUGlsbGFyc1t0aGlzLmdldENhY2hlQ29udmV4VHJpYW5nbGVQaWxsYXJLZXkoeGksIHlpLCBnZXRVcHBlclRyaWFuZ2xlKV07XG59O1xuXG5IZWlnaHRmaWVsZC5wcm90b3R5cGUuc2V0Q2FjaGVkQ29udmV4VHJpYW5nbGVQaWxsYXIgPSBmdW5jdGlvbih4aSwgeWksIGdldFVwcGVyVHJpYW5nbGUsIGNvbnZleCwgb2Zmc2V0KXtcbiAgICB0aGlzLl9jYWNoZWRQaWxsYXJzW3RoaXMuZ2V0Q2FjaGVDb252ZXhUcmlhbmdsZVBpbGxhcktleSh4aSwgeWksIGdldFVwcGVyVHJpYW5nbGUpXSA9IHtcbiAgICAgICAgY29udmV4OiBjb252ZXgsXG4gICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgfTtcbn07XG5cbkhlaWdodGZpZWxkLnByb3RvdHlwZS5jbGVhckNhY2hlZENvbnZleFRyaWFuZ2xlUGlsbGFyID0gZnVuY3Rpb24oeGksIHlpLCBnZXRVcHBlclRyaWFuZ2xlKXtcbiAgICBkZWxldGUgdGhpcy5fY2FjaGVkUGlsbGFyc1t0aGlzLmdldENhY2hlQ29udmV4VHJpYW5nbGVQaWxsYXJLZXkoeGksIHlpLCBnZXRVcHBlclRyaWFuZ2xlKV07XG59O1xuXG4vKipcbiAqIEdldCBhIHRyaWFuZ2xlIGluIHRoZSB0ZXJyYWluIGluIHRoZSBmb3JtIG9mIGEgdHJpYW5ndWxhciBjb252ZXggc2hhcGUuXG4gKiBAbWV0aG9kIGdldENvbnZleFRyaWFuZ2xlUGlsbGFyXG4gKiBAcGFyYW0gIHtpbnRlZ2VyfSBpXG4gKiBAcGFyYW0gIHtpbnRlZ2VyfSBqXG4gKiBAcGFyYW0gIHtib29sZWFufSBnZXRVcHBlclRyaWFuZ2xlXG4gKi9cbkhlaWdodGZpZWxkLnByb3RvdHlwZS5nZXRDb252ZXhUcmlhbmdsZVBpbGxhciA9IGZ1bmN0aW9uKHhpLCB5aSwgZ2V0VXBwZXJUcmlhbmdsZSl7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMucGlsbGFyQ29udmV4O1xuICAgIHZhciBvZmZzZXRSZXN1bHQgPSB0aGlzLnBpbGxhck9mZnNldDtcblxuICAgIGlmKHRoaXMuY2FjaGVFbmFibGVkKXtcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmdldENhY2hlZENvbnZleFRyaWFuZ2xlUGlsbGFyKHhpLCB5aSwgZ2V0VXBwZXJUcmlhbmdsZSk7XG4gICAgICAgIGlmKGRhdGEpe1xuICAgICAgICAgICAgdGhpcy5waWxsYXJDb252ZXggPSBkYXRhLmNvbnZleDtcbiAgICAgICAgICAgIHRoaXMucGlsbGFyT2Zmc2V0ID0gZGF0YS5vZmZzZXQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSBuZXcgQ29udmV4UG9seWhlZHJvbigpO1xuICAgICAgICBvZmZzZXRSZXN1bHQgPSBuZXcgVmVjMygpO1xuXG4gICAgICAgIHRoaXMucGlsbGFyQ29udmV4ID0gcmVzdWx0O1xuICAgICAgICB0aGlzLnBpbGxhck9mZnNldCA9IG9mZnNldFJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICB2YXIgZWxlbWVudFNpemUgPSB0aGlzLmVsZW1lbnRTaXplO1xuICAgIHZhciBmYWNlcyA9IHJlc3VsdC5mYWNlcztcblxuICAgIC8vIFJldXNlIHZlcnRzIGlmIHBvc3NpYmxlXG4gICAgcmVzdWx0LnZlcnRpY2VzLmxlbmd0aCA9IDY7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2OyBpKyspIHtcbiAgICAgICAgaWYoIXJlc3VsdC52ZXJ0aWNlc1tpXSl7XG4gICAgICAgICAgICByZXN1bHQudmVydGljZXNbaV0gPSBuZXcgVmVjMygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV1c2UgZmFjZXMgaWYgcG9zc2libGVcbiAgICBmYWNlcy5sZW5ndGggPSA1O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICAgIGlmKCFmYWNlc1tpXSl7XG4gICAgICAgICAgICBmYWNlc1tpXSA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHZlcnRzID0gcmVzdWx0LnZlcnRpY2VzO1xuXG4gICAgdmFyIGggPSAoTWF0aC5taW4oXG4gICAgICAgIGRhdGFbeGldW3lpXSxcbiAgICAgICAgZGF0YVt4aSsxXVt5aV0sXG4gICAgICAgIGRhdGFbeGldW3lpKzFdLFxuICAgICAgICBkYXRhW3hpKzFdW3lpKzFdXG4gICAgKSAtIHRoaXMubWluVmFsdWUgKSAvIDIgKyB0aGlzLm1pblZhbHVlO1xuXG4gICAgaWYgKCFnZXRVcHBlclRyaWFuZ2xlKSB7XG5cbiAgICAgICAgLy8gQ2VudGVyIG9mIHRoZSB0cmlhbmdsZSBwaWxsYXIgLSBhbGwgcG9seWdvbnMgYXJlIGdpdmVuIHJlbGF0aXZlIHRvIHRoaXMgb25lXG4gICAgICAgIG9mZnNldFJlc3VsdC5zZXQoXG4gICAgICAgICAgICAoeGkgKyAwLjI1KSAqIGVsZW1lbnRTaXplLCAvLyBzb3J0IG9mIGNlbnRlciBvZiBhIHRyaWFuZ2xlXG4gICAgICAgICAgICAoeWkgKyAwLjI1KSAqIGVsZW1lbnRTaXplLFxuICAgICAgICAgICAgaCAvLyB2ZXJ0aWNhbCBjZW50ZXJcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBUb3AgdHJpYW5nbGUgdmVydHNcbiAgICAgICAgdmVydHNbMF0uc2V0KFxuICAgICAgICAgICAgLTAuMjUgKiBlbGVtZW50U2l6ZSxcbiAgICAgICAgICAgIC0wLjI1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICBkYXRhW3hpXVt5aV0gLSBoXG4gICAgICAgICk7XG4gICAgICAgIHZlcnRzWzFdLnNldChcbiAgICAgICAgICAgIDAuNzUgKiBlbGVtZW50U2l6ZSxcbiAgICAgICAgICAgIC0wLjI1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICBkYXRhW3hpICsgMV1beWldIC0gaFxuICAgICAgICApO1xuICAgICAgICB2ZXJ0c1syXS5zZXQoXG4gICAgICAgICAgICAtMC4yNSAqIGVsZW1lbnRTaXplLFxuICAgICAgICAgICAgMC43NSAqIGVsZW1lbnRTaXplLFxuICAgICAgICAgICAgZGF0YVt4aV1beWkgKyAxXSAtIGhcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBib3R0b20gdHJpYW5nbGUgdmVydHNcbiAgICAgICAgdmVydHNbM10uc2V0KFxuICAgICAgICAgICAgLTAuMjUgKiBlbGVtZW50U2l6ZSxcbiAgICAgICAgICAgIC0wLjI1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICAtaC0xXG4gICAgICAgICk7XG4gICAgICAgIHZlcnRzWzRdLnNldChcbiAgICAgICAgICAgIDAuNzUgKiBlbGVtZW50U2l6ZSxcbiAgICAgICAgICAgIC0wLjI1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICAtaC0xXG4gICAgICAgICk7XG4gICAgICAgIHZlcnRzWzVdLnNldChcbiAgICAgICAgICAgIC0wLjI1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICAwLjc1ICAqIGVsZW1lbnRTaXplLFxuICAgICAgICAgICAgLWgtMVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHRvcCB0cmlhbmdsZVxuICAgICAgICBmYWNlc1swXVswXSA9IDA7XG4gICAgICAgIGZhY2VzWzBdWzFdID0gMTtcbiAgICAgICAgZmFjZXNbMF1bMl0gPSAyO1xuXG4gICAgICAgIC8vIGJvdHRvbSB0cmlhbmdsZVxuICAgICAgICBmYWNlc1sxXVswXSA9IDU7XG4gICAgICAgIGZhY2VzWzFdWzFdID0gNDtcbiAgICAgICAgZmFjZXNbMV1bMl0gPSAzO1xuXG4gICAgICAgIC8vIC14IGZhY2luZyBxdWFkXG4gICAgICAgIGZhY2VzWzJdWzBdID0gMDtcbiAgICAgICAgZmFjZXNbMl1bMV0gPSAyO1xuICAgICAgICBmYWNlc1syXVsyXSA9IDU7XG4gICAgICAgIGZhY2VzWzJdWzNdID0gMztcblxuICAgICAgICAvLyAteSBmYWNpbmcgcXVhZFxuICAgICAgICBmYWNlc1szXVswXSA9IDE7XG4gICAgICAgIGZhY2VzWzNdWzFdID0gMDtcbiAgICAgICAgZmFjZXNbM11bMl0gPSAzO1xuICAgICAgICBmYWNlc1szXVszXSA9IDQ7XG5cbiAgICAgICAgLy8gK3h5IGZhY2luZyBxdWFkXG4gICAgICAgIGZhY2VzWzRdWzBdID0gNDtcbiAgICAgICAgZmFjZXNbNF1bMV0gPSA1O1xuICAgICAgICBmYWNlc1s0XVsyXSA9IDI7XG4gICAgICAgIGZhY2VzWzRdWzNdID0gMTtcblxuXG4gICAgfSBlbHNlIHtcblxuICAgICAgICAvLyBDZW50ZXIgb2YgdGhlIHRyaWFuZ2xlIHBpbGxhciAtIGFsbCBwb2x5Z29ucyBhcmUgZ2l2ZW4gcmVsYXRpdmUgdG8gdGhpcyBvbmVcbiAgICAgICAgb2Zmc2V0UmVzdWx0LnNldChcbiAgICAgICAgICAgICh4aSArIDAuNzUpICogZWxlbWVudFNpemUsIC8vIHNvcnQgb2YgY2VudGVyIG9mIGEgdHJpYW5nbGVcbiAgICAgICAgICAgICh5aSArIDAuNzUpICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICBoIC8vIHZlcnRpY2FsIGNlbnRlclxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFRvcCB0cmlhbmdsZSB2ZXJ0c1xuICAgICAgICB2ZXJ0c1swXS5zZXQoXG4gICAgICAgICAgICAwLjI1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICAwLjI1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICBkYXRhW3hpICsgMV1beWkgKyAxXSAtIGhcbiAgICAgICAgKTtcbiAgICAgICAgdmVydHNbMV0uc2V0KFxuICAgICAgICAgICAgLTAuNzUgKiBlbGVtZW50U2l6ZSxcbiAgICAgICAgICAgIDAuMjUgKiBlbGVtZW50U2l6ZSxcbiAgICAgICAgICAgIGRhdGFbeGldW3lpICsgMV0gLSBoXG4gICAgICAgICk7XG4gICAgICAgIHZlcnRzWzJdLnNldChcbiAgICAgICAgICAgIDAuMjUgKiBlbGVtZW50U2l6ZSxcbiAgICAgICAgICAgIC0wLjc1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICBkYXRhW3hpICsgMV1beWldIC0gaFxuICAgICAgICApO1xuXG4gICAgICAgIC8vIGJvdHRvbSB0cmlhbmdsZSB2ZXJ0c1xuICAgICAgICB2ZXJ0c1szXS5zZXQoXG4gICAgICAgICAgICAwLjI1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICAwLjI1ICogZWxlbWVudFNpemUsXG4gICAgICAgICAgICAtIGgtMVxuICAgICAgICApO1xuICAgICAgICB2ZXJ0c1s0XS5zZXQoXG4gICAgICAgICAgICAtMC43NSAqIGVsZW1lbnRTaXplLFxuICAgICAgICAgICAgMC4yNSAqIGVsZW1lbnRTaXplLFxuICAgICAgICAgICAgLSBoLTFcbiAgICAgICAgKTtcbiAgICAgICAgdmVydHNbNV0uc2V0KFxuICAgICAgICAgICAgMC4yNSAqIGVsZW1lbnRTaXplLFxuICAgICAgICAgICAgLTAuNzUgKiBlbGVtZW50U2l6ZSxcbiAgICAgICAgICAgIC0gaC0xXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gVG9wIHRyaWFuZ2xlXG4gICAgICAgIGZhY2VzWzBdWzBdID0gMDtcbiAgICAgICAgZmFjZXNbMF1bMV0gPSAxO1xuICAgICAgICBmYWNlc1swXVsyXSA9IDI7XG5cbiAgICAgICAgLy8gYm90dG9tIHRyaWFuZ2xlXG4gICAgICAgIGZhY2VzWzFdWzBdID0gNTtcbiAgICAgICAgZmFjZXNbMV1bMV0gPSA0O1xuICAgICAgICBmYWNlc1sxXVsyXSA9IDM7XG5cbiAgICAgICAgLy8gK3ggZmFjaW5nIHF1YWRcbiAgICAgICAgZmFjZXNbMl1bMF0gPSAyO1xuICAgICAgICBmYWNlc1syXVsxXSA9IDU7XG4gICAgICAgIGZhY2VzWzJdWzJdID0gMztcbiAgICAgICAgZmFjZXNbMl1bM10gPSAwO1xuXG4gICAgICAgIC8vICt5IGZhY2luZyBxdWFkXG4gICAgICAgIGZhY2VzWzNdWzBdID0gMztcbiAgICAgICAgZmFjZXNbM11bMV0gPSA0O1xuICAgICAgICBmYWNlc1szXVsyXSA9IDE7XG4gICAgICAgIGZhY2VzWzNdWzNdID0gMDtcblxuICAgICAgICAvLyAteHkgZmFjaW5nIHF1YWRcbiAgICAgICAgZmFjZXNbNF1bMF0gPSAxO1xuICAgICAgICBmYWNlc1s0XVsxXSA9IDQ7XG4gICAgICAgIGZhY2VzWzRdWzJdID0gNTtcbiAgICAgICAgZmFjZXNbNF1bM10gPSAyO1xuICAgIH1cblxuICAgIHJlc3VsdC5jb21wdXRlTm9ybWFscygpO1xuICAgIHJlc3VsdC5jb21wdXRlRWRnZXMoKTtcbiAgICByZXN1bHQudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMoKTtcblxuICAgIHRoaXMuc2V0Q2FjaGVkQ29udmV4VHJpYW5nbGVQaWxsYXIoeGksIHlpLCBnZXRVcHBlclRyaWFuZ2xlLCByZXN1bHQsIG9mZnNldFJlc3VsdCk7XG59O1xuXG5IZWlnaHRmaWVsZC5wcm90b3R5cGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhID0gZnVuY3Rpb24obWFzcywgdGFyZ2V0KXtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFZlYzMoKTtcbiAgICB0YXJnZXQuc2V0KDAsIDAsIDApO1xuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuXG5IZWlnaHRmaWVsZC5wcm90b3R5cGUudm9sdW1lID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gTnVtYmVyLk1BWF9WQUxVRTsgLy8gVGhlIHRlcnJhaW4gaXMgaW5maW5pdGVcbn07XG5cbkhlaWdodGZpZWxkLnByb3RvdHlwZS5jYWxjdWxhdGVXb3JsZEFBQkIgPSBmdW5jdGlvbihwb3MsIHF1YXQsIG1pbiwgbWF4KXtcbiAgICAvLyBUT0RPOiBkbyBpdCBwcm9wZXJseVxuICAgIG1pbi5zZXQoLU51bWJlci5NQVhfVkFMVUUsIC1OdW1iZXIuTUFYX1ZBTFVFLCAtTnVtYmVyLk1BWF9WQUxVRSk7XG4gICAgbWF4LnNldChOdW1iZXIuTUFYX1ZBTFVFLCBOdW1iZXIuTUFYX1ZBTFVFLCBOdW1iZXIuTUFYX1ZBTFVFKTtcbn07XG5cbkhlaWdodGZpZWxkLnByb3RvdHlwZS51cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cyA9IGZ1bmN0aW9uKCl7XG4gICAgLy8gVXNlIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIG1pbi9tYXggdmFsdWVzXG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGEsXG4gICAgICAgIHMgPSB0aGlzLmVsZW1lbnRTaXplO1xuICAgIHRoaXMuYm91bmRpbmdTcGhlcmVSYWRpdXMgPSBuZXcgVmVjMyhkYXRhLmxlbmd0aCAqIHMsIGRhdGFbMF0ubGVuZ3RoICogcywgTWF0aC5tYXgoTWF0aC5hYnModGhpcy5tYXhWYWx1ZSksIE1hdGguYWJzKHRoaXMubWluVmFsdWUpKSkubm9ybSgpO1xufTtcblxufSx7XCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4uL3V0aWxzL1V0aWxzXCI6NTMsXCIuL0NvbnZleFBvbHloZWRyb25cIjozOCxcIi4vU2hhcGVcIjo0M31dLDQxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gUGFydGljbGU7XG5cbnZhciBTaGFwZSA9IF9kZXJlcV8oJy4vU2hhcGUnKTtcbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG5cbi8qKlxuICogUGFydGljbGUgc2hhcGUuXG4gKiBAY2xhc3MgUGFydGljbGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1dGhvciBzY2h0ZXBwZVxuICogQGV4dGVuZHMgU2hhcGVcbiAqL1xuZnVuY3Rpb24gUGFydGljbGUoKXtcbiAgICBTaGFwZS5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy50eXBlID0gU2hhcGUudHlwZXMuUEFSVElDTEU7XG59XG5QYXJ0aWNsZS5wcm90b3R5cGUgPSBuZXcgU2hhcGUoKTtcblBhcnRpY2xlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBhcnRpY2xlO1xuXG4vKipcbiAqIEBtZXRob2QgY2FsY3VsYXRlTG9jYWxJbmVydGlhXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG1hc3NcbiAqIEBwYXJhbSAge1ZlYzN9IHRhcmdldFxuICogQHJldHVybiB7VmVjM31cbiAqL1xuUGFydGljbGUucHJvdG90eXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYSA9IGZ1bmN0aW9uKG1hc3MsdGFyZ2V0KXtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFZlYzMoKTtcbiAgICB0YXJnZXQuc2V0KDAsIDAsIDApO1xuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuXG5QYXJ0aWNsZS5wcm90b3R5cGUudm9sdW1lID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gMDtcbn07XG5cblBhcnRpY2xlLnByb3RvdHlwZS51cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cyA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5ib3VuZGluZ1NwaGVyZVJhZGl1cyA9IDA7XG59O1xuXG5QYXJ0aWNsZS5wcm90b3R5cGUuY2FsY3VsYXRlV29ybGRBQUJCID0gZnVuY3Rpb24ocG9zLHF1YXQsbWluLG1heCl7XG4gICAgLy8gR2V0IGVhY2ggYXhpcyBtYXhcbiAgICBtaW4uY29weShwb3MpO1xuICAgIG1heC5jb3B5KHBvcyk7XG59O1xuXG59LHtcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi9TaGFwZVwiOjQzfV0sNDI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBQbGFuZTtcblxudmFyIFNoYXBlID0gX2RlcmVxXygnLi9TaGFwZScpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcblxuLyoqXG4gKiBBIHBsYW5lLCBmYWNpbmcgaW4gdGhlIFogZGlyZWN0aW9uLiBUaGUgcGxhbmUgaGFzIGl0cyBzdXJmYWNlIGF0IHo9MCBhbmQgZXZlcnl0aGluZyBiZWxvdyB6PTAgaXMgYXNzdW1lZCB0byBiZSBzb2xpZCBwbGFuZS4gVG8gbWFrZSB0aGUgcGxhbmUgZmFjZSBpbiBzb21lIG90aGVyIGRpcmVjdGlvbiB0aGFuIHosIHlvdSBtdXN0IHB1dCBpdCBpbnNpZGUgYSBSaWdpZEJvZHkgYW5kIHJvdGF0ZSB0aGF0IGJvZHkuIFNlZSB0aGUgZGVtb3MuXG4gKiBAY2xhc3MgUGxhbmVcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgU2hhcGVcbiAqIEBhdXRob3Igc2NodGVwcGVcbiAqL1xuZnVuY3Rpb24gUGxhbmUoKXtcbiAgICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgIHRoaXMudHlwZSA9IFNoYXBlLnR5cGVzLlBMQU5FO1xuXG4gICAgLy8gV29ybGQgb3JpZW50ZWQgbm9ybWFsXG4gICAgdGhpcy53b3JsZE5vcm1hbCA9IG5ldyBWZWMzKCk7XG4gICAgdGhpcy53b3JsZE5vcm1hbE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAgIHRoaXMuYm91bmRpbmdTcGhlcmVSYWRpdXMgPSBOdW1iZXIuTUFYX1ZBTFVFO1xufVxuUGxhbmUucHJvdG90eXBlID0gbmV3IFNoYXBlKCk7XG5QbGFuZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQbGFuZTtcblxuUGxhbmUucHJvdG90eXBlLmNvbXB1dGVXb3JsZE5vcm1hbCA9IGZ1bmN0aW9uKHF1YXQpe1xuICAgIHZhciBuID0gdGhpcy53b3JsZE5vcm1hbDtcbiAgICBuLnNldCgwLDAsMSk7XG4gICAgcXVhdC52bXVsdChuLG4pO1xuICAgIHRoaXMud29ybGROb3JtYWxOZWVkc1VwZGF0ZSA9IGZhbHNlO1xufTtcblxuUGxhbmUucHJvdG90eXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYSA9IGZ1bmN0aW9uKG1hc3MsdGFyZ2V0KXtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFZlYzMoKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xufTtcblxuUGxhbmUucHJvdG90eXBlLnZvbHVtZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIE51bWJlci5NQVhfVkFMVUU7IC8vIFRoZSBwbGFuZSBpcyBpbmZpbml0ZS4uLlxufTtcblxudmFyIHRlbXBOb3JtYWwgPSBuZXcgVmVjMygpO1xuUGxhbmUucHJvdG90eXBlLmNhbGN1bGF0ZVdvcmxkQUFCQiA9IGZ1bmN0aW9uKHBvcywgcXVhdCwgbWluLCBtYXgpe1xuICAgIC8vIFRoZSBwbGFuZSBBQUJCIGlzIGluZmluaXRlLCBleGNlcHQgaWYgdGhlIG5vcm1hbCBpcyBwb2ludGluZyBhbG9uZyBhbnkgYXhpc1xuICAgIHRlbXBOb3JtYWwuc2V0KDAsMCwxKTsgLy8gRGVmYXVsdCBwbGFuZSBub3JtYWwgaXMgelxuICAgIHF1YXQudm11bHQodGVtcE5vcm1hbCx0ZW1wTm9ybWFsKTtcbiAgICB2YXIgbWF4VmFsID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICBtaW4uc2V0KC1tYXhWYWwsIC1tYXhWYWwsIC1tYXhWYWwpO1xuICAgIG1heC5zZXQobWF4VmFsLCBtYXhWYWwsIG1heFZhbCk7XG5cbiAgICBpZih0ZW1wTm9ybWFsLnggPT09IDEpeyBtYXgueCA9IHBvcy54OyB9XG4gICAgaWYodGVtcE5vcm1hbC55ID09PSAxKXsgbWF4LnkgPSBwb3MueTsgfVxuICAgIGlmKHRlbXBOb3JtYWwueiA9PT0gMSl7IG1heC56ID0gcG9zLno7IH1cblxuICAgIGlmKHRlbXBOb3JtYWwueCA9PT0gLTEpeyBtaW4ueCA9IHBvcy54OyB9XG4gICAgaWYodGVtcE5vcm1hbC55ID09PSAtMSl7IG1pbi55ID0gcG9zLnk7IH1cbiAgICBpZih0ZW1wTm9ybWFsLnogPT09IC0xKXsgbWluLnogPSBwb3MuejsgfVxufTtcblxuUGxhbmUucHJvdG90eXBlLnVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmJvdW5kaW5nU3BoZXJlUmFkaXVzID0gTnVtYmVyLk1BWF9WQUxVRTtcbn07XG59LHtcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi9TaGFwZVwiOjQzfV0sNDM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBTaGFwZTtcblxudmFyIFNoYXBlID0gX2RlcmVxXygnLi9TaGFwZScpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBRdWF0ZXJuaW9uID0gX2RlcmVxXygnLi4vbWF0aC9RdWF0ZXJuaW9uJyk7XG52YXIgTWF0ZXJpYWwgPSBfZGVyZXFfKCcuLi9tYXRlcmlhbC9NYXRlcmlhbCcpO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgZm9yIHNoYXBlc1xuICogQGNsYXNzIFNoYXBlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhdXRob3Igc2NodGVwcGVcbiAqIEB0b2RvIFNob3VsZCBoYXZlIGEgbWVjaGFuaXNtIGZvciBjYWNoaW5nIGJvdW5kaW5nIHNwaGVyZSByYWRpdXMgaW5zdGVhZCBvZiBjYWxjdWxhdGluZyBpdCBlYWNoIHRpbWVcbiAqL1xuZnVuY3Rpb24gU2hhcGUoKXtcblxuICAgIC8qKlxuICAgICAqIElkZW50aWZ5ZXIgb2YgdGhlIFNoYXBlLlxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpZFxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBTaGFwZS5pZENvdW50ZXIrKztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoaXMgc2hhcGUuIE11c3QgYmUgc2V0IHRvIGFuIGludCA+IDAgYnkgc3ViY2xhc3Nlcy5cbiAgICAgKiBAcHJvcGVydHkgdHlwZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHNlZSBTaGFwZS50eXBlc1xuICAgICAqL1xuICAgIHRoaXMudHlwZSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbG9jYWwgYm91bmRpbmcgc3BoZXJlIHJhZGl1cyBvZiB0aGlzIHNoYXBlLlxuICAgICAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBib3VuZGluZ1NwaGVyZVJhZGl1c1xuICAgICAqL1xuICAgIHRoaXMuYm91bmRpbmdTcGhlcmVSYWRpdXMgPSAwO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBwcm9kdWNlIGNvbnRhY3QgZm9yY2VzIHdoZW4gaW4gY29udGFjdCB3aXRoIG90aGVyIGJvZGllcy4gTm90ZSB0aGF0IGNvbnRhY3RzIHdpbGwgYmUgZ2VuZXJhdGVkLCBidXQgdGhleSB3aWxsIGJlIGRpc2FibGVkLlxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gY29sbGlzaW9uUmVzcG9uc2VcbiAgICAgKi9cbiAgICB0aGlzLmNvbGxpc2lvblJlc3BvbnNlID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB7TWF0ZXJpYWx9IG1hdGVyaWFsXG4gICAgICovXG4gICAgdGhpcy5tYXRlcmlhbCA9IG51bGw7XG59XG5TaGFwZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFwZTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgYm91bmRpbmcgc3BoZXJlIHJhZGl1cy4gVGhlIHJlc3VsdCBpcyBzdG9yZWQgaW4gdGhlIHByb3BlcnR5IC5ib3VuZGluZ1NwaGVyZVJhZGl1c1xuICogQG1ldGhvZCB1cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1c1xuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5TaGFwZS5wcm90b3R5cGUudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMgPSBmdW5jdGlvbigpe1xuICAgIHRocm93IFwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzKCkgbm90IGltcGxlbWVudGVkIGZvciBzaGFwZSB0eXBlIFwiK3RoaXMudHlwZTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSB2b2x1bWUgb2YgdGhpcyBzaGFwZVxuICogQG1ldGhvZCB2b2x1bWVcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqL1xuU2hhcGUucHJvdG90eXBlLnZvbHVtZSA9IGZ1bmN0aW9uKCl7XG4gICAgdGhyb3cgXCJ2b2x1bWUoKSBub3QgaW1wbGVtZW50ZWQgZm9yIHNoYXBlIHR5cGUgXCIrdGhpcy50eXBlO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBpbmVydGlhIGluIHRoZSBsb2NhbCBmcmFtZSBmb3IgdGhpcyBzaGFwZS5cbiAqIEBtZXRob2QgY2FsY3VsYXRlTG9jYWxJbmVydGlhXG4gKiBAcmV0dXJuIHtWZWMzfVxuICogQHNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfbW9tZW50c19vZl9pbmVydGlhXG4gKi9cblNoYXBlLnByb3RvdHlwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWEgPSBmdW5jdGlvbihtYXNzLHRhcmdldCl7XG4gICAgdGhyb3cgXCJjYWxjdWxhdGVMb2NhbEluZXJ0aWEoKSBub3QgaW1wbGVtZW50ZWQgZm9yIHNoYXBlIHR5cGUgXCIrdGhpcy50eXBlO1xufTtcblxuU2hhcGUuaWRDb3VudGVyID0gMDtcblxuLyoqXG4gKiBUaGUgYXZhaWxhYmxlIHNoYXBlIHR5cGVzLlxuICogQHN0YXRpY1xuICogQHByb3BlcnR5IHR5cGVzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5TaGFwZS50eXBlcyA9IHtcbiAgICBTUEhFUkU6MSxcbiAgICBQTEFORToyLFxuICAgIEJPWDo0LFxuICAgIENPTVBPVU5EOjgsXG4gICAgQ09OVkVYUE9MWUhFRFJPTjoxNixcbiAgICBIRUlHSFRGSUVMRDozMixcbiAgICBQQVJUSUNMRTo2NCxcbiAgICBDWUxJTkRFUjoxMjgsXG4gICAgVFJJTUVTSDoyNTZcbn07XG5cblxufSx7XCIuLi9tYXRlcmlhbC9NYXRlcmlhbFwiOjI1LFwiLi4vbWF0aC9RdWF0ZXJuaW9uXCI6MjgsXCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4vU2hhcGVcIjo0M31dLDQ0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gU3BoZXJlO1xuXG52YXIgU2hhcGUgPSBfZGVyZXFfKCcuL1NoYXBlJyk7XG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xuXG4vKipcbiAqIFNwaGVyaWNhbCBzaGFwZVxuICogQGNsYXNzIFNwaGVyZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBTaGFwZVxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZGl1cyBUaGUgcmFkaXVzIG9mIHRoZSBzcGhlcmUsIGEgbm9uLW5lZ2F0aXZlIG51bWJlci5cbiAqIEBhdXRob3Igc2NodGVwcGUgLyBodHRwOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZVxuICovXG5mdW5jdGlvbiBTcGhlcmUocmFkaXVzKXtcbiAgICBTaGFwZS5jYWxsKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtOdW1iZXJ9IHJhZGl1c1xuICAgICAqL1xuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzIT09dW5kZWZpbmVkID8gTnVtYmVyKHJhZGl1cykgOiAxLjA7XG4gICAgdGhpcy50eXBlID0gU2hhcGUudHlwZXMuU1BIRVJFO1xuXG4gICAgaWYodGhpcy5yYWRpdXMgPCAwKXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc3BoZXJlIHJhZGl1cyBjYW5ub3QgYmUgbmVnYXRpdmUuJyk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cygpO1xufVxuU3BoZXJlLnByb3RvdHlwZSA9IG5ldyBTaGFwZSgpO1xuU3BoZXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwaGVyZTtcblxuU3BoZXJlLnByb3RvdHlwZS5jYWxjdWxhdGVMb2NhbEluZXJ0aWEgPSBmdW5jdGlvbihtYXNzLHRhcmdldCl7XG4gICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IG5ldyBWZWMzKCk7XG4gICAgdmFyIEkgPSAyLjAqbWFzcyp0aGlzLnJhZGl1cyp0aGlzLnJhZGl1cy81LjA7XG4gICAgdGFyZ2V0LnggPSBJO1xuICAgIHRhcmdldC55ID0gSTtcbiAgICB0YXJnZXQueiA9IEk7XG4gICAgcmV0dXJuIHRhcmdldDtcbn07XG5cblNwaGVyZS5wcm90b3R5cGUudm9sdW1lID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gNC4wICogTWF0aC5QSSAqIHRoaXMucmFkaXVzIC8gMy4wO1xufTtcblxuU3BoZXJlLnByb3RvdHlwZS51cGRhdGVCb3VuZGluZ1NwaGVyZVJhZGl1cyA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5ib3VuZGluZ1NwaGVyZVJhZGl1cyA9IHRoaXMucmFkaXVzO1xufTtcblxuU3BoZXJlLnByb3RvdHlwZS5jYWxjdWxhdGVXb3JsZEFBQkIgPSBmdW5jdGlvbihwb3MscXVhdCxtaW4sbWF4KXtcbiAgICB2YXIgciA9IHRoaXMucmFkaXVzO1xuICAgIHZhciBheGVzID0gWyd4JywneScsJ3onXTtcbiAgICBmb3IodmFyIGk9MDsgaTxheGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdmFyIGF4ID0gYXhlc1tpXTtcbiAgICAgICAgbWluW2F4XSA9IHBvc1theF0gLSByO1xuICAgICAgICBtYXhbYXhdID0gcG9zW2F4XSArIHI7XG4gICAgfVxufTtcblxufSx7XCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4vU2hhcGVcIjo0M31dLDQ1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gVHJpbWVzaDtcblxudmFyIFNoYXBlID0gX2RlcmVxXygnLi9TaGFwZScpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBRdWF0ZXJuaW9uID0gX2RlcmVxXygnLi4vbWF0aC9RdWF0ZXJuaW9uJyk7XG52YXIgVHJhbnNmb3JtID0gX2RlcmVxXygnLi4vbWF0aC9UcmFuc2Zvcm0nKTtcbnZhciBBQUJCID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL0FBQkInKTtcbnZhciBPY3RyZWUgPSBfZGVyZXFfKCcuLi91dGlscy9PY3RyZWUnKTtcblxuLyoqXG4gKiBAY2xhc3MgVHJpbWVzaFxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2FycmF5fSB2ZXJ0aWNlc1xuICogQHBhcmFtIHthcnJheX0gaW5kaWNlc1xuICogQGV4dGVuZHMgU2hhcGVcbiAqIEBleGFtcGxlXG4gKiAgICAgLy8gSG93IHRvIG1ha2UgYSBtZXNoIHdpdGggYSBzaW5nbGUgdHJpYW5nbGVcbiAqICAgICB2YXIgdmVydGljZXMgPSBbXG4gKiAgICAgICAgIDAsIDAsIDAsIC8vIHZlcnRleCAwXG4gKiAgICAgICAgIDEsIDAsIDAsIC8vIHZlcnRleCAxXG4gKiAgICAgICAgIDAsIDEsIDAgIC8vIHZlcnRleCAyXG4gKiAgICAgXTtcbiAqICAgICB2YXIgaW5kaWNlcyA9IFtcbiAqICAgICAgICAgMCwgMSwgMiAgLy8gdHJpYW5nbGUgMFxuICogICAgIF07XG4gKiAgICAgdmFyIHRyaW1lc2hTaGFwZSA9IG5ldyBUcmltZXNoKHZlcnRpY2VzLCBpbmRpY2VzKTtcbiAqL1xuZnVuY3Rpb24gVHJpbWVzaCh2ZXJ0aWNlcywgaW5kaWNlcykge1xuICAgIFNoYXBlLmNhbGwodGhpcyk7XG4gICAgdGhpcy50eXBlID0gU2hhcGUudHlwZXMuVFJJTUVTSDtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSB2ZXJ0aWNlc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLnZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0aWNlcyk7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBpbnRlZ2VycywgaW5kaWNhdGluZyB3aGljaCB2ZXJ0aWNlcyBlYWNoIHRyaWFuZ2xlIGNvbnNpc3RzIG9mLiBUaGUgbGVuZ3RoIG9mIHRoaXMgYXJyYXkgaXMgdGh1cyAzIHRpbWVzIHRoZSBudW1iZXIgb2YgdHJpYW5nbGVzLlxuICAgICAqIEBwcm9wZXJ0eSBpbmRpY2VzXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHRoaXMuaW5kaWNlcyA9IG5ldyBJbnQxNkFycmF5KGluZGljZXMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5vcm1hbHMgZGF0YS5cbiAgICAgKiBAcHJvcGVydHkgbm9ybWFsc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLm5vcm1hbHMgPSBuZXcgRmxvYXQzMkFycmF5KGluZGljZXMubGVuZ3RoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBsb2NhbCBBQUJCIG9mIHRoZSBtZXNoLlxuICAgICAqIEBwcm9wZXJ0eSBhYWJiXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHRoaXMuYWFiYiA9IG5ldyBBQUJCKCk7XG5cbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2VzIHRvIHZlcnRleCBwYWlycywgbWFraW5nIHVwIGFsbCB1bmlxdWUgZWRnZXMgaW4gdGhlIHRyaW1lc2guXG4gICAgICogQHByb3BlcnR5IHthcnJheX0gZWRnZXNcbiAgICAgKi9cbiAgICB0aGlzLmVkZ2VzID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIExvY2FsIHNjYWxpbmcgb2YgdGhlIG1lc2guIFVzZSAuc2V0U2NhbGUoKSB0byBzZXQgaXQuXG4gICAgICogQHByb3BlcnR5IHtWZWMzfSBzY2FsZVxuICAgICAqL1xuICAgIHRoaXMuc2NhbGUgPSBuZXcgVmVjMygxLCAxLCAxKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbmRleGVkIHRyaWFuZ2xlcy4gVXNlIC51cGRhdGVUcmVlKCkgdG8gdXBkYXRlIGl0LlxuICAgICAqIEBwcm9wZXJ0eSB7T2N0cmVlfSB0cmVlXG4gICAgICovXG4gICAgdGhpcy50cmVlID0gbmV3IE9jdHJlZSgpO1xuXG4gICAgdGhpcy51cGRhdGVFZGdlcygpO1xuICAgIHRoaXMudXBkYXRlTm9ybWFscygpO1xuICAgIHRoaXMudXBkYXRlQUFCQigpO1xuICAgIHRoaXMudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMoKTtcbiAgICB0aGlzLnVwZGF0ZVRyZWUoKTtcbn1cblRyaW1lc2gucHJvdG90eXBlID0gbmV3IFNoYXBlKCk7XG5UcmltZXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRyaW1lc2g7XG5cbnZhciBjb21wdXRlTm9ybWFsc19uID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBAbWV0aG9kIHVwZGF0ZVRyZWVcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUudXBkYXRlVHJlZSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHRyZWUgPSB0aGlzLnRyZWU7XG5cbiAgICB0cmVlLnJlc2V0KCk7XG4gICAgdHJlZS5hYWJiLmNvcHkodGhpcy5hYWJiKTtcbiAgICB2YXIgc2NhbGUgPSB0aGlzLnNjYWxlOyAvLyBUaGUgbG9jYWwgbWVzaCBBQUJCIGlzIHNjYWxlZCwgYnV0IHRoZSBvY3RyZWUgQUFCQiBzaG91bGQgYmUgdW5zY2FsZWRcbiAgICB0cmVlLmFhYmIubG93ZXJCb3VuZC54ICo9IDEgLyBzY2FsZS54O1xuICAgIHRyZWUuYWFiYi5sb3dlckJvdW5kLnkgKj0gMSAvIHNjYWxlLnk7XG4gICAgdHJlZS5hYWJiLmxvd2VyQm91bmQueiAqPSAxIC8gc2NhbGUuejtcbiAgICB0cmVlLmFhYmIudXBwZXJCb3VuZC54ICo9IDEgLyBzY2FsZS54O1xuICAgIHRyZWUuYWFiYi51cHBlckJvdW5kLnkgKj0gMSAvIHNjYWxlLnk7XG4gICAgdHJlZS5hYWJiLnVwcGVyQm91bmQueiAqPSAxIC8gc2NhbGUuejtcblxuICAgIC8vIEluc2VydCBhbGwgdHJpYW5nbGVzXG4gICAgdmFyIHRyaWFuZ2xlQUFCQiA9IG5ldyBBQUJCKCk7XG4gICAgdmFyIGEgPSBuZXcgVmVjMygpO1xuICAgIHZhciBiID0gbmV3IFZlYzMoKTtcbiAgICB2YXIgYyA9IG5ldyBWZWMzKCk7XG4gICAgdmFyIHBvaW50cyA9IFthLCBiLCBjXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaW5kaWNlcy5sZW5ndGggLyAzOyBpKyspIHtcbiAgICAgICAgLy90aGlzLmdldFRyaWFuZ2xlVmVydGljZXMoaSwgYSwgYiwgYyk7XG5cbiAgICAgICAgLy8gR2V0IHVuc2NhbGVkIHRyaWFuZ2xlIHZlcnRzXG4gICAgICAgIHZhciBpMyA9IGkgKiAzO1xuICAgICAgICB0aGlzLl9nZXRVbnNjYWxlZFZlcnRleCh0aGlzLmluZGljZXNbaTNdLCBhKTtcbiAgICAgICAgdGhpcy5fZ2V0VW5zY2FsZWRWZXJ0ZXgodGhpcy5pbmRpY2VzW2kzICsgMV0sIGIpO1xuICAgICAgICB0aGlzLl9nZXRVbnNjYWxlZFZlcnRleCh0aGlzLmluZGljZXNbaTMgKyAyXSwgYyk7XG5cbiAgICAgICAgdHJpYW5nbGVBQUJCLnNldEZyb21Qb2ludHMocG9pbnRzKTtcbiAgICAgICAgdHJlZS5pbnNlcnQodHJpYW5nbGVBQUJCLCBpKTtcbiAgICB9XG4gICAgdHJlZS5yZW1vdmVFbXB0eU5vZGVzKCk7XG59O1xuXG52YXIgdW5zY2FsZWRBQUJCID0gbmV3IEFBQkIoKTtcblxuLyoqXG4gKiBHZXQgdHJpYW5nbGVzIGluIGEgbG9jYWwgQUFCQiBmcm9tIHRoZSB0cmltZXNoLlxuICogQG1ldGhvZCBnZXRUcmlhbmdsZXNJbkFBQkJcbiAqIEBwYXJhbSAge0FBQkJ9IGFhYmJcbiAqIEBwYXJhbSAge2FycmF5fSByZXN1bHQgQW4gYXJyYXkgb2YgaW50ZWdlcnMsIHJlZmVyZW5jaW5nIHRoZSBxdWVyaWVkIHRyaWFuZ2xlcy5cbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUuZ2V0VHJpYW5nbGVzSW5BQUJCID0gZnVuY3Rpb24oYWFiYiwgcmVzdWx0KXtcbiAgICB1bnNjYWxlZEFBQkIuY29weShhYWJiKTtcblxuICAgIC8vIFNjYWxlIGl0IHRvIGxvY2FsXG4gICAgdmFyIHNjYWxlID0gdGhpcy5zY2FsZTtcbiAgICB2YXIgaXN4ID0gc2NhbGUueDtcbiAgICB2YXIgaXN5ID0gc2NhbGUueTtcbiAgICB2YXIgaXN6ID0gc2NhbGUuejtcbiAgICB2YXIgbCA9IHVuc2NhbGVkQUFCQi5sb3dlckJvdW5kO1xuICAgIHZhciB1ID0gdW5zY2FsZWRBQUJCLnVwcGVyQm91bmQ7XG4gICAgbC54IC89IGlzeDtcbiAgICBsLnkgLz0gaXN5O1xuICAgIGwueiAvPSBpc3o7XG4gICAgdS54IC89IGlzeDtcbiAgICB1LnkgLz0gaXN5O1xuICAgIHUueiAvPSBpc3o7XG5cbiAgICByZXR1cm4gdGhpcy50cmVlLmFhYmJRdWVyeSh1bnNjYWxlZEFBQkIsIHJlc3VsdCk7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc2V0U2NhbGVcbiAqIEBwYXJhbSB7VmVjM30gc2NhbGVcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUuc2V0U2NhbGUgPSBmdW5jdGlvbihzY2FsZSl7XG4gICAgdmFyIHdhc1VuaWZvcm0gPSB0aGlzLnNjYWxlLnggPT09IHRoaXMuc2NhbGUueSA9PT0gdGhpcy5zY2FsZS56O1xuICAgIHZhciBpc1VuaWZvcm0gPSBzY2FsZS54ID09PSBzY2FsZS55ID09PSBzY2FsZS56O1xuXG4gICAgaWYoISh3YXNVbmlmb3JtICYmIGlzVW5pZm9ybSkpe1xuICAgICAgICAvLyBOb24tdW5pZm9ybSBzY2FsaW5nLiBOZWVkIHRvIHVwZGF0ZSBub3JtYWxzLlxuICAgICAgICB0aGlzLnVwZGF0ZU5vcm1hbHMoKTtcbiAgICB9XG4gICAgdGhpcy5zY2FsZS5jb3B5KHNjYWxlKTtcbiAgICB0aGlzLnVwZGF0ZUFBQkIoKTtcbiAgICB0aGlzLnVwZGF0ZUJvdW5kaW5nU3BoZXJlUmFkaXVzKCk7XG59O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIG5vcm1hbHMgb2YgdGhlIGZhY2VzLiBXaWxsIHNhdmUgaW4gdGhlIC5ub3JtYWxzIGFycmF5LlxuICogQG1ldGhvZCB1cGRhdGVOb3JtYWxzXG4gKi9cblRyaW1lc2gucHJvdG90eXBlLnVwZGF0ZU5vcm1hbHMgPSBmdW5jdGlvbigpe1xuICAgIHZhciBuID0gY29tcHV0ZU5vcm1hbHNfbjtcblxuICAgIC8vIEdlbmVyYXRlIG5vcm1hbHNcbiAgICB2YXIgbm9ybWFscyA9IHRoaXMubm9ybWFscztcbiAgICBmb3IodmFyIGk9MDsgaSA8IHRoaXMuaW5kaWNlcy5sZW5ndGggLyAzOyBpKyspe1xuICAgICAgICB2YXIgaTMgPSBpICogMztcblxuICAgICAgICB2YXIgYSA9IHRoaXMuaW5kaWNlc1tpM10sXG4gICAgICAgICAgICBiID0gdGhpcy5pbmRpY2VzW2kzICsgMV0sXG4gICAgICAgICAgICBjID0gdGhpcy5pbmRpY2VzW2kzICsgMl07XG5cbiAgICAgICAgdGhpcy5nZXRWZXJ0ZXgoYSwgdmEpO1xuICAgICAgICB0aGlzLmdldFZlcnRleChiLCB2Yik7XG4gICAgICAgIHRoaXMuZ2V0VmVydGV4KGMsIHZjKTtcblxuICAgICAgICBUcmltZXNoLmNvbXB1dGVOb3JtYWwodmIsIHZhLCB2Yywgbik7XG5cbiAgICAgICAgbm9ybWFsc1tpM10gPSBuLng7XG4gICAgICAgIG5vcm1hbHNbaTMgKyAxXSA9IG4ueTtcbiAgICAgICAgbm9ybWFsc1tpMyArIDJdID0gbi56O1xuICAgIH1cbn07XG5cbi8qKlxuICogVXBkYXRlIHRoZSAuZWRnZXMgcHJvcGVydHlcbiAqIEBtZXRob2QgdXBkYXRlRWRnZXNcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUudXBkYXRlRWRnZXMgPSBmdW5jdGlvbigpe1xuICAgIHZhciBlZGdlcyA9IHt9O1xuICAgIHZhciBhZGQgPSBmdW5jdGlvbihpbmRleEEsIGluZGV4Qil7XG4gICAgICAgIHZhciBrZXkgPSBhIDwgYiA/IGEgKyAnXycgKyBiIDogYiArICdfJyArIGE7XG4gICAgICAgIGVkZ2VzW2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgZm9yKHZhciBpPTA7IGkgPCB0aGlzLmluZGljZXMubGVuZ3RoIC8gMzsgaSsrKXtcbiAgICAgICAgdmFyIGkzID0gaSAqIDM7XG4gICAgICAgIHZhciBhID0gdGhpcy5pbmRpY2VzW2kzXSxcbiAgICAgICAgICAgIGIgPSB0aGlzLmluZGljZXNbaTMgKyAxXSxcbiAgICAgICAgICAgIGMgPSB0aGlzLmluZGljZXNbaTMgKyAyXTtcbiAgICAgICAgYWRkKGEsYik7XG4gICAgICAgIGFkZChiLGMpO1xuICAgICAgICBhZGQoYyxhKTtcbiAgICB9XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhlZGdlcyk7XG4gICAgdGhpcy5lZGdlcyA9IG5ldyBJbnQxNkFycmF5KGtleXMubGVuZ3RoICogMik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBpbmRpY2VzID0ga2V5c1tpXS5zcGxpdCgnXycpO1xuICAgICAgICB0aGlzLmVkZ2VzWzIgKiBpXSA9IHBhcnNlSW50KGluZGljZXNbMF0sIDEwKTtcbiAgICAgICAgdGhpcy5lZGdlc1syICogaSArIDFdID0gcGFyc2VJbnQoaW5kaWNlc1sxXSwgMTApO1xuICAgIH1cbn07XG5cbi8qKlxuICogR2V0IGFuIGVkZ2UgdmVydGV4XG4gKiBAbWV0aG9kIGdldEVkZ2VWZXJ0ZXhcbiAqIEBwYXJhbSAge251bWJlcn0gZWRnZUluZGV4XG4gKiBAcGFyYW0gIHtudW1iZXJ9IGZpcnN0T3JTZWNvbmQgMCBvciAxLCBkZXBlbmRpbmcgb24gd2hpY2ggb25lIG9mIHRoZSB2ZXJ0aWNlcyB5b3UgbmVlZC5cbiAqIEBwYXJhbSAge1ZlYzN9IHZlcnRleFN0b3JlIFdoZXJlIHRvIHN0b3JlIHRoZSByZXN1bHRcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUuZ2V0RWRnZVZlcnRleCA9IGZ1bmN0aW9uKGVkZ2VJbmRleCwgZmlyc3RPclNlY29uZCwgdmVydGV4U3RvcmUpe1xuICAgIHZhciB2ZXJ0ZXhJbmRleCA9IHRoaXMuZWRnZXNbZWRnZUluZGV4ICogMiArIChmaXJzdE9yU2Vjb25kID8gMSA6IDApXTtcbiAgICB0aGlzLmdldFZlcnRleCh2ZXJ0ZXhJbmRleCwgdmVydGV4U3RvcmUpO1xufTtcblxudmFyIGdldEVkZ2VWZWN0b3JfdmEgPSBuZXcgVmVjMygpO1xudmFyIGdldEVkZ2VWZWN0b3JfdmIgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIEdldCBhIHZlY3RvciBhbG9uZyBhbiBlZGdlLlxuICogQG1ldGhvZCBnZXRFZGdlVmVjdG9yXG4gKiBAcGFyYW0gIHtudW1iZXJ9IGVkZ2VJbmRleFxuICogQHBhcmFtICB7VmVjM30gdmVjdG9yU3RvcmVcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUuZ2V0RWRnZVZlY3RvciA9IGZ1bmN0aW9uKGVkZ2VJbmRleCwgdmVjdG9yU3RvcmUpe1xuICAgIHZhciB2YSA9IGdldEVkZ2VWZWN0b3JfdmE7XG4gICAgdmFyIHZiID0gZ2V0RWRnZVZlY3Rvcl92YjtcbiAgICB0aGlzLmdldEVkZ2VWZXJ0ZXgoZWRnZUluZGV4LCAwLCB2YSk7XG4gICAgdGhpcy5nZXRFZGdlVmVydGV4KGVkZ2VJbmRleCwgMSwgdmIpO1xuICAgIHZiLnZzdWIodmEsIHZlY3RvclN0b3JlKTtcbn07XG5cbi8qKlxuICogR2V0IGZhY2Ugbm9ybWFsIGdpdmVuIDMgdmVydGljZXNcbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgY29tcHV0ZU5vcm1hbFxuICogQHBhcmFtIHtWZWMzfSB2YVxuICogQHBhcmFtIHtWZWMzfSB2YlxuICogQHBhcmFtIHtWZWMzfSB2Y1xuICogQHBhcmFtIHtWZWMzfSB0YXJnZXRcbiAqL1xudmFyIGNiID0gbmV3IFZlYzMoKTtcbnZhciBhYiA9IG5ldyBWZWMzKCk7XG5UcmltZXNoLmNvbXB1dGVOb3JtYWwgPSBmdW5jdGlvbiAoIHZhLCB2YiwgdmMsIHRhcmdldCApIHtcbiAgICB2Yi52c3ViKHZhLGFiKTtcbiAgICB2Yy52c3ViKHZiLGNiKTtcbiAgICBjYi5jcm9zcyhhYix0YXJnZXQpO1xuICAgIGlmICggIXRhcmdldC5pc1plcm8oKSApIHtcbiAgICAgICAgdGFyZ2V0Lm5vcm1hbGl6ZSgpO1xuICAgIH1cbn07XG5cbnZhciB2YSA9IG5ldyBWZWMzKCk7XG52YXIgdmIgPSBuZXcgVmVjMygpO1xudmFyIHZjID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBHZXQgdmVydGV4IGkuXG4gKiBAbWV0aG9kIGdldFZlcnRleFxuICogQHBhcmFtICB7bnVtYmVyfSBpXG4gKiBAcGFyYW0gIHtWZWMzfSBvdXRcbiAqIEByZXR1cm4ge1ZlYzN9IFRoZSBcIm91dFwiIHZlY3RvciBvYmplY3RcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUuZ2V0VmVydGV4ID0gZnVuY3Rpb24oaSwgb3V0KXtcbiAgICB2YXIgc2NhbGUgPSB0aGlzLnNjYWxlO1xuICAgIHRoaXMuX2dldFVuc2NhbGVkVmVydGV4KGksIG91dCk7XG4gICAgb3V0LnggKj0gc2NhbGUueDtcbiAgICBvdXQueSAqPSBzY2FsZS55O1xuICAgIG91dC56ICo9IHNjYWxlLno7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogR2V0IHJhdyB2ZXJ0ZXggaVxuICogQHByaXZhdGVcbiAqIEBtZXRob2QgX2dldFVuc2NhbGVkVmVydGV4XG4gKiBAcGFyYW0gIHtudW1iZXJ9IGlcbiAqIEBwYXJhbSAge1ZlYzN9IG91dFxuICogQHJldHVybiB7VmVjM30gVGhlIFwib3V0XCIgdmVjdG9yIG9iamVjdFxuICovXG5UcmltZXNoLnByb3RvdHlwZS5fZ2V0VW5zY2FsZWRWZXJ0ZXggPSBmdW5jdGlvbihpLCBvdXQpe1xuICAgIHZhciBpMyA9IGkgKiAzO1xuICAgIHZhciB2ZXJ0aWNlcyA9IHRoaXMudmVydGljZXM7XG4gICAgcmV0dXJuIG91dC5zZXQoXG4gICAgICAgIHZlcnRpY2VzW2kzXSxcbiAgICAgICAgdmVydGljZXNbaTMgKyAxXSxcbiAgICAgICAgdmVydGljZXNbaTMgKyAyXVxuICAgICk7XG59O1xuXG4vKipcbiAqIEdldCBhIHZlcnRleCBmcm9tIHRoZSB0cmltZXNoLHRyYW5zZm9ybWVkIGJ5IHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgcXVhdGVybmlvbi5cbiAqIEBtZXRob2QgZ2V0V29ybGRWZXJ0ZXhcbiAqIEBwYXJhbSAge251bWJlcn0gaVxuICogQHBhcmFtICB7VmVjM30gcG9zXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxdWF0XG4gKiBAcGFyYW0gIHtWZWMzfSBvdXRcbiAqIEByZXR1cm4ge1ZlYzN9IFRoZSBcIm91dFwiIHZlY3RvciBvYmplY3RcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUuZ2V0V29ybGRWZXJ0ZXggPSBmdW5jdGlvbihpLCBwb3MsIHF1YXQsIG91dCl7XG4gICAgdGhpcy5nZXRWZXJ0ZXgoaSwgb3V0KTtcbiAgICBUcmFuc2Zvcm0ucG9pbnRUb1dvcmxkRnJhbWUocG9zLCBxdWF0LCBvdXQsIG91dCk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxuICogR2V0IHRoZSB0aHJlZSB2ZXJ0aWNlcyBmb3IgdHJpYW5nbGUgaS5cbiAqIEBtZXRob2QgZ2V0VHJpYW5nbGVWZXJ0aWNlc1xuICogQHBhcmFtICB7bnVtYmVyfSBpXG4gKiBAcGFyYW0gIHtWZWMzfSBhXG4gKiBAcGFyYW0gIHtWZWMzfSBiXG4gKiBAcGFyYW0gIHtWZWMzfSBjXG4gKi9cblRyaW1lc2gucHJvdG90eXBlLmdldFRyaWFuZ2xlVmVydGljZXMgPSBmdW5jdGlvbihpLCBhLCBiLCBjKXtcbiAgICB2YXIgaTMgPSBpICogMztcbiAgICB0aGlzLmdldFZlcnRleCh0aGlzLmluZGljZXNbaTNdLCBhKTtcbiAgICB0aGlzLmdldFZlcnRleCh0aGlzLmluZGljZXNbaTMgKyAxXSwgYik7XG4gICAgdGhpcy5nZXRWZXJ0ZXgodGhpcy5pbmRpY2VzW2kzICsgMl0sIGMpO1xufTtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBub3JtYWwgb2YgdHJpYW5nbGUgaS5cbiAqIEBtZXRob2QgZ2V0Tm9ybWFsXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGlcbiAqIEBwYXJhbSAge1ZlYzN9IHRhcmdldFxuICogQHJldHVybiB7VmVjM30gVGhlIFwidGFyZ2V0XCIgdmVjdG9yIG9iamVjdFxuICovXG5UcmltZXNoLnByb3RvdHlwZS5nZXROb3JtYWwgPSBmdW5jdGlvbihpLCB0YXJnZXQpe1xuICAgIHZhciBpMyA9IGkgKiAzO1xuICAgIHJldHVybiB0YXJnZXQuc2V0KFxuICAgICAgICB0aGlzLm5vcm1hbHNbaTNdLFxuICAgICAgICB0aGlzLm5vcm1hbHNbaTMgKyAxXSxcbiAgICAgICAgdGhpcy5ub3JtYWxzW2kzICsgMl1cbiAgICApO1xufTtcblxudmFyIGNsaV9hYWJiID0gbmV3IEFBQkIoKTtcblxuLyoqXG4gKiBAbWV0aG9kIGNhbGN1bGF0ZUxvY2FsSW5lcnRpYVxuICogQHBhcmFtICB7TnVtYmVyfSBtYXNzXG4gKiBAcGFyYW0gIHtWZWMzfSB0YXJnZXRcbiAqIEByZXR1cm4ge1ZlYzN9IFRoZSBcInRhcmdldFwiIHZlY3RvciBvYmplY3RcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUuY2FsY3VsYXRlTG9jYWxJbmVydGlhID0gZnVuY3Rpb24obWFzcyx0YXJnZXQpe1xuICAgIC8vIEFwcHJveGltYXRlIHdpdGggYm94IGluZXJ0aWFcbiAgICAvLyBFeGFjdCBpbmVydGlhIGNhbGN1bGF0aW9uIGlzIG92ZXJraWxsLCBidXQgc2VlIGh0dHA6Ly9nZW9tZXRyaWN0b29scy5jb20vRG9jdW1lbnRhdGlvbi9Qb2x5aGVkcmFsTWFzc1Byb3BlcnRpZXMucGRmIGZvciB0aGUgY29ycmVjdCB3YXkgdG8gZG8gaXRcbiAgICB0aGlzLmNvbXB1dGVMb2NhbEFBQkIoY2xpX2FhYmIpO1xuICAgIHZhciB4ID0gY2xpX2FhYmIudXBwZXJCb3VuZC54IC0gY2xpX2FhYmIubG93ZXJCb3VuZC54LFxuICAgICAgICB5ID0gY2xpX2FhYmIudXBwZXJCb3VuZC55IC0gY2xpX2FhYmIubG93ZXJCb3VuZC55LFxuICAgICAgICB6ID0gY2xpX2FhYmIudXBwZXJCb3VuZC56IC0gY2xpX2FhYmIubG93ZXJCb3VuZC56O1xuICAgIHJldHVybiB0YXJnZXQuc2V0KFxuICAgICAgICAxLjAgLyAxMi4wICogbWFzcyAqICggMip5KjIqeSArIDIqeioyKnogKSxcbiAgICAgICAgMS4wIC8gMTIuMCAqIG1hc3MgKiAoIDIqeCoyKnggKyAyKnoqMip6ICksXG4gICAgICAgIDEuMCAvIDEyLjAgKiBtYXNzICogKCAyKnkqMip5ICsgMip4KjIqeCApXG4gICAgKTtcbn07XG5cbnZhciBjb21wdXRlTG9jYWxBQUJCX3dvcmxkVmVydCA9IG5ldyBWZWMzKCk7XG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgbG9jYWwgQUFCQiBmb3IgdGhlIHRyaW1lc2hcbiAqIEBtZXRob2QgY29tcHV0ZUxvY2FsQUFCQlxuICogQHBhcmFtICB7QUFCQn0gYWFiYlxuICovXG5UcmltZXNoLnByb3RvdHlwZS5jb21wdXRlTG9jYWxBQUJCID0gZnVuY3Rpb24oYWFiYil7XG4gICAgdmFyIGwgPSBhYWJiLmxvd2VyQm91bmQsXG4gICAgICAgIHUgPSBhYWJiLnVwcGVyQm91bmQsXG4gICAgICAgIG4gPSB0aGlzLnZlcnRpY2VzLmxlbmd0aCxcbiAgICAgICAgdmVydGljZXMgPSB0aGlzLnZlcnRpY2VzLFxuICAgICAgICB2ID0gY29tcHV0ZUxvY2FsQUFCQl93b3JsZFZlcnQ7XG5cbiAgICB0aGlzLmdldFZlcnRleCgwLCB2KTtcbiAgICBsLmNvcHkodik7XG4gICAgdS5jb3B5KHYpO1xuXG4gICAgZm9yKHZhciBpPTA7IGkgIT09IG47IGkrKyl7XG4gICAgICAgIHRoaXMuZ2V0VmVydGV4KGksIHYpO1xuXG4gICAgICAgIGlmKHYueCA8IGwueCl7XG4gICAgICAgICAgICBsLnggPSB2Lng7XG4gICAgICAgIH0gZWxzZSBpZih2LnggPiB1Lngpe1xuICAgICAgICAgICAgdS54ID0gdi54O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYodi55IDwgbC55KXtcbiAgICAgICAgICAgIGwueSA9IHYueTtcbiAgICAgICAgfSBlbHNlIGlmKHYueSA+IHUueSl7XG4gICAgICAgICAgICB1LnkgPSB2Lnk7XG4gICAgICAgIH1cblxuICAgICAgICBpZih2LnogPCBsLnope1xuICAgICAgICAgICAgbC56ID0gdi56O1xuICAgICAgICB9IGVsc2UgaWYodi56ID4gdS56KXtcbiAgICAgICAgICAgIHUueiA9IHYuejtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuLyoqXG4gKiBVcGRhdGUgdGhlIC5hYWJiIHByb3BlcnR5XG4gKiBAbWV0aG9kIHVwZGF0ZUFBQkJcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUudXBkYXRlQUFCQiA9IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5jb21wdXRlTG9jYWxBQUJCKHRoaXMuYWFiYik7XG59O1xuXG4vKipcbiAqIFdpbGwgdXBkYXRlIHRoZSAuYm91bmRpbmdTcGhlcmVSYWRpdXMgcHJvcGVydHlcbiAqIEBtZXRob2QgdXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXNcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUudXBkYXRlQm91bmRpbmdTcGhlcmVSYWRpdXMgPSBmdW5jdGlvbigpe1xuICAgIC8vIEFzc3VtZSBwb2ludHMgYXJlIGRpc3RyaWJ1dGVkIHdpdGggbG9jYWwgKDAsMCwwKSBhcyBjZW50ZXJcbiAgICB2YXIgbWF4MiA9IDA7XG4gICAgdmFyIHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcztcbiAgICB2YXIgdiA9IG5ldyBWZWMzKCk7XG4gICAgZm9yKHZhciBpPTAsIE49dmVydGljZXMubGVuZ3RoIC8gMzsgaSAhPT0gTjsgaSsrKSB7XG4gICAgICAgIHRoaXMuZ2V0VmVydGV4KGksIHYpO1xuICAgICAgICB2YXIgbm9ybTIgPSB2Lm5vcm0yKCk7XG4gICAgICAgIGlmKG5vcm0yID4gbWF4Mil7XG4gICAgICAgICAgICBtYXgyID0gbm9ybTI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5ib3VuZGluZ1NwaGVyZVJhZGl1cyA9IE1hdGguc3FydChtYXgyKTtcbn07XG5cbnZhciB0ZW1wV29ybGRWZXJ0ZXggPSBuZXcgVmVjMygpO1xudmFyIGNhbGN1bGF0ZVdvcmxkQUFCQl9mcmFtZSA9IG5ldyBUcmFuc2Zvcm0oKTtcbnZhciBjYWxjdWxhdGVXb3JsZEFBQkJfYWFiYiA9IG5ldyBBQUJCKCk7XG5cbi8qKlxuICogQG1ldGhvZCBjYWxjdWxhdGVXb3JsZEFBQkJcbiAqIEBwYXJhbSB7VmVjM30gICAgICAgIHBvc1xuICogQHBhcmFtIHtRdWF0ZXJuaW9ufSAgcXVhdFxuICogQHBhcmFtIHtWZWMzfSAgICAgICAgbWluXG4gKiBAcGFyYW0ge1ZlYzN9ICAgICAgICBtYXhcbiAqL1xuVHJpbWVzaC5wcm90b3R5cGUuY2FsY3VsYXRlV29ybGRBQUJCID0gZnVuY3Rpb24ocG9zLHF1YXQsbWluLG1heCl7XG4gICAgLypcbiAgICB2YXIgbiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC8gMyxcbiAgICAgICAgdmVydHMgPSB0aGlzLnZlcnRpY2VzO1xuICAgIHZhciBtaW54LG1pbnksbWlueixtYXh4LG1heHksbWF4ejtcblxuICAgIHZhciB2ID0gdGVtcFdvcmxkVmVydGV4O1xuICAgIGZvcih2YXIgaT0wOyBpPG47IGkrKyl7XG4gICAgICAgIHRoaXMuZ2V0VmVydGV4KGksIHYpO1xuICAgICAgICBxdWF0LnZtdWx0KHYsIHYpO1xuICAgICAgICBwb3MudmFkZCh2LCB2KTtcbiAgICAgICAgaWYgKHYueCA8IG1pbnggfHwgbWlueD09PXVuZGVmaW5lZCl7XG4gICAgICAgICAgICBtaW54ID0gdi54O1xuICAgICAgICB9IGVsc2UgaWYodi54ID4gbWF4eCB8fCBtYXh4PT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgIG1heHggPSB2Lng7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodi55IDwgbWlueSB8fCBtaW55PT09dW5kZWZpbmVkKXtcbiAgICAgICAgICAgIG1pbnkgPSB2Lnk7XG4gICAgICAgIH0gZWxzZSBpZih2LnkgPiBtYXh5IHx8IG1heHk9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgbWF4eSA9IHYueTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2LnogPCBtaW56IHx8IG1pbno9PT11bmRlZmluZWQpe1xuICAgICAgICAgICAgbWlueiA9IHYuejtcbiAgICAgICAgfSBlbHNlIGlmKHYueiA+IG1heHogfHwgbWF4ej09PXVuZGVmaW5lZCl7XG4gICAgICAgICAgICBtYXh6ID0gdi56O1xuICAgICAgICB9XG4gICAgfVxuICAgIG1pbi5zZXQobWlueCxtaW55LG1pbnopO1xuICAgIG1heC5zZXQobWF4eCxtYXh5LG1heHopO1xuICAgICovXG5cbiAgICAvLyBGYXN0ZXIgYXBwcm94aW1hdGlvbiB1c2luZyBsb2NhbCBBQUJCXG4gICAgdmFyIGZyYW1lID0gY2FsY3VsYXRlV29ybGRBQUJCX2ZyYW1lO1xuICAgIHZhciByZXN1bHQgPSBjYWxjdWxhdGVXb3JsZEFBQkJfYWFiYjtcbiAgICBmcmFtZS5wb3NpdGlvbiA9IHBvcztcbiAgICBmcmFtZS5xdWF0ZXJuaW9uID0gcXVhdDtcbiAgICB0aGlzLmFhYmIudG9Xb3JsZEZyYW1lKGZyYW1lLCByZXN1bHQpO1xuICAgIG1pbi5jb3B5KHJlc3VsdC5sb3dlckJvdW5kKTtcbiAgICBtYXguY29weShyZXN1bHQudXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIEdldCBhcHByb3hpbWF0ZSB2b2x1bWVcbiAqIEBtZXRob2Qgdm9sdW1lXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKi9cblRyaW1lc2gucHJvdG90eXBlLnZvbHVtZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIDQuMCAqIE1hdGguUEkgKiB0aGlzLmJvdW5kaW5nU3BoZXJlUmFkaXVzIC8gMy4wO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBUcmltZXNoIGluc3RhbmNlLCBzaGFwZWQgYXMgYSB0b3J1cy5cbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgY3JlYXRlVG9ydXNcbiAqIEBwYXJhbSAge251bWJlcn0gW3JhZGl1cz0xXVxuICogQHBhcmFtICB7bnVtYmVyfSBbdHViZT0wLjVdXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtyYWRpYWxTZWdtZW50cz04XVxuICogQHBhcmFtICB7bnVtYmVyfSBbdHVidWxhclNlZ21lbnRzPTZdXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFthcmM9Ni4yODMxODUzMDcxNzk1ODZdXG4gKiBAcmV0dXJuIHtUcmltZXNofSBBIHRvcnVzXG4gKi9cblRyaW1lc2guY3JlYXRlVG9ydXMgPSBmdW5jdGlvbiAocmFkaXVzLCB0dWJlLCByYWRpYWxTZWdtZW50cywgdHVidWxhclNlZ21lbnRzLCBhcmMpIHtcbiAgICByYWRpdXMgPSByYWRpdXMgfHwgMTtcbiAgICB0dWJlID0gdHViZSB8fCAwLjU7XG4gICAgcmFkaWFsU2VnbWVudHMgPSByYWRpYWxTZWdtZW50cyB8fCA4O1xuICAgIHR1YnVsYXJTZWdtZW50cyA9IHR1YnVsYXJTZWdtZW50cyB8fCA2O1xuICAgIGFyYyA9IGFyYyB8fCBNYXRoLlBJICogMjtcblxuICAgIHZhciB2ZXJ0aWNlcyA9IFtdO1xuICAgIHZhciBpbmRpY2VzID0gW107XG5cbiAgICBmb3IgKCB2YXIgaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG4gICAgICAgIGZvciAoIHZhciBpID0gMDsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG4gICAgICAgICAgICB2YXIgdSA9IGkgLyB0dWJ1bGFyU2VnbWVudHMgKiBhcmM7XG4gICAgICAgICAgICB2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG4gICAgICAgICAgICB2YXIgeCA9ICggcmFkaXVzICsgdHViZSAqIE1hdGguY29zKCB2ICkgKSAqIE1hdGguY29zKCB1ICk7XG4gICAgICAgICAgICB2YXIgeSA9ICggcmFkaXVzICsgdHViZSAqIE1hdGguY29zKCB2ICkgKSAqIE1hdGguc2luKCB1ICk7XG4gICAgICAgICAgICB2YXIgeiA9IHR1YmUgKiBNYXRoLnNpbiggdiApO1xuXG4gICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKCB4LCB5LCB6ICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKCB2YXIgaiA9IDE7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG4gICAgICAgIGZvciAoIHZhciBpID0gMTsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG4gICAgICAgICAgICB2YXIgYSA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogaiArIGkgLSAxO1xuICAgICAgICAgICAgdmFyIGIgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGkgLSAxO1xuICAgICAgICAgICAgdmFyIGMgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XG4gICAgICAgICAgICB2YXIgZCA9ICggdHVidWxhclNlZ21lbnRzICsgMSApICogaiArIGk7XG5cbiAgICAgICAgICAgIGluZGljZXMucHVzaChhLCBiLCBkKTtcbiAgICAgICAgICAgIGluZGljZXMucHVzaChiLCBjLCBkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHJpbWVzaCh2ZXJ0aWNlcywgaW5kaWNlcyk7XG59O1xuXG59LHtcIi4uL2NvbGxpc2lvbi9BQUJCXCI6MyxcIi4uL21hdGgvUXVhdGVybmlvblwiOjI4LFwiLi4vbWF0aC9UcmFuc2Zvcm1cIjoyOSxcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi4vdXRpbHMvT2N0cmVlXCI6NTAsXCIuL1NoYXBlXCI6NDN9XSw0NjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IEdTU29sdmVyO1xuXG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xudmFyIFF1YXRlcm5pb24gPSBfZGVyZXFfKCcuLi9tYXRoL1F1YXRlcm5pb24nKTtcbnZhciBTb2x2ZXIgPSBfZGVyZXFfKCcuL1NvbHZlcicpO1xuXG4vKipcbiAqIENvbnN0cmFpbnQgZXF1YXRpb24gR2F1c3MtU2VpZGVsIHNvbHZlci5cbiAqIEBjbGFzcyBHU1NvbHZlclxuICogQGNvbnN0cnVjdG9yXG4gKiBAdG9kbyBUaGUgc3Bvb2sgcGFyYW1ldGVycyBzaG91bGQgYmUgc3BlY2lmaWVkIGZvciBlYWNoIGNvbnN0cmFpbnQsIG5vdCBnbG9iYWxseS5cbiAqIEBhdXRob3Igc2NodGVwcGUgLyBodHRwczovL2dpdGh1Yi5jb20vc2NodGVwcGVcbiAqIEBzZWUgaHR0cHM6Ly93d3c4LmNzLnVtdS5zZS9rdXJzZXIvNURWMDU4L1ZUMDkvbGVjdHVyZXMvc3Bvb2tub3Rlcy5wZGZcbiAqIEBleHRlbmRzIFNvbHZlclxuICovXG5mdW5jdGlvbiBHU1NvbHZlcigpe1xuICAgIFNvbHZlci5jYWxsKHRoaXMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBzb2x2ZXIgaXRlcmF0aW9ucyBkZXRlcm1pbmVzIHF1YWxpdHkgb2YgdGhlIGNvbnN0cmFpbnRzIGluIHRoZSB3b3JsZC4gVGhlIG1vcmUgaXRlcmF0aW9ucywgdGhlIG1vcmUgY29ycmVjdCBzaW11bGF0aW9uLiBNb3JlIGl0ZXJhdGlvbnMgbmVlZCBtb3JlIGNvbXB1dGF0aW9ucyB0aG91Z2guIElmIHlvdSBoYXZlIGEgbGFyZ2UgZ3Jhdml0eSBmb3JjZSBpbiB5b3VyIHdvcmxkLCB5b3Ugd2lsbCBuZWVkIG1vcmUgaXRlcmF0aW9ucy5cbiAgICAgKiBAcHJvcGVydHkgaXRlcmF0aW9uc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQHRvZG8gd3JpdGUgbW9yZSBhYm91dCBzb2x2ZXIgYW5kIGl0ZXJhdGlvbnMgaW4gdGhlIHdpa2lcbiAgICAgKi9cbiAgICB0aGlzLml0ZXJhdGlvbnMgPSAxMDtcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdG9sZXJhbmNlIGlzIHJlYWNoZWQsIHRoZSBzeXN0ZW0gaXMgYXNzdW1lZCB0byBiZSBjb252ZXJnZWQuXG4gICAgICogQHByb3BlcnR5IHRvbGVyYW5jZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy50b2xlcmFuY2UgPSAxZS03O1xufVxuR1NTb2x2ZXIucHJvdG90eXBlID0gbmV3IFNvbHZlcigpO1xuXG52YXIgR1NTb2x2ZXJfc29sdmVfbGFtYmRhID0gW107IC8vIEp1c3QgdGVtcG9yYXJ5IG51bWJlciBob2xkZXJzIHRoYXQgd2Ugd2FudCB0byByZXVzZSBlYWNoIHNvbHZlLlxudmFyIEdTU29sdmVyX3NvbHZlX2ludkNzID0gW107XG52YXIgR1NTb2x2ZXJfc29sdmVfQnMgPSBbXTtcbkdTU29sdmVyLnByb3RvdHlwZS5zb2x2ZSA9IGZ1bmN0aW9uKGR0LHdvcmxkKXtcbiAgICB2YXIgaXRlciA9IDAsXG4gICAgICAgIG1heEl0ZXIgPSB0aGlzLml0ZXJhdGlvbnMsXG4gICAgICAgIHRvbFNxdWFyZWQgPSB0aGlzLnRvbGVyYW5jZSp0aGlzLnRvbGVyYW5jZSxcbiAgICAgICAgZXF1YXRpb25zID0gdGhpcy5lcXVhdGlvbnMsXG4gICAgICAgIE5lcSA9IGVxdWF0aW9ucy5sZW5ndGgsXG4gICAgICAgIGJvZGllcyA9IHdvcmxkLmJvZGllcyxcbiAgICAgICAgTmJvZGllcyA9IGJvZGllcy5sZW5ndGgsXG4gICAgICAgIGggPSBkdCxcbiAgICAgICAgcSwgQiwgaW52QywgZGVsdGFsYW1iZGEsIGRlbHRhbGFtYmRhVG90LCBHV2xhbWJkYSwgbGFtYmRhajtcblxuICAgIC8vIFVwZGF0ZSBzb2x2ZSBtYXNzXG4gICAgaWYoTmVxICE9PSAwKXtcbiAgICAgICAgZm9yKHZhciBpPTA7IGkhPT1OYm9kaWVzOyBpKyspe1xuICAgICAgICAgICAgYm9kaWVzW2ldLnVwZGF0ZVNvbHZlTWFzc1Byb3BlcnRpZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaW5ncyB0aGF0IGRvZXMgbm90IGNoYW5nZSBkdXJpbmcgaXRlcmF0aW9uIGNhbiBiZSBjb21wdXRlZCBvbmNlXG4gICAgdmFyIGludkNzID0gR1NTb2x2ZXJfc29sdmVfaW52Q3MsXG4gICAgICAgIEJzID0gR1NTb2x2ZXJfc29sdmVfQnMsXG4gICAgICAgIGxhbWJkYSA9IEdTU29sdmVyX3NvbHZlX2xhbWJkYTtcbiAgICBpbnZDcy5sZW5ndGggPSBOZXE7XG4gICAgQnMubGVuZ3RoID0gTmVxO1xuICAgIGxhbWJkYS5sZW5ndGggPSBOZXE7XG4gICAgZm9yKHZhciBpPTA7IGkhPT1OZXE7IGkrKyl7XG4gICAgICAgIHZhciBjID0gZXF1YXRpb25zW2ldO1xuICAgICAgICBsYW1iZGFbaV0gPSAwLjA7XG4gICAgICAgIEJzW2ldID0gYy5jb21wdXRlQihoKTtcbiAgICAgICAgaW52Q3NbaV0gPSAxLjAgLyBjLmNvbXB1dGVDKCk7XG4gICAgfVxuXG4gICAgaWYoTmVxICE9PSAwKXtcblxuICAgICAgICAvLyBSZXNldCB2bGFtYmRhXG4gICAgICAgIGZvcih2YXIgaT0wOyBpIT09TmJvZGllczsgaSsrKXtcbiAgICAgICAgICAgIHZhciBiPWJvZGllc1tpXSxcbiAgICAgICAgICAgICAgICB2bGFtYmRhPWIudmxhbWJkYSxcbiAgICAgICAgICAgICAgICB3bGFtYmRhPWIud2xhbWJkYTtcbiAgICAgICAgICAgIHZsYW1iZGEuc2V0KDAsMCwwKTtcbiAgICAgICAgICAgIGlmKHdsYW1iZGEpe1xuICAgICAgICAgICAgICAgIHdsYW1iZGEuc2V0KDAsMCwwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBlcXVhdGlvbnNcbiAgICAgICAgZm9yKGl0ZXI9MDsgaXRlciE9PW1heEl0ZXI7IGl0ZXIrKyl7XG5cbiAgICAgICAgICAgIC8vIEFjY3VtdWxhdGUgdGhlIHRvdGFsIGVycm9yIGZvciBlYWNoIGl0ZXJhdGlvbi5cbiAgICAgICAgICAgIGRlbHRhbGFtYmRhVG90ID0gMC4wO1xuXG4gICAgICAgICAgICBmb3IodmFyIGo9MDsgaiE9PU5lcTsgaisrKXtcblxuICAgICAgICAgICAgICAgIHZhciBjID0gZXF1YXRpb25zW2pdO1xuXG4gICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSBpdGVyYXRpb25cbiAgICAgICAgICAgICAgICBCID0gQnNbal07XG4gICAgICAgICAgICAgICAgaW52QyA9IGludkNzW2pdO1xuICAgICAgICAgICAgICAgIGxhbWJkYWogPSBsYW1iZGFbal07XG4gICAgICAgICAgICAgICAgR1dsYW1iZGEgPSBjLmNvbXB1dGVHV2xhbWJkYSgpO1xuICAgICAgICAgICAgICAgIGRlbHRhbGFtYmRhID0gaW52QyAqICggQiAtIEdXbGFtYmRhIC0gYy5lcHMgKiBsYW1iZGFqICk7XG5cbiAgICAgICAgICAgICAgICAvLyBDbGFtcCBpZiB3ZSBhcmUgbm90IHdpdGhpbiB0aGUgbWluL21heCBpbnRlcnZhbFxuICAgICAgICAgICAgICAgIGlmKGxhbWJkYWogKyBkZWx0YWxhbWJkYSA8IGMubWluRm9yY2Upe1xuICAgICAgICAgICAgICAgICAgICBkZWx0YWxhbWJkYSA9IGMubWluRm9yY2UgLSBsYW1iZGFqO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihsYW1iZGFqICsgZGVsdGFsYW1iZGEgPiBjLm1heEZvcmNlKXtcbiAgICAgICAgICAgICAgICAgICAgZGVsdGFsYW1iZGEgPSBjLm1heEZvcmNlIC0gbGFtYmRhajtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFtYmRhW2pdICs9IGRlbHRhbGFtYmRhO1xuXG4gICAgICAgICAgICAgICAgZGVsdGFsYW1iZGFUb3QgKz0gZGVsdGFsYW1iZGEgPiAwLjAgPyBkZWx0YWxhbWJkYSA6IC1kZWx0YWxhbWJkYTsgLy8gYWJzKGRlbHRhbGFtYmRhKVxuXG4gICAgICAgICAgICAgICAgYy5hZGRUb1dsYW1iZGEoZGVsdGFsYW1iZGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgdG90YWwgZXJyb3IgaXMgc21hbGwgZW5vdWdoIC0gc3RvcCBpdGVyYXRlXG4gICAgICAgICAgICBpZihkZWx0YWxhbWJkYVRvdCpkZWx0YWxhbWJkYVRvdCA8IHRvbFNxdWFyZWQpe1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHJlc3VsdCB0byB2ZWxvY2l0eVxuICAgICAgICBmb3IodmFyIGk9MDsgaSE9PU5ib2RpZXM7IGkrKyl7XG4gICAgICAgICAgICB2YXIgYj1ib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgdj1iLnZlbG9jaXR5LFxuICAgICAgICAgICAgICAgIHc9Yi5hbmd1bGFyVmVsb2NpdHk7XG4gICAgICAgICAgICB2LnZhZGQoYi52bGFtYmRhLCB2KTtcbiAgICAgICAgICAgIGlmKHcpe1xuICAgICAgICAgICAgICAgIHcudmFkZChiLndsYW1iZGEsIHcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZXI7XG59O1xuXG59LHtcIi4uL21hdGgvUXVhdGVybmlvblwiOjI4LFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuL1NvbHZlclwiOjQ3fV0sNDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBTb2x2ZXI7XG5cbi8qKlxuICogQ29uc3RyYWludCBlcXVhdGlvbiBzb2x2ZXIgYmFzZSBjbGFzcy5cbiAqIEBjbGFzcyBTb2x2ZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQGF1dGhvciBzY2h0ZXBwZSAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZVxuICovXG5mdW5jdGlvbiBTb2x2ZXIoKXtcbiAgICAvKipcbiAgICAgKiBBbGwgZXF1YXRpb25zIHRvIGJlIHNvbHZlZFxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IGVxdWF0aW9uc1xuICAgICAqL1xuICAgIHRoaXMuZXF1YXRpb25zID0gW107XG59XG5cbi8qKlxuICogU2hvdWxkIGJlIGltcGxlbWVudGVkIGluIHN1YmNsYXNzZXMhXG4gKiBAbWV0aG9kIHNvbHZlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGR0XG4gKiBAcGFyYW0gIHtXb3JsZH0gd29ybGRcbiAqL1xuU29sdmVyLnByb3RvdHlwZS5zb2x2ZSA9IGZ1bmN0aW9uKGR0LHdvcmxkKXtcbiAgICAvLyBTaG91bGQgcmV0dXJuIHRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyBkb25lIVxuICAgIHJldHVybiAwO1xufTtcblxuLyoqXG4gKiBBZGQgYW4gZXF1YXRpb25cbiAqIEBtZXRob2QgYWRkRXF1YXRpb25cbiAqIEBwYXJhbSB7RXF1YXRpb259IGVxXG4gKi9cblNvbHZlci5wcm90b3R5cGUuYWRkRXF1YXRpb24gPSBmdW5jdGlvbihlcSl7XG4gICAgaWYgKGVxLmVuYWJsZWQpIHtcbiAgICAgICAgdGhpcy5lcXVhdGlvbnMucHVzaChlcSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gZXF1YXRpb25cbiAqIEBtZXRob2QgcmVtb3ZlRXF1YXRpb25cbiAqIEBwYXJhbSB7RXF1YXRpb259IGVxXG4gKi9cblNvbHZlci5wcm90b3R5cGUucmVtb3ZlRXF1YXRpb24gPSBmdW5jdGlvbihlcSl7XG4gICAgdmFyIGVxcyA9IHRoaXMuZXF1YXRpb25zO1xuICAgIHZhciBpID0gZXFzLmluZGV4T2YoZXEpO1xuICAgIGlmKGkgIT09IC0xKXtcbiAgICAgICAgZXFzLnNwbGljZShpLDEpO1xuICAgIH1cbn07XG5cbi8qKlxuICogQWRkIGFsbCBlcXVhdGlvbnNcbiAqIEBtZXRob2QgcmVtb3ZlQWxsRXF1YXRpb25zXG4gKi9cblNvbHZlci5wcm90b3R5cGUucmVtb3ZlQWxsRXF1YXRpb25zID0gZnVuY3Rpb24oKXtcbiAgICB0aGlzLmVxdWF0aW9ucy5sZW5ndGggPSAwO1xufTtcblxuXG59LHt9XSw0ODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFNwbGl0U29sdmVyO1xuXG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xudmFyIFF1YXRlcm5pb24gPSBfZGVyZXFfKCcuLi9tYXRoL1F1YXRlcm5pb24nKTtcbnZhciBTb2x2ZXIgPSBfZGVyZXFfKCcuL1NvbHZlcicpO1xudmFyIEJvZHkgPSBfZGVyZXFfKCcuLi9vYmplY3RzL0JvZHknKTtcblxuLyoqXG4gKiBTcGxpdHMgdGhlIGVxdWF0aW9ucyBpbnRvIGlzbGFuZHMgYW5kIHNvbHZlcyB0aGVtIGluZGVwZW5kZW50bHkuIENhbiBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuICogQGNsYXNzIFNwbGl0U29sdmVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFNvbHZlclxuICogQHBhcmFtIHtTb2x2ZXJ9IHN1YnNvbHZlclxuICovXG5mdW5jdGlvbiBTcGxpdFNvbHZlcihzdWJzb2x2ZXIpe1xuICAgIFNvbHZlci5jYWxsKHRoaXMpO1xuICAgIHRoaXMuaXRlcmF0aW9ucyA9IDEwO1xuICAgIHRoaXMudG9sZXJhbmNlID0gMWUtNztcbiAgICB0aGlzLnN1YnNvbHZlciA9IHN1YnNvbHZlcjtcbiAgICB0aGlzLm5vZGVzID0gW107XG4gICAgdGhpcy5ub2RlUG9vbCA9IFtdO1xuXG4gICAgLy8gQ3JlYXRlIG5lZWRlZCBub2RlcywgcmV1c2UgaWYgcG9zc2libGVcbiAgICB3aGlsZSh0aGlzLm5vZGVQb29sLmxlbmd0aCA8IDEyOCl7XG4gICAgICAgIHRoaXMubm9kZVBvb2wucHVzaCh0aGlzLmNyZWF0ZU5vZGUoKSk7XG4gICAgfVxufVxuU3BsaXRTb2x2ZXIucHJvdG90eXBlID0gbmV3IFNvbHZlcigpO1xuXG4vLyBSZXR1cm5zIHRoZSBudW1iZXIgb2Ygc3Vic3lzdGVtc1xudmFyIFNwbGl0U29sdmVyX3NvbHZlX25vZGVzID0gW107IC8vIEFsbCBhbGxvY2F0ZWQgbm9kZSBvYmplY3RzXG52YXIgU3BsaXRTb2x2ZXJfc29sdmVfbm9kZVBvb2wgPSBbXTsgLy8gQWxsIGFsbG9jYXRlZCBub2RlIG9iamVjdHNcbnZhciBTcGxpdFNvbHZlcl9zb2x2ZV9lcXMgPSBbXTsgICAvLyBUZW1wIGFycmF5XG52YXIgU3BsaXRTb2x2ZXJfc29sdmVfYmRzID0gW107ICAgLy8gVGVtcCBhcnJheVxudmFyIFNwbGl0U29sdmVyX3NvbHZlX2R1bW15V29ybGQgPSB7Ym9kaWVzOltdfTsgLy8gVGVtcCBvYmplY3RcblxudmFyIFNUQVRJQyA9IEJvZHkuU1RBVElDO1xuZnVuY3Rpb24gZ2V0VW52aXNpdGVkTm9kZShub2Rlcyl7XG4gICAgdmFyIE5ub2RlcyA9IG5vZGVzLmxlbmd0aDtcbiAgICBmb3IodmFyIGk9MDsgaSE9PU5ub2RlczsgaSsrKXtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgaWYoIW5vZGUudmlzaXRlZCAmJiAhKG5vZGUuYm9keS50eXBlICYgU1RBVElDKSl7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBxdWV1ZSA9IFtdO1xuZnVuY3Rpb24gYmZzKHJvb3QsdmlzaXRGdW5jLGJkcyxlcXMpe1xuICAgIHF1ZXVlLnB1c2gocm9vdCk7XG4gICAgcm9vdC52aXNpdGVkID0gdHJ1ZTtcbiAgICB2aXNpdEZ1bmMocm9vdCxiZHMsZXFzKTtcbiAgICB3aGlsZShxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgLy8gTG9vcCBvdmVyIHVudmlzaXRlZCBjaGlsZCBub2Rlc1xuICAgICAgICB2YXIgY2hpbGQ7XG4gICAgICAgIHdoaWxlKChjaGlsZCA9IGdldFVudmlzaXRlZE5vZGUobm9kZS5jaGlsZHJlbikpKSB7XG4gICAgICAgICAgICBjaGlsZC52aXNpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZpc2l0RnVuYyhjaGlsZCxiZHMsZXFzKTtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiB2aXNpdEZ1bmMobm9kZSxiZHMsZXFzKXtcbiAgICBiZHMucHVzaChub2RlLmJvZHkpO1xuICAgIHZhciBOZXFzID0gbm9kZS5lcXMubGVuZ3RoO1xuICAgIGZvcih2YXIgaT0wOyBpIT09TmVxczsgaSsrKXtcbiAgICAgICAgdmFyIGVxID0gbm9kZS5lcXNbaV07XG4gICAgICAgIGlmKGVxcy5pbmRleE9mKGVxKSA9PT0gLTEpe1xuICAgICAgICAgICAgZXFzLnB1c2goZXEpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5TcGxpdFNvbHZlci5wcm90b3R5cGUuY3JlYXRlTm9kZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHsgYm9keTpudWxsLCBjaGlsZHJlbjpbXSwgZXFzOltdLCB2aXNpdGVkOmZhbHNlIH07XG59O1xuXG4vKipcbiAqIFNvbHZlIHRoZSBzdWJzeXN0ZW1zXG4gKiBAbWV0aG9kIHNvbHZlXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGR0XG4gKiBAcGFyYW0gIHtXb3JsZH0gd29ybGRcbiAqL1xuU3BsaXRTb2x2ZXIucHJvdG90eXBlLnNvbHZlID0gZnVuY3Rpb24oZHQsd29ybGQpe1xuICAgIHZhciBub2Rlcz1TcGxpdFNvbHZlcl9zb2x2ZV9ub2RlcyxcbiAgICAgICAgbm9kZVBvb2w9dGhpcy5ub2RlUG9vbCxcbiAgICAgICAgYm9kaWVzPXdvcmxkLmJvZGllcyxcbiAgICAgICAgZXF1YXRpb25zPXRoaXMuZXF1YXRpb25zLFxuICAgICAgICBOZXE9ZXF1YXRpb25zLmxlbmd0aCxcbiAgICAgICAgTmJvZGllcz1ib2RpZXMubGVuZ3RoLFxuICAgICAgICBzdWJzb2x2ZXI9dGhpcy5zdWJzb2x2ZXI7XG5cbiAgICAvLyBDcmVhdGUgbmVlZGVkIG5vZGVzLCByZXVzZSBpZiBwb3NzaWJsZVxuICAgIHdoaWxlKG5vZGVQb29sLmxlbmd0aCA8IE5ib2RpZXMpe1xuICAgICAgICBub2RlUG9vbC5wdXNoKHRoaXMuY3JlYXRlTm9kZSgpKTtcbiAgICB9XG4gICAgbm9kZXMubGVuZ3RoID0gTmJvZGllcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5ib2RpZXM7IGkrKykge1xuICAgICAgICBub2Rlc1tpXSA9IG5vZGVQb29sW2ldO1xuICAgIH1cblxuICAgIC8vIFJlc2V0IG5vZGUgdmFsdWVzXG4gICAgZm9yKHZhciBpPTA7IGkhPT1OYm9kaWVzOyBpKyspe1xuICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBub2RlLmJvZHkgPSBib2RpZXNbaV07XG4gICAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgICAgICAgbm9kZS5lcXMubGVuZ3RoID0gMDtcbiAgICAgICAgbm9kZS52aXNpdGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGZvcih2YXIgaz0wOyBrIT09TmVxOyBrKyspe1xuICAgICAgICB2YXIgZXE9ZXF1YXRpb25zW2tdLFxuICAgICAgICAgICAgaT1ib2RpZXMuaW5kZXhPZihlcS5iaSksXG4gICAgICAgICAgICBqPWJvZGllcy5pbmRleE9mKGVxLmJqKSxcbiAgICAgICAgICAgIG5pPW5vZGVzW2ldLFxuICAgICAgICAgICAgbmo9bm9kZXNbal07XG4gICAgICAgIG5pLmNoaWxkcmVuLnB1c2gobmopO1xuICAgICAgICBuaS5lcXMucHVzaChlcSk7XG4gICAgICAgIG5qLmNoaWxkcmVuLnB1c2gobmkpO1xuICAgICAgICBuai5lcXMucHVzaChlcSk7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkLCBuPTAsIGVxcz1TcGxpdFNvbHZlcl9zb2x2ZV9lcXM7XG5cbiAgICBzdWJzb2x2ZXIudG9sZXJhbmNlID0gdGhpcy50b2xlcmFuY2U7XG4gICAgc3Vic29sdmVyLml0ZXJhdGlvbnMgPSB0aGlzLml0ZXJhdGlvbnM7XG5cbiAgICB2YXIgZHVtbXlXb3JsZCA9IFNwbGl0U29sdmVyX3NvbHZlX2R1bW15V29ybGQ7XG4gICAgd2hpbGUoKGNoaWxkID0gZ2V0VW52aXNpdGVkTm9kZShub2RlcykpKXtcbiAgICAgICAgZXFzLmxlbmd0aCA9IDA7XG4gICAgICAgIGR1bW15V29ybGQuYm9kaWVzLmxlbmd0aCA9IDA7XG4gICAgICAgIGJmcyhjaGlsZCwgdmlzaXRGdW5jLCBkdW1teVdvcmxkLmJvZGllcywgZXFzKTtcblxuICAgICAgICB2YXIgTmVxcyA9IGVxcy5sZW5ndGg7XG5cbiAgICAgICAgZXFzID0gZXFzLnNvcnQoc29ydEJ5SWQpO1xuXG4gICAgICAgIGZvcih2YXIgaT0wOyBpIT09TmVxczsgaSsrKXtcbiAgICAgICAgICAgIHN1YnNvbHZlci5hZGRFcXVhdGlvbihlcXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGl0ZXIgPSBzdWJzb2x2ZXIuc29sdmUoZHQsZHVtbXlXb3JsZCk7XG4gICAgICAgIHN1YnNvbHZlci5yZW1vdmVBbGxFcXVhdGlvbnMoKTtcbiAgICAgICAgbisrO1xuICAgIH1cblxuICAgIHJldHVybiBuO1xufTtcblxuZnVuY3Rpb24gc29ydEJ5SWQoYSwgYil7XG4gICAgcmV0dXJuIGIuaWQgLSBhLmlkO1xufVxufSx7XCIuLi9tYXRoL1F1YXRlcm5pb25cIjoyOCxcIi4uL21hdGgvVmVjM1wiOjMwLFwiLi4vb2JqZWN0cy9Cb2R5XCI6MzEsXCIuL1NvbHZlclwiOjQ3fV0sNDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBvYmplY3RzIHRoYXQgZGlzcGF0Y2hlcyBldmVudHMuXG4gKiBAY2xhc3MgRXZlbnRUYXJnZXRcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgRXZlbnRUYXJnZXQgPSBmdW5jdGlvbiAoKSB7XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRUYXJnZXQ7XG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogRXZlbnRUYXJnZXQsXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBAbWV0aG9kIGFkZEV2ZW50TGlzdGVuZXJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKiBAcmV0dXJuIHtFdmVudFRhcmdldH0gVGhlIHNlbGYgb2JqZWN0LCBmb3IgY2hhaW5hYmlsaXR5LlxuICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7XG4gICAgICAgIGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKXsgdGhpcy5fbGlzdGVuZXJzID0ge307IH1cbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICAgICAgaWYgKCBsaXN0ZW5lcnNbIHR5cGUgXSA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgbGlzdGVuZXJzWyB0eXBlIF0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIGxpc3RlbmVyc1sgdHlwZSBdLmluZGV4T2YoIGxpc3RlbmVyICkgPT09IC0gMSApIHtcbiAgICAgICAgICAgIGxpc3RlbmVyc1sgdHlwZSBdLnB1c2goIGxpc3RlbmVyICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGFuIGV2ZW50IGxpc3RlbmVyIGlzIGFkZGVkXG4gICAgICogQG1ldGhvZCBoYXNFdmVudExpc3RlbmVyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSB0eXBlXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGxpc3RlbmVyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXNFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoIHR5cGUsIGxpc3RlbmVyICkge1xuICAgICAgICBpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICl7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgICAgICBpZiAoIGxpc3RlbmVyc1sgdHlwZSBdICE9PSB1bmRlZmluZWQgJiYgbGlzdGVuZXJzWyB0eXBlIF0uaW5kZXhPZiggbGlzdGVuZXIgKSAhPT0gLSAxICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBAbWV0aG9kIHJlbW92ZUV2ZW50TGlzdGVuZXJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGVcbiAgICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gbGlzdGVuZXJcbiAgICAgKiBAcmV0dXJuIHtFdmVudFRhcmdldH0gVGhlIHNlbGYgb2JqZWN0LCBmb3IgY2hhaW5hYmlsaXR5LlxuICAgICAqL1xuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICggdHlwZSwgbGlzdGVuZXIgKSB7XG4gICAgICAgIGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKXsgcmV0dXJuIHRoaXM7IH1cbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcbiAgICAgICAgaWYgKCBsaXN0ZW5lcnNbdHlwZV0gPT09IHVuZGVmaW5lZCApeyByZXR1cm4gdGhpczsgfVxuICAgICAgICB2YXIgaW5kZXggPSBsaXN0ZW5lcnNbIHR5cGUgXS5pbmRleE9mKCBsaXN0ZW5lciApO1xuICAgICAgICBpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbIHR5cGUgXS5zcGxpY2UoIGluZGV4LCAxICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEVtaXQgYW4gZXZlbnQuXG4gICAgICogQG1ldGhvZCBkaXNwYXRjaEV2ZW50XG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBldmVudFxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnQudHlwZVxuICAgICAqIEByZXR1cm4ge0V2ZW50VGFyZ2V0fSBUaGUgc2VsZiBvYmplY3QsIGZvciBjaGFpbmFiaWxpdHkuXG4gICAgICovXG4gICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gKCBldmVudCApIHtcbiAgICAgICAgaWYgKCB0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApeyByZXR1cm4gdGhpczsgfVxuICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuICAgICAgICB2YXIgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgZXZlbnQudHlwZSBdO1xuICAgICAgICBpZiAoIGxpc3RlbmVyQXJyYXkgIT09IHVuZGVmaW5lZCApIHtcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldCA9IHRoaXM7XG4gICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGwgPSBsaXN0ZW5lckFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXJBcnJheVsgaSBdLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxufSx7fV0sNTA6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xudmFyIEFBQkIgPSBfZGVyZXFfKCcuLi9jb2xsaXNpb24vQUFCQicpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPY3RyZWU7XG5cbi8qKlxuICogQGNsYXNzIE9jdHJlZU5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7T2N0cmVlfSBbb3B0aW9ucy5yb290XVxuICogQHBhcmFtIHtBQUJCfSBbb3B0aW9ucy5hYWJiXVxuICovXG5mdW5jdGlvbiBPY3RyZWVOb2RlKG9wdGlvbnMpe1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJvb3Qgbm9kZVxuICAgICAqIEBwcm9wZXJ0eSB7T2N0cmVlTm9kZX0gcm9vdFxuICAgICAqL1xuICAgIHRoaXMucm9vdCA9IG9wdGlvbnMucm9vdCB8fCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQm91bmRhcnkgb2YgdGhpcyBub2RlXG4gICAgICogQHByb3BlcnR5IHtBQUJCfSBhYWJiXG4gICAgICovXG4gICAgdGhpcy5hYWJiID0gb3B0aW9ucy5hYWJiID8gb3B0aW9ucy5hYWJiLmNsb25lKCkgOiBuZXcgQUFCQigpO1xuXG4gICAgLyoqXG4gICAgICogQ29udGFpbmVkIGRhdGEgYXQgdGhlIGN1cnJlbnQgbm9kZSBsZXZlbC5cbiAgICAgKiBAcHJvcGVydHkge0FycmF5fSBkYXRhXG4gICAgICovXG4gICAgdGhpcy5kYXRhID0gW107XG5cbiAgICAvKipcbiAgICAgKiBDaGlsZHJlbiB0byB0aGlzIG5vZGVcbiAgICAgKiBAcHJvcGVydHkge0FycmF5fSBjaGlsZHJlblxuICAgICAqL1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbn1cblxuLyoqXG4gKiBAY2xhc3MgT2N0cmVlXG4gKiBAcGFyYW0ge0FBQkJ9IGFhYmIgVGhlIHRvdGFsIEFBQkIgb2YgdGhlIHRyZWVcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhEZXB0aD04XVxuICogQGV4dGVuZHMgT2N0cmVlTm9kZVxuICovXG5mdW5jdGlvbiBPY3RyZWUoYWFiYiwgb3B0aW9ucyl7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5yb290ID0gbnVsbDtcbiAgICBvcHRpb25zLmFhYmIgPSBhYWJiO1xuICAgIE9jdHJlZU5vZGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIE1heGltdW0gc3ViZGl2aXNpb24gZGVwdGhcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gbWF4RGVwdGhcbiAgICAgKi9cbiAgICB0aGlzLm1heERlcHRoID0gdHlwZW9mKG9wdGlvbnMubWF4RGVwdGgpICE9PSAndW5kZWZpbmVkJyA/IG9wdGlvbnMubWF4RGVwdGggOiA4O1xufVxuT2N0cmVlLnByb3RvdHlwZSA9IG5ldyBPY3RyZWVOb2RlKCk7XG5cbk9jdHJlZU5vZGUucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oYWFiYiwgb3B0aW9ucyl7XG4gICAgdGhpcy5jaGlsZHJlbi5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogSW5zZXJ0IGRhdGEgaW50byB0aGlzIG5vZGVcbiAqIEBtZXRob2QgaW5zZXJ0XG4gKiBAcGFyYW0gIHtBQUJCfSBhYWJiXG4gKiBAcGFyYW0gIHtvYmplY3R9IGVsZW1lbnREYXRhXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHN1Y2Nlc3NmdWwsIG90aGVyd2lzZSBmYWxzZVxuICovXG5PY3RyZWVOb2RlLnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbihhYWJiLCBlbGVtZW50RGF0YSwgbGV2ZWwpe1xuICAgIHZhciBub2RlRGF0YSA9IHRoaXMuZGF0YTtcbiAgICBsZXZlbCA9IGxldmVsIHx8IDA7XG5cbiAgICAvLyBJZ25vcmUgb2JqZWN0cyB0aGF0IGRvIG5vdCBiZWxvbmcgaW4gdGhpcyBub2RlXG4gICAgaWYgKCF0aGlzLmFhYmIuY29udGFpbnMoYWFiYikpe1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIG9iamVjdCBjYW5ub3QgYmUgYWRkZWRcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG4gICAgaWYobGV2ZWwgPCAodGhpcy5tYXhEZXB0aCB8fCB0aGlzLnJvb3QubWF4RGVwdGgpKXtcbiAgICAgICAgLy8gU3ViZGl2aWRlIGlmIHRoZXJlIGFyZSBubyBjaGlsZHJlbiB5ZXRcbiAgICAgICAgdmFyIHN1YmRpdmlkZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpe1xuICAgICAgICAgICAgdGhpcy5zdWJkaXZpZGUoKTtcbiAgICAgICAgICAgIHN1YmRpdmlkZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHRvIHdoaWNoZXZlciBub2RlIHdpbGwgYWNjZXB0IGl0XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpICE9PSA4OyBpKyspIHtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbltpXS5pbnNlcnQoYWFiYiwgZWxlbWVudERhdGEsIGxldmVsICsgMSkpe1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoc3ViZGl2aWRlZCl7XG4gICAgICAgICAgICAvLyBObyBjaGlsZHJlbiBhY2NlcHRlZCEgTWlnaHQgYXMgd2VsbCBqdXN0IHJlbW92ZSBlbSBzaW5jZSB0aGV5IGNvbnRhaW4gbm9uZVxuICAgICAgICAgICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRvbyBkZWVwLCBvciBjaGlsZHJlbiBkaWRudCB3YW50IGl0LiBhZGQgaXQgaW4gY3VycmVudCBub2RlXG4gICAgbm9kZURhdGEucHVzaChlbGVtZW50RGF0YSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBoYWxmRGlhZ29uYWwgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIENyZWF0ZSA4IGVxdWFsbHkgc2l6ZWQgY2hpbGRyZW4gbm9kZXMgYW5kIHB1dCB0aGVtIGluIHRoZSAuY2hpbGRyZW4gYXJyYXkuXG4gKiBAbWV0aG9kIHN1YmRpdmlkZVxuICovXG5PY3RyZWVOb2RlLnByb3RvdHlwZS5zdWJkaXZpZGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYWFiYiA9IHRoaXMuYWFiYjtcbiAgICB2YXIgbCA9IGFhYmIubG93ZXJCb3VuZDtcbiAgICB2YXIgdSA9IGFhYmIudXBwZXJCb3VuZDtcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cbiAgICBjaGlsZHJlbi5wdXNoKFxuICAgICAgICBuZXcgT2N0cmVlTm9kZSh7IGFhYmI6IG5ldyBBQUJCKHsgbG93ZXJCb3VuZDogbmV3IFZlYzMoMCwwLDApIH0pIH0pLFxuICAgICAgICBuZXcgT2N0cmVlTm9kZSh7IGFhYmI6IG5ldyBBQUJCKHsgbG93ZXJCb3VuZDogbmV3IFZlYzMoMSwwLDApIH0pIH0pLFxuICAgICAgICBuZXcgT2N0cmVlTm9kZSh7IGFhYmI6IG5ldyBBQUJCKHsgbG93ZXJCb3VuZDogbmV3IFZlYzMoMSwxLDApIH0pIH0pLFxuICAgICAgICBuZXcgT2N0cmVlTm9kZSh7IGFhYmI6IG5ldyBBQUJCKHsgbG93ZXJCb3VuZDogbmV3IFZlYzMoMSwxLDEpIH0pIH0pLFxuICAgICAgICBuZXcgT2N0cmVlTm9kZSh7IGFhYmI6IG5ldyBBQUJCKHsgbG93ZXJCb3VuZDogbmV3IFZlYzMoMCwxLDEpIH0pIH0pLFxuICAgICAgICBuZXcgT2N0cmVlTm9kZSh7IGFhYmI6IG5ldyBBQUJCKHsgbG93ZXJCb3VuZDogbmV3IFZlYzMoMCwwLDEpIH0pIH0pLFxuICAgICAgICBuZXcgT2N0cmVlTm9kZSh7IGFhYmI6IG5ldyBBQUJCKHsgbG93ZXJCb3VuZDogbmV3IFZlYzMoMSwwLDEpIH0pIH0pLFxuICAgICAgICBuZXcgT2N0cmVlTm9kZSh7IGFhYmI6IG5ldyBBQUJCKHsgbG93ZXJCb3VuZDogbmV3IFZlYzMoMCwxLDApIH0pIH0pXG4gICAgKTtcblxuICAgIHUudnN1YihsLCBoYWxmRGlhZ29uYWwpO1xuICAgIGhhbGZEaWFnb25hbC5zY2FsZSgwLjUsIGhhbGZEaWFnb25hbCk7XG5cbiAgICB2YXIgcm9vdCA9IHRoaXMucm9vdCB8fCB0aGlzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgIT09IDg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcblxuICAgICAgICAvLyBTZXQgY3VycmVudCBub2RlIGFzIHJvb3RcbiAgICAgICAgY2hpbGQucm9vdCA9IHJvb3Q7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSBib3VuZHNcbiAgICAgICAgdmFyIGxvd2VyQm91bmQgPSBjaGlsZC5hYWJiLmxvd2VyQm91bmQ7XG4gICAgICAgIGxvd2VyQm91bmQueCAqPSBoYWxmRGlhZ29uYWwueDtcbiAgICAgICAgbG93ZXJCb3VuZC55ICo9IGhhbGZEaWFnb25hbC55O1xuICAgICAgICBsb3dlckJvdW5kLnogKj0gaGFsZkRpYWdvbmFsLno7XG5cbiAgICAgICAgbG93ZXJCb3VuZC52YWRkKGwsIGxvd2VyQm91bmQpO1xuXG4gICAgICAgIC8vIFVwcGVyIGJvdW5kIGlzIGFsd2F5cyBsb3dlciBib3VuZCArIGhhbGZEaWFnb25hbFxuICAgICAgICBsb3dlckJvdW5kLnZhZGQoaGFsZkRpYWdvbmFsLCBjaGlsZC5hYWJiLnVwcGVyQm91bmQpO1xuICAgIH1cbn07XG5cbi8qKlxuICogR2V0IGFsbCBkYXRhLCBwb3RlbnRpYWxseSB3aXRoaW4gYW4gQUFCQlxuICogQG1ldGhvZCBhYWJiUXVlcnlcbiAqIEBwYXJhbSAge0FBQkJ9IGFhYmJcbiAqIEBwYXJhbSAge2FycmF5fSByZXN1bHRcbiAqIEByZXR1cm4ge2FycmF5fSBUaGUgXCJyZXN1bHRcIiBvYmplY3RcbiAqL1xuT2N0cmVlTm9kZS5wcm90b3R5cGUuYWFiYlF1ZXJ5ID0gZnVuY3Rpb24oYWFiYiwgcmVzdWx0KSB7XG5cbiAgICB2YXIgbm9kZURhdGEgPSB0aGlzLmRhdGE7XG5cbiAgICAvLyBhYm9ydCBpZiB0aGUgcmFuZ2UgZG9lcyBub3QgaW50ZXJzZWN0IHRoaXMgbm9kZVxuICAgIC8vIGlmICghdGhpcy5hYWJiLm92ZXJsYXBzKGFhYmIpKXtcbiAgICAvLyAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAvLyB9XG5cbiAgICAvLyBBZGQgb2JqZWN0cyBhdCB0aGlzIGxldmVsXG4gICAgLy8gQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkocmVzdWx0LCBub2RlRGF0YSk7XG5cbiAgICAvLyBBZGQgY2hpbGQgZGF0YVxuICAgIC8vIEB0b2RvIHVud3JhcCByZWN1cnNpb24gaW50byBhIHF1ZXVlIC8gbG9vcCwgdGhhdCdzIGZhc3RlciBpbiBKU1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblxuICAgIC8vIGZvciAodmFyIGkgPSAwLCBOID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgIT09IE47IGkrKykge1xuICAgIC8vICAgICBjaGlsZHJlbltpXS5hYWJiUXVlcnkoYWFiYiwgcmVzdWx0KTtcbiAgICAvLyB9XG5cbiAgICB2YXIgcXVldWUgPSBbdGhpc107XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICB2YXIgbm9kZSA9IHF1ZXVlLnBvcCgpO1xuICAgICAgICBpZiAobm9kZS5hYWJiLm92ZXJsYXBzKGFhYmIpKXtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHJlc3VsdCwgbm9kZS5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShxdWV1ZSwgbm9kZS5jaGlsZHJlbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciB0bXBBQUJCID0gbmV3IEFBQkIoKTtcblxuLyoqXG4gKiBHZXQgYWxsIGRhdGEsIHBvdGVudGlhbGx5IGludGVyc2VjdGVkIGJ5IGEgcmF5LlxuICogQG1ldGhvZCByYXlRdWVyeVxuICogQHBhcmFtICB7UmF5fSByYXlcbiAqIEBwYXJhbSAge1RyYW5zZm9ybX0gdHJlZVRyYW5zZm9ybVxuICogQHBhcmFtICB7YXJyYXl9IHJlc3VsdFxuICogQHJldHVybiB7YXJyYXl9IFRoZSBcInJlc3VsdFwiIG9iamVjdFxuICovXG5PY3RyZWVOb2RlLnByb3RvdHlwZS5yYXlRdWVyeSA9IGZ1bmN0aW9uKHJheSwgdHJlZVRyYW5zZm9ybSwgcmVzdWx0KSB7XG5cbiAgICAvLyBVc2UgYWFiYiBxdWVyeSBmb3Igbm93LlxuICAgIC8vIEB0b2RvIGltcGxlbWVudCByZWFsIHJheSBxdWVyeSB3aGljaCBuZWVkcyBsZXNzIGxvb2t1cHNcbiAgICByYXkuZ2V0QUFCQih0bXBBQUJCKTtcbiAgICB0bXBBQUJCLnRvTG9jYWxGcmFtZSh0cmVlVHJhbnNmb3JtLCB0bXBBQUJCKTtcbiAgICB0aGlzLmFhYmJRdWVyeSh0bXBBQUJCLCByZXN1bHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQG1ldGhvZCByZW1vdmVFbXB0eU5vZGVzXG4gKi9cbk9jdHJlZU5vZGUucHJvdG90eXBlLnJlbW92ZUVtcHR5Tm9kZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcXVldWUgPSBbdGhpc107XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICB2YXIgbm9kZSA9IHF1ZXVlLnBvcCgpO1xuICAgICAgICBmb3IgKHZhciBpID0gbm9kZS5jaGlsZHJlbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYoIW5vZGUuY2hpbGRyZW5baV0uZGF0YS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW4uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHF1ZXVlLCBub2RlLmNoaWxkcmVuKTtcbiAgICB9XG59O1xuXG59LHtcIi4uL2NvbGxpc2lvbi9BQUJCXCI6MyxcIi4uL21hdGgvVmVjM1wiOjMwfV0sNTE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSBQb29sO1xuXG4vKipcbiAqIEZvciBwb29saW5nIG9iamVjdHMgdGhhdCBjYW4gYmUgcmV1c2VkLlxuICogQGNsYXNzIFBvb2xcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQb29sKCl7XG4gICAgLyoqXG4gICAgICogVGhlIHBvb2xlZCBvYmplY3RzXG4gICAgICogQHByb3BlcnR5IHtBcnJheX0gb2JqZWN0c1xuICAgICAqL1xuICAgIHRoaXMub2JqZWN0cyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0b3Igb2YgdGhlIG9iamVjdHNcbiAgICAgKiBAcHJvcGVydHkge21peGVkfSB0eXBlXG4gICAgICovXG4gICAgdGhpcy50eXBlID0gT2JqZWN0O1xufVxuXG4vKipcbiAqIFJlbGVhc2UgYW4gb2JqZWN0IGFmdGVyIHVzZVxuICogQG1ldGhvZCByZWxlYXNlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKi9cblBvb2wucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbigpe1xuICAgIHZhciBOYXJncyA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgZm9yKHZhciBpPTA7IGkhPT1OYXJnczsgaSsrKXtcbiAgICAgICAgdGhpcy5vYmplY3RzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEdldCBhbiBvYmplY3RcbiAqIEBtZXRob2QgZ2V0XG4gKiBAcmV0dXJuIHttaXhlZH1cbiAqL1xuUG9vbC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oKXtcbiAgICBpZih0aGlzLm9iamVjdHMubGVuZ3RoPT09MCl7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdE9iamVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9iamVjdHMucG9wKCk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBDb25zdHJ1Y3QgYW4gb2JqZWN0LiBTaG91bGQgYmUgaW1wbG1lbnRlZCBpbiBlYWNoIHN1YmNsYXNzLlxuICogQG1ldGhvZCBjb25zdHJ1Y3RPYmplY3RcbiAqIEByZXR1cm4ge21peGVkfVxuICovXG5Qb29sLnByb3RvdHlwZS5jb25zdHJ1Y3RPYmplY3QgPSBmdW5jdGlvbigpe1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvbnN0cnVjdE9iamVjdCgpIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIFBvb2wgc3ViY2xhc3MgeWV0IVwiKTtcbn07XG5cbn0se31dLDUyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gVHVwbGVEaWN0aW9uYXJ5O1xuXG4vKipcbiAqIEBjbGFzcyBUdXBsZURpY3Rpb25hcnlcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBUdXBsZURpY3Rpb25hcnkoKSB7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZGF0YSBzdG9yYWdlXG4gICAgICogQHByb3BlcnR5IGRhdGFcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuZGF0YSA9IHsga2V5czpbXSB9O1xufVxuXG4vKipcbiAqIEBtZXRob2QgZ2V0XG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGlcbiAqIEBwYXJhbSAge051bWJlcn0galxuICogQHJldHVybiB7TnVtYmVyfVxuICovXG5UdXBsZURpY3Rpb25hcnkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKGksIGopIHtcbiAgICBpZiAoaSA+IGopIHtcbiAgICAgICAgLy8gc3dhcFxuICAgICAgICB2YXIgdGVtcCA9IGo7XG4gICAgICAgIGogPSBpO1xuICAgICAgICBpID0gdGVtcDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtpKyctJytqXTtcbn07XG5cbi8qKlxuICogQG1ldGhvZCBzZXRcbiAqIEBwYXJhbSAge051bWJlcn0gaVxuICogQHBhcmFtICB7TnVtYmVyfSBqXG4gKiBAcGFyYW0ge051bWJlcn0gdmFsdWVcbiAqL1xuVHVwbGVEaWN0aW9uYXJ5LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihpLCBqLCB2YWx1ZSkge1xuICAgIGlmIChpID4gaikge1xuICAgICAgICB2YXIgdGVtcCA9IGo7XG4gICAgICAgIGogPSBpO1xuICAgICAgICBpID0gdGVtcDtcbiAgICB9XG4gICAgdmFyIGtleSA9IGkrJy0nK2o7XG5cbiAgICAvLyBDaGVjayBpZiBrZXkgYWxyZWFkeSBleGlzdHNcbiAgICBpZighdGhpcy5nZXQoaSxqKSl7XG4gICAgICAgIHRoaXMuZGF0YS5rZXlzLnB1c2goa2V5KTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGFba2V5XSA9IHZhbHVlO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHJlc2V0XG4gKi9cblR1cGxlRGljdGlvbmFyeS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YSxcbiAgICAgICAga2V5cyA9IGRhdGEua2V5cztcbiAgICB3aGlsZShrZXlzLmxlbmd0aCA+IDApe1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgZGVsZXRlIGRhdGFba2V5XTtcbiAgICB9XG59O1xuXG59LHt9XSw1MzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5mdW5jdGlvbiBVdGlscygpe31cblxubW9kdWxlLmV4cG9ydHMgPSBVdGlscztcblxuLyoqXG4gKiBFeHRlbmQgYW4gb3B0aW9ucyBvYmplY3Qgd2l0aCBkZWZhdWx0IHZhbHVlcy5cbiAqIEBzdGF0aWNcbiAqIEBtZXRob2QgZGVmYXVsdHNcbiAqIEBwYXJhbSAge29iamVjdH0gb3B0aW9ucyBUaGUgb3B0aW9ucyBvYmplY3QuIE1heSBiZSBmYWxzeTogaW4gdGhpcyBjYXNlLCBhIG5ldyBvYmplY3QgaXMgY3JlYXRlZCBhbmQgcmV0dXJuZWQuXG4gKiBAcGFyYW0gIHtvYmplY3R9IGRlZmF1bHRzIEFuIG9iamVjdCBjb250YWluaW5nIGRlZmF1bHQgdmFsdWVzLlxuICogQHJldHVybiB7b2JqZWN0fSBUaGUgbW9kaWZpZWQgb3B0aW9ucyBvYmplY3QuXG4gKi9cblV0aWxzLmRlZmF1bHRzID0gZnVuY3Rpb24ob3B0aW9ucywgZGVmYXVsdHMpe1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgZm9yKHZhciBrZXkgaW4gZGVmYXVsdHMpe1xuICAgICAgICBpZighKGtleSBpbiBvcHRpb25zKSl7XG4gICAgICAgICAgICBvcHRpb25zW2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG59O1xuXG59LHt9XSw1NDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5tb2R1bGUuZXhwb3J0cyA9IFZlYzNQb29sO1xuXG52YXIgVmVjMyA9IF9kZXJlcV8oJy4uL21hdGgvVmVjMycpO1xudmFyIFBvb2wgPSBfZGVyZXFfKCcuL1Bvb2wnKTtcblxuLyoqXG4gKiBAY2xhc3MgVmVjM1Bvb2xcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgUG9vbFxuICovXG5mdW5jdGlvbiBWZWMzUG9vbCgpe1xuICAgIFBvb2wuY2FsbCh0aGlzKTtcbiAgICB0aGlzLnR5cGUgPSBWZWMzO1xufVxuVmVjM1Bvb2wucHJvdG90eXBlID0gbmV3IFBvb2woKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3QgYSB2ZWN0b3JcbiAqIEBtZXRob2QgY29uc3RydWN0T2JqZWN0XG4gKiBAcmV0dXJuIHtWZWMzfVxuICovXG5WZWMzUG9vbC5wcm90b3R5cGUuY29uc3RydWN0T2JqZWN0ID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gbmV3IFZlYzMoKTtcbn07XG5cbn0se1wiLi4vbWF0aC9WZWMzXCI6MzAsXCIuL1Bvb2xcIjo1MX1dLDU1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbm1vZHVsZS5leHBvcnRzID0gTmFycm93cGhhc2U7XG5cbnZhciBBQUJCID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL0FBQkInKTtcbnZhciBTaGFwZSA9IF9kZXJlcV8oJy4uL3NoYXBlcy9TaGFwZScpO1xudmFyIFJheSA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9SYXknKTtcbnZhciBWZWMzID0gX2RlcmVxXygnLi4vbWF0aC9WZWMzJyk7XG52YXIgVHJhbnNmb3JtID0gX2RlcmVxXygnLi4vbWF0aC9UcmFuc2Zvcm0nKTtcbnZhciBDb252ZXhQb2x5aGVkcm9uID0gX2RlcmVxXygnLi4vc2hhcGVzL0NvbnZleFBvbHloZWRyb24nKTtcbnZhciBRdWF0ZXJuaW9uID0gX2RlcmVxXygnLi4vbWF0aC9RdWF0ZXJuaW9uJyk7XG52YXIgU29sdmVyID0gX2RlcmVxXygnLi4vc29sdmVyL1NvbHZlcicpO1xudmFyIFZlYzNQb29sID0gX2RlcmVxXygnLi4vdXRpbHMvVmVjM1Bvb2wnKTtcbnZhciBDb250YWN0RXF1YXRpb24gPSBfZGVyZXFfKCcuLi9lcXVhdGlvbnMvQ29udGFjdEVxdWF0aW9uJyk7XG52YXIgRnJpY3Rpb25FcXVhdGlvbiA9IF9kZXJlcV8oJy4uL2VxdWF0aW9ucy9GcmljdGlvbkVxdWF0aW9uJyk7XG5cbi8qKlxuICogSGVscGVyIGNsYXNzIGZvciB0aGUgV29ybGQuIEdlbmVyYXRlcyBDb250YWN0RXF1YXRpb25zLlxuICogQGNsYXNzIE5hcnJvd3BoYXNlXG4gKiBAY29uc3RydWN0b3JcbiAqIEB0b2RvIFNwaGVyZS1Db252ZXhQb2x5aGVkcm9uIGNvbnRhY3RzXG4gKiBAdG9kbyBDb250YWN0IHJlZHVjdGlvblxuICogQHRvZG8gIHNob3VsZCBtb3ZlIG1ldGhvZHMgdG8gcHJvdG90eXBlXG4gKi9cbmZ1bmN0aW9uIE5hcnJvd3BoYXNlKHdvcmxkKXtcblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIHN0b3JhZ2Ugb2YgcG9vbGVkIGNvbnRhY3QgcG9pbnRzLlxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXl9IGNvbnRhY3RQb2ludFBvb2xcbiAgICAgKi9cbiAgICB0aGlzLmNvbnRhY3RQb2ludFBvb2wgPSBbXTtcblxuICAgIHRoaXMuZnJpY3Rpb25FcXVhdGlvblBvb2wgPSBbXTtcblxuICAgIHRoaXMucmVzdWx0ID0gW107XG4gICAgdGhpcy5mcmljdGlvblJlc3VsdCA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogUG9vbGVkIHZlY3RvcnMuXG4gICAgICogQHByb3BlcnR5IHtWZWMzUG9vbH0gdjNwb29sXG4gICAgICovXG4gICAgdGhpcy52M3Bvb2wgPSBuZXcgVmVjM1Bvb2woKTtcblxuICAgIHRoaXMud29ybGQgPSB3b3JsZDtcbiAgICB0aGlzLmN1cnJlbnRDb250YWN0TWF0ZXJpYWwgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHtCb29sZWFufSBlbmFibGVGcmljdGlvblJlZHVjdGlvblxuICAgICAqL1xuICAgIHRoaXMuZW5hYmxlRnJpY3Rpb25SZWR1Y3Rpb24gPSBmYWxzZTtcbn1cblxuLyoqXG4gKiBNYWtlIGEgY29udGFjdCBvYmplY3QsIGJ5IHVzaW5nIHRoZSBpbnRlcm5hbCBwb29sIG9yIGNyZWF0aW5nIGEgbmV3IG9uZS5cbiAqIEBtZXRob2QgY3JlYXRlQ29udGFjdEVxdWF0aW9uXG4gKiBAcmV0dXJuIHtDb250YWN0RXF1YXRpb259XG4gKi9cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5jcmVhdGVDb250YWN0RXF1YXRpb24gPSBmdW5jdGlvbihiaSwgYmosIHNpLCBzaiwgcnNpLCByc2ope1xuICAgIHZhciBjO1xuICAgIGlmKHRoaXMuY29udGFjdFBvaW50UG9vbC5sZW5ndGgpe1xuICAgICAgICBjID0gdGhpcy5jb250YWN0UG9pbnRQb29sLnBvcCgpO1xuICAgICAgICBjLmJpID0gYmk7XG4gICAgICAgIGMuYmogPSBiajtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjID0gbmV3IENvbnRhY3RFcXVhdGlvbihiaSwgYmopO1xuICAgIH1cblxuICAgIGMuZW5hYmxlZCA9IGJpLmNvbGxpc2lvblJlc3BvbnNlICYmIGJqLmNvbGxpc2lvblJlc3BvbnNlICYmIHNpLmNvbGxpc2lvblJlc3BvbnNlICYmIHNqLmNvbGxpc2lvblJlc3BvbnNlO1xuXG4gICAgdmFyIGNtID0gdGhpcy5jdXJyZW50Q29udGFjdE1hdGVyaWFsO1xuXG4gICAgYy5yZXN0aXR1dGlvbiA9IGNtLnJlc3RpdHV0aW9uO1xuXG4gICAgYy5zZXRTcG9va1BhcmFtcyhcbiAgICAgICAgY20uY29udGFjdEVxdWF0aW9uU3RpZmZuZXNzLFxuICAgICAgICBjbS5jb250YWN0RXF1YXRpb25SZWxheGF0aW9uLFxuICAgICAgICB0aGlzLndvcmxkLmR0XG4gICAgKTtcblxuICAgIHZhciBtYXRBID0gc2kubWF0ZXJpYWwgfHwgYmkubWF0ZXJpYWw7XG4gICAgdmFyIG1hdEIgPSBzai5tYXRlcmlhbCB8fCBiai5tYXRlcmlhbDtcbiAgICBpZihtYXRBICYmIG1hdEIgJiYgbWF0QS5yZXN0aXR1dGlvbiA+PSAwICYmIG1hdEIucmVzdGl0dXRpb24gPj0gMCl7XG4gICAgICAgIGMucmVzdGl0dXRpb24gPSBtYXRBLnJlc3RpdHV0aW9uICogbWF0Qi5yZXN0aXR1dGlvbjtcbiAgICB9XG5cbiAgICBjLnNpID0gcnNpIHx8IHNpO1xuICAgIGMuc2ogPSByc2ogfHwgc2o7XG5cbiAgICByZXR1cm4gYztcbn07XG5cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0ID0gZnVuY3Rpb24oY29udGFjdEVxdWF0aW9uLCBvdXRBcnJheSl7XG4gICAgdmFyIGJvZHlBID0gY29udGFjdEVxdWF0aW9uLmJpO1xuICAgIHZhciBib2R5QiA9IGNvbnRhY3RFcXVhdGlvbi5iajtcbiAgICB2YXIgc2hhcGVBID0gY29udGFjdEVxdWF0aW9uLnNpO1xuICAgIHZhciBzaGFwZUIgPSBjb250YWN0RXF1YXRpb24uc2o7XG5cbiAgICB2YXIgd29ybGQgPSB0aGlzLndvcmxkO1xuICAgIHZhciBjbSA9IHRoaXMuY3VycmVudENvbnRhY3RNYXRlcmlhbDtcblxuICAgIC8vIElmIGZyaWN0aW9uIG9yIHJlc3RpdHV0aW9uIHdlcmUgc3BlY2lmaWVkIGluIHRoZSBtYXRlcmlhbCwgdXNlIHRoZW1cbiAgICB2YXIgZnJpY3Rpb24gPSBjbS5mcmljdGlvbjtcbiAgICB2YXIgbWF0QSA9IHNoYXBlQS5tYXRlcmlhbCB8fCBib2R5QS5tYXRlcmlhbDtcbiAgICB2YXIgbWF0QiA9IHNoYXBlQi5tYXRlcmlhbCB8fCBib2R5Qi5tYXRlcmlhbDtcbiAgICBpZihtYXRBICYmIG1hdEIgJiYgbWF0QS5mcmljdGlvbiA+PSAwICYmIG1hdEIuZnJpY3Rpb24gPj0gMCl7XG4gICAgICAgIGZyaWN0aW9uID0gbWF0QS5mcmljdGlvbiAqIG1hdEIuZnJpY3Rpb247XG4gICAgfVxuXG4gICAgaWYoZnJpY3Rpb24gPiAwKXtcblxuICAgICAgICAvLyBDcmVhdGUgMiB0YW5nZW50IGVxdWF0aW9uc1xuICAgICAgICB2YXIgbXVnID0gZnJpY3Rpb24gKiB3b3JsZC5ncmF2aXR5Lmxlbmd0aCgpO1xuICAgICAgICB2YXIgcmVkdWNlZE1hc3MgPSAoYm9keUEuaW52TWFzcyArIGJvZHlCLmludk1hc3MpO1xuICAgICAgICBpZihyZWR1Y2VkTWFzcyA+IDApe1xuICAgICAgICAgICAgcmVkdWNlZE1hc3MgPSAxL3JlZHVjZWRNYXNzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwb29sID0gdGhpcy5mcmljdGlvbkVxdWF0aW9uUG9vbDtcbiAgICAgICAgdmFyIGMxID0gcG9vbC5sZW5ndGggPyBwb29sLnBvcCgpIDogbmV3IEZyaWN0aW9uRXF1YXRpb24oYm9keUEsYm9keUIsbXVnKnJlZHVjZWRNYXNzKTtcbiAgICAgICAgdmFyIGMyID0gcG9vbC5sZW5ndGggPyBwb29sLnBvcCgpIDogbmV3IEZyaWN0aW9uRXF1YXRpb24oYm9keUEsYm9keUIsbXVnKnJlZHVjZWRNYXNzKTtcblxuICAgICAgICBjMS5iaSA9IGMyLmJpID0gYm9keUE7XG4gICAgICAgIGMxLmJqID0gYzIuYmogPSBib2R5QjtcbiAgICAgICAgYzEubWluRm9yY2UgPSBjMi5taW5Gb3JjZSA9IC1tdWcqcmVkdWNlZE1hc3M7XG4gICAgICAgIGMxLm1heEZvcmNlID0gYzIubWF4Rm9yY2UgPSBtdWcqcmVkdWNlZE1hc3M7XG5cbiAgICAgICAgLy8gQ29weSBvdmVyIHRoZSByZWxhdGl2ZSB2ZWN0b3JzXG4gICAgICAgIGMxLnJpLmNvcHkoY29udGFjdEVxdWF0aW9uLnJpKTtcbiAgICAgICAgYzEucmouY29weShjb250YWN0RXF1YXRpb24ucmopO1xuICAgICAgICBjMi5yaS5jb3B5KGNvbnRhY3RFcXVhdGlvbi5yaSk7XG4gICAgICAgIGMyLnJqLmNvcHkoY29udGFjdEVxdWF0aW9uLnJqKTtcblxuICAgICAgICAvLyBDb25zdHJ1Y3QgdGFuZ2VudHNcbiAgICAgICAgY29udGFjdEVxdWF0aW9uLm5pLnRhbmdlbnRzKGMxLnQsIGMyLnQpO1xuXG4gICAgICAgIC8vIFNldCBzcG9vayBwYXJhbXNcbiAgICAgICAgYzEuc2V0U3Bvb2tQYXJhbXMoY20uZnJpY3Rpb25FcXVhdGlvblN0aWZmbmVzcywgY20uZnJpY3Rpb25FcXVhdGlvblJlbGF4YXRpb24sIHdvcmxkLmR0KTtcbiAgICAgICAgYzIuc2V0U3Bvb2tQYXJhbXMoY20uZnJpY3Rpb25FcXVhdGlvblN0aWZmbmVzcywgY20uZnJpY3Rpb25FcXVhdGlvblJlbGF4YXRpb24sIHdvcmxkLmR0KTtcblxuICAgICAgICBjMS5lbmFibGVkID0gYzIuZW5hYmxlZCA9IGNvbnRhY3RFcXVhdGlvbi5lbmFibGVkO1xuXG4gICAgICAgIG91dEFycmF5LnB1c2goYzEsIGMyKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgYXZlcmFnZU5vcm1hbCA9IG5ldyBWZWMzKCk7XG52YXIgYXZlcmFnZUNvbnRhY3RQb2ludEEgPSBuZXcgVmVjMygpO1xudmFyIGF2ZXJhZ2VDb250YWN0UG9pbnRCID0gbmV3IFZlYzMoKTtcblxuLy8gVGFrZSB0aGUgYXZlcmFnZSBOIGxhdGVzdCBjb250YWN0IHBvaW50IG9uIHRoZSBwbGFuZS5cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5jcmVhdGVGcmljdGlvbkZyb21BdmVyYWdlID0gZnVuY3Rpb24obnVtQ29udGFjdHMpe1xuICAgIC8vIFRoZSBsYXN0IGNvbnRhY3RFcXVhdGlvblxuICAgIHZhciBjID0gdGhpcy5yZXN1bHRbdGhpcy5yZXN1bHQubGVuZ3RoIC0gMV07XG5cbiAgICAvLyBDcmVhdGUgdGhlIHJlc3VsdDogdHdvIFwiYXZlcmFnZVwiIGZyaWN0aW9uIGVxdWF0aW9uc1xuICAgIGlmICghdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KGMsIHRoaXMuZnJpY3Rpb25SZXN1bHQpIHx8IG51bUNvbnRhY3RzID09PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZjEgPSB0aGlzLmZyaWN0aW9uUmVzdWx0W3RoaXMuZnJpY3Rpb25SZXN1bHQubGVuZ3RoIC0gMl07XG4gICAgdmFyIGYyID0gdGhpcy5mcmljdGlvblJlc3VsdFt0aGlzLmZyaWN0aW9uUmVzdWx0Lmxlbmd0aCAtIDFdO1xuXG4gICAgYXZlcmFnZU5vcm1hbC5zZXRaZXJvKCk7XG4gICAgYXZlcmFnZUNvbnRhY3RQb2ludEEuc2V0WmVybygpO1xuICAgIGF2ZXJhZ2VDb250YWN0UG9pbnRCLnNldFplcm8oKTtcblxuICAgIHZhciBib2R5QSA9IGMuYmk7XG4gICAgdmFyIGJvZHlCID0gYy5iajtcbiAgICBmb3IodmFyIGk9MDsgaSE9PW51bUNvbnRhY3RzOyBpKyspe1xuICAgICAgICBjID0gdGhpcy5yZXN1bHRbdGhpcy5yZXN1bHQubGVuZ3RoIC0gMSAtIGldO1xuICAgICAgICBpZihjLmJvZHlBICE9PSBib2R5QSl7XG4gICAgICAgICAgICBhdmVyYWdlTm9ybWFsLnZhZGQoYy5uaSwgYXZlcmFnZU5vcm1hbCk7IC8vIHZlYzIuYWRkKGVxLnQsIGVxLnQsIGMubm9ybWFsQSk7XG4gICAgICAgICAgICBhdmVyYWdlQ29udGFjdFBvaW50QS52YWRkKGMucmksIGF2ZXJhZ2VDb250YWN0UG9pbnRBKTsgLy8gdmVjMi5hZGQoZXEuY29udGFjdFBvaW50QSwgZXEuY29udGFjdFBvaW50QSwgYy5jb250YWN0UG9pbnRBKTtcbiAgICAgICAgICAgIGF2ZXJhZ2VDb250YWN0UG9pbnRCLnZhZGQoYy5yaiwgYXZlcmFnZUNvbnRhY3RQb2ludEIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXZlcmFnZU5vcm1hbC52c3ViKGMubmksIGF2ZXJhZ2VOb3JtYWwpOyAvLyB2ZWMyLnN1YihlcS50LCBlcS50LCBjLm5vcm1hbEEpO1xuICAgICAgICAgICAgYXZlcmFnZUNvbnRhY3RQb2ludEEudmFkZChjLnJqLCBhdmVyYWdlQ29udGFjdFBvaW50QSk7IC8vIHZlYzIuYWRkKGVxLmNvbnRhY3RQb2ludEEsIGVxLmNvbnRhY3RQb2ludEEsIGMuY29udGFjdFBvaW50QSk7XG4gICAgICAgICAgICBhdmVyYWdlQ29udGFjdFBvaW50Qi52YWRkKGMucmksIGF2ZXJhZ2VDb250YWN0UG9pbnRCKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpbnZOdW1Db250YWN0cyA9IDEgLyBudW1Db250YWN0cztcbiAgICBhdmVyYWdlQ29udGFjdFBvaW50QS5zY2FsZShpbnZOdW1Db250YWN0cywgZjEucmkpOyAvLyB2ZWMyLnNjYWxlKGVxLmNvbnRhY3RQb2ludEEsIGVxLmNvbnRhY3RQb2ludEEsIGludk51bUNvbnRhY3RzKTtcbiAgICBhdmVyYWdlQ29udGFjdFBvaW50Qi5zY2FsZShpbnZOdW1Db250YWN0cywgZjEucmopOyAvLyB2ZWMyLnNjYWxlKGVxLmNvbnRhY3RQb2ludEIsIGVxLmNvbnRhY3RQb2ludEIsIGludk51bUNvbnRhY3RzKTtcbiAgICBmMi5yaS5jb3B5KGYxLnJpKTsgLy8gU2hvdWxkIGJlIHRoZSBzYW1lXG4gICAgZjIucmouY29weShmMS5yaik7XG4gICAgYXZlcmFnZU5vcm1hbC5ub3JtYWxpemUoKTtcbiAgICBhdmVyYWdlTm9ybWFsLnRhbmdlbnRzKGYxLnQsIGYyLnQpO1xuICAgIC8vIHJldHVybiBlcTtcbn07XG5cblxudmFyIHRtcFZlYzEgPSBuZXcgVmVjMygpO1xudmFyIHRtcFZlYzIgPSBuZXcgVmVjMygpO1xudmFyIHRtcFF1YXQxID0gbmV3IFF1YXRlcm5pb24oKTtcbnZhciB0bXBRdWF0MiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cbi8qKlxuICogR2VuZXJhdGUgYWxsIGNvbnRhY3RzIGJldHdlZW4gYSBsaXN0IG9mIGJvZHkgcGFpcnNcbiAqIEBtZXRob2QgZ2V0Q29udGFjdHNcbiAqIEBwYXJhbSB7YXJyYXl9IHAxIEFycmF5IG9mIGJvZHkgaW5kaWNlc1xuICogQHBhcmFtIHthcnJheX0gcDIgQXJyYXkgb2YgYm9keSBpbmRpY2VzXG4gKiBAcGFyYW0ge1dvcmxkfSB3b3JsZFxuICogQHBhcmFtIHthcnJheX0gcmVzdWx0IEFycmF5IHRvIHN0b3JlIGdlbmVyYXRlZCBjb250YWN0c1xuICogQHBhcmFtIHthcnJheX0gb2xkY29udGFjdHMgT3B0aW9uYWwuIEFycmF5IG9mIHJldXNhYmxlIGNvbnRhY3Qgb2JqZWN0c1xuICovXG5OYXJyb3dwaGFzZS5wcm90b3R5cGUuZ2V0Q29udGFjdHMgPSBmdW5jdGlvbihwMSwgcDIsIHdvcmxkLCByZXN1bHQsIG9sZGNvbnRhY3RzLCBmcmljdGlvblJlc3VsdCwgZnJpY3Rpb25Qb29sKXtcbiAgICAvLyBTYXZlIG9sZCBjb250YWN0IG9iamVjdHNcbiAgICB0aGlzLmNvbnRhY3RQb2ludFBvb2wgPSBvbGRjb250YWN0cztcbiAgICB0aGlzLmZyaWN0aW9uRXF1YXRpb25Qb29sID0gZnJpY3Rpb25Qb29sO1xuICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgIHRoaXMuZnJpY3Rpb25SZXN1bHQgPSBmcmljdGlvblJlc3VsdDtcblxuICAgIHZhciBxaSA9IHRtcFF1YXQxO1xuICAgIHZhciBxaiA9IHRtcFF1YXQyO1xuICAgIHZhciB4aSA9IHRtcFZlYzE7XG4gICAgdmFyIHhqID0gdG1wVmVjMjtcblxuICAgIGZvcih2YXIgaz0wLCBOPXAxLmxlbmd0aDsgayE9PU47IGsrKyl7XG5cbiAgICAgICAgLy8gR2V0IGN1cnJlbnQgY29sbGlzaW9uIGJvZGllc1xuICAgICAgICB2YXIgYmkgPSBwMVtrXSxcbiAgICAgICAgICAgIGJqID0gcDJba107XG5cbiAgICAgICAgLy8gR2V0IGNvbnRhY3QgbWF0ZXJpYWxcbiAgICAgICAgdmFyIGJvZHlDb250YWN0TWF0ZXJpYWwgPSBudWxsO1xuICAgICAgICBpZihiaS5tYXRlcmlhbCAmJiBiai5tYXRlcmlhbCl7XG4gICAgICAgICAgICBib2R5Q29udGFjdE1hdGVyaWFsID0gd29ybGQuZ2V0Q29udGFjdE1hdGVyaWFsKGJpLm1hdGVyaWFsLGJqLm1hdGVyaWFsKSB8fCBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaS5zaGFwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJpLnF1YXRlcm5pb24ubXVsdChiaS5zaGFwZU9yaWVudGF0aW9uc1tpXSwgcWkpO1xuICAgICAgICAgICAgYmkucXVhdGVybmlvbi52bXVsdChiaS5zaGFwZU9mZnNldHNbaV0sIHhpKTtcbiAgICAgICAgICAgIHhpLnZhZGQoYmkucG9zaXRpb24sIHhpKTtcbiAgICAgICAgICAgIHZhciBzaSA9IGJpLnNoYXBlc1tpXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBiai5zaGFwZXMubGVuZ3RoOyBqKyspIHtcblxuICAgICAgICAgICAgICAgIC8vIENvbXB1dGUgd29ybGQgdHJhbnNmb3JtIG9mIHNoYXBlc1xuICAgICAgICAgICAgICAgIGJqLnF1YXRlcm5pb24ubXVsdChiai5zaGFwZU9yaWVudGF0aW9uc1tqXSwgcWopO1xuICAgICAgICAgICAgICAgIGJqLnF1YXRlcm5pb24udm11bHQoYmouc2hhcGVPZmZzZXRzW2pdLCB4aik7XG4gICAgICAgICAgICAgICAgeGoudmFkZChiai5wb3NpdGlvbiwgeGopO1xuICAgICAgICAgICAgICAgIHZhciBzaiA9IGJqLnNoYXBlc1tqXTtcblxuICAgICAgICAgICAgICAgIGlmKHhpLmRpc3RhbmNlVG8oeGopID4gc2kuYm91bmRpbmdTcGhlcmVSYWRpdXMgKyBzai5ib3VuZGluZ1NwaGVyZVJhZGl1cyl7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEdldCBjb2xsaXNpb24gbWF0ZXJpYWxcbiAgICAgICAgICAgICAgICB2YXIgc2hhcGVDb250YWN0TWF0ZXJpYWwgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmKHNpLm1hdGVyaWFsICYmIHNqLm1hdGVyaWFsKXtcbiAgICAgICAgICAgICAgICAgICAgc2hhcGVDb250YWN0TWF0ZXJpYWwgPSB3b3JsZC5nZXRDb250YWN0TWF0ZXJpYWwoc2kubWF0ZXJpYWwsc2oubWF0ZXJpYWwpIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50Q29udGFjdE1hdGVyaWFsID0gc2hhcGVDb250YWN0TWF0ZXJpYWwgfHwgYm9keUNvbnRhY3RNYXRlcmlhbCB8fCB3b3JsZC5kZWZhdWx0Q29udGFjdE1hdGVyaWFsO1xuXG4gICAgICAgICAgICAgICAgLy8gR2V0IGNvbnRhY3RzXG4gICAgICAgICAgICAgICAgdmFyIHJlc29sdmVyID0gdGhpc1tzaS50eXBlIHwgc2oudHlwZV07XG4gICAgICAgICAgICAgICAgaWYocmVzb2x2ZXIpe1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2kudHlwZSA8IHNqLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVyLmNhbGwodGhpcywgc2ksIHNqLCB4aSwgeGosIHFpLCBxaiwgYmksIGJqLCBzaSwgc2opO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXIuY2FsbCh0aGlzLCBzaiwgc2ksIHhqLCB4aSwgcWosIHFpLCBiaiwgYmksIHNpLCBzaik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgbnVtV2FybmluZ3MgPSAwO1xudmFyIG1heFdhcm5pbmdzID0gMTA7XG5cbmZ1bmN0aW9uIHdhcm4obXNnKXtcbiAgICBpZihudW1XYXJuaW5ncyA+IG1heFdhcm5pbmdzKXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG51bVdhcm5pbmdzKys7XG5cbiAgICBjb25zb2xlLndhcm4obXNnKTtcbn1cblxuTmFycm93cGhhc2UucHJvdG90eXBlW1NoYXBlLnR5cGVzLkJPWCB8IFNoYXBlLnR5cGVzLkJPWF0gPVxuTmFycm93cGhhc2UucHJvdG90eXBlLmJveEJveCA9IGZ1bmN0aW9uKHNpLHNqLHhpLHhqLHFpLHFqLGJpLGJqKXtcbiAgICBzaS5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24ubWF0ZXJpYWwgPSBzaS5tYXRlcmlhbDtcbiAgICBzai5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24ubWF0ZXJpYWwgPSBzai5tYXRlcmlhbDtcbiAgICBzaS5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24uY29sbGlzaW9uUmVzcG9uc2UgPSBzaS5jb2xsaXNpb25SZXNwb25zZTtcbiAgICBzai5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24uY29sbGlzaW9uUmVzcG9uc2UgPSBzai5jb2xsaXNpb25SZXNwb25zZTtcbiAgICB0aGlzLmNvbnZleENvbnZleChzaS5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24sc2ouY29udmV4UG9seWhlZHJvblJlcHJlc2VudGF0aW9uLHhpLHhqLHFpLHFqLGJpLGJqLHNpLHNqKTtcbn07XG5cbk5hcnJvd3BoYXNlLnByb3RvdHlwZVtTaGFwZS50eXBlcy5CT1ggfCBTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OXSA9XG5OYXJyb3dwaGFzZS5wcm90b3R5cGUuYm94Q29udmV4ID0gZnVuY3Rpb24oc2ksc2oseGkseGoscWkscWosYmksYmope1xuICAgIHNpLmNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbi5tYXRlcmlhbCA9IHNpLm1hdGVyaWFsO1xuICAgIHNpLmNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbi5jb2xsaXNpb25SZXNwb25zZSA9IHNpLmNvbGxpc2lvblJlc3BvbnNlO1xuICAgIHRoaXMuY29udmV4Q29udmV4KHNpLmNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbixzaix4aSx4aixxaSxxaixiaSxiaixzaSxzaik7XG59O1xuXG5OYXJyb3dwaGFzZS5wcm90b3R5cGVbU2hhcGUudHlwZXMuQk9YIHwgU2hhcGUudHlwZXMuUEFSVElDTEVdID1cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5ib3hQYXJ0aWNsZSA9IGZ1bmN0aW9uKHNpLHNqLHhpLHhqLHFpLHFqLGJpLGJqKXtcbiAgICBzaS5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24ubWF0ZXJpYWwgPSBzaS5tYXRlcmlhbDtcbiAgICBzaS5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24uY29sbGlzaW9uUmVzcG9uc2UgPSBzaS5jb2xsaXNpb25SZXNwb25zZTtcbiAgICB0aGlzLmNvbnZleFBhcnRpY2xlKHNpLmNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbixzaix4aSx4aixxaSxxaixiaSxiaixzaSxzaik7XG59O1xuXG4vKipcbiAqIEBtZXRob2Qgc3BoZXJlU3BoZXJlXG4gKiBAcGFyYW0gIHtTaGFwZX0gICAgICBzaVxuICogQHBhcmFtICB7U2hhcGV9ICAgICAgc2pcbiAqIEBwYXJhbSAge1ZlYzN9ICAgICAgIHhpXG4gKiBAcGFyYW0gIHtWZWMzfSAgICAgICB4alxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gcWlcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHFqXG4gKiBAcGFyYW0gIHtCb2R5fSAgICAgICBiaVxuICogQHBhcmFtICB7Qm9keX0gICAgICAgYmpcbiAqL1xuTmFycm93cGhhc2UucHJvdG90eXBlW1NoYXBlLnR5cGVzLlNQSEVSRV0gPVxuTmFycm93cGhhc2UucHJvdG90eXBlLnNwaGVyZVNwaGVyZSA9IGZ1bmN0aW9uKHNpLHNqLHhpLHhqLHFpLHFqLGJpLGJqKXtcbiAgICAvLyBXZSB3aWxsIGhhdmUgb25seSBvbmUgY29udGFjdCBpbiB0aGlzIGNhc2VcbiAgICB2YXIgciA9IHRoaXMuY3JlYXRlQ29udGFjdEVxdWF0aW9uKGJpLGJqLHNpLHNqKTtcblxuICAgIC8vIENvbnRhY3Qgbm9ybWFsXG4gICAgeGoudnN1Yih4aSwgci5uaSk7XG4gICAgci5uaS5ub3JtYWxpemUoKTtcblxuICAgIC8vIENvbnRhY3QgcG9pbnQgbG9jYXRpb25zXG4gICAgci5yaS5jb3B5KHIubmkpO1xuICAgIHIucmouY29weShyLm5pKTtcbiAgICByLnJpLm11bHQoc2kucmFkaXVzLCByLnJpKTtcbiAgICByLnJqLm11bHQoLXNqLnJhZGl1cywgci5yaik7XG5cbiAgICByLnJpLnZhZGQoeGksIHIucmkpO1xuICAgIHIucmkudnN1YihiaS5wb3NpdGlvbiwgci5yaSk7XG5cbiAgICByLnJqLnZhZGQoeGosIHIucmopO1xuICAgIHIucmoudnN1Yihiai5wb3NpdGlvbiwgci5yaik7XG5cbiAgICB0aGlzLnJlc3VsdC5wdXNoKHIpO1xuXG4gICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xufTtcblxuLyoqXG4gKiBAbWV0aG9kIHBsYW5lVHJpbWVzaFxuICogQHBhcmFtICB7U2hhcGV9ICAgICAgc2lcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNqXG4gKiBAcGFyYW0gIHtWZWMzfSAgICAgICB4aVxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGpcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHFpXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxalxuICogQHBhcmFtICB7Qm9keX0gICAgICAgYmlcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJqXG4gKi9cbnZhciBwbGFuZVRyaW1lc2hfbm9ybWFsID0gbmV3IFZlYzMoKTtcbnZhciBwbGFuZVRyaW1lc2hfcmVscG9zID0gbmV3IFZlYzMoKTtcbnZhciBwbGFuZVRyaW1lc2hfcHJvamVjdGVkID0gbmV3IFZlYzMoKTtcbk5hcnJvd3BoYXNlLnByb3RvdHlwZVtTaGFwZS50eXBlcy5QTEFORSB8IFNoYXBlLnR5cGVzLlRSSU1FU0hdID1cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5wbGFuZVRyaW1lc2ggPSBmdW5jdGlvbihcbiAgICBwbGFuZVNoYXBlLFxuICAgIHRyaW1lc2hTaGFwZSxcbiAgICBwbGFuZVBvcyxcbiAgICB0cmltZXNoUG9zLFxuICAgIHBsYW5lUXVhdCxcbiAgICB0cmltZXNoUXVhdCxcbiAgICBwbGFuZUJvZHksXG4gICAgdHJpbWVzaEJvZHlcbil7XG4gICAgLy8gTWFrZSBjb250YWN0cyFcbiAgICB2YXIgdiA9IG5ldyBWZWMzKCk7XG5cbiAgICB2YXIgbm9ybWFsID0gcGxhbmVUcmltZXNoX25vcm1hbDtcbiAgICBub3JtYWwuc2V0KDAsMCwxKTtcbiAgICBwbGFuZVF1YXQudm11bHQobm9ybWFsLG5vcm1hbCk7IC8vIFR1cm4gbm9ybWFsIGFjY29yZGluZyB0byBwbGFuZVxuXG4gICAgZm9yKHZhciBpPTA7IGk8dHJpbWVzaFNoYXBlLnZlcnRpY2VzLmxlbmd0aCAvIDM7IGkrKyl7XG5cbiAgICAgICAgLy8gR2V0IHdvcmxkIHZlcnRleCBmcm9tIHRyaW1lc2hcbiAgICAgICAgdHJpbWVzaFNoYXBlLmdldFZlcnRleChpLCB2KTtcblxuICAgICAgICAvLyBTYWZlIHVwXG4gICAgICAgIHZhciB2MiA9IG5ldyBWZWMzKCk7XG4gICAgICAgIHYyLmNvcHkodik7XG4gICAgICAgIFRyYW5zZm9ybS5wb2ludFRvV29ybGRGcmFtZSh0cmltZXNoUG9zLCB0cmltZXNoUXVhdCwgdjIsIHYpO1xuXG4gICAgICAgIC8vIENoZWNrIHBsYW5lIHNpZGVcbiAgICAgICAgdmFyIHJlbHBvcyA9IHBsYW5lVHJpbWVzaF9yZWxwb3M7XG4gICAgICAgIHYudnN1YihwbGFuZVBvcywgcmVscG9zKTtcbiAgICAgICAgdmFyIGRvdCA9IG5vcm1hbC5kb3QocmVscG9zKTtcblxuICAgICAgICBpZihkb3QgPD0gMC4wKXtcbiAgICAgICAgICAgIHZhciByID0gdGhpcy5jcmVhdGVDb250YWN0RXF1YXRpb24ocGxhbmVCb2R5LHRyaW1lc2hCb2R5LHBsYW5lU2hhcGUsdHJpbWVzaFNoYXBlKTtcblxuICAgICAgICAgICAgci5uaS5jb3B5KG5vcm1hbCk7IC8vIENvbnRhY3Qgbm9ybWFsIGlzIHRoZSBwbGFuZSBub3JtYWxcblxuICAgICAgICAgICAgLy8gR2V0IHZlcnRleCBwb3NpdGlvbiBwcm9qZWN0ZWQgb24gcGxhbmVcbiAgICAgICAgICAgIHZhciBwcm9qZWN0ZWQgPSBwbGFuZVRyaW1lc2hfcHJvamVjdGVkO1xuICAgICAgICAgICAgbm9ybWFsLnNjYWxlKHJlbHBvcy5kb3Qobm9ybWFsKSwgcHJvamVjdGVkKTtcbiAgICAgICAgICAgIHYudnN1Yihwcm9qZWN0ZWQscHJvamVjdGVkKTtcblxuICAgICAgICAgICAgLy8gcmkgaXMgdGhlIHByb2plY3RlZCB3b3JsZCBwb3NpdGlvbiBtaW51cyBwbGFuZSBwb3NpdGlvblxuICAgICAgICAgICAgci5yaS5jb3B5KHByb2plY3RlZCk7XG4gICAgICAgICAgICByLnJpLnZzdWIocGxhbmVCb2R5LnBvc2l0aW9uLCByLnJpKTtcblxuICAgICAgICAgICAgci5yai5jb3B5KHYpO1xuICAgICAgICAgICAgci5yai52c3ViKHRyaW1lc2hCb2R5LnBvc2l0aW9uLCByLnJqKTtcblxuICAgICAgICAgICAgLy8gU3RvcmUgcmVzdWx0XG4gICAgICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHIpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBAbWV0aG9kIHNwaGVyZVRyaW1lc2hcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNwaGVyZVNoYXBlXG4gKiBAcGFyYW0gIHtTaGFwZX0gICAgICB0cmltZXNoU2hhcGVcbiAqIEBwYXJhbSAge1ZlYzN9ICAgICAgIHNwaGVyZVBvc1xuICogQHBhcmFtICB7VmVjM30gICAgICAgdHJpbWVzaFBvc1xuICogQHBhcmFtICB7UXVhdGVybmlvbn0gc3BoZXJlUXVhdFxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gdHJpbWVzaFF1YXRcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIHNwaGVyZUJvZHlcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIHRyaW1lc2hCb2R5XG4gKi9cbnZhciBzcGhlcmVUcmltZXNoX25vcm1hbCA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlVHJpbWVzaF9yZWxwb3MgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZVRyaW1lc2hfcHJvamVjdGVkID0gbmV3IFZlYzMoKTtcbnZhciBzcGhlcmVUcmltZXNoX3YgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZVRyaW1lc2hfdjIgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZVRyaW1lc2hfZWRnZVZlcnRleEEgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZVRyaW1lc2hfZWRnZVZlcnRleEIgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZVRyaW1lc2hfZWRnZVZlY3RvciA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlVHJpbWVzaF9lZGdlVmVjdG9yVW5pdCA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlVHJpbWVzaF9sb2NhbFNwaGVyZVBvcyA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlVHJpbWVzaF90bXAgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZVRyaW1lc2hfdmEgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZVRyaW1lc2hfdmIgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZVRyaW1lc2hfdmMgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZVRyaW1lc2hfbG9jYWxTcGhlcmVBQUJCID0gbmV3IEFBQkIoKTtcbnZhciBzcGhlcmVUcmltZXNoX3RyaWFuZ2xlcyA9IFtdO1xuTmFycm93cGhhc2UucHJvdG90eXBlW1NoYXBlLnR5cGVzLlNQSEVSRSB8IFNoYXBlLnR5cGVzLlRSSU1FU0hdID1cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5zcGhlcmVUcmltZXNoID0gZnVuY3Rpb24gKFxuICAgIHNwaGVyZVNoYXBlLFxuICAgIHRyaW1lc2hTaGFwZSxcbiAgICBzcGhlcmVQb3MsXG4gICAgdHJpbWVzaFBvcyxcbiAgICBzcGhlcmVRdWF0LFxuICAgIHRyaW1lc2hRdWF0LFxuICAgIHNwaGVyZUJvZHksXG4gICAgdHJpbWVzaEJvZHlcbikge1xuXG4gICAgdmFyIGVkZ2VWZXJ0ZXhBID0gc3BoZXJlVHJpbWVzaF9lZGdlVmVydGV4QTtcbiAgICB2YXIgZWRnZVZlcnRleEIgPSBzcGhlcmVUcmltZXNoX2VkZ2VWZXJ0ZXhCO1xuICAgIHZhciBlZGdlVmVjdG9yID0gc3BoZXJlVHJpbWVzaF9lZGdlVmVjdG9yO1xuICAgIHZhciBlZGdlVmVjdG9yVW5pdCA9IHNwaGVyZVRyaW1lc2hfZWRnZVZlY3RvclVuaXQ7XG4gICAgdmFyIGxvY2FsU3BoZXJlUG9zID0gc3BoZXJlVHJpbWVzaF9sb2NhbFNwaGVyZVBvcztcbiAgICB2YXIgdG1wID0gc3BoZXJlVHJpbWVzaF90bXA7XG4gICAgdmFyIGxvY2FsU3BoZXJlQUFCQiA9IHNwaGVyZVRyaW1lc2hfbG9jYWxTcGhlcmVBQUJCO1xuICAgIHZhciB2MiA9IHNwaGVyZVRyaW1lc2hfdjI7XG4gICAgdmFyIHJlbHBvcyA9IHNwaGVyZVRyaW1lc2hfcmVscG9zO1xuICAgIHZhciB0cmlhbmdsZXMgPSBzcGhlcmVUcmltZXNoX3RyaWFuZ2xlcztcblxuICAgIC8vIENvbnZlcnQgc3BoZXJlIHBvc2l0aW9uIHRvIGxvY2FsIGluIHRoZSB0cmltZXNoXG4gICAgVHJhbnNmb3JtLnBvaW50VG9Mb2NhbEZyYW1lKHRyaW1lc2hQb3MsIHRyaW1lc2hRdWF0LCBzcGhlcmVQb3MsIGxvY2FsU3BoZXJlUG9zKTtcblxuICAgIC8vIEdldCB0aGUgYWFiYiBvZiB0aGUgc3BoZXJlIGxvY2FsbHkgaW4gdGhlIHRyaW1lc2hcbiAgICB2YXIgc3BoZXJlUmFkaXVzID0gc3BoZXJlU2hhcGUucmFkaXVzO1xuICAgIGxvY2FsU3BoZXJlQUFCQi5sb3dlckJvdW5kLnNldChcbiAgICAgICAgbG9jYWxTcGhlcmVQb3MueCAtIHNwaGVyZVJhZGl1cyxcbiAgICAgICAgbG9jYWxTcGhlcmVQb3MueSAtIHNwaGVyZVJhZGl1cyxcbiAgICAgICAgbG9jYWxTcGhlcmVQb3MueiAtIHNwaGVyZVJhZGl1c1xuICAgICk7XG4gICAgbG9jYWxTcGhlcmVBQUJCLnVwcGVyQm91bmQuc2V0KFxuICAgICAgICBsb2NhbFNwaGVyZVBvcy54ICsgc3BoZXJlUmFkaXVzLFxuICAgICAgICBsb2NhbFNwaGVyZVBvcy55ICsgc3BoZXJlUmFkaXVzLFxuICAgICAgICBsb2NhbFNwaGVyZVBvcy56ICsgc3BoZXJlUmFkaXVzXG4gICAgKTtcblxuICAgIHRyaW1lc2hTaGFwZS5nZXRUcmlhbmdsZXNJbkFBQkIobG9jYWxTcGhlcmVBQUJCLCB0cmlhbmdsZXMpO1xuICAgIC8vZm9yICh2YXIgaSA9IDA7IGkgPCB0cmltZXNoU2hhcGUuaW5kaWNlcy5sZW5ndGggLyAzOyBpKyspIHRyaWFuZ2xlcy5wdXNoKGkpOyAvLyBBbGxcblxuICAgIC8vIFZlcnRpY2VzXG4gICAgdmFyIHYgPSBzcGhlcmVUcmltZXNoX3Y7XG4gICAgdmFyIHJhZGl1c1NxdWFyZWQgPSBzcGhlcmVTaGFwZS5yYWRpdXMgKiBzcGhlcmVTaGFwZS5yYWRpdXM7XG4gICAgZm9yKHZhciBpPTA7IGk8dHJpYW5nbGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAzOyBqKyspIHtcblxuICAgICAgICAgICAgdHJpbWVzaFNoYXBlLmdldFZlcnRleCh0cmltZXNoU2hhcGUuaW5kaWNlc1t0cmlhbmdsZXNbaV0gKiAzICsgal0sIHYpO1xuXG4gICAgICAgICAgICAvLyBDaGVjayB2ZXJ0ZXggb3ZlcmxhcCBpbiBzcGhlcmVcbiAgICAgICAgICAgIHYudnN1Yihsb2NhbFNwaGVyZVBvcywgcmVscG9zKTtcblxuICAgICAgICAgICAgaWYocmVscG9zLm5vcm0yKCkgPD0gcmFkaXVzU3F1YXJlZCl7XG5cbiAgICAgICAgICAgICAgICAvLyBTYWZlIHVwXG4gICAgICAgICAgICAgICAgdjIuY29weSh2KTtcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm0ucG9pbnRUb1dvcmxkRnJhbWUodHJpbWVzaFBvcywgdHJpbWVzaFF1YXQsIHYyLCB2KTtcblxuICAgICAgICAgICAgICAgIHYudnN1YihzcGhlcmVQb3MsIHJlbHBvcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuY3JlYXRlQ29udGFjdEVxdWF0aW9uKHNwaGVyZUJvZHksdHJpbWVzaEJvZHksc3BoZXJlU2hhcGUsdHJpbWVzaFNoYXBlKTtcbiAgICAgICAgICAgICAgICByLm5pLmNvcHkocmVscG9zKTtcbiAgICAgICAgICAgICAgICByLm5pLm5vcm1hbGl6ZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gcmkgaXMgdGhlIHZlY3RvciBmcm9tIHNwaGVyZSBjZW50ZXIgdG8gdGhlIHNwaGVyZSBzdXJmYWNlXG4gICAgICAgICAgICAgICAgci5yaS5jb3B5KHIubmkpO1xuICAgICAgICAgICAgICAgIHIucmkuc2NhbGUoc3BoZXJlU2hhcGUucmFkaXVzLCByLnJpKTtcbiAgICAgICAgICAgICAgICByLnJpLnZhZGQoc3BoZXJlUG9zLCByLnJpKTtcbiAgICAgICAgICAgICAgICByLnJpLnZzdWIoc3BoZXJlQm9keS5wb3NpdGlvbiwgci5yaSk7XG5cbiAgICAgICAgICAgICAgICByLnJqLmNvcHkodik7XG4gICAgICAgICAgICAgICAgci5yai52c3ViKHRyaW1lc2hCb2R5LnBvc2l0aW9uLCByLnJqKTtcblxuICAgICAgICAgICAgICAgIC8vIFN0b3JlIHJlc3VsdFxuICAgICAgICAgICAgICAgIHRoaXMucmVzdWx0LnB1c2gocik7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgYWxsIGVkZ2VzXG4gICAgZm9yKHZhciBpPTA7IGk8dHJpYW5nbGVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAzOyBqKyspIHtcblxuICAgICAgICAgICAgdHJpbWVzaFNoYXBlLmdldFZlcnRleCh0cmltZXNoU2hhcGUuaW5kaWNlc1t0cmlhbmdsZXNbaV0gKiAzICsgal0sIGVkZ2VWZXJ0ZXhBKTtcbiAgICAgICAgICAgIHRyaW1lc2hTaGFwZS5nZXRWZXJ0ZXgodHJpbWVzaFNoYXBlLmluZGljZXNbdHJpYW5nbGVzW2ldICogMyArICgoaisxKSUzKV0sIGVkZ2VWZXJ0ZXhCKTtcbiAgICAgICAgICAgIGVkZ2VWZXJ0ZXhCLnZzdWIoZWRnZVZlcnRleEEsIGVkZ2VWZWN0b3IpO1xuXG4gICAgICAgICAgICAvLyBQcm9qZWN0IHNwaGVyZSBwb3NpdGlvbiB0byB0aGUgZWRnZVxuICAgICAgICAgICAgbG9jYWxTcGhlcmVQb3MudnN1YihlZGdlVmVydGV4QiwgdG1wKTtcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbkFsb25nRWRnZUIgPSB0bXAuZG90KGVkZ2VWZWN0b3IpO1xuXG4gICAgICAgICAgICBsb2NhbFNwaGVyZVBvcy52c3ViKGVkZ2VWZXJ0ZXhBLCB0bXApO1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uQWxvbmdFZGdlQSA9IHRtcC5kb3QoZWRnZVZlY3Rvcik7XG5cbiAgICAgICAgICAgIGlmKHBvc2l0aW9uQWxvbmdFZGdlQSA+IDAgJiYgcG9zaXRpb25BbG9uZ0VkZ2VCIDwgMCl7XG5cbiAgICAgICAgICAgICAgICAvLyBOb3cgY2hlY2sgdGhlIG9ydGhvZ29uYWwgZGlzdGFuY2UgZnJvbSBlZGdlIHRvIHNwaGVyZSBjZW50ZXJcbiAgICAgICAgICAgICAgICBsb2NhbFNwaGVyZVBvcy52c3ViKGVkZ2VWZXJ0ZXhBLCB0bXApO1xuXG4gICAgICAgICAgICAgICAgZWRnZVZlY3RvclVuaXQuY29weShlZGdlVmVjdG9yKTtcbiAgICAgICAgICAgICAgICBlZGdlVmVjdG9yVW5pdC5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkFsb25nRWRnZUEgPSB0bXAuZG90KGVkZ2VWZWN0b3JVbml0KTtcblxuICAgICAgICAgICAgICAgIGVkZ2VWZWN0b3JVbml0LnNjYWxlKHBvc2l0aW9uQWxvbmdFZGdlQSwgdG1wKTtcbiAgICAgICAgICAgICAgICB0bXAudmFkZChlZGdlVmVydGV4QSwgdG1wKTtcblxuICAgICAgICAgICAgICAgIC8vIHRtcCBpcyBub3cgdGhlIHNwaGVyZSBjZW50ZXIgcG9zaXRpb24gcHJvamVjdGVkIHRvIHRoZSBlZGdlLCBkZWZpbmVkIGxvY2FsbHkgaW4gdGhlIHRyaW1lc2ggZnJhbWVcbiAgICAgICAgICAgICAgICB2YXIgZGlzdCA9IHRtcC5kaXN0YW5jZVRvKGxvY2FsU3BoZXJlUG9zKTtcbiAgICAgICAgICAgICAgICBpZihkaXN0IDwgc3BoZXJlU2hhcGUucmFkaXVzKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmNyZWF0ZUNvbnRhY3RFcXVhdGlvbihzcGhlcmVCb2R5LCB0cmltZXNoQm9keSwgc3BoZXJlU2hhcGUsIHRyaW1lc2hTaGFwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdG1wLnZzdWIobG9jYWxTcGhlcmVQb3MsIHIubmkpO1xuICAgICAgICAgICAgICAgICAgICByLm5pLm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgICAgICAgICByLm5pLnNjYWxlKHNwaGVyZVNoYXBlLnJhZGl1cywgci5yaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgVHJhbnNmb3JtLnBvaW50VG9Xb3JsZEZyYW1lKHRyaW1lc2hQb3MsIHRyaW1lc2hRdWF0LCB0bXAsIHRtcCk7XG4gICAgICAgICAgICAgICAgICAgIHRtcC52c3ViKHRyaW1lc2hCb2R5LnBvc2l0aW9uLCByLnJqKTtcblxuICAgICAgICAgICAgICAgICAgICBUcmFuc2Zvcm0udmVjdG9yVG9Xb3JsZEZyYW1lKHRyaW1lc2hRdWF0LCByLm5pLCByLm5pKTtcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNmb3JtLnZlY3RvclRvV29ybGRGcmFtZSh0cmltZXNoUXVhdCwgci5yaSwgci5yaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQucHVzaChyKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRyaWFuZ2xlIGZhY2VzXG4gICAgdmFyIHZhID0gc3BoZXJlVHJpbWVzaF92YTtcbiAgICB2YXIgdmIgPSBzcGhlcmVUcmltZXNoX3ZiO1xuICAgIHZhciB2YyA9IHNwaGVyZVRyaW1lc2hfdmM7XG4gICAgdmFyIG5vcm1hbCA9IHNwaGVyZVRyaW1lc2hfbm9ybWFsO1xuICAgIGZvcih2YXIgaT0wLCBOID0gdHJpYW5nbGVzLmxlbmd0aDsgaSAhPT0gTjsgaSsrKXtcbiAgICAgICAgdHJpbWVzaFNoYXBlLmdldFRyaWFuZ2xlVmVydGljZXModHJpYW5nbGVzW2ldLCB2YSwgdmIsIHZjKTtcbiAgICAgICAgdHJpbWVzaFNoYXBlLmdldE5vcm1hbCh0cmlhbmdsZXNbaV0sIG5vcm1hbCk7XG4gICAgICAgIGxvY2FsU3BoZXJlUG9zLnZzdWIodmEsIHRtcCk7XG4gICAgICAgIHZhciBkaXN0ID0gdG1wLmRvdChub3JtYWwpO1xuICAgICAgICBub3JtYWwuc2NhbGUoZGlzdCwgdG1wKTtcbiAgICAgICAgbG9jYWxTcGhlcmVQb3MudnN1Yih0bXAsIHRtcCk7XG5cbiAgICAgICAgLy8gdG1wIGlzIG5vdyB0aGUgc3BoZXJlIHBvc2l0aW9uIHByb2plY3RlZCB0byB0aGUgdHJpYW5nbGUgcGxhbmVcbiAgICAgICAgZGlzdCA9IHRtcC5kaXN0YW5jZVRvKGxvY2FsU3BoZXJlUG9zKTtcbiAgICAgICAgaWYoUmF5LnBvaW50SW5UcmlhbmdsZSh0bXAsIHZhLCB2YiwgdmMpICYmIGRpc3QgPCBzcGhlcmVTaGFwZS5yYWRpdXMpe1xuICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmNyZWF0ZUNvbnRhY3RFcXVhdGlvbihzcGhlcmVCb2R5LCB0cmltZXNoQm9keSwgc3BoZXJlU2hhcGUsIHRyaW1lc2hTaGFwZSk7XG5cbiAgICAgICAgICAgIHRtcC52c3ViKGxvY2FsU3BoZXJlUG9zLCByLm5pKTtcbiAgICAgICAgICAgIHIubmkubm9ybWFsaXplKCk7XG4gICAgICAgICAgICByLm5pLnNjYWxlKHNwaGVyZVNoYXBlLnJhZGl1cywgci5yaSk7XG5cbiAgICAgICAgICAgIFRyYW5zZm9ybS5wb2ludFRvV29ybGRGcmFtZSh0cmltZXNoUG9zLCB0cmltZXNoUXVhdCwgdG1wLCB0bXApO1xuICAgICAgICAgICAgdG1wLnZzdWIodHJpbWVzaEJvZHkucG9zaXRpb24sIHIucmopO1xuXG4gICAgICAgICAgICBUcmFuc2Zvcm0udmVjdG9yVG9Xb3JsZEZyYW1lKHRyaW1lc2hRdWF0LCByLm5pLCByLm5pKTtcbiAgICAgICAgICAgIFRyYW5zZm9ybS52ZWN0b3JUb1dvcmxkRnJhbWUodHJpbWVzaFF1YXQsIHIucmksIHIucmkpO1xuXG4gICAgICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHIpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJpYW5nbGVzLmxlbmd0aCA9IDA7XG59O1xuXG52YXIgcG9pbnRfb25fcGxhbmVfdG9fc3BoZXJlID0gbmV3IFZlYzMoKTtcbnZhciBwbGFuZV90b19zcGhlcmVfb3J0aG8gPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIEBtZXRob2Qgc3BoZXJlUGxhbmVcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNpXG4gKiBAcGFyYW0gIHtTaGFwZX0gICAgICBzalxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGlcbiAqIEBwYXJhbSAge1ZlYzN9ICAgICAgIHhqXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxaVxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gcWpcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJpXG4gKiBAcGFyYW0gIHtCb2R5fSAgICAgICBialxuICovXG5OYXJyb3dwaGFzZS5wcm90b3R5cGVbU2hhcGUudHlwZXMuU1BIRVJFIHwgU2hhcGUudHlwZXMuUExBTkVdID1cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5zcGhlcmVQbGFuZSA9IGZ1bmN0aW9uKHNpLHNqLHhpLHhqLHFpLHFqLGJpLGJqKXtcbiAgICAvLyBXZSB3aWxsIGhhdmUgb25lIGNvbnRhY3QgaW4gdGhpcyBjYXNlXG4gICAgdmFyIHIgPSB0aGlzLmNyZWF0ZUNvbnRhY3RFcXVhdGlvbihiaSxiaixzaSxzaik7XG5cbiAgICAvLyBDb250YWN0IG5vcm1hbFxuICAgIHIubmkuc2V0KDAsMCwxKTtcbiAgICBxai52bXVsdChyLm5pLCByLm5pKTtcbiAgICByLm5pLm5lZ2F0ZShyLm5pKTsgLy8gYm9keSBpIGlzIHRoZSBzcGhlcmUsIGZsaXAgbm9ybWFsXG4gICAgci5uaS5ub3JtYWxpemUoKTsgLy8gTmVlZGVkP1xuXG4gICAgLy8gVmVjdG9yIGZyb20gc3BoZXJlIGNlbnRlciB0byBjb250YWN0IHBvaW50XG4gICAgci5uaS5tdWx0KHNpLnJhZGl1cywgci5yaSk7XG5cbiAgICAvLyBQcm9qZWN0IGRvd24gc3BoZXJlIG9uIHBsYW5lXG4gICAgeGkudnN1Yih4aiwgcG9pbnRfb25fcGxhbmVfdG9fc3BoZXJlKTtcbiAgICByLm5pLm11bHQoci5uaS5kb3QocG9pbnRfb25fcGxhbmVfdG9fc3BoZXJlKSwgcGxhbmVfdG9fc3BoZXJlX29ydGhvKTtcbiAgICBwb2ludF9vbl9wbGFuZV90b19zcGhlcmUudnN1YihwbGFuZV90b19zcGhlcmVfb3J0aG8sci5yaik7IC8vIFRoZSBzcGhlcmUgcG9zaXRpb24gcHJvamVjdGVkIHRvIHBsYW5lXG5cbiAgICBpZigtcG9pbnRfb25fcGxhbmVfdG9fc3BoZXJlLmRvdChyLm5pKSA8PSBzaS5yYWRpdXMpe1xuXG4gICAgICAgIC8vIE1ha2UgaXQgcmVsYXRpdmUgdG8gdGhlIGJvZHlcbiAgICAgICAgdmFyIHJpID0gci5yaTtcbiAgICAgICAgdmFyIHJqID0gci5yajtcbiAgICAgICAgcmkudmFkZCh4aSwgcmkpO1xuICAgICAgICByaS52c3ViKGJpLnBvc2l0aW9uLCByaSk7XG4gICAgICAgIHJqLnZhZGQoeGosIHJqKTtcbiAgICAgICAgcmoudnN1Yihiai5wb3NpdGlvbiwgcmopO1xuXG4gICAgICAgIHRoaXMucmVzdWx0LnB1c2gocik7XG4gICAgICAgIHRoaXMuY3JlYXRlRnJpY3Rpb25FcXVhdGlvbnNGcm9tQ29udGFjdChyLCB0aGlzLmZyaWN0aW9uUmVzdWx0KTtcbiAgICB9XG59O1xuXG4vLyBTZWUgaHR0cDovL2J1bGxldHBoeXNpY3MuY29tL0J1bGxldC9CdWxsZXRGdWxsL1NwaGVyZVRyaWFuZ2xlRGV0ZWN0b3JfOGNwcF9zb3VyY2UuaHRtbFxudmFyIHBvaW50SW5Qb2x5Z29uX2VkZ2UgPSBuZXcgVmVjMygpO1xudmFyIHBvaW50SW5Qb2x5Z29uX2VkZ2VfeF9ub3JtYWwgPSBuZXcgVmVjMygpO1xudmFyIHBvaW50SW5Qb2x5Z29uX3Z0cCA9IG5ldyBWZWMzKCk7XG5mdW5jdGlvbiBwb2ludEluUG9seWdvbih2ZXJ0cywgbm9ybWFsLCBwKXtcbiAgICB2YXIgcG9zaXRpdmVSZXN1bHQgPSBudWxsO1xuICAgIHZhciBOID0gdmVydHMubGVuZ3RoO1xuICAgIGZvcih2YXIgaT0wOyBpIT09TjsgaSsrKXtcbiAgICAgICAgdmFyIHYgPSB2ZXJ0c1tpXTtcblxuICAgICAgICAvLyBHZXQgZWRnZSB0byB0aGUgbmV4dCB2ZXJ0ZXhcbiAgICAgICAgdmFyIGVkZ2UgPSBwb2ludEluUG9seWdvbl9lZGdlO1xuICAgICAgICB2ZXJ0c1soaSsxKSAlIChOKV0udnN1Yih2LGVkZ2UpO1xuXG4gICAgICAgIC8vIEdldCBjcm9zcyBwcm9kdWN0IGJldHdlZW4gcG9seWdvbiBub3JtYWwgYW5kIHRoZSBlZGdlXG4gICAgICAgIHZhciBlZGdlX3hfbm9ybWFsID0gcG9pbnRJblBvbHlnb25fZWRnZV94X25vcm1hbDtcbiAgICAgICAgLy92YXIgZWRnZV94X25vcm1hbCA9IG5ldyBWZWMzKCk7XG4gICAgICAgIGVkZ2UuY3Jvc3Mobm9ybWFsLGVkZ2VfeF9ub3JtYWwpO1xuXG4gICAgICAgIC8vIEdldCB2ZWN0b3IgYmV0d2VlbiBwb2ludCBhbmQgY3VycmVudCB2ZXJ0ZXhcbiAgICAgICAgdmFyIHZlcnRleF90b19wID0gcG9pbnRJblBvbHlnb25fdnRwO1xuICAgICAgICBwLnZzdWIodix2ZXJ0ZXhfdG9fcCk7XG5cbiAgICAgICAgLy8gVGhpcyBkb3QgcHJvZHVjdCBkZXRlcm1pbmVzIHdoaWNoIHNpZGUgb2YgdGhlIGVkZ2UgdGhlIHBvaW50IGlzXG4gICAgICAgIHZhciByID0gZWRnZV94X25vcm1hbC5kb3QodmVydGV4X3RvX3ApO1xuXG4gICAgICAgIC8vIElmIGFsbCBzdWNoIGRvdCBwcm9kdWN0cyBoYXZlIHNhbWUgc2lnbiwgd2UgYXJlIGluc2lkZSB0aGUgcG9seWdvbi5cbiAgICAgICAgaWYocG9zaXRpdmVSZXN1bHQ9PT1udWxsIHx8IChyPjAgJiYgcG9zaXRpdmVSZXN1bHQ9PT10cnVlKSB8fCAocjw9MCAmJiBwb3NpdGl2ZVJlc3VsdD09PWZhbHNlKSl7XG4gICAgICAgICAgICBpZihwb3NpdGl2ZVJlc3VsdD09PW51bGwpe1xuICAgICAgICAgICAgICAgIHBvc2l0aXZlUmVzdWx0ID0gcj4wO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEVuY291bnRlcmVkIHNvbWUgb3RoZXIgc2lnbi4gRXhpdC5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHdlIGdvdCBoZXJlLCBhbGwgZG90IHByb2R1Y3RzIHdlcmUgb2YgdGhlIHNhbWUgc2lnbi5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIGJveF90b19zcGhlcmUgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZUJveF9ucyA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlQm94X25zMSA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlQm94X25zMiA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlQm94X3NpZGVzID0gW25ldyBWZWMzKCksbmV3IFZlYzMoKSxuZXcgVmVjMygpLG5ldyBWZWMzKCksbmV3IFZlYzMoKSxuZXcgVmVjMygpXTtcbnZhciBzcGhlcmVCb3hfc3BoZXJlX3RvX2Nvcm5lciA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlQm94X3NpZGVfbnMgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZUJveF9zaWRlX25zMSA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlQm94X3NpZGVfbnMyID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBAbWV0aG9kIHNwaGVyZUJveFxuICogQHBhcmFtICB7U2hhcGV9ICAgICAgc2lcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNqXG4gKiBAcGFyYW0gIHtWZWMzfSAgICAgICB4aVxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGpcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHFpXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxalxuICogQHBhcmFtICB7Qm9keX0gICAgICAgYmlcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJqXG4gKi9cbk5hcnJvd3BoYXNlLnByb3RvdHlwZVtTaGFwZS50eXBlcy5TUEhFUkUgfCBTaGFwZS50eXBlcy5CT1hdID1cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5zcGhlcmVCb3ggPSBmdW5jdGlvbihzaSxzaix4aSx4aixxaSxxaixiaSxiail7XG4gICAgdmFyIHYzcG9vbCA9IHRoaXMudjNwb29sO1xuXG4gICAgLy8gd2UgcmVmZXIgdG8gdGhlIGJveCBhcyBib2R5IGpcbiAgICB2YXIgc2lkZXMgPSBzcGhlcmVCb3hfc2lkZXM7XG4gICAgeGkudnN1Yih4aixib3hfdG9fc3BoZXJlKTtcbiAgICBzai5nZXRTaWRlTm9ybWFscyhzaWRlcyxxaik7XG4gICAgdmFyIFIgPSAgICAgc2kucmFkaXVzO1xuICAgIHZhciBwZW5ldHJhdGluZ19zaWRlcyA9IFtdO1xuXG4gICAgLy8gQ2hlY2sgc2lkZSAocGxhbmUpIGludGVyc2VjdGlvbnNcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcblxuICAgIC8vIFN0b3JlIHRoZSByZXN1bHRpbmcgc2lkZSBwZW5ldHJhdGlvbiBpbmZvXG4gICAgdmFyIHNpZGVfbnMgPSBzcGhlcmVCb3hfc2lkZV9ucztcbiAgICB2YXIgc2lkZV9uczEgPSBzcGhlcmVCb3hfc2lkZV9uczE7XG4gICAgdmFyIHNpZGVfbnMyID0gc3BoZXJlQm94X3NpZGVfbnMyO1xuICAgIHZhciBzaWRlX2ggPSBudWxsO1xuICAgIHZhciBzaWRlX3BlbmV0cmF0aW9ucyA9IDA7XG4gICAgdmFyIHNpZGVfZG90MSA9IDA7XG4gICAgdmFyIHNpZGVfZG90MiA9IDA7XG4gICAgdmFyIHNpZGVfZGlzdGFuY2UgPSBudWxsO1xuICAgIGZvcih2YXIgaWR4PTAsbnNpZGVzPXNpZGVzLmxlbmd0aDsgaWR4IT09bnNpZGVzICYmIGZvdW5kPT09ZmFsc2U7IGlkeCsrKXtcbiAgICAgICAgLy8gR2V0IHRoZSBwbGFuZSBzaWRlIG5vcm1hbCAobnMpXG4gICAgICAgIHZhciBucyA9IHNwaGVyZUJveF9ucztcbiAgICAgICAgbnMuY29weShzaWRlc1tpZHhdKTtcblxuICAgICAgICB2YXIgaCA9IG5zLm5vcm0oKTtcbiAgICAgICAgbnMubm9ybWFsaXplKCk7XG5cbiAgICAgICAgLy8gVGhlIG5vcm1hbC9kaXN0YW5jZSBkb3QgcHJvZHVjdCB0ZWxscyB3aGljaCBzaWRlIG9mIHRoZSBwbGFuZSB3ZSBhcmVcbiAgICAgICAgdmFyIGRvdCA9IGJveF90b19zcGhlcmUuZG90KG5zKTtcblxuICAgICAgICBpZihkb3Q8aCtSICYmIGRvdD4wKXtcbiAgICAgICAgICAgIC8vIEludGVyc2VjdHMgcGxhbmUuIE5vdyBjaGVjayB0aGUgb3RoZXIgdHdvIGRpbWVuc2lvbnNcbiAgICAgICAgICAgIHZhciBuczEgPSBzcGhlcmVCb3hfbnMxO1xuICAgICAgICAgICAgdmFyIG5zMiA9IHNwaGVyZUJveF9uczI7XG4gICAgICAgICAgICBuczEuY29weShzaWRlc1soaWR4KzEpJTNdKTtcbiAgICAgICAgICAgIG5zMi5jb3B5KHNpZGVzWyhpZHgrMiklM10pO1xuICAgICAgICAgICAgdmFyIGgxID0gbnMxLm5vcm0oKTtcbiAgICAgICAgICAgIHZhciBoMiA9IG5zMi5ub3JtKCk7XG4gICAgICAgICAgICBuczEubm9ybWFsaXplKCk7XG4gICAgICAgICAgICBuczIubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB2YXIgZG90MSA9IGJveF90b19zcGhlcmUuZG90KG5zMSk7XG4gICAgICAgICAgICB2YXIgZG90MiA9IGJveF90b19zcGhlcmUuZG90KG5zMik7XG4gICAgICAgICAgICBpZihkb3QxPGgxICYmIGRvdDE+LWgxICYmIGRvdDI8aDIgJiYgZG90Mj4taDIpe1xuICAgICAgICAgICAgICAgIHZhciBkaXN0ID0gTWF0aC5hYnMoZG90LWgtUik7XG4gICAgICAgICAgICAgICAgaWYoc2lkZV9kaXN0YW5jZT09PW51bGwgfHwgZGlzdCA8IHNpZGVfZGlzdGFuY2Upe1xuICAgICAgICAgICAgICAgICAgICBzaWRlX2Rpc3RhbmNlID0gZGlzdDtcbiAgICAgICAgICAgICAgICAgICAgc2lkZV9kb3QxID0gZG90MTtcbiAgICAgICAgICAgICAgICAgICAgc2lkZV9kb3QyID0gZG90MjtcbiAgICAgICAgICAgICAgICAgICAgc2lkZV9oID0gaDtcbiAgICAgICAgICAgICAgICAgICAgc2lkZV9ucy5jb3B5KG5zKTtcbiAgICAgICAgICAgICAgICAgICAgc2lkZV9uczEuY29weShuczEpO1xuICAgICAgICAgICAgICAgICAgICBzaWRlX25zMi5jb3B5KG5zMik7XG4gICAgICAgICAgICAgICAgICAgIHNpZGVfcGVuZXRyYXRpb25zKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmKHNpZGVfcGVuZXRyYXRpb25zKXtcbiAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICB2YXIgciA9IHRoaXMuY3JlYXRlQ29udGFjdEVxdWF0aW9uKGJpLGJqLHNpLHNqKTtcbiAgICAgICAgc2lkZV9ucy5tdWx0KC1SLHIucmkpOyAvLyBTcGhlcmUgclxuICAgICAgICByLm5pLmNvcHkoc2lkZV9ucyk7XG4gICAgICAgIHIubmkubmVnYXRlKHIubmkpOyAvLyBOb3JtYWwgc2hvdWxkIGJlIG91dCBvZiBzcGhlcmVcbiAgICAgICAgc2lkZV9ucy5tdWx0KHNpZGVfaCxzaWRlX25zKTtcbiAgICAgICAgc2lkZV9uczEubXVsdChzaWRlX2RvdDEsc2lkZV9uczEpO1xuICAgICAgICBzaWRlX25zLnZhZGQoc2lkZV9uczEsc2lkZV9ucyk7XG4gICAgICAgIHNpZGVfbnMyLm11bHQoc2lkZV9kb3QyLHNpZGVfbnMyKTtcbiAgICAgICAgc2lkZV9ucy52YWRkKHNpZGVfbnMyLHIucmopO1xuXG4gICAgICAgIC8vIE1ha2UgcmVsYXRpdmUgdG8gYm9kaWVzXG4gICAgICAgIHIucmkudmFkZCh4aSwgci5yaSk7XG4gICAgICAgIHIucmkudnN1YihiaS5wb3NpdGlvbiwgci5yaSk7XG4gICAgICAgIHIucmoudmFkZCh4aiwgci5yaik7XG4gICAgICAgIHIucmoudnN1Yihiai5wb3NpdGlvbiwgci5yaik7XG5cbiAgICAgICAgdGhpcy5yZXN1bHQucHVzaChyKTtcbiAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGNvcm5lcnNcbiAgICB2YXIgcmogPSB2M3Bvb2wuZ2V0KCk7XG4gICAgdmFyIHNwaGVyZV90b19jb3JuZXIgPSBzcGhlcmVCb3hfc3BoZXJlX3RvX2Nvcm5lcjtcbiAgICBmb3IodmFyIGo9MDsgaiE9PTIgJiYgIWZvdW5kOyBqKyspe1xuICAgICAgICBmb3IodmFyIGs9MDsgayE9PTIgJiYgIWZvdW5kOyBrKyspe1xuICAgICAgICAgICAgZm9yKHZhciBsPTA7IGwhPT0yICYmICFmb3VuZDsgbCsrKXtcbiAgICAgICAgICAgICAgICByai5zZXQoMCwwLDApO1xuICAgICAgICAgICAgICAgIGlmKGope1xuICAgICAgICAgICAgICAgICAgICByai52YWRkKHNpZGVzWzBdLHJqKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByai52c3ViKHNpZGVzWzBdLHJqKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoayl7XG4gICAgICAgICAgICAgICAgICAgIHJqLnZhZGQoc2lkZXNbMV0scmopO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJqLnZzdWIoc2lkZXNbMV0scmopO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihsKXtcbiAgICAgICAgICAgICAgICAgICAgcmoudmFkZChzaWRlc1syXSxyaik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmoudnN1YihzaWRlc1syXSxyaik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gV29ybGQgcG9zaXRpb24gb2YgY29ybmVyXG4gICAgICAgICAgICAgICAgeGoudmFkZChyaixzcGhlcmVfdG9fY29ybmVyKTtcbiAgICAgICAgICAgICAgICBzcGhlcmVfdG9fY29ybmVyLnZzdWIoeGksc3BoZXJlX3RvX2Nvcm5lcik7XG5cbiAgICAgICAgICAgICAgICBpZihzcGhlcmVfdG9fY29ybmVyLm5vcm0yKCkgPCBSKlIpe1xuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy5jcmVhdGVDb250YWN0RXF1YXRpb24oYmksYmosc2ksc2opO1xuICAgICAgICAgICAgICAgICAgICByLnJpLmNvcHkoc3BoZXJlX3RvX2Nvcm5lcik7XG4gICAgICAgICAgICAgICAgICAgIHIucmkubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIHIubmkuY29weShyLnJpKTtcbiAgICAgICAgICAgICAgICAgICAgci5yaS5tdWx0KFIsci5yaSk7XG4gICAgICAgICAgICAgICAgICAgIHIucmouY29weShyaik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTWFrZSByZWxhdGl2ZSB0byBib2RpZXNcbiAgICAgICAgICAgICAgICAgICAgci5yaS52YWRkKHhpLCByLnJpKTtcbiAgICAgICAgICAgICAgICAgICAgci5yaS52c3ViKGJpLnBvc2l0aW9uLCByLnJpKTtcbiAgICAgICAgICAgICAgICAgICAgci5yai52YWRkKHhqLCByLnJqKTtcbiAgICAgICAgICAgICAgICAgICAgci5yai52c3ViKGJqLnBvc2l0aW9uLCByLnJqKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUZyaWN0aW9uRXF1YXRpb25zRnJvbUNvbnRhY3QociwgdGhpcy5mcmljdGlvblJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHYzcG9vbC5yZWxlYXNlKHJqKTtcbiAgICByaiA9IG51bGw7XG5cbiAgICAvLyBDaGVjayBlZGdlc1xuICAgIHZhciBlZGdlVGFuZ2VudCA9IHYzcG9vbC5nZXQoKTtcbiAgICB2YXIgZWRnZUNlbnRlciA9IHYzcG9vbC5nZXQoKTtcbiAgICB2YXIgciA9IHYzcG9vbC5nZXQoKTsgLy8gciA9IGVkZ2UgY2VudGVyIHRvIHNwaGVyZSBjZW50ZXJcbiAgICB2YXIgb3J0aG9nb25hbCA9IHYzcG9vbC5nZXQoKTtcbiAgICB2YXIgZGlzdCA9IHYzcG9vbC5nZXQoKTtcbiAgICB2YXIgTnNpZGVzID0gc2lkZXMubGVuZ3RoO1xuICAgIGZvcih2YXIgaj0wOyBqIT09TnNpZGVzICYmICFmb3VuZDsgaisrKXtcbiAgICAgICAgZm9yKHZhciBrPTA7IGshPT1Oc2lkZXMgJiYgIWZvdW5kOyBrKyspe1xuICAgICAgICAgICAgaWYoaiUzICE9PSBrJTMpe1xuICAgICAgICAgICAgICAgIC8vIEdldCBlZGdlIHRhbmdlbnRcbiAgICAgICAgICAgICAgICBzaWRlc1trXS5jcm9zcyhzaWRlc1tqXSxlZGdlVGFuZ2VudCk7XG4gICAgICAgICAgICAgICAgZWRnZVRhbmdlbnQubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgc2lkZXNbal0udmFkZChzaWRlc1trXSwgZWRnZUNlbnRlcik7XG4gICAgICAgICAgICAgICAgci5jb3B5KHhpKTtcbiAgICAgICAgICAgICAgICByLnZzdWIoZWRnZUNlbnRlcixyKTtcbiAgICAgICAgICAgICAgICByLnZzdWIoeGoscik7XG4gICAgICAgICAgICAgICAgdmFyIG9ydGhvbm9ybSA9IHIuZG90KGVkZ2VUYW5nZW50KTsgLy8gZGlzdGFuY2UgZnJvbSBlZGdlIGNlbnRlciB0byBzcGhlcmUgY2VudGVyIGluIHRoZSB0YW5nZW50IGRpcmVjdGlvblxuICAgICAgICAgICAgICAgIGVkZ2VUYW5nZW50Lm11bHQob3J0aG9ub3JtLG9ydGhvZ29uYWwpOyAvLyBWZWN0b3IgZnJvbSBlZGdlIGNlbnRlciB0byBzcGhlcmUgY2VudGVyIGluIHRoZSB0YW5nZW50IGRpcmVjdGlvblxuXG4gICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgdGhpcmQgc2lkZSBvcnRob2dvbmFsIHRvIHRoaXMgb25lXG4gICAgICAgICAgICAgICAgdmFyIGwgPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlKGw9PT1qJTMgfHwgbD09PWslMyl7XG4gICAgICAgICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB2ZWMgZnJvbSBlZGdlIGNlbnRlciB0byBzcGhlcmUgcHJvamVjdGVkIHRvIHRoZSBwbGFuZSBvcnRob2dvbmFsIHRvIHRoZSBlZGdlIHRhbmdlbnRcbiAgICAgICAgICAgICAgICBkaXN0LmNvcHkoeGkpO1xuICAgICAgICAgICAgICAgIGRpc3QudnN1YihvcnRob2dvbmFsLGRpc3QpO1xuICAgICAgICAgICAgICAgIGRpc3QudnN1YihlZGdlQ2VudGVyLGRpc3QpO1xuICAgICAgICAgICAgICAgIGRpc3QudnN1Yih4aixkaXN0KTtcblxuICAgICAgICAgICAgICAgIC8vIERpc3RhbmNlcyBpbiB0YW5nZW50IGRpcmVjdGlvbiBhbmQgZGlzdGFuY2UgaW4gdGhlIHBsYW5lIG9ydGhvZ29uYWwgdG8gaXRcbiAgICAgICAgICAgICAgICB2YXIgdGRpc3QgPSBNYXRoLmFicyhvcnRob25vcm0pO1xuICAgICAgICAgICAgICAgIHZhciBuZGlzdCA9IGRpc3Qubm9ybSgpO1xuXG4gICAgICAgICAgICAgICAgaWYodGRpc3QgPCBzaWRlc1tsXS5ub3JtKCkgJiYgbmRpc3Q8Uil7XG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcyA9IHRoaXMuY3JlYXRlQ29udGFjdEVxdWF0aW9uKGJpLGJqLHNpLHNqKTtcbiAgICAgICAgICAgICAgICAgICAgZWRnZUNlbnRlci52YWRkKG9ydGhvZ29uYWwscmVzLnJqKTsgLy8gYm94IHJqXG4gICAgICAgICAgICAgICAgICAgIHJlcy5yai5jb3B5KHJlcy5yaik7XG4gICAgICAgICAgICAgICAgICAgIGRpc3QubmVnYXRlKHJlcy5uaSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5uaS5ub3JtYWxpemUoKTtcblxuICAgICAgICAgICAgICAgICAgICByZXMucmkuY29weShyZXMucmopO1xuICAgICAgICAgICAgICAgICAgICByZXMucmkudmFkZCh4aixyZXMucmkpO1xuICAgICAgICAgICAgICAgICAgICByZXMucmkudnN1Yih4aSxyZXMucmkpO1xuICAgICAgICAgICAgICAgICAgICByZXMucmkubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5yaS5tdWx0KFIscmVzLnJpKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBNYWtlIHJlbGF0aXZlIHRvIGJvZGllc1xuICAgICAgICAgICAgICAgICAgICByZXMucmkudmFkZCh4aSwgcmVzLnJpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnJpLnZzdWIoYmkucG9zaXRpb24sIHJlcy5yaSk7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5yai52YWRkKHhqLCByZXMucmopO1xuICAgICAgICAgICAgICAgICAgICByZXMucmoudnN1Yihiai5wb3NpdGlvbiwgcmVzLnJqKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHJlcyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRnJpY3Rpb25FcXVhdGlvbnNGcm9tQ29udGFjdChyZXMsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2M3Bvb2wucmVsZWFzZShlZGdlVGFuZ2VudCxlZGdlQ2VudGVyLHIsb3J0aG9nb25hbCxkaXN0KTtcbn07XG5cbnZhciBjb252ZXhfdG9fc3BoZXJlID0gbmV3IFZlYzMoKTtcbnZhciBzcGhlcmVDb252ZXhfZWRnZSA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlQ29udmV4X2VkZ2VVbml0ID0gbmV3IFZlYzMoKTtcbnZhciBzcGhlcmVDb252ZXhfc3BoZXJlVG9Db3JuZXIgPSBuZXcgVmVjMygpO1xudmFyIHNwaGVyZUNvbnZleF93b3JsZENvcm5lciA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlQ29udmV4X3dvcmxkTm9ybWFsID0gbmV3IFZlYzMoKTtcbnZhciBzcGhlcmVDb252ZXhfd29ybGRQb2ludCA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlQ29udmV4X3dvcmxkU3BoZXJlUG9pbnRDbG9zZXN0VG9QbGFuZSA9IG5ldyBWZWMzKCk7XG52YXIgc3BoZXJlQ29udmV4X3BlbmV0cmF0aW9uVmVjID0gbmV3IFZlYzMoKTtcbnZhciBzcGhlcmVDb252ZXhfc3BoZXJlVG9Xb3JsZFBvaW50ID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBAbWV0aG9kIHNwaGVyZUNvbnZleFxuICogQHBhcmFtICB7U2hhcGV9ICAgICAgc2lcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNqXG4gKiBAcGFyYW0gIHtWZWMzfSAgICAgICB4aVxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGpcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHFpXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxalxuICogQHBhcmFtICB7Qm9keX0gICAgICAgYmlcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJqXG4gKi9cbk5hcnJvd3BoYXNlLnByb3RvdHlwZVtTaGFwZS50eXBlcy5TUEhFUkUgfCBTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OXSA9XG5OYXJyb3dwaGFzZS5wcm90b3R5cGUuc3BoZXJlQ29udmV4ID0gZnVuY3Rpb24oc2ksc2oseGkseGoscWkscWosYmksYmope1xuICAgIHZhciB2M3Bvb2wgPSB0aGlzLnYzcG9vbDtcbiAgICB4aS52c3ViKHhqLGNvbnZleF90b19zcGhlcmUpO1xuICAgIHZhciBub3JtYWxzID0gc2ouZmFjZU5vcm1hbHM7XG4gICAgdmFyIGZhY2VzID0gc2ouZmFjZXM7XG4gICAgdmFyIHZlcnRzID0gc2oudmVydGljZXM7XG4gICAgdmFyIFIgPSAgICAgc2kucmFkaXVzO1xuICAgIHZhciBwZW5ldHJhdGluZ19zaWRlcyA9IFtdO1xuXG4gICAgLy8gaWYoY29udmV4X3RvX3NwaGVyZS5ub3JtMigpID4gc2kuYm91bmRpbmdTcGhlcmVSYWRpdXMgKyBzai5ib3VuZGluZ1NwaGVyZVJhZGl1cyl7XG4gICAgLy8gICAgIHJldHVybjtcbiAgICAvLyB9XG5cbiAgICAvLyBDaGVjayBjb3JuZXJzXG4gICAgZm9yKHZhciBpPTA7IGkhPT12ZXJ0cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHZhciB2ID0gdmVydHNbaV07XG5cbiAgICAgICAgLy8gV29ybGQgcG9zaXRpb24gb2YgY29ybmVyXG4gICAgICAgIHZhciB3b3JsZENvcm5lciA9IHNwaGVyZUNvbnZleF93b3JsZENvcm5lcjtcbiAgICAgICAgcWoudm11bHQodix3b3JsZENvcm5lcik7XG4gICAgICAgIHhqLnZhZGQod29ybGRDb3JuZXIsd29ybGRDb3JuZXIpO1xuICAgICAgICB2YXIgc3BoZXJlX3RvX2Nvcm5lciA9IHNwaGVyZUNvbnZleF9zcGhlcmVUb0Nvcm5lcjtcbiAgICAgICAgd29ybGRDb3JuZXIudnN1Yih4aSwgc3BoZXJlX3RvX2Nvcm5lcik7XG4gICAgICAgIGlmKHNwaGVyZV90b19jb3JuZXIubm9ybTIoKSA8IFIgKiBSKXtcbiAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciByID0gdGhpcy5jcmVhdGVDb250YWN0RXF1YXRpb24oYmksYmosc2ksc2opO1xuICAgICAgICAgICAgci5yaS5jb3B5KHNwaGVyZV90b19jb3JuZXIpO1xuICAgICAgICAgICAgci5yaS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIHIubmkuY29weShyLnJpKTtcbiAgICAgICAgICAgIHIucmkubXVsdChSLHIucmkpO1xuICAgICAgICAgICAgd29ybGRDb3JuZXIudnN1Yih4aixyLnJqKTtcblxuICAgICAgICAgICAgLy8gU2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBib2R5LlxuICAgICAgICAgICAgci5yaS52YWRkKHhpLCByLnJpKTtcbiAgICAgICAgICAgIHIucmkudnN1YihiaS5wb3NpdGlvbiwgci5yaSk7XG5cbiAgICAgICAgICAgIC8vIFNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYm9keS5cbiAgICAgICAgICAgIHIucmoudmFkZCh4aiwgci5yaik7XG4gICAgICAgICAgICByLnJqLnZzdWIoYmoucG9zaXRpb24sIHIucmopO1xuXG4gICAgICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHIpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgc2lkZSAocGxhbmUpIGludGVyc2VjdGlvbnNcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICBmb3IodmFyIGk9MCwgbmZhY2VzPWZhY2VzLmxlbmd0aDsgaSE9PW5mYWNlcyAmJiBmb3VuZD09PWZhbHNlOyBpKyspe1xuICAgICAgICB2YXIgbm9ybWFsID0gbm9ybWFsc1tpXTtcbiAgICAgICAgdmFyIGZhY2UgPSBmYWNlc1tpXTtcblxuICAgICAgICAvLyBHZXQgd29ybGQtdHJhbnNmb3JtZWQgbm9ybWFsIG9mIHRoZSBmYWNlXG4gICAgICAgIHZhciB3b3JsZE5vcm1hbCA9IHNwaGVyZUNvbnZleF93b3JsZE5vcm1hbDtcbiAgICAgICAgcWoudm11bHQobm9ybWFsLHdvcmxkTm9ybWFsKTtcblxuICAgICAgICAvLyBHZXQgYSB3b3JsZCB2ZXJ0ZXggZnJvbSB0aGUgZmFjZVxuICAgICAgICB2YXIgd29ybGRQb2ludCA9IHNwaGVyZUNvbnZleF93b3JsZFBvaW50O1xuICAgICAgICBxai52bXVsdCh2ZXJ0c1tmYWNlWzBdXSx3b3JsZFBvaW50KTtcbiAgICAgICAgd29ybGRQb2ludC52YWRkKHhqLHdvcmxkUG9pbnQpO1xuXG4gICAgICAgIC8vIEdldCBhIHBvaW50IG9uIHRoZSBzcGhlcmUsIGNsb3Nlc3QgdG8gdGhlIGZhY2Ugbm9ybWFsXG4gICAgICAgIHZhciB3b3JsZFNwaGVyZVBvaW50Q2xvc2VzdFRvUGxhbmUgPSBzcGhlcmVDb252ZXhfd29ybGRTcGhlcmVQb2ludENsb3Nlc3RUb1BsYW5lO1xuICAgICAgICB3b3JsZE5vcm1hbC5tdWx0KC1SLCB3b3JsZFNwaGVyZVBvaW50Q2xvc2VzdFRvUGxhbmUpO1xuICAgICAgICB4aS52YWRkKHdvcmxkU3BoZXJlUG9pbnRDbG9zZXN0VG9QbGFuZSwgd29ybGRTcGhlcmVQb2ludENsb3Nlc3RUb1BsYW5lKTtcblxuICAgICAgICAvLyBWZWN0b3IgZnJvbSBhIGZhY2UgcG9pbnQgdG8gdGhlIGNsb3Nlc3QgcG9pbnQgb24gdGhlIHNwaGVyZVxuICAgICAgICB2YXIgcGVuZXRyYXRpb25WZWMgPSBzcGhlcmVDb252ZXhfcGVuZXRyYXRpb25WZWM7XG4gICAgICAgIHdvcmxkU3BoZXJlUG9pbnRDbG9zZXN0VG9QbGFuZS52c3ViKHdvcmxkUG9pbnQscGVuZXRyYXRpb25WZWMpO1xuXG4gICAgICAgIC8vIFRoZSBwZW5ldHJhdGlvbi4gTmVnYXRpdmUgdmFsdWUgbWVhbnMgb3ZlcmxhcC5cbiAgICAgICAgdmFyIHBlbmV0cmF0aW9uID0gcGVuZXRyYXRpb25WZWMuZG90KHdvcmxkTm9ybWFsKTtcblxuICAgICAgICB2YXIgd29ybGRQb2ludFRvU3BoZXJlID0gc3BoZXJlQ29udmV4X3NwaGVyZVRvV29ybGRQb2ludDtcbiAgICAgICAgeGkudnN1Yih3b3JsZFBvaW50LCB3b3JsZFBvaW50VG9TcGhlcmUpO1xuXG4gICAgICAgIGlmKHBlbmV0cmF0aW9uIDwgMCAmJiB3b3JsZFBvaW50VG9TcGhlcmUuZG90KHdvcmxkTm9ybWFsKT4wKXtcbiAgICAgICAgICAgIC8vIEludGVyc2VjdHMgcGxhbmUuIE5vdyBjaGVjayBpZiB0aGUgc3BoZXJlIGlzIGluc2lkZSB0aGUgZmFjZSBwb2x5Z29uXG4gICAgICAgICAgICB2YXIgZmFjZVZlcnRzID0gW107IC8vIEZhY2UgdmVydGljZXMsIGluIHdvcmxkIGNvb3Jkc1xuICAgICAgICAgICAgZm9yKHZhciBqPTAsIE52ZXJ0cz1mYWNlLmxlbmd0aDsgaiE9PU52ZXJ0czsgaisrKXtcbiAgICAgICAgICAgICAgICB2YXIgd29ybGRWZXJ0ZXggPSB2M3Bvb2wuZ2V0KCk7XG4gICAgICAgICAgICAgICAgcWoudm11bHQodmVydHNbZmFjZVtqXV0sIHdvcmxkVmVydGV4KTtcbiAgICAgICAgICAgICAgICB4ai52YWRkKHdvcmxkVmVydGV4LHdvcmxkVmVydGV4KTtcbiAgICAgICAgICAgICAgICBmYWNlVmVydHMucHVzaCh3b3JsZFZlcnRleCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKHBvaW50SW5Qb2x5Z29uKGZhY2VWZXJ0cyx3b3JsZE5vcm1hbCx4aSkpeyAvLyBJcyB0aGUgc3BoZXJlIGNlbnRlciBpbiB0aGUgZmFjZSBwb2x5Z29uP1xuICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuY3JlYXRlQ29udGFjdEVxdWF0aW9uKGJpLGJqLHNpLHNqKTtcblxuICAgICAgICAgICAgICAgIHdvcmxkTm9ybWFsLm11bHQoLVIsIHIucmkpOyAvLyBDb250YWN0IG9mZnNldCwgZnJvbSBzcGhlcmUgY2VudGVyIHRvIGNvbnRhY3RcbiAgICAgICAgICAgICAgICB3b3JsZE5vcm1hbC5uZWdhdGUoci5uaSk7IC8vIE5vcm1hbCBwb2ludGluZyBvdXQgb2Ygc3BoZXJlXG5cbiAgICAgICAgICAgICAgICB2YXIgcGVuZXRyYXRpb25WZWMyID0gdjNwb29sLmdldCgpO1xuICAgICAgICAgICAgICAgIHdvcmxkTm9ybWFsLm11bHQoLXBlbmV0cmF0aW9uLCBwZW5ldHJhdGlvblZlYzIpO1xuICAgICAgICAgICAgICAgIHZhciBwZW5ldHJhdGlvblNwaGVyZVBvaW50ID0gdjNwb29sLmdldCgpO1xuICAgICAgICAgICAgICAgIHdvcmxkTm9ybWFsLm11bHQoLVIsIHBlbmV0cmF0aW9uU3BoZXJlUG9pbnQpO1xuXG4gICAgICAgICAgICAgICAgLy94aS52c3ViKHhqKS52YWRkKHBlbmV0cmF0aW9uU3BoZXJlUG9pbnQpLnZhZGQocGVuZXRyYXRpb25WZWMyICwgci5yaik7XG4gICAgICAgICAgICAgICAgeGkudnN1Yih4aixyLnJqKTtcbiAgICAgICAgICAgICAgICByLnJqLnZhZGQocGVuZXRyYXRpb25TcGhlcmVQb2ludCxyLnJqKTtcbiAgICAgICAgICAgICAgICByLnJqLnZhZGQocGVuZXRyYXRpb25WZWMyICwgci5yaik7XG5cbiAgICAgICAgICAgICAgICAvLyBTaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJvZHkuXG4gICAgICAgICAgICAgICAgci5yai52YWRkKHhqLCByLnJqKTtcbiAgICAgICAgICAgICAgICByLnJqLnZzdWIoYmoucG9zaXRpb24sIHIucmopO1xuXG4gICAgICAgICAgICAgICAgLy8gU2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBib2R5LlxuICAgICAgICAgICAgICAgIHIucmkudmFkZCh4aSwgci5yaSk7XG4gICAgICAgICAgICAgICAgci5yaS52c3ViKGJpLnBvc2l0aW9uLCByLnJpKTtcblxuICAgICAgICAgICAgICAgIHYzcG9vbC5yZWxlYXNlKHBlbmV0cmF0aW9uVmVjMik7XG4gICAgICAgICAgICAgICAgdjNwb29sLnJlbGVhc2UocGVuZXRyYXRpb25TcGhlcmVQb2ludCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnJlc3VsdC5wdXNoKHIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRnJpY3Rpb25FcXVhdGlvbnNGcm9tQ29udGFjdChyLCB0aGlzLmZyaWN0aW9uUmVzdWx0KTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbGVhc2Ugd29ybGQgdmVydGljZXNcbiAgICAgICAgICAgICAgICBmb3IodmFyIGo9MCwgTmZhY2V2ZXJ0cz1mYWNlVmVydHMubGVuZ3RoOyBqIT09TmZhY2V2ZXJ0czsgaisrKXtcbiAgICAgICAgICAgICAgICAgICAgdjNwb29sLnJlbGVhc2UoZmFjZVZlcnRzW2pdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIFdlIG9ubHkgZXhwZWN0ICpvbmUqIGZhY2UgY29udGFjdFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBFZGdlP1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaj0wOyBqIT09ZmFjZS5sZW5ndGg7IGorKyl7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHR3byB3b3JsZCB0cmFuc2Zvcm1lZCB2ZXJ0aWNlc1xuICAgICAgICAgICAgICAgICAgICB2YXIgdjEgPSB2M3Bvb2wuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB2MiA9IHYzcG9vbC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgcWoudm11bHQodmVydHNbZmFjZVsoaisxKSVmYWNlLmxlbmd0aF1dLCB2MSk7XG4gICAgICAgICAgICAgICAgICAgIHFqLnZtdWx0KHZlcnRzW2ZhY2VbKGorMiklZmFjZS5sZW5ndGhdXSwgdjIpO1xuICAgICAgICAgICAgICAgICAgICB4ai52YWRkKHYxLCB2MSk7XG4gICAgICAgICAgICAgICAgICAgIHhqLnZhZGQodjIsIHYyKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgZWRnZSB2ZWN0b3JcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVkZ2UgPSBzcGhlcmVDb252ZXhfZWRnZTtcbiAgICAgICAgICAgICAgICAgICAgdjIudnN1Yih2MSxlZGdlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIHNhbWUgdmVjdG9yLCBidXQgbm9ybWFsaXplZFxuICAgICAgICAgICAgICAgICAgICB2YXIgZWRnZVVuaXQgPSBzcGhlcmVDb252ZXhfZWRnZVVuaXQ7XG4gICAgICAgICAgICAgICAgICAgIGVkZ2UudW5pdChlZGdlVW5pdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcCBpcyB4aSBwcm9qZWN0ZWQgb250byB0aGUgZWRnZVxuICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHYzcG9vbC5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHYxX3RvX3hpID0gdjNwb29sLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICB4aS52c3ViKHYxLCB2MV90b194aSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkb3QgPSB2MV90b194aS5kb3QoZWRnZVVuaXQpO1xuICAgICAgICAgICAgICAgICAgICBlZGdlVW5pdC5tdWx0KGRvdCwgcCk7XG4gICAgICAgICAgICAgICAgICAgIHAudmFkZCh2MSwgcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ29tcHV0ZSBhIHZlY3RvciBmcm9tIHAgdG8gdGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlXG4gICAgICAgICAgICAgICAgICAgIHZhciB4aV90b19wID0gdjNwb29sLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICBwLnZzdWIoeGksIHhpX3RvX3ApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbGxpc2lvbiBpZiB0aGUgZWRnZS1zcGhlcmUgZGlzdGFuY2UgaXMgbGVzcyB0aGFuIHRoZSByYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgLy8gQU5EIGlmIHAgaXMgaW4gYmV0d2VlbiB2MSBhbmQgdjJcbiAgICAgICAgICAgICAgICAgICAgaWYoZG90ID4gMCAmJiBkb3QqZG90PGVkZ2Uubm9ybTIoKSAmJiB4aV90b19wLm5vcm0yKCkgPCBSKlIpeyAvLyBDb2xsaXNpb24gaWYgdGhlIGVkZ2Utc3BoZXJlIGRpc3RhbmNlIGlzIGxlc3MgdGhhbiB0aGUgcmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBFZGdlIGNvbnRhY3QhXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuY3JlYXRlQ29udGFjdEVxdWF0aW9uKGJpLGJqLHNpLHNqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHAudnN1Yih4aixyLnJqKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcC52c3ViKHhpLHIubmkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgci5uaS5ub3JtYWxpemUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgci5uaS5tdWx0KFIsci5yaSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYm9keS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHIucmoudmFkZCh4aiwgci5yaik7XG4gICAgICAgICAgICAgICAgICAgICAgICByLnJqLnZzdWIoYmoucG9zaXRpb24sIHIucmopO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJvZHkuXG4gICAgICAgICAgICAgICAgICAgICAgICByLnJpLnZhZGQoeGksIHIucmkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgci5yaS52c3ViKGJpLnBvc2l0aW9uLCByLnJpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHQucHVzaChyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlRnJpY3Rpb25FcXVhdGlvbnNGcm9tQ29udGFjdChyLCB0aGlzLmZyaWN0aW9uUmVzdWx0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVsZWFzZSB3b3JsZCB2ZXJ0aWNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBqPTAsIE5mYWNldmVydHM9ZmFjZVZlcnRzLmxlbmd0aDsgaiE9PU5mYWNldmVydHM7IGorKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdjNwb29sLnJlbGVhc2UoZmFjZVZlcnRzW2pdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdjNwb29sLnJlbGVhc2UodjEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdjNwb29sLnJlbGVhc2UodjIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdjNwb29sLnJlbGVhc2UocCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2M3Bvb2wucmVsZWFzZSh4aV90b19wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHYzcG9vbC5yZWxlYXNlKHYxX3RvX3hpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdjNwb29sLnJlbGVhc2UodjEpO1xuICAgICAgICAgICAgICAgICAgICB2M3Bvb2wucmVsZWFzZSh2Mik7XG4gICAgICAgICAgICAgICAgICAgIHYzcG9vbC5yZWxlYXNlKHApO1xuICAgICAgICAgICAgICAgICAgICB2M3Bvb2wucmVsZWFzZSh4aV90b19wKTtcbiAgICAgICAgICAgICAgICAgICAgdjNwb29sLnJlbGVhc2UodjFfdG9feGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVsZWFzZSB3b3JsZCB2ZXJ0aWNlc1xuICAgICAgICAgICAgZm9yKHZhciBqPTAsIE5mYWNldmVydHM9ZmFjZVZlcnRzLmxlbmd0aDsgaiE9PU5mYWNldmVydHM7IGorKyl7XG4gICAgICAgICAgICAgICAgdjNwb29sLnJlbGVhc2UoZmFjZVZlcnRzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBwbGFuZUJveF9ub3JtYWwgPSBuZXcgVmVjMygpO1xudmFyIHBsYW5lX3RvX2Nvcm5lciA9IG5ldyBWZWMzKCk7XG5cbi8qKlxuICogQG1ldGhvZCBwbGFuZUJveFxuICogQHBhcmFtICB7QXJyYXl9ICAgICAgcmVzdWx0XG4gKiBAcGFyYW0gIHtTaGFwZX0gICAgICBzaVxuICogQHBhcmFtICB7U2hhcGV9ICAgICAgc2pcbiAqIEBwYXJhbSAge1ZlYzN9ICAgICAgIHhpXG4gKiBAcGFyYW0gIHtWZWMzfSAgICAgICB4alxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gcWlcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHFqXG4gKiBAcGFyYW0gIHtCb2R5fSAgICAgICBiaVxuICogQHBhcmFtICB7Qm9keX0gICAgICAgYmpcbiAqL1xuTmFycm93cGhhc2UucHJvdG90eXBlW1NoYXBlLnR5cGVzLlBMQU5FIHwgU2hhcGUudHlwZXMuQk9YXSA9XG5OYXJyb3dwaGFzZS5wcm90b3R5cGUucGxhbmVCb3ggPSBmdW5jdGlvbihzaSxzaix4aSx4aixxaSxxaixiaSxiail7XG4gICAgc2ouY29udmV4UG9seWhlZHJvblJlcHJlc2VudGF0aW9uLm1hdGVyaWFsID0gc2oubWF0ZXJpYWw7XG4gICAgc2ouY29udmV4UG9seWhlZHJvblJlcHJlc2VudGF0aW9uLmNvbGxpc2lvblJlc3BvbnNlID0gc2ouY29sbGlzaW9uUmVzcG9uc2U7XG4gICAgdGhpcy5wbGFuZUNvbnZleChzaSxzai5jb252ZXhQb2x5aGVkcm9uUmVwcmVzZW50YXRpb24seGkseGoscWkscWosYmksYmopO1xufTtcblxudmFyIHBsYW5lQ29udmV4X3YgPSBuZXcgVmVjMygpO1xudmFyIHBsYW5lQ29udmV4X25vcm1hbCA9IG5ldyBWZWMzKCk7XG52YXIgcGxhbmVDb252ZXhfcmVscG9zID0gbmV3IFZlYzMoKTtcbnZhciBwbGFuZUNvbnZleF9wcm9qZWN0ZWQgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIEBtZXRob2QgcGxhbmVDb252ZXhcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNpXG4gKiBAcGFyYW0gIHtTaGFwZX0gICAgICBzalxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGlcbiAqIEBwYXJhbSAge1ZlYzN9ICAgICAgIHhqXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxaVxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gcWpcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJpXG4gKiBAcGFyYW0gIHtCb2R5fSAgICAgICBialxuICovXG5OYXJyb3dwaGFzZS5wcm90b3R5cGVbU2hhcGUudHlwZXMuUExBTkUgfCBTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OXSA9XG5OYXJyb3dwaGFzZS5wcm90b3R5cGUucGxhbmVDb252ZXggPSBmdW5jdGlvbihcbiAgICBwbGFuZVNoYXBlLFxuICAgIGNvbnZleFNoYXBlLFxuICAgIHBsYW5lUG9zaXRpb24sXG4gICAgY29udmV4UG9zaXRpb24sXG4gICAgcGxhbmVRdWF0LFxuICAgIGNvbnZleFF1YXQsXG4gICAgcGxhbmVCb2R5LFxuICAgIGNvbnZleEJvZHlcbil7XG4gICAgLy8gU2ltcGx5IHJldHVybiB0aGUgcG9pbnRzIGJlaGluZCB0aGUgcGxhbmUuXG4gICAgdmFyIHdvcmxkVmVydGV4ID0gcGxhbmVDb252ZXhfdixcbiAgICAgICAgd29ybGROb3JtYWwgPSBwbGFuZUNvbnZleF9ub3JtYWw7XG4gICAgd29ybGROb3JtYWwuc2V0KDAsMCwxKTtcbiAgICBwbGFuZVF1YXQudm11bHQod29ybGROb3JtYWwsd29ybGROb3JtYWwpOyAvLyBUdXJuIG5vcm1hbCBhY2NvcmRpbmcgdG8gcGxhbmUgb3JpZW50YXRpb25cblxuICAgIHZhciBudW1Db250YWN0cyA9IDA7XG4gICAgdmFyIHJlbHBvcyA9IHBsYW5lQ29udmV4X3JlbHBvcztcbiAgICBmb3IodmFyIGkgPSAwOyBpICE9PSBjb252ZXhTaGFwZS52ZXJ0aWNlcy5sZW5ndGg7IGkrKyl7XG5cbiAgICAgICAgLy8gR2V0IHdvcmxkIGNvbnZleCB2ZXJ0ZXhcbiAgICAgICAgd29ybGRWZXJ0ZXguY29weShjb252ZXhTaGFwZS52ZXJ0aWNlc1tpXSk7XG4gICAgICAgIGNvbnZleFF1YXQudm11bHQod29ybGRWZXJ0ZXgsIHdvcmxkVmVydGV4KTtcbiAgICAgICAgY29udmV4UG9zaXRpb24udmFkZCh3b3JsZFZlcnRleCwgd29ybGRWZXJ0ZXgpO1xuICAgICAgICB3b3JsZFZlcnRleC52c3ViKHBsYW5lUG9zaXRpb24sIHJlbHBvcyk7XG5cbiAgICAgICAgdmFyIGRvdCA9IHdvcmxkTm9ybWFsLmRvdChyZWxwb3MpO1xuICAgICAgICBpZihkb3QgPD0gMC4wKXtcblxuICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmNyZWF0ZUNvbnRhY3RFcXVhdGlvbihwbGFuZUJvZHksIGNvbnZleEJvZHksIHBsYW5lU2hhcGUsIGNvbnZleFNoYXBlKTtcblxuICAgICAgICAgICAgLy8gR2V0IHZlcnRleCBwb3NpdGlvbiBwcm9qZWN0ZWQgb24gcGxhbmVcbiAgICAgICAgICAgIHZhciBwcm9qZWN0ZWQgPSBwbGFuZUNvbnZleF9wcm9qZWN0ZWQ7XG4gICAgICAgICAgICB3b3JsZE5vcm1hbC5tdWx0KHdvcmxkTm9ybWFsLmRvdChyZWxwb3MpLHByb2plY3RlZCk7XG4gICAgICAgICAgICB3b3JsZFZlcnRleC52c3ViKHByb2plY3RlZCwgcHJvamVjdGVkKTtcbiAgICAgICAgICAgIHByb2plY3RlZC52c3ViKHBsYW5lUG9zaXRpb24sIHIucmkpOyAvLyBGcm9tIHBsYW5lIHRvIHZlcnRleCBwcm9qZWN0ZWQgb24gcGxhbmVcblxuICAgICAgICAgICAgci5uaS5jb3B5KHdvcmxkTm9ybWFsKTsgLy8gQ29udGFjdCBub3JtYWwgaXMgdGhlIHBsYW5lIG5vcm1hbCBvdXQgZnJvbSBwbGFuZVxuXG4gICAgICAgICAgICAvLyByaiBpcyBub3cganVzdCB0aGUgdmVjdG9yIGZyb20gdGhlIGNvbnZleCBjZW50ZXIgdG8gdGhlIHZlcnRleFxuICAgICAgICAgICAgd29ybGRWZXJ0ZXgudnN1Yihjb252ZXhQb3NpdGlvbiwgci5yaik7XG5cbiAgICAgICAgICAgIC8vIE1ha2UgaXQgcmVsYXRpdmUgdG8gdGhlIGJvZHlcbiAgICAgICAgICAgIHIucmkudmFkZChwbGFuZVBvc2l0aW9uLCByLnJpKTtcbiAgICAgICAgICAgIHIucmkudnN1YihwbGFuZUJvZHkucG9zaXRpb24sIHIucmkpO1xuICAgICAgICAgICAgci5yai52YWRkKGNvbnZleFBvc2l0aW9uLCByLnJqKTtcbiAgICAgICAgICAgIHIucmoudnN1Yihjb252ZXhCb2R5LnBvc2l0aW9uLCByLnJqKTtcblxuICAgICAgICAgICAgdGhpcy5yZXN1bHQucHVzaChyKTtcbiAgICAgICAgICAgIG51bUNvbnRhY3RzKys7XG4gICAgICAgICAgICBpZighdGhpcy5lbmFibGVGcmljdGlvblJlZHVjdGlvbil7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYodGhpcy5lbmFibGVGcmljdGlvblJlZHVjdGlvbiAmJiBudW1Db250YWN0cyl7XG4gICAgICAgIHRoaXMuY3JlYXRlRnJpY3Rpb25Gcm9tQXZlcmFnZShudW1Db250YWN0cyk7XG4gICAgfVxufTtcblxudmFyIGNvbnZleENvbnZleF9zZXBBeGlzID0gbmV3IFZlYzMoKTtcbnZhciBjb252ZXhDb252ZXhfcSA9IG5ldyBWZWMzKCk7XG5cbi8qKlxuICogQG1ldGhvZCBjb252ZXhDb252ZXhcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNpXG4gKiBAcGFyYW0gIHtTaGFwZX0gICAgICBzalxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGlcbiAqIEBwYXJhbSAge1ZlYzN9ICAgICAgIHhqXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxaVxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gcWpcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJpXG4gKiBAcGFyYW0gIHtCb2R5fSAgICAgICBialxuICovXG5OYXJyb3dwaGFzZS5wcm90b3R5cGVbU2hhcGUudHlwZXMuQ09OVkVYUE9MWUhFRFJPTl0gPVxuTmFycm93cGhhc2UucHJvdG90eXBlLmNvbnZleENvbnZleCA9IGZ1bmN0aW9uKHNpLHNqLHhpLHhqLHFpLHFqLGJpLGJqLHJzaSxyc2osZmFjZUxpc3RBLGZhY2VMaXN0Qil7XG4gICAgdmFyIHNlcEF4aXMgPSBjb252ZXhDb252ZXhfc2VwQXhpcztcblxuICAgIGlmKHhpLmRpc3RhbmNlVG8oeGopID4gc2kuYm91bmRpbmdTcGhlcmVSYWRpdXMgKyBzai5ib3VuZGluZ1NwaGVyZVJhZGl1cyl7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZihzaS5maW5kU2VwYXJhdGluZ0F4aXMoc2oseGkscWkseGoscWosc2VwQXhpcyxmYWNlTGlzdEEsZmFjZUxpc3RCKSl7XG4gICAgICAgIHZhciByZXMgPSBbXTtcbiAgICAgICAgdmFyIHEgPSBjb252ZXhDb252ZXhfcTtcbiAgICAgICAgc2kuY2xpcEFnYWluc3RIdWxsKHhpLHFpLHNqLHhqLHFqLHNlcEF4aXMsLTEwMCwxMDAscmVzKTtcbiAgICAgICAgdmFyIG51bUNvbnRhY3RzID0gMDtcbiAgICAgICAgZm9yKHZhciBqID0gMDsgaiAhPT0gcmVzLmxlbmd0aDsgaisrKXtcbiAgICAgICAgICAgIHZhciByID0gdGhpcy5jcmVhdGVDb250YWN0RXF1YXRpb24oYmksYmosc2ksc2oscnNpLHJzaiksXG4gICAgICAgICAgICAgICAgcmkgPSByLnJpLFxuICAgICAgICAgICAgICAgIHJqID0gci5yajtcbiAgICAgICAgICAgIHNlcEF4aXMubmVnYXRlKHIubmkpO1xuICAgICAgICAgICAgcmVzW2pdLm5vcm1hbC5uZWdhdGUocSk7XG4gICAgICAgICAgICBxLm11bHQocmVzW2pdLmRlcHRoLCBxKTtcbiAgICAgICAgICAgIHJlc1tqXS5wb2ludC52YWRkKHEsIHJpKTtcbiAgICAgICAgICAgIHJqLmNvcHkocmVzW2pdLnBvaW50KTtcblxuICAgICAgICAgICAgLy8gQ29udGFjdCBwb2ludHMgYXJlIGluIHdvcmxkIGNvb3JkaW5hdGVzLiBUcmFuc2Zvcm0gYmFjayB0byByZWxhdGl2ZVxuICAgICAgICAgICAgcmkudnN1Yih4aSxyaSk7XG4gICAgICAgICAgICByai52c3ViKHhqLHJqKTtcblxuICAgICAgICAgICAgLy8gTWFrZSByZWxhdGl2ZSB0byBib2RpZXNcbiAgICAgICAgICAgIHJpLnZhZGQoeGksIHJpKTtcbiAgICAgICAgICAgIHJpLnZzdWIoYmkucG9zaXRpb24sIHJpKTtcbiAgICAgICAgICAgIHJqLnZhZGQoeGosIHJqKTtcbiAgICAgICAgICAgIHJqLnZzdWIoYmoucG9zaXRpb24sIHJqKTtcblxuICAgICAgICAgICAgdGhpcy5yZXN1bHQucHVzaChyKTtcbiAgICAgICAgICAgIG51bUNvbnRhY3RzKys7XG4gICAgICAgICAgICBpZighdGhpcy5lbmFibGVGcmljdGlvblJlZHVjdGlvbil7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKHRoaXMuZW5hYmxlRnJpY3Rpb25SZWR1Y3Rpb24gJiYgbnVtQ29udGFjdHMpe1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkZyb21BdmVyYWdlKG51bUNvbnRhY3RzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblxuLyoqXG4gKiBAbWV0aG9kIGNvbnZleFRyaW1lc2hcbiAqIEBwYXJhbSAge0FycmF5fSAgICAgIHJlc3VsdFxuICogQHBhcmFtICB7U2hhcGV9ICAgICAgc2lcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNqXG4gKiBAcGFyYW0gIHtWZWMzfSAgICAgICB4aVxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGpcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHFpXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxalxuICogQHBhcmFtICB7Qm9keX0gICAgICAgYmlcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJqXG4gKi9cbi8vIE5hcnJvd3BoYXNlLnByb3RvdHlwZVtTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OIHwgU2hhcGUudHlwZXMuVFJJTUVTSF0gPVxuLy8gTmFycm93cGhhc2UucHJvdG90eXBlLmNvbnZleFRyaW1lc2ggPSBmdW5jdGlvbihzaSxzaix4aSx4aixxaSxxaixiaSxiaixyc2kscnNqLGZhY2VMaXN0QSxmYWNlTGlzdEIpe1xuLy8gICAgIHZhciBzZXBBeGlzID0gY29udmV4Q29udmV4X3NlcEF4aXM7XG5cbi8vICAgICBpZih4aS5kaXN0YW5jZVRvKHhqKSA+IHNpLmJvdW5kaW5nU3BoZXJlUmFkaXVzICsgc2ouYm91bmRpbmdTcGhlcmVSYWRpdXMpe1xuLy8gICAgICAgICByZXR1cm47XG4vLyAgICAgfVxuXG4vLyAgICAgLy8gQ29uc3RydWN0IGEgdGVtcCBodWxsIGZvciBlYWNoIHRyaWFuZ2xlXG4vLyAgICAgdmFyIGh1bGxCID0gbmV3IENvbnZleFBvbHloZWRyb24oKTtcblxuLy8gICAgIGh1bGxCLmZhY2VzID0gW1swLDEsMl1dO1xuLy8gICAgIHZhciB2YSA9IG5ldyBWZWMzKCk7XG4vLyAgICAgdmFyIHZiID0gbmV3IFZlYzMoKTtcbi8vICAgICB2YXIgdmMgPSBuZXcgVmVjMygpO1xuLy8gICAgIGh1bGxCLnZlcnRpY2VzID0gW1xuLy8gICAgICAgICB2YSxcbi8vICAgICAgICAgdmIsXG4vLyAgICAgICAgIHZjXG4vLyAgICAgXTtcblxuLy8gICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2ouaW5kaWNlcy5sZW5ndGggLyAzOyBpKyspIHtcblxuLy8gICAgICAgICB2YXIgdHJpYW5nbGVOb3JtYWwgPSBuZXcgVmVjMygpO1xuLy8gICAgICAgICBzai5nZXROb3JtYWwoaSwgdHJpYW5nbGVOb3JtYWwpO1xuLy8gICAgICAgICBodWxsQi5mYWNlTm9ybWFscyA9IFt0cmlhbmdsZU5vcm1hbF07XG5cbi8vICAgICAgICAgc2ouZ2V0VHJpYW5nbGVWZXJ0aWNlcyhpLCB2YSwgdmIsIHZjKTtcblxuLy8gICAgICAgICB2YXIgZCA9IHNpLnRlc3RTZXBBeGlzKHRyaWFuZ2xlTm9ybWFsLCBodWxsQiwgeGksIHFpLCB4aiwgcWopO1xuLy8gICAgICAgICBpZighZCl7XG4vLyAgICAgICAgICAgICB0cmlhbmdsZU5vcm1hbC5zY2FsZSgtMSwgdHJpYW5nbGVOb3JtYWwpO1xuLy8gICAgICAgICAgICAgZCA9IHNpLnRlc3RTZXBBeGlzKHRyaWFuZ2xlTm9ybWFsLCBodWxsQiwgeGksIHFpLCB4aiwgcWopO1xuXG4vLyAgICAgICAgICAgICBpZighZCl7XG4vLyAgICAgICAgICAgICAgICAgY29udGludWU7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cblxuLy8gICAgICAgICB2YXIgcmVzID0gW107XG4vLyAgICAgICAgIHZhciBxID0gY29udmV4Q29udmV4X3E7XG4vLyAgICAgICAgIHNpLmNsaXBBZ2FpbnN0SHVsbCh4aSxxaSxodWxsQix4aixxaix0cmlhbmdsZU5vcm1hbCwtMTAwLDEwMCxyZXMpO1xuLy8gICAgICAgICBmb3IodmFyIGogPSAwOyBqICE9PSByZXMubGVuZ3RoOyBqKyspe1xuLy8gICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmNyZWF0ZUNvbnRhY3RFcXVhdGlvbihiaSxiaixzaSxzaixyc2kscnNqKSxcbi8vICAgICAgICAgICAgICAgICByaSA9IHIucmksXG4vLyAgICAgICAgICAgICAgICAgcmogPSByLnJqO1xuLy8gICAgICAgICAgICAgci5uaS5jb3B5KHRyaWFuZ2xlTm9ybWFsKTtcbi8vICAgICAgICAgICAgIHIubmkubmVnYXRlKHIubmkpO1xuLy8gICAgICAgICAgICAgcmVzW2pdLm5vcm1hbC5uZWdhdGUocSk7XG4vLyAgICAgICAgICAgICBxLm11bHQocmVzW2pdLmRlcHRoLCBxKTtcbi8vICAgICAgICAgICAgIHJlc1tqXS5wb2ludC52YWRkKHEsIHJpKTtcbi8vICAgICAgICAgICAgIHJqLmNvcHkocmVzW2pdLnBvaW50KTtcblxuLy8gICAgICAgICAgICAgLy8gQ29udGFjdCBwb2ludHMgYXJlIGluIHdvcmxkIGNvb3JkaW5hdGVzLiBUcmFuc2Zvcm0gYmFjayB0byByZWxhdGl2ZVxuLy8gICAgICAgICAgICAgcmkudnN1Yih4aSxyaSk7XG4vLyAgICAgICAgICAgICByai52c3ViKHhqLHJqKTtcblxuLy8gICAgICAgICAgICAgLy8gTWFrZSByZWxhdGl2ZSB0byBib2RpZXNcbi8vICAgICAgICAgICAgIHJpLnZhZGQoeGksIHJpKTtcbi8vICAgICAgICAgICAgIHJpLnZzdWIoYmkucG9zaXRpb24sIHJpKTtcbi8vICAgICAgICAgICAgIHJqLnZhZGQoeGosIHJqKTtcbi8vICAgICAgICAgICAgIHJqLnZzdWIoYmoucG9zaXRpb24sIHJqKTtcblxuLy8gICAgICAgICAgICAgcmVzdWx0LnB1c2gocik7XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyB9O1xuXG52YXIgcGFydGljbGVQbGFuZV9ub3JtYWwgPSBuZXcgVmVjMygpO1xudmFyIHBhcnRpY2xlUGxhbmVfcmVscG9zID0gbmV3IFZlYzMoKTtcbnZhciBwYXJ0aWNsZVBsYW5lX3Byb2plY3RlZCA9IG5ldyBWZWMzKCk7XG5cbi8qKlxuICogQG1ldGhvZCBwYXJ0aWNsZVBsYW5lXG4gKiBAcGFyYW0gIHtBcnJheX0gICAgICByZXN1bHRcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNpXG4gKiBAcGFyYW0gIHtTaGFwZX0gICAgICBzalxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGlcbiAqIEBwYXJhbSAge1ZlYzN9ICAgICAgIHhqXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxaVxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gcWpcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJpXG4gKiBAcGFyYW0gIHtCb2R5fSAgICAgICBialxuICovXG5OYXJyb3dwaGFzZS5wcm90b3R5cGVbU2hhcGUudHlwZXMuUExBTkUgfCBTaGFwZS50eXBlcy5QQVJUSUNMRV0gPVxuTmFycm93cGhhc2UucHJvdG90eXBlLnBsYW5lUGFydGljbGUgPSBmdW5jdGlvbihzaixzaSx4aix4aSxxaixxaSxiaixiaSl7XG4gICAgdmFyIG5vcm1hbCA9IHBhcnRpY2xlUGxhbmVfbm9ybWFsO1xuICAgIG5vcm1hbC5zZXQoMCwwLDEpO1xuICAgIGJqLnF1YXRlcm5pb24udm11bHQobm9ybWFsLG5vcm1hbCk7IC8vIFR1cm4gbm9ybWFsIGFjY29yZGluZyB0byBwbGFuZSBvcmllbnRhdGlvblxuICAgIHZhciByZWxwb3MgPSBwYXJ0aWNsZVBsYW5lX3JlbHBvcztcbiAgICB4aS52c3ViKGJqLnBvc2l0aW9uLHJlbHBvcyk7XG4gICAgdmFyIGRvdCA9IG5vcm1hbC5kb3QocmVscG9zKTtcbiAgICBpZihkb3QgPD0gMC4wKXtcbiAgICAgICAgdmFyIHIgPSB0aGlzLmNyZWF0ZUNvbnRhY3RFcXVhdGlvbihiaSxiaixzaSxzaik7XG4gICAgICAgIHIubmkuY29weShub3JtYWwpOyAvLyBDb250YWN0IG5vcm1hbCBpcyB0aGUgcGxhbmUgbm9ybWFsXG4gICAgICAgIHIubmkubmVnYXRlKHIubmkpO1xuICAgICAgICByLnJpLnNldCgwLDAsMCk7IC8vIENlbnRlciBvZiBwYXJ0aWNsZVxuXG4gICAgICAgIC8vIEdldCBwYXJ0aWNsZSBwb3NpdGlvbiBwcm9qZWN0ZWQgb24gcGxhbmVcbiAgICAgICAgdmFyIHByb2plY3RlZCA9IHBhcnRpY2xlUGxhbmVfcHJvamVjdGVkO1xuICAgICAgICBub3JtYWwubXVsdChub3JtYWwuZG90KHhpKSxwcm9qZWN0ZWQpO1xuICAgICAgICB4aS52c3ViKHByb2plY3RlZCxwcm9qZWN0ZWQpO1xuICAgICAgICAvL3Byb2plY3RlZC52YWRkKGJqLnBvc2l0aW9uLHByb2plY3RlZCk7XG5cbiAgICAgICAgLy8gcmogaXMgbm93IHRoZSBwcm9qZWN0ZWQgd29ybGQgcG9zaXRpb24gbWludXMgcGxhbmUgcG9zaXRpb25cbiAgICAgICAgci5yai5jb3B5KHByb2plY3RlZCk7XG4gICAgICAgIHRoaXMucmVzdWx0LnB1c2gocik7XG4gICAgICAgIHRoaXMuY3JlYXRlRnJpY3Rpb25FcXVhdGlvbnNGcm9tQ29udGFjdChyLCB0aGlzLmZyaWN0aW9uUmVzdWx0KTtcbiAgICB9XG59O1xuXG52YXIgcGFydGljbGVTcGhlcmVfbm9ybWFsID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBAbWV0aG9kIHBhcnRpY2xlU3BoZXJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICAgICByZXN1bHRcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNpXG4gKiBAcGFyYW0gIHtTaGFwZX0gICAgICBzalxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGlcbiAqIEBwYXJhbSAge1ZlYzN9ICAgICAgIHhqXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxaVxuICogQHBhcmFtICB7UXVhdGVybmlvbn0gcWpcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJpXG4gKiBAcGFyYW0gIHtCb2R5fSAgICAgICBialxuICovXG5OYXJyb3dwaGFzZS5wcm90b3R5cGVbU2hhcGUudHlwZXMuUEFSVElDTEUgfCBTaGFwZS50eXBlcy5TUEhFUkVdID1cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5zcGhlcmVQYXJ0aWNsZSA9IGZ1bmN0aW9uKHNqLHNpLHhqLHhpLHFqLHFpLGJqLGJpKXtcbiAgICAvLyBUaGUgbm9ybWFsIGlzIHRoZSB1bml0IHZlY3RvciBmcm9tIHNwaGVyZSBjZW50ZXIgdG8gcGFydGljbGUgY2VudGVyXG4gICAgdmFyIG5vcm1hbCA9IHBhcnRpY2xlU3BoZXJlX25vcm1hbDtcbiAgICBub3JtYWwuc2V0KDAsMCwxKTtcbiAgICB4aS52c3ViKHhqLG5vcm1hbCk7XG4gICAgdmFyIGxlbmd0aFNxdWFyZWQgPSBub3JtYWwubm9ybTIoKTtcblxuICAgIGlmKGxlbmd0aFNxdWFyZWQgPD0gc2oucmFkaXVzICogc2oucmFkaXVzKXtcbiAgICAgICAgdmFyIHIgPSB0aGlzLmNyZWF0ZUNvbnRhY3RFcXVhdGlvbihiaSxiaixzaSxzaik7XG4gICAgICAgIG5vcm1hbC5ub3JtYWxpemUoKTtcbiAgICAgICAgci5yai5jb3B5KG5vcm1hbCk7XG4gICAgICAgIHIucmoubXVsdChzai5yYWRpdXMsci5yaik7XG4gICAgICAgIHIubmkuY29weShub3JtYWwpOyAvLyBDb250YWN0IG5vcm1hbFxuICAgICAgICByLm5pLm5lZ2F0ZShyLm5pKTtcbiAgICAgICAgci5yaS5zZXQoMCwwLDApOyAvLyBDZW50ZXIgb2YgcGFydGljbGVcbiAgICAgICAgdGhpcy5yZXN1bHQucHVzaChyKTtcbiAgICAgICAgdGhpcy5jcmVhdGVGcmljdGlvbkVxdWF0aW9uc0Zyb21Db250YWN0KHIsIHRoaXMuZnJpY3Rpb25SZXN1bHQpO1xuICAgIH1cbn07XG5cbi8vIFdJUFxudmFyIGNxaiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG52YXIgY29udmV4UGFydGljbGVfbG9jYWwgPSBuZXcgVmVjMygpO1xudmFyIGNvbnZleFBhcnRpY2xlX25vcm1hbCA9IG5ldyBWZWMzKCk7XG52YXIgY29udmV4UGFydGljbGVfcGVuZXRyYXRlZEZhY2VOb3JtYWwgPSBuZXcgVmVjMygpO1xudmFyIGNvbnZleFBhcnRpY2xlX3ZlcnRleFRvUGFydGljbGUgPSBuZXcgVmVjMygpO1xudmFyIGNvbnZleFBhcnRpY2xlX3dvcmxkUGVuZXRyYXRpb25WZWMgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIEBtZXRob2QgY29udmV4UGFydGljbGVcbiAqIEBwYXJhbSAge0FycmF5fSAgICAgIHJlc3VsdFxuICogQHBhcmFtICB7U2hhcGV9ICAgICAgc2lcbiAqIEBwYXJhbSAge1NoYXBlfSAgICAgIHNqXG4gKiBAcGFyYW0gIHtWZWMzfSAgICAgICB4aVxuICogQHBhcmFtICB7VmVjM30gICAgICAgeGpcbiAqIEBwYXJhbSAge1F1YXRlcm5pb259IHFpXG4gKiBAcGFyYW0gIHtRdWF0ZXJuaW9ufSBxalxuICogQHBhcmFtICB7Qm9keX0gICAgICAgYmlcbiAqIEBwYXJhbSAge0JvZHl9ICAgICAgIGJqXG4gKi9cbk5hcnJvd3BoYXNlLnByb3RvdHlwZVtTaGFwZS50eXBlcy5QQVJUSUNMRSB8IFNoYXBlLnR5cGVzLkNPTlZFWFBPTFlIRURST05dID1cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5jb252ZXhQYXJ0aWNsZSA9IGZ1bmN0aW9uKHNqLHNpLHhqLHhpLHFqLHFpLGJqLGJpKXtcbiAgICB2YXIgcGVuZXRyYXRlZEZhY2VJbmRleCA9IC0xO1xuICAgIHZhciBwZW5ldHJhdGVkRmFjZU5vcm1hbCA9IGNvbnZleFBhcnRpY2xlX3BlbmV0cmF0ZWRGYWNlTm9ybWFsO1xuICAgIHZhciB3b3JsZFBlbmV0cmF0aW9uVmVjID0gY29udmV4UGFydGljbGVfd29ybGRQZW5ldHJhdGlvblZlYztcbiAgICB2YXIgbWluUGVuZXRyYXRpb24gPSBudWxsO1xuICAgIHZhciBudW1EZXRlY3RlZEZhY2VzID0gMDtcblxuICAgIC8vIENvbnZlcnQgcGFydGljbGUgcG9zaXRpb24geGkgdG8gbG9jYWwgY29vcmRzIGluIHRoZSBjb252ZXhcbiAgICB2YXIgbG9jYWwgPSBjb252ZXhQYXJ0aWNsZV9sb2NhbDtcbiAgICBsb2NhbC5jb3B5KHhpKTtcbiAgICBsb2NhbC52c3ViKHhqLGxvY2FsKTsgLy8gQ29udmVydCBwb3NpdGlvbiB0byByZWxhdGl2ZSB0aGUgY29udmV4IG9yaWdpblxuICAgIHFqLmNvbmp1Z2F0ZShjcWopO1xuICAgIGNxai52bXVsdChsb2NhbCxsb2NhbCk7XG5cbiAgICBpZihzai5wb2ludElzSW5zaWRlKGxvY2FsKSl7XG5cbiAgICAgICAgaWYoc2oud29ybGRWZXJ0aWNlc05lZWRzVXBkYXRlKXtcbiAgICAgICAgICAgIHNqLmNvbXB1dGVXb3JsZFZlcnRpY2VzKHhqLHFqKTtcbiAgICAgICAgfVxuICAgICAgICBpZihzai53b3JsZEZhY2VOb3JtYWxzTmVlZHNVcGRhdGUpe1xuICAgICAgICAgICAgc2ouY29tcHV0ZVdvcmxkRmFjZU5vcm1hbHMocWopO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRm9yIGVhY2ggd29ybGQgcG9seWdvbiBpbiB0aGUgcG9seWhlZHJhXG4gICAgICAgIGZvcih2YXIgaT0wLG5mYWNlcz1zai5mYWNlcy5sZW5ndGg7IGkhPT1uZmFjZXM7IGkrKyl7XG5cbiAgICAgICAgICAgIC8vIENvbnN0cnVjdCB3b3JsZCBmYWNlIHZlcnRpY2VzXG4gICAgICAgICAgICB2YXIgdmVydHMgPSBbIHNqLndvcmxkVmVydGljZXNbIHNqLmZhY2VzW2ldWzBdIF0gXTtcbiAgICAgICAgICAgIHZhciBub3JtYWwgPSBzai53b3JsZEZhY2VOb3JtYWxzW2ldO1xuXG4gICAgICAgICAgICAvLyBDaGVjayBob3cgbXVjaCB0aGUgcGFydGljbGUgcGVuZXRyYXRlcyB0aGUgcG9seWdvbiBwbGFuZS5cbiAgICAgICAgICAgIHhpLnZzdWIodmVydHNbMF0sY29udmV4UGFydGljbGVfdmVydGV4VG9QYXJ0aWNsZSk7XG4gICAgICAgICAgICB2YXIgcGVuZXRyYXRpb24gPSAtbm9ybWFsLmRvdChjb252ZXhQYXJ0aWNsZV92ZXJ0ZXhUb1BhcnRpY2xlKTtcbiAgICAgICAgICAgIGlmKG1pblBlbmV0cmF0aW9uPT09bnVsbCB8fCBNYXRoLmFicyhwZW5ldHJhdGlvbik8TWF0aC5hYnMobWluUGVuZXRyYXRpb24pKXtcbiAgICAgICAgICAgICAgICBtaW5QZW5ldHJhdGlvbiA9IHBlbmV0cmF0aW9uO1xuICAgICAgICAgICAgICAgIHBlbmV0cmF0ZWRGYWNlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIHBlbmV0cmF0ZWRGYWNlTm9ybWFsLmNvcHkobm9ybWFsKTtcbiAgICAgICAgICAgICAgICBudW1EZXRlY3RlZEZhY2VzKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZihwZW5ldHJhdGVkRmFjZUluZGV4IT09LTEpe1xuICAgICAgICAgICAgLy8gU2V0dXAgY29udGFjdFxuICAgICAgICAgICAgdmFyIHIgPSB0aGlzLmNyZWF0ZUNvbnRhY3RFcXVhdGlvbihiaSxiaixzaSxzaik7XG4gICAgICAgICAgICBwZW5ldHJhdGVkRmFjZU5vcm1hbC5tdWx0KG1pblBlbmV0cmF0aW9uLCB3b3JsZFBlbmV0cmF0aW9uVmVjKTtcblxuICAgICAgICAgICAgLy8gcmogaXMgdGhlIHBhcnRpY2xlIHBvc2l0aW9uIHByb2plY3RlZCB0byB0aGUgZmFjZVxuICAgICAgICAgICAgd29ybGRQZW5ldHJhdGlvblZlYy52YWRkKHhpLHdvcmxkUGVuZXRyYXRpb25WZWMpO1xuICAgICAgICAgICAgd29ybGRQZW5ldHJhdGlvblZlYy52c3ViKHhqLHdvcmxkUGVuZXRyYXRpb25WZWMpO1xuICAgICAgICAgICAgci5yai5jb3B5KHdvcmxkUGVuZXRyYXRpb25WZWMpO1xuICAgICAgICAgICAgLy92YXIgcHJvamVjdGVkVG9GYWNlID0geGkudnN1Yih4aikudmFkZCh3b3JsZFBlbmV0cmF0aW9uVmVjKTtcbiAgICAgICAgICAgIC8vcHJvamVjdGVkVG9GYWNlLmNvcHkoci5yaik7XG5cbiAgICAgICAgICAgIC8vcWoudm11bHQoci5yaixyLnJqKTtcbiAgICAgICAgICAgIHBlbmV0cmF0ZWRGYWNlTm9ybWFsLm5lZ2F0ZSggci5uaSApOyAvLyBDb250YWN0IG5vcm1hbFxuICAgICAgICAgICAgci5yaS5zZXQoMCwwLDApOyAvLyBDZW50ZXIgb2YgcGFydGljbGVcblxuICAgICAgICAgICAgdmFyIHJpID0gci5yaSxcbiAgICAgICAgICAgICAgICByaiA9IHIucmo7XG5cbiAgICAgICAgICAgIC8vIE1ha2UgcmVsYXRpdmUgdG8gYm9kaWVzXG4gICAgICAgICAgICByaS52YWRkKHhpLCByaSk7XG4gICAgICAgICAgICByaS52c3ViKGJpLnBvc2l0aW9uLCByaSk7XG4gICAgICAgICAgICByai52YWRkKHhqLCByaik7XG4gICAgICAgICAgICByai52c3ViKGJqLnBvc2l0aW9uLCByaik7XG5cbiAgICAgICAgICAgIHRoaXMucmVzdWx0LnB1c2gocik7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUZyaWN0aW9uRXF1YXRpb25zRnJvbUNvbnRhY3QociwgdGhpcy5mcmljdGlvblJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJQb2ludCBmb3VuZCBpbnNpZGUgY29udmV4LCBidXQgZGlkIG5vdCBmaW5kIHBlbmV0cmF0aW5nIGZhY2UhXCIpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuTmFycm93cGhhc2UucHJvdG90eXBlW1NoYXBlLnR5cGVzLkJPWCB8IFNoYXBlLnR5cGVzLkhFSUdIVEZJRUxEXSA9XG5OYXJyb3dwaGFzZS5wcm90b3R5cGUuYm94SGVpZ2h0ZmllbGQgPSBmdW5jdGlvbiAoc2ksc2oseGkseGoscWkscWosYmksYmope1xuICAgIHNpLmNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbi5tYXRlcmlhbCA9IHNpLm1hdGVyaWFsO1xuICAgIHNpLmNvbnZleFBvbHloZWRyb25SZXByZXNlbnRhdGlvbi5jb2xsaXNpb25SZXNwb25zZSA9IHNpLmNvbGxpc2lvblJlc3BvbnNlO1xuICAgIHRoaXMuY29udmV4SGVpZ2h0ZmllbGQoc2kuY29udmV4UG9seWhlZHJvblJlcHJlc2VudGF0aW9uLHNqLHhpLHhqLHFpLHFqLGJpLGJqKTtcbn07XG5cbnZhciBjb252ZXhIZWlnaHRmaWVsZF90bXAxID0gbmV3IFZlYzMoKTtcbnZhciBjb252ZXhIZWlnaHRmaWVsZF90bXAyID0gbmV3IFZlYzMoKTtcbnZhciBjb252ZXhIZWlnaHRmaWVsZF9mYWNlTGlzdCA9IFswXTtcblxuLyoqXG4gKiBAbWV0aG9kIGNvbnZleEhlaWdodGZpZWxkXG4gKi9cbk5hcnJvd3BoYXNlLnByb3RvdHlwZVtTaGFwZS50eXBlcy5DT05WRVhQT0xZSEVEUk9OIHwgU2hhcGUudHlwZXMuSEVJR0hURklFTERdID1cbk5hcnJvd3BoYXNlLnByb3RvdHlwZS5jb252ZXhIZWlnaHRmaWVsZCA9IGZ1bmN0aW9uIChcbiAgICBjb252ZXhTaGFwZSxcbiAgICBoZlNoYXBlLFxuICAgIGNvbnZleFBvcyxcbiAgICBoZlBvcyxcbiAgICBjb252ZXhRdWF0LFxuICAgIGhmUXVhdCxcbiAgICBjb252ZXhCb2R5LFxuICAgIGhmQm9keVxuKXtcbiAgICB2YXIgZGF0YSA9IGhmU2hhcGUuZGF0YSxcbiAgICAgICAgdyA9IGhmU2hhcGUuZWxlbWVudFNpemUsXG4gICAgICAgIHJhZGl1cyA9IGNvbnZleFNoYXBlLmJvdW5kaW5nU3BoZXJlUmFkaXVzLFxuICAgICAgICB3b3JsZFBpbGxhck9mZnNldCA9IGNvbnZleEhlaWdodGZpZWxkX3RtcDIsXG4gICAgICAgIGZhY2VMaXN0ID0gY29udmV4SGVpZ2h0ZmllbGRfZmFjZUxpc3Q7XG5cbiAgICAvLyBHZXQgc3BoZXJlIHBvc2l0aW9uIHRvIGhlaWdodGZpZWxkIGxvY2FsIVxuICAgIHZhciBsb2NhbENvbnZleFBvcyA9IGNvbnZleEhlaWdodGZpZWxkX3RtcDE7XG4gICAgVHJhbnNmb3JtLnBvaW50VG9Mb2NhbEZyYW1lKGhmUG9zLCBoZlF1YXQsIGNvbnZleFBvcywgbG9jYWxDb252ZXhQb3MpO1xuXG4gICAgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZGF0YSBwb2ludHMgdG8gdGVzdCBhZ2FpbnN0XG4gICAgdmFyIGlNaW5YID0gTWF0aC5mbG9vcigobG9jYWxDb252ZXhQb3MueCAtIHJhZGl1cykgLyB3KSAtIDEsXG4gICAgICAgIGlNYXhYID0gTWF0aC5jZWlsKChsb2NhbENvbnZleFBvcy54ICsgcmFkaXVzKSAvIHcpICsgMSxcbiAgICAgICAgaU1pblkgPSBNYXRoLmZsb29yKChsb2NhbENvbnZleFBvcy55IC0gcmFkaXVzKSAvIHcpIC0gMSxcbiAgICAgICAgaU1heFkgPSBNYXRoLmNlaWwoKGxvY2FsQ29udmV4UG9zLnkgKyByYWRpdXMpIC8gdykgKyAxO1xuXG4gICAgLy8gQmFpbCBvdXQgaWYgd2UgYXJlIG91dCBvZiB0aGUgdGVycmFpblxuICAgIGlmKGlNYXhYIDwgMCB8fCBpTWF4WSA8IDAgfHwgaU1pblggPiBkYXRhLmxlbmd0aCB8fCBpTWluWSA+IGRhdGFbMF0ubGVuZ3RoKXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENsYW1wIGluZGV4IHRvIGVkZ2VzXG4gICAgaWYoaU1pblggPCAwKXsgaU1pblggPSAwOyB9XG4gICAgaWYoaU1heFggPCAwKXsgaU1heFggPSAwOyB9XG4gICAgaWYoaU1pblkgPCAwKXsgaU1pblkgPSAwOyB9XG4gICAgaWYoaU1heFkgPCAwKXsgaU1heFkgPSAwOyB9XG4gICAgaWYoaU1pblggPj0gZGF0YS5sZW5ndGgpeyBpTWluWCA9IGRhdGEubGVuZ3RoIC0gMTsgfVxuICAgIGlmKGlNYXhYID49IGRhdGEubGVuZ3RoKXsgaU1heFggPSBkYXRhLmxlbmd0aCAtIDE7IH1cbiAgICBpZihpTWF4WSA+PSBkYXRhWzBdLmxlbmd0aCl7IGlNYXhZID0gZGF0YVswXS5sZW5ndGggLSAxOyB9XG4gICAgaWYoaU1pblkgPj0gZGF0YVswXS5sZW5ndGgpeyBpTWluWSA9IGRhdGFbMF0ubGVuZ3RoIC0gMTsgfVxuXG4gICAgdmFyIG1pbk1heCA9IFtdO1xuICAgIGhmU2hhcGUuZ2V0UmVjdE1pbk1heChpTWluWCwgaU1pblksIGlNYXhYLCBpTWF4WSwgbWluTWF4KTtcbiAgICB2YXIgbWluID0gbWluTWF4WzBdO1xuICAgIHZhciBtYXggPSBtaW5NYXhbMV07XG5cbiAgICAvLyBCYWlsIG91dCBpZiB3ZSdyZSBjYW50IHRvdWNoIHRoZSBib3VuZGluZyBoZWlnaHQgYm94XG4gICAgaWYobG9jYWxDb252ZXhQb3MueiAtIHJhZGl1cyA+IG1heCB8fCBsb2NhbENvbnZleFBvcy56ICsgcmFkaXVzIDwgbWluKXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvcih2YXIgaSA9IGlNaW5YOyBpIDwgaU1heFg7IGkrKyl7XG4gICAgICAgIGZvcih2YXIgaiA9IGlNaW5ZOyBqIDwgaU1heFk7IGorKyl7XG5cbiAgICAgICAgICAgIC8vIExvd2VyIHRyaWFuZ2xlXG4gICAgICAgICAgICBoZlNoYXBlLmdldENvbnZleFRyaWFuZ2xlUGlsbGFyKGksIGosIGZhbHNlKTtcbiAgICAgICAgICAgIFRyYW5zZm9ybS5wb2ludFRvV29ybGRGcmFtZShoZlBvcywgaGZRdWF0LCBoZlNoYXBlLnBpbGxhck9mZnNldCwgd29ybGRQaWxsYXJPZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGNvbnZleFBvcy5kaXN0YW5jZVRvKHdvcmxkUGlsbGFyT2Zmc2V0KSA8IGhmU2hhcGUucGlsbGFyQ29udmV4LmJvdW5kaW5nU3BoZXJlUmFkaXVzICsgY29udmV4U2hhcGUuYm91bmRpbmdTcGhlcmVSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZleENvbnZleChjb252ZXhTaGFwZSwgaGZTaGFwZS5waWxsYXJDb252ZXgsIGNvbnZleFBvcywgd29ybGRQaWxsYXJPZmZzZXQsIGNvbnZleFF1YXQsIGhmUXVhdCwgY29udmV4Qm9keSwgaGZCb2R5LCBudWxsLCBudWxsLCBmYWNlTGlzdCwgbnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwcGVyIHRyaWFuZ2xlXG4gICAgICAgICAgICBoZlNoYXBlLmdldENvbnZleFRyaWFuZ2xlUGlsbGFyKGksIGosIHRydWUpO1xuICAgICAgICAgICAgVHJhbnNmb3JtLnBvaW50VG9Xb3JsZEZyYW1lKGhmUG9zLCBoZlF1YXQsIGhmU2hhcGUucGlsbGFyT2Zmc2V0LCB3b3JsZFBpbGxhck9mZnNldCk7XG4gICAgICAgICAgICBpZiAoY29udmV4UG9zLmRpc3RhbmNlVG8od29ybGRQaWxsYXJPZmZzZXQpIDwgaGZTaGFwZS5waWxsYXJDb252ZXguYm91bmRpbmdTcGhlcmVSYWRpdXMgKyBjb252ZXhTaGFwZS5ib3VuZGluZ1NwaGVyZVJhZGl1cykge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udmV4Q29udmV4KGNvbnZleFNoYXBlLCBoZlNoYXBlLnBpbGxhckNvbnZleCwgY29udmV4UG9zLCB3b3JsZFBpbGxhck9mZnNldCwgY29udmV4UXVhdCwgaGZRdWF0LCBjb252ZXhCb2R5LCBoZkJvZHksIG51bGwsIG51bGwsIGZhY2VMaXN0LCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBzcGhlcmVIZWlnaHRmaWVsZF90bXAxID0gbmV3IFZlYzMoKTtcbnZhciBzcGhlcmVIZWlnaHRmaWVsZF90bXAyID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBAbWV0aG9kIHNwaGVyZUhlaWdodGZpZWxkXG4gKi9cbk5hcnJvd3BoYXNlLnByb3RvdHlwZVtTaGFwZS50eXBlcy5TUEhFUkUgfCBTaGFwZS50eXBlcy5IRUlHSFRGSUVMRF0gPVxuTmFycm93cGhhc2UucHJvdG90eXBlLnNwaGVyZUhlaWdodGZpZWxkID0gZnVuY3Rpb24gKFxuICAgIHNwaGVyZVNoYXBlLFxuICAgIGhmU2hhcGUsXG4gICAgc3BoZXJlUG9zLFxuICAgIGhmUG9zLFxuICAgIHNwaGVyZVF1YXQsXG4gICAgaGZRdWF0LFxuICAgIHNwaGVyZUJvZHksXG4gICAgaGZCb2R5XG4pe1xuICAgIHZhciBkYXRhID0gaGZTaGFwZS5kYXRhLFxuICAgICAgICByYWRpdXMgPSBzcGhlcmVTaGFwZS5yYWRpdXMsXG4gICAgICAgIHcgPSBoZlNoYXBlLmVsZW1lbnRTaXplLFxuICAgICAgICB3b3JsZFBpbGxhck9mZnNldCA9IHNwaGVyZUhlaWdodGZpZWxkX3RtcDI7XG5cbiAgICAvLyBHZXQgc3BoZXJlIHBvc2l0aW9uIHRvIGhlaWdodGZpZWxkIGxvY2FsIVxuICAgIHZhciBsb2NhbFNwaGVyZVBvcyA9IHNwaGVyZUhlaWdodGZpZWxkX3RtcDE7XG4gICAgVHJhbnNmb3JtLnBvaW50VG9Mb2NhbEZyYW1lKGhmUG9zLCBoZlF1YXQsIHNwaGVyZVBvcywgbG9jYWxTcGhlcmVQb3MpO1xuXG4gICAgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgZGF0YSBwb2ludHMgdG8gdGVzdCBhZ2FpbnN0XG4gICAgdmFyIGlNaW5YID0gTWF0aC5mbG9vcigobG9jYWxTcGhlcmVQb3MueCAtIHJhZGl1cykgLyB3KSAtIDEsXG4gICAgICAgIGlNYXhYID0gTWF0aC5jZWlsKChsb2NhbFNwaGVyZVBvcy54ICsgcmFkaXVzKSAvIHcpICsgMSxcbiAgICAgICAgaU1pblkgPSBNYXRoLmZsb29yKChsb2NhbFNwaGVyZVBvcy55IC0gcmFkaXVzKSAvIHcpIC0gMSxcbiAgICAgICAgaU1heFkgPSBNYXRoLmNlaWwoKGxvY2FsU3BoZXJlUG9zLnkgKyByYWRpdXMpIC8gdykgKyAxO1xuXG4gICAgLy8gQmFpbCBvdXQgaWYgd2UgYXJlIG91dCBvZiB0aGUgdGVycmFpblxuICAgIGlmKGlNYXhYIDwgMCB8fCBpTWF4WSA8IDAgfHwgaU1pblggPiBkYXRhLmxlbmd0aCB8fCBpTWF4WSA+IGRhdGFbMF0ubGVuZ3RoKXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENsYW1wIGluZGV4IHRvIGVkZ2VzXG4gICAgaWYoaU1pblggPCAwKXsgaU1pblggPSAwOyB9XG4gICAgaWYoaU1heFggPCAwKXsgaU1heFggPSAwOyB9XG4gICAgaWYoaU1pblkgPCAwKXsgaU1pblkgPSAwOyB9XG4gICAgaWYoaU1heFkgPCAwKXsgaU1heFkgPSAwOyB9XG4gICAgaWYoaU1pblggPj0gZGF0YS5sZW5ndGgpeyBpTWluWCA9IGRhdGEubGVuZ3RoIC0gMTsgfVxuICAgIGlmKGlNYXhYID49IGRhdGEubGVuZ3RoKXsgaU1heFggPSBkYXRhLmxlbmd0aCAtIDE7IH1cbiAgICBpZihpTWF4WSA+PSBkYXRhWzBdLmxlbmd0aCl7IGlNYXhZID0gZGF0YVswXS5sZW5ndGggLSAxOyB9XG4gICAgaWYoaU1pblkgPj0gZGF0YVswXS5sZW5ndGgpeyBpTWluWSA9IGRhdGFbMF0ubGVuZ3RoIC0gMTsgfVxuXG4gICAgdmFyIG1pbk1heCA9IFtdO1xuICAgIGhmU2hhcGUuZ2V0UmVjdE1pbk1heChpTWluWCwgaU1pblksIGlNYXhYLCBpTWF4WSwgbWluTWF4KTtcbiAgICB2YXIgbWluID0gbWluTWF4WzBdO1xuICAgIHZhciBtYXggPSBtaW5NYXhbMV07XG5cbiAgICAvLyBCYWlsIG91dCBpZiB3ZSdyZSBjYW50IHRvdWNoIHRoZSBib3VuZGluZyBoZWlnaHQgYm94XG4gICAgaWYobG9jYWxTcGhlcmVQb3MueiAtIHJhZGl1cyA+IG1heCB8fCBsb2NhbFNwaGVyZVBvcy56ICsgcmFkaXVzIDwgbWluKXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdDtcbiAgICBmb3IodmFyIGkgPSBpTWluWDsgaSA8IGlNYXhYOyBpKyspe1xuICAgICAgICBmb3IodmFyIGogPSBpTWluWTsgaiA8IGlNYXhZOyBqKyspe1xuXG4gICAgICAgICAgICB2YXIgbnVtQ29udGFjdHNCZWZvcmUgPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICAgICAgICAvLyBMb3dlciB0cmlhbmdsZVxuICAgICAgICAgICAgaGZTaGFwZS5nZXRDb252ZXhUcmlhbmdsZVBpbGxhcihpLCBqLCBmYWxzZSk7XG4gICAgICAgICAgICBUcmFuc2Zvcm0ucG9pbnRUb1dvcmxkRnJhbWUoaGZQb3MsIGhmUXVhdCwgaGZTaGFwZS5waWxsYXJPZmZzZXQsIHdvcmxkUGlsbGFyT2Zmc2V0KTtcbiAgICAgICAgICAgIGlmIChzcGhlcmVQb3MuZGlzdGFuY2VUbyh3b3JsZFBpbGxhck9mZnNldCkgPCBoZlNoYXBlLnBpbGxhckNvbnZleC5ib3VuZGluZ1NwaGVyZVJhZGl1cyArIHNwaGVyZVNoYXBlLmJvdW5kaW5nU3BoZXJlUmFkaXVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zcGhlcmVDb252ZXgoc3BoZXJlU2hhcGUsIGhmU2hhcGUucGlsbGFyQ29udmV4LCBzcGhlcmVQb3MsIHdvcmxkUGlsbGFyT2Zmc2V0LCBzcGhlcmVRdWF0LCBoZlF1YXQsIHNwaGVyZUJvZHksIGhmQm9keSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwcGVyIHRyaWFuZ2xlXG4gICAgICAgICAgICBoZlNoYXBlLmdldENvbnZleFRyaWFuZ2xlUGlsbGFyKGksIGosIHRydWUpO1xuICAgICAgICAgICAgVHJhbnNmb3JtLnBvaW50VG9Xb3JsZEZyYW1lKGhmUG9zLCBoZlF1YXQsIGhmU2hhcGUucGlsbGFyT2Zmc2V0LCB3b3JsZFBpbGxhck9mZnNldCk7XG4gICAgICAgICAgICBpZiAoc3BoZXJlUG9zLmRpc3RhbmNlVG8od29ybGRQaWxsYXJPZmZzZXQpIDwgaGZTaGFwZS5waWxsYXJDb252ZXguYm91bmRpbmdTcGhlcmVSYWRpdXMgKyBzcGhlcmVTaGFwZS5ib3VuZGluZ1NwaGVyZVJhZGl1cykge1xuICAgICAgICAgICAgICAgIHRoaXMuc3BoZXJlQ29udmV4KHNwaGVyZVNoYXBlLCBoZlNoYXBlLnBpbGxhckNvbnZleCwgc3BoZXJlUG9zLCB3b3JsZFBpbGxhck9mZnNldCwgc3BoZXJlUXVhdCwgaGZRdWF0LCBzcGhlcmVCb2R5LCBoZkJvZHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbnVtQ29udGFjdHMgPSByZXN1bHQubGVuZ3RoIC0gbnVtQ29udGFjdHNCZWZvcmU7XG5cbiAgICAgICAgICAgIGlmKG51bUNvbnRhY3RzID4gMil7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIC8vIFNraXAgYWxsIGJ1dCAxXG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IG51bUNvbnRhY3RzIC0gMTsgaysrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbn0se1wiLi4vY29sbGlzaW9uL0FBQkJcIjozLFwiLi4vY29sbGlzaW9uL1JheVwiOjksXCIuLi9lcXVhdGlvbnMvQ29udGFjdEVxdWF0aW9uXCI6MTksXCIuLi9lcXVhdGlvbnMvRnJpY3Rpb25FcXVhdGlvblwiOjIxLFwiLi4vbWF0aC9RdWF0ZXJuaW9uXCI6MjgsXCIuLi9tYXRoL1RyYW5zZm9ybVwiOjI5LFwiLi4vbWF0aC9WZWMzXCI6MzAsXCIuLi9zaGFwZXMvQ29udmV4UG9seWhlZHJvblwiOjM4LFwiLi4vc2hhcGVzL1NoYXBlXCI6NDMsXCIuLi9zb2x2ZXIvU29sdmVyXCI6NDcsXCIuLi91dGlscy9WZWMzUG9vbFwiOjU0fV0sNTY6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuLyogZ2xvYmFsIHBlcmZvcm1hbmNlICovXG5cbm1vZHVsZS5leHBvcnRzID0gV29ybGQ7XG5cbnZhciBTaGFwZSA9IF9kZXJlcV8oJy4uL3NoYXBlcy9TaGFwZScpO1xudmFyIFZlYzMgPSBfZGVyZXFfKCcuLi9tYXRoL1ZlYzMnKTtcbnZhciBRdWF0ZXJuaW9uID0gX2RlcmVxXygnLi4vbWF0aC9RdWF0ZXJuaW9uJyk7XG52YXIgR1NTb2x2ZXIgPSBfZGVyZXFfKCcuLi9zb2x2ZXIvR1NTb2x2ZXInKTtcbnZhciBWZWMzUG9vbCA9IF9kZXJlcV8oJy4uL3V0aWxzL1ZlYzNQb29sJyk7XG52YXIgQ29udGFjdEVxdWF0aW9uID0gX2RlcmVxXygnLi4vZXF1YXRpb25zL0NvbnRhY3RFcXVhdGlvbicpO1xudmFyIEZyaWN0aW9uRXF1YXRpb24gPSBfZGVyZXFfKCcuLi9lcXVhdGlvbnMvRnJpY3Rpb25FcXVhdGlvbicpO1xudmFyIE5hcnJvd3BoYXNlID0gX2RlcmVxXygnLi9OYXJyb3dwaGFzZScpO1xudmFyIEV2ZW50VGFyZ2V0ID0gX2RlcmVxXygnLi4vdXRpbHMvRXZlbnRUYXJnZXQnKTtcbnZhciBBcnJheUNvbGxpc2lvbk1hdHJpeCA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9BcnJheUNvbGxpc2lvbk1hdHJpeCcpO1xudmFyIE1hdGVyaWFsID0gX2RlcmVxXygnLi4vbWF0ZXJpYWwvTWF0ZXJpYWwnKTtcbnZhciBDb250YWN0TWF0ZXJpYWwgPSBfZGVyZXFfKCcuLi9tYXRlcmlhbC9Db250YWN0TWF0ZXJpYWwnKTtcbnZhciBCb2R5ID0gX2RlcmVxXygnLi4vb2JqZWN0cy9Cb2R5Jyk7XG52YXIgVHVwbGVEaWN0aW9uYXJ5ID0gX2RlcmVxXygnLi4vdXRpbHMvVHVwbGVEaWN0aW9uYXJ5Jyk7XG52YXIgUmF5Y2FzdFJlc3VsdCA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9SYXljYXN0UmVzdWx0Jyk7XG52YXIgQUFCQiA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9BQUJCJyk7XG52YXIgUmF5ID0gX2RlcmVxXygnLi4vY29sbGlzaW9uL1JheScpO1xudmFyIE5haXZlQnJvYWRwaGFzZSA9IF9kZXJlcV8oJy4uL2NvbGxpc2lvbi9OYWl2ZUJyb2FkcGhhc2UnKTtcblxuLyoqXG4gKiBUaGUgcGh5c2ljcyB3b3JsZFxuICogQGNsYXNzIFdvcmxkXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEV2ZW50VGFyZ2V0XG4gKi9cbmZ1bmN0aW9uIFdvcmxkKCl7XG4gICAgRXZlbnRUYXJnZXQuYXBwbHkodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50bHkgLyBsYXN0IHVzZWQgdGltZXN0ZXAuIElzIHNldCB0byAtMSBpZiBub3QgYXZhaWxhYmxlLiBUaGlzIHZhbHVlIGlzIHVwZGF0ZWQgYmVmb3JlIGVhY2ggaW50ZXJuYWwgc3RlcCwgd2hpY2ggbWVhbnMgdGhhdCBpdCBpcyBcImZyZXNoXCIgaW5zaWRlIGV2ZW50IGNhbGxiYWNrcy5cbiAgICAgKiBAcHJvcGVydHkge051bWJlcn0gZHRcbiAgICAgKi9cbiAgICB0aGlzLmR0ID0gLTE7XG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyBib2RpZXMgZ28gdG8gc2xlZXAgd2hlbiB0aGV5J3ZlIGJlZW4gaW5hY3RpdmVcbiAgICAgKiBAcHJvcGVydHkgYWxsb3dTbGVlcFxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuYWxsb3dTbGVlcCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQWxsIHRoZSBjdXJyZW50IGNvbnRhY3RzIChpbnN0YW5jZXMgb2YgQ29udGFjdEVxdWF0aW9uKSBpbiB0aGUgd29ybGQuXG4gICAgICogQHByb3BlcnR5IGNvbnRhY3RzXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHRoaXMuY29udGFjdHMgPSBbXTtcbiAgICB0aGlzLmZyaWN0aW9uRXF1YXRpb25zID0gW107XG5cbiAgICAvKipcbiAgICAgKiBIb3cgb2Z0ZW4gdG8gbm9ybWFsaXplIHF1YXRlcm5pb25zLiBTZXQgdG8gMCBmb3IgZXZlcnkgc3RlcCwgMSBmb3IgZXZlcnkgc2Vjb25kIGV0Yy4uIEEgbGFyZ2VyIHZhbHVlIGluY3JlYXNlcyBwZXJmb3JtYW5jZS4gSWYgYm9kaWVzIHRlbmQgdG8gZXhwbG9kZSwgc2V0IHRvIGEgc21hbGxlciB2YWx1ZSAoemVybyB0byBiZSBzdXJlIG5vdGhpbmcgY2FuIGdvIHdyb25nKS5cbiAgICAgKiBAcHJvcGVydHkgcXVhdE5vcm1hbGl6ZVNraXBcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucXVhdE5vcm1hbGl6ZVNraXAgPSAwO1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRvIHRydWUgdG8gdXNlIGZhc3QgcXVhdGVybmlvbiBub3JtYWxpemF0aW9uLiBJdCBpcyBvZnRlbiBlbm91Z2ggYWNjdXJhdGUgdG8gdXNlLiBJZiBib2RpZXMgdGVuZCB0byBleHBsb2RlLCBzZXQgdG8gZmFsc2UuXG4gICAgICogQHByb3BlcnR5IHF1YXROb3JtYWxpemVGYXN0XG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQHNlZSBRdWF0ZXJuaW9uLm5vcm1hbGl6ZUZhc3RcbiAgICAgKiBAc2VlIFF1YXRlcm5pb24ubm9ybWFsaXplXG4gICAgICovXG4gICAgdGhpcy5xdWF0Tm9ybWFsaXplRmFzdCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHdhbGwtY2xvY2sgdGltZSBzaW5jZSBzaW11bGF0aW9uIHN0YXJ0XG4gICAgICogQHByb3BlcnR5IHRpbWVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMudGltZSA9IDAuMDtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiB0aW1lc3RlcHMgdGFrZW4gc2luY2Ugc3RhcnRcbiAgICAgKiBAcHJvcGVydHkgc3RlcG51bWJlclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zdGVwbnVtYmVyID0gMDtcblxuICAgIC8vLyBEZWZhdWx0IGFuZCBsYXN0IHRpbWVzdGVwIHNpemVzXG4gICAgdGhpcy5kZWZhdWx0X2R0ID0gMS82MDtcblxuICAgIHRoaXMubmV4dElkID0gMDtcbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgZ3Jhdml0eVxuICAgICAqIEB0eXBlIHtWZWMzfVxuICAgICAqL1xuICAgIHRoaXMuZ3Jhdml0eSA9IG5ldyBWZWMzKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgYnJvYWRwaGFzZVxuICAgICAqIEB0eXBlIHtCcm9hZHBoYXNlfVxuICAgICAqL1xuICAgIHRoaXMuYnJvYWRwaGFzZSA9IG5ldyBOYWl2ZUJyb2FkcGhhc2UoKTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBib2RpZXNcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5ib2RpZXMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBzb2x2ZXJcbiAgICAgKiBAdHlwZSB7U29sdmVyfVxuICAgICAqL1xuICAgIHRoaXMuc29sdmVyID0gbmV3IEdTU29sdmVyKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgY29uc3RyYWludHNcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5jb25zdHJhaW50cyA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IG5hcnJvd3BoYXNlXG4gICAgICogQHR5cGUge05hcnJvd3BoYXNlfVxuICAgICAqL1xuICAgIHRoaXMubmFycm93cGhhc2UgPSBuZXcgTmFycm93cGhhc2UodGhpcyk7XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkge0FycmF5Q29sbGlzaW9uTWF0cml4fSBjb2xsaXNpb25NYXRyaXhcblx0ICogQHR5cGUge0FycmF5Q29sbGlzaW9uTWF0cml4fVxuXHQgKi9cblx0dGhpcy5jb2xsaXNpb25NYXRyaXggPSBuZXcgQXJyYXlDb2xsaXNpb25NYXRyaXgoKTtcblxuICAgIC8qKlxuICAgICAqIENvbGxpc2lvbk1hdHJpeCBmcm9tIHRoZSBwcmV2aW91cyBzdGVwLlxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXlDb2xsaXNpb25NYXRyaXh9IGNvbGxpc2lvbk1hdHJpeFByZXZpb3VzXG5cdCAqIEB0eXBlIHtBcnJheUNvbGxpc2lvbk1hdHJpeH1cblx0ICovXG5cdHRoaXMuY29sbGlzaW9uTWF0cml4UHJldmlvdXMgPSBuZXcgQXJyYXlDb2xsaXNpb25NYXRyaXgoKTtcblxuICAgIC8qKlxuICAgICAqIEFsbCBhZGRlZCBtYXRlcmlhbHNcbiAgICAgKiBAcHJvcGVydHkgbWF0ZXJpYWxzXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHRoaXMubWF0ZXJpYWxzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAcHJvcGVydHkgY29udGFjdG1hdGVyaWFsc1xuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICB0aGlzLmNvbnRhY3RtYXRlcmlhbHMgPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gbG9vayB1cCBhIENvbnRhY3RNYXRlcmlhbCBnaXZlbiB0d28gaW5zdGFuY2VzIG9mIE1hdGVyaWFsLlxuICAgICAqIEBwcm9wZXJ0eSB7VHVwbGVEaWN0aW9uYXJ5fSBjb250YWN0TWF0ZXJpYWxUYWJsZVxuICAgICAqL1xuICAgIHRoaXMuY29udGFjdE1hdGVyaWFsVGFibGUgPSBuZXcgVHVwbGVEaWN0aW9uYXJ5KCk7XG5cbiAgICB0aGlzLmRlZmF1bHRNYXRlcmlhbCA9IG5ldyBNYXRlcmlhbChcImRlZmF1bHRcIik7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGNvbnRhY3QgbWF0ZXJpYWwgaXMgdXNlZCBpZiBubyBzdWl0YWJsZSBjb250YWN0bWF0ZXJpYWwgaXMgZm91bmQgZm9yIGEgY29udGFjdC5cbiAgICAgKiBAcHJvcGVydHkgZGVmYXVsdENvbnRhY3RNYXRlcmlhbFxuICAgICAqIEB0eXBlIHtDb250YWN0TWF0ZXJpYWx9XG4gICAgICovXG4gICAgdGhpcy5kZWZhdWx0Q29udGFjdE1hdGVyaWFsID0gbmV3IENvbnRhY3RNYXRlcmlhbCh0aGlzLmRlZmF1bHRNYXRlcmlhbCwgdGhpcy5kZWZhdWx0TWF0ZXJpYWwsIHsgZnJpY3Rpb246IDAuMywgcmVzdGl0dXRpb246IDAuMCB9KTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBkb1Byb2ZpbGluZ1xuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqL1xuICAgIHRoaXMuZG9Qcm9maWxpbmcgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEBwcm9wZXJ0eSBwcm9maWxlXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGlzLnByb2ZpbGUgPSB7XG4gICAgICAgIHNvbHZlOjAsXG4gICAgICAgIG1ha2VDb250YWN0Q29uc3RyYWludHM6MCxcbiAgICAgICAgYnJvYWRwaGFzZTowLFxuICAgICAgICBpbnRlZ3JhdGU6MCxcbiAgICAgICAgbmFycm93cGhhc2U6MCxcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQHByb3BlcnR5IHN1YnN5c3RlbXNcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5zdWJzeXN0ZW1zID0gW107XG5cbiAgICB0aGlzLmFkZEJvZHlFdmVudCA9IHtcbiAgICAgICAgdHlwZTpcImFkZEJvZHlcIixcbiAgICAgICAgYm9keSA6IG51bGwsXG4gICAgfTtcblxuICAgIHRoaXMucmVtb3ZlQm9keUV2ZW50ID0ge1xuICAgICAgICB0eXBlOlwicmVtb3ZlQm9keVwiLFxuICAgICAgICBib2R5IDogbnVsbCxcbiAgICB9O1xufVxuV29ybGQucHJvdG90eXBlID0gbmV3IEV2ZW50VGFyZ2V0KCk7XG5cbi8vIFRlbXAgc3R1ZmZcbnZhciB0bXBBQUJCMSA9IG5ldyBBQUJCKCk7XG52YXIgdG1wQXJyYXkxID0gW107XG52YXIgdG1wUmF5ID0gbmV3IFJheSgpO1xuXG4vKipcbiAqIEdldCB0aGUgY29udGFjdCBtYXRlcmlhbCBiZXR3ZWVuIG1hdGVyaWFscyBtMSBhbmQgbTJcbiAqIEBtZXRob2QgZ2V0Q29udGFjdE1hdGVyaWFsXG4gKiBAcGFyYW0ge01hdGVyaWFsfSBtMVxuICogQHBhcmFtIHtNYXRlcmlhbH0gbTJcbiAqIEByZXR1cm4ge0NvbnRhY3RNYXRlcmlhbH0gVGhlIGNvbnRhY3QgbWF0ZXJpYWwgaWYgaXQgd2FzIGZvdW5kLlxuICovXG5Xb3JsZC5wcm90b3R5cGUuZ2V0Q29udGFjdE1hdGVyaWFsID0gZnVuY3Rpb24obTEsbTIpe1xuICAgIHJldHVybiB0aGlzLmNvbnRhY3RNYXRlcmlhbFRhYmxlLmdldChtMS5pZCxtMi5pZCk7IC8vdGhpcy5jb250YWN0bWF0ZXJpYWxzW3RoaXMubWF0czJjbWF0W2kraip0aGlzLm1hdGVyaWFscy5sZW5ndGhdXTtcbn07XG5cbi8qKlxuICogR2V0IG51bWJlciBvZiBvYmplY3RzIGluIHRoZSB3b3JsZC5cbiAqIEBtZXRob2QgbnVtT2JqZWN0c1xuICogQHJldHVybiB7TnVtYmVyfVxuICogQGRlcHJlY2F0ZWRcbiAqL1xuV29ybGQucHJvdG90eXBlLm51bU9iamVjdHMgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLmJvZGllcy5sZW5ndGg7XG59O1xuXG4vKipcbiAqIFN0b3JlIG9sZCBjb2xsaXNpb24gc3RhdGUgaW5mb1xuICogQG1ldGhvZCBjb2xsaXNpb25NYXRyaXhUaWNrXG4gKi9cbldvcmxkLnByb3RvdHlwZS5jb2xsaXNpb25NYXRyaXhUaWNrID0gZnVuY3Rpb24oKXtcblx0dmFyIHRlbXAgPSB0aGlzLmNvbGxpc2lvbk1hdHJpeFByZXZpb3VzO1xuXHR0aGlzLmNvbGxpc2lvbk1hdHJpeFByZXZpb3VzID0gdGhpcy5jb2xsaXNpb25NYXRyaXg7XG5cdHRoaXMuY29sbGlzaW9uTWF0cml4ID0gdGVtcDtcblx0dGhpcy5jb2xsaXNpb25NYXRyaXgucmVzZXQoKTtcbn07XG5cbi8qKlxuICogQWRkIGEgcmlnaWQgYm9keSB0byB0aGUgc2ltdWxhdGlvbi5cbiAqIEBtZXRob2QgYWRkXG4gKiBAcGFyYW0ge0JvZHl9IGJvZHlcbiAqIEB0b2RvIElmIHRoZSBzaW11bGF0aW9uIGhhcyBub3QgeWV0IHN0YXJ0ZWQsIHdoeSByZWNyZXRlIGFuZCBjb3B5IGFycmF5cyBmb3IgZWFjaCBib2R5PyBBY2N1bXVsYXRlIGluIGR5bmFtaWMgYXJyYXlzIGluIHRoaXMgY2FzZS5cbiAqIEB0b2RvIEFkZGluZyBhbiBhcnJheSBvZiBib2RpZXMgc2hvdWxkIGJlIHBvc3NpYmxlLiBUaGlzIHdvdWxkIHNhdmUgc29tZSBsb29wcyB0b29cbiAqIEBkZXByZWNhdGVkIFVzZSAuYWRkQm9keSBpbnN0ZWFkXG4gKi9cbldvcmxkLnByb3RvdHlwZS5hZGQgPSBXb3JsZC5wcm90b3R5cGUuYWRkQm9keSA9IGZ1bmN0aW9uKGJvZHkpe1xuICAgIGlmKHRoaXMuYm9kaWVzLmluZGV4T2YoYm9keSkgIT09IC0xKXtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBib2R5LmluZGV4ID0gdGhpcy5ib2RpZXMubGVuZ3RoO1xuICAgIHRoaXMuYm9kaWVzLnB1c2goYm9keSk7XG4gICAgYm9keS53b3JsZCA9IHRoaXM7XG4gICAgYm9keS5pbml0UG9zaXRpb24uY29weShib2R5LnBvc2l0aW9uKTtcbiAgICBib2R5LmluaXRWZWxvY2l0eS5jb3B5KGJvZHkudmVsb2NpdHkpO1xuICAgIGJvZHkudGltZUxhc3RTbGVlcHkgPSB0aGlzLnRpbWU7XG4gICAgaWYoYm9keSBpbnN0YW5jZW9mIEJvZHkpe1xuICAgICAgICBib2R5LmluaXRBbmd1bGFyVmVsb2NpdHkuY29weShib2R5LmFuZ3VsYXJWZWxvY2l0eSk7XG4gICAgICAgIGJvZHkuaW5pdFF1YXRlcm5pb24uY29weShib2R5LnF1YXRlcm5pb24pO1xuICAgIH1cblx0dGhpcy5jb2xsaXNpb25NYXRyaXguc2V0TnVtT2JqZWN0cyh0aGlzLmJvZGllcy5sZW5ndGgpO1xuICAgIHRoaXMuYWRkQm9keUV2ZW50LmJvZHkgPSBib2R5O1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh0aGlzLmFkZEJvZHlFdmVudCk7XG59O1xuXG4vKipcbiAqIEFkZCBhIGNvbnN0cmFpbnQgdG8gdGhlIHNpbXVsYXRpb24uXG4gKiBAbWV0aG9kIGFkZENvbnN0cmFpbnRcbiAqIEBwYXJhbSB7Q29uc3RyYWludH0gY1xuICovXG5Xb3JsZC5wcm90b3R5cGUuYWRkQ29uc3RyYWludCA9IGZ1bmN0aW9uKGMpe1xuICAgIHRoaXMuY29uc3RyYWludHMucHVzaChjKTtcbn07XG5cbi8qKlxuICogUmVtb3ZlcyBhIGNvbnN0cmFpbnRcbiAqIEBtZXRob2QgcmVtb3ZlQ29uc3RyYWludFxuICogQHBhcmFtIHtDb25zdHJhaW50fSBjXG4gKi9cbldvcmxkLnByb3RvdHlwZS5yZW1vdmVDb25zdHJhaW50ID0gZnVuY3Rpb24oYyl7XG4gICAgdmFyIGlkeCA9IHRoaXMuY29uc3RyYWludHMuaW5kZXhPZihjKTtcbiAgICBpZihpZHghPT0tMSl7XG4gICAgICAgIHRoaXMuY29uc3RyYWludHMuc3BsaWNlKGlkeCwxKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJheWNhc3QgdGVzdFxuICogQG1ldGhvZCByYXlUZXN0XG4gKiBAcGFyYW0ge1ZlYzN9IGZyb21cbiAqIEBwYXJhbSB7VmVjM30gdG9cbiAqIEBwYXJhbSB7RnVuY3Rpb258UmF5Y2FzdFJlc3VsdH0gcmVzdWx0XG4gKiBAZGVwcmVjYXRlZCBVc2UgLnJheWNhc3RBbGwsIC5yYXljYXN0Q2xvc2VzdCBvciAucmF5Y2FzdEFueSBpbnN0ZWFkLlxuICovXG5Xb3JsZC5wcm90b3R5cGUucmF5VGVzdCA9IGZ1bmN0aW9uKGZyb20sIHRvLCByZXN1bHQpe1xuICAgIGlmKHJlc3VsdCBpbnN0YW5jZW9mIFJheWNhc3RSZXN1bHQpe1xuICAgICAgICAvLyBEbyByYXljYXN0Y2xvc2VzdFxuICAgICAgICB0aGlzLnJheWNhc3RDbG9zZXN0KGZyb20sIHRvLCB7XG4gICAgICAgICAgICBza2lwQmFja2ZhY2VzOiB0cnVlXG4gICAgICAgIH0sIHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRG8gcmF5Y2FzdEFsbFxuICAgICAgICB0aGlzLnJheWNhc3RBbGwoZnJvbSwgdG8sIHtcbiAgICAgICAgICAgIHNraXBCYWNrZmFjZXM6IHRydWVcbiAgICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJheSBjYXN0IGFnYWluc3QgYWxsIGJvZGllcy4gVGhlIHByb3ZpZGVkIGNhbGxiYWNrIHdpbGwgYmUgZXhlY3V0ZWQgZm9yIGVhY2ggaGl0IHdpdGggYSBSYXljYXN0UmVzdWx0IGFzIHNpbmdsZSBhcmd1bWVudC5cbiAqIEBtZXRob2QgcmF5Y2FzdEFsbFxuICogQHBhcmFtICB7VmVjM30gZnJvbVxuICogQHBhcmFtICB7VmVjM30gdG9cbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtICB7bnVtYmVyfSBbb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJNYXNrPS0xXVxuICogQHBhcmFtICB7bnVtYmVyfSBbb3B0aW9ucy5jb2xsaXNpb25GaWx0ZXJHcm91cD0tMV1cbiAqIEBwYXJhbSAge2Jvb2xlYW59IFtvcHRpb25zLnNraXBCYWNrZmFjZXM9ZmFsc2VdXG4gKiBAcGFyYW0gIHtib29sZWFufSBbb3B0aW9ucy5jaGVja0NvbGxpc2lvblJlc3BvbnNlPXRydWVdXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYW55IGJvZHkgd2FzIGhpdC5cbiAqL1xuV29ybGQucHJvdG90eXBlLnJheWNhc3RBbGwgPSBmdW5jdGlvbihmcm9tLCB0bywgb3B0aW9ucywgY2FsbGJhY2spe1xuICAgIG9wdGlvbnMubW9kZSA9IFJheS5BTEw7XG4gICAgb3B0aW9ucy5mcm9tID0gZnJvbTtcbiAgICBvcHRpb25zLnRvID0gdG87XG4gICAgb3B0aW9ucy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHJldHVybiB0bXBSYXkuaW50ZXJzZWN0V29ybGQodGhpcywgb3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIFJheSBjYXN0LCBhbmQgc3RvcCBhdCB0aGUgZmlyc3QgcmVzdWx0LiBOb3RlIHRoYXQgdGhlIG9yZGVyIGlzIHJhbmRvbSAtIGJ1dCB0aGUgbWV0aG9kIGlzIGZhc3QuXG4gKiBAbWV0aG9kIHJheWNhc3RBbnlcbiAqIEBwYXJhbSAge1ZlYzN9IGZyb21cbiAqIEBwYXJhbSAge1ZlYzN9IHRvXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSAge251bWJlcn0gW29wdGlvbnMuY29sbGlzaW9uRmlsdGVyTWFzaz0tMV1cbiAqIEBwYXJhbSAge251bWJlcn0gW29wdGlvbnMuY29sbGlzaW9uRmlsdGVyR3JvdXA9LTFdXG4gKiBAcGFyYW0gIHtib29sZWFufSBbb3B0aW9ucy5za2lwQmFja2ZhY2VzPWZhbHNlXVxuICogQHBhcmFtICB7Ym9vbGVhbn0gW29wdGlvbnMuY2hlY2tDb2xsaXNpb25SZXNwb25zZT10cnVlXVxuICogQHBhcmFtICB7UmF5Y2FzdFJlc3VsdH0gcmVzdWx0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGFueSBib2R5IHdhcyBoaXQuXG4gKi9cbldvcmxkLnByb3RvdHlwZS5yYXljYXN0QW55ID0gZnVuY3Rpb24oZnJvbSwgdG8sIG9wdGlvbnMsIHJlc3VsdCl7XG4gICAgb3B0aW9ucy5tb2RlID0gUmF5LkFOWTtcbiAgICBvcHRpb25zLmZyb20gPSBmcm9tO1xuICAgIG9wdGlvbnMudG8gPSB0bztcbiAgICBvcHRpb25zLnJlc3VsdCA9IHJlc3VsdDtcbiAgICByZXR1cm4gdG1wUmF5LmludGVyc2VjdFdvcmxkKHRoaXMsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBSYXkgY2FzdCwgYW5kIHJldHVybiBpbmZvcm1hdGlvbiBvZiB0aGUgY2xvc2VzdCBoaXQuXG4gKiBAbWV0aG9kIHJheWNhc3RDbG9zZXN0XG4gKiBAcGFyYW0gIHtWZWMzfSBmcm9tXG4gKiBAcGFyYW0gIHtWZWMzfSB0b1xuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtvcHRpb25zLmNvbGxpc2lvbkZpbHRlck1hc2s9LTFdXG4gKiBAcGFyYW0gIHtudW1iZXJ9IFtvcHRpb25zLmNvbGxpc2lvbkZpbHRlckdyb3VwPS0xXVxuICogQHBhcmFtICB7Ym9vbGVhbn0gW29wdGlvbnMuc2tpcEJhY2tmYWNlcz1mYWxzZV1cbiAqIEBwYXJhbSAge2Jvb2xlYW59IFtvcHRpb25zLmNoZWNrQ29sbGlzaW9uUmVzcG9uc2U9dHJ1ZV1cbiAqIEBwYXJhbSAge1JheWNhc3RSZXN1bHR9IHJlc3VsdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBhbnkgYm9keSB3YXMgaGl0LlxuICovXG5Xb3JsZC5wcm90b3R5cGUucmF5Y2FzdENsb3Nlc3QgPSBmdW5jdGlvbihmcm9tLCB0bywgb3B0aW9ucywgcmVzdWx0KXtcbiAgICBvcHRpb25zLm1vZGUgPSBSYXkuQ0xPU0VTVDtcbiAgICBvcHRpb25zLmZyb20gPSBmcm9tO1xuICAgIG9wdGlvbnMudG8gPSB0bztcbiAgICBvcHRpb25zLnJlc3VsdCA9IHJlc3VsdDtcbiAgICByZXR1cm4gdG1wUmF5LmludGVyc2VjdFdvcmxkKHRoaXMsIG9wdGlvbnMpO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYSByaWdpZCBib2R5IGZyb20gdGhlIHNpbXVsYXRpb24uXG4gKiBAbWV0aG9kIHJlbW92ZVxuICogQHBhcmFtIHtCb2R5fSBib2R5XG4gKiBAZGVwcmVjYXRlZCBVc2UgLnJlbW92ZUJvZHkgaW5zdGVhZFxuICovXG5Xb3JsZC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oYm9keSl7XG4gICAgYm9keS53b3JsZCA9IG51bGw7XG4gICAgdmFyIG4gPSB0aGlzLmJvZGllcy5sZW5ndGgtMSxcbiAgICAgICAgYm9kaWVzID0gdGhpcy5ib2RpZXMsXG4gICAgICAgIGlkeCA9IGJvZGllcy5pbmRleE9mKGJvZHkpO1xuICAgIGlmKGlkeCAhPT0gLTEpe1xuICAgICAgICBib2RpZXMuc3BsaWNlKGlkeCwgMSk7IC8vIFRvZG86IHNob3VsZCB1c2UgYSBnYXJiYWdlIGZyZWUgbWV0aG9kXG5cbiAgICAgICAgLy8gUmVjb21wdXRlIGluZGV4XG4gICAgICAgIGZvcih2YXIgaT0wOyBpIT09Ym9kaWVzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGJvZGllc1tpXS5pbmRleCA9IGk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbGxpc2lvbk1hdHJpeC5zZXROdW1PYmplY3RzKG4pO1xuICAgICAgICB0aGlzLnJlbW92ZUJvZHlFdmVudC5ib2R5ID0gYm9keTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHRoaXMucmVtb3ZlQm9keUV2ZW50KTtcbiAgICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHJpZ2lkIGJvZHkgZnJvbSB0aGUgc2ltdWxhdGlvbi5cbiAqIEBtZXRob2QgcmVtb3ZlQm9keVxuICogQHBhcmFtIHtCb2R5fSBib2R5XG4gKi9cbldvcmxkLnByb3RvdHlwZS5yZW1vdmVCb2R5ID0gV29ybGQucHJvdG90eXBlLnJlbW92ZTtcblxuLyoqXG4gKiBBZGRzIGEgbWF0ZXJpYWwgdG8gdGhlIFdvcmxkLlxuICogQG1ldGhvZCBhZGRNYXRlcmlhbFxuICogQHBhcmFtIHtNYXRlcmlhbH0gbVxuICogQHRvZG8gTmVjZXNzYXJ5P1xuICovXG5Xb3JsZC5wcm90b3R5cGUuYWRkTWF0ZXJpYWwgPSBmdW5jdGlvbihtKXtcbiAgICB0aGlzLm1hdGVyaWFscy5wdXNoKG0pO1xufTtcblxuLyoqXG4gKiBBZGRzIGEgY29udGFjdCBtYXRlcmlhbCB0byB0aGUgV29ybGRcbiAqIEBtZXRob2QgYWRkQ29udGFjdE1hdGVyaWFsXG4gKiBAcGFyYW0ge0NvbnRhY3RNYXRlcmlhbH0gY21hdFxuICovXG5Xb3JsZC5wcm90b3R5cGUuYWRkQ29udGFjdE1hdGVyaWFsID0gZnVuY3Rpb24oY21hdCkge1xuXG4gICAgLy8gQWRkIGNvbnRhY3QgbWF0ZXJpYWxcbiAgICB0aGlzLmNvbnRhY3RtYXRlcmlhbHMucHVzaChjbWF0KTtcblxuICAgIC8vIEFkZCBjdXJyZW50IGNvbnRhY3QgbWF0ZXJpYWwgdG8gdGhlIG1hdGVyaWFsIHRhYmxlXG4gICAgdGhpcy5jb250YWN0TWF0ZXJpYWxUYWJsZS5zZXQoY21hdC5tYXRlcmlhbHNbMF0uaWQsY21hdC5tYXRlcmlhbHNbMV0uaWQsY21hdCk7XG59O1xuXG4vLyBwZXJmb3JtYW5jZS5ub3coKVxuaWYodHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyl7XG4gICAgcGVyZm9ybWFuY2UgPSB7fTtcbn1cbmlmKCFwZXJmb3JtYW5jZS5ub3cpe1xuICAgIHZhciBub3dPZmZzZXQgPSBEYXRlLm5vdygpO1xuICAgIGlmIChwZXJmb3JtYW5jZS50aW1pbmcgJiYgcGVyZm9ybWFuY2UudGltaW5nLm5hdmlnYXRpb25TdGFydCl7XG4gICAgICAgIG5vd09mZnNldCA9IHBlcmZvcm1hbmNlLnRpbWluZy5uYXZpZ2F0aW9uU3RhcnQ7XG4gICAgfVxuICAgIHBlcmZvcm1hbmNlLm5vdyA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpIC0gbm93T2Zmc2V0O1xuICAgIH07XG59XG5cbnZhciBzdGVwX3RtcDEgPSBuZXcgVmVjMygpO1xuXG4vKipcbiAqIFN0ZXAgdGhlIHBoeXNpY3Mgd29ybGQgZm9yd2FyZCBpbiB0aW1lLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gbW9kZXMuIFRoZSBzaW1wbGUgbW9kZSBpcyBmaXhlZCB0aW1lc3RlcHBpbmcgd2l0aG91dCBpbnRlcnBvbGF0aW9uLiBJbiB0aGlzIGNhc2UgeW91IG9ubHkgdXNlIHRoZSBmaXJzdCBhcmd1bWVudC4gVGhlIHNlY29uZCBjYXNlIHVzZXMgaW50ZXJwb2xhdGlvbi4gSW4gdGhhdCB5b3UgYWxzbyBwcm92aWRlIHRoZSB0aW1lIHNpbmNlIHRoZSBmdW5jdGlvbiB3YXMgbGFzdCB1c2VkLCBhcyB3ZWxsIGFzIHRoZSBtYXhpbXVtIGZpeGVkIHRpbWVzdGVwcyB0byB0YWtlLlxuICpcbiAqIEBtZXRob2Qgc3RlcFxuICogQHBhcmFtIHtOdW1iZXJ9IGR0ICAgICAgICAgICAgICAgICAgICAgICBUaGUgZml4ZWQgdGltZSBzdGVwIHNpemUgdG8gdXNlLlxuICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lU2luY2VMYXN0Q2FsbGVkXSAgICBUaGUgdGltZSBlbGFwc2VkIHNpbmNlIHRoZSBmdW5jdGlvbiB3YXMgbGFzdCBjYWxsZWQuXG4gKiBAcGFyYW0ge051bWJlcn0gW21heFN1YlN0ZXBzPTEwXSAgICAgICAgIE1heGltdW0gbnVtYmVyIG9mIGZpeGVkIHN0ZXBzIHRvIHRha2UgcGVyIGZ1bmN0aW9uIGNhbGwuXG4gKlxuICogQGV4YW1wbGVcbiAqICAgICAvLyBmaXhlZCB0aW1lc3RlcHBpbmcgd2l0aG91dCBpbnRlcnBvbGF0aW9uXG4gKiAgICAgd29ybGQuc3RlcCgxLzYwKTtcbiAqXG4gKiBAc2VlIGh0dHA6Ly9idWxsZXRwaHlzaWNzLm9yZy9tZWRpYXdpa2ktMS41LjgvaW5kZXgucGhwL1N0ZXBwaW5nX1RoZV9Xb3JsZFxuICovXG5Xb3JsZC5wcm90b3R5cGUuc3RlcCA9IGZ1bmN0aW9uKGR0LCB0aW1lU2luY2VMYXN0Q2FsbGVkLCBtYXhTdWJTdGVwcyl7XG4gICAgbWF4U3ViU3RlcHMgPSBtYXhTdWJTdGVwcyB8fCAxMDtcbiAgICB0aW1lU2luY2VMYXN0Q2FsbGVkID0gdGltZVNpbmNlTGFzdENhbGxlZCB8fCAwO1xuXG4gICAgaWYodGltZVNpbmNlTGFzdENhbGxlZCA9PT0gMCl7IC8vIEZpeGVkLCBzaW1wbGUgc3RlcHBpbmdcblxuICAgICAgICB0aGlzLmludGVybmFsU3RlcChkdCk7XG5cbiAgICAgICAgLy8gSW5jcmVtZW50IHRpbWVcbiAgICAgICAgdGhpcy50aW1lICs9IGR0O1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBudW1iZXIgb2YgZml4ZWQgc3RlcHMgd2Ugc2hvdWxkIGhhdmUgdGFrZW4gc2luY2UgdGhlIGxhc3Qgc3RlcFxuICAgICAgICB2YXIgaW50ZXJuYWxTdGVwcyA9IE1hdGguZmxvb3IoKHRoaXMudGltZSArIHRpbWVTaW5jZUxhc3RDYWxsZWQpIC8gZHQpIC0gTWF0aC5mbG9vcih0aGlzLnRpbWUgLyBkdCk7XG4gICAgICAgIGludGVybmFsU3RlcHMgPSBNYXRoLm1pbihpbnRlcm5hbFN0ZXBzLG1heFN1YlN0ZXBzKTtcblxuICAgICAgICAvLyBEbyBzb21lIGZpeGVkIHN0ZXBzIHRvIGNhdGNoIHVwXG4gICAgICAgIHZhciB0MCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBmb3IodmFyIGk9MDsgaSE9PWludGVybmFsU3RlcHM7IGkrKyl7XG4gICAgICAgICAgICB0aGlzLmludGVybmFsU3RlcChkdCk7XG4gICAgICAgICAgICBpZihwZXJmb3JtYW5jZS5ub3coKSAtIHQwID4gZHQgKiAxMDAwKXtcbiAgICAgICAgICAgICAgICAvLyBXZSBhcmUgc2xvd2VyIHRoYW4gcmVhbC10aW1lLiBCZXR0ZXIgYmFpbCBvdXQuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbmNyZW1lbnQgaW50ZXJuYWwgY2xvY2tcbiAgICAgICAgdGhpcy50aW1lICs9IHRpbWVTaW5jZUxhc3RDYWxsZWQ7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSBcIkxlZnQgb3ZlclwiIHRpbWUgc3RlcFxuICAgICAgICB2YXIgaCA9IHRoaXMudGltZSAlIGR0O1xuICAgICAgICB2YXIgaF9kaXZfZHQgPSBoIC8gZHQ7XG4gICAgICAgIHZhciBpbnRlcnB2ZWxvID0gc3RlcF90bXAxO1xuICAgICAgICB2YXIgYm9kaWVzID0gdGhpcy5ib2RpZXM7XG5cbiAgICAgICAgZm9yKHZhciBqPTA7IGogIT09IGJvZGllcy5sZW5ndGg7IGorKyl7XG4gICAgICAgICAgICB2YXIgYiA9IGJvZGllc1tqXTtcbiAgICAgICAgICAgIGlmKGIudHlwZSAhPT0gQm9keS5TVEFUSUMgJiYgYi5zbGVlcFN0YXRlICE9PSBCb2R5LlNMRUVQSU5HKXtcblxuICAgICAgICAgICAgICAgIC8vIEludGVycG9sYXRlXG4gICAgICAgICAgICAgICAgYi5wb3NpdGlvbi52c3ViKGIucHJldmlvdXNQb3NpdGlvbiwgaW50ZXJwdmVsbyk7XG4gICAgICAgICAgICAgICAgaW50ZXJwdmVsby5zY2FsZShoX2Rpdl9kdCwgaW50ZXJwdmVsbyk7XG4gICAgICAgICAgICAgICAgYi5wb3NpdGlvbi52YWRkKGludGVycHZlbG8sIGIuaW50ZXJwb2xhdGVkUG9zaXRpb24pO1xuXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogaW50ZXJwb2xhdGUgcXVhdGVybmlvblxuICAgICAgICAgICAgICAgIC8vIGIuaW50ZXJwb2xhdGVkQW5nbGUgPSBiLmFuZ2xlICsgKGIuYW5nbGUgLSBiLnByZXZpb3VzQW5nbGUpICogaF9kaXZfZHQ7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAvLyBGb3Igc3RhdGljIGJvZGllcywganVzdCBjb3B5LiBXaG8gZWxzZSB3aWxsIGRvIGl0P1xuICAgICAgICAgICAgICAgIGIuaW50ZXJwb2xhdGVkUG9zaXRpb24uY29weShiLnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICBiLmludGVycG9sYXRlZFF1YXRlcm5pb24uY29weShiLnF1YXRlcm5pb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBTdGVwIHRoZSBzaW11bGF0aW9uXG4gKiBAbWV0aG9kIHN0ZXBcbiAqIEBwYXJhbSB7TnVtYmVyfSBkdFxuICovXG52YXIgV29ybGRfc3RlcF9wb3N0U3RlcEV2ZW50ID0ge3R5cGU6XCJwb3N0U3RlcFwifSwgLy8gUmV1c2FibGUgZXZlbnQgb2JqZWN0cyB0byBzYXZlIG1lbW9yeVxuICAgIFdvcmxkX3N0ZXBfcHJlU3RlcEV2ZW50ID0ge3R5cGU6XCJwcmVTdGVwXCJ9LFxuICAgIFdvcmxkX3N0ZXBfY29sbGlkZUV2ZW50ID0ge3R5cGU6XCJjb2xsaWRlXCIsIGJvZHk6bnVsbCwgY29udGFjdDpudWxsIH0sXG4gICAgV29ybGRfc3RlcF9vbGRDb250YWN0cyA9IFtdLCAvLyBQb29scyBmb3IgdW51c2VkIG9iamVjdHNcbiAgICBXb3JsZF9zdGVwX2ZyaWN0aW9uRXF1YXRpb25Qb29sID0gW10sXG4gICAgV29ybGRfc3RlcF9wMSA9IFtdLCAvLyBSZXVzYWJsZSBhcnJheXMgZm9yIGNvbGxpc2lvbiBwYWlyc1xuICAgIFdvcmxkX3N0ZXBfcDIgPSBbXSxcbiAgICBXb3JsZF9zdGVwX2d2ZWMgPSBuZXcgVmVjMygpLCAvLyBUZW1wb3JhcnkgdmVjdG9ycyBhbmQgcXVhdHNcbiAgICBXb3JsZF9zdGVwX3ZpID0gbmV3IFZlYzMoKSxcbiAgICBXb3JsZF9zdGVwX3ZqID0gbmV3IFZlYzMoKSxcbiAgICBXb3JsZF9zdGVwX3dpID0gbmV3IFZlYzMoKSxcbiAgICBXb3JsZF9zdGVwX3dqID0gbmV3IFZlYzMoKSxcbiAgICBXb3JsZF9zdGVwX3QxID0gbmV3IFZlYzMoKSxcbiAgICBXb3JsZF9zdGVwX3QyID0gbmV3IFZlYzMoKSxcbiAgICBXb3JsZF9zdGVwX3JpeG4gPSBuZXcgVmVjMygpLFxuICAgIFdvcmxkX3N0ZXBfcmp4biA9IG5ldyBWZWMzKCksXG4gICAgV29ybGRfc3RlcF9zdGVwX3EgPSBuZXcgUXVhdGVybmlvbigpLFxuICAgIFdvcmxkX3N0ZXBfc3RlcF93ID0gbmV3IFF1YXRlcm5pb24oKSxcbiAgICBXb3JsZF9zdGVwX3N0ZXBfd3EgPSBuZXcgUXVhdGVybmlvbigpLFxuICAgIGludklfdGF1X2R0ID0gbmV3IFZlYzMoKTtcbldvcmxkLnByb3RvdHlwZS5pbnRlcm5hbFN0ZXAgPSBmdW5jdGlvbihkdCl7XG4gICAgdGhpcy5kdCA9IGR0O1xuXG4gICAgdmFyIHdvcmxkID0gdGhpcyxcbiAgICAgICAgdGhhdCA9IHRoaXMsXG4gICAgICAgIGNvbnRhY3RzID0gdGhpcy5jb250YWN0cyxcbiAgICAgICAgcDEgPSBXb3JsZF9zdGVwX3AxLFxuICAgICAgICBwMiA9IFdvcmxkX3N0ZXBfcDIsXG4gICAgICAgIE4gPSB0aGlzLm51bU9iamVjdHMoKSxcbiAgICAgICAgYm9kaWVzID0gdGhpcy5ib2RpZXMsXG4gICAgICAgIHNvbHZlciA9IHRoaXMuc29sdmVyLFxuICAgICAgICBncmF2aXR5ID0gdGhpcy5ncmF2aXR5LFxuICAgICAgICBkb1Byb2ZpbGluZyA9IHRoaXMuZG9Qcm9maWxpbmcsXG4gICAgICAgIHByb2ZpbGUgPSB0aGlzLnByb2ZpbGUsXG4gICAgICAgIERZTkFNSUMgPSBCb2R5LkRZTkFNSUMsXG4gICAgICAgIHByb2ZpbGluZ1N0YXJ0LFxuICAgICAgICBjb25zdHJhaW50cyA9IHRoaXMuY29uc3RyYWludHMsXG4gICAgICAgIGZyaWN0aW9uRXF1YXRpb25Qb29sID0gV29ybGRfc3RlcF9mcmljdGlvbkVxdWF0aW9uUG9vbCxcbiAgICAgICAgZ25vcm0gPSBncmF2aXR5Lm5vcm0oKSxcbiAgICAgICAgZ3ggPSBncmF2aXR5LngsXG4gICAgICAgIGd5ID0gZ3Jhdml0eS55LFxuICAgICAgICBneiA9IGdyYXZpdHkueixcbiAgICAgICAgaT0wO1xuXG4gICAgaWYoZG9Qcm9maWxpbmcpe1xuICAgICAgICBwcm9maWxpbmdTdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH1cblxuICAgIC8vIEFkZCBncmF2aXR5IHRvIGFsbCBvYmplY3RzXG4gICAgZm9yKGk9MDsgaSE9PU47IGkrKyl7XG4gICAgICAgIHZhciBiaSA9IGJvZGllc1tpXTtcbiAgICAgICAgaWYoYmkudHlwZSAmIERZTkFNSUMpeyAvLyBPbmx5IGZvciBkeW5hbWljIGJvZGllc1xuICAgICAgICAgICAgdmFyIGYgPSBiaS5mb3JjZSwgbSA9IGJpLm1hc3M7XG4gICAgICAgICAgICBmLnggKz0gbSpneDtcbiAgICAgICAgICAgIGYueSArPSBtKmd5O1xuICAgICAgICAgICAgZi56ICs9IG0qZ3o7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgc3Vic3lzdGVtc1xuICAgIGZvcih2YXIgaT0wLCBOc3Vic3lzdGVtcz10aGlzLnN1YnN5c3RlbXMubGVuZ3RoOyBpIT09TnN1YnN5c3RlbXM7IGkrKyl7XG4gICAgICAgIHRoaXMuc3Vic3lzdGVtc1tpXS51cGRhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBDb2xsaXNpb24gZGV0ZWN0aW9uXG4gICAgaWYoZG9Qcm9maWxpbmcpeyBwcm9maWxpbmdTdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpOyB9XG4gICAgcDEubGVuZ3RoID0gMDsgLy8gQ2xlYW4gdXAgcGFpciBhcnJheXMgZnJvbSBsYXN0IHN0ZXBcbiAgICBwMi5sZW5ndGggPSAwO1xuICAgIHRoaXMuYnJvYWRwaGFzZS5jb2xsaXNpb25QYWlycyh0aGlzLHAxLHAyKTtcbiAgICBpZihkb1Byb2ZpbGluZyl7IHByb2ZpbGUuYnJvYWRwaGFzZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gcHJvZmlsaW5nU3RhcnQ7IH1cblxuICAgIC8vIFJlbW92ZSBjb25zdHJhaW5lZCBwYWlycyB3aXRoIGNvbGxpZGVDb25uZWN0ZWQgPT0gZmFsc2VcbiAgICB2YXIgTmNvbnN0cmFpbnRzID0gY29uc3RyYWludHMubGVuZ3RoO1xuICAgIGZvcihpPTA7IGkhPT1OY29uc3RyYWludHM7IGkrKyl7XG4gICAgICAgIHZhciBjID0gY29uc3RyYWludHNbaV07XG4gICAgICAgIGlmKCFjLmNvbGxpZGVDb25uZWN0ZWQpe1xuICAgICAgICAgICAgZm9yKHZhciBqID0gcDEubGVuZ3RoLTE7IGo+PTA7IGotPTEpe1xuICAgICAgICAgICAgICAgIGlmKCAoYy5ib2R5QSA9PT0gcDFbal0gJiYgYy5ib2R5QiA9PT0gcDJbal0pIHx8XG4gICAgICAgICAgICAgICAgICAgIChjLmJvZHlCID09PSBwMVtqXSAmJiBjLmJvZHlBID09PSBwMltqXSkpe1xuICAgICAgICAgICAgICAgICAgICBwMS5zcGxpY2UoaiwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHAyLnNwbGljZShqLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNvbGxpc2lvbk1hdHJpeFRpY2soKTtcblxuICAgIC8vIEdlbmVyYXRlIGNvbnRhY3RzXG4gICAgaWYoZG9Qcm9maWxpbmcpeyBwcm9maWxpbmdTdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpOyB9XG4gICAgdmFyIG9sZGNvbnRhY3RzID0gV29ybGRfc3RlcF9vbGRDb250YWN0cztcbiAgICB2YXIgTm9sZENvbnRhY3RzID0gY29udGFjdHMubGVuZ3RoO1xuXG4gICAgZm9yKGk9MDsgaSE9PU5vbGRDb250YWN0czsgaSsrKXtcbiAgICAgICAgb2xkY29udGFjdHMucHVzaChjb250YWN0c1tpXSk7XG4gICAgfVxuICAgIGNvbnRhY3RzLmxlbmd0aCA9IDA7XG5cbiAgICAvLyBUcmFuc2ZlciBGcmljdGlvbkVxdWF0aW9uIGZyb20gY3VycmVudCBsaXN0IHRvIHRoZSBwb29sIGZvciByZXVzZVxuICAgIHZhciBOb2xkRnJpY3Rpb25FcXVhdGlvbnMgPSB0aGlzLmZyaWN0aW9uRXF1YXRpb25zLmxlbmd0aDtcbiAgICBmb3IoaT0wOyBpIT09Tm9sZEZyaWN0aW9uRXF1YXRpb25zOyBpKyspe1xuICAgICAgICBmcmljdGlvbkVxdWF0aW9uUG9vbC5wdXNoKHRoaXMuZnJpY3Rpb25FcXVhdGlvbnNbaV0pO1xuICAgIH1cbiAgICB0aGlzLmZyaWN0aW9uRXF1YXRpb25zLmxlbmd0aCA9IDA7XG5cbiAgICB0aGlzLm5hcnJvd3BoYXNlLmdldENvbnRhY3RzKFxuICAgICAgICBwMSxcbiAgICAgICAgcDIsXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGNvbnRhY3RzLFxuICAgICAgICBvbGRjb250YWN0cywgLy8gVG8gYmUgcmV1c2VkXG4gICAgICAgIHRoaXMuZnJpY3Rpb25FcXVhdGlvbnMsXG4gICAgICAgIGZyaWN0aW9uRXF1YXRpb25Qb29sXG4gICAgKTtcblxuICAgIGlmKGRvUHJvZmlsaW5nKXtcbiAgICAgICAgcHJvZmlsZS5uYXJyb3dwaGFzZSA9IHBlcmZvcm1hbmNlLm5vdygpIC0gcHJvZmlsaW5nU3RhcnQ7XG4gICAgfVxuXG4gICAgLy8gTG9vcCBvdmVyIGFsbCBjb2xsaXNpb25zXG4gICAgaWYoZG9Qcm9maWxpbmcpe1xuICAgICAgICBwcm9maWxpbmdTdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH1cblxuICAgIC8vIEFkZCBhbGwgZnJpY3Rpb24gZXFzXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZyaWN0aW9uRXF1YXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHNvbHZlci5hZGRFcXVhdGlvbih0aGlzLmZyaWN0aW9uRXF1YXRpb25zW2ldKTtcbiAgICB9XG5cbiAgICB2YXIgbmNvbnRhY3RzID0gY29udGFjdHMubGVuZ3RoO1xuICAgIGZvcih2YXIgaz0wOyBrIT09bmNvbnRhY3RzOyBrKyspe1xuXG4gICAgICAgIC8vIEN1cnJlbnQgY29udGFjdFxuICAgICAgICB2YXIgYyA9IGNvbnRhY3RzW2tdO1xuXG4gICAgICAgIC8vIEdldCBjdXJyZW50IGNvbGxpc2lvbiBpbmRlY2VzXG4gICAgICAgIHZhciBiaSA9IGMuYmksXG4gICAgICAgICAgICBiaiA9IGMuYmosXG4gICAgICAgICAgICBzaSA9IGMuc2ksXG4gICAgICAgICAgICBzaiA9IGMuc2o7XG5cbiAgICAgICAgLy8gR2V0IGNvbGxpc2lvbiBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBjbTtcbiAgICAgICAgaWYoYmkubWF0ZXJpYWwgJiYgYmoubWF0ZXJpYWwpe1xuICAgICAgICAgICAgY20gPSB0aGlzLmdldENvbnRhY3RNYXRlcmlhbChiaS5tYXRlcmlhbCxiai5tYXRlcmlhbCkgfHwgdGhpcy5kZWZhdWx0Q29udGFjdE1hdGVyaWFsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY20gPSB0aGlzLmRlZmF1bHRDb250YWN0TWF0ZXJpYWw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjLmVuYWJsZWQgPSBiaS5jb2xsaXNpb25SZXNwb25zZSAmJiBiai5jb2xsaXNpb25SZXNwb25zZSAmJiBzaS5jb2xsaXNpb25SZXNwb25zZSAmJiBzai5jb2xsaXNpb25SZXNwb25zZTtcblxuICAgICAgICB2YXIgbXUgPSBjbS5mcmljdGlvbjtcbiAgICAgICAgLy8gYy5yZXN0aXR1dGlvbiA9IGNtLnJlc3RpdHV0aW9uO1xuXG4gICAgICAgIC8vIElmIGZyaWN0aW9uIG9yIHJlc3RpdHV0aW9uIHdlcmUgc3BlY2lmaWVkIGluIHRoZSBtYXRlcmlhbCwgdXNlIHRoZW1cbiAgICAgICAgaWYoYmkubWF0ZXJpYWwgJiYgYmoubWF0ZXJpYWwpe1xuICAgICAgICAgICAgaWYoYmkubWF0ZXJpYWwuZnJpY3Rpb24gPj0gMCAmJiBiai5tYXRlcmlhbC5mcmljdGlvbiA+PSAwKXtcbiAgICAgICAgICAgICAgICBtdSA9IGJpLm1hdGVyaWFsLmZyaWN0aW9uICogYmoubWF0ZXJpYWwuZnJpY3Rpb247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKGJpLm1hdGVyaWFsLnJlc3RpdHV0aW9uID49IDAgJiYgYmoubWF0ZXJpYWwucmVzdGl0dXRpb24gPj0gMCl7XG4gICAgICAgICAgICAgICAgYy5yZXN0aXR1dGlvbiA9IGJpLm1hdGVyaWFsLnJlc3RpdHV0aW9uICogYmoubWF0ZXJpYWwucmVzdGl0dXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHRcdC8vIGMuc2V0U3Bvb2tQYXJhbXMoXG4gIC8vICAgICAgICAgICBjbS5jb250YWN0RXF1YXRpb25TdGlmZm5lc3MsXG4gIC8vICAgICAgICAgICBjbS5jb250YWN0RXF1YXRpb25SZWxheGF0aW9uLFxuICAvLyAgICAgICAgICAgZHRcbiAgLy8gICAgICAgKTtcblxuXHRcdHNvbHZlci5hZGRFcXVhdGlvbihjKTtcblxuXHRcdC8vIC8vIEFkZCBmcmljdGlvbiBjb25zdHJhaW50IGVxdWF0aW9uXG5cdFx0Ly8gaWYobXUgPiAwKXtcblxuXHRcdC8vIFx0Ly8gQ3JlYXRlIDIgdGFuZ2VudCBlcXVhdGlvbnNcblx0XHQvLyBcdHZhciBtdWcgPSBtdSAqIGdub3JtO1xuXHRcdC8vIFx0dmFyIHJlZHVjZWRNYXNzID0gKGJpLmludk1hc3MgKyBiai5pbnZNYXNzKTtcblx0XHQvLyBcdGlmKHJlZHVjZWRNYXNzID4gMCl7XG5cdFx0Ly8gXHRcdHJlZHVjZWRNYXNzID0gMS9yZWR1Y2VkTWFzcztcblx0XHQvLyBcdH1cblx0XHQvLyBcdHZhciBwb29sID0gZnJpY3Rpb25FcXVhdGlvblBvb2w7XG5cdFx0Ly8gXHR2YXIgYzEgPSBwb29sLmxlbmd0aCA/IHBvb2wucG9wKCkgOiBuZXcgRnJpY3Rpb25FcXVhdGlvbihiaSxiaixtdWcqcmVkdWNlZE1hc3MpO1xuXHRcdC8vIFx0dmFyIGMyID0gcG9vbC5sZW5ndGggPyBwb29sLnBvcCgpIDogbmV3IEZyaWN0aW9uRXF1YXRpb24oYmksYmosbXVnKnJlZHVjZWRNYXNzKTtcblx0XHQvLyBcdHRoaXMuZnJpY3Rpb25FcXVhdGlvbnMucHVzaChjMSwgYzIpO1xuXG5cdFx0Ly8gXHRjMS5iaSA9IGMyLmJpID0gYmk7XG5cdFx0Ly8gXHRjMS5iaiA9IGMyLmJqID0gYmo7XG5cdFx0Ly8gXHRjMS5taW5Gb3JjZSA9IGMyLm1pbkZvcmNlID0gLW11ZypyZWR1Y2VkTWFzcztcblx0XHQvLyBcdGMxLm1heEZvcmNlID0gYzIubWF4Rm9yY2UgPSBtdWcqcmVkdWNlZE1hc3M7XG5cblx0XHQvLyBcdC8vIENvcHkgb3ZlciB0aGUgcmVsYXRpdmUgdmVjdG9yc1xuXHRcdC8vIFx0YzEucmkuY29weShjLnJpKTtcblx0XHQvLyBcdGMxLnJqLmNvcHkoYy5yaik7XG5cdFx0Ly8gXHRjMi5yaS5jb3B5KGMucmkpO1xuXHRcdC8vIFx0YzIucmouY29weShjLnJqKTtcblxuXHRcdC8vIFx0Ly8gQ29uc3RydWN0IHRhbmdlbnRzXG5cdFx0Ly8gXHRjLm5pLnRhbmdlbnRzKGMxLnQsIGMyLnQpO1xuXG4gIC8vICAgICAgICAgICAvLyBTZXQgc3Bvb2sgcGFyYW1zXG4gIC8vICAgICAgICAgICBjMS5zZXRTcG9va1BhcmFtcyhjbS5mcmljdGlvbkVxdWF0aW9uU3RpZmZuZXNzLCBjbS5mcmljdGlvbkVxdWF0aW9uUmVsYXhhdGlvbiwgZHQpO1xuICAvLyAgICAgICAgICAgYzIuc2V0U3Bvb2tQYXJhbXMoY20uZnJpY3Rpb25FcXVhdGlvblN0aWZmbmVzcywgY20uZnJpY3Rpb25FcXVhdGlvblJlbGF4YXRpb24sIGR0KTtcblxuICAvLyAgICAgICAgICAgYzEuZW5hYmxlZCA9IGMyLmVuYWJsZWQgPSBjLmVuYWJsZWQ7XG5cblx0XHQvLyBcdC8vIEFkZCBlcXVhdGlvbnMgdG8gc29sdmVyXG5cdFx0Ly8gXHRzb2x2ZXIuYWRkRXF1YXRpb24oYzEpO1xuXHRcdC8vIFx0c29sdmVyLmFkZEVxdWF0aW9uKGMyKTtcblx0XHQvLyB9XG5cbiAgICAgICAgaWYoIGJpLmFsbG93U2xlZXAgJiZcbiAgICAgICAgICAgIGJpLnR5cGUgPT09IEJvZHkuRFlOQU1JQyAmJlxuICAgICAgICAgICAgYmkuc2xlZXBTdGF0ZSAgPT09IEJvZHkuU0xFRVBJTkcgJiZcbiAgICAgICAgICAgIGJqLnNsZWVwU3RhdGUgID09PSBCb2R5LkFXQUtFICYmXG4gICAgICAgICAgICBiai50eXBlICE9PSBCb2R5LlNUQVRJQ1xuICAgICAgICApe1xuICAgICAgICAgICAgdmFyIHNwZWVkU3F1YXJlZEIgPSBiai52ZWxvY2l0eS5ub3JtMigpICsgYmouYW5ndWxhclZlbG9jaXR5Lm5vcm0yKCk7XG4gICAgICAgICAgICB2YXIgc3BlZWRMaW1pdFNxdWFyZWRCID0gTWF0aC5wb3coYmouc2xlZXBTcGVlZExpbWl0LDIpO1xuICAgICAgICAgICAgaWYoc3BlZWRTcXVhcmVkQiA+PSBzcGVlZExpbWl0U3F1YXJlZEIqMil7XG4gICAgICAgICAgICAgICAgYmkuX3dha2VVcEFmdGVyTmFycm93cGhhc2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYoIGJqLmFsbG93U2xlZXAgJiZcbiAgICAgICAgICAgIGJqLnR5cGUgPT09IEJvZHkuRFlOQU1JQyAmJlxuICAgICAgICAgICAgYmouc2xlZXBTdGF0ZSAgPT09IEJvZHkuU0xFRVBJTkcgJiZcbiAgICAgICAgICAgIGJpLnNsZWVwU3RhdGUgID09PSBCb2R5LkFXQUtFICYmXG4gICAgICAgICAgICBiaS50eXBlICE9PSBCb2R5LlNUQVRJQ1xuICAgICAgICApe1xuICAgICAgICAgICAgdmFyIHNwZWVkU3F1YXJlZEEgPSBiaS52ZWxvY2l0eS5ub3JtMigpICsgYmkuYW5ndWxhclZlbG9jaXR5Lm5vcm0yKCk7XG4gICAgICAgICAgICB2YXIgc3BlZWRMaW1pdFNxdWFyZWRBID0gTWF0aC5wb3coYmkuc2xlZXBTcGVlZExpbWl0LDIpO1xuICAgICAgICAgICAgaWYoc3BlZWRTcXVhcmVkQSA+PSBzcGVlZExpbWl0U3F1YXJlZEEqMil7XG4gICAgICAgICAgICAgICAgYmouX3dha2VVcEFmdGVyTmFycm93cGhhc2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm93IHdlIGtub3cgdGhhdCBpIGFuZCBqIGFyZSBpbiBjb250YWN0LiBTZXQgY29sbGlzaW9uIG1hdHJpeCBzdGF0ZVxuXHRcdHRoaXMuY29sbGlzaW9uTWF0cml4LnNldChiaSwgYmosIHRydWUpO1xuXG4gICAgICAgIGlmICghdGhpcy5jb2xsaXNpb25NYXRyaXhQcmV2aW91cy5nZXQoYmksIGJqKSkge1xuICAgICAgICAgICAgLy8gRmlyc3QgY29udGFjdCFcbiAgICAgICAgICAgIC8vIFdlIHJldXNlIHRoZSBjb2xsaWRlRXZlbnQgb2JqZWN0LCBvdGhlcndpc2Ugd2Ugd2lsbCBlbmQgdXAgY3JlYXRpbmcgbmV3IG9iamVjdHMgZm9yIGVhY2ggbmV3IGNvbnRhY3QsIGV2ZW4gaWYgdGhlcmUncyBubyBldmVudCBsaXN0ZW5lciBhdHRhY2hlZC5cbiAgICAgICAgICAgIFdvcmxkX3N0ZXBfY29sbGlkZUV2ZW50LmJvZHkgPSBiajtcbiAgICAgICAgICAgIFdvcmxkX3N0ZXBfY29sbGlkZUV2ZW50LmNvbnRhY3QgPSBjO1xuICAgICAgICAgICAgYmkuZGlzcGF0Y2hFdmVudChXb3JsZF9zdGVwX2NvbGxpZGVFdmVudCk7XG5cbiAgICAgICAgICAgIFdvcmxkX3N0ZXBfY29sbGlkZUV2ZW50LmJvZHkgPSBiaTtcbiAgICAgICAgICAgIGJqLmRpc3BhdGNoRXZlbnQoV29ybGRfc3RlcF9jb2xsaWRlRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmKGRvUHJvZmlsaW5nKXtcbiAgICAgICAgcHJvZmlsZS5tYWtlQ29udGFjdENvbnN0cmFpbnRzID0gcGVyZm9ybWFuY2Uubm93KCkgLSBwcm9maWxpbmdTdGFydDtcbiAgICAgICAgcHJvZmlsaW5nU3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9XG5cbiAgICAvLyBXYWtlIHVwIGJvZGllc1xuICAgIGZvcihpPTA7IGkhPT1OOyBpKyspe1xuICAgICAgICB2YXIgYmkgPSBib2RpZXNbaV07XG4gICAgICAgIGlmKGJpLl93YWtlVXBBZnRlck5hcnJvd3BoYXNlKXtcbiAgICAgICAgICAgIGJpLndha2VVcCgpO1xuICAgICAgICAgICAgYmkuX3dha2VVcEFmdGVyTmFycm93cGhhc2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCB1c2VyLWFkZGVkIGNvbnN0cmFpbnRzXG4gICAgdmFyIE5jb25zdHJhaW50cyA9IGNvbnN0cmFpbnRzLmxlbmd0aDtcbiAgICBmb3IoaT0wOyBpIT09TmNvbnN0cmFpbnRzOyBpKyspe1xuICAgICAgICB2YXIgYyA9IGNvbnN0cmFpbnRzW2ldO1xuICAgICAgICBjLnVwZGF0ZSgpO1xuICAgICAgICBmb3IodmFyIGo9MCwgTmVxPWMuZXF1YXRpb25zLmxlbmd0aDsgaiE9PU5lcTsgaisrKXtcbiAgICAgICAgICAgIHZhciBlcSA9IGMuZXF1YXRpb25zW2pdO1xuICAgICAgICAgICAgc29sdmVyLmFkZEVxdWF0aW9uKGVxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNvbHZlIHRoZSBjb25zdHJhaW5lZCBzeXN0ZW1cbiAgICBzb2x2ZXIuc29sdmUoZHQsdGhpcyk7XG5cbiAgICBpZihkb1Byb2ZpbGluZyl7XG4gICAgICAgIHByb2ZpbGUuc29sdmUgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHByb2ZpbGluZ1N0YXJ0O1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBhbGwgY29udGFjdHMgZnJvbSBzb2x2ZXJcbiAgICBzb2x2ZXIucmVtb3ZlQWxsRXF1YXRpb25zKCk7XG5cbiAgICAvLyBBcHBseSBkYW1waW5nLCBzZWUgaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2J1bGxldC9pc3N1ZXMvZGV0YWlsP2lkPTc0IGZvciBkZXRhaWxzXG4gICAgdmFyIHBvdyA9IE1hdGgucG93O1xuICAgIGZvcihpPTA7IGkhPT1OOyBpKyspe1xuICAgICAgICB2YXIgYmkgPSBib2RpZXNbaV07XG4gICAgICAgIGlmKGJpLnR5cGUgJiBEWU5BTUlDKXsgLy8gT25seSBmb3IgZHluYW1pYyBib2RpZXNcbiAgICAgICAgICAgIHZhciBsZCA9IHBvdygxLjAgLSBiaS5saW5lYXJEYW1waW5nLGR0KTtcbiAgICAgICAgICAgIHZhciB2ID0gYmkudmVsb2NpdHk7XG4gICAgICAgICAgICB2Lm11bHQobGQsdik7XG4gICAgICAgICAgICB2YXIgYXYgPSBiaS5hbmd1bGFyVmVsb2NpdHk7XG4gICAgICAgICAgICBpZihhdil7XG4gICAgICAgICAgICAgICAgdmFyIGFkID0gcG93KDEuMCAtIGJpLmFuZ3VsYXJEYW1waW5nLGR0KTtcbiAgICAgICAgICAgICAgICBhdi5tdWx0KGFkLGF2KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChXb3JsZF9zdGVwX3ByZVN0ZXBFdmVudCk7XG5cbiAgICAvLyBJbnZva2UgcHJlLXN0ZXAgY2FsbGJhY2tzXG4gICAgZm9yKGk9MDsgaSE9PU47IGkrKyl7XG4gICAgICAgIHZhciBiaSA9IGJvZGllc1tpXTtcbiAgICAgICAgaWYoYmkucHJlU3RlcCl7XG4gICAgICAgICAgICBiaS5wcmVTdGVwLmNhbGwoYmkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGVhcCBmcm9nXG4gICAgLy8gdm5ldyA9IHYgKyBoKmYvbVxuICAgIC8vIHhuZXcgPSB4ICsgaCp2bmV3XG4gICAgaWYoZG9Qcm9maWxpbmcpe1xuICAgICAgICBwcm9maWxpbmdTdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH1cbiAgICB2YXIgcSA9IFdvcmxkX3N0ZXBfc3RlcF9xO1xuICAgIHZhciB3ID0gV29ybGRfc3RlcF9zdGVwX3c7XG4gICAgdmFyIHdxID0gV29ybGRfc3RlcF9zdGVwX3dxO1xuICAgIHZhciBzdGVwbnVtYmVyID0gdGhpcy5zdGVwbnVtYmVyO1xuICAgIHZhciBEWU5BTUlDX09SX0tJTkVNQVRJQyA9IEJvZHkuRFlOQU1JQyB8IEJvZHkuS0lORU1BVElDO1xuICAgIHZhciBxdWF0Tm9ybWFsaXplID0gc3RlcG51bWJlciAlICh0aGlzLnF1YXROb3JtYWxpemVTa2lwKzEpID09PSAwO1xuICAgIHZhciBxdWF0Tm9ybWFsaXplRmFzdCA9IHRoaXMucXVhdE5vcm1hbGl6ZUZhc3Q7XG4gICAgdmFyIGhhbGZfZHQgPSBkdCAqIDAuNTtcbiAgICB2YXIgUExBTkUgPSBTaGFwZS50eXBlcy5QTEFORSxcbiAgICAgICAgQ09OVkVYID0gU2hhcGUudHlwZXMuQ09OVkVYUE9MWUhFRFJPTjtcblxuICAgIGZvcihpPTA7IGkhPT1OOyBpKyspe1xuICAgICAgICB2YXIgYiA9IGJvZGllc1tpXSxcbiAgICAgICAgICAgIGZvcmNlID0gYi5mb3JjZSxcbiAgICAgICAgICAgIHRhdSA9IGIudG9ycXVlO1xuICAgICAgICBpZigoYi50eXBlICYgRFlOQU1JQ19PUl9LSU5FTUFUSUMpICYmIGIuc2xlZXBTdGF0ZSAhPT0gQm9keS5TTEVFUElORyl7IC8vIE9ubHkgZm9yIGR5bmFtaWNcbiAgICAgICAgICAgIHZhciB2ZWxvID0gYi52ZWxvY2l0eSxcbiAgICAgICAgICAgICAgICBhbmd1bGFyVmVsbyA9IGIuYW5ndWxhclZlbG9jaXR5LFxuICAgICAgICAgICAgICAgIHBvcyA9IGIucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgcXVhdCA9IGIucXVhdGVybmlvbixcbiAgICAgICAgICAgICAgICBpbnZNYXNzID0gYi5pbnZNYXNzLFxuICAgICAgICAgICAgICAgIGludkluZXJ0aWEgPSBiLmludkluZXJ0aWFXb3JsZDtcblxuICAgICAgICAgICAgdmVsby54ICs9IGZvcmNlLnggKiBpbnZNYXNzICogZHQ7XG4gICAgICAgICAgICB2ZWxvLnkgKz0gZm9yY2UueSAqIGludk1hc3MgKiBkdDtcbiAgICAgICAgICAgIHZlbG8ueiArPSBmb3JjZS56ICogaW52TWFzcyAqIGR0O1xuXG4gICAgICAgICAgICBpZihiLmFuZ3VsYXJWZWxvY2l0eSl7XG4gICAgICAgICAgICAgICAgaW52SW5lcnRpYS52bXVsdCh0YXUsaW52SV90YXVfZHQpO1xuICAgICAgICAgICAgICAgIGludklfdGF1X2R0Lm11bHQoZHQsaW52SV90YXVfZHQpO1xuICAgICAgICAgICAgICAgIGludklfdGF1X2R0LnZhZGQoYW5ndWxhclZlbG8sYW5ndWxhclZlbG8pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgbmV3IHZlbG9jaXR5ICAtIGxlYXAgZnJvZ1xuICAgICAgICAgICAgcG9zLnggKz0gdmVsby54ICogZHQ7XG4gICAgICAgICAgICBwb3MueSArPSB2ZWxvLnkgKiBkdDtcbiAgICAgICAgICAgIHBvcy56ICs9IHZlbG8ueiAqIGR0O1xuXG4gICAgICAgICAgICBpZihiLmFuZ3VsYXJWZWxvY2l0eSl7XG4gICAgICAgICAgICAgICAgdy5zZXQoYW5ndWxhclZlbG8ueCwgYW5ndWxhclZlbG8ueSwgYW5ndWxhclZlbG8ueiwgMCk7XG4gICAgICAgICAgICAgICAgdy5tdWx0KHF1YXQsd3EpO1xuICAgICAgICAgICAgICAgIHF1YXQueCArPSBoYWxmX2R0ICogd3EueDtcbiAgICAgICAgICAgICAgICBxdWF0LnkgKz0gaGFsZl9kdCAqIHdxLnk7XG4gICAgICAgICAgICAgICAgcXVhdC56ICs9IGhhbGZfZHQgKiB3cS56O1xuICAgICAgICAgICAgICAgIHF1YXQudyArPSBoYWxmX2R0ICogd3EudztcbiAgICAgICAgICAgICAgICBpZihxdWF0Tm9ybWFsaXplKXtcbiAgICAgICAgICAgICAgICAgICAgaWYocXVhdE5vcm1hbGl6ZUZhc3Qpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVhdC5ub3JtYWxpemVGYXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWF0Lm5vcm1hbGl6ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihiLmFhYmIpe1xuICAgICAgICAgICAgICAgIGIuYWFiYk5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHdvcmxkIGluZXJ0aWFcbiAgICAgICAgICAgIGlmKGIudXBkYXRlSW5lcnRpYVdvcmxkKXtcbiAgICAgICAgICAgICAgICBiLnVwZGF0ZUluZXJ0aWFXb3JsZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuY2xlYXJGb3JjZXMoKTtcblxuICAgIHRoaXMuYnJvYWRwaGFzZS5kaXJ0eSA9IHRydWU7XG5cbiAgICBpZihkb1Byb2ZpbGluZyl7XG4gICAgICAgIHByb2ZpbGUuaW50ZWdyYXRlID0gcGVyZm9ybWFuY2Uubm93KCkgLSBwcm9maWxpbmdTdGFydDtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgd29ybGQgdGltZVxuICAgIHRoaXMudGltZSArPSBkdDtcbiAgICB0aGlzLnN0ZXBudW1iZXIgKz0gMTtcblxuICAgIHRoaXMuZGlzcGF0Y2hFdmVudChXb3JsZF9zdGVwX3Bvc3RTdGVwRXZlbnQpO1xuXG4gICAgLy8gSW52b2tlIHBvc3Qtc3RlcCBjYWxsYmFja3NcbiAgICBmb3IoaT0wOyBpIT09TjsgaSsrKXtcbiAgICAgICAgdmFyIGJpID0gYm9kaWVzW2ldO1xuICAgICAgICB2YXIgcG9zdFN0ZXAgPSBiaS5wb3N0U3RlcDtcbiAgICAgICAgaWYocG9zdFN0ZXApe1xuICAgICAgICAgICAgcG9zdFN0ZXAuY2FsbChiaSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTbGVlcGluZyB1cGRhdGVcbiAgICBpZih0aGlzLmFsbG93U2xlZXApe1xuICAgICAgICBmb3IoaT0wOyBpIT09TjsgaSsrKXtcbiAgICAgICAgICAgIGJvZGllc1tpXS5zbGVlcFRpY2sodGhpcy50aW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8qKlxuICogU2V0cyBhbGwgYm9keSBmb3JjZXMgaW4gdGhlIHdvcmxkIHRvIHplcm8uXG4gKiBAbWV0aG9kIGNsZWFyRm9yY2VzXG4gKi9cbldvcmxkLnByb3RvdHlwZS5jbGVhckZvcmNlcyA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIGJvZGllcyA9IHRoaXMuYm9kaWVzO1xuICAgIHZhciBOID0gYm9kaWVzLmxlbmd0aDtcbiAgICBmb3IodmFyIGk9MDsgaSAhPT0gTjsgaSsrKXtcbiAgICAgICAgdmFyIGIgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICBmb3JjZSA9IGIuZm9yY2UsXG4gICAgICAgICAgICB0YXUgPSBiLnRvcnF1ZTtcblxuICAgICAgICBiLmZvcmNlLnNldCgwLDAsMCk7XG4gICAgICAgIGIudG9ycXVlLnNldCgwLDAsMCk7XG4gICAgfVxufTtcblxufSx7XCIuLi9jb2xsaXNpb24vQUFCQlwiOjMsXCIuLi9jb2xsaXNpb24vQXJyYXlDb2xsaXNpb25NYXRyaXhcIjo0LFwiLi4vY29sbGlzaW9uL05haXZlQnJvYWRwaGFzZVwiOjcsXCIuLi9jb2xsaXNpb24vUmF5XCI6OSxcIi4uL2NvbGxpc2lvbi9SYXljYXN0UmVzdWx0XCI6MTAsXCIuLi9lcXVhdGlvbnMvQ29udGFjdEVxdWF0aW9uXCI6MTksXCIuLi9lcXVhdGlvbnMvRnJpY3Rpb25FcXVhdGlvblwiOjIxLFwiLi4vbWF0ZXJpYWwvQ29udGFjdE1hdGVyaWFsXCI6MjQsXCIuLi9tYXRlcmlhbC9NYXRlcmlhbFwiOjI1LFwiLi4vbWF0aC9RdWF0ZXJuaW9uXCI6MjgsXCIuLi9tYXRoL1ZlYzNcIjozMCxcIi4uL29iamVjdHMvQm9keVwiOjMxLFwiLi4vc2hhcGVzL1NoYXBlXCI6NDMsXCIuLi9zb2x2ZXIvR1NTb2x2ZXJcIjo0NixcIi4uL3V0aWxzL0V2ZW50VGFyZ2V0XCI6NDksXCIuLi91dGlscy9UdXBsZURpY3Rpb25hcnlcIjo1MixcIi4uL3V0aWxzL1ZlYzNQb29sXCI6NTQsXCIuL05hcnJvd3BoYXNlXCI6NTV9XX0se30sWzJdKVxuKDIpXG59KTsiLCIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoQykgTWljcm9zb2Z0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXG50aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZVxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVEhJUyBDT0RFIElTIFBST1ZJREVEIE9OIEFOICpBUyBJUyogQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcbk1FUkNIQU5UQUJMSVRZIE9SIE5PTi1JTkZSSU5HRU1FTlQuXG5cblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xuYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbnZhciBSZWZsZWN0O1xuKGZ1bmN0aW9uIChSZWZsZWN0KSB7XG4gICAgLy8gTWV0YWRhdGEgUHJvcG9zYWxcbiAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhL1xuICAgIChmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICAgICB2YXIgcm9vdCA9IHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiID8gZ2xvYmFsVGhpcyA6XG4gICAgICAgICAgICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgICAgICAgICAgICAgICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOlxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcyA9PT0gXCJvYmplY3RcIiA/IHRoaXMgOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvcHB5TW9kZVRoaXMoKTtcbiAgICAgICAgdmFyIGV4cG9ydGVyID0gbWFrZUV4cG9ydGVyKFJlZmxlY3QpO1xuICAgICAgICBpZiAodHlwZW9mIHJvb3QuUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgZXhwb3J0ZXIgPSBtYWtlRXhwb3J0ZXIocm9vdC5SZWZsZWN0LCBleHBvcnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZmFjdG9yeShleHBvcnRlciwgcm9vdCk7XG4gICAgICAgIGlmICh0eXBlb2Ygcm9vdC5SZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByb290LlJlZmxlY3QgPSBSZWZsZWN0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG1ha2VFeHBvcnRlcih0YXJnZXQsIHByZXZpb3VzKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHsgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuICAgICAgICAgICAgICAgIGlmIChwcmV2aW91cylcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGZ1bmN0aW9uVGhpcygpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uKFwicmV0dXJuIHRoaXM7XCIpKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoXykgeyB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaW5kaXJlY3RFdmFsVGhpcygpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2b2lkIDAsIGV2YWwpKFwiKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSkoKVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfKSB7IH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzbG9wcHlNb2RlVGhpcygpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvblRoaXMoKSB8fCBpbmRpcmVjdEV2YWxUaGlzKCk7XG4gICAgICAgIH1cbiAgICB9KShmdW5jdGlvbiAoZXhwb3J0ZXIsIHJvb3QpIHtcbiAgICAgICAgdmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG4gICAgICAgIC8vIGZlYXR1cmUgdGVzdCBmb3IgU3ltYm9sIHN1cHBvcnRcbiAgICAgICAgdmFyIHN1cHBvcnRzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiO1xuICAgICAgICB2YXIgdG9QcmltaXRpdmVTeW1ib2wgPSBzdXBwb3J0c1N5bWJvbCAmJiB0eXBlb2YgU3ltYm9sLnRvUHJpbWl0aXZlICE9PSBcInVuZGVmaW5lZFwiID8gU3ltYm9sLnRvUHJpbWl0aXZlIDogXCJAQHRvUHJpbWl0aXZlXCI7XG4gICAgICAgIHZhciBpdGVyYXRvclN5bWJvbCA9IHN1cHBvcnRzU3ltYm9sICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgIT09IFwidW5kZWZpbmVkXCIgPyBTeW1ib2wuaXRlcmF0b3IgOiBcIkBAaXRlcmF0b3JcIjtcbiAgICAgICAgdmFyIHN1cHBvcnRzQ3JlYXRlID0gdHlwZW9mIE9iamVjdC5jcmVhdGUgPT09IFwiZnVuY3Rpb25cIjsgLy8gZmVhdHVyZSB0ZXN0IGZvciBPYmplY3QuY3JlYXRlIHN1cHBvcnRcbiAgICAgICAgdmFyIHN1cHBvcnRzUHJvdG8gPSB7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5OyAvLyBmZWF0dXJlIHRlc3QgZm9yIF9fcHJvdG9fXyBzdXBwb3J0XG4gICAgICAgIHZhciBkb3duTGV2ZWwgPSAhc3VwcG9ydHNDcmVhdGUgJiYgIXN1cHBvcnRzUHJvdG87XG4gICAgICAgIHZhciBIYXNoTWFwID0ge1xuICAgICAgICAgICAgLy8gY3JlYXRlIGFuIG9iamVjdCBpbiBkaWN0aW9uYXJ5IG1vZGUgKGEuay5hLiBcInNsb3dcIiBtb2RlIGluIHY4KVxuICAgICAgICAgICAgY3JlYXRlOiBzdXBwb3J0c0NyZWF0ZVxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gTWFrZURpY3Rpb25hcnkoT2JqZWN0LmNyZWF0ZShudWxsKSk7IH1cbiAgICAgICAgICAgICAgICA6IHN1cHBvcnRzUHJvdG9cbiAgICAgICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBNYWtlRGljdGlvbmFyeSh7IF9fcHJvdG9fXzogbnVsbCB9KTsgfVxuICAgICAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1ha2VEaWN0aW9uYXJ5KHt9KTsgfSxcbiAgICAgICAgICAgIGhhczogZG93bkxldmVsXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbiAobWFwLCBrZXkpIHsgcmV0dXJuIGhhc093bi5jYWxsKG1hcCwga2V5KTsgfVxuICAgICAgICAgICAgICAgIDogZnVuY3Rpb24gKG1hcCwga2V5KSB7IHJldHVybiBrZXkgaW4gbWFwOyB9LFxuICAgICAgICAgICAgZ2V0OiBkb3duTGV2ZWxcbiAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gaGFzT3duLmNhbGwobWFwLCBrZXkpID8gbWFwW2tleV0gOiB1bmRlZmluZWQ7IH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uIChtYXAsIGtleSkgeyByZXR1cm4gbWFwW2tleV07IH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIExvYWQgZ2xvYmFsIG9yIHNoaW0gdmVyc2lvbnMgb2YgTWFwLCBTZXQsIGFuZCBXZWFrTWFwXG4gICAgICAgIHZhciBmdW5jdGlvblByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihGdW5jdGlvbik7XG4gICAgICAgIHZhciBfTWFwID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBNYXAucHJvdG90eXBlLmVudHJpZXMgPT09IFwiZnVuY3Rpb25cIiA/IE1hcCA6IENyZWF0ZU1hcFBvbHlmaWxsKCk7XG4gICAgICAgIHZhciBfU2V0ID0gdHlwZW9mIFNldCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTZXQucHJvdG90eXBlLmVudHJpZXMgPT09IFwiZnVuY3Rpb25cIiA/IFNldCA6IENyZWF0ZVNldFBvbHlmaWxsKCk7XG4gICAgICAgIHZhciBfV2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSBcImZ1bmN0aW9uXCIgPyBXZWFrTWFwIDogQ3JlYXRlV2Vha01hcFBvbHlmaWxsKCk7XG4gICAgICAgIHZhciByZWdpc3RyeVN5bWJvbCA9IHN1cHBvcnRzU3ltYm9sID8gU3ltYm9sLmZvcihcIkByZWZsZWN0LW1ldGFkYXRhOnJlZ2lzdHJ5XCIpIDogdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbWV0YWRhdGFSZWdpc3RyeSA9IEdldE9yQ3JlYXRlTWV0YWRhdGFSZWdpc3RyeSgpO1xuICAgICAgICB2YXIgbWV0YWRhdGFQcm92aWRlciA9IENyZWF0ZU1ldGFkYXRhUHJvdmlkZXIobWV0YWRhdGFSZWdpc3RyeSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBcHBsaWVzIGEgc2V0IG9mIGRlY29yYXRvcnMgdG8gYSBwcm9wZXJ0eSBvZiBhIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSBkZWNvcmF0b3JzIEFuIGFycmF5IG9mIGRlY29yYXRvcnMuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgdG8gZGVjb3JhdGUuXG4gICAgICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVzIChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgZm9yIHRoZSB0YXJnZXQga2V5LlxuICAgICAgICAgKiBAcmVtYXJrcyBEZWNvcmF0b3JzIGFyZSBhcHBsaWVkIGluIHJldmVyc2Ugb3JkZXIuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIEV4YW1wbGUgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnNBcnJheSwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIsXG4gICAgICAgICAqICAgICAgICAgUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzQXJyYXksIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIsXG4gICAgICAgICAqICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIikpKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiLFxuICAgICAgICAgKiAgICAgICAgIFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9yc0FycmF5LCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIixcbiAgICAgICAgICogICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIikpKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJc0FycmF5KGRlY29yYXRvcnMpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChhdHRyaWJ1dGVzKSAmJiAhSXNVbmRlZmluZWQoYXR0cmlidXRlcykgJiYgIUlzTnVsbChhdHRyaWJ1dGVzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmIChJc051bGwoYXR0cmlidXRlcykpXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGVjb3JhdGVQcm9wZXJ0eShkZWNvcmF0b3JzLCB0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghSXNBcnJheShkZWNvcmF0b3JzKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIGlmICghSXNDb25zdHJ1Y3Rvcih0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIERlY29yYXRlQ29uc3RydWN0b3IoZGVjb3JhdG9ycywgdGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImRlY29yYXRlXCIsIGRlY29yYXRlKTtcbiAgICAgICAgLy8gNC4xLjIgUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSlcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jcmVmbGVjdC5tZXRhZGF0YVxuICAgICAgICAvKipcbiAgICAgICAgICogQSBkZWZhdWx0IG1ldGFkYXRhIGRlY29yYXRvciBmYWN0b3J5IHRoYXQgY2FuIGJlIHVzZWQgb24gYSBjbGFzcywgY2xhc3MgbWVtYmVyLCBvciBwYXJhbWV0ZXIuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBUaGUga2V5IGZvciB0aGUgbWV0YWRhdGEgZW50cnkuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YVZhbHVlIFRoZSB2YWx1ZSBmb3IgdGhlIG1ldGFkYXRhIGVudHJ5LlxuICAgICAgICAgKiBAcmV0dXJucyBBIGRlY29yYXRvciBmdW5jdGlvbi5cbiAgICAgICAgICogQHJlbWFya3NcbiAgICAgICAgICogSWYgYG1ldGFkYXRhS2V5YCBpcyBhbHJlYWR5IGRlZmluZWQgZm9yIHRoZSB0YXJnZXQgYW5kIHRhcmdldCBrZXksIHRoZVxuICAgICAgICAgKiBtZXRhZGF0YVZhbHVlIGZvciB0aGF0IGtleSB3aWxsIGJlIG92ZXJ3cml0dGVuLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvciwgVHlwZVNjcmlwdCBvbmx5KVxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgQFJlZmxlY3QubWV0YWRhdGEoa2V5LCB2YWx1ZSlcbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlLCBUeXBlU2NyaXB0IG9ubHkpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgICAgIHByb3BlcnR5O1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIEBSZWZsZWN0Lm1ldGFkYXRhKGtleSwgdmFsdWUpXG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZCgpIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICBAUmVmbGVjdC5tZXRhZGF0YShrZXksIHZhbHVlKVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZCgpIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkgJiYgIUlzUHJvcGVydHlLZXkocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVjb3JhdG9yO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwibWV0YWRhdGFcIiwgbWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVmaW5lIGEgdW5pcXVlIG1ldGFkYXRhIGVudHJ5IG9uIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIG1ldGFkYXRhVmFsdWUgQSB2YWx1ZSB0aGF0IGNvbnRhaW5zIGF0dGFjaGVkIG1ldGFkYXRhLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRvIGRlZmluZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBvcHRpb25zLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIG9wdGlvbnMsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGRlY29yYXRvciBmYWN0b3J5IGFzIG1ldGFkYXRhLXByb2R1Y2luZyBhbm5vdGF0aW9uLlxuICAgICAgICAgKiAgICAgZnVuY3Rpb24gTXlBbm5vdGF0aW9uKG9wdGlvbnMpOiBEZWNvcmF0b3Ige1xuICAgICAgICAgKiAgICAgICAgIHJldHVybiAodGFyZ2V0LCBrZXk/KSA9PiBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgb3B0aW9ucywgdGFyZ2V0LCBrZXkpO1xuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiZGVmaW5lTWV0YWRhdGFcIiwgZGVmaW5lTWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluIGhhcyB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBtZXRhZGF0YSBrZXkgd2FzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3Qgb3IgaXRzIHByb3RvdHlwZSBjaGFpbjsgb3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNQcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5oYXNNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc01ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZS5wcm90b3R5cGUsIFwibWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpIHtcbiAgICAgICAgICAgIGlmICghSXNPYmplY3QodGFyZ2V0KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3BlcnR5S2V5KSlcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUtleSA9IFRvUHJvcGVydHlLZXkocHJvcGVydHlLZXkpO1xuICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGV4cG9ydGVyKFwiaGFzTWV0YWRhdGFcIiwgaGFzTWV0YWRhdGEpO1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyBhIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0aGUgdGFyZ2V0IG9iamVjdCBoYXMgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgbWV0YWRhdGEga2V5IHdhcyBkZWZpbmVkIG9uIHRoZSB0YXJnZXQgb2JqZWN0OyBvdGhlcndpc2UsIGBmYWxzZWAuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0Lmhhc093bk1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuaGFzT3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBoYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJoYXNPd25NZXRhZGF0YVwiLCBoYXNPd25NZXRhZGF0YSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIHByb3ZpZGVkIG1ldGFkYXRhIGtleSBvbiB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluLlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIG1ldGFkYXRhIGtleSBpZiBmb3VuZDsgb3RoZXJ3aXNlLCBgdW5kZWZpbmVkYC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImdldE1ldGFkYXRhXCIsIGdldE1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIG1ldGFkYXRhIHZhbHVlIGZvciB0aGUgcHJvdmlkZWQgbWV0YWRhdGEga2V5IG9uIHRoZSB0YXJnZXQgb2JqZWN0LlxuICAgICAgICAgKiBAcGFyYW0gbWV0YWRhdGFLZXkgQSBrZXkgdXNlZCB0byBzdG9yZSBhbmQgcmV0cmlldmUgbWV0YWRhdGEuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSBtZXRhZGF0YSB2YWx1ZSBmb3IgdGhlIG1ldGFkYXRhIGtleSBpZiBmb3VuZDsgb3RoZXJ3aXNlLCBgdW5kZWZpbmVkYC5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY01ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YShcImN1c3RvbTphbm5vdGF0aW9uXCIsIEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImdldE93bk1ldGFkYXRhXCIsIGdldE93bk1ldGFkYXRhKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIG1ldGFkYXRhIGtleXMgZGVmaW5lZCBvbiB0aGUgdGFyZ2V0IG9iamVjdCBvciBpdHMgcHJvdG90eXBlIGNoYWluLlxuICAgICAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgb2JqZWN0IG9uIHdoaWNoIHRoZSBtZXRhZGF0YSBpcyBkZWZpbmVkLlxuICAgICAgICAgKiBAcGFyYW0gcHJvcGVydHlLZXkgKE9wdGlvbmFsKSBUaGUgcHJvcGVydHkga2V5IGZvciB0aGUgdGFyZ2V0LlxuICAgICAgICAgKiBAcmV0dXJucyBBbiBhcnJheSBvZiB1bmlxdWUgbWV0YWRhdGEga2V5cy5cbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIGNsYXNzIEV4YW1wbGUge1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5IGRlY2xhcmF0aW9ucyBhcmUgbm90IHBhcnQgb2YgRVM2LCB0aG91Z2ggdGhleSBhcmUgdmFsaWQgaW4gVHlwZVNjcmlwdDpcbiAgICAgICAgICogICAgICAgICAvLyBzdGF0aWMgc3RhdGljUHJvcGVydHk7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAgICAgY29uc3RydWN0b3IocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgc3RhdGljIHN0YXRpY01ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgICAgICBtZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICB9XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBjb25zdHJ1Y3RvclxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRNZXRhZGF0YUtleXMoRXhhbXBsZSk7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcInByb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0TWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljTWV0aG9kXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gbWV0aG9kIChvbiBwcm90b3R5cGUpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE1ldGFkYXRhS2V5cyhFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlNZXRhZGF0YUtleXModGFyZ2V0LCBwcm9wZXJ0eUtleSk7XG4gICAgICAgIH1cbiAgICAgICAgZXhwb3J0ZXIoXCJnZXRNZXRhZGF0YUtleXNcIiwgZ2V0TWV0YWRhdGFLZXlzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgdGhlIHVuaXF1ZSBtZXRhZGF0YSBrZXlzIGRlZmluZWQgb24gdGhlIHRhcmdldCBvYmplY3QuXG4gICAgICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBvYmplY3Qgb24gd2hpY2ggdGhlIG1ldGFkYXRhIGlzIGRlZmluZWQuXG4gICAgICAgICAqIEBwYXJhbSBwcm9wZXJ0eUtleSAoT3B0aW9uYWwpIFRoZSBwcm9wZXJ0eSBrZXkgZm9yIHRoZSB0YXJnZXQuXG4gICAgICAgICAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHVuaXF1ZSBtZXRhZGF0YSBrZXlzLlxuICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgY2xhc3MgRXhhbXBsZSB7XG4gICAgICAgICAqICAgICAgICAgLy8gcHJvcGVydHkgZGVjbGFyYXRpb25zIGFyZSBub3QgcGFydCBvZiBFUzYsIHRob3VnaCB0aGV5IGFyZSB2YWxpZCBpbiBUeXBlU2NyaXB0OlxuICAgICAgICAgKiAgICAgICAgIC8vIHN0YXRpYyBzdGF0aWNQcm9wZXJ0eTtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgICAgICBjb25zdHJ1Y3RvcihwKSB7IH1cbiAgICAgICAgICogICAgICAgICBzdGF0aWMgc3RhdGljTWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIG1ldGhvZChwKSB7IH1cbiAgICAgICAgICogICAgIH1cbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIGNvbnN0cnVjdG9yXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cyhFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUsIFwic3RhdGljUHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBwcm9wZXJ0eSAob24gcHJvdG90eXBlKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZS5wcm90b3R5cGUsIFwicHJvcGVydHlcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIGNvbnN0cnVjdG9yKVxuICAgICAgICAgKiAgICAgcmVzdWx0ID0gUmVmbGVjdC5nZXRPd25NZXRhZGF0YUtleXMoRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZ2V0T3duTWV0YWRhdGFLZXlzKEV4YW1wbGUucHJvdG90eXBlLCBcIm1ldGhvZFwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyh0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImdldE93bk1ldGFkYXRhS2V5c1wiLCBnZXRPd25NZXRhZGF0YUtleXMpO1xuICAgICAgICAvKipcbiAgICAgICAgICogRGVsZXRlcyB0aGUgbWV0YWRhdGEgZW50cnkgZnJvbSB0aGUgdGFyZ2V0IG9iamVjdCB3aXRoIHRoZSBwcm92aWRlZCBrZXkuXG4gICAgICAgICAqIEBwYXJhbSBtZXRhZGF0YUtleSBBIGtleSB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBtZXRhZGF0YS5cbiAgICAgICAgICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IG9iamVjdCBvbiB3aGljaCB0aGUgbWV0YWRhdGEgaXMgZGVmaW5lZC5cbiAgICAgICAgICogQHBhcmFtIHByb3BlcnR5S2V5IChPcHRpb25hbCkgVGhlIHByb3BlcnR5IGtleSBmb3IgdGhlIHRhcmdldC5cbiAgICAgICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBtZXRhZGF0YSBlbnRyeSB3YXMgZm91bmQgYW5kIGRlbGV0ZWQ7IG90aGVyd2lzZSwgZmFsc2UuXG4gICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqICAgICBjbGFzcyBFeGFtcGxlIHtcbiAgICAgICAgICogICAgICAgICAvLyBwcm9wZXJ0eSBkZWNsYXJhdGlvbnMgYXJlIG5vdCBwYXJ0IG9mIEVTNiwgdGhvdWdoIHRoZXkgYXJlIHZhbGlkIGluIFR5cGVTY3JpcHQ6XG4gICAgICAgICAqICAgICAgICAgLy8gc3RhdGljIHN0YXRpY1Byb3BlcnR5O1xuICAgICAgICAgKiAgICAgICAgIC8vIHByb3BlcnR5O1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgICAgIGNvbnN0cnVjdG9yKHApIHsgfVxuICAgICAgICAgKiAgICAgICAgIHN0YXRpYyBzdGF0aWNNZXRob2QocCkgeyB9XG4gICAgICAgICAqICAgICAgICAgbWV0aG9kKHApIHsgfVxuICAgICAgICAgKiAgICAgfVxuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gY29uc3RydWN0b3JcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIHByb3BlcnR5IChvbiBjb25zdHJ1Y3RvcilcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLCBcInN0YXRpY1Byb3BlcnR5XCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiAgICAgLy8gcHJvcGVydHkgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJwcm9wZXJ0eVwiKTtcbiAgICAgICAgICpcbiAgICAgICAgICogICAgIC8vIG1ldGhvZCAob24gY29uc3RydWN0b3IpXG4gICAgICAgICAqICAgICByZXN1bHQgPSBSZWZsZWN0LmRlbGV0ZU1ldGFkYXRhKFwiY3VzdG9tOmFubm90YXRpb25cIiwgRXhhbXBsZSwgXCJzdGF0aWNNZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqICAgICAvLyBtZXRob2QgKG9uIHByb3RvdHlwZSlcbiAgICAgICAgICogICAgIHJlc3VsdCA9IFJlZmxlY3QuZGVsZXRlTWV0YWRhdGEoXCJjdXN0b206YW5ub3RhdGlvblwiLCBFeGFtcGxlLnByb3RvdHlwZSwgXCJtZXRob2RcIik7XG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgICAgICAgICAgaWYgKCFJc09iamVjdCh0YXJnZXQpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocHJvcGVydHlLZXkpKVxuICAgICAgICAgICAgICAgIHByb3BlcnR5S2V5ID0gVG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KHRhcmdldCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm9wZXJ0eUtleSkpXG4gICAgICAgICAgICAgICAgcHJvcGVydHlLZXkgPSBUb1Byb3BlcnR5S2V5KHByb3BlcnR5S2V5KTtcbiAgICAgICAgICAgIHZhciBwcm92aWRlciA9IEdldE1ldGFkYXRhUHJvdmlkZXIodGFyZ2V0LCBwcm9wZXJ0eUtleSwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQocHJvdmlkZXIpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBwcm92aWRlci5PcmRpbmFyeURlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQsIHByb3BlcnR5S2V5KTtcbiAgICAgICAgfVxuICAgICAgICBleHBvcnRlcihcImRlbGV0ZU1ldGFkYXRhXCIsIGRlbGV0ZU1ldGFkYXRhKTtcbiAgICAgICAgZnVuY3Rpb24gRGVjb3JhdGVDb25zdHJ1Y3RvcihkZWNvcmF0b3JzLCB0YXJnZXQpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlY29yYXRvciA9IGRlY29yYXRvcnNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGRlY29yYXRlZCA9IGRlY29yYXRvcih0YXJnZXQpO1xuICAgICAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQoZGVjb3JhdGVkKSAmJiAhSXNOdWxsKGRlY29yYXRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc0NvbnN0cnVjdG9yKGRlY29yYXRlZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IGRlY29yYXRlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIERlY29yYXRlUHJvcGVydHkoZGVjb3JhdG9ycywgdGFyZ2V0LCBwcm9wZXJ0eUtleSwgZGVzY3JpcHRvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdG9yID0gZGVjb3JhdG9yc1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgZGVjb3JhdGVkID0gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHlLZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQoZGVjb3JhdGVkKSAmJiAhSXNOdWxsKGRlY29yYXRlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChkZWNvcmF0ZWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yID0gZGVjb3JhdGVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS4xLjEgT3JkaW5hcnlIYXNNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnloYXNtZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgaGFzT3duID0gT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgICAgICBpZiAoaGFzT3duKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgdmFyIHBhcmVudCA9IE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTyk7XG4gICAgICAgICAgICBpZiAoIUlzTnVsbChwYXJlbnQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS4yLjEgT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnloYXNvd25tZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBHZXRNZXRhZGF0YVByb3ZpZGVyKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKHByb3ZpZGVyKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gVG9Cb29sZWFuKHByb3ZpZGVyLk9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuMy4xIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5Z2V0bWV0YWRhdGFcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgdmFyIGhhc093biA9IE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICAgICAgICAgICAgaWYgKGhhc093bilcbiAgICAgICAgICAgICAgICByZXR1cm4gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKTtcbiAgICAgICAgICAgIGlmICghSXNOdWxsKHBhcmVudCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS40LjEgT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlnZXRvd25tZXRhZGF0YVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBHZXRNZXRhZGF0YVByb3ZpZGVyKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKHByb3ZpZGVyKSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICByZXR1cm4gcHJvdmlkZXIuT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMy4xLjUuMSBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKVxuICAgICAgICAvLyBodHRwczovL3JidWNrdG9uLmdpdGh1Yi5pby9yZWZsZWN0LW1ldGFkYXRhLyNvcmRpbmFyeWRlZmluZW93bm1ldGFkYXRhXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgICAgICAgICAgIHZhciBwcm92aWRlciA9IEdldE1ldGFkYXRhUHJvdmlkZXIoTywgUCwgLypDcmVhdGUqLyB0cnVlKTtcbiAgICAgICAgICAgIHByb3ZpZGVyLk9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApO1xuICAgICAgICB9XG4gICAgICAgIC8vIDMuMS42LjEgT3JkaW5hcnlNZXRhZGF0YUtleXMoTywgUClcbiAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnltZXRhZGF0YWtleXNcbiAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlNZXRhZGF0YUtleXMoTywgUCkge1xuICAgICAgICAgICAgdmFyIG93bktleXMgPSBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnQgPSBPcmRpbmFyeUdldFByb3RvdHlwZU9mKE8pO1xuICAgICAgICAgICAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gb3duS2V5cztcbiAgICAgICAgICAgIHZhciBwYXJlbnRLZXlzID0gT3JkaW5hcnlNZXRhZGF0YUtleXMocGFyZW50LCBQKTtcbiAgICAgICAgICAgIGlmIChwYXJlbnRLZXlzLmxlbmd0aCA8PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBvd25LZXlzO1xuICAgICAgICAgICAgaWYgKG93bktleXMubGVuZ3RoIDw9IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEtleXM7XG4gICAgICAgICAgICB2YXIgc2V0ID0gbmV3IF9TZXQoKTtcbiAgICAgICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG93bktleXNfMSA9IG93bktleXM7IF9pIDwgb3duS2V5c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBvd25LZXlzXzFbX2ldO1xuICAgICAgICAgICAgICAgIHZhciBoYXNLZXkgPSBzZXQuaGFzKGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0LmFkZChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIHBhcmVudEtleXNfMSA9IHBhcmVudEtleXM7IF9hIDwgcGFyZW50S2V5c18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBwYXJlbnRLZXlzXzFbX2FdO1xuICAgICAgICAgICAgICAgIHZhciBoYXNLZXkgPSBzZXQuaGFzKGtleSk7XG4gICAgICAgICAgICAgICAgaWYgKCFoYXNLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0LmFkZChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ga2V5cztcbiAgICAgICAgfVxuICAgICAgICAvLyAzLjEuNy4xIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApXG4gICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5b3dubWV0YWRhdGFrZXlzXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApIHtcbiAgICAgICAgICAgIHZhciBwcm92aWRlciA9IEdldE1ldGFkYXRhUHJvdmlkZXIoTywgUCwgLypjcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoIXByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVyLk9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApO1xuICAgICAgICB9XG4gICAgICAgIC8vIDYgRUNNQVNjcmlwdCBEYXRhIFR5cGVzIGFuZCBWYWx1ZXNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1kYXRhLXR5cGVzLWFuZC12YWx1ZXNcbiAgICAgICAgZnVuY3Rpb24gVHlwZSh4KSB7XG4gICAgICAgICAgICBpZiAoeCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gMSAvKiBOdWxsICovO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgeCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjogcmV0dXJuIDAgLyogVW5kZWZpbmVkICovO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6IHJldHVybiAyIC8qIEJvb2xlYW4gKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiByZXR1cm4gMyAvKiBTdHJpbmcgKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcInN5bWJvbFwiOiByZXR1cm4gNCAvKiBTeW1ib2wgKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOiByZXR1cm4gNSAvKiBOdW1iZXIgKi87XG4gICAgICAgICAgICAgICAgY2FzZSBcIm9iamVjdFwiOiByZXR1cm4geCA9PT0gbnVsbCA/IDEgLyogTnVsbCAqLyA6IDYgLyogT2JqZWN0ICovO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiA2IC8qIE9iamVjdCAqLztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyA2LjEuMSBUaGUgVW5kZWZpbmVkIFR5cGVcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcy11bmRlZmluZWQtdHlwZVxuICAgICAgICBmdW5jdGlvbiBJc1VuZGVmaW5lZCh4KSB7XG4gICAgICAgICAgICByZXR1cm4geCA9PT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS4yIFRoZSBOdWxsIFR5cGVcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcy1udWxsLXR5cGVcbiAgICAgICAgZnVuY3Rpb24gSXNOdWxsKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID09PSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIDYuMS41IFRoZSBTeW1ib2wgVHlwZVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzLXN5bWJvbC10eXBlXG4gICAgICAgIGZ1bmN0aW9uIElzU3ltYm9sKHgpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA2LjEuNyBUaGUgT2JqZWN0IFR5cGVcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LXR5cGVcbiAgICAgICAgZnVuY3Rpb24gSXNPYmplY3QoeCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiID8geCAhPT0gbnVsbCA6IHR5cGVvZiB4ID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4xIFR5cGUgQ29udmVyc2lvblxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10eXBlLWNvbnZlcnNpb25cbiAgICAgICAgLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4gICAgICAgIGZ1bmN0aW9uIFRvUHJpbWl0aXZlKGlucHV0LCBQcmVmZXJyZWRUeXBlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKFR5cGUoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIFVuZGVmaW5lZCAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgMSAvKiBOdWxsICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSAyIC8qIEJvb2xlYW4gKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgICAgICBjYXNlIDMgLyogU3RyaW5nICovOiByZXR1cm4gaW5wdXQ7XG4gICAgICAgICAgICAgICAgY2FzZSA0IC8qIFN5bWJvbCAqLzogcmV0dXJuIGlucHV0O1xuICAgICAgICAgICAgICAgIGNhc2UgNSAvKiBOdW1iZXIgKi86IHJldHVybiBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoaW50ID0gUHJlZmVycmVkVHlwZSA9PT0gMyAvKiBTdHJpbmcgKi8gPyBcInN0cmluZ1wiIDogUHJlZmVycmVkVHlwZSA9PT0gNSAvKiBOdW1iZXIgKi8gPyBcIm51bWJlclwiIDogXCJkZWZhdWx0XCI7XG4gICAgICAgICAgICB2YXIgZXhvdGljVG9QcmltID0gR2V0TWV0aG9kKGlucHV0LCB0b1ByaW1pdGl2ZVN5bWJvbCk7XG4gICAgICAgICAgICBpZiAoZXhvdGljVG9QcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZXhvdGljVG9QcmltLmNhbGwoaW5wdXQsIGhpbnQpO1xuICAgICAgICAgICAgICAgIGlmIChJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBPcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBoaW50ID09PSBcImRlZmF1bHRcIiA/IFwibnVtYmVyXCIgOiBoaW50KTtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEuMS4xIE9yZGluYXJ5VG9QcmltaXRpdmUoTywgaGludClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxuICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeVRvUHJpbWl0aXZlKE8sIGhpbnQpIHtcbiAgICAgICAgICAgIGlmIChoaW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRvU3RyaW5nXzEgPSBPLnRvU3RyaW5nO1xuICAgICAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHRvU3RyaW5nXzEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0b1N0cmluZ18xLmNhbGwoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZU9mID0gTy52YWx1ZU9mO1xuICAgICAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHZhbHVlT2YpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWx1ZU9mLmNhbGwoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlT2YgPSBPLnZhbHVlT2Y7XG4gICAgICAgICAgICAgICAgaWYgKElzQ2FsbGFibGUodmFsdWVPZikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlT2YuY2FsbChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc09iamVjdChyZXN1bHQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHRvU3RyaW5nXzIgPSBPLnRvU3RyaW5nO1xuICAgICAgICAgICAgICAgIGlmIChJc0NhbGxhYmxlKHRvU3RyaW5nXzIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0b1N0cmluZ18yLmNhbGwoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNPYmplY3QocmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4yIFRvQm9vbGVhbihhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLzIwMTYvI3NlYy10b2Jvb2xlYW5cbiAgICAgICAgZnVuY3Rpb24gVG9Cb29sZWFuKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gISFhcmd1bWVudDtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjEuMTIgVG9TdHJpbmcoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvc3RyaW5nXG4gICAgICAgIGZ1bmN0aW9uIFRvU3RyaW5nKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIGFyZ3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMS4xNCBUb1Byb3BlcnR5S2V5KGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG4gICAgICAgIGZ1bmN0aW9uIFRvUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBUb1ByaW1pdGl2ZShhcmd1bWVudCwgMyAvKiBTdHJpbmcgKi8pO1xuICAgICAgICAgICAgaWYgKElzU3ltYm9sKGtleSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgICAgICAgIHJldHVybiBUb1N0cmluZyhrZXkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDcuMiBUZXN0aW5nIGFuZCBDb21wYXJpc29uIE9wZXJhdGlvbnNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdGVzdGluZy1hbmQtY29tcGFyaXNvbi1vcGVyYXRpb25zXG4gICAgICAgIC8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbiAgICAgICAgZnVuY3Rpb24gSXNBcnJheShhcmd1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXlcbiAgICAgICAgICAgICAgICA/IEFycmF5LmlzQXJyYXkoYXJndW1lbnQpXG4gICAgICAgICAgICAgICAgOiBhcmd1bWVudCBpbnN0YW5jZW9mIE9iamVjdFxuICAgICAgICAgICAgICAgICAgICA/IGFyZ3VtZW50IGluc3RhbmNlb2YgQXJyYXlcbiAgICAgICAgICAgICAgICAgICAgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJndW1lbnQpID09PSBcIltvYmplY3QgQXJyYXldXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4yLjMgSXNDYWxsYWJsZShhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNjYWxsYWJsZVxuICAgICAgICBmdW5jdGlvbiBJc0NhbGxhYmxlKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGFuIGFwcHJveGltYXRpb24gYXMgd2UgY2Fubm90IGNoZWNrIGZvciBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSBcImZ1bmN0aW9uXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4yLjQgSXNDb25zdHJ1Y3Rvcihhcmd1bWVudClcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtaXNjb25zdHJ1Y3RvclxuICAgICAgICBmdW5jdGlvbiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGFuIGFwcHJveGltYXRpb24gYXMgd2UgY2Fubm90IGNoZWNrIGZvciBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZC5cbiAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09IFwiZnVuY3Rpb25cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjIuNyBJc1Byb3BlcnR5S2V5KGFyZ3VtZW50KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pc3Byb3BlcnR5a2V5XG4gICAgICAgIGZ1bmN0aW9uIElzUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoVHlwZShhcmd1bWVudCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDMgLyogU3RyaW5nICovOiByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDQgLyogU3ltYm9sICovOiByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gU2FtZVZhbHVlWmVybyh4LCB5KSB7XG4gICAgICAgICAgICByZXR1cm4geCA9PT0geSB8fCB4ICE9PSB4ICYmIHkgIT09IHk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy4zIE9wZXJhdGlvbnMgb24gT2JqZWN0c1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcGVyYXRpb25zLW9uLW9iamVjdHNcbiAgICAgICAgLy8gNy4zLjkgR2V0TWV0aG9kKFYsIFApXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldG1ldGhvZFxuICAgICAgICBmdW5jdGlvbiBHZXRNZXRob2QoViwgUCkge1xuICAgICAgICAgICAgdmFyIGZ1bmMgPSBWW1BdO1xuICAgICAgICAgICAgaWYgKGZ1bmMgPT09IHVuZGVmaW5lZCB8fCBmdW5jID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoIUlzQ2FsbGFibGUoZnVuYykpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy40IE9wZXJhdGlvbnMgb24gSXRlcmF0b3IgT2JqZWN0c1xuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcGVyYXRpb25zLW9uLWl0ZXJhdG9yLW9iamVjdHNcbiAgICAgICAgZnVuY3Rpb24gR2V0SXRlcmF0b3Iob2JqKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kID0gR2V0TWV0aG9kKG9iaiwgaXRlcmF0b3JTeW1ib2wpO1xuICAgICAgICAgICAgaWYgKCFJc0NhbGxhYmxlKG1ldGhvZCkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpOyAvLyBmcm9tIENhbGxcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG1ldGhvZC5jYWxsKG9iaik7XG4gICAgICAgICAgICBpZiAoIUlzT2JqZWN0KGl0ZXJhdG9yKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNy40LjQgSXRlcmF0b3JWYWx1ZShpdGVyUmVzdWx0KVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvMjAxNi8jc2VjLWl0ZXJhdG9ydmFsdWVcbiAgICAgICAgZnVuY3Rpb24gSXRlcmF0b3JWYWx1ZShpdGVyUmVzdWx0KSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlclJlc3VsdC52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQuNSBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpXG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWl0ZXJhdG9yc3RlcFxuICAgICAgICBmdW5jdGlvbiBJdGVyYXRvclN0ZXAoaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyBmYWxzZSA6IHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1pdGVyYXRvcmNsb3NlXG4gICAgICAgIGZ1bmN0aW9uIEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpIHtcbiAgICAgICAgICAgIHZhciBmID0gaXRlcmF0b3JbXCJyZXR1cm5cIl07XG4gICAgICAgICAgICBpZiAoZilcbiAgICAgICAgICAgICAgICBmLmNhbGwoaXRlcmF0b3IpO1xuICAgICAgICB9XG4gICAgICAgIC8vIDkuMSBPcmRpbmFyeSBPYmplY3QgSW50ZXJuYWwgTWV0aG9kcyBhbmQgSW50ZXJuYWwgU2xvdHNcbiAgICAgICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb3JkaW5hcnktb2JqZWN0LWludGVybmFsLW1ldGhvZHMtYW5kLWludGVybmFsLXNsb3RzXG4gICAgICAgIC8vIDkuMS4xLjEgT3JkaW5hcnlHZXRQcm90b3R5cGVPZihPKVxuICAgICAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vcmRpbmFyeWdldHByb3RvdHlwZW9mXG4gICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5R2V0UHJvdG90eXBlT2YoTykge1xuICAgICAgICAgICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBPICE9PSBcImZ1bmN0aW9uXCIgfHwgTyA9PT0gZnVuY3Rpb25Qcm90b3R5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gVHlwZVNjcmlwdCBkb2Vzbid0IHNldCBfX3Byb3RvX18gaW4gRVM1LCBhcyBpdCdzIG5vbi1zdGFuZGFyZC5cbiAgICAgICAgICAgIC8vIFRyeSB0byBkZXRlcm1pbmUgdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IuIENvbXBhdGlibGUgaW1wbGVtZW50YXRpb25zXG4gICAgICAgICAgICAvLyBtdXN0IGVpdGhlciBzZXQgX19wcm90b19fIG9uIGEgc3ViY2xhc3MgY29uc3RydWN0b3IgdG8gdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0b3IsXG4gICAgICAgICAgICAvLyBvciBlbnN1cmUgZWFjaCBjbGFzcyBoYXMgYSB2YWxpZCBgY29uc3RydWN0b3JgIHByb3BlcnR5IG9uIGl0cyBwcm90b3R5cGUgdGhhdFxuICAgICAgICAgICAgLy8gcG9pbnRzIGJhY2sgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAgICAgLy8gSWYgdGhpcyBpcyBub3QgdGhlIHNhbWUgYXMgRnVuY3Rpb24uW1tQcm90b3R5cGVdXSwgdGhlbiB0aGlzIGlzIGRlZmluYXRlbHkgaW5oZXJpdGVkLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2FzZSB3aGVuIGluIEVTNiBvciB3aGVuIHVzaW5nIF9fcHJvdG9fXyBpbiBhIGNvbXBhdGlibGUgYnJvd3Nlci5cbiAgICAgICAgICAgIGlmIChwcm90byAhPT0gZnVuY3Rpb25Qcm90b3R5cGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gSWYgdGhlIHN1cGVyIHByb3RvdHlwZSBpcyBPYmplY3QucHJvdG90eXBlLCBudWxsLCBvciB1bmRlZmluZWQsIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXG4gICAgICAgICAgICB2YXIgcHJvdG90eXBlID0gTy5wcm90b3R5cGU7XG4gICAgICAgICAgICB2YXIgcHJvdG90eXBlUHJvdG8gPSBwcm90b3R5cGUgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSk7XG4gICAgICAgICAgICBpZiAocHJvdG90eXBlUHJvdG8gPT0gbnVsbCB8fCBwcm90b3R5cGVQcm90byA9PT0gT2JqZWN0LnByb3RvdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvdG87XG4gICAgICAgICAgICAvLyBJZiB0aGUgY29uc3RydWN0b3Igd2FzIG5vdCBhIGZ1bmN0aW9uLCB0aGVuIHdlIGNhbm5vdCBkZXRlcm1pbmUgdGhlIGhlcml0YWdlLlxuICAgICAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gcHJvdG90eXBlUHJvdG8uY29uc3RydWN0b3I7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0cnVjdG9yICE9PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBzb21lIGtpbmQgb2Ygc2VsZi1yZWZlcmVuY2UsIHRoZW4gd2UgY2Fubm90IGRldGVybWluZSB0aGUgaGVyaXRhZ2UuXG4gICAgICAgICAgICBpZiAoY29uc3RydWN0b3IgPT09IE8pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvO1xuICAgICAgICAgICAgLy8gd2UgaGF2ZSBhIHByZXR0eSBnb29kIGd1ZXNzIGF0IHRoZSBoZXJpdGFnZS5cbiAgICAgICAgICAgIHJldHVybiBjb25zdHJ1Y3RvcjtcbiAgICAgICAgfVxuICAgICAgICAvLyBHbG9iYWwgbWV0YWRhdGEgcmVnaXN0cnlcbiAgICAgICAgLy8gLSBBbGxvd3MgYGltcG9ydCBcInJlZmxlY3QtbWV0YWRhdGFcImAgYW5kIGBpbXBvcnQgXCJyZWZsZWN0LW1ldGFkYXRhL25vLWNvbmZsaWN0XCJgIHRvIGludGVyb3BlcmF0ZS5cbiAgICAgICAgLy8gLSBVc2VzIGlzb2xhdGVkIG1ldGFkYXRhIGlmIGBSZWZsZWN0YCBpcyBmcm96ZW4gYmVmb3JlIHRoZSByZWdpc3RyeSBjYW4gYmUgaW5zdGFsbGVkLlxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHJlZ2lzdHJ5IHVzZWQgdG8gYWxsb3cgbXVsdGlwbGUgYHJlZmxlY3QtbWV0YWRhdGFgIHByb3ZpZGVycy5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIENyZWF0ZU1ldGFkYXRhUmVnaXN0cnkoKSB7XG4gICAgICAgICAgICB2YXIgZmFsbGJhY2s7XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHJlZ2lzdHJ5U3ltYm9sKSAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiByb290LlJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICAgICAgICAhKHJlZ2lzdHJ5U3ltYm9sIGluIHJvb3QuUmVmbGVjdCkgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2Ygcm9vdC5SZWZsZWN0LmRlZmluZU1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBpbnRlcm9wZXJhdGUgd2l0aCBvbGRlciB2ZXJzaW9uIG9mIGByZWZsZWN0LW1ldGFkYXRhYCB0aGF0IGRpZCBub3Qgc3VwcG9ydCBhIHJlZ2lzdHJ5LlxuICAgICAgICAgICAgICAgIGZhbGxiYWNrID0gQ3JlYXRlRmFsbGJhY2tQcm92aWRlcihyb290LlJlZmxlY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZpcnN0O1xuICAgICAgICAgICAgdmFyIHNlY29uZDtcbiAgICAgICAgICAgIHZhciByZXN0O1xuICAgICAgICAgICAgdmFyIHRhcmdldFByb3ZpZGVyTWFwID0gbmV3IF9XZWFrTWFwKCk7XG4gICAgICAgICAgICB2YXIgcmVnaXN0cnkgPSB7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJQcm92aWRlcjogcmVnaXN0ZXJQcm92aWRlcixcbiAgICAgICAgICAgICAgICBnZXRQcm92aWRlcjogZ2V0UHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgc2V0UHJvdmlkZXI6IHNldFByb3ZpZGVyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiByZWdpc3RyeTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5pc0V4dGVuc2libGUocmVnaXN0cnkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBhZGQgcHJvdmlkZXIgdG8gYSBmcm96ZW4gcmVnaXN0cnkuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBmYWxsYmFjayA9PT0gcHJvdmlkZXI6IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIElzVW5kZWZpbmVkKGZpcnN0KTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gcHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBmaXJzdCA9PT0gcHJvdmlkZXI6IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIElzVW5kZWZpbmVkKHNlY29uZCk6XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmQgPSBwcm92aWRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIHNlY29uZCA9PT0gcHJvdmlkZXI6IGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0ID0gbmV3IF9TZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3QuYWRkKHByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldFByb3ZpZGVyTm9DYWNoZShPLCBQKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChmaXJzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0LmlzUHJvdmlkZXJGb3IoTywgUCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlyc3Q7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQoc2Vjb25kKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlY29uZC5pc1Byb3ZpZGVyRm9yKE8sIFApKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocmVzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBHZXRJdGVyYXRvcihyZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IEl0ZXJhdG9yU3RlcChpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBJdGVyYXRvclZhbHVlKG5leHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvdmlkZXIuaXNQcm92aWRlckZvcihPLCBQKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChmYWxsYmFjaykgJiYgZmFsbGJhY2suaXNQcm92aWRlckZvcihPLCBQKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsbGJhY2s7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRQcm92aWRlcihPLCBQKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb3ZpZGVyTWFwID0gdGFyZ2V0UHJvdmlkZXJNYXAuZ2V0KE8pO1xuICAgICAgICAgICAgICAgIHZhciBwcm92aWRlcjtcbiAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3ZpZGVyTWFwKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlciA9IHByb3ZpZGVyTWFwLmdldChQKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChwcm92aWRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm92aWRlciA9IGdldFByb3ZpZGVyTm9DYWNoZShPLCBQKTtcbiAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQocHJvdmlkZXJNYXApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlck1hcCA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRQcm92aWRlck1hcC5zZXQoTywgcHJvdmlkZXJNYXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTWFwLnNldChQLCBwcm92aWRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhc1Byb3ZpZGVyKHByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKHByb3ZpZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdCA9PT0gcHJvdmlkZXIgfHwgc2Vjb25kID09PSBwcm92aWRlciB8fCAhSXNVbmRlZmluZWQocmVzdCkgJiYgcmVzdC5oYXMocHJvdmlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gc2V0UHJvdmlkZXIoTywgUCwgcHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc1Byb3ZpZGVyKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRhZGF0YSBwcm92aWRlciBub3QgcmVnaXN0ZXJlZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ1Byb3ZpZGVyID0gZ2V0UHJvdmlkZXIoTywgUCk7XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nUHJvdmlkZXIgIT09IHByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQoZXhpc3RpbmdQcm92aWRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvdmlkZXJNYXAgPSB0YXJnZXRQcm92aWRlck1hcC5nZXQoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChwcm92aWRlck1hcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyTWFwID0gbmV3IF9NYXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFByb3ZpZGVyTWFwLnNldChPLCBwcm92aWRlck1hcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJNYXAuc2V0KFAsIHByb3ZpZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgb3IgY3JlYXRlcyB0aGUgc2hhcmVkIHJlZ2lzdHJ5IG9mIG1ldGFkYXRhIHByb3ZpZGVycy5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEdldE9yQ3JlYXRlTWV0YWRhdGFSZWdpc3RyeSgpIHtcbiAgICAgICAgICAgIHZhciBtZXRhZGF0YVJlZ2lzdHJ5O1xuICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZChyZWdpc3RyeVN5bWJvbCkgJiYgSXNPYmplY3Qocm9vdC5SZWZsZWN0KSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHJvb3QuUmVmbGVjdCkpIHtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YVJlZ2lzdHJ5ID0gcm9vdC5SZWZsZWN0W3JlZ2lzdHJ5U3ltYm9sXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YVJlZ2lzdHJ5KSkge1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhUmVnaXN0cnkgPSBDcmVhdGVNZXRhZGF0YVJlZ2lzdHJ5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKHJlZ2lzdHJ5U3ltYm9sKSAmJiBJc09iamVjdChyb290LlJlZmxlY3QpICYmIE9iamVjdC5pc0V4dGVuc2libGUocm9vdC5SZWZsZWN0KSkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyb290LlJlZmxlY3QsIHJlZ2lzdHJ5U3ltYm9sLCB7XG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBtZXRhZGF0YVJlZ2lzdHJ5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWV0YWRhdGFSZWdpc3RyeTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVNZXRhZGF0YVByb3ZpZGVyKHJlZ2lzdHJ5KSB7XG4gICAgICAgICAgICAvLyBbW01ldGFkYXRhXV0gaW50ZXJuYWwgc2xvdFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnktb2JqZWN0LWludGVybmFsLW1ldGhvZHMtYW5kLWludGVybmFsLXNsb3RzXG4gICAgICAgICAgICB2YXIgbWV0YWRhdGEgPSBuZXcgX1dlYWtNYXAoKTtcbiAgICAgICAgICAgIHZhciBwcm92aWRlciA9IHtcbiAgICAgICAgICAgICAgICBpc1Byb3ZpZGVyRm9yOiBmdW5jdGlvbiAoTywgUCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQoTyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZCh0YXJnZXRNZXRhZGF0YSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRNZXRhZGF0YS5oYXMoUCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhOiBPcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICAgICAgICAgICAgICAgIE9yZGluYXJ5SGFzT3duTWV0YWRhdGE6IE9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgT3JkaW5hcnlHZXRPd25NZXRhZGF0YTogT3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgICAgICAgICAgICAgICBPcmRpbmFyeU93bk1ldGFkYXRhS2V5czogT3JkaW5hcnlPd25NZXRhZGF0YUtleXMsXG4gICAgICAgICAgICAgICAgT3JkaW5hcnlEZWxldGVNZXRhZGF0YTogT3JkaW5hcnlEZWxldGVNZXRhZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtZXRhZGF0YVJlZ2lzdHJ5LnJlZ2lzdGVyUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgICAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBDcmVhdGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQoTyk7XG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWRUYXJnZXRNZXRhZGF0YSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZCh0YXJnZXRNZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFDcmVhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhZGF0YSA9IG5ldyBfTWFwKCk7XG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhLnNldChPLCB0YXJnZXRNZXRhZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRUYXJnZXRNZXRhZGF0YSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IHRhcmdldE1ldGFkYXRhLmdldChQKTtcbiAgICAgICAgICAgICAgICBpZiAoSXNVbmRlZmluZWQobWV0YWRhdGFNYXApKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghQ3JlYXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFNYXAgPSBuZXcgX01hcCgpO1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhZGF0YS5zZXQoUCwgbWV0YWRhdGFNYXApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlZ2lzdHJ5LnNldFByb3ZpZGVyKE8sIFAsIHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWV0YWRhdGEuZGVsZXRlKFApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRUYXJnZXRNZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhLmRlbGV0ZShPKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldyb25nIHByb3ZpZGVyIGZvciB0YXJnZXQuXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YU1hcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDMuMS4yLjEgT3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUClcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5aGFzb3dubWV0YWRhdGFcbiAgICAgICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApIHtcbiAgICAgICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gVG9Cb29sZWFuKG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gMy4xLjQuMSBPcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKVxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9yYnVja3Rvbi5naXRodWIuaW8vcmVmbGVjdC1tZXRhZGF0YS8jb3JkaW5hcnlnZXRvd25tZXRhZGF0YVxuICAgICAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDMuMS41LjEgT3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUClcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5ZGVmaW5lb3dubWV0YWRhdGFcbiAgICAgICAgICAgIGZ1bmN0aW9uIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcbiAgICAgICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGFNYXAuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIDMuMS43LjEgT3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUClcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vcmJ1Y2t0b24uZ2l0aHViLmlvL3JlZmxlY3QtbWV0YWRhdGEvI29yZGluYXJ5b3dubWV0YWRhdGFrZXlzXG4gICAgICAgICAgICBmdW5jdGlvbiBPcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgbWV0YWRhdGFNYXAgPSBHZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIC8qQ3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgIGlmIChJc1VuZGVmaW5lZChtZXRhZGF0YU1hcCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICAgICAgICAgIHZhciBrZXlzT2JqID0gbWV0YWRhdGFNYXAua2V5cygpO1xuICAgICAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IEdldEl0ZXJhdG9yKGtleXNPYmopO1xuICAgICAgICAgICAgICAgIHZhciBrID0gMDtcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IEl0ZXJhdG9yU3RlcChpdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5sZW5ndGggPSBrO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRWYWx1ZSA9IEl0ZXJhdG9yVmFsdWUobmV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzW2tdID0gbmV4dFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gT3JkaW5hcnlEZWxldGVNZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCkge1xuICAgICAgICAgICAgICAgIHZhciBtZXRhZGF0YU1hcCA9IEdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgLypDcmVhdGUqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhTWFwKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmICghbWV0YWRhdGFNYXAuZGVsZXRlKE1ldGFkYXRhS2V5KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChtZXRhZGF0YU1hcC5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhZGF0YSA9IG1ldGFkYXRhLmdldChPKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFJc1VuZGVmaW5lZCh0YXJnZXRNZXRhZGF0YSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFkYXRhLmRlbGV0ZShQKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNZXRhZGF0YS5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGEuZGVsZXRlKHRhcmdldE1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVGYWxsYmFja1Byb3ZpZGVyKHJlZmxlY3QpIHtcbiAgICAgICAgICAgIHZhciBkZWZpbmVNZXRhZGF0YSA9IHJlZmxlY3QuZGVmaW5lTWV0YWRhdGEsIGhhc093bk1ldGFkYXRhID0gcmVmbGVjdC5oYXNPd25NZXRhZGF0YSwgZ2V0T3duTWV0YWRhdGEgPSByZWZsZWN0LmdldE93bk1ldGFkYXRhLCBnZXRPd25NZXRhZGF0YUtleXMgPSByZWZsZWN0LmdldE93bk1ldGFkYXRhS2V5cywgZGVsZXRlTWV0YWRhdGEgPSByZWZsZWN0LmRlbGV0ZU1ldGFkYXRhO1xuICAgICAgICAgICAgdmFyIG1ldGFkYXRhT3duZXIgPSBuZXcgX1dlYWtNYXAoKTtcbiAgICAgICAgICAgIHZhciBwcm92aWRlciA9IHtcbiAgICAgICAgICAgICAgICBpc1Byb3ZpZGVyRm9yOiBmdW5jdGlvbiAoTywgUCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWV0YWRhdGFQcm9wZXJ0eVNldCA9IG1ldGFkYXRhT3duZXIuZ2V0KE8pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUlzVW5kZWZpbmVkKG1ldGFkYXRhUHJvcGVydHlTZXQpICYmIG1ldGFkYXRhUHJvcGVydHlTZXQuaGFzKFApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0T3duTWV0YWRhdGFLZXlzKE8sIFApLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKElzVW5kZWZpbmVkKG1ldGFkYXRhUHJvcGVydHlTZXQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFQcm9wZXJ0eVNldCA9IG5ldyBfU2V0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFPd25lci5zZXQoTywgbWV0YWRhdGFQcm9wZXJ0eVNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YVByb3BlcnR5U2V0LmFkZChQKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIE9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGE6IGRlZmluZU1ldGFkYXRhLFxuICAgICAgICAgICAgICAgIE9yZGluYXJ5SGFzT3duTWV0YWRhdGE6IGhhc093bk1ldGFkYXRhLFxuICAgICAgICAgICAgICAgIE9yZGluYXJ5R2V0T3duTWV0YWRhdGE6IGdldE93bk1ldGFkYXRhLFxuICAgICAgICAgICAgICAgIE9yZGluYXJ5T3duTWV0YWRhdGFLZXlzOiBnZXRPd25NZXRhZGF0YUtleXMsXG4gICAgICAgICAgICAgICAgT3JkaW5hcnlEZWxldGVNZXRhZGF0YTogZGVsZXRlTWV0YWRhdGEsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVyO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSBtZXRhZGF0YSBwcm92aWRlciBmb3IgYW4gb2JqZWN0LiBJZiB0aGUgb2JqZWN0IGhhcyBubyBtZXRhZGF0YSBwcm92aWRlciBhbmQgdGhpcyBpcyBmb3IgYSBjcmVhdGUgb3BlcmF0aW9uLFxuICAgICAgICAgKiB0aGVuIHRoaXMgbW9kdWxlJ3MgbWV0YWRhdGEgcHJvdmlkZXIgaXMgYXNzaWduZWQgdG8gdGhlIG9iamVjdC5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEdldE1ldGFkYXRhUHJvdmlkZXIoTywgUCwgQ3JlYXRlKSB7XG4gICAgICAgICAgICB2YXIgcmVnaXN0ZXJlZFByb3ZpZGVyID0gbWV0YWRhdGFSZWdpc3RyeS5nZXRQcm92aWRlcihPLCBQKTtcbiAgICAgICAgICAgIGlmICghSXNVbmRlZmluZWQocmVnaXN0ZXJlZFByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RlcmVkUHJvdmlkZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQ3JlYXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhUmVnaXN0cnkuc2V0UHJvdmlkZXIoTywgUCwgbWV0YWRhdGFQcm92aWRlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1ldGFkYXRhUHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIklsbGVnYWwgc3RhdGUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBuYWl2ZSBNYXAgc2hpbVxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVNYXBQb2x5ZmlsbCgpIHtcbiAgICAgICAgICAgIHZhciBjYWNoZVNlbnRpbmVsID0ge307XG4gICAgICAgICAgICB2YXIgYXJyYXlTZW50aW5lbCA9IFtdO1xuICAgICAgICAgICAgdmFyIE1hcEl0ZXJhdG9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE1hcEl0ZXJhdG9yKGtleXMsIHZhbHVlcywgc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0ga2V5cztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gdmFsdWVzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcbiAgICAgICAgICAgICAgICBNYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5faW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5fa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9zZWxlY3Rvcih0aGlzLl9rZXlzW2luZGV4XSwgdGhpcy5fdmFsdWVzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggKyAxID49IHRoaXMuX2tleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiByZXN1bHQsIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IGFycmF5U2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgTWFwSXRlcmF0b3IucHJvdG90eXBlLnJldHVybiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMgPSBhcnJheVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gYXJyYXlTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6IHRydWUgfTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXBJdGVyYXRvcjtcbiAgICAgICAgICAgIH0oKSk7XG4gICAgICAgICAgICB2YXIgTWFwID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE1hcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVLZXkgPSBjYWNoZVNlbnRpbmVsO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gLTI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXAucHJvdG90eXBlLCBcInNpemVcIiwge1xuICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2tleXMubGVuZ3RoOyB9LFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHRoaXMuX2ZpbmQoa2V5LCAvKmluc2VydCovIGZhbHNlKSA+PSAwOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kKGtleSwgLyppbnNlcnQqLyBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmRleCA+PSAwID8gdGhpcy5fdmFsdWVzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZChrZXksIC8qaW5zZXJ0Ki8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpemUgPSB0aGlzLl9rZXlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBpbmRleCArIDE7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzW2kgLSAxXSA9IHRoaXMuX2tleXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzW2kgLSAxXSA9IHRoaXMuX3ZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMubGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXMubGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoU2FtZVZhbHVlWmVybyhrZXksIHRoaXMuX2NhY2hlS2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlS2V5ID0gY2FjaGVTZW50aW5lbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gLTI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlcy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUtleSA9IGNhY2hlU2VudGluZWw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSAtMjtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBNYXBJdGVyYXRvcih0aGlzLl9rZXlzLCB0aGlzLl92YWx1ZXMsIGdldEtleSk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcy5fa2V5cywgdGhpcy5fdmFsdWVzLCBnZXRWYWx1ZSk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IE1hcEl0ZXJhdG9yKHRoaXMuX2tleXMsIHRoaXMuX3ZhbHVlcywgZ2V0RW50cnkpOyB9O1xuICAgICAgICAgICAgICAgIE1hcC5wcm90b3R5cGVbXCJAQGl0ZXJhdG9yXCJdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5lbnRyaWVzKCk7IH07XG4gICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmVudHJpZXMoKTsgfTtcbiAgICAgICAgICAgICAgICBNYXAucHJvdG90eXBlLl9maW5kID0gZnVuY3Rpb24gKGtleSwgaW5zZXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghU2FtZVZhbHVlWmVybyh0aGlzLl9jYWNoZUtleSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVJbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9rZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFNhbWVWYWx1ZVplcm8odGhpcy5fa2V5c1tpXSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZUluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZUluZGV4IDwgMCAmJiBpbnNlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlSW5kZXggPSB0aGlzLl9rZXlzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVJbmRleDtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXA7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgcmV0dXJuIE1hcDtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEtleShrZXksIF8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0VmFsdWUoXywgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRFbnRyeShrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtrZXksIHZhbHVlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBuYWl2ZSBTZXQgc2hpbVxuICAgICAgICBmdW5jdGlvbiBDcmVhdGVTZXRQb2x5ZmlsbCgpIHtcbiAgICAgICAgICAgIHZhciBTZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gU2V0KCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXAgPSBuZXcgX01hcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2V0LnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAuc2l6ZTsgfSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5oYXModmFsdWUpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0aGlzLl9tYXAuc2V0KHZhbHVlLCB2YWx1ZSksIHRoaXM7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHRoaXMuX21hcC5kZWxldGUodmFsdWUpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX21hcC5jbGVhcigpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5rZXlzKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9tYXAua2V5cygpOyB9O1xuICAgICAgICAgICAgICAgIFNldC5wcm90b3R5cGUuZW50cmllcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX21hcC5lbnRyaWVzKCk7IH07XG4gICAgICAgICAgICAgICAgU2V0LnByb3RvdHlwZVtcIkBAaXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmtleXMoKTsgfTtcbiAgICAgICAgICAgICAgICBTZXQucHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMua2V5cygpOyB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBTZXQ7XG4gICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgcmV0dXJuIFNldDtcbiAgICAgICAgfVxuICAgICAgICAvLyBuYWl2ZSBXZWFrTWFwIHNoaW1cbiAgICAgICAgZnVuY3Rpb24gQ3JlYXRlV2Vha01hcFBvbHlmaWxsKCkge1xuICAgICAgICAgICAgdmFyIFVVSURfU0laRSA9IDE2O1xuICAgICAgICAgICAgdmFyIGtleXMgPSBIYXNoTWFwLmNyZWF0ZSgpO1xuICAgICAgICAgICAgdmFyIHJvb3RLZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gV2Vha01hcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5ID0gQ3JlYXRlVW5pcXVlS2V5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFdlYWtNYXAucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlICE9PSB1bmRlZmluZWQgPyBIYXNoTWFwLmhhcyh0YWJsZSwgdGhpcy5fa2V5KSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IEhhc2hNYXAuZ2V0KHRhYmxlLCB0aGlzLl9rZXkpIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHRhcmdldCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCAvKmNyZWF0ZSovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0YWJsZVt0aGlzLl9rZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBHZXRPckNyZWF0ZVdlYWtNYXBUYWJsZSh0YXJnZXQsIC8qY3JlYXRlKi8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgIT09IHVuZGVmaW5lZCA/IGRlbGV0ZSB0YWJsZVt0aGlzLl9rZXldIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBXZWFrTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogbm90IGEgcmVhbCBjbGVhciwganVzdCBtYWtlcyB0aGUgcHJldmlvdXMgZGF0YSB1bnJlYWNoYWJsZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXkgPSBDcmVhdGVVbmlxdWVLZXkoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBXZWFrTWFwO1xuICAgICAgICAgICAgfSgpKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIENyZWF0ZVVuaXF1ZUtleSgpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5O1xuICAgICAgICAgICAgICAgIGRvXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IFwiQEBXZWFrTWFwQEBcIiArIENyZWF0ZVVVSUQoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoSGFzaE1hcC5oYXMoa2V5cywga2V5KSk7XG4gICAgICAgICAgICAgICAga2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gR2V0T3JDcmVhdGVXZWFrTWFwVGFibGUodGFyZ2V0LCBjcmVhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc093bi5jYWxsKHRhcmdldCwgcm9vdEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjcmVhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCByb290S2V5LCB7IHZhbHVlOiBIYXNoTWFwLmNyZWF0ZSgpIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0W3Jvb3RLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gRmlsbFJhbmRvbUJ5dGVzKGJ1ZmZlciwgc2l6ZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKVxuICAgICAgICAgICAgICAgICAgICBidWZmZXJbaV0gPSBNYXRoLnJhbmRvbSgpICogMHhmZiB8IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIEdlblJhbmRvbUJ5dGVzKHNpemUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYXJyYXkgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjcnlwdG8gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBtc0NyeXB0byAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEZpbGxSYW5kb21CeXRlcyhhcnJheSwgc2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gRmlsbFJhbmRvbUJ5dGVzKG5ldyBBcnJheShzaXplKSwgc2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBDcmVhdGVVVUlEKCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gR2VuUmFuZG9tQnl0ZXMoVVVJRF9TSVpFKTtcbiAgICAgICAgICAgICAgICAvLyBtYXJrIGFzIHJhbmRvbSAtIFJGQyA0MTIyIMKnIDQuNFxuICAgICAgICAgICAgICAgIGRhdGFbNl0gPSBkYXRhWzZdICYgMHg0ZiB8IDB4NDA7XG4gICAgICAgICAgICAgICAgZGF0YVs4XSA9IGRhdGFbOF0gJiAweGJmIHwgMHg4MDtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBvZmZzZXQgPSAwOyBvZmZzZXQgPCBVVUlEX1NJWkU7ICsrb2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBieXRlID0gZGF0YVtvZmZzZXRdO1xuICAgICAgICAgICAgICAgICAgICBpZiAob2Zmc2V0ID09PSA0IHx8IG9mZnNldCA9PT0gNiB8fCBvZmZzZXQgPT09IDgpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCItXCI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChieXRlIDwgMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCIwXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBieXRlLnRvU3RyaW5nKDE2KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHVzZXMgYSBoZXVyaXN0aWMgdXNlZCBieSB2OCBhbmQgY2hha3JhIHRvIGZvcmNlIGFuIG9iamVjdCBpbnRvIGRpY3Rpb25hcnkgbW9kZS5cbiAgICAgICAgZnVuY3Rpb24gTWFrZURpY3Rpb25hcnkob2JqKSB7XG4gICAgICAgICAgICBvYmouX18gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBkZWxldGUgb2JqLl9fO1xuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfVxuICAgIH0pO1xufSkoUmVmbGVjdCB8fCAoUmVmbGVjdCA9IHt9KSk7XG4iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tIFwiLi4vQ29yZS9FbmdpbmVcIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgeyBDb2xsaWRlciB9IGZyb20gXCIuL0NvbGxpZGVyXCI7XG5pbXBvcnQgeyBNZXNoUmVuZGVyZXIgfSBmcm9tIFwiLi9NZXNoUmVuZGVyZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBCb3hDb2xsaWRlckRhdGEge1xuICAgIHNpemU6IFZlY3RvcjM7XG59XG5cbmV4cG9ydCBjbGFzcyBCb3hDb2xsaWRlciBleHRlbmRzIENvbGxpZGVyIHtcbiAgICBwcml2YXRlIF9zaXplOiBWZWN0b3IzO1xuXG4gICAgcHVibGljIGdldCBzaXplKCk6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2l6ZT8uY2xvbmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHNpemUobmV3U2l6ZTogVmVjdG9yMykge1xuICAgICAgICBpZiAodGhpcy5fc2l6ZSAhPT0gbmV3U2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IG5ld1NpemU7XG4gICAgICAgICAgICAvLyDpgJrluLjpnIDopoHph43mlrDliJ3lp4vljJbnorDmkp7kvZNcbiAgICAgICAgICAgIEVuZ2luZS5waHlzaWNzLlJlYnVpbGRDb2xsaWRlcnModGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q29sbGlkZXJEYXRhKCk6IEJveENvbGxpZGVyRGF0YSB7XG4gICAgICAgIGlmICh0aGlzLmNlbnRlciA9PSBudWxsIHx8IHRoaXMuc2l6ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNpemVGcm9tTWVzaEJvdW5kcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuc2l6ZS5tdWx0aXBseSh0aGlzLnRyYW5zZm9ybS53b3JsZFNjYWxlKTtcblxuICAgICAgICAvLyDkuI3lhYHorrjkuLow55qE5bC65a+477yM5ZCm5YiZ5peg5rOV5q2j5bi456Kw5pKe77yM5L6L5aaC6auY5bqm5Li6MOeahOW5s+mdou+8jOmrmOW6puiuvue9ruaIkOS4gOS4quaegeS9jueahOaVsOWAvFxuICAgICAgICBpZiAoc2l6ZS54IDw9IDApIHNpemUueCA9IDAuMDE7XG4gICAgICAgIGlmIChzaXplLnkgPD0gMCkgc2l6ZS55ID0gMC4wMTtcbiAgICAgICAgaWYgKHNpemUueiA8PSAwKSBzaXplLnogPSAwLjAxO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU2l6ZUZyb21NZXNoQm91bmRzKCkge1xuICAgICAgICAvLyDojrflj5ZNZXNoUmVuZGVyZXLnu4Tku7ZcbiAgICAgICAgY29uc3QgbWVzaFJlbmRlcmVyID0gdGhpcy5nYW1lT2JqZWN0LmdldENvbXBvbmVudChNZXNoUmVuZGVyZXIpO1xuICAgICAgICAvLyDojrflj5bnvZHmoLzljIXlm7Tnm5JcbiAgICAgICAgY29uc3QgYm91bmRzID0gbWVzaFJlbmRlcmVyPy5tZXNoPy5ib3VuZHNbMF07XG5cbiAgICAgICAgaWYgKGJvdW5kcykge1xuICAgICAgICAgICAgLy8g5aaC5p6c5pyJ5YyF5Zu055uS5pWw5o2u77yM5L2/55So5YyF5Zu055uS55qE5bC65a+45ZKM5Lit5b+D54K5XG4gICAgICAgICAgICBjb25zdCB4ID0gYm91bmRzLmhhbGZFeHRlbnRzLnggKiAyO1xuICAgICAgICAgICAgY29uc3QgeSA9IGJvdW5kcy5oYWxmRXh0ZW50cy55ICogMjtcbiAgICAgICAgICAgIGNvbnN0IHogPSBib3VuZHMuaGFsZkV4dGVudHMueiAqIDI7XG4gICAgICAgICAgICB0aGlzLnNpemUgPSBuZXcgVmVjdG9yMyh4LCB5LCB6KTtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyID0gYm91bmRzLmNlbnRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIOWmguaenOayoeacieWMheWbtOebkuaVsOaNru+8jOS9v+eUqOm7mOiupOWAvFxuICAgICAgICAgICAgdGhpcy5zaXplID0gVmVjdG9yMy5PTkU7XG4gICAgICAgICAgICB0aGlzLmNlbnRlciA9IFZlY3RvcjMuWkVSTztcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9NYXRoL0NvbG9yXCI7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yNFwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuL0NvbXBvbmVudFwiO1xuaW1wb3J0IHsgTWF0cml4NHg0IH0gZnJvbSBcIi4uL01hdGgvTWF0cml4NHg0XCI7XG5pbXBvcnQgeyBUaW1lIH0gZnJvbSBcIi4uL0NvcmUvVGltZVwiO1xuaW1wb3J0IHsgRGlzYWxsb3dNdWx0aXBsZUNvbXBvbmVudCB9IGZyb20gXCIuLi9Db3JlL0RlY29yYXRvcnNcIjtcbmltcG9ydCB7IEVuZ2luZUNvbmZpZyB9IGZyb20gXCIuLi9Db3JlL1NldHRpbmdcIjtcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwiLi4vUmVzb3VyY2VzL1RleHR1cmVcIjtcbmltcG9ydCB7IFBsYW5lIH0gZnJvbSBcIi4uL01hdGgvUGFuZWxcIjtcblxuZXhwb3J0IGVudW0gQ2FtZXJhQ2xlYXJGbGFncyB7XG4gICAgTm9uZSA9IDAsXG4gICAgU2t5Ym94ID0gMSxcbiAgICBDb2xvciA9IDIsXG4gICAgRGVwdGhPbmx5ID0gMyxcbn1cblxuZXhwb3J0IGVudW0gUHJvamVjdGlvbiB7XG4gICAgUGVyc3BlY3RpdmUgPSAwLFxuICAgIE9ydGhvZ3JhcGhpYyA9IDEsXG59XG5cbmV4cG9ydCBlbnVtIFJlbmRlcmluZ1BhdGgge1xuICAgIFZlcnRleExpdCA9IDAsXG4gICAgRm9yd2FyZCA9IDEsXG4gICAgRGVmZXJyZWQgPSAyLFxufVxuXG5ARGlzYWxsb3dNdWx0aXBsZUNvbXBvbmVudFxuZXhwb3J0IGNsYXNzIENhbWVyYSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgcHVibGljIHN0YXRpYyBtYWluQ2FtZXJhOiBDYW1lcmE7XG4gICAgcHVibGljIHN0YXRpYyBjYW1lcmFzOiBBcnJheTxDYW1lcmE+ID0gbmV3IEFycmF5PENhbWVyYT4oKTtcblxuICAgIHB1YmxpYyB0YXJnZXRUZXh0dXJlOiBUZXh0dXJlO1xuICAgIHB1YmxpYyBiYWNrR3JvdW5kQ29sb3I6IENvbG9yID0gQ29sb3IuR1JBWTtcbiAgICBwdWJsaWMgY2xlYXJGbGFnczogQ2FtZXJhQ2xlYXJGbGFncyA9IENhbWVyYUNsZWFyRmxhZ3MuU2t5Ym94O1xuICAgIHByaXZhdGUgX25lYXJDbGlwOiBudW1iZXIgPSAxO1xuICAgIHByaXZhdGUgX2ZhckNsaXA6IG51bWJlciA9IDEyODtcbiAgICBwcml2YXRlIF9mb3Y6IG51bWJlciA9IDYwO1xuICAgIHB1YmxpYyBkZXB0aDogbnVtYmVyID0gLTE7XG4gICAgcHJpdmF0ZSBfdmlld1BvcnQ6IFZlY3RvcjQgPSBuZXcgVmVjdG9yNCgwLCAwLCAxLCAxKTtcbiAgICBwcml2YXRlIF9wcm9qZWN0aW9uOiBQcm9qZWN0aW9uID0gUHJvamVjdGlvbi5QZXJzcGVjdGl2ZTtcbiAgICBwcml2YXRlIF9vcnRob2dyYXBoaWNTaXplOiBudW1iZXIgPSA1O1xuICAgIHB1YmxpYyByZW5kZXJpbmdQYXRoOiBSZW5kZXJpbmdQYXRoID0gUmVuZGVyaW5nUGF0aC5Gb3J3YXJkO1xuICAgIHB1YmxpYyBvY2NsdXNpb25DdWxsaW5nOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICAvLyDnvJPlrZjnn6npmLXlkozop4bplKXkvZPlubPpnaJcbiAgICBwcml2YXRlIF92aWV3TWF0cml4OiBNYXRyaXg0eDQgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIF9wcm9qZWN0aW9uTWF0cml4OiBNYXRyaXg0eDQgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIF9mcnVzdHVtUGxhbmVzOiBQbGFuZVtdIHwgbnVsbCA9IG51bGw7XG5cbiAgICAvLyDohI/moIforrBcbiAgICBwcml2YXRlIF92aWV3TWF0cml4RGlydHk6IGJvb2xlYW4gPSB0cnVlO1xuICAgIHByaXZhdGUgX3Byb2plY3Rpb25NYXRyaXhEaXJ0eTogYm9vbGVhbiA9IHRydWU7XG4gICAgcHJpdmF0ZSBfZnJ1c3R1bVBsYW5lc0RpcnR5OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIHB1YmxpYyBnZXQgYXNwZWN0KCk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLnZpZXdQb3J0O1xuICAgICAgICByZXR1cm4gKHYueiAqIEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aCkgLyAodi53ICogRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBuZWFyQ2xpcCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmVhckNsaXA7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBuZWFyQ2xpcCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9uZWFyQ2xpcCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX25lYXJDbGlwID0gdmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9wcm9qZWN0aW9uTWF0cml4RGlydHkgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZnJ1c3R1bVBsYW5lc0RpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZmFyQ2xpcCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmFyQ2xpcDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGZhckNsaXAodmFsdWU6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5fZmFyQ2xpcCAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZhckNsaXAgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Byb2plY3Rpb25NYXRyaXhEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9mcnVzdHVtUGxhbmVzRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBmb3YoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvdjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGZvdih2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9mb3YgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3YgPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Byb2plY3Rpb25NYXRyaXhEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9mcnVzdHVtUGxhbmVzRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB2aWV3UG9ydCgpOiBWZWN0b3I0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdQb3J0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgdmlld1BvcnQodmFsdWU6IFZlY3RvcjQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl92aWV3UG9ydC5lcXVhbHModmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl92aWV3UG9ydCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHJvamVjdGlvbk1hdHJpeERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2ZydXN0dW1QbGFuZXNEaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHByb2plY3Rpb24oKTogUHJvamVjdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9qZWN0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgcHJvamVjdGlvbih2YWx1ZTogUHJvamVjdGlvbikge1xuICAgICAgICBpZiAodGhpcy5fcHJvamVjdGlvbiAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Byb2plY3Rpb24gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Byb2plY3Rpb25NYXRyaXhEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9mcnVzdHVtUGxhbmVzRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBvcnRob2dyYXBoaWNTaXplKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcnRob2dyYXBoaWNTaXplO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgb3J0aG9ncmFwaGljU2l6ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLl9vcnRob2dyYXBoaWNTaXplICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fb3J0aG9ncmFwaGljU2l6ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcHJvamVjdGlvbk1hdHJpeERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2ZydXN0dW1QbGFuZXNEaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25Bd2FrZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKENhbWVyYS5tYWluQ2FtZXJhID09IG51bGwpIHtcbiAgICAgICAgICAgIENhbWVyYS5tYWluQ2FtZXJhID0gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBDYW1lcmEuY2FtZXJhcy5wdXNoKHRoaXMpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdGltZXI6IG51bWJlciA9IDA7XG4gICAgcHVibGljIGNvdW50ZXI6IG51bWJlciA9IDA7XG4gICAgcHVibGljIG9uVXBkYXRlKCk6IHZvaWQge1xuICAgICAgICBpZiAoVGltZS50aW1lIC0gdGhpcy50aW1lciA+PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVyID0gVGltZS50aW1lO1xuICAgICAgICAgICAgdGhpcy5jb3VudGVyKys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25EZXN0cm95KCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IENhbWVyYS5jYW1lcmFzLmluZGV4T2YodGhpcywgMCk7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBDYW1lcmEuY2FtZXJhcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKENhbWVyYS5tYWluQ2FtZXJhID09PSB0aGlzKSB7XG4gICAgICAgICAgICBDYW1lcmEubWFpbkNhbWVyYSA9IENhbWVyYS5jYW1lcmFzLmxlbmd0aCA+IDAgPyBDYW1lcmEuY2FtZXJhc1swXSA6ICh1bmRlZmluZWQgYXMgdW5rbm93biBhcyBDYW1lcmEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldFZpZXdNYXRyaXgoKTogTWF0cml4NHg0IHtcbiAgICAgICAgaWYgKHRoaXMuX3ZpZXdNYXRyaXhEaXJ0eSB8fCAhdGhpcy5fdmlld01hdHJpeCkge1xuICAgICAgICAgICAgLy8gMS4g6I635Y+W55u45py655qE5LiW55WM5Y+Y5o2i55+p6Zi1XG4gICAgICAgICAgICBjb25zdCB3b3JsZE1hdHJpeCA9IHRoaXMudHJhbnNmb3JtLmxvY2FsVG9Xb3JsZE1hdHJpeDtcbiAgICAgICAgICAgIC8vIDIuIOiuoeeul+mAhuefqemYte+8iOS4lueVjOepuumXtCDihpIg6KeG5Zu+56m66Ze077yJXG4gICAgICAgICAgICB0aGlzLl92aWV3TWF0cml4ID0gd29ybGRNYXRyaXguaW52ZXJ0KCk7XG4gICAgICAgICAgICB0aGlzLl92aWV3TWF0cml4RGlydHkgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyDov5Tlm57nn6npmLXnmoTlia/mnKzvvIzpmLLmraLlpJbpg6jkv67mlLlcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdNYXRyaXghLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFByb2plY3Rpb25NYXRyaXgoKTogTWF0cml4NHg0IHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb2plY3Rpb25NYXRyaXhEaXJ0eSB8fCAhdGhpcy5fcHJvamVjdGlvbk1hdHJpeCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvamVjdGlvbiA9PT0gUHJvamVjdGlvbi5PcnRob2dyYXBoaWMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm9qZWN0aW9uTWF0cml4ID0gTWF0cml4NHg0Lm9ydGhvZ3JhcGhpYyhcbiAgICAgICAgICAgICAgICAgICAgLXRoaXMub3J0aG9ncmFwaGljU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcnRob2dyYXBoaWNTaXplLFxuICAgICAgICAgICAgICAgICAgICAtdGhpcy5vcnRob2dyYXBoaWNTaXplICogKHRoaXMuYXNwZWN0ID8gMSAvIHRoaXMuYXNwZWN0IDogMSksIC8vIOS/ruWkjeato+S6pOaKleW9seWuvemrmOavlFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ydGhvZ3JhcGhpY1NpemUgKiAodGhpcy5hc3BlY3QgPyAxIC8gdGhpcy5hc3BlY3QgOiAxKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZWFyQ2xpcCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYXJDbGlwXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvamVjdGlvbk1hdHJpeCA9IE1hdHJpeDR4NC5wZXJzcGVjdGl2ZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3YsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXNwZWN0LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5lYXJDbGlwLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZhckNsaXBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcHJvamVjdGlvbk1hdHJpeERpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8g6L+U5Zue55+p6Zi155qE5Ymv5pys77yM6Ziy5q2i5aSW6YOo5L+u5pS5XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9qZWN0aW9uTWF0cml4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8g5b2TVHJhbnNmb3Jt5Y+R55Sf5Y+Y5YyW5pe277yM6ZyA6KaB5pu05paw6KeG5Zu+55+p6Zi1XG4gICAgcHVibGljIG9uVHJhbnNmb3JtQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fdmlld01hdHJpeERpcnR5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fZnJ1c3R1bVBsYW5lc0RpcnR5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDojrflj5bop4bplKXkvZPnmoQ25Liq5bmz6Z2i77yI5bem44CB5Y+z44CB5LiL44CB5LiK44CB6L+R44CB6L+c77yJXG4gICAgICogQHJldHVybnMg5b2S5LiA5YyW5ZCO55qE5bmz6Z2i5pWw57uE77yM6aG65bqP5Li6IFvlt6blubPpnaIsIOWPs+W5s+mdoiwg5LiL5bmz6Z2iLCDkuIrlubPpnaIsIOi/keW5s+mdoiwg6L+c5bmz6Z2iXVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGcnVzdHVtUGxhbmVzKCk6IFBsYW5lW10ge1xuICAgICAgICAvLyDoi6XlubPpnaLmnKrov4fmnJ/kuJTlt7LnvJPlrZjvvIznm7TmjqXov5Tlm57lia/mnKzvvIjpgb/lhY3lpJbpg6jkv67mlLnvvIlcbiAgICAgICAgaWYgKCF0aGlzLl9mcnVzdHVtUGxhbmVzRGlydHkgJiYgdGhpcy5fZnJ1c3R1bVBsYW5lcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZydXN0dW1QbGFuZXM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAxLiDojrflj5bop4blm77nn6npmLXlkozmipXlvbHnn6npmLXvvIzorqHnrpflpI3lkIjnn6npmLXvvIjmipXlvbEgw5cg6KeG5Zu+77yJXG4gICAgICAgIGNvbnN0IHZpZXdNYXRyaXggPSB0aGlzLmdldFZpZXdNYXRyaXgoKTtcbiAgICAgICAgY29uc3QgcHJvak1hdHJpeCA9IHRoaXMuZ2V0UHJvamVjdGlvbk1hdHJpeCgpO1xuICAgICAgICBjb25zdCB2aWV3UHJvak1hdHJpeCA9IHByb2pNYXRyaXgubXVsdGlwbHkodmlld01hdHJpeCk7IC8vIOWkjeWQiOefqemYte+8muS4lueVjOepuumXtCDihpIg6KOB5Ymq56m66Ze0XG4gICAgICAgIGNvbnN0IG0gPSB2aWV3UHJvak1hdHJpeC5tYXRyaXg7XG5cbiAgICAgICAgLy8gMi4g5o6o5a+8NuS4quinhumUpeS9k+W5s+mdou+8iOWFrOW8j+adpeiHquWbvuW9ouWtpuagh+WHhu+8jOmAgumFjeWIl+S4u+W6j+efqemYte+8iVxuICAgICAgICBjb25zdCBwbGFuZXM6IFBsYW5lW10gPSBbXG4gICAgICAgICAgICAvLyDlt6blubPpnaJcbiAgICAgICAgICAgIG5ldyBQbGFuZShtWzNdWzBdICsgbVswXVswXSwgbVszXVsxXSArIG1bMF1bMV0sIG1bM11bMl0gKyBtWzBdWzJdLCBtWzNdWzNdICsgbVswXVszXSksXG4gICAgICAgICAgICAvLyDlj7PlubPpnaJcbiAgICAgICAgICAgIG5ldyBQbGFuZShtWzNdWzBdIC0gbVswXVswXSwgbVszXVsxXSAtIG1bMF1bMV0sIG1bM11bMl0gLSBtWzBdWzJdLCBtWzNdWzNdIC0gbVswXVszXSksXG4gICAgICAgICAgICAvLyDkuIvlubPpnaJcbiAgICAgICAgICAgIG5ldyBQbGFuZShtWzNdWzBdICsgbVsxXVswXSwgbVszXVsxXSArIG1bMV1bMV0sIG1bM11bMl0gKyBtWzFdWzJdLCBtWzNdWzNdICsgbVsxXVszXSksXG4gICAgICAgICAgICAvLyDkuIrlubPpnaJcbiAgICAgICAgICAgIG5ldyBQbGFuZShtWzNdWzBdIC0gbVsxXVswXSwgbVszXVsxXSAtIG1bMV1bMV0sIG1bM11bMl0gLSBtWzFdWzJdLCBtWzNdWzNdIC0gbVsxXVszXSksXG4gICAgICAgICAgICAvLyDov5HlubPpnaJcbiAgICAgICAgICAgIG5ldyBQbGFuZShtWzNdWzBdICsgbVsyXVswXSwgbVszXVsxXSArIG1bMl1bMV0sIG1bM11bMl0gKyBtWzJdWzJdLCBtWzNdWzNdICsgbVsyXVszXSksXG4gICAgICAgICAgICAvLyDov5zlubPpnaJcbiAgICAgICAgICAgIG5ldyBQbGFuZShtWzNdWzBdIC0gbVsyXVswXSwgbVszXVsxXSAtIG1bMl1bMV0sIG1bM11bMl0gLSBtWzJdWzJdLCBtWzNdWzNdIC0gbVsyXVszXSlcbiAgICAgICAgXTtcblxuICAgICAgICAvLyAzLiDlvZLkuIDljJbmiYDmnInlubPpnaLvvIjnoa7kv53ms5XlkJHph4/plb/luqbkuLox77yM5L+d6K+B5ZCO57ut6Led56a76K6h566X57K+5bqm77yJXG4gICAgICAgIHBsYW5lcy5mb3JFYWNoKHBsYW5lID0+IHBsYW5lLm5vcm1hbGl6ZSgpKTtcblxuICAgICAgICAvLyA0LiDnvJPlrZjlubPpnaLlubbmoIforrDkuLrmnKrov4fmnJ9cbiAgICAgICAgdGhpcy5fZnJ1c3R1bVBsYW5lcyA9IHBsYW5lcztcbiAgICAgICAgdGhpcy5fZnJ1c3R1bVBsYW5lc0RpcnR5ID0gZmFsc2U7XG5cbiAgICAgICAgLy8gNS4g6L+U5Zue5bmz6Z2i5Ymv5pys77yI6YG/5YWN5aSW6YOo5L+u5pS557yT5a2Y55qE5YaF6YOo5pWw5o2u77yJXG4gICAgICAgIHJldHVybiBwbGFuZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Yik5pat5LiW55WM56m66Ze05Lit55qE54K55piv5ZCm5Zyo6KeG6ZSl5L2T5YaFXG4gICAgICogQHBhcmFtIHdvcmxkUG9pbnQg5b6F5Yik5pat55qE5LiW55WM56m66Ze054K5XG4gICAgICogQHJldHVybnMgdHJ1Ze+8mueCueWcqOinhumUpeS9k+WGhe+8m2ZhbHNl77ya54K55Zyo6KeG6ZSl5L2T5aSWXG4gICAgICovXG4gICAgcHVibGljIGlzUG9pbnRJbkZydXN0dW0od29ybGRQb2ludDogVmVjdG9yMyk6IGJvb2xlYW4ge1xuICAgICAgICAvLyAxLiDojrflj5bop4bplKXkvZM25Liq5bmz6Z2i77yI6Iul5pyq57yT5a2Y5YiZ6Ieq5Yqo6K6h566X77yM5bey5aSE55CG5b2S5LiA5YyW77yJXG4gICAgICAgIGNvbnN0IGZydXN0dW1QbGFuZXMgPSB0aGlzLmdldEZydXN0dW1QbGFuZXMoKTtcblxuICAgICAgICAvLyAyLiDpgY3ljobmiYDmnInlubPpnaLvvIzliKTmlq3ngrnmmK/lkKblnKjlubPpnaLlpJbkvqdcbiAgICAgICAgZm9yIChjb25zdCBwbGFuZSBvZiBmcnVzdHVtUGxhbmVzKSB7XG4gICAgICAgICAgICAvLyDorqHnrpfngrnliLDlubPpnaLnmoTot53nprvvvIjlubPpnaLlt7LlvZLkuIDljJbvvIzot53nprvlhazlvI/nroDljJbkuLogQXgrQnkrQ3orRO+8iVxuICAgICAgICAgICAgLy8g6KeG6ZSl5L2T5bmz6Z2i55qE5rOV57q/5pa55ZCR6YG15b6qIOKAnOaMh+WQkeinhumUpeS9k+WGhemDqOKAne+8jOiLpeeCueWIsOW5s+mdoueahOi3neemuyA+IDDvvIzliJnngrnlnKjlubPpnaLlhoXkvqfvvIjop4bplKXkvZPlhoXpg6jvvIlcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gcGxhbmUuZGlzdGFuY2VUb1BvaW50KHdvcmxkUG9pbnQpO1xuXG4gICAgICAgICAgICAvLyDoi6XngrnliLDku7vmhI/lubPpnaLnmoTot53nprsgPCAw77yI5Lil5qC85aSW5L6n77yM6ICD6JmR5rWu54K56K+v5beu55SoLTFlLTblrrnlt67vvInvvIzliJnngrnlnKjop4bplKXkvZPlpJZcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IC0xZS02KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gMy4g54K55Yiw5omA5pyJ5bmz6Z2i55qE6Led56a7IOKJpSAtMWUtNu+8jOWIpOWumuWcqOinhumUpeS9k+WGhVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgRW5naW5lIH0gZnJvbSBcIi4uL0NvcmUvRW5naW5lXCI7XG5pbXBvcnQgeyBCb3VuZHMgfSBmcm9tIFwiLi4vTWF0aC9Cb3VuZHNcIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgeyBQaHlzaWNNYXRlcmlhbCB9IGZyb20gXCIuLi9QaHlzaWNzL1BoeXNpY01hdGVyaWFsXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi9Db21wb25lbnRcIjtcbmltcG9ydCB7IFJpZ2lkYm9keSB9IGZyb20gXCIuL1JpZ2lkQm9keVwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29sbGlkZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHB1YmxpYyBhdHRhY2hlZFJpZ2lkYm9keTogUmlnaWRib2R5IHwgbnVsbDtcbiAgICBwdWJsaWMgYm91bmRzOiBCb3VuZHM7XG4gICAgcHVibGljIGlzVHJpZ2dlcjogQm9vbGVhbjtcbiAgICBwdWJsaWMgcGh5c2ljTWF0ZXJpYWw6IFBoeXNpY01hdGVyaWFsO1xuXG4gICAgcHJpdmF0ZSBfY2VudGVyOiBWZWN0b3IzID0gVmVjdG9yMy5aRVJPO1xuXG4gICAgcHVibGljIGdldCBjZW50ZXIoKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jZW50ZXIuY2xvbmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGNlbnRlcihuZXdDZW50ZXI6IFZlY3RvcjMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jZW50ZXIuZXF1YWxzKG5ld0NlbnRlcikpIHtcbiAgICAgICAgICAgIHRoaXMuX2NlbnRlciA9IG5ld0NlbnRlci5jbG9uZSgpO1xuICAgICAgICAgICAgLy8g6YCa5bi46ZyA6KaB6YeN5paw5Yid5aeL5YyW56Kw5pKe5L2TXG4gICAgICAgICAgICBFbmdpbmUucGh5c2ljcy5SZWJ1aWxkQ29sbGlkZXJzKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfbGFzdFNjYWxlOiBWZWN0b3IzID0gVmVjdG9yMy5aRVJPO1xuXG4gICAgcHVibGljIGFic3RyYWN0IGdldENvbGxpZGVyRGF0YSgpOiBhbnk7XG5cbiAgICBwdWJsaWMgb25FbmFibGUoKTogdm9pZCB7XG4gICAgICAgIC8vIGlmICh0aGlzLmF0dGFjaGVkUmlnaWRib2R5ID09IG51bGwgfHwgdGhpcy5jb25ub25TaGFwZSA9PSBudWxsKSB7XG4gICAgICAgIC8vICAgICB0aGlzLmF0dGFjaGVkUmlnaWRib2R5ID0gdGhpcy5nYW1lT2JqZWN0LmdldENvbXBvbmV0SW5QYXJlbnQoUmlnaWRib2R5KTtcbiAgICAgICAgLy8gICAgIGlmICh0aGlzLmF0dGFjaGVkUmlnaWRib2R5ID09IG51bGwpIHJldHVybjtcbiAgICAgICAgLy8gICAgIHRoaXMuY29ubm9uU2hhcGUgPSB0aGlzLmNyZWF0ZUNvbGxpZGVyKHRoaXMuYXR0YWNoZWRSaWdpZGJvZHkpO1xuICAgICAgICAvLyB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uVHJhbnNmb3JtQ2hhbmdlZCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudHJhbnNmb3JtLnNjYWxlLmVxdWFscyh0aGlzLl9sYXN0U2NhbGUpKSByZXR1cm47XG4gICAgICAgIHRoaXMuX2xhc3RTY2FsZSA9IHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgICAgICBFbmdpbmUucGh5c2ljcy5SZWJ1aWxkQ29sbGlkZXJzKHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIEVuZ2luZS5waHlzaWNzLlJlbW92ZUNvbGxpZGVyKHRoaXMpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBESVNBTExPV19DT01QT05FTlRTX0tFWSwgRElTQUxMT1dfTVVMVElQTEVfQ09NUE9ORU5UX0tFWSwgUkVRVUlSRURfQ09NUE9ORU5UU19LRVkgfSBmcm9tIFwiLi4vQ29yZS9EZWNvcmF0b3JzXCI7XG5pbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSBcIi4uL0NvcmUvR2FtZU9iamVjdFwiO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSBcIi4uL0NvcmUvVHJhbnNmb3JtXCI7XG5pbXBvcnQgeyBVT2JqZWN0IH0gZnJvbSBcIi4uL0NvcmUvVU9iamVjdFwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29tcG9uZW50IGV4dGVuZHMgVU9iamVjdCB7XG4gICAgcHVibGljIHJlYWRvbmx5IGdhbWVPYmplY3Q6IEdhbWVPYmplY3Q7XG5cbiAgICBwdWJsaWMgZ2V0IHRyYW5zZm9ybSgpOiBUcmFuc2Zvcm0ge1xuICAgICAgICByZXR1cm4gdGhpcy5nYW1lT2JqZWN0LnRyYW5zZm9ybTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9lbmFibGVkOiBib29sZWFuID0gdHJ1ZTtcbiAgICBwdWJsaWMgZ2V0IGVuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVkO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0IGVuYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHZhbHVlO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub25FbmFibGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25EaXNhYmxlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lT2JqZWN0OiBHYW1lT2JqZWN0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZ2FtZU9iamVjdCA9IGdhbWVPYmplY3Q7XG4gICAgICAgIHRoaXMuY2hlY2tSZXF1aXJlZENvbXBvbmVudHMoKTtcbiAgICAgICAgdGhpcy5jaGVja0NvbXBvbmVudFVuaXF1ZW5lc3MoKTtcbiAgICAgICAgdGhpcy5jaGVja0NvbXBvbmVudENvbXBhdGliaWxpdHkoKTtcbiAgICAgICAgdGhpcy5vbkF3YWtlKCk7XG4gICAgfVxuXG4gICAgLy8g55Sf5ZG95ZGo5pyf5pa55rOVXG4gICAgLy8g5b2T57uE5Lu26KKr5Yib5bu65pe26LCD55SoXG4gICAgcHVibGljIG9uQXdha2UoKTogdm9pZCB7IH1cblxuICAgIC8vIOWcqOWQr+eUqOe7hOS7tueahOesrOS4gOW4p+iwg+eUqFxuICAgIHB1YmxpYyBvblN0YXJ0KCk6IHZvaWQgeyB9XG5cbiAgICAvLyDmr4/luKfmm7TmlrDliY3osIPnlKhcbiAgICBwdWJsaWMgb25VcGRhdGUoKTogdm9pZCB7IH1cblxuICAgIC8vIOavj+W4p+abtOaWsOWQjuiwg+eUqFxuICAgIC8vcHVibGljIGxhdGVVcGRhdGUoKTogdm9pZCB7fVxuXG4gICAgLy8g5b2T57uE5Lu26KKr5ZCv55So5pe26LCD55SoXG4gICAgcHVibGljIG9uRW5hYmxlKCk6IHZvaWQgeyB9XG5cbiAgICAvLyDlvZPnu4Tku7booqvnpoHnlKjml7bosIPnlKhcbiAgICBwdWJsaWMgb25EaXNhYmxlKCk6IHZvaWQgeyB9XG5cbiAgICAvLyDlvZPnu4Tku7booqvplIDmr4Hml7bosIPnlKhcbiAgICBwdWJsaWMgb25EZXN0cm95KCk6IHZvaWQgeyB9XG5cbiAgICAvLyDnu5jliLbosIPor5Xkv6Hmga9cbiAgICAvLyBwdWJsaWMgb25EcmF3R2l6bW9zKCk6IHZvaWQgeyB9XG5cbiAgICAvKipcbiAgICAgKiDmo4Dmn6XpgJrov4dAUmVxdWlyZUNvbXBvbmVudOijhemlsOWZqOWjsOaYjueahOS+nei1lue7hOS7tuaYr+WQpuWtmOWcqFxuICAgICAqL1xuICAgIHB1YmxpYyBjaGVja1JlcXVpcmVkQ29tcG9uZW50cygpOiBCb29sZWFuIHtcbiAgICAgICAgLy8gMS4g6I635Y+W6YCa6L+H6KOF6aWw5Zmo5aOw5piO55qE5L6d6LWW57uE5Lu257G75Z6L5pWw57uEXG4gICAgICAgIGNvbnN0IHJlcXVpcmVkQ29tcG9uZW50czogKG5ldyAoZ2FtZU9iamVjdDogR2FtZU9iamVjdCkgPT4gQ29tcG9uZW50KVtdIHwgdW5kZWZpbmVkID1cbiAgICAgICAgICAgIFJlZmxlY3QuZ2V0TWV0YWRhdGEoUkVRVUlSRURfQ09NUE9ORU5UU19LRVksIHRoaXMuY29uc3RydWN0b3IpO1xuXG4gICAgICAgIC8vIOWmguaenOayoeacieWjsOaYjuS7u+S9leS+nei1lu+8jOWImeebtOaOpei/lOWbnlxuICAgICAgICBpZiAoIXJlcXVpcmVkQ29tcG9uZW50cyB8fCByZXF1aXJlZENvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDIuIOmBjeWOhuaJgOacieW/hemcgOeahOe7hOS7tuexu+Wei1xuICAgICAgICBmb3IgKGNvbnN0IGNvbXBUeXBlIG9mIHJlcXVpcmVkQ29tcG9uZW50cykge1xuICAgICAgICAgICAgLy8g6Lez6L+H5pyq5a6a5LmJ55qE57uE5Lu257G75Z6LXG4gICAgICAgICAgICBpZiAoY29tcFR5cGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAzLiDmo4Dmn6Xor6VHYW1lT2JqZWN05LiK5piv5ZCm5bey5oyC6L295omA6ZyA55qE57uE5Lu257G75Z6LXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0NvbXBvbmVudCA9IHRoaXMuZ2FtZU9iamVjdC5nZXRDb21wb25lbnQoY29tcFR5cGUpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ29tcG9uZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyA0LiDlpoLmnpzkvp3otZbnu4Tku7bkuI3lrZjlnKjvvIzovpPlh7rplJnor6/kv6Hmga9cbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDb21wb25lbnQgJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9IHJlcXVpcmVzIGEgJHtjb21wVHlwZS5uYW1lfSBvbiB0aGUgc2FtZSBHYW1lT2JqZWN0LmApO1xuXG4gICAgICAgICAgICAgICAgLy8gNS4g6Ieq5Yqo5re75Yqg57y65aSx55qE57uE5Lu277yI5L2/55So57G75Z6L5pat6KiA56Gu5L+d57G75Z6L5a6J5YWo77yJXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lT2JqZWN0LmFkZENvbXBvbmVudChjb21wVHlwZSBhcyBuZXcgKGdhbWVPYmplY3Q6IEdhbWVPYmplY3QpID0+IENvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBdXRvLWFkZGVkIG1pc3NpbmcgY29tcG9uZW50OiAke2NvbXBUeXBlLm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGF1dG8tYWRkIGNvbXBvbmVudCAke2NvbXBUeXBlLm5hbWV9OmAsIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOajgOafpeaYr+WQpuWtmOWcqOWkmuS4quS4jeWFgeiuuOWQjOaXtuWtmOWcqOeahOe7hOS7tlxuICAgICAqL1xuICAgIHB1YmxpYyBjaGVja0NvbXBvbmVudFVuaXF1ZW5lc3MoKTogQm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFR5cGUgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICBjb25zdCBpc0Rpc2FsbG93ZWQgPSBSZWZsZWN0LmdldE1ldGFkYXRhKERJU0FMTE9XX01VTFRJUExFX0NPTVBPTkVOVF9LRVksIGNvbXBvbmVudFR5cGUpO1xuXG4gICAgICAgIGlmIChpc0Rpc2FsbG93ZWQpIHtcbiAgICAgICAgICAgIC8vIOafpeaJvuWQjOexu+Wei+e7hOS7tlxuICAgICAgICAgICAgY29uc3Qgc2FtZVR5cGVDb21wb25lbnRzID0gdGhpcy5nYW1lT2JqZWN0LmdldEFsbENvbXBvbmVudHMoKS5maWx0ZXIoXG4gICAgICAgICAgICAgICAgY29tcCA9PiBjb21wIGluc3RhbmNlb2YgY29tcG9uZW50VHlwZSAmJiBjb21wICE9PSB0aGlzXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoc2FtZVR5cGVDb21wb25lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBDb21wb25lbnQgJHtjb21wb25lbnRUeXBlLm5hbWV9IGlzIG1hcmtlZCB3aXRoIEBEaXNhbGxvd011bHRpcGxlQ29tcG9uZW50LCBidXQgbXVsdGlwbGUgaW5zdGFuY2VzIHdlcmUgZm91bmQuIFRoaXMgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3IuYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5qOA5p+l57uE5Lu25YWx5a2Y6ZmQ5Yi2XG4gICAgICovXG4gICAgcHVibGljIGNoZWNrQ29tcG9uZW50Q29tcGF0aWJpbGl0eSgpOiBCb29sZWFuIHtcbiAgICAgICAgLy8g6I635Y+W5b2T5YmN57uE5Lu257G75LiK6YCa6L+HQERpc2FsbG93Q29tcG9uZW505aOw5piO55qE56aB5q2i5YWx5a2Y57uE5Lu257G75Z6LXG4gICAgICAgIGNvbnN0IGRpc2FsbG93ZWRDb21wb25lbnRzOiBGdW5jdGlvbltdIHwgdW5kZWZpbmVkID1cbiAgICAgICAgICAgIFJlZmxlY3QuZ2V0TWV0YWRhdGEoRElTQUxMT1dfQ09NUE9ORU5UU19LRVksIHRoaXMuY29uc3RydWN0b3IpO1xuXG4gICAgICAgIGlmICghZGlzYWxsb3dlZENvbXBvbmVudHMgfHwgZGlzYWxsb3dlZENvbXBvbmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTsgLy8g5aaC5p6c5rKh5pyJ5aOw5piO5Lu75L2V56aB5q2i5YWx5a2Y55qE57uE5Lu277yM55u05o6l6L+U5ZueXG4gICAgICAgIH1cblxuICAgICAgICAvLyDmo4Dmn6XmiYDmnInooqvnpoHmraLnmoTnu4Tku7bnsbvlnotcbiAgICAgICAgZm9yIChjb25zdCBkaXNhbGxvd2VkVHlwZSBvZiBkaXNhbGxvd2VkQ29tcG9uZW50cykge1xuICAgICAgICAgICAgaWYgKGRpc2FsbG93ZWRUeXBlID09IG51bGwpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyDmo4Dmn6XmmK/lkKblrZjlnKjooqvnpoHmraLnmoTnu4Tku7ZcbiAgICAgICAgICAgIGNvbnN0IGZvdW5kQ29tcG9uZW50ID0gdGhpcy5nYW1lT2JqZWN0LmdldENvbXBvbmVudChkaXNhbGxvd2VkVHlwZSk7XG4gICAgICAgICAgICBpZiAoZm91bmRDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyDlpoLmnpzmib7liLDooqvnpoHmraLnmoTnu4Tku7bvvIzmipvlh7rplJnor6/miJborablkYpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgQ29tcG9uZW50ICR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSBjYW5ub3QgY29leGlzdCB3aXRoICR7ZGlzYWxsb3dlZFR5cGUubmFtZX0gYCArXG4gICAgICAgICAgICAgICAgICAgIGBvbiB0aGUgc2FtZSBHYW1lT2JqZWN0LiBQbGVhc2UgcmVtb3ZlIG9uZSBvZiB0aGVtLmBcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgLy8g6Ieq5Yqo56e76Zmk5Yay56qB57uE5Lu2XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lT2JqZWN0LnJlbW92ZUNvbXBvbmVudChkaXNhbGxvd2VkVHlwZSk7XG5cbiAgICAgICAgICAgICAgICAvLyDmiJbogIXmipvlh7rlvILluLjpmLvmraLmuLjmiI/ov5DooYxcbiAgICAgICAgICAgICAgICAvLyB0aHJvdyBuZXcgRXJyb3IoYENvbXBvbmVudCBjb21wYXRpYmlsaXR5IGVycm9yOiAke3RoaXMuY29uc3RydWN0b3IubmFtZX0gdnMgJHtkaXNhbGxvd2VkVHlwZS5uYW1lfWApO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufSIsImltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL01hdGgvQ29sb3JcIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgeyBHaXptbyB9IGZyb20gXCIuLi9VdGlscy9HaXptb1wiO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4vQ29tcG9uZW50XCI7XG5cbmV4cG9ydCBlbnVtIExpZ2h0VHlwZSB7XG4gICAgRGlyZWN0aW9uYWwgPSAwLFxuICAgIFBvaW50ID0gMSxcbiAgICBTcG90ID0gMixcbn1cblxuZXhwb3J0IGVudW0gU2hhZG93VHlwZSB7XG4gICAgTm9uZSA9IDAsXG4gICAgSGFyZCA9IDEsXG4gICAgU29mdCA9IDIsXG59XG5cbmV4cG9ydCBjbGFzcyBMaWdodCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgcHVibGljIHN0YXRpYyBzdW5MaWdodDogTGlnaHQ7XG4gICAgcHVibGljIHR5cGU6IExpZ2h0VHlwZSA9IExpZ2h0VHlwZS5EaXJlY3Rpb25hbDtcbiAgICBwdWJsaWMgY29sb3I6IENvbG9yID0gQ29sb3IuV0hJVEU7XG4gICAgcHVibGljIGludGVuc2l0eTogbnVtYmVyID0gMTtcbiAgICBwdWJsaWMgc2hhZG93VHlwZTogU2hhZG93VHlwZSA9IFNoYWRvd1R5cGUuTm9uZTtcblxuICAgIHB1YmxpYyBvbkRyYXdHaXptb3MoKTogdm9pZCB7XG4gICAgICAgIEdpem1vLm1hdHJpeCA9IHRoaXMudHJhbnNmb3JtLmxvY2FsVG9Xb3JsZE1hdHJpeDtcbiAgICAgICAgR2l6bW8uRHJhd0F4aXMoVmVjdG9yMy5aRVJPLCAwLjEpO1xuICAgICAgICBHaXptby5jb2xvciA9IENvbG9yLldISVRFO1xuICAgICAgICBHaXptby5EcmF3Q3ViZShWZWN0b3IzLlpFUk8sIG5ldyBWZWN0b3IzKDAuMSwgMC4xLCAwLjUpKTtcbiAgICAgICAgR2l6bW8uY29sb3IgPSBDb2xvci5SRUQ7XG4gICAgICAgIEdpem1vLkRyYXdDdWJlKG5ldyBWZWN0b3IzKDAsIDAsIDAuMyksIFZlY3RvcjMuT05FLm11bHRpcGx5U2NhbGFyKDAuMSkpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gXCIuL1JlbmRlcmVyXCI7XG5pbXBvcnQgeyBNZXNoIH0gZnJvbSBcIi4uL1Jlc291cmNlcy9NZXNoXCI7XG5pbXBvcnQgeyBHaXptbyB9IGZyb20gXCIuLi9VdGlscy9HaXptb1wiO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiLi4vTWF0aC9Db2xvclwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjNcIjtcblxuZXhwb3J0IGNsYXNzIE1lc2hSZW5kZXJlciBleHRlbmRzIFJlbmRlcmVyIHtcbiAgICBwdWJsaWMgbWVzaDogTWVzaCB8IG51bGwgPSBudWxsO1xuXG4gICAgcHVibGljIHJlbmRlcigpOiB2b2lkIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBzdXBlci5vbkRlc3Ryb3koKTtcbiAgICAgICAgLy8g5riF55CG6LWE5rqQXG4gICAgICAgIHRoaXMubWVzaCA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gcHVibGljIG9uRHJhd0dpem1vcygpOiB2b2lkIHtcbiAgICAvLyAgICAgR2l6bW8ubWF0cml4ID0gdGhpcy50cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTWF0cml4O1xuICAgIC8vICAgICBHaXptby5EcmF3QXhpcyhWZWN0b3IzLlpFUk8sIDAuMSk7XG4gICAgLy8gfVxufSIsImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuL0NvbXBvbmVudFwiO1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tIFwiLi4vUmVzb3VyY2VzL01hdGVyaWFsXCI7XG5pbXBvcnQgeyBCb3VuZHMgfSBmcm9tIFwiLi4vTWF0aC9Cb3VuZHNcIjtcbmltcG9ydCB7IERpc2FsbG93TXVsdGlwbGVDb21wb25lbnQgfSBmcm9tIFwiLi4vQ29yZS9EZWNvcmF0b3JzXCI7XG5cbkBEaXNhbGxvd011bHRpcGxlQ29tcG9uZW50XG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVuZGVyZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIHByaXZhdGUgX2JvdW5kczogQm91bmRzID0gbmV3IEJvdW5kcygpO1xuICAgIHByaXZhdGUgX21hdGVyaWFsOiBNYXRlcmlhbCA9IG5ldyBNYXRlcmlhbCgpO1xuICAgIHByaXZhdGUgX3NvcnRpbmdMYXllcklEOiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgX3NvcnRpbmdPcmRlcjogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF9jYXN0U2hhZG93czogYm9vbGVhbiA9IHRydWU7XG4gICAgcHJpdmF0ZSBfcmVjZWl2ZVNoYWRvd3M6IGJvb2xlYW4gPSB0cnVlO1xuXG4gICAgLy8g5p2Q6LSo5bGe5oCnXG4gICAgcHVibGljIGdldCBtYXRlcmlhbCgpOiBNYXRlcmlhbCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IG1hdGVyaWFsKHZhbHVlOiBNYXRlcmlhbCkge1xuICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vIOaOkuW6j+WxgklEXG4gICAgcHVibGljIGdldCBzb3J0aW5nTGF5ZXJJRCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fc29ydGluZ0xheWVySUQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBzb3J0aW5nTGF5ZXJJRCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3NvcnRpbmdMYXllcklEID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8g5o6S5bqP6aG65bqPXG4gICAgcHVibGljIGdldCBzb3J0aW5nT3JkZXIoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvcnRpbmdPcmRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHNvcnRpbmdPcmRlcih2YWx1ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3NvcnRpbmdPcmRlciA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vIOaYr+WQpuaKleWwhOmYtOW9sVxuICAgIHB1YmxpYyBnZXQgY2FzdFNoYWRvd3MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYXN0U2hhZG93cztcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IGNhc3RTaGFkb3dzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2Nhc3RTaGFkb3dzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8g5piv5ZCm5o6l5pS26Zi05b2xXG4gICAgcHVibGljIGdldCByZWNlaXZlU2hhZG93cygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlY2VpdmVTaGFkb3dzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgcmVjZWl2ZVNoYWRvd3ModmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fcmVjZWl2ZVNoYWRvd3MgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvLyDmmK/lkKblupTor6XooqvmuLLmn5NcbiAgICBwdWJsaWMgZ2V0IHNob3VsZFJlbmRlcigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5hYmxlZCAmJiB0aGlzLmdhbWVPYmplY3QuYWN0aXZlO1xuICAgIH1cblxuICAgIC8vIOa4suafk+aWueazle+8jOWtkOexu+mcgOimgeWunueOsFxuICAgIHB1YmxpYyBhYnN0cmFjdCByZW5kZXIoKTogdm9pZDtcblxuICAgIHB1YmxpYyBvbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgfVxufSIsImltcG9ydCB7IEVuZ2luZSB9IGZyb20gXCIuLi9Db3JlL0VuZ2luZVwiO1xuaW1wb3J0IHsgTGF5ZXJNYXNrIH0gZnJvbSBcIi4uL0NvcmUvTGF5ZXJNYXNrXCI7XG5pbXBvcnQgeyBVT2JqZWN0IH0gZnJvbSBcIi4uL0NvcmUvVU9iamVjdFwiO1xuaW1wb3J0IHsgVGltZSB9IGZyb20gXCIuLi9Db3JlL1RpbWVcIjtcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tIFwiLi4vTWF0aC9RdWF0ZXJuaW9uXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgUmF5Y2FzdEhpdCB9IGZyb20gXCIuLi9QaHlzaWNzL1JheWNhc3RIaXRcIjtcbmltcG9ydCB7IENvbGxpZGVyIH0gZnJvbSBcIi4vQ29sbGlkZXJcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuL0NvbXBvbmVudFwiO1xuaW1wb3J0IHsgRGlzYWxsb3dNdWx0aXBsZUNvbXBvbmVudCB9IGZyb20gXCIuLi9Db3JlL0RlY29yYXRvcnNcIjtcblxuZXhwb3J0IGVudW0gRm9yY2VNb2RlIHtcbiAgICBGb3JjZSxcbiAgICBBY2NlbGVyYXRpb24sXG4gICAgSW1wdWxzZSxcbiAgICBWZWxvY2l0eUNoYW5nZVxufVxuXG5leHBvcnQgZW51bSBSaWdpZGJvZHlJbnRlcnBvbGF0aW9uIHtcbiAgICBOb25lLFxuICAgIEludGVycG9sYXRlLFxuICAgIEV4dHJhcG9sYXRlXG59XG5cbmV4cG9ydCBlbnVtIENvbGxpc2lvbkRldGVjdGlvbk1vZGUge1xuICAgIERpc2NyZXRlLFxuICAgIENvbnRpbnVvdXMsXG4gICAgQ29udGludW91c0R5bmFtaWMsXG4gICAgQ29udGludW91c1NwZWN1bGF0aXZlXG59XG5cbmV4cG9ydCBlbnVtIFJpZ2lkYm9keUNvbnN0cmFpbnRzIHtcbiAgICBOb25lID0gMCxcbiAgICBGcmVlemVQb3NpdGlvblggPSAxLFxuICAgIEZyZWV6ZVBvc2l0aW9uWSA9IDIsXG4gICAgRnJlZXplUG9zaXRpb25aID0gNCxcbiAgICBGcmVlemVSb3RhdGlvblggPSA4LFxuICAgIEZyZWV6ZVJvdGF0aW9uWSA9IDE2LFxuICAgIEZyZWV6ZVJvdGF0aW9uWiA9IDMyLFxuICAgIEZyZWV6ZVBvc2l0aW9uID0gRnJlZXplUG9zaXRpb25YIHwgRnJlZXplUG9zaXRpb25ZIHwgRnJlZXplUG9zaXRpb25aLFxuICAgIEZyZWV6ZVJvdGF0aW9uID0gRnJlZXplUm90YXRpb25YIHwgRnJlZXplUm90YXRpb25ZIHwgRnJlZXplUm90YXRpb25aLFxuICAgIEZyZWV6ZUFsbCA9IEZyZWV6ZVBvc2l0aW9uIHwgRnJlZXplUm90YXRpb25cbn1cblxuZXhwb3J0IGVudW0gUXVlcnlUcmlnZ2VySW50ZXJhY3Rpb24ge1xuICAgIFVzZUdsb2JhbCxcbiAgICBJZ25vcmUsXG4gICAgQ29sbGlkZVxufVxuXG5ARGlzYWxsb3dNdWx0aXBsZUNvbXBvbmVudFxuZXhwb3J0IGNsYXNzIFJpZ2lkYm9keSBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgcHVibGljIHZlbG9jaXR5OiBWZWN0b3IzO1xuICAgIHB1YmxpYyBhbmd1bGFyVmVsb2NpdHk6IFZlY3RvcjM7XG4gICAgcHVibGljIGRyYWc6IG51bWJlcjtcbiAgICBwdWJsaWMgYW5ndWxhckRyYWc6IG51bWJlcjtcbiAgICBwdWJsaWMgbWFzczogbnVtYmVyID0gMTtcbiAgICBwdWJsaWMgdXNlR3Jhdml0eTogYm9vbGVhbjtcbiAgICBwdWJsaWMgbWF4RGVwZW5ldHJhdGlvblZlbG9jaXR5OiBudW1iZXI7XG4gICAgcHVibGljIGlzS2luZW1hdGljOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHVibGljIGZyZWV6ZVJvdGF0aW9uOiBib29sZWFuO1xuICAgIHB1YmxpYyBjb25zdHJhaW50czogUmlnaWRib2R5Q29uc3RyYWludHM7XG4gICAgcHVibGljIGNvbGxpc2lvbkRldGVjdGlvbk1vZGU6IENvbGxpc2lvbkRldGVjdGlvbk1vZGU7XG4gICAgcHVibGljIGF1dG9tYXRpY0NlbnRlck9mTWFzczogYm9vbGVhbjtcbiAgICBwdWJsaWMgY2VudGVyT2ZNYXNzOiBWZWN0b3IzO1xuICAgIHB1YmxpYyBhdXRvbWF0aWNJbmVydGlhVGVuc29yOiBib29sZWFuO1xuICAgIHB1YmxpYyBpbmVydGlhVGVuc29yUm90YXRpb246IFF1YXRlcm5pb247XG4gICAgcHVibGljIGluZXJ0aWFUZW5zb3I6IFZlY3RvcjM7XG4gICAgcHVibGljIGRldGVjdENvbGxpc2lvbnM6IGJvb2xlYW47XG4gICAgcHVibGljIHBvc2l0aW9uOiBWZWN0b3IzO1xuICAgIHB1YmxpYyByb3RhdGlvbjogUXVhdGVybmlvbjtcbiAgICBwdWJsaWMgaW50ZXJwb2xhdGlvbjogUmlnaWRib2R5SW50ZXJwb2xhdGlvbjtcbiAgICBwdWJsaWMgc29sdmVySXRlcmF0aW9uczogbnVtYmVyO1xuICAgIHB1YmxpYyBzbGVlcFRocmVzaG9sZDogbnVtYmVyO1xuICAgIHB1YmxpYyBtYXhBbmd1bGFyVmVsb2NpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgbWF4TGluZWFyVmVsb2NpdHk6IG51bWJlcjtcbiAgICBwdWJsaWMgc29sdmVyVmVsb2NpdHlJdGVyYXRpb25zOiBudW1iZXI7XG4gICAgcHVibGljIGV4Y2x1ZGVMYXllcnM6IExheWVyTWFzaztcbiAgICBwdWJsaWMgaW5jbHVkZUxheWVyczogTGF5ZXJNYXNrO1xuXG5cbiAgICBwdWJsaWMgb25TdGFydCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgcGFyZW50UmlnaWRib2R5ID0gdGhpcy5nYW1lT2JqZWN0LmdldENvbXBvbmV0SW5QYXJlbnQoUmlnaWRib2R5KTtcbiAgICAgICAgaWYgKHBhcmVudFJpZ2lkYm9keSAmJiBwYXJlbnRSaWdpZGJvZHkgIT0gdGhpcykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi5LiA5Liq6IqC54K55bGC57qn5Y+q6IO95oul5pyJ5LiA5LiqUmlnaWRib2R557uE5Lu2XCIpO1xuICAgICAgICAgICAgVU9iamVjdC5EZXN0cm95KHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2hpbGRSaWdpZGJvZGllcyA9IHRoaXMuZ2FtZU9iamVjdC5nZXRDb21wb25lbnRzSW5DaGlsZHJlbihSaWdpZGJvZHkpO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkUmlnaWRib2R5IG9mIGNoaWxkUmlnaWRib2RpZXMpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZFJpZ2lkYm9keSA9PSB0aGlzKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuS4gOS4quiKgueCueWxgue6p+WPquiDveaLpeacieS4gOS4qlJpZ2lkYm9keee7hOS7tlwiKTtcbiAgICAgICAgICAgIFVPYmplY3QuRGVzdHJveShjaGlsZFJpZ2lkYm9keSk7XG4gICAgICAgIH1cblxuICAgICAgICBFbmdpbmUucGh5c2ljcy5DcmVhdGVSaWdpZGJvZHkodGhpcyk7XG5cbiAgICAgICAgY29uc3QgY29sbGlkZXJzID0gdGhpcy5nYW1lT2JqZWN0LmdldENvbXBvbmVudHNJbkNoaWxkcmVuKENvbGxpZGVyKTtcbiAgICAgICAgZm9yIChjb25zdCBjb2xsaWRlciBvZiBjb2xsaWRlcnMpIHtcbiAgICAgICAgICAgIGNvbGxpZGVyLmF0dGFjaGVkUmlnaWRib2R5ID0gdGhpcztcbiAgICAgICAgICAgIEVuZ2luZS5waHlzaWNzLkNyZWF0ZUNvbGxpZGVyKGNvbGxpZGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvblVwZGF0ZSgpOiB2b2lkIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICBFbmdpbmUucGh5c2ljcy5SZW1vdmVSaWdpZGJvZHkodGhpcyk7XG4gICAgfVxuXG4gICAgLy8g5Y+q6K+75bGe5oCnXG4gICAgcHVibGljIGdldCB3b3JsZENlbnRlck9mTWFzcygpOiBWZWN0b3IzIHtcbiAgICAgICAgLy8g5a6e546w6I635Y+W5LiW55WM5Z2Q5qCH57O75LiL55qE6LSo5b+DXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygpO1xuICAgIH1cblxuICAgIC8vIOaWueazlVxuICAgIHB1YmxpYyBzZXREZW5zaXR5KGRlbnNpdHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgICAvLyDmoLnmja7lr4bluqborr7nva7otKjph49cbiAgICB9XG5cbiAgICBwdWJsaWMgbW92ZVBvc2l0aW9uKHBvc2l0aW9uOiBWZWN0b3IzKTogdm9pZCB7XG4gICAgICAgIC8vIOenu+WKqOWImuS9k+WIsOaMh+WumuS9jee9rlxuICAgIH1cblxuICAgIHB1YmxpYyBtb3ZlUm90YXRpb24ocm90YXRpb246IFF1YXRlcm5pb24pOiB2b2lkIHtcbiAgICAgICAgLy8g5peL6L2s5Yia5L2T5Yiw5oyH5a6a5pa55ZCRXG4gICAgfVxuXG4gICAgcHVibGljIG1vdmUocG9zaXRpb246IFZlY3RvcjMsIHJvdGF0aW9uOiBRdWF0ZXJuaW9uKTogdm9pZCB7XG4gICAgICAgIC8vIOWQjOaXtuenu+WKqOWSjOaXi+i9rOWImuS9k1xuICAgIH1cblxuICAgIHB1YmxpYyBzbGVlcCgpOiB2b2lkIHtcbiAgICAgICAgLy8g6K6p5Yia5L2T6L+b5YWl552h55yg54q25oCBXG4gICAgfVxuXG4gICAgcHVibGljIGlzU2xlZXBpbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIC8vIOajgOafpeWImuS9k+aYr+WQpuWcqOedoeecoOeKtuaAgVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIHdha2VVcCgpOiB2b2lkIHtcbiAgICAgICAgLy8g5ZSk6YaS5Yia5L2TXG4gICAgfVxuXG4gICAgcHVibGljIHJlc2V0Q2VudGVyT2ZNYXNzKCk6IHZvaWQge1xuICAgICAgICAvLyDph43nva7otKjlv4NcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVzZXRJbmVydGlhVGVuc29yKCk6IHZvaWQge1xuICAgICAgICAvLyDph43nva7mg6/mgKflvKDph49cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UmVsYXRpdmVQb2ludFZlbG9jaXR5KHJlbGF0aXZlUG9pbnQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICAgICAgLy8g6I635Y+W55u45a+554K555qE6YCf5bqmXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRQb2ludFZlbG9jaXR5KHdvcmxkUG9pbnQ6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICAgICAgLy8g6I635Y+W5LiW55WM54K555qE6YCf5bqmXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBY2N1bXVsYXRlZEZvcmNlKHN0ZXA6IG51bWJlciA9IFRpbWUuZml4ZWREZWx0YVRpbWUpOiBWZWN0b3IzIHtcbiAgICAgICAgLy8g6I635Y+W57Sv56ev55qE5YqbXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBY2N1bXVsYXRlZFRvcnF1ZShzdGVwOiBudW1iZXIgPSBUaW1lLmZpeGVkRGVsdGFUaW1lKTogVmVjdG9yMyB7XG4gICAgICAgIC8vIOiOt+WPlue0r+enr+eahOaJreefqVxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoKTtcbiAgICB9XG5cbiAgICAvLyDlipvnmoTmt7vliqDmlrnms5VcbiAgICBwdWJsaWMgYWRkRm9yY2UoZm9yY2U6IFZlY3RvcjMsIG1vZGU6IEZvcmNlTW9kZSk6IHZvaWQ7XG4gICAgcHVibGljIGFkZEZvcmNlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIG1vZGU6IEZvcmNlTW9kZSk6IHZvaWQ7XG4gICAgcHVibGljIGFkZEZvcmNlKGZvcmNlT3JYOiBWZWN0b3IzIHwgbnVtYmVyLCBtb2RlT3JZPzogRm9yY2VNb2RlIHwgbnVtYmVyLCB6PzogbnVtYmVyLCBtb2RlPzogRm9yY2VNb2RlKTogdm9pZCB7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFJlbGF0aXZlRm9yY2UoZm9yY2U6IFZlY3RvcjMsIG1vZGU6IEZvcmNlTW9kZSk6IHZvaWQ7XG4gICAgcHVibGljIGFkZFJlbGF0aXZlRm9yY2UoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgbW9kZTogRm9yY2VNb2RlKTogdm9pZDtcbiAgICBwdWJsaWMgYWRkUmVsYXRpdmVGb3JjZShmb3JjZU9yWDogVmVjdG9yMyB8IG51bWJlciwgbW9kZU9yWT86IEZvcmNlTW9kZSB8IG51bWJlciwgej86IG51bWJlciwgbW9kZT86IEZvcmNlTW9kZSk6IHZvaWQge1xuICAgICAgICAvLyDlrp7njrDmt7vliqDnm7jlr7nlipvnmoTph43ovb1cbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkVG9ycXVlKHRvcnF1ZTogVmVjdG9yMywgbW9kZTogRm9yY2VNb2RlKTogdm9pZDtcbiAgICBwdWJsaWMgYWRkVG9ycXVlKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIG1vZGU6IEZvcmNlTW9kZSk6IHZvaWQ7XG4gICAgcHVibGljIGFkZFRvcnF1ZSh0b3JxdWVPclg6IFZlY3RvcjMgfCBudW1iZXIsIG1vZGVPclk/OiBGb3JjZU1vZGUgfCBudW1iZXIsIHo/OiBudW1iZXIsIG1vZGU/OiBGb3JjZU1vZGUpOiB2b2lkIHtcbiAgICAgICAgLy8g5a6e546w5re75Yqg5omt55+p55qE6YeN6L29XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFJlbGF0aXZlVG9ycXVlKHRvcnF1ZTogVmVjdG9yMywgbW9kZTogRm9yY2VNb2RlKTogdm9pZDtcbiAgICBwdWJsaWMgYWRkUmVsYXRpdmVUb3JxdWUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgbW9kZTogRm9yY2VNb2RlKTogdm9pZDtcbiAgICBwdWJsaWMgYWRkUmVsYXRpdmVUb3JxdWUodG9ycXVlT3JYOiBWZWN0b3IzIHwgbnVtYmVyLCBtb2RlT3JZPzogRm9yY2VNb2RlIHwgbnVtYmVyLCB6PzogbnVtYmVyLCBtb2RlPzogRm9yY2VNb2RlKTogdm9pZCB7XG4gICAgICAgIC8vIOWunueOsOa3u+WKoOebuOWvueaJreefqeeahOmHjei9vVxuICAgIH1cblxuICAgIHB1YmxpYyBhZGRGb3JjZUF0UG9zaXRpb24oZm9yY2U6IFZlY3RvcjMsIHBvc2l0aW9uOiBWZWN0b3IzLCBtb2RlOiBGb3JjZU1vZGUgPSBGb3JjZU1vZGUuRm9yY2UpOiB2b2lkIHtcbiAgICAgICAgLy8g5Zyo5oyH5a6a5L2N572u5re75Yqg5YqbXG4gICAgfVxuXG4gICAgcHVibGljIGFkZEV4cGxvc2lvbkZvcmNlKGV4cGxvc2lvbkZvcmNlOiBudW1iZXIsIGV4cGxvc2lvblBvc2l0aW9uOiBWZWN0b3IzLCBleHBsb3Npb25SYWRpdXM6IG51bWJlciwgdXB3YXJkc01vZGlmaWVyOiBudW1iZXIgPSAwLCBtb2RlOiBGb3JjZU1vZGUgPSBGb3JjZU1vZGUuRm9yY2UpOiB2b2lkIHtcbiAgICAgICAgLy8g5re75Yqg54iG54K45YqbXG4gICAgfVxuXG4gICAgcHVibGljIGNsb3Nlc3RQb2ludE9uQm91bmRzKHBvc2l0aW9uOiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgICAgIC8vIOiOt+WPlui+ueeVjOS4iuacgOi/keeahOeCuVxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3dlZXBUZXN0KGRpcmVjdGlvbjogVmVjdG9yMywgaGl0SW5mbzogUmF5Y2FzdEhpdCwgbWF4RGlzdGFuY2U6IG51bWJlciA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgcXVlcnlUcmlnZ2VySW50ZXJhY3Rpb246IFF1ZXJ5VHJpZ2dlckludGVyYWN0aW9uID0gUXVlcnlUcmlnZ2VySW50ZXJhY3Rpb24uVXNlR2xvYmFsKTogYm9vbGVhbiB7XG4gICAgICAgIC8vIOaJq+aPj+a1i+ivlVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIHN3ZWVwVGVzdEFsbChkaXJlY3Rpb246IFZlY3RvcjMsIG1heERpc3RhbmNlOiBudW1iZXIgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksIHF1ZXJ5VHJpZ2dlckludGVyYWN0aW9uOiBRdWVyeVRyaWdnZXJJbnRlcmFjdGlvbiA9IFF1ZXJ5VHJpZ2dlckludGVyYWN0aW9uLlVzZUdsb2JhbCk6IFJheWNhc3RIaXRbXSB7XG4gICAgICAgIC8vIOaJq+aPj+a1i+ivleaJgOacieeisOaSnlxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLy8g5bey5bqf5byD55qE5pa55rOV77yI5L+d5oyB5YW85a655oCn77yJXG4gICAgcHVibGljIHNldE1heEFuZ3VsYXJWZWxvY2l0eShhOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tYXhBbmd1bGFyVmVsb2NpdHkgPSBhO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tIFwiLi4vQ29yZS9FbmdpbmVcIjtcbmltcG9ydCB7IENvbGxpZGVyIH0gZnJvbSBcIi4vQ29sbGlkZXJcIjtcblxuZXhwb3J0IGludGVyZmFjZSBTcGhlcmVDb2xsaWRlckRhdGEge1xuICAgIHJhZGl1czogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgU3BoZXJlQ29sbGlkZXIgZXh0ZW5kcyBDb2xsaWRlciB7XG4gICAgcHVibGljIF9yYWRpdXM6IG51bWJlciA9IDAuNTtcblxuICAgIHB1YmxpYyBnZXQgcmFkaXVzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYWRpdXM7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCByYWRpdXMobmV3UmFkaXVzOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JhZGl1cyAhPT0gbmV3UmFkaXVzKSB7XG4gICAgICAgICAgICB0aGlzLl9yYWRpdXMgPSBuZXdSYWRpdXM7XG4gICAgICAgICAgICAvLyDpgJrluLjpnIDopoHph43mlrDliJ3lp4vljJbnorDmkp7kvZNcbiAgICAgICAgICAgIEVuZ2luZS5waHlzaWNzLlJlYnVpbGRDb2xsaWRlcnModGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q29sbGlkZXJEYXRhKCk6IFNwaGVyZUNvbGxpZGVyRGF0YSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByYWRpdXM6IHRoaXMuX3JhZGl1cyAqIHRoaXMudHJhbnNmb3JtLndvcmxkU2NhbGUueCxcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOi/lOWbnueQg+eahOS9k+enr++8iOeUqOS6juiuoeeul+i0qOmHj+etie+8iVxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRWb2x1bWUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICg0LjAgLyAzLjApICogTWF0aC5QSSAqIE1hdGgucG93KHRoaXMucmFkaXVzLCAzKTtcbiAgICB9XG59IiwiLypcbiAqIOebuOacuuaOp+WItuWPr+S7peWPguiAg3RocmVlLmpz55qET3JiaXRDb250cm9scy5qc++8mmh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9yMTA4L2V4YW1wbGVzL2pzL2NvbnRyb2xzL09yYml0Q29udHJvbHMuanMjTDM5MC1MMzk1XG4gKi9cblxuaW1wb3J0IHsgUmVxdWlyZUNvbXBvbmVudCB9IGZyb20gXCIuLi8uLi9Db3JlL0RlY29yYXRvcnNcIjtcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gXCIuLi8uLi9Db3JlL0VuZ2luZVwiO1xuaW1wb3J0IHsgSW5wdXQsIElucHV0QXhpcyB9IGZyb20gXCIuLi8uLi9Db3JlL0lucHV0XCI7XG5pbXBvcnQgeyBUaW1lIH0gZnJvbSBcIi4uLy4uL0NvcmUvVGltZVwiO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gXCIuLi8uLi9NYXRoL1F1YXRlcm5pb25cIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vLi4vTWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgeyBDYW1lcmEsIFByb2plY3Rpb24gfSBmcm9tIFwiLi4vQ2FtZXJhXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi4vQ29tcG9uZW50XCI7XG5cbkBSZXF1aXJlQ29tcG9uZW50KENhbWVyYSlcbmV4cG9ydCBjbGFzcyBDYW1lcmFDb250cm9sbGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBwdWJsaWMgbW92ZVNwZWVkID0gMC41O1xuICAgIHB1YmxpYyBtb3ZlU3BlZWRTaGlmdFNjYWxlID0gMi41O1xuICAgIHB1YmxpYyBkcmFnU3BlZWQgPSAwLjM7XG4gICAgcHVibGljIGRhbXAgPSAwLjI7XG4gICAgcHVibGljIHJvdGF0ZVNwZWVkID0gMTtcblxuICAgIHByaXZhdGUgX2NhbWVyYTogQ2FtZXJhIHwgbnVsbDtcbiAgICBwcml2YXRlIF9ldWxlciA9IG5ldyBWZWN0b3IzKCk7XG4gICAgcHJpdmF0ZSBfdmVsb2NpdHkgPSBuZXcgVmVjdG9yMygpO1xuICAgIHByaXZhdGUgX3Bvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcbiAgICBwcml2YXRlIF9zcGVlZFNjYWxlID0gMTtcbiAgICBwcml2YXRlIF9yb3RhdGVDYW1lcmEgPSBmYWxzZTtcbiAgICBwcml2YXRlIF9yb3RhdGVDZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXG4gICAgcHVibGljIG9uU3RhcnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX2NhbWVyYSA9IHRoaXMuZ2FtZU9iamVjdC5nZXRDb21wb25lbnQoQ2FtZXJhKTtcbiAgICAgICAgdGhpcy5fZXVsZXIgPSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbi5ldWxlckFuZ2xlcztcbiAgICAgICAgdGhpcy5fcG9zaXRpb24gPSB0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUlucHV0KCk6IHZvaWQge1xuICAgICAgICAvLyBXU0FEUUUrU0hJRlTnm7jmnLrnp7vliqjku6Xlj4rliqDpgJ9cbiAgICAgICAgdGhpcy5fdmVsb2NpdHkueCA9IElucHV0LkdldEF4aXMoSW5wdXRBeGlzLkhvcml6b250YWwpO1xuICAgICAgICB0aGlzLl92ZWxvY2l0eS56ID0gSW5wdXQuR2V0QXhpcyhJbnB1dEF4aXMuVmVydGljYWwpO1xuICAgICAgICB0aGlzLl92ZWxvY2l0eS55ID0gSW5wdXQuR2V0S2V5KElucHV0LktleUNvZGUuUSkgPyAtMSA6IElucHV0LkdldEtleShJbnB1dC5LZXlDb2RlLkUpID8gMSA6IDA7XG4gICAgICAgIHRoaXMuX3NwZWVkU2NhbGUgPSBJbnB1dC5HZXRLZXkoSW5wdXQuS2V5Q29kZS5TaGlmdCkgPyB0aGlzLm1vdmVTcGVlZFNoaWZ0U2NhbGUgOiAxO1xuXG4gICAgICAgIC8vIOm8oOagh+S4remUruebuOacuuaLluWKqFxuICAgICAgICBpZiAoSW5wdXQuR2V0TW91c2VCdXR0b24oMSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vdmVEZWx0YSA9IElucHV0Lm1vdXNlRGVsdGE7XG4gICAgICAgICAgICAvL1RPRE866L+Z6YeM5bqU6K+l5piv5omY5aSa5bCR5bCx56e75Yqo5aSa5bCR77yM6ICM5LiN5piv5LmY5LiA5Liq57O75pWwXG4gICAgICAgICAgICB0aGlzLl92ZWxvY2l0eS54IC09IG1vdmVEZWx0YS54ICogdGhpcy5kcmFnU3BlZWQ7XG4gICAgICAgICAgICB0aGlzLl92ZWxvY2l0eS55ICs9IG1vdmVEZWx0YS55ICogdGhpcy5kcmFnU3BlZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDpvKDmoIfmu5rova7nm7jmnLrnvKnmlL5cbiAgICAgICAgY29uc3Qgc2Nyb2xsRGVsdGEgPSBJbnB1dC5tb3VzZVNjcm9sbERlbHRhLnkgKiB0aGlzLm1vdmVTcGVlZDtcbiAgICAgICAgaWYgKHRoaXMuX2NhbWVyYT8ucHJvamVjdGlvbiA9PSBQcm9qZWN0aW9uLk9ydGhvZ3JhcGhpYykge1xuICAgICAgICAgICAgdGhpcy5fY2FtZXJhLm9ydGhvZ3JhcGhpY1NpemUgKz0gc2Nyb2xsRGVsdGEgKiAwLjAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIHBvcyA9IHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uLnRyYW5zZm9ybVF1YXQoVmVjdG9yMy5CQUNLKTtcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdGhpcy5zY2FsZUFuZEFkZCh0aGlzLnRyYW5zZm9ybS5wb3NpdGlvbiwgcG9zLCBzY3JvbGxEZWx0YSAqIDAuMSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDpvKDmoIflj7PplK7nm7jmnLrml4vovaxcbiAgICAgICAgaWYgKElucHV0LkdldE1vdXNlQnV0dG9uRG93bigwKSkge1xuICAgICAgICAgICAgRW5naW5lLmNhbnZhcy5yZXF1ZXN0UG9pbnRlckxvY2soKTtcbiAgICAgICAgICAgIHRoaXMuX3JvdGF0ZUNhbWVyYSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKElucHV0LkdldE1vdXNlQnV0dG9uVXAoMikpIHtcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5leGl0UG9pbnRlckxvY2spIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaygpO1xuICAgICAgICAgICAgdGhpcy5fcm90YXRlQ2FtZXJhID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JvdGF0ZUNhbWVyYSkge1xuICAgICAgICAgICAgY29uc3QgbW92ZURlbHRhID0gSW5wdXQubW91c2VEZWx0YTtcbiAgICAgICAgICAgIHRoaXMuX2V1bGVyLnkgKz0gbW92ZURlbHRhLnggKiB0aGlzLnJvdGF0ZVNwZWVkICogMC4xO1xuICAgICAgICAgICAgdGhpcy5fZXVsZXIueCArPSBtb3ZlRGVsdGEueSAqIHRoaXMucm90YXRlU3BlZWQgKiAwLjE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBTFQr6byg5qCH5bem6ZSu55u45py657uV5Lit5b+D54K55peL6L2sXG4gICAgICAgIC8vIGlmIChJbnB1dC5HZXRLZXkoSW5wdXQuS2V5Q29kZS5BbHQpICYmIElucHV0LkdldE1vdXNlQnV0dG9uKDApKSB7XG4gICAgICAgIC8vICAgICBjb25zdCBtb3ZlRGVsdGEgPSBJbnB1dC5tb3VzZURlbHRhO1xuICAgICAgICAvLyAgICAgdGhpcy5fZXVsZXIueSAtPSBtb3ZlRGVsdGEueCAqIHRoaXMucm90YXRlU3BlZWQgKiAwLjE7XG4gICAgICAgIC8vICAgICB0aGlzLl9ldWxlci54ICs9IG1vdmVEZWx0YS55ICogdGhpcy5yb3RhdGVTcGVlZCAqIDAuMTtcbiAgICAgICAgLy8gfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2NhbGVBbmRBZGQoYTogVmVjdG9yMywgYjogVmVjdG9yMywgc2NhbGU6IG51bWJlcik6IFZlY3RvcjMge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgICAgb3V0LnggPSBhLnggKyBiLnggKiBzY2FsZTtcbiAgICAgICAgb3V0LnkgPSBhLnkgKyBiLnkgKiBzY2FsZTtcbiAgICAgICAgb3V0LnogPSBhLnogKyBiLnogKiBzY2FsZTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25VcGRhdGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlSW5wdXQoKTtcblxuICAgICAgICAvLyBwb3NpdGlvblxuICAgICAgICB2YXIgdiA9IHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uLnRyYW5zZm9ybVF1YXQodGhpcy5fdmVsb2NpdHkpO1xuICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHRoaXMuc2NhbGVBbmRBZGQodGhpcy5fcG9zaXRpb24sIHYsIHRoaXMubW92ZVNwZWVkICogdGhpcy5fc3BlZWRTY2FsZSk7XG4gICAgICAgIHYgPSBWZWN0b3IzLmxlcnAodGhpcy50cmFuc2Zvcm0ucG9zaXRpb24sIHRoaXMuX3Bvc2l0aW9uLCBUaW1lLmRlbHRhVGltZSAvIHRoaXMuZGFtcCk7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnBvc2l0aW9uID0gdjtcblxuICAgICAgICAvLyByb3RhdGlvblxuICAgICAgICB2YXIgcSA9IG5ldyBRdWF0ZXJuaW9uKG5ldyBWZWN0b3IzKHRoaXMuX2V1bGVyLngsIHRoaXMuX2V1bGVyLnksIHRoaXMuX2V1bGVyLnopKTtcbiAgICAgICAgcSA9IFF1YXRlcm5pb24uc2xlcnAodGhpcy50cmFuc2Zvcm0ucm90YXRpb24sIHEsIFRpbWUuZGVsdGFUaW1lIC8gdGhpcy5kYW1wKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24gPSBxO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBEaXNhbGxvd0NvbXBvbmVudCB9IGZyb20gXCIuLi8uLi9Db3JlL0RlY29yYXRvcnNcIjtcbmltcG9ydCB7IElucHV0IH0gZnJvbSBcIi4uLy4uL0NvcmUvSW5wdXRcIjtcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tIFwiLi4vLi4vTWF0aC9RdWF0ZXJuaW9uXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uLy4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgRGVidWcgfSBmcm9tIFwiLi4vLi4vVXRpbHMvRGVidWdcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuLi9Db21wb25lbnRcIjtcbmltcG9ydCB7IFJpZ2lkYm9keSB9IGZyb20gXCIuLi9SaWdpZEJvZHlcIjtcblxuQERpc2FsbG93Q29tcG9uZW50KFJpZ2lkYm9keSlcbmV4cG9ydCBjbGFzcyBPYmpBdXRvUm90YXRlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIGFuZ2xlWCA9IDA7XG4gICAgcHJpdmF0ZSBhbmdsZVkgPSAwO1xuXG4gICAgcHVibGljIG9uU3RhcnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYW5nbGVYID0gdGhpcy50cmFuc2Zvcm0ucm90YXRpb24uZXVsZXJBbmdsZXMueDtcbiAgICAgICAgdGhpcy5hbmdsZVkgPSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbi5ldWxlckFuZ2xlcy55O1xuICAgIH1cblxuICAgIHB1YmxpYyBvblVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hbmdsZVkgKz0gMTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24gPSBuZXcgUXVhdGVybmlvbihuZXcgVmVjdG9yMyh0aGlzLmFuZ2xlWCwgdGhpcy5hbmdsZVksIDApKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgRGlzYWxsb3dDb21wb25lbnQgfSBmcm9tIFwiLi4vLi4vQ29yZS9EZWNvcmF0b3JzXCI7XG5pbXBvcnQgeyBJbnB1dCB9IGZyb20gXCIuLi8uLi9Db3JlL0lucHV0XCI7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSBcIi4uLy4uL01hdGgvUXVhdGVybmlvblwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi8uLi9NYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IERlYnVnIH0gZnJvbSBcIi4uLy4uL1V0aWxzL0RlYnVnXCI7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tIFwiLi4vQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBSaWdpZGJvZHkgfSBmcm9tIFwiLi4vUmlnaWRCb2R5XCI7XG5cbkBEaXNhbGxvd0NvbXBvbmVudChSaWdpZGJvZHkpXG5leHBvcnQgY2xhc3MgT2JqUm90YXRlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBwcml2YXRlIGFuZ2xlWCA9IDA7XG4gICAgcHJpdmF0ZSBhbmdsZVkgPSAwO1xuXG4gICAgcHVibGljIG9uU3RhcnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYW5nbGVYID0gdGhpcy50cmFuc2Zvcm0ucm90YXRpb24uZXVsZXJBbmdsZXMueDtcbiAgICAgICAgdGhpcy5hbmdsZVkgPSB0aGlzLnRyYW5zZm9ybS5yb3RhdGlvbi5ldWxlckFuZ2xlcy55O1xuICAgIH1cblxuICAgIHB1YmxpYyBvblVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgLy8gLy8g6ZSu55uY6L6T5YWlXG4gICAgICAgIC8vIGNvbnN0IGhvcml6b250YWxJbnB1dCA9IElucHV0LkdldEF4aXMoSW5wdXRBeGlzLkhvcml6b250YWwpO1xuICAgICAgICAvLyBjb25zdCB2ZXJ0aWNhbElucHV0ID0gSW5wdXQuR2V0QXhpcyhJbnB1dEF4aXMuVmVydGljYWwpO1xuICAgICAgICAvLyB0aGlzLmFuZ2xlWCArPSB2ZXJ0aWNhbElucHV0O1xuICAgICAgICAvLyB0aGlzLmFuZ2xlWSArPSBob3Jpem9udGFsSW5wdXQ7XG4gICAgICAgIC8vIHRoaXMudHJhbnNmb3JtLnJvdGF0aW9uID0gbmV3IFF1YXRlcm5pb24obmV3IFZlY3RvcjModGhpcy5hbmdsZVgsIHRoaXMuYW5nbGVZLCAwKSk7XG5cbiAgICAgICAgLy8gLy8g6byg5qCH5rua6L2uXG4gICAgICAgIC8vIGlmIChJbnB1dC5tb3VzZVNjcm9sbERlbHRhLnkgIT09IDApIHtcbiAgICAgICAgLy8gICAgIC8vIOe8qeaUvlxuICAgICAgICAvLyAgICAgY29uc3Qgem9vbUZhY3RvciA9IElucHV0Lm1vdXNlU2Nyb2xsRGVsdGEueSA+IDAgPyAwLjkgOiAxLjE7XG4gICAgICAgIC8vICAgICBjb25zdCBzYWNsZSA9IHRoaXMudHJhbnNmb3JtLnNjYWxlO1xuICAgICAgICAvLyAgICAgc2FjbGUubXVsdGlwbHkoem9vbUZhY3Rvcik7XG4gICAgICAgIC8vICAgICB0aGlzLnRyYW5zZm9ybS5zY2FsZSA9IHNhY2xlO1xuICAgICAgICAvLyB9XG4gICAgICAgIFxuICAgICAgICBpZihJbnB1dC5HZXRLZXkoSW5wdXQuS2V5Q29kZS5OdW1wYWQ0KSkgdGhpcy5hbmdsZVkgLT0gMTtcbiAgICAgICAgaWYoSW5wdXQuR2V0S2V5KElucHV0LktleUNvZGUuTnVtcGFkNikpIHRoaXMuYW5nbGVZICs9IDE7XG4gICAgICAgIGlmKElucHV0LkdldEtleShJbnB1dC5LZXlDb2RlLk51bXBhZDgpKSB0aGlzLmFuZ2xlWCAtPSAxO1xuICAgICAgICBpZihJbnB1dC5HZXRLZXkoSW5wdXQuS2V5Q29kZS5OdW1wYWQyKSkgdGhpcy5hbmdsZVggKz0gMTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucm90YXRpb24gPSBuZXcgUXVhdGVybmlvbihuZXcgVmVjdG9yMyh0aGlzLmFuZ2xlWCwgdGhpcy5hbmdsZVksIDApKTtcblxuICAgICAgICBEZWJ1Zy5Mb2codGhpcy5nYW1lT2JqZWN0Lm5hbWUgKyBcIiBYOlwiICsgTWF0aC5mbG9vcih0aGlzLmFuZ2xlWCkgKyBcIiBZOlwiICsgTWF0aC5mbG9vcih0aGlzLmFuZ2xlWSkpO1xuICAgIH1cbn0iLCJpbXBvcnQgJ3JlZmxlY3QtbWV0YWRhdGEnO1xuXG5leHBvcnQgY29uc3QgUkVRVUlSRURfQ09NUE9ORU5UU19LRVkgPSBTeW1ib2woJ3JlcXVpcmVkQ29tcG9uZW50cycpO1xuZXhwb3J0IGNvbnN0IERJU0FMTE9XX01VTFRJUExFX0NPTVBPTkVOVF9LRVkgPSBTeW1ib2woJ0Rpc2FsbG93TXVsdGlwbGVDb21wb25lbnQnKTtcbmV4cG9ydCBjb25zdCBESVNBTExPV19DT01QT05FTlRTX0tFWSA9IFN5bWJvbCgnRGlzYWxsb3dlZENvbXBvbmVudHMnKTtcblxuLyoqXG4gKiDoo4XppbDlmajvvJrmoIforrDlvZPliY3nu4Tku7bpnIDopoHkvp3otZbnmoTlhbbku5bnu4Tku7bnsbvlnotcbiAqIEBwYXJhbSBjb21wb25lbnRUeXBlcyDpnIDopoHkvp3otZbnmoTnu4Tku7bnsbvlnovmlbDnu4RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJlcXVpcmVDb21wb25lbnQoLi4uY29tcG9uZW50VHlwZXM6IEZ1bmN0aW9uW10pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogRnVuY3Rpb24pIHtcbiAgICAgICAgLy8g5bCG5L6d6LWW55qE57uE5Lu257G75Z6L5YWD5pWw5o2u5a2Y5YKo5Zyo55uu5qCH57uE5Lu25LiKXG4gICAgICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoUkVRVUlSRURfQ09NUE9ORU5UU19LRVksIGNvbXBvbmVudFR5cGVzLCB0YXJnZXQpO1xuICAgIH07XG59XG5cbi8qKlxuICog6KOF6aWw5Zmo77ya5qCH6K6w5b2T5YmN57uE5Lu25LiN5YWB6K645LiO5oyH5a6a57G75Z6L55qE57uE5Lu25YWx5a2Y5LqO5ZCM5LiA5LiqR2FtZU9iamVjdOS4ilxuICogQHBhcmFtIGRpc2FsbG93ZWRDb21wb25lbnRUeXBlcyDkuI3lhYHorrjlhbHlrZjnmoTnu4Tku7bnsbvlnovmlbDnu4RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIERpc2FsbG93Q29tcG9uZW50KC4uLmRpc2FsbG93ZWRDb21wb25lbnRUeXBlczogRnVuY3Rpb25bXSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0OiBGdW5jdGlvbikge1xuICAgICAgICAvLyDlrZjlgqjooqvnpoHmraLnmoTnu4Tku7bnsbvlnovmlbDnu4TliLDlhYPmlbDmja7kuK1cbiAgICAgICAgUmVmbGVjdC5kZWZpbmVNZXRhZGF0YShESVNBTExPV19DT01QT05FTlRTX0tFWSwgZGlzYWxsb3dlZENvbXBvbmVudFR5cGVzLCB0YXJnZXQpO1xuICAgIH07XG59XG5cbi8qKlxuICog55So5LqO5qCH6K6w5LiA5Liq57uE5Lu25Zyo5LiA5LiqR2FtZU9iamVjdOS4iuWPquiDveWtmOWcqOS4gOS4quWunuS+i1xuICog5L2/55So5Y+N5bCE5YWD5pWw5o2u5a2Y5YKo6K+l5qCH6K6wXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBEaXNhbGxvd011bHRpcGxlQ29tcG9uZW50KHRhcmdldDogRnVuY3Rpb24pIHtcbiAgICAvLyDorr7nva7lhYPmlbDmja7vvIzmoIforrDov5nkuKrnsbvkuI3lhYHorrjph43lpI3mt7vliqBcbiAgICBSZWZsZWN0LmRlZmluZU1ldGFkYXRhKERJU0FMTE9XX01VTFRJUExFX0NPTVBPTkVOVF9LRVksIHRydWUsIHRhcmdldCk7XG59IiwiaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiLi9JbnB1dFwiO1xuaW1wb3J0IHsgUmFzdGVyaXphdGlvblBpcGVsaW5lIH0gZnJvbSBcIi4uL1JlbmRlcmVyL1Jhc3Rlcml6YXRpb25QaXBlbGluZVwiO1xuaW1wb3J0IHsgTWFpblNjZW5lIH0gZnJvbSBcIi4uL1NjZW5lL01haW5TY2VuZVwiO1xuaW1wb3J0IHsgU2NlbmVNYW5hZ2VyIH0gZnJvbSBcIi4uL1NjZW5lL1NjZW5lTWFuYWdlclwiO1xuaW1wb3J0IHsgRGVidWcgfSBmcm9tIFwiLi4vVXRpbHMvRGVidWdcIjtcbmltcG9ydCB7IFRpbWUgfSBmcm9tIFwiLi9UaW1lXCI7XG5pbXBvcnQgeyBUd2Vlbk1hbmFnZXIgfSBmcm9tIFwiLi9Ud2Vlbk1hbmFnZXJcIjtcbmltcG9ydCB7IFBoeXNpY3MgfSBmcm9tIFwiLi4vUGh5c2ljcy9QaHlzaWNzXCI7XG5pbXBvcnQgeyBFbmdpbmVDb25maWcgfSBmcm9tIFwiLi9TZXR0aW5nXCI7XG5cbmV4cG9ydCBjbGFzcyBFbmdpbmUge1xuICAgIHB1YmxpYyBzdGF0aWMgc2NlbmVNYW5hZ2VyOiBTY2VuZU1hbmFnZXIgPSBuZXcgU2NlbmVNYW5hZ2VyKCk7XG4gICAgcHVibGljIHN0YXRpYyBwaHlzaWNzOiBQaHlzaWNzID0gbmV3IFBoeXNpY3MoKTtcbiAgICBwdWJsaWMgc3RhdGljIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgcHVibGljIHN0YXRpYyBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gICAgcHVibGljIHN0YXRpYyBwaXBlbGluZTogUmFzdGVyaXphdGlvblBpcGVsaW5lO1xuICAgIHB1YmxpYyBzdGF0aWMgaW1hZ2VEYXRhOiBJbWFnZURhdGE7XG5cbiAgICBwdWJsaWMgc3RhdGljIGFzeW5jIEluaXQoKSB7XG4gICAgICAgIC8vIOiOt+WPlmNhbnZhc+WFg+e0oOWSjDJE5riy5p+T5LiK5LiL5paHXG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbnZhcycpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KCcyZCcpIGFzIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICAgICAgLy8g6K6+572uY2FudmFz5bC65a+4XG4gICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoO1xuICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBFbmdpbmVDb25maWcuY2FudmFzSGVpZ2h0O1xuICAgICAgICAvLyDorr7nva7mlofmnKzmoLflvI9cbiAgICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPSAnQXJpYWwnO1xuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gJ2xlZnQnO1xuXG4gICAgICAgIC8vIOWIm+W7uuWbvuWDj+aVsOaNruWvueixoVxuICAgICAgICB0aGlzLmltYWdlRGF0YSA9IEVuZ2luZS5jb250ZXh0LmNyZWF0ZUltYWdlRGF0YShFbmdpbmVDb25maWcuY2FudmFzV2lkdGgsIEVuZ2luZUNvbmZpZy5jYW52YXNIZWlnaHQpO1xuICAgICAgICAvLyDliJvlu7ozMuS9jeaXoOespuWPt+aVtOWei+aVsOe7hOinhuWbvu+8jOeUqOS6juebtOaOpeaTjeS9nOWDj+e0oOaVsOaNrlxuICAgICAgICBjb25zdCB1aW50MzJWaWV3ID0gbmV3IFVpbnQzMkFycmF5KHRoaXMuaW1hZ2VEYXRhLmRhdGEuYnVmZmVyKTtcbiAgICAgICAgLy8g5Yib5bu65riy5p+T5Zmo5a6e5L6LXG4gICAgICAgIHRoaXMucGlwZWxpbmUgPSBuZXcgUmFzdGVyaXphdGlvblBpcGVsaW5lKHVpbnQzMlZpZXcpO1xuXG4gICAgICAgIC8vIOWIneWni+WMlueJqeeQhuW8leaTjlxuICAgICAgICB0aGlzLnBoeXNpY3MuaW5pdCgpO1xuICAgICAgICAvLyDliJ3lp4vljJblnLrmma9cbiAgICAgICAgYXdhaXQgdGhpcy5zY2VuZU1hbmFnZXIubG9hZFNjZW5lKE1haW5TY2VuZSk7XG4gICAgICAgIC8vIOWIneWni+WMlui+k+WFpeezu+e7n1xuICAgICAgICBJbnB1dC5pbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBMb29wKHRpbWU6IG51bWJlcikge1xuICAgICAgICBEZWJ1Zy5Mb2coTWF0aC5mbG9vcigxIC8gVGltZS5kZWx0YVRpbWUpLnRvU3RyaW5nKCkpO1xuXG4gICAgICAgIC8vIDEuIOabtOaWsOaXtumXtOaVsOaNru+8muWIpOaWreW9k+WJjeW4p+aYr+WQpumcgOimgeaJp+ihjO+8iOWPlyBtYXhGcHMg5b2x5ZON77yJXG4gICAgICAgIGNvbnN0IHNob3VsZEV4ZWN1dGVGcmFtZSA9IFRpbWUudXBkYXRlRnJhbWUoKTtcbiAgICAgICAgLy8gaWYgKCFzaG91bGRFeGVjdXRlRnJhbWUpIHtcbiAgICAgICAgLy8gICAgIHJldHVybjtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIDIuIOWbuuWumuabtOaWsO+8iOWvueW6lCBVbml0eSBGaXhlZFVwZGF0Ze+8jOS+i+WmgueJqeeQhuW8leaTjuOAgUFJ6YC76L6R77yJXG4gICAgICAgIFRpbWUudXBkYXRlRml4ZWRUaW1lKCgpID0+IHtcbiAgICAgICAgICAgIEVuZ2luZS5GaXhlZFVwZGF0ZSgpOyAvLyDkvaDnmoTlm7rlrprpgLvovpHmm7TmlrDvvIjlpoLniannkIbnorDmkp7jgIHmioDog71DRO+8iVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyAzLiDmma7pgJrpgLvovpHmm7TmlrDvvIjlr7nlupQgVW5pdHkgVXBkYXRl77yM5Y+XIGRlbHRhVGltZSDlvbHlk43vvIlcbiAgICAgICAgRW5naW5lLlVwZGF0ZSgpOyAvLyDkvovlpoLvvJrop5LoibLnp7vliqjvvIjpgJ/luqYgKiBUaW1lLmRlbHRhVGltZSDnoa7kv53luKfnjofml6DlhbPvvIlcblxuICAgICAgICAvLyA0LiDmm7TmlrDovpPlhaXnirbmgIEo5rOo77ya6L6T5YWl5bey57uP55SxV0VC5byV5pOO5Zyo5q+P5bin5byA5aeL5LmL5YmN6I635Y+W5LqG77yM6L+Z6YeM5piv5pu05paw6L6T5YWl55qE5LiK5LiA5bin54q25oCBKVxuICAgICAgICBJbnB1dC51cGRhdGUoKTtcblxuICAgICAgICAvLyA1LiDmuLLmn5NcbiAgICAgICAgRW5naW5lLlJlbmRlcigpO1xuXG4gICAgICAgIC8vIDYuIOWxj+W5lei+k+WHuuaXpeW/l1xuICAgICAgICBEZWJ1Zy5QcmludExvZ3MoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBVcGRhdGUoKSB7XG4gICAgICAgIC8vIOS9v+eUqOWcuuaZr+eahHVwZGF0ZeaWueazleabtOaWsOaJgOaciea4uOaIj+WvueixoVxuICAgICAgICB0aGlzLnNjZW5lTWFuYWdlci5nZXRBY3RpdmVTY2VuZSgpPy51cGRhdGUoKTtcbiAgICAgICAgLy8g5pu05paw5Yqo55S7XG4gICAgICAgIFR3ZWVuTWFuYWdlci51cGRhdGUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBGaXhlZFVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5waHlzaWNzLnVwZGF0ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIFJlbmRlcigpIHtcbiAgICAgICAgdGhpcy5waXBlbGluZS5SZW5kZXIoKTtcbiAgICAgICAgLy8g5bCG5Zu+5YOP5pWw5o2u57uY5Yi25YiwY2FudmFz5LiKXG4gICAgICAgIHRoaXMuY29udGV4dC5wdXRJbWFnZURhdGEodGhpcy5pbWFnZURhdGEsIDAsIDApO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tIFwiLi9UcmFuc2Zvcm1cIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCIuLi9Db21wb25lbnQvQ29tcG9uZW50XCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgUXVhdGVybmlvbiB9IGZyb20gXCIuLi9NYXRoL1F1YXRlcm5pb25cIjtcbmltcG9ydCB7IFVPYmplY3QgfSBmcm9tIFwiLi9VT2JqZWN0XCI7XG5pbXBvcnQgeyBESVNBTExPV19DT01QT05FTlRTX0tFWSwgRElTQUxMT1dfTVVMVElQTEVfQ09NUE9ORU5UX0tFWSB9IGZyb20gXCIuL0RlY29yYXRvcnNcIjtcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gXCIuL0VuZ2luZVwiO1xuXG5leHBvcnQgY2xhc3MgR2FtZU9iamVjdCBleHRlbmRzIFVPYmplY3Qge1xuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICAgIHB1YmxpYyB0YWc6IHN0cmluZyA9IFwiVW50YWdnZWRcIjtcbiAgICBwdWJsaWMgbGF5ZXI6IG51bWJlciA9IDA7XG5cbiAgICBwcml2YXRlIGNvbXBvbmVudHM6IENvbXBvbmVudFtdID0gW107XG4gICAgcHJpdmF0ZSBzdGFydGVkQ29tcG9uZW50czogU2V0PENvbXBvbmVudD4gPSBuZXcgU2V0PENvbXBvbmVudD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgcGFyZW50PzogR2FtZU9iamVjdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0odGhpcyk7XG5cbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0UGFyZW50KHBhcmVudC50cmFuc2Zvcm0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcCA9IEVuZ2luZS5zY2VuZU1hbmFnZXIuZ2V0QWN0aXZlU2NlbmUoKT8uZ2V0Um9vdEdhbWVPYmplY3QoKTtcbiAgICAgICAgICAgIGlmIChwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0uc2V0UGFyZW50KHAudHJhbnNmb3JtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2FjdGl2ZTogYm9vbGVhbiA9IHRydWU7XG4gICAgLy8g6K6+572u5ri45oiP5a+56LGh55qE5r+A5rS754q25oCBXG4gICAgcHVibGljIHNldCBhY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAvLyDlpITnkIbnu4Tku7bnmoTlkK/nlKgv56aB55SoXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiB0aGlzLmNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lm9uRW5hYmxlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50Lm9uRGlzYWJsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyDmo4Dmn6XmuLjmiI/lr7nosaHmmK/lkKblpITkuo7mtLvliqjnirbmgIHvvIjogIPomZHniLblr7nosaHvvIlcbiAgICBwdWJsaWMgZ2V0IGFjdGl2ZSgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLl9hY3RpdmUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAvLyDmo4Dmn6XniLblr7nosaHnmoTmv4DmtLvnirbmgIFcbiAgICAgICAgbGV0IHBhcmVudCA9IHRoaXMudHJhbnNmb3JtLnBhcmVudDtcbiAgICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50R2FtZU9iamVjdCA9IHBhcmVudC5nYW1lT2JqZWN0O1xuICAgICAgICAgICAgaWYgKHBhcmVudEdhbWVPYmplY3QgJiYgIXBhcmVudEdhbWVPYmplY3QuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIOiwg+eUqOaJgOaciee7hOS7tueahFN0YXJ05pa55rOV77yI5aaC5p6c5bCa5pyq6LCD55So77yJXG4gICAgcHVibGljIHN0YXJ0Q29tcG9uZW50cygpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmFjdGl2ZSkgcmV0dXJuO1xuXG4gICAgICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXJ0ZWRDb21wb25lbnRzLmhhcyhjb21wb25lbnQpICYmIGNvbXBvbmVudC5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50Lm9uU3RhcnQoKTtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQub25FbmFibGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ZWRDb21wb25lbnRzLmFkZChjb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g6YCS5b2S6LCD55So5a2Q5a+56LGh55qEc3RhcnRDb21wb25lbnRzXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy50cmFuc2Zvcm0uY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5nYW1lT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgY2hpbGQuZ2FtZU9iamVjdC5zdGFydENvbXBvbmVudHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIOabtOaWsOaJgOaciee7hOS7tlxuICAgIHB1YmxpYyB1cGRhdGVDb21wb25lbnRzKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlKSByZXR1cm47XG5cbiAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50LmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQub25VcGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOmAkuW9kuiwg+eUqOWtkOWvueixoeeahHVwZGF0ZUNvbXBvbmVudHNcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLnRyYW5zZm9ybS5jaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKGNoaWxkLmdhbWVPYmplY3QpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5nYW1lT2JqZWN0LnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOa3u+WKoOe7hOS7tuWIsOa4uOaIj+WvueixoVxuICAgICAqIEBwYXJhbSBjb21wb25lbnRUeXBlIOe7hOS7tuexu+Wei1xuICAgICAqIEByZXR1cm5zIOa3u+WKoOeahOe7hOS7tuWunuS+i1xuICAgICAqL1xuICAgIHB1YmxpYyBhZGRDb21wb25lbnQ8VCBleHRlbmRzIENvbXBvbmVudD4oY29tcG9uZW50VHlwZTogbmV3IChnYW1lT2JqZWN0OiBHYW1lT2JqZWN0KSA9PiBUKTogVCB8IG51bGwge1xuICAgICAgICAvLyAxLuajgOafpeaYr+WQpuW3sue7j+WtmOWcqOivpeexu+Wei+eahOe7hOS7tlxuICAgICAgICBjb25zdCBleGlzdGluZ0NvbXBvbmVudCA9IHRoaXMuZ2V0Q29tcG9uZW50KGNvbXBvbmVudFR5cGUpO1xuICAgICAgICBpZiAoZXhpc3RpbmdDb21wb25lbnQpIHtcbiAgICAgICAgICAgIGlmICghZXhpc3RpbmdDb21wb25lbnQuY2hlY2tDb21wb25lbnRVbmlxdWVuZXNzKCkpIHtcbiAgICAgICAgICAgICAgICAvLyDkuI3lhYHorrjmt7vliqDlpJrkuKrnm7jlkIznmoTnu4Tku7bvvIzov5Tlm57lt7Lnu4/lrZjlnKjnmoRcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdDb21wb25lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyAyLuWIpOaWreaYr+WQpuacieS4juivpee7hOS7tuaOkuaWpeeahOe7hOS7tlxuICAgICAgICBmb3IgKGNvbnN0IGV4aXN0aW5nQ29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdEaXNhbGxvd2VkOiBGdW5jdGlvbltdIHwgdW5kZWZpbmVkID1cbiAgICAgICAgICAgICAgICBSZWZsZWN0LmdldE1ldGFkYXRhKERJU0FMTE9XX0NPTVBPTkVOVFNfS0VZLCBleGlzdGluZ0NvbXBvbmVudC5jb25zdHJ1Y3Rvcik7XG5cbiAgICAgICAgICAgIGlmIChleGlzdGluZ0Rpc2FsbG93ZWQgJiYgZXhpc3RpbmdEaXNhbGxvd2VkLmluY2x1ZGVzKGNvbXBvbmVudFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYENhbm5vdCBhZGQgJHtjb21wb25lbnRUeXBlLm5hbWV9OiBleGlzdGluZyAke2V4aXN0aW5nQ29tcG9uZW50LmNvbnN0cnVjdG9yLm5hbWV9IGAgK1xuICAgICAgICAgICAgICAgICAgICBgZm9yYmlkcyB0aGlzIGNvbXBvbmVudCB0eXBlYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyDliJvlu7rmlrDnu4Tku7blrp7kvotcbiAgICAgICAgY29uc3QgY29tcCA9IG5ldyBjb21wb25lbnRUeXBlKHRoaXMpO1xuXG4gICAgICAgIC8vIDMu5Yik5pat5piv5ZCm5pyJ5L6d6LWW57uE5Lu277yM5pyJ55qE6K+d5re75YqgXG4gICAgICAgIGlmIChjb21wLmNoZWNrUmVxdWlyZWRDb21wb25lbnRzKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5wdXNoKGNvbXApO1xuICAgICAgICAgICAgLy8gNC7mo4Dmn6XmmK/lkKbmnInlhrLnqoHnmoTnu4Tku7bvvIzmnInnmoTor53np7vpmaTlroPku6xcbiAgICAgICAgICAgIGNvbXAuY2hlY2tDb21wb25lbnRDb21wYXRpYmlsaXR5KCk7XG4gICAgICAgICAgICByZXR1cm4gY29tcDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIOa3u+WKoOWksei0pe+8jOWImeivpee7hOS7tuS5n+mUgOavge+8jOmBv+WFjeWHuueOsOmAu+i+kemXrumimFxuICAgICAgICAgICAgY29tcC5EZXN0cm95KCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBbGxDb21wb25lbnRzKCk6IENvbXBvbmVudFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50cztcbiAgICB9XG5cbiAgICAvLyDojrflj5bmjIflrprnsbvlnovnmoTnu4Tku7ZcbiAgICBwdWJsaWMgZ2V0Q29tcG9uZW50PFQgZXh0ZW5kcyBDb21wb25lbnQ+KGNvbXBvbmVudFR5cGU6IEZ1bmN0aW9uICYgeyBwcm90b3R5cGU6IFQgfSk6IFQgfCBudWxsIHtcbiAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgdGhpcy5jb21wb25lbnRzKSB7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50IGluc3RhbmNlb2YgY29tcG9uZW50VHlwZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQgYXMgVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyDojrflj5bmiYDmnInmjIflrprnsbvlnovnmoTnu4Tku7ZcbiAgICBwdWJsaWMgZ2V0Q29tcG9uZW50czxUIGV4dGVuZHMgQ29tcG9uZW50Pihjb21wb25lbnRUeXBlOiBGdW5jdGlvbiAmIHsgcHJvdG90eXBlOiBUIH0pOiBUW10ge1xuICAgICAgICBjb25zdCByZXN1bHQ6IFRbXSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiB0aGlzLmNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQgaW5zdGFuY2VvZiBjb21wb25lbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goY29tcG9uZW50IGFzIFQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbXBvbmV0SW5QYXJlbnQ8VCBleHRlbmRzIENvbXBvbmVudD4oY29tcG9uZW50VHlwZTogRnVuY3Rpb24gJiB7IHByb3RvdHlwZTogVCB9KTogVCB8IG51bGwge1xuICAgICAgICAvLyDlhYjmo4Dmn6Xoh6rouqtcbiAgICAgICAgY29uc3QgY29tcCA9IHRoaXMuZ2V0Q29tcG9uZW50KGNvbXBvbmVudFR5cGUpO1xuICAgICAgICBpZiAoY29tcCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYXJlbnQgPSB0aGlzLnRyYW5zZm9ybS5wYXJlbnQ7XG4gICAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEdhbWVPYmplY3QgPSBwYXJlbnQuZ2FtZU9iamVjdDtcbiAgICAgICAgICAgIGlmIChwYXJlbnRHYW1lT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gcGFyZW50R2FtZU9iamVjdC5nZXRDb21wb25lbnQoY29tcG9uZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8g6I635Y+W5a2Q6IqC54K55LiK55qE57uE5Lu2XG4gICAgcHVibGljIGdldENvbXBvbmVudEluQ2hpbGRyZW48VCBleHRlbmRzIENvbXBvbmVudD4oY29tcG9uZW50VHlwZTogRnVuY3Rpb24gJiB7IHByb3RvdHlwZTogVCB9KTogVCB8IG51bGwge1xuICAgICAgICAvLyDlhYjmo4Dmn6Xoh6rouqtcbiAgICAgICAgY29uc3QgY29tcCA9IHRoaXMuZ2V0Q29tcG9uZW50KGNvbXBvbmVudFR5cGUpO1xuICAgICAgICBpZiAoY29tcCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOmBjeWOhuaJgOacieWtkOiKgueCuVxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMudHJhbnNmb3JtLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZEdhbWVPYmplY3QgPSBjaGlsZC5nYW1lT2JqZWN0O1xuICAgICAgICAgICAgaWYgKGNoaWxkR2FtZU9iamVjdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ29tcCA9IGNoaWxkR2FtZU9iamVjdC5nZXRDb21wb25lbnQoY29tcG9uZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkQ29tcCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZENvbXA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8g6YCS5b2S5qOA5p+l5a2Q6IqC54K555qE5a2Q6IqC54K5XG4gICAgICAgICAgICAgICAgY29uc3QgZGVlcENoaWxkQ29tcCA9IGNoaWxkR2FtZU9iamVjdC5nZXRDb21wb25lbnRJbkNoaWxkcmVuKGNvbXBvbmVudFR5cGUpO1xuICAgICAgICAgICAgICAgIGlmIChkZWVwQ2hpbGRDb21wICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZXBDaGlsZENvbXA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8g6I635Y+W5a2Q6IqC54K55LiK55qE5omA5pyJ57uE5Lu2XG4gICAgcHVibGljIGdldENvbXBvbmVudHNJbkNoaWxkcmVuPFQgZXh0ZW5kcyBDb21wb25lbnQ+KGNvbXBvbmVudFR5cGU6IEZ1bmN0aW9uICYgeyBwcm90b3R5cGU6IFQgfSk6IFRbXSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdDogVFtdID0gW107XG5cbiAgICAgICAgLy8g5re75Yqg6Ieq6Lqr55qE57uE5Lu2XG4gICAgICAgIHJlc3VsdC5wdXNoKC4uLnRoaXMuZ2V0Q29tcG9uZW50cyhjb21wb25lbnRUeXBlKSk7XG5cbiAgICAgICAgLy8g6YGN5Y6G5omA5pyJ5a2Q6IqC54K5XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy50cmFuc2Zvcm0uY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIC8vIOWBh+iuvuavj+S4qlRyYW5zZm9ybemDveacieWvueW6lOeahEdhbWVPYmplY3RcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkR2FtZU9iamVjdCA9IGNoaWxkLmdhbWVPYmplY3Q7XG4gICAgICAgICAgICBpZiAoY2hpbGRHYW1lT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgLy8g6YCS5b2S6I635Y+W5a2Q6IqC54K555qE5omA5pyJ57uE5Lu2XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4uY2hpbGRHYW1lT2JqZWN0LmdldENvbXBvbmVudHNJbkNoaWxkcmVuKGNvbXBvbmVudFR5cGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8g56e76Zmk57uE5Lu2XG4gICAgcHVibGljIHJlbW92ZUNvbXBvbmVudDxUIGV4dGVuZHMgQ29tcG9uZW50Pihjb21wb25lbnRUeXBlOiBGdW5jdGlvbiAmIHsgcHJvdG90eXBlOiBUIH0pOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmNvbXBvbmVudHMuZmluZEluZGV4KGNvbXBvbmVudCA9PiBjb21wb25lbnQgaW5zdGFuY2VvZiBjb21wb25lbnRUeXBlKTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnRzW2luZGV4XTtcbiAgICAgICAgICAgIGNvbXBvbmVudC5vbkRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVDb21wb25lbnRJbnN0YW5jZTxUIGV4dGVuZHMgQ29tcG9uZW50Pihjb21wb25lbnQ6IFQpOiBib29sZWFuIHtcbiAgICAgICAgLy8g5p+l5om+57uE5Lu25a6e5L6L5Zyo5pWw57uE5Lit55qE57Si5byVXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jb21wb25lbnRzLmluZGV4T2YoY29tcG9uZW50KTtcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgLy8g6LCD55So57uE5Lu255qE6ZSA5q+B55Sf5ZG95ZGo5pyf5pa55rOVXG4gICAgICAgICAgICBjb21wb25lbnQub25EZXN0cm95KCk7XG4gICAgICAgICAgICAvLyDku47mlbDnu4TkuK3np7vpmaTor6Xlrp7kvotcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50cy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIOenu+mZpOaIkOWKn1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8g5pyq5om+5Yiw6K+l57uE5Lu25a6e5L6LXG4gICAgfVxuXG4gICAgLy8g6Z2Z5oCB5pa55rOV77ya6YCa6L+H5ZCN56ew5p+l5om+R2FtZU9iamVjdFxuICAgIHB1YmxpYyBzdGF0aWMgZmluZChuYW1lOiBzdHJpbmcpOiBHYW1lT2JqZWN0IHwgbnVsbCB7XG4gICAgICAgIC8vIOWunueOsOafpeaJvumAu+i+kVxuICAgICAgICAvLyDov5npnIDopoHkuIDkuKrlhajlsYDnmoRHYW1lT2JqZWN05rOo5YaM6KGoXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIOmdmeaAgeaWueazle+8mumAmui/h+agh+etvuafpeaJvuesrOS4gOS4qkdhbWVPYmplY3RcbiAgICBwdWJsaWMgc3RhdGljIGZpbmRXaXRoVGFnKHRhZzogc3RyaW5nKTogR2FtZU9iamVjdCB8IG51bGwge1xuICAgICAgICAvLyDlrp7njrDmn6Xmib7pgLvovpFcbiAgICAgICAgLy8g6L+Z6ZyA6KaB5LiA5Liq5qCH562+57O757ufXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIOmdmeaAgeaWueazle+8mumAmui/h+agh+etvuafpeaJvuaJgOaciUdhbWVPYmplY3RcbiAgICBwdWJsaWMgc3RhdGljIGZpbmRHYW1lT2JqZWN0c1dpdGhUYWcodGFnOiBzdHJpbmcpOiBHYW1lT2JqZWN0W10ge1xuICAgICAgICAvLyDlrp7njrDmn6Xmib7pgLvovpFcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIOmdmeaAgeaWueazle+8muafpeaJvueJueWumuexu+Wei+eahOesrOS4gOS4que7hOS7tlxuICAgIHB1YmxpYyBzdGF0aWMgZmluZE9iamVjdE9mVHlwZTxUIGV4dGVuZHMgQ29tcG9uZW50Pih0eXBlOiBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBUKTogVCB8IG51bGwge1xuICAgICAgICAvLyDlrp7njrDmn6Xmib7pgLvovpFcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLy8g6Z2Z5oCB5pa55rOV77ya5p+l5om+54m55a6a57G75Z6L55qE5omA5pyJ57uE5Lu2XG4gICAgcHVibGljIHN0YXRpYyBmaW5kT2JqZWN0c09mVHlwZTxUIGV4dGVuZHMgQ29tcG9uZW50Pih0eXBlOiBuZXcgKC4uLmFyZ3M6IGFueVtdKSA9PiBUKTogVFtdIHtcbiAgICAgICAgLy8g5a6e546w5p+l5om+6YC76L6RXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvLyDpnZnmgIHmlrnms5XvvJrlrp7kvovljJbmuLjmiI/lr7nosaFcbiAgICBwdWJsaWMgc3RhdGljIGluc3RhbnRpYXRlKG9yaWdpbmFsOiBHYW1lT2JqZWN0LCBwb3NpdGlvbj86IFZlY3RvcjMsIHJvdGF0aW9uPzogUXVhdGVybmlvbik6IEdhbWVPYmplY3Qge1xuICAgICAgICAvLyDliJvlu7rmlrDnmoTmuLjmiI/lr7nosaFcbiAgICAgICAgY29uc3QgY2xvbmUgPSBuZXcgR2FtZU9iamVjdChvcmlnaW5hbC5uYW1lKTtcblxuICAgICAgICAvLyDlpI3liLblsZ7mgKdcbiAgICAgICAgY2xvbmUudGFnID0gb3JpZ2luYWwudGFnO1xuICAgICAgICBjbG9uZS5sYXllciA9IG9yaWdpbmFsLmxheWVyO1xuICAgICAgICBjbG9uZS5hY3RpdmUgPSBvcmlnaW5hbC5hY3RpdmU7XG4gICAgICAgIGNsb25lLnRyYW5zZm9ybS5wb3NpdGlvbiA9IG9yaWdpbmFsLnRyYW5zZm9ybS53b3JsZFBvc2l0aW9uO1xuICAgICAgICBjbG9uZS50cmFuc2Zvcm0ucm90YXRpb24gPSBvcmlnaW5hbC50cmFuc2Zvcm0ud29ybGRSb3RhdGlvbjtcbiAgICAgICAgY2xvbmUudHJhbnNmb3JtLnNjYWxlID0gb3JpZ2luYWwudHJhbnNmb3JtLndvcmxkU2NhbGU7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uKSBjbG9uZS50cmFuc2Zvcm0ucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgaWYgKHJvdGF0aW9uKSBjbG9uZS50cmFuc2Zvcm0ucm90YXRpb24gPSByb3RhdGlvbjtcblxuICAgICAgICAvLyDlpI3liLbnu4Tku7bvvIjov5npnIDopoHkuIDkuKrmt7HluqblpI3liLbmnLrliLbvvIlcbiAgICAgICAgY29uc3QgY29tcHMgPSBvcmlnaW5hbC5nZXRBbGxDb21wb25lbnRzKCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb21wcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBjb21wID0gY29tcHNbaV07XG4gICAgICAgICAgICAvL2Nsb25lLmFkZENvbXBvbmVudCgpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxuXG4gICAgLy8g6ZSA5q+B5ri45oiP5a+56LGhXG4gICAgcHVibGljIG9uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgLy8g6LCD55So5omA5pyJ57uE5Lu255qEb25EZXN0cm955pa55rOVXG4gICAgICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIHRoaXMuY29tcG9uZW50cykge1xuICAgICAgICAgICAgY29tcG9uZW50Lm9uRGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIOi/memHjOWPr+S7pea3u+WKoOS7juWcuuaZr+S4reenu+mZpOa4uOaIj+WvueixoeeahOmAu+i+kVxuICAgIH1cbn0iLCJpbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yMlwiO1xuXG5leHBvcnQgY2xhc3MgSW5wdXQge1xuICAgIC8vIOmUruebmOeKtuaAgVxuICAgIHByaXZhdGUgc3RhdGljIGN1cnJlbnRLZXlzOiBNYXA8c3RyaW5nLCBib29sZWFuPiA9IG5ldyBNYXA8c3RyaW5nLCBib29sZWFuPigpO1xuICAgIHByaXZhdGUgc3RhdGljIHByZXZpb3VzS2V5czogTWFwPHN0cmluZywgYm9vbGVhbj4gPSBuZXcgTWFwPHN0cmluZywgYm9vbGVhbj4oKTtcblxuICAgIC8vIOm8oOagh+eKtuaAgVxuICAgIHByaXZhdGUgc3RhdGljIGN1cnJlbnRNb3VzZUJ1dHRvbnM6IGJvb2xlYW5bXSA9IFtmYWxzZSwgZmFsc2UsIGZhbHNlXTsgLy8g5bem44CB5Lit44CB5Y+z6ZSuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcHJldmlvdXNNb3VzZUJ1dHRvbnM6IGJvb2xlYW5bXSA9IFtmYWxzZSwgZmFsc2UsIGZhbHNlXTtcbiAgICBwdWJsaWMgc3RhdGljIG1vdXNlUG9zaXRpb246IFZlY3RvcjIgPSBWZWN0b3IyLlpFUk87XG4gICAgcHVibGljIHN0YXRpYyBtb3VzZURlbHRhOiBWZWN0b3IyID0gVmVjdG9yMi5aRVJPO1xuICAgIHB1YmxpYyBzdGF0aWMgbW91c2VTY3JvbGxEZWx0YTogVmVjdG9yMiA9IFZlY3RvcjIuWkVSTztcblxuICAgIC8vIOinpuaRuOeKtuaAgVxuICAgIHByaXZhdGUgc3RhdGljIHRvdWNoZXM6IFRvdWNoW10gPSBbXTtcblxuICAgIC8vIOaMiemUruW4uOmHj1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgS2V5Q29kZSA9IHtcbiAgICAgICAgLy8g5a2X5q+N6ZSuXG4gICAgICAgIEE6ICdLZXlBJywgQjogJ0tleUInLCBDOiAnS2V5QycsIEQ6ICdLZXlEJywgRTogJ0tleUUnLCBGOiAnS2V5RicsIEc6ICdLZXlHJyxcbiAgICAgICAgSDogJ0tleUgnLCBJOiAnS2V5SScsIEo6ICdLZXlKJywgSzogJ0tleUsnLCBMOiAnS2V5TCcsIE06ICdLZXlNJywgTjogJ0tleU4nLFxuICAgICAgICBPOiAnS2V5TycsIFA6ICdLZXlQJywgUTogJ0tleVEnLCBSOiAnS2V5UicsIFM6ICdLZXlTJywgVDogJ0tleVQnLCBVOiAnS2V5VScsXG4gICAgICAgIFY6ICdLZXlWJywgVzogJ0tleVcnLCBYOiAnS2V5WCcsIFk6ICdLZXlZJywgWjogJ0tleVonLFxuXG4gICAgICAgIC8vIOaVsOWtl+mUrlxuICAgICAgICBBbHBoYTA6ICdEaWdpdDAnLCBBbHBoYTE6ICdEaWdpdDEnLCBBbHBoYTI6ICdEaWdpdDInLCBBbHBoYTM6ICdEaWdpdDMnLCBBbHBoYTQ6ICdEaWdpdDQnLFxuICAgICAgICBBbHBoYTU6ICdEaWdpdDUnLCBBbHBoYTY6ICdEaWdpdDYnLCBBbHBoYTc6ICdEaWdpdDcnLCBBbHBoYTg6ICdEaWdpdDgnLCBBbHBoYTk6ICdEaWdpdDknLFxuXG4gICAgICAgIC8vIOWwj+mUruebmOaVsOWtl+mUrlxuICAgICAgICBOdW1wYWQwOiAnTnVtcGFkMCcsIE51bXBhZDE6ICdOdW1wYWQxJywgTnVtcGFkMjogJ051bXBhZDInLCBOdW1wYWQzOiAnTnVtcGFkMycsXG4gICAgICAgIE51bXBhZDQ6ICdOdW1wYWQ0JywgTnVtcGFkNTogJ051bXBhZDUnLCBOdW1wYWQ2OiAnTnVtcGFkNicsIE51bXBhZDc6ICdOdW1wYWQ3JyxcbiAgICAgICAgTnVtcGFkODogJ051bXBhZDgnLCBOdW1wYWQ5OiAnTnVtcGFkOScsXG5cbiAgICAgICAgLy8g5bCP6ZSu55uY5Yqf6IO96ZSu77yI5Y+v6YCJ5re75Yqg77yJXG4gICAgICAgIE51bXBhZE11bHRpcGx5OiAnTnVtcGFkTXVsdGlwbHknLCAgICAvLyDkuZjlj7cgKlxuICAgICAgICBOdW1wYWRBZGQ6ICdOdW1wYWRBZGQnLCAgICAgICAgICAgICAgLy8g5Yqg5Y+3ICtcbiAgICAgICAgTnVtcGFkU3VidHJhY3Q6ICdOdW1wYWRTdWJ0cmFjdCcsICAgIC8vIOWHj+WPtyAtXG4gICAgICAgIE51bXBhZERlY2ltYWw6ICdOdW1wYWREZWNpbWFsJywgICAgICAvLyDlsI/mlbDngrkgLlxuICAgICAgICBOdW1wYWREaXZpZGU6ICdOdW1wYWREaXZpZGUnLCAgICAgICAgLy8g6Zmk5Y+3IC9cbiAgICAgICAgTnVtcGFkRW50ZXI6ICdOdW1wYWRFbnRlcicsICAgICAgICAgIC8vIOWbnui9pumUrlxuXG4gICAgICAgIC8vIOWKn+iDvemUrlxuICAgICAgICBGMTogJ0YxJywgRjI6ICdGMicsIEYzOiAnRjMnLCBGNDogJ0Y0JywgRjU6ICdGNScsIEY2OiAnRjYnLFxuICAgICAgICBGNzogJ0Y3JywgRjg6ICdGOCcsIEY5OiAnRjknLCBGMTA6ICdGMTAnLCBGMTE6ICdGMTEnLCBGMTI6ICdGMTInLFxuXG4gICAgICAgIC8vIOeJueauiumUrlxuICAgICAgICBTcGFjZTogJ1NwYWNlJyxcbiAgICAgICAgRW50ZXI6ICdFbnRlcicsXG4gICAgICAgIFRhYjogJ1RhYicsXG4gICAgICAgIEVzY2FwZTogJ0VzY2FwZScsXG4gICAgICAgIEJhY2tzcGFjZTogJ0JhY2tzcGFjZScsXG4gICAgICAgIFNoaWZ0OiAnU2hpZnRMZWZ0JyxcbiAgICAgICAgQ29udHJvbDogJ0NvbnRyb2xMZWZ0JyxcbiAgICAgICAgQWx0OiAnQWx0TGVmdCcsXG4gICAgICAgIENhcHNMb2NrOiAnQ2Fwc0xvY2snLFxuXG4gICAgICAgIC8vIOaWueWQkemUrlxuICAgICAgICBVcEFycm93OiAnQXJyb3dVcCcsXG4gICAgICAgIERvd25BcnJvdzogJ0Fycm93RG93bicsXG4gICAgICAgIExlZnRBcnJvdzogJ0Fycm93TGVmdCcsXG4gICAgICAgIFJpZ2h0QXJyb3c6ICdBcnJvd1JpZ2h0JyxcbiAgICB9O1xuXG4gICAgLy8g5Yid5aeL5YyW6L6T5YWl57O757ufXG4gICAgcHVibGljIHN0YXRpYyBpbml0aWFsaXplKCk6IHZvaWQge1xuICAgICAgICAvLyDplK7nm5jkuovku7ZcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgSW5wdXQuY3VycmVudEtleXMuc2V0KGV2ZW50LmNvZGUsIHRydWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgSW5wdXQuY3VycmVudEtleXMuc2V0KGV2ZW50LmNvZGUsIGZhbHNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8g6byg5qCH5LqL5Lu2XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmJ1dHRvbiA+PSAwICYmIGV2ZW50LmJ1dHRvbiA8IDMpIHtcbiAgICAgICAgICAgICAgICBJbnB1dC5jdXJyZW50TW91c2VCdXR0b25zW2V2ZW50LmJ1dHRvbl0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuYnV0dG9uID49IDAgJiYgZXZlbnQuYnV0dG9uIDwgMykge1xuICAgICAgICAgICAgICAgIElucHV0LmN1cnJlbnRNb3VzZUJ1dHRvbnNbZXZlbnQuYnV0dG9uXSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICAgICAgICAgIGNvbnN0IHJlY3QgPSBjYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBJbnB1dC5tb3VzZVBvc2l0aW9uLnggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xuICAgICAgICAgICAgSW5wdXQubW91c2VQb3NpdGlvbi55ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgICAgICAgICAgSW5wdXQubW91c2VEZWx0YS54ID0gZXZlbnQubW92ZW1lbnRYO1xuICAgICAgICAgICAgSW5wdXQubW91c2VEZWx0YS55ID0gZXZlbnQubW92ZW1lbnRZO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgSW5wdXQubW91c2VTY3JvbGxEZWx0YS55ID0gZXZlbnQuZGVsdGFZO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGxlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICBJbnB1dC5tb3VzZVNjcm9sbERlbHRhLnkgPSAwO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyDop6bmkbjkuovku7ZcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgSW5wdXQudXBkYXRlVG91Y2hlcyhldmVudC50b3VjaGVzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBJbnB1dC51cGRhdGVUb3VjaGVzKGV2ZW50LnRvdWNoZXMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgSW5wdXQudXBkYXRlVG91Y2hlcyhldmVudC50b3VjaGVzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIElucHV0LnVwZGF0ZVRvdWNoZXMoZXZlbnQudG91Y2hlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIOabtOaWsOi+k+WFpeeKtuaAge+8iOWcqOavj+W4p+W8gOWni+aXtuiwg+eUqO+8iVxuICAgIHB1YmxpYyBzdGF0aWMgdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICAvLyDmm7TmlrDplK7nm5jnirbmgIFcbiAgICAgICAgSW5wdXQucHJldmlvdXNLZXlzID0gbmV3IE1hcChJbnB1dC5jdXJyZW50S2V5cyk7XG5cbiAgICAgICAgLy8g5pu05paw6byg5qCH54q25oCBXG4gICAgICAgIElucHV0LnByZXZpb3VzTW91c2VCdXR0b25zID0gWy4uLklucHV0LmN1cnJlbnRNb3VzZUJ1dHRvbnNdO1xuXG4gICAgICAgIC8vIOWkjeS9jem8oOagh+a7mui9rlxuICAgICAgICBJbnB1dC5tb3VzZVNjcm9sbERlbHRhLnkgPSAwO1xuXG4gICAgICAgIC8vIOWkjeS9jem8oOagh+enu+WKqFxuICAgICAgICBJbnB1dC5tb3VzZURlbHRhLnggPSAwO1xuICAgICAgICBJbnB1dC5tb3VzZURlbHRhLnkgPSAwO1xuICAgIH1cblxuICAgIC8vI3JlZ2lvbiDplK7nm5jovpPlhaXmo4DmtYtcblxuICAgIC8vIOajgOafpeaMiemUruaYr+WQpuiiq+aMieS4i++8iOaMgee7reinpuWPke+8iVxuICAgIHB1YmxpYyBzdGF0aWMgR2V0S2V5KGtleUNvZGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gSW5wdXQuY3VycmVudEtleXMuZ2V0KGtleUNvZGUpID09PSB0cnVlO1xuICAgIH1cblxuICAgIC8vIOajgOafpeaMiemUruaYr+WQpuWcqOW9k+WJjeW4p+iiq+aMieS4i++8iOS7heS4gOW4p+inpuWPke+8iVxuICAgIHB1YmxpYyBzdGF0aWMgR2V0S2V5RG93bihrZXlDb2RlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIElucHV0LmN1cnJlbnRLZXlzLmdldChrZXlDb2RlKSA9PT0gdHJ1ZSAmJiBJbnB1dC5wcmV2aW91c0tleXMuZ2V0KGtleUNvZGUpICE9PSB0cnVlO1xuICAgIH1cblxuICAgIC8vIOajgOafpeaMiemUruaYr+WQpuWcqOW9k+WJjeW4p+iiq+mHiuaUvu+8iOS7heS4gOW4p+inpuWPke+8iVxuICAgIHB1YmxpYyBzdGF0aWMgR2V0S2V5VXAoa2V5Q29kZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBJbnB1dC5jdXJyZW50S2V5cy5nZXQoa2V5Q29kZSkgIT09IHRydWUgJiYgSW5wdXQucHJldmlvdXNLZXlzLmdldChrZXlDb2RlKSA9PT0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyDojrflj5bmjIflrprovbTlkJHnmoTovpPlhaXlgLxcbiAgICBwdWJsaWMgc3RhdGljIEdldEF4aXMoYXhpczogSW5wdXRBeGlzKTogbnVtYmVyIHtcbiAgICAgICAgc3dpdGNoIChheGlzKSB7XG4gICAgICAgICAgICBjYXNlIElucHV0QXhpcy5Ib3Jpem9udGFsOlxuICAgICAgICAgICAgICAgIC8vIOawtOW5s+i9tCBBL0Qg5oiWIOW3puWPs+aWueWQkemUrlxuICAgICAgICAgICAgICAgIGlmIChJbnB1dC5HZXRLZXkoSW5wdXQuS2V5Q29kZS5EKSB8fCBJbnB1dC5HZXRLZXkoSW5wdXQuS2V5Q29kZS5SaWdodEFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKElucHV0LkdldEtleShJbnB1dC5LZXlDb2RlLkEpIHx8IElucHV0LkdldEtleShJbnB1dC5LZXlDb2RlLkxlZnRBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICAgICAgY2FzZSBJbnB1dEF4aXMuVmVydGljYWw6XG4gICAgICAgICAgICAgICAgLy8g5Z6C55u06L20IFcvUyDmiJYg5LiK5LiL5pa55ZCR6ZSuXG4gICAgICAgICAgICAgICAgaWYgKElucHV0LkdldEtleShJbnB1dC5LZXlDb2RlLlcpIHx8IElucHV0LkdldEtleShJbnB1dC5LZXlDb2RlLlVwQXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoSW5wdXQuR2V0S2V5KElucHV0LktleUNvZGUuUykgfHwgSW5wdXQuR2V0S2V5KElucHV0LktleUNvZGUuRG93bkFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICAvLyNyZWdpb24g6byg5qCH6L6T5YWl5qOA5rWLXG5cbiAgICAvLyDmo4Dmn6XpvKDmoIfmjInpkq7mmK/lkKbooqvmjInkuIvvvIjmjIHnu63op6blj5HvvIlcbiAgICBwdWJsaWMgc3RhdGljIEdldE1vdXNlQnV0dG9uKGJ1dHRvbjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBidXR0b24gPj0gMCAmJiBidXR0b24gPCAzID8gSW5wdXQuY3VycmVudE1vdXNlQnV0dG9uc1tidXR0b25dIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLy8g5qOA5p+l6byg5qCH5oyJ6ZKu5piv5ZCm5Zyo5b2T5YmN5bin6KKr5oyJ5LiL77yI5LuF5LiA5bin6Kem5Y+R77yJXG4gICAgcHVibGljIHN0YXRpYyBHZXRNb3VzZUJ1dHRvbkRvd24oYnV0dG9uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbiA+PSAwICYmIGJ1dHRvbiA8IDMgP1xuICAgICAgICAgICAgKElucHV0LmN1cnJlbnRNb3VzZUJ1dHRvbnNbYnV0dG9uXSAmJiAhSW5wdXQucHJldmlvdXNNb3VzZUJ1dHRvbnNbYnV0dG9uXSkgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyDmo4Dmn6XpvKDmoIfmjInpkq7mmK/lkKblnKjlvZPliY3luKfooqvph4rmlL7vvIjku4XkuIDluKfop6blj5HvvIlcbiAgICBwdWJsaWMgc3RhdGljIEdldE1vdXNlQnV0dG9uVXAoYnV0dG9uOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIGJ1dHRvbiA+PSAwICYmIGJ1dHRvbiA8IDMgP1xuICAgICAgICAgICAgKCFJbnB1dC5jdXJyZW50TW91c2VCdXR0b25zW2J1dHRvbl0gJiYgSW5wdXQucHJldmlvdXNNb3VzZUJ1dHRvbnNbYnV0dG9uXSkgOiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIC8vI3JlZ2lvbiDop6bmkbjovpPlhaXmo4DmtYtcblxuICAgIC8vIOabtOaWsOinpuaRuOeKtuaAgVxuICAgIHByaXZhdGUgc3RhdGljIHVwZGF0ZVRvdWNoZXModG91Y2hMaXN0OiBUb3VjaExpc3QpOiB2b2lkIHtcbiAgICAgICAgSW5wdXQudG91Y2hlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdWNoTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaExpc3RbaV07XG4gICAgICAgICAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICBJbnB1dC50b3VjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGZpbmdlcklkOiB0b3VjaC5pZGVudGlmaWVyLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgIHg6IHRvdWNoLmNsaWVudFggLSByZWN0LmxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHk6IHRvdWNoLmNsaWVudFkgLSByZWN0LnRvcFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVsdGFQb3NpdGlvbjogeyB4OiAwLCB5OiAwIH0sIC8vIOeugOWMluWunueOsO+8jOWunumZheW6lOivpei3n+i4quWJjeS4gOW4p+S9jee9rlxuICAgICAgICAgICAgICAgIHBoYXNlOiBUb3VjaFBoYXNlLk1vdmVkLCAvLyDnroDljJblrp7njrBcbiAgICAgICAgICAgICAgICB0YXBDb3VudDogMSAvLyDnroDljJblrp7njrBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8g6I635Y+W5oyH5a6a57Si5byV55qE6Kem5pG4XG4gICAgcHVibGljIHN0YXRpYyBHZXRUb3VjaChpbmRleDogbnVtYmVyKTogVG91Y2ggfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCBJbnB1dC50b3VjaGVzLmxlbmd0aCA/IElucHV0LnRvdWNoZXNbaW5kZXhdIDogbnVsbDtcbiAgICB9XG5cbiAgICAvLyDojrflj5bop6bmkbjmlbDph49cbiAgICBwdWJsaWMgc3RhdGljIGdldCB0b3VjaENvdW50KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBJbnB1dC50b3VjaGVzLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyNlbmRyZWdpb25cbn1cblxuLy8g6L205ZCR5p6a5Li+XG5leHBvcnQgZW51bSBJbnB1dEF4aXMge1xuICAgIEhvcml6b250YWwsXG4gICAgVmVydGljYWwsXG59XG5cbi8vIOinpuaRuOmYtuauteaemuS4vlxuZXhwb3J0IGVudW0gVG91Y2hQaGFzZSB7XG4gICAgQmVnYW4sXG4gICAgTW92ZWQsXG4gICAgU3RhdGlvbmFyeSxcbiAgICBFbmRlZCxcbiAgICBDYW5jZWxlZFxufVxuXG4vLyDop6bmkbjkv6Hmga/mjqXlj6NcbmV4cG9ydCBpbnRlcmZhY2UgVG91Y2gge1xuICAgIGZpbmdlcklkOiBudW1iZXI7XG4gICAgcG9zaXRpb246IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfTtcbiAgICBkZWx0YVBvc2l0aW9uOiB7IHg6IG51bWJlciwgeTogbnVtYmVyIH07XG4gICAgcGhhc2U6IFRvdWNoUGhhc2U7XG4gICAgdGFwQ291bnQ6IG51bWJlcjtcbn0iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9NYXRoL0NvbG9yXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgQ3ViZU1hcCB9IGZyb20gXCIuLi9SZXNvdXJjZXMvQ3ViZU1hcFwiO1xuaW1wb3J0IHsgTGF5ZXJNYXNrIH0gZnJvbSBcIi4vTGF5ZXJNYXNrXCI7XG5cbmV4cG9ydCBlbnVtIEZvZ01vZGUge1xuICAgIExpbmVhciA9IDAsXG4gICAgRXhwb25lbnRpYWwgPSAxLFxuICAgIEV4cDIgPSAyLFxufVxuXG5leHBvcnQgY29uc3QgTGF5ZXJzOiBzdHJpbmdbXSA9IFtcbiAgICBcIkRlZmF1bHRcIixcbiAgICBcIlRyYW5zcGFyZW50RlhcIixcbiAgICBcIklnbm9yZSBSYXljYXN0XCIsXG4gICAgXCJXYXRlclwiLFxuXVxuXG5leHBvcnQgY2xhc3MgRW5naW5lQ29uZmlnIHtcbiAgICBwdWJsaWMgc3RhdGljIGNhbnZhc1dpZHRoOiBudW1iZXIgPSAzMjA7XG4gICAgcHVibGljIHN0YXRpYyBjYW52YXNIZWlnaHQ6IG51bWJlciA9IDI0MDtcbiAgICBwdWJsaWMgc3RhdGljIGhhbGZDYW52YXNXaWR0aDogbnVtYmVyID0gRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoID4+IDE7XG4gICAgcHVibGljIHN0YXRpYyBoYWxmQ2FudmFzSGVpZ2h0OiBudW1iZXIgPSBFbmdpbmVDb25maWcuY2FudmFzSGVpZ2h0ID4+IDE7XG4gICAgcHVibGljIHN0YXRpYyBhc3BlY3RSYXRpbzogbnVtYmVyID0gRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoIC8gRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodDtcbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVTZXR0aW5ncyB7XG59XG5cbmV4cG9ydCBjbGFzcyBQaHlzaWNzU2V0dGluZ3Mge1xuICAgIHB1YmxpYyBzdGF0aWMgZ3Jhdml0eTogVmVjdG9yMyA9IG5ldyBWZWN0b3IzKDAsIC05LjgsIDApO1xuICAgIHB1YmxpYyBzdGF0aWMgbGF5ZXJDb2xsaXNpb25NYXRyaXg6IExheWVyTWFza1tdW10gPSBbXTtcbn1cblxuZXhwb3J0IGNsYXNzIFJlbmRlclNldHRpbmdzIHtcbiAgICBwdWJsaWMgc3RhdGljIGZvZzogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBzdGF0aWMgZm9nQ29sb3I6IENvbG9yO1xuICAgIHB1YmxpYyBzdGF0aWMgZm9nTW9kZTogRm9nTW9kZSA9IEZvZ01vZGUuRXhwMjtcbiAgICBwdWJsaWMgc3RhdGljIGZvZ0RlbnNpdHk6IG51bWJlciA9IDAuMDE7XG4gICAgcHVibGljIHN0YXRpYyBsaW5lYXJGb2dTdGFydDogbnVtYmVyID0gMDtcbiAgICBwdWJsaWMgc3RhdGljIGxpbmVhckZvZ0VuZDogbnVtYmVyID0gMzAwO1xuICAgIHB1YmxpYyBzdGF0aWMgYW1iaWVudExpZ2h0OiBDb2xvciA9IG5ldyBDb2xvcigwLjIsIDAuMiwgMC4yLCAxKTtcbiAgICBwdWJsaWMgc3RhdGljIHNreWJveDogQ3ViZU1hcDtcbn0iLCIvKipcbiAqIOaooeS7vyBVbml0eSBUaW1lIOexu++8muaPkOS+m+aXtumXtOeuoeeQhuOAgeW4p+eOh+aOp+WItuOAgeaXtumXtOe8qeaUvuetieaguOW/g+WKn+iDvVxuICog5qC45b+D54m55oCn77yaXG4gKiAxLiBkZWx0YVRpbWXvvJrkuIrkuIDluKfliLDlvZPliY3luKfnmoTml7bpl7Tpl7TpmpTvvIjlj5cgdGltZVNjYWxlIOW9seWTje+8iVxuICogMi4gdW5zY2FsZWREZWx0YVRpbWXvvJrkuI3lj5cgdGltZVNjYWxlIOW9seWTjeeahOWOn+Wni+W4p+mXtOmalFxuICogMy4gdGltZe+8mua4uOaIj+WQr+WKqOWIsOeOsOWcqOeahOaAu+aXtumXtO+8iOWPlyB0aW1lU2NhbGUg5b2x5ZON77yJXG4gKiA0LiBmaXhlZFRpbWXvvJrlm7rlrprml7bpl7TmraXplb/nmoTntK/orqHml7bpl7TvvIjnlKjkuo7niannkIYv5Zu65a6a6YC76L6R5pu05paw77yJXG4gKiA1LiB0aW1lU2NhbGXvvJrml7bpl7TnvKnmlL7ns7vmlbDvvIgwPeaaguWBnO+8jDE95q2j5bi477yMPjE95Yqg6YCf77yMPDE95YeP6YCf77yJXG4gKi9cbmV4cG9ydCBjbGFzcyBUaW1lIHtcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PSDpnZnmgIHlsZ7mgKfvvIjlr7nlupQgVW5pdHkgVGltZSDpnZnmgIHmjqXlj6PvvIk9PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8qKiDkuIrkuIDluKfliLDlvZPliY3luKfnmoTml7bpl7Tpl7TpmpTvvIjnp5LvvInvvIzlj5cgdGltZVNjYWxlIOW9seWTje+8iOaaguWBnOaXtuS4uiAw77yJICovXG4gICAgcHVibGljIHN0YXRpYyBkZWx0YVRpbWU6IG51bWJlciA9IDA7XG5cbiAgICAvKiog5LiK5LiA5bin5Yiw5b2T5YmN5bin55qE5Y6f5aeL5pe26Ze06Ze06ZqU77yI56eS77yJ77yM5LiN5Y+XIHRpbWVTY2FsZSDlvbHlk43vvIjmmoLlgZzml7bku43kuLrnnJ/lrp7ml7bpl7Tpl7TpmpTvvIkgKi9cbiAgICBwdWJsaWMgc3RhdGljIHVuc2NhbGVkRGVsdGFUaW1lOiBudW1iZXIgPSAwO1xuXG4gICAgLyoqIOa4uOaIj+WQr+WKqOWIsOeOsOWcqOeahOaAu+aXtumXtO+8iOenku+8ie+8jOWPlyB0aW1lU2NhbGUg5b2x5ZON77yI5pqC5YGc5pe25LiN5aKe5Yqg77yJICovXG4gICAgcHVibGljIHN0YXRpYyB0aW1lOiBudW1iZXIgPSAwO1xuXG4gICAgLyoqIOa4uOaIj+WQr+WKqOWIsOeOsOWcqOeahOWOn+Wni+aAu+aXtumXtO+8iOenku+8ie+8jOS4jeWPlyB0aW1lU2NhbGUg5b2x5ZON77yI5pqC5YGc5pe25LuN5aKe5Yqg77yJICovXG4gICAgcHVibGljIHN0YXRpYyB1bnNjYWxlZFRpbWU6IG51bWJlciA9IDA7XG5cbiAgICAvKiog5Zu65a6a5pe26Ze05q2l6ZW/77yI56eS77yJ77yM55So5LqO54mp55CG5pu05pawL+WbuuWumumAu+i+keabtOaWsO+8iOm7mOiupCAwLjAyIOenkiA9IDUwIOasoS/np5LvvIzlr7nlupQgVW5pdHkgZml4ZWREZWx0YVRpbWXvvIkgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZpeGVkRGVsdGFUaW1lOiBudW1iZXIgPSAwLjAyO1xuXG4gICAgLyoqIOWbuuWumuaXtumXtOatpemVv+eahOe0r+iuoeaXtumXtO+8iOenku+8ie+8jOeUqOS6juinpuWPkeWbuuWumuabtOaWsO+8iOWvueW6lCBVbml0eSBmaXhlZFRpbWXvvIkgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZpeGVkVGltZTogbnVtYmVyID0gMDtcblxuICAgIC8qKiDml7bpl7TnvKnmlL7ns7vmlbDvvIgwID0g5pqC5YGc77yMMSA9IOato+W4uOmAn+W6pu+8jDIgPSAy5YCN6YCf77yMMC41ID0gMC415YCN6YCf77yJICovXG4gICAgcHVibGljIHN0YXRpYyB0aW1lU2NhbGU6IG51bWJlciA9IDE7XG5cbiAgICAvKiog5bin546H6ZmQ5Yi277yI6buY6K6k5peg6ZmQ5Yi277yM6K6+5Li6IDMwLzYwIOWPr+WbuuWumuW4p+eOh++8iSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgbWF4RnBzOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09IOengeacieaIkOWRmO+8iOWGhemDqOiuoeaXtumAu+i+ke+8iT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLyoqIOS4iuS4gOW4p+eahOaXtumXtOaIs++8iOavq+enku+8jOeUqOS6juiuoeeul+W4p+mXtOmalO+8iSAqL1xuICAgIHByaXZhdGUgc3RhdGljIGxhc3RGcmFtZVRpbWU6IG51bWJlciA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgLyoqIOWbuuWumuaXtumXtOatpemVv+eahOe0r+iuoeS9meaVsO+8iOmBv+WFjeWbuuWumuabtOaWsOS4ouWkseeyvuW6pu+8iSAqL1xuICAgIHByaXZhdGUgc3RhdGljIGZpeGVkVGltZVJlbWFpbmRlcjogbnVtYmVyID0gMDtcblxuICAgIC8qKiDmmK/lkKblt7LliJ3lp4vljJbvvIjnoa7kv53ku4XlkK/liqjkuIDmrKHorqHml7bvvIkgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBpc0luaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2U7XG5cblxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09IOaguOW/g+aWueazle+8iOmcgOmbhuaIkOWIsOa4suafk+W+queOr++8iT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgLyoqXG4gICAgICog5q+P5bin5pu05paw5pe26Ze05pWw5o2u77yI5b+F6aG75Zyo5Li75b6q546v5Lit6LCD55So77yM5a+55bqUIFVuaXR5IOW4p+eUn+WRveWRqOacn++8iVxuICAgICAqIEByZXR1cm5zIOivpeW4p+aYr+WQpumcgOimgeaJp+ihjO+8iOeUqOS6juW4p+eOh+mZkOWItu+8iVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgdXBkYXRlRnJhbWUoKTogYm9vbGVhbiB7XG4gICAgICAgIC8vIOWIneWni+WMlu+8muiusOW9leesrOS4gOW4p+aXtumXtFxuICAgICAgICBpZiAoIXRoaXMuaXNJbml0aWFsaXplZCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAxLiDorqHnrpflvZPliY3luKfnmoTljp/lp4vml7bpl7Tpl7TpmpTvvIjmr6vnp5Lovaznp5LvvIlcbiAgICAgICAgY29uc3QgY3VycmVudFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgY29uc3QgcmF3RGVsdGFNcyA9IGN1cnJlbnRUaW1lIC0gdGhpcy5sYXN0RnJhbWVUaW1lO1xuICAgICAgICB0aGlzLnVuc2NhbGVkRGVsdGFUaW1lID0gcmF3RGVsdGFNcyAvIDEwMDA7IC8vIOWOn+Wni+W4p+mXtOmalO+8iOS4jeWPlyB0aW1lU2NhbGUg5b2x5ZON77yJXG5cbiAgICAgICAgLy8gMi4g5bin546H6ZmQ5Yi26YC76L6R77ya6Iul6K6+572uIG1heEZwc++8jOWIpOaWreaYr+WQpui+vuWIsOebruagh+W4p+mXtOmalFxuICAgICAgICBpZiAodGhpcy5tYXhGcHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEZyYW1lTXMgPSAxMDAwIC8gdGhpcy5tYXhGcHM7IC8vIOebruagh+W4p+mXtOmalO+8iOavq+enku+8iVxuICAgICAgICAgICAgaWYgKHJhd0RlbHRhTXMgPCB0YXJnZXRGcmFtZU1zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyDmnKrovr7liLDnm67moIfpl7TpmpTvvIzkuI3miafooYzlvZPliY3luKdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDMuIOabtOaWsOWPlyB0aW1lU2NhbGUg5b2x5ZON55qE5pe26Ze05bGe5oCnXG4gICAgICAgIHRoaXMuZGVsdGFUaW1lID0gdGhpcy51bnNjYWxlZERlbHRhVGltZSAqIHRoaXMudGltZVNjYWxlOyAvLyDlj5fnvKnmlL7nmoTluKfpl7TpmpRcbiAgICAgICAgdGhpcy50aW1lICs9IHRoaXMuZGVsdGFUaW1lOyAvLyDmgLvml7bpl7TvvIjlj5fnvKnmlL7vvIlcbiAgICAgICAgdGhpcy51bnNjYWxlZFRpbWUgKz0gdGhpcy51bnNjYWxlZERlbHRhVGltZTsgLy8g5Y6f5aeL5oC75pe26Ze077yI5LiN5Y+X57yp5pS+77yJXG5cbiAgICAgICAgLy8gNC4g5pu05paw5Zu65a6a5pe26Ze05q2l6ZW/57Sv6K6h77yI55So5LqO54mp55CGL+WbuuWumuabtOaWsO+8iVxuICAgICAgICB0aGlzLnVwZGF0ZUZpeGVkVGltZSgpO1xuXG4gICAgICAgIC8vIDUuIOiusOW9leW9k+WJjeaXtumXtO+8jOS4uuS4i+S4gOW4p+WBmuWHhuWkh1xuICAgICAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIOWFgeiuuOaJp+ihjOW9k+WJjeW4p+mAu+i+kVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWbuuWumuaXtumXtOatpemVv+abtOaWsO+8iOeUqOS6jueJqeeQhuW8leaTjuOAgeWbuuWumumikeeOh+mAu+i+ke+8jOWvueW6lCBVbml0eSBGaXhlZFVwZGF0Ze+8iVxuICAgICAqIEBwYXJhbSBmaXhlZFVwZGF0ZUNhbGxiYWNrIOWbuuWumuabtOaWsOWbnuiwg++8iOavj+e0r+iuoeS4gOS4qiBmaXhlZERlbHRhVGltZSDmiafooYzkuIDmrKHvvIlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHVwZGF0ZUZpeGVkVGltZShmaXhlZFVwZGF0ZUNhbGxiYWNrPzogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgICAgICAvLyDntK/orqHljp/lp4vml7bpl7TvvIjkuI3lj5cgdGltZVNjYWxlIOW9seWTje+8jOehruS/neeJqeeQhuabtOaWsOeos+Wumu+8iVxuICAgICAgICBjb25zdCB0b3RhbEZpeGVkRGVsdGEgPSB0aGlzLnVuc2NhbGVkRGVsdGFUaW1lICsgdGhpcy5maXhlZFRpbWVSZW1haW5kZXI7XG4gICAgICAgIGNvbnN0IGZpeGVkU3RlcCA9IHRoaXMuZml4ZWREZWx0YVRpbWU7XG5cbiAgICAgICAgLy8g6K6h566X6ZyA6KaB5omn6KGM5aSa5bCR5qyh5Zu65a6a5pu05paw77yI5L6L5aaC77ya57Sv6K6hIDAuMDUg56eS77yM5Zu65a6a5q2l6ZW/IDAuMDIg56eSIOKGkiDmiafooYwgMiDmrKHvvIzkvZnmlbAgMC4wMSDnp5LvvIlcbiAgICAgICAgY29uc3QgZml4ZWRVcGRhdGVDb3VudCA9IE1hdGguZmxvb3IodG90YWxGaXhlZERlbHRhIC8gZml4ZWRTdGVwKTtcbiAgICAgICAgdGhpcy5maXhlZFRpbWVSZW1haW5kZXIgPSB0b3RhbEZpeGVkRGVsdGEgJSBmaXhlZFN0ZXA7XG5cbiAgICAgICAgLy8g5omn6KGM5Zu65a6a5pu05paw5Zue6LCDXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZml4ZWRVcGRhdGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmZpeGVkVGltZSArPSBmaXhlZFN0ZXA7IC8vIOabtOaWsOWbuuWumuaXtumXtOe0r+iuoVxuICAgICAgICAgICAgZml4ZWRVcGRhdGVDYWxsYmFjaz8uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDph43nva7ml7bpl7TnirbmgIHvvIjnlKjkuo7muLjmiI/ph43lkK/jgIHlnLrmma/liIfmjaLvvIlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHJlc2V0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlbHRhVGltZSA9IDA7XG4gICAgICAgIHRoaXMudW5zY2FsZWREZWx0YVRpbWUgPSAwO1xuICAgICAgICB0aGlzLnRpbWUgPSAwO1xuICAgICAgICB0aGlzLnVuc2NhbGVkVGltZSA9IDA7XG4gICAgICAgIHRoaXMuZml4ZWRUaW1lID0gMDtcbiAgICAgICAgdGhpcy5maXhlZFRpbWVSZW1haW5kZXIgPSAwO1xuICAgICAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmmoLlgZzmuLjmiI/vvIjnrYnku7fkuo7orr7nva4gdGltZVNjYWxlID0gMO+8iVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcGF1c2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudGltZVNjYWxlID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmgaLlpI3muLjmiI/mraPluLjpgJ/luqbvvIjnrYnku7fkuo7orr7nva4gdGltZVNjYWxlID0gMe+8iVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmVzdW1lKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnRpbWVTY2FsZSA9IDE7XG4gICAgfVxufSIsImltcG9ydCB7IEdhbWVPYmplY3QgfSBmcm9tIFwiLi9HYW1lT2JqZWN0XCI7XG5pbXBvcnQgeyBNYXRyaXg0eDQgfSBmcm9tIFwiLi4vTWF0aC9NYXRyaXg0eDRcIjtcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tIFwiLi4vTWF0aC9RdWF0ZXJuaW9uXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjRcIjtcblxuZXhwb3J0IGNsYXNzIFRyYW5zZm9ybSB7XG4gICAgcHVibGljIHJlYWRvbmx5IGdhbWVPYmplY3Q6IEdhbWVPYmplY3Q7XG4gICAgcHVibGljIHJlYWRvbmx5IGNoaWxkcmVuOiBBcnJheTxUcmFuc2Zvcm0+O1xuXG4gICAgcHJpdmF0ZSBfcGFyZW50OiBUcmFuc2Zvcm0gfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIF90ZW1wUG9zOiBWZWN0b3IzO1xuICAgIHByaXZhdGUgX3RlbXBSb3Q6IFF1YXRlcm5pb247XG4gICAgcHJpdmF0ZSBfdGVtcFNjYWxlOiBWZWN0b3IzO1xuXG4gICAgLy8g57yT5a2Y55+p6Zi15Lul5o+Q6auY5oCn6IO9XG4gICAgcHJpdmF0ZSBfc2VsZk1hdHJpeDogTWF0cml4NHg0IHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBfbG9jYWxUb1dvcmxkTm9ybWFsTWF0cml4OiBNYXRyaXg0eDQgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIF9sb2NhbFRvV29ybGRNYXRyaXg6IE1hdHJpeDR4NCB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgX3dvcmxkVG9Mb2NhbE1hdHJpeDogTWF0cml4NHg0IHwgbnVsbCA9IG51bGw7XG5cbiAgICAvLyDohI/moIforrDvvIznlKjkuo7ot5/ouKrlj5jmjaLmmK/lkKblt7Lmm7TmlLlcbiAgICBwcml2YXRlIF9pc0RpcnR5OiBib29sZWFuID0gdHJ1ZTtcblxuICAgIC8vIOaWueWQkeWQkemHj+e8k+WtmFxuICAgIHByaXZhdGUgX2ZvcndhcmQ6IFZlY3RvcjMgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIF91cDogVmVjdG9yMyB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgX3JpZ2h0OiBWZWN0b3IzIHwgbnVsbCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lT2JqZWN0OiBHYW1lT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuZ2FtZU9iamVjdCA9IGdhbWVPYmplY3Q7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBuZXcgQXJyYXk8VHJhbnNmb3JtPigpO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl90ZW1wUG9zID0gVmVjdG9yMy5aRVJPO1xuICAgICAgICB0aGlzLl90ZW1wUm90ID0gUXVhdGVybmlvbi5pZGVudGl0eTtcbiAgICAgICAgdGhpcy5fdGVtcFNjYWxlID0gVmVjdG9yMy5PTkU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5qCH6K6w5b2T5YmN5Y+Y5o2i5Li66ISP77yM6ZyA6KaB6YeN5paw6K6h566X55+p6Zi1XG4gICAgICog5ZCM5pe25qCH6K6w5omA5pyJ5a2Q6IqC54K55Li66ISPXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXREaXJ0eSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5faXNEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NlbGZNYXRyaXggPSBudWxsO1xuICAgICAgICB0aGlzLl9sb2NhbFRvV29ybGRNYXRyaXggPSBudWxsO1xuICAgICAgICB0aGlzLl93b3JsZFRvTG9jYWxNYXRyaXggPSBudWxsO1xuICAgICAgICB0aGlzLl9sb2NhbFRvV29ybGROb3JtYWxNYXRyaXggPSBudWxsO1xuXG4gICAgICAgIC8vIOmAmuefpeaJgOaciee7hOS7tuWPmOaNouWPkeeUn+S6huWPmOWMllxuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gdGhpcy5nYW1lT2JqZWN0LmdldEFsbENvbXBvbmVudHMoKTtcbiAgICAgICAgZm9yIChjb25zdCBjb21wb25lbnQgb2YgY29tcG9uZW50cykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAoY29tcG9uZW50IGFzIGFueSkub25UcmFuc2Zvcm1DaGFuZ2VkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgKGNvbXBvbmVudCBhcyBhbnkpLm9uVHJhbnNmb3JtQ2hhbmdlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g6YCS5b2S5qCH6K6w5omA5pyJ5a2Q6IqC54K55Li66ISPXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGQuc2V0RGlydHkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgc2VsZk1hdHJpeCgpOiBNYXRyaXg0eDQge1xuICAgICAgICBpZiAodGhpcy5fc2VsZk1hdHJpeCA9PT0gbnVsbCB8fCB0aGlzLl9pc0RpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxmTWF0cml4ID0gTWF0cml4NHg0LmdldFRSU01hdHJpeCh0aGlzLl90ZW1wUG9zLCB0aGlzLl90ZW1wUm90LCB0aGlzLl90ZW1wU2NhbGUpO1xuICAgICAgICAgICAgLy8gc2VsZk1hdHJpeOaYr+acgOWfuuehgOeahOefqemYte+8jOW9k+Wug+abtOaWsOWQju+8jOaJgOacieefqemYtemDveW6lOivpeiiq+iupOS4uuaYr+W5suWHgOeahFxuICAgICAgICAgICAgLy8g5rOo5oSP77yabG9jYWxUb1dvcmxkTWF0cml45ZKMd29ybGRUb0xvY2FsTWF0cml455qE6K6h566X5Lya6Ieq5Yqo5aSE55CGXG4gICAgICAgICAgICB0aGlzLl9pc0RpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGZNYXRyaXguY2xvbmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGxvY2FsVG9Xb3JsZE5vcm1hbE1hdHJpeCgpOiBNYXRyaXg0eDQge1xuICAgICAgICBpZiAodGhpcy5fbG9jYWxUb1dvcmxkTm9ybWFsTWF0cml4ID09PSBudWxsIHx8IHRoaXMuX2lzRGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvY2FsVG9Xb3JsZE5vcm1hbE1hdHJpeCA9IHRoaXMubG9jYWxUb1dvcmxkTWF0cml4LmludmVydCgpLnRyYW5zcG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2NhbFRvV29ybGROb3JtYWxNYXRyaXguY2xvbmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGxvY2FsVG9Xb3JsZE1hdHJpeCgpOiBNYXRyaXg0eDQge1xuICAgICAgICBpZiAodGhpcy5fbG9jYWxUb1dvcmxkTWF0cml4ID09PSBudWxsIHx8IHRoaXMuX2lzRGlydHkpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLnBhcmVudCAhPSBudWxsID8gdGhpcy5wYXJlbnQubG9jYWxUb1dvcmxkTWF0cml4IDogTWF0cml4NHg0LmlkZW50aXR5O1xuICAgICAgICAgICAgdGhpcy5fbG9jYWxUb1dvcmxkTWF0cml4ID0gcC5tdWx0aXBseSh0aGlzLnNlbGZNYXRyaXgpO1xuICAgICAgICAgICAgLy8g5b2Tc2VsZk1hdHJpeOiiq+iuv+mXruaXtu+8jF9pc0RpcnR55bey57uP6KKr6K6+572u5Li6ZmFsc2VcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbG9jYWxUb1dvcmxkTWF0cml4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCB3b3JsZFRvTG9jYWxNYXRyaXgoKTogTWF0cml4NHg0IHtcbiAgICAgICAgaWYgKHRoaXMuX3dvcmxkVG9Mb2NhbE1hdHJpeCA9PT0gbnVsbCB8fCB0aGlzLl9pc0RpcnR5KSB7XG4gICAgICAgICAgICBjb25zdCBwID0gdGhpcy5wYXJlbnQgIT0gbnVsbCA/IHRoaXMucGFyZW50LndvcmxkVG9Mb2NhbE1hdHJpeCA6IE1hdHJpeDR4NC5pZGVudGl0eTtcbiAgICAgICAgICAgIHRoaXMuX3dvcmxkVG9Mb2NhbE1hdHJpeCA9IHRoaXMuc2VsZk1hdHJpeC5pbnZlcnQoKS5tdWx0aXBseShwKTtcbiAgICAgICAgICAgIC8vIOW9k3NlbGZNYXRyaXjooqvorr/pl67ml7bvvIxfaXNEaXJ0eeW3sue7j+iiq+iuvue9ruS4umZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmxkVG9Mb2NhbE1hdHJpeC5jbG9uZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZm9yd2FyZCgpOiBWZWN0b3IzIHtcbiAgICAgICAgLy8g5L2/55So57yT5a2Y5LyY5YyW77yM6YG/5YWN6YeN5aSN6K6h566X5ZKM5Yib5bu65Li05pe25a+56LGhXG4gICAgICAgIGlmICh0aGlzLl9pc0RpcnR5IHx8ICF0aGlzLl9mb3J3YXJkKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3J3YXJkID0gdGhpcy5jb252ZXJ0VG9Xb3JsZFNwYWNlKFZlY3RvcjMuRk9SV0FSRCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvcndhcmQuY2xvbmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHVwKCk6IFZlY3RvcjMge1xuICAgICAgICAvLyDkvb/nlKjnvJPlrZjkvJjljJbvvIzpgb/lhY3ph43lpI3orqHnrpflkozliJvlu7rkuLTml7blr7nosaFcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlydHkgfHwgIXRoaXMuX3VwKSB7XG4gICAgICAgICAgICB0aGlzLl91cCA9IHRoaXMuY29udmVydFRvV29ybGRTcGFjZShWZWN0b3IzLlVQLCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fdXAuY2xvbmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHJpZ2h0KCk6IFZlY3RvcjMge1xuICAgICAgICAvLyDkvb/nlKjnvJPlrZjkvJjljJbvvIzpgb/lhY3ph43lpI3orqHnrpflkozliJvlu7rkuLTml7blr7nosaFcbiAgICAgICAgaWYgKHRoaXMuX2lzRGlydHkgfHwgIXRoaXMuX3JpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLl9yaWdodCA9IHRoaXMuY29udmVydFRvV29ybGRTcGFjZShWZWN0b3IzLlJJR0hULCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcmlnaHQuY2xvbmUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHBvc2l0aW9uKCk6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGVtcFBvcy5jbG9uZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgcG9zaXRpb24ocG9zOiBWZWN0b3IzKSB7XG4gICAgICAgIGlmIChwb3MuZXF1YWxzKHRoaXMuX3RlbXBQb3MpKSByZXR1cm47XG4gICAgICAgIHRoaXMuX3RlbXBQb3MgPSBwb3M7XG4gICAgICAgIHRoaXMuc2V0RGlydHkoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHdvcmxkUG9zaXRpb24oKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5nZXRUcmFuc2xhdGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHJvdGF0aW9uKCk6IFF1YXRlcm5pb24ge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGVtcFJvdC5jbG9uZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgcm90YXRpb24ocTogUXVhdGVybmlvbikge1xuICAgICAgICBpZiAocS5lcXVhbHModGhpcy5fdGVtcFJvdCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5fdGVtcFJvdCA9IHE7XG4gICAgICAgIHRoaXMuc2V0RGlydHkoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHdvcmxkUm90YXRpb24oKTogUXVhdGVybmlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5nZXRSb3RhdGUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHNjYWxlKCk6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gdGhpcy5fdGVtcFNjYWxlLmNsb25lKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBzY2FsZShzOiBWZWN0b3IzKSB7XG4gICAgICAgIGlmIChzLmVxdWFscyh0aGlzLl90ZW1wU2NhbGUpKSByZXR1cm47XG4gICAgICAgIHRoaXMuX3RlbXBTY2FsZSA9IHM7XG4gICAgICAgIHRoaXMuc2V0RGlydHkoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IHdvcmxkU2NhbGUoKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5nZXRTY2FsZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcGFyZW50KCk6IFRyYW5zZm9ybSB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRQYXJlbnQocGFyZW50OiBUcmFuc2Zvcm0sIHdvcmxkUG9zaXRpb25TdGF5czogYm9vbGVhbiA9IHRydWUpIHtcbiAgICAgICAgaWYgKHBhcmVudCAhPSBudWxsICYmIHBhcmVudCAhPSB0aGlzICYmIHBhcmVudCAhPSB0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgLy/pmLLmraLlh7rnjrDvvJrniLboioLngrnmmK/lvZPliY3oioLngrnnmoTlrZDoioLngrnvvIzlsIblrZDoioLnmoTorr7nva7kuLroh6rlt7HnmoTniLboioLngrnvvIzkvJrmrbvlvqrnjq9cbiAgICAgICAgICAgIGlmIChwYXJlbnQuaGFzUGFyZW50KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBzZXQgcGFyZW50LCB0aGlzIG5vZGUgaXMgdGhlIHBhcmVudCBub2RlJ3MgcGFyZW50LlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8v5aaC5p6c5b2T5YmN6IqC54K55pyJ54i26IqC54K577yM6KaB5YWI56e76Zmk5pen55qEXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMsIHdvcmxkUG9zaXRpb25TdGF5cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcmVudC5hZGRDaGlsZCh0aGlzLCB3b3JsZFBvc2l0aW9uU3RheXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmVudCA9PSBudWxsICYmIHRoaXMucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucGFyZW50LnJlbW92ZUNoaWxkKHRoaXMsIHdvcmxkUG9zaXRpb25TdGF5cyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDorr7nva7ohI/moIforrDvvIzlm6DkuLrniLboioLngrnlhbPns7vmlLnlj5jkvJrlvbHlk43lj5jmjaLnn6npmLVcbiAgICAgICAgdGhpcy5zZXREaXJ0eSgpO1xuICAgIH1cblxuICAgIC8v6IqC54K5cOaYr+WQpuaYr+W9k+WJjeiKgueCueeahOS4iue6p1xuICAgIHB1YmxpYyBoYXNQYXJlbnQocDogVHJhbnNmb3JtKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCA9PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBlbHNlIGlmICh0aGlzLnBhcmVudCA9PSBwKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmVudC5oYXNQYXJlbnQocCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRDaGlsZChjaGlsZDogVHJhbnNmb3JtLCB3b3JsZFBvc2l0aW9uU3RheXM6IGJvb2xlYW4gPSB0cnVlKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChjaGlsZCAhPSBudWxsICYmIGNoaWxkICE9IHRoaXMgJiYgIXRoaXMuY2hpbGRyZW4uaW5jbHVkZXMoY2hpbGQpKSB7XG4gICAgICAgICAgICAvL+mYsuatouWHuueOsO+8mmNoaWxk6IqC54K55piv5b2T5YmN6IqC54K555qE54i26IqC54K577yM5bCG54i26IqC55qE6K6+572u5Li66Ieq5bex55qE5a2Q6IqC54K577yM5Lya5q275b6q546vXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNQYXJlbnQoY2hpbGQpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBhZGQgY2hpbGQsIHRoaXMgbm9kZSBpcyB0aGUgY2hpbGQgbm9kZSdzIGNoaWxkLlwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8v5aaC5p6c5a2Q6IqC54K55pyJ5pen55qE54i26IqC54K577yM6KaB5YWI56e76ZmkXG4gICAgICAgICAgICBpZiAoY2hpbGQucGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5wYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQsIHdvcmxkUG9zaXRpb25TdGF5cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgICAgICBjaGlsZC5fcGFyZW50ID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHdvcmxkUG9zaXRpb25TdGF5cykge1xuICAgICAgICAgICAgICAgIC8v5L+d55WZ5Y6f5LiW55WM5Z2Q5qCH5L2N572u77yM5YWI5pyd54i26IqC54K555qE5Y+Y5o2i55qE5Y+N5pa55ZCR56e75Yqo77yM54S25ZCO5YaN5re75Yqg6L+b5Y6777yM5bCx6IO95L+d5oyB5LiW55WM5Z2Q5qCH5LiN5Y+YXG4gICAgICAgICAgICAgICAgLy/ljbPlj5jmjaLliLDniLboioLngrnnmoTpgIbnn6npmLXph4xcbiAgICAgICAgICAgICAgICB2YXIgbSA9IHRoaXMud29ybGRUb0xvY2FsTWF0cml4Lm11bHRpcGx5KGNoaWxkLnNlbGZNYXRyaXgpO1xuICAgICAgICAgICAgICAgIGNoaWxkLl90ZW1wUG9zID0gbS5nZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgICAgICAgICBjaGlsZC5fdGVtcFJvdCA9IG0uZ2V0Um90YXRlKCk7XG4gICAgICAgICAgICAgICAgY2hpbGQuX3RlbXBTY2FsZSA9IG0uZ2V0U2NhbGUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8g6K6+572u6ISP5qCH6K6w77yM5Zug5Li654i26IqC54K55YWz57O75pS55Y+Y5Lya5b2x5ZON5Y+Y5o2i55+p6Zi1XG4gICAgICAgICAgICBjaGlsZC5zZXREaXJ0eSgpO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW1vdmVDaGlsZChjaGlsZDogVHJhbnNmb3JtLCB3b3JsZFBvc2l0aW9uU3RheXM6IGJvb2xlYW4gPSB0cnVlKTogYm9vbGVhbiB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuY2hpbGRyZW4uaW5kZXhPZihjaGlsZCwgMCk7XG5cbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcblxuICAgICAgICAgICAgaWYgKHdvcmxkUG9zaXRpb25TdGF5cykge1xuICAgICAgICAgICAgICAgIC8v5L+d55WZ5LiW55WM5Z2Q5qCH77yM55u05o6l5bCG5pys5Zyw5Z2Q5qCH562J5ZCM5LqO5b2T5YmN5LiW55WM5Z2Q5qCH5Y2z5Y+vXG4gICAgICAgICAgICAgICAgdmFyIG0gPSB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5tdWx0aXBseShjaGlsZC5zZWxmTWF0cml4KTtcbiAgICAgICAgICAgICAgICBjaGlsZC5fdGVtcFBvcyA9IG0uZ2V0VHJhbnNsYXRlKCk7XG4gICAgICAgICAgICAgICAgY2hpbGQuX3RlbXBSb3QgPSBtLmdldFJvdGF0ZSgpO1xuICAgICAgICAgICAgICAgIGNoaWxkLl90ZW1wU2NhbGUgPSBtLmdldFNjYWxlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIGNoaWxkLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgLy8g6K6+572u6ISP5qCH6K6w77yM5Zug5Li654i26IqC54K55YWz57O75pS55Y+Y5Lya5b2x5ZON5Y+Y5o2i55+p6Zi1XG4gICAgICAgICAgICBjaGlsZC5zZXREaXJ0eSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb252ZXJ0VG9Ob2RlU3BhY2UodjogVmVjdG9yMywgdzogbnVtYmVyID0gMSk6IFZlY3RvcjMge1xuICAgICAgICAvKlxuICAgICAgICAgKuWwhuafkOS4quWdkOagh+i9rOWIsOiHquW3seeahOWxgOmDqOepuumXtO+8jOS+i+WmguW9k+WJjeeahOWxgOmDqOWdkOagh+WOn+eCueWcqOS4lueVjOWdkOagh+eahO+8iDHvvIwx77yJ5aSEXG4gICAgICAgICAq54K5cOWcqOS4lueVjOWdkOagh++8iDLvvIwx77yJ5aSE77yM6YKj5LmI5bCG54K5cOebuOWvueS6juW9k+WJjeWxgOmDqOWdkOagh+ezu+eahOS9jee9ruWwseaYr++8iDLvvIwx77yJLe+8iDHvvIwx77yJPSDvvIgx77yMIDDvvIlcbiAgICAgICAgICrljbPlsIbngrlw5Y+N5ZCR5Y+Y5o2i5b2T5YmN55qE55+p6Zi1IFxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHRoaXMud29ybGRUb0xvY2FsTWF0cml4Lm11bHRpcGx5VmVjdG9yNChuZXcgVmVjdG9yNCh2LCB3KSkudmVjdG9yMztcbiAgICB9XG5cbiAgICBwdWJsaWMgY29udmVydFRvV29ybGRTcGFjZSh2OiBWZWN0b3IzLCB3OiBudW1iZXIgPSAxKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsVG9Xb3JsZE1hdHJpeC5tdWx0aXBseVZlY3RvcjQobmV3IFZlY3RvcjQodiwgdykpLnZlY3RvcjM7XG4gICAgfVxuXG4gICAgcHVibGljIGRlc3Ryb3koZGVzdHJveUNoaWxkcmVuOiBib29sZWFuID0gdHJ1ZSkge1xuICAgICAgICBpZiAoZGVzdHJveUNoaWxkcmVuKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgICAgICAgICAgIGNoaWxkLmRlc3Ryb3koZGVzdHJveUNoaWxkcmVuKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7IEdyb3VwLCBUd2VlbiB9IGZyb20gXCJAdHdlZW5qcy90d2Vlbi5qc1wiO1xuXG5leHBvcnQgY2xhc3MgVHdlZW5NYW5hZ2VyIHtcbiAgICBwcml2YXRlIHN0YXRpYyB0d2Vlbkdyb3VwOiBHcm91cCA9IG5ldyBHcm91cCgpO1xuXG4gICAgcHVibGljIHN0YXRpYyBhZGQodHdlZW46IFR3ZWVuKSB7XG4gICAgICAgIC8vIOS/neWtmOeUqOaIt+WOn+acieeahCBvbkNvbXBsZXRlIOWbnuiwg1xuICAgICAgICBjb25zdCBvcmlnaW5hbE9uQ29tcGxldGUgPSAodHdlZW4gYXMgYW55KS5fb25Db21wbGV0ZUNhbGxiYWNrO1xuXG4gICAgICAgIC8vIOiuvue9ruaWsOeahCBvbkNvbXBsZXRlIOWbnuiwg1xuICAgICAgICB0d2Vlbi5vbkNvbXBsZXRlKCgpID0+IHtcbiAgICAgICAgICAgIC8vIOWFiOiwg+eUqOeUqOaIt+WOn+acieeahOWbnuiwg++8iOWmguaenOWtmOWcqO+8iVxuICAgICAgICAgICAgaWYgKG9yaWdpbmFsT25Db21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIG9yaWdpbmFsT25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8g54S25ZCO5LuO566h55CG5Zmo5Lit56e76ZmkXG4gICAgICAgICAgICB0aGlzLnJlbW92ZSh0d2Vlbik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIuenu+mZpFwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy50d2Vlbkdyb3VwLmFkZCh0d2Vlbik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyB1cGRhdGUodGltZT86IG51bWJlcikge1xuICAgICAgICB0aGlzLnR3ZWVuR3JvdXAudXBkYXRlKHRpbWUpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcmVtb3ZlKHR3ZWVuOiBUd2Vlbikge1xuICAgICAgICB0aGlzLnR3ZWVuR3JvdXAucmVtb3ZlKHR3ZWVuKTtcbiAgICB9XG59XG4iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgVU9iamVjdCB7XG4gICAgcHVibGljIGFic3RyYWN0IG9uRGVzdHJveSgpOiB2b2lkO1xuXG4gICAgcHVibGljIERlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMub25EZXN0cm95KCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBEZXN0cm95KG9iajogVU9iamVjdCk6IHZvaWQge1xuICAgICAgICBvYmouRGVzdHJveSgpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBHYW1lT2JqZWN0IH0gZnJvbSBcIi4uL0NvcmUvR2FtZU9iamVjdFwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IEJvdW5kcyB9IGZyb20gXCIuL0JvdW5kc1wiO1xuXG4vLyBCVkjoioLngrnnsbtcbmNsYXNzIEJWSE5vZGUge1xuICAgIHB1YmxpYyBib3VuZHM6IEJvdW5kcztcbiAgICBwdWJsaWMgZ2FtZU9iamVjdDogR2FtZU9iamVjdCB8IG51bGwgPSBudWxsO1xuICAgIHB1YmxpYyBsZWZ0OiBCVkhOb2RlIHwgbnVsbCA9IG51bGw7XG4gICAgcHVibGljIHJpZ2h0OiBCVkhOb2RlIHwgbnVsbCA9IG51bGw7XG4gICAgcHVibGljIGlzTGVhZjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgY29uc3RydWN0b3IoYm91bmRzOiBCb3VuZHMpIHtcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBib3VuZHM7XG4gICAgfVxufVxuXG4vLyBCVkjmoJHnsbtcbmV4cG9ydCBjbGFzcyBCVkhUcmVlIHtcbiAgICBwcml2YXRlIHJvb3Q6IEJWSE5vZGUgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIG1heE9iamVjdHNQZXJOb2RlOiBudW1iZXIgPSA4OyAvLyDmr4/kuKroioLngrnmnIDlpKflr7nosaHmlbDph49cbiAgICBwcml2YXRlIG1heERlcHRoOiBudW1iZXIgPSAxNjsgLy8g5pyA5aSn5rex5bqmXG5cbiAgICAvKipcbiAgICAgKiDmnoTlu7pCVkjmoJFcbiAgICAgKi9cbiAgICBwdWJsaWMgYnVpbGQoc2NlbmVPYmplY3RzOiBHYW1lT2JqZWN0W10pOiB2b2lkIHtcbiAgICAgICAgaWYgKHNjZW5lT2JqZWN0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucm9vdCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyDorqHnrpfmiYDmnInlr7nosaHnmoTljIXlm7Tnm5JcbiAgICAgICAgY29uc3QgYm91bmRzTGlzdDogQm91bmRzW10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBvYmogb2Ygc2NlbmVPYmplY3RzKSB7XG4gICAgICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmNhbGN1bGF0ZU9iamVjdEJvdW5kcyhvYmopO1xuICAgICAgICAgICAgaWYgKGJvdW5kcykge1xuICAgICAgICAgICAgICAgIGJvdW5kc0xpc3QucHVzaChib3VuZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8g5p6E5bu6QlZI5qCRXG4gICAgICAgIHRoaXMucm9vdCA9IHRoaXMuYnVpbGRSZWN1cnNpdmUoYm91bmRzTGlzdCwgc2NlbmVPYmplY3RzLCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDpgJLlvZLmnoTlu7pCVkjoioLngrlcbiAgICAgKi9cbiAgICBwcml2YXRlIGJ1aWxkUmVjdXJzaXZlKFxuICAgICAgICBib3VuZHNMaXN0OiBCb3VuZHNbXSwgXG4gICAgICAgIG9iamVjdHM6IEdhbWVPYmplY3RbXSwgXG4gICAgICAgIGRlcHRoOiBudW1iZXJcbiAgICApOiBCVkhOb2RlIHtcbiAgICAgICAgLy8g57uI5q2i5p2h5Lu277ya5a+56LGh5pWw6YeP5bCR5oiW6L6+5Yiw5pyA5aSn5rex5bqmXG4gICAgICAgIGlmIChvYmplY3RzLmxlbmd0aCA8PSB0aGlzLm1heE9iamVjdHNQZXJOb2RlIHx8IGRlcHRoID49IHRoaXMubWF4RGVwdGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgQlZITm9kZSh0aGlzLmNhbGN1bGF0ZUNvbWJpbmVkQm91bmRzKGJvdW5kc0xpc3QpKTtcbiAgICAgICAgICAgIG5vZGUuZ2FtZU9iamVjdCA9IG9iamVjdHMubGVuZ3RoID09PSAxID8gb2JqZWN0c1swXSA6IG51bGw7XG4gICAgICAgICAgICBub2RlLmlzTGVhZiA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOmAieaLqeWIhuWJsui9tO+8iOmAieaLqeaWueW3ruacgOWkp+eahOi9tO+8iVxuICAgICAgICBjb25zdCBheGlzID0gdGhpcy5zZWxlY3RTcGxpdEF4aXMoYm91bmRzTGlzdCk7XG4gICAgICAgIFxuICAgICAgICAvLyDmjInpgInkuK3ovbTmjpLluo/lr7nosaFcbiAgICAgICAgY29uc3Qgc29ydGVkID0gdGhpcy5zb3J0T2JqZWN0c0J5QXhpcyhvYmplY3RzLCBib3VuZHNMaXN0LCBheGlzKTtcbiAgICAgICAgXG4gICAgICAgIC8vIOWIhuWJsueCue+8iOS4reS9jeaVsOWIhuWJsu+8iVxuICAgICAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKG9iamVjdHMubGVuZ3RoIC8gMik7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBsZWZ0Qm91bmRzID0gYm91bmRzTGlzdC5zbGljZSgwLCBtaWQpO1xuICAgICAgICBjb25zdCByaWdodEJvdW5kcyA9IGJvdW5kc0xpc3Quc2xpY2UobWlkKTtcbiAgICAgICAgY29uc3QgbGVmdE9iamVjdHMgPSBvYmplY3RzLnNsaWNlKDAsIG1pZCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0T2JqZWN0cyA9IG9iamVjdHMuc2xpY2UobWlkKTtcblxuICAgICAgICAvLyDliJvlu7rlhoXpg6joioLngrlcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBCVkhOb2RlKHRoaXMuY2FsY3VsYXRlQ29tYmluZWRCb3VuZHMoYm91bmRzTGlzdCkpO1xuICAgICAgICBub2RlLmxlZnQgPSB0aGlzLmJ1aWxkUmVjdXJzaXZlKGxlZnRCb3VuZHMsIGxlZnRPYmplY3RzLCBkZXB0aCArIDEpO1xuICAgICAgICBub2RlLnJpZ2h0ID0gdGhpcy5idWlsZFJlY3Vyc2l2ZShyaWdodEJvdW5kcywgcmlnaHRPYmplY3RzLCBkZXB0aCArIDEpO1xuICAgICAgICBub2RlLmlzTGVhZiA9IGZhbHNlO1xuXG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWwhOe6v+ajgOa1iyAtIOaJvuWIsOaJgOacieebuOS6pOWvueixoVxuICAgICAqL1xuICAgIHB1YmxpYyByYXljYXN0KHJheU9yaWdpbjogVmVjdG9yMywgcmF5RGlyZWN0aW9uOiBWZWN0b3IzLCBtYXhEaXN0YW5jZTogbnVtYmVyID0gSW5maW5pdHkpOiBHYW1lT2JqZWN0W10ge1xuICAgICAgICBjb25zdCByZXN1bHRzOiBHYW1lT2JqZWN0W10gPSBbXTtcbiAgICAgICAgaWYgKHRoaXMucm9vdCkge1xuICAgICAgICAgICAgdGhpcy5yYXljYXN0UmVjdXJzaXZlKHRoaXMucm9vdCwgcmF5T3JpZ2luLCByYXlEaXJlY3Rpb24sIG1heERpc3RhbmNlLCByZXN1bHRzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDpgJLlvZLlsITnur/mo4DmtYtcbiAgICAgKi9cbiAgICBwcml2YXRlIHJheWNhc3RSZWN1cnNpdmUoXG4gICAgICAgIG5vZGU6IEJWSE5vZGUsIFxuICAgICAgICByYXlPcmlnaW46IFZlY3RvcjMsIFxuICAgICAgICByYXlEaXJlY3Rpb246IFZlY3RvcjMsIFxuICAgICAgICBtYXhEaXN0YW5jZTogbnVtYmVyLCBcbiAgICAgICAgcmVzdWx0czogR2FtZU9iamVjdFtdXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGlmICghbm9kZS5ib3VuZHMuaW50ZXJzZWN0c1JheShyYXlPcmlnaW4sIHJheURpcmVjdGlvbiwgbWF4RGlzdGFuY2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZS5pc0xlYWYpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmdhbWVPYmplY3QpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobm9kZS5nYW1lT2JqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlLmxlZnQpIHtcbiAgICAgICAgICAgIHRoaXMucmF5Y2FzdFJlY3Vyc2l2ZShub2RlLmxlZnQsIHJheU9yaWdpbiwgcmF5RGlyZWN0aW9uLCBtYXhEaXN0YW5jZSwgcmVzdWx0cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUucmlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMucmF5Y2FzdFJlY3Vyc2l2ZShub2RlLnJpZ2h0LCByYXlPcmlnaW4sIHJheURpcmVjdGlvbiwgbWF4RGlzdGFuY2UsIHJlc3VsdHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6K6h566X5a+56LGh5YyF5Zu055uSXG4gICAgICovXG4gICAgcHVibGljIGNhbGN1bGF0ZU9iamVjdEJvdW5kcyhvYmo6IEdhbWVPYmplY3QpOiBCb3VuZHMgfCBudWxsIHtcbiAgICAgICAgLy8g6L+Z6YeM6ZyA6KaB5a6e546w5YW35L2T55qE5YyF5Zu055uS6K6h566X6YC76L6RXG4gICAgICAgIC8vIOWPr+S7peagueaNruWvueixoeeahOWPmOaNouWSjOa4suafk+e7hOS7tuadpeiuoeeul+WunumZheWMheWbtOebklxuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBvYmoudHJhbnNmb3JtO1xuICAgICAgICBpZiAoIXRyYW5zZm9ybSkgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0cmFuc2Zvcm0ud29ybGRQb3NpdGlvbjtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0cmFuc2Zvcm0ud29ybGRTY2FsZTtcbiAgICAgICAgXG4gICAgICAgIC8vIOeugOWNleWunueOsO+8muWBh+iuvuavj+S4quWvueixoemDveaYr+WNleS9jeeri+aWueS9k++8jOagueaNruWPmOaNoue8qeaUvuWSjOW5s+enu1xuICAgICAgICBjb25zdCBoYWxmU2l6ZSA9IG5ldyBWZWN0b3IzKDAuNSAqIHNjYWxlLngsIDAuNSAqIHNjYWxlLnksIDAuNSAqIHNjYWxlLnopO1xuICAgICAgICByZXR1cm4gbmV3IEJvdW5kcyhcbiAgICAgICAgICAgIHBvc2l0aW9uLnN1YnRyYWN0KGhhbGZTaXplKSxcbiAgICAgICAgICAgIHBvc2l0aW9uLmFkZChoYWxmU2l6ZSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDorqHnrpflpJrkuKrljIXlm7Tnm5LnmoTlkIjlubbljIXlm7Tnm5JcbiAgICAgKi9cbiAgICBwcml2YXRlIGNhbGN1bGF0ZUNvbWJpbmVkQm91bmRzKGJvdW5kc0xpc3Q6IEJvdW5kc1tdKTogQm91bmRzIHtcbiAgICAgICAgaWYgKGJvdW5kc0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEJvdW5kcyhuZXcgVmVjdG9yMygwLCAwLCAwKSwgbmV3IFZlY3RvcjMoMCwgMCwgMCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1pbiA9IGJvdW5kc0xpc3RbMF0ubWluLmNsb25lKCk7XG4gICAgICAgIGxldCBtYXggPSBib3VuZHNMaXN0WzBdLm1heC5jbG9uZSgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgYm91bmRzTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbWluID0gVmVjdG9yMy5taW4obWluLCBib3VuZHNMaXN0W2ldLm1pbik7XG4gICAgICAgICAgICBtYXggPSBWZWN0b3IzLm1heChtYXgsIGJvdW5kc0xpc3RbaV0ubWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgQm91bmRzKG1pbiwgbWF4KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDpgInmi6nmnIDkvbPliIblibLovbRcbiAgICAgKi9cbiAgICBwcml2YXRlIHNlbGVjdFNwbGl0QXhpcyhib3VuZHNMaXN0OiBCb3VuZHNbXSk6IG51bWJlciB7XG4gICAgICAgIC8vIOiuoeeul+avj+S4qui9tOeahOaWueW3ru+8jOmAieaLqeaWueW3ruacgOWkp+eahOi9tFxuICAgICAgICBjb25zdCB2YXJpYW5jZXMgPSB0aGlzLmNhbGN1bGF0ZUF4aXNWYXJpYW5jZXMoYm91bmRzTGlzdCk7XG4gICAgICAgIGxldCBiZXN0QXhpcyA9IDA7XG4gICAgICAgIGxldCBtYXhWYXJpYW5jZSA9IHZhcmlhbmNlc1swXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IDM7IGkrKykge1xuICAgICAgICAgICAgaWYgKHZhcmlhbmNlc1tpXSA+IG1heFZhcmlhbmNlKSB7XG4gICAgICAgICAgICAgICAgbWF4VmFyaWFuY2UgPSB2YXJpYW5jZXNbaV07XG4gICAgICAgICAgICAgICAgYmVzdEF4aXMgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJlc3RBeGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiuoeeul+WQhOi9tOaWueW3rlxuICAgICAqL1xuICAgIHByaXZhdGUgY2FsY3VsYXRlQXhpc1ZhcmlhbmNlcyhib3VuZHNMaXN0OiBCb3VuZHNbXSk6IG51bWJlcltdIHtcbiAgICAgICAgY29uc3QgY2VudGVyczogVmVjdG9yM1tdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgYm91bmRzIG9mIGJvdW5kc0xpc3QpIHtcbiAgICAgICAgICAgIGNlbnRlcnMucHVzaChib3VuZHMuY2VudGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZhcmlhbmNlcyA9IFswLCAwLCAwXTtcbiAgICAgICAgZm9yIChsZXQgYXhpcyA9IDA7IGF4aXMgPCAzOyBheGlzKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG1lYW4gPSBjZW50ZXJzLnJlZHVjZSgoc3VtLCBjZW50ZXIpID0+IHN1bSArIGNlbnRlci5nZXRDb21wb25lbnQoYXhpcyksIDApIC8gY2VudGVycy5sZW5ndGg7XG4gICAgICAgICAgICB2YXJpYW5jZXNbYXhpc10gPSBjZW50ZXJzLnJlZHVjZSgoc3VtLCBjZW50ZXIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaWZmID0gY2VudGVyLmdldENvbXBvbmVudChheGlzKSAtIG1lYW47XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1bSArIGRpZmYgKiBkaWZmO1xuICAgICAgICAgICAgfSwgMCkgLyBjZW50ZXJzLmxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YXJpYW5jZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5oyJ5oyH5a6a6L205o6S5bqP5a+56LGhXG4gICAgICovXG4gICAgcHJpdmF0ZSBzb3J0T2JqZWN0c0J5QXhpcyhcbiAgICAgICAgb2JqZWN0czogR2FtZU9iamVjdFtdLCBcbiAgICAgICAgYm91bmRzTGlzdDogQm91bmRzW10sIFxuICAgICAgICBheGlzOiBudW1iZXJcbiAgICApOiBHYW1lT2JqZWN0W10ge1xuICAgICAgICBjb25zdCBzb3J0ZWRJbmRpY2VzID0gYm91bmRzTGlzdFxuICAgICAgICAgICAgLm1hcCgoYm91bmRzLCBpbmRleCkgPT4gKHtcbiAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICBjZW50ZXI6IGJvdW5kcy5jZW50ZXIuZ2V0Q29tcG9uZW50KGF4aXMpXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBhLmNlbnRlciAtIGIuY2VudGVyKVxuICAgICAgICAgICAgLm1hcChpdGVtID0+IGl0ZW0uaW5kZXgpO1xuXG4gICAgICAgIHJldHVybiBzb3J0ZWRJbmRpY2VzLm1hcChpbmRleCA9PiBvYmplY3RzW2luZGV4XSk7XG4gICAgfVxufSIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi9WZWN0b3IzXCI7XG5cbi8qKlxuICog6L205a+56b2Q5YyF5Zu055uSIChBQUJCKVxuICog5pyA566A5Y2V55qE5YyF5Zu055uS77yM6L655LiO5Z2Q5qCH6L205bmz6KGMXG4gKi9cbmV4cG9ydCBjbGFzcyBCb3VuZHMge1xuICAgIHB1YmxpYyByZWFkb25seSBtaW46IFZlY3RvcjM7XG4gICAgcHVibGljIHJlYWRvbmx5IG1heDogVmVjdG9yMztcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2VudGVyOiBWZWN0b3IzO1xuICAgIHB1YmxpYyByZWFkb25seSBoYWxmRXh0ZW50czogVmVjdG9yMztcbiAgICAvLyDlrprkuYk45Liq6aG254K5XG4gICAgcHVibGljIHJlYWRvbmx5IHZlcnRpY2VzOiBWZWN0b3IzW107XG4gICAgLy8g5a6a5LmJMTLmnaHovrnnmoTpobbngrnntKLlvJXlr7kgKOavj+S4qumdojTmnaHovrnvvIzlhbE25Liq6Z2i77yM5L2G5YWx5Lqr6L655Y+q55S75LiA5qyhKVxuICAgIHB1YmxpYyByZWFkb25seSBlZGdlcyA9IFtcbiAgICAgICAgWzAsIDFdLCBbMSwgMl0sIFsyLCAzXSwgWzMsIDBdLCAvLyDlkI7pnaJcbiAgICAgICAgWzQsIDVdLCBbNSwgNl0sIFs2LCA3XSwgWzcsIDRdLCAvLyDliY3pnaJcbiAgICAgICAgWzAsIDRdLCBbMSwgNV0sIFsyLCA2XSwgWzMsIDddICAvLyDov57mjqXliY3lkI7nmoTovrlcbiAgICBdO1xuXG4gICAgY29uc3RydWN0b3IobWluOiBWZWN0b3IzID0gVmVjdG9yMy5aRVJPLCBtYXg6IFZlY3RvcjMgPSBWZWN0b3IzLlpFUk8pIHtcbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuXG4gICAgICAgIC8vIOiuoeeul+S4reW/g+eCuVxuICAgICAgICB0aGlzLmNlbnRlciA9IG5ldyBWZWN0b3IzKCk7XG4gICAgICAgIHRoaXMuY2VudGVyLnggPSAodGhpcy5taW4ueCArIHRoaXMubWF4LngpIC8gMjtcbiAgICAgICAgdGhpcy5jZW50ZXIueSA9ICh0aGlzLm1pbi55ICsgdGhpcy5tYXgueSkgLyAyO1xuICAgICAgICB0aGlzLmNlbnRlci56ID0gKHRoaXMubWluLnogKyB0aGlzLm1heC56KSAvIDI7XG5cbiAgICAgICAgLy8g6K6h566X5Y2K6ZW/77yI5LuO5Lit5b+D5Yiw5ZCE6L6555qE6Led56a777yJXG4gICAgICAgIHRoaXMuaGFsZkV4dGVudHMgPSBuZXcgVmVjdG9yMygpO1xuICAgICAgICB0aGlzLmhhbGZFeHRlbnRzLnggPSAodGhpcy5tYXgueCAtIHRoaXMubWluLngpIC8gMjtcbiAgICAgICAgdGhpcy5oYWxmRXh0ZW50cy55ID0gKHRoaXMubWF4LnkgLSB0aGlzLm1pbi55KSAvIDI7XG4gICAgICAgIHRoaXMuaGFsZkV4dGVudHMueiA9ICh0aGlzLm1heC56IC0gdGhpcy5taW4ueikgLyAyO1xuXG4gICAgICAgIC8vIOiuoeeulzjkuKrpobbngrlcbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IG5ldyBBcnJheTxWZWN0b3IzPig4KTtcbiAgICAgICAgdGhpcy52ZXJ0aWNlc1swXSA9IG5ldyBWZWN0b3IzKHRoaXMubWluLngsIHRoaXMubWluLnksIHRoaXMubWluLnopOyAvLyDlt6bkuIvlkI5cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1sxXSA9IG5ldyBWZWN0b3IzKHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWluLnopOyAvLyDlj7PkuIvlkI5cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1syXSA9IG5ldyBWZWN0b3IzKHRoaXMubWF4LngsIHRoaXMubWF4LnksIHRoaXMubWluLnopOyAvLyDlj7PkuIrlkI5cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1szXSA9IG5ldyBWZWN0b3IzKHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWluLnopOyAvLyDlt6bkuIrlkI5cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1s0XSA9IG5ldyBWZWN0b3IzKHRoaXMubWluLngsIHRoaXMubWluLnksIHRoaXMubWF4LnopOyAvLyDlt6bkuIvliY1cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1s1XSA9IG5ldyBWZWN0b3IzKHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWF4LnopOyAvLyDlj7PkuIvliY1cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1s2XSA9IG5ldyBWZWN0b3IzKHRoaXMubWF4LngsIHRoaXMubWF4LnksIHRoaXMubWF4LnopOyAvLyDlj7PkuIrliY1cbiAgICAgICAgdGhpcy52ZXJ0aWNlc1s3XSA9IG5ldyBWZWN0b3IzKHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWF4LnopOyAvLyDlt6bkuIrliY1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlsITnur/kuI7ljIXlm7Tnm5Lnm7jkuqTmo4DmtYtcbiAgICAgKi9cbiAgICBwdWJsaWMgaW50ZXJzZWN0c1JheShyYXlPcmlnaW46IFZlY3RvcjMsIHJheURpcmVjdGlvbjogVmVjdG9yMywgbWF4RGlzdGFuY2U6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICAvLyDkvb/nlKhzbGFi5pa55rOV6L+b6KGM5bCE57q/5LiOQUFCQuebuOS6pOajgOa1i1xuICAgICAgICBsZXQgdG1pbiA9IDA7XG4gICAgICAgIGxldCB0bWF4ID0gbWF4RGlzdGFuY2U7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGludkQgPSAxLjAgLyByYXlEaXJlY3Rpb24uZ2V0Q29tcG9uZW50KGkpO1xuICAgICAgICAgICAgbGV0IHQwID0gKHRoaXMubWluLmdldENvbXBvbmVudChpKSAtIHJheU9yaWdpbi5nZXRDb21wb25lbnQoaSkpICogaW52RDtcbiAgICAgICAgICAgIGxldCB0MSA9ICh0aGlzLm1heC5nZXRDb21wb25lbnQoaSkgLSByYXlPcmlnaW4uZ2V0Q29tcG9uZW50KGkpKSAqIGludkQ7XG5cbiAgICAgICAgICAgIGlmIChpbnZEIDwgMCkge1xuICAgICAgICAgICAgICAgIFt0MCwgdDFdID0gW3QxLCB0MF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRtaW4gPSBNYXRoLm1heCh0bWluLCB0MCk7XG4gICAgICAgICAgICB0bWF4ID0gTWF0aC5taW4odG1heCwgdDEpO1xuXG4gICAgICAgICAgICBpZiAodG1heCA8PSB0bWluKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6K6h566X5bCE57q/5LiO5YyF5Zu055uS55qE55u45Lqk6Led56a7XG4gICAgICovXG4gICAgcHVibGljIHJheUludGVyc2VjdERpc3RhbmNlKHJheU9yaWdpbjogVmVjdG9yMywgcmF5RGlyZWN0aW9uOiBWZWN0b3IzKTogbnVtYmVyIHtcbiAgICAgICAgLy8g566A5YyW55qE55u45Lqk6Led56a76K6h566XXG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuY2VudGVyO1xuICAgICAgICBjb25zdCB0b0NlbnRlciA9IGNlbnRlci5zdWJ0cmFjdChyYXlPcmlnaW4pO1xuICAgICAgICByZXR1cm4gdG9DZW50ZXIuZG90KHJheURpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgLy8gLyoqXG4gICAgLy8gICog6I635Y+W5YyF5Zu055uS5Zyo5oyH5a6a5pa55ZCR5LiK55qE5p6B5YC86aG254K5XG4gICAgLy8gICogQHBhcmFtIGJvdW5kcyDljIXlm7Tnm5JcbiAgICAvLyAgKiBAcGFyYW0gZGlyZWN0aW9uIOaWueWQkeWQkemHj1xuICAgIC8vICAqIEBwYXJhbSBwb3NpdGl2ZSDmmK/lkKbojrflj5bmraPmlrnlkJHnmoTmnoHlgLzpobbngrlcbiAgICAvLyAgKiBAcmV0dXJucyDmnoHlgLzpobbngrlcbiAgICAvLyAgKi9cbiAgICAvLyBwdWJsaWMgZ2V0RXh0cmVtZVZlcnRleChkaXJlY3Rpb246IFZlY3RvcjMsIHBvc2l0aXZlOiBib29sZWFuKTogVmVjdG9yMyB7XG4gICAgLy8gICAgIC8vIOWIm+W7uuS4gOS4quaWsOeahOmhtueCueeUqOS6juiuoeeul1xuICAgIC8vICAgICBjb25zdCB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuICAgICAgICBcbiAgICAvLyAgICAgLy8g5a+55LqO5q+P5Liq6L2077yM5qC55o2u5pa55ZCR5ZCR6YeP55qE5YiG6YeP56ym5Y+36YCJ5oupbWlu5oiWbWF4XG4gICAgLy8gICAgIHZlcnRleC54ID0gZGlyZWN0aW9uLnggPiAwID09PSBwb3NpdGl2ZSA/IHRoaXMubWF4LnggOiB0aGlzLm1pbi54O1xuICAgIC8vICAgICB2ZXJ0ZXgueSA9IGRpcmVjdGlvbi55ID4gMCA9PT0gcG9zaXRpdmUgPyB0aGlzLm1heC55IDogdGhpcy5taW4ueTtcbiAgICAvLyAgICAgdmVydGV4LnogPSBkaXJlY3Rpb24ueiA+IDAgPT09IHBvc2l0aXZlID8gdGhpcy5tYXgueiA6IHRoaXMubWluLno7XG4gICAgICAgIFxuICAgIC8vICAgICByZXR1cm4gdmVydGV4O1xuICAgIC8vIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZnJvbVBvaW50cyhwb2ludHM6IFZlY3RvcjNbXSk6IEJvdW5kcyB7XG4gICAgICAgIGlmIChwb2ludHMubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJvdW5kcygpO1xuXG4gICAgICAgIGxldCBtaW4gPSBuZXcgVmVjdG9yMyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnksIHBvaW50c1swXS56KTtcbiAgICAgICAgbGV0IG1heCA9IG5ldyBWZWN0b3IzKHBvaW50c1swXS54LCBwb2ludHNbMF0ueSwgcG9pbnRzWzBdLnopO1xuXG4gICAgICAgIGZvciAoY29uc3QgcCBvZiBwb2ludHMpIHtcbiAgICAgICAgICAgIG1pbi54ID0gTWF0aC5taW4obWluLngsIHAueCk7XG4gICAgICAgICAgICBtaW4ueSA9IE1hdGgubWluKG1pbi55LCBwLnkpO1xuICAgICAgICAgICAgbWluLnogPSBNYXRoLm1pbihtaW4ueiwgcC56KTtcblxuICAgICAgICAgICAgbWF4LnggPSBNYXRoLm1heChtYXgueCwgcC54KTtcbiAgICAgICAgICAgIG1heC55ID0gTWF0aC5tYXgobWF4LnksIHAueSk7XG4gICAgICAgICAgICBtYXgueiA9IE1hdGgubWF4KG1heC56LCBwLnopO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5YGH6K6+Qm91bmRz5pyJbWlu5ZKMbWF45bGe5oCnXG4gICAgICAgIGNvbnN0IGJvdW5kcyA9IG5ldyBCb3VuZHMobWluLCBtYXgpO1xuICAgICAgICByZXR1cm4gYm91bmRzO1xuICAgIH1cbn1cblxuLyoqXG4gKiDnkIPkvZPljIXlm7Tnm5JcbiAqIOeUqOeQg+W/g+WSjOWNiuW+hOihqOekuueahOeugOWMluWMheWbtOS9k1xuICovXG5jbGFzcyBTcGhlcmUge1xuICAgIGNlbnRlcjogVmVjdG9yMztcbiAgICByYWRpdXM6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGNlbnRlcjogVmVjdG9yMywgcmFkaXVzOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7XG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS7jumhtueCueWIl+ihqOeUn+aIkOeQg+S9k+WMheWbtOebklxuICAgICAqIOeul+azleaAnei3r++8muWFiOiuoeeul+aJgOaciemhtueCueeahOS4reW/g+eCue+8jOWGjeaJvuWIsOemu+S4reW/g+eCueacgOi/nOeahOmhtueCueS9nOS4uuWNiuW+hFxuICAgICAqIEBwYXJhbSB2ZXJ0aWNlcyDkuInnu7TpobbngrnmlbDnu4RcbiAgICAgKiBAcmV0dXJucyDnlJ/miJDnmoTnkIPkvZNcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVZlcnRpY2VzKHZlcnRpY2VzOiBWZWN0b3IzW10pOiBTcGhlcmUge1xuICAgICAgICBpZiAodmVydGljZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLpobbngrnmlbDnu4TkuI3og73kuLrnqbpcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAxLiDorqHnrpfkuK3lv4PngrnvvIjlubPlnYflgLzvvIlcbiAgICAgICAgY29uc3QgY2VudGVyID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgICAgZm9yIChjb25zdCB2IG9mIHZlcnRpY2VzKSB7XG4gICAgICAgICAgICBjZW50ZXIueCArPSB2Lng7XG4gICAgICAgICAgICBjZW50ZXIueSArPSB2Lnk7XG4gICAgICAgICAgICBjZW50ZXIueiArPSB2Lno7XG4gICAgICAgIH1cbiAgICAgICAgY2VudGVyLnggLz0gdmVydGljZXMubGVuZ3RoO1xuICAgICAgICBjZW50ZXIueSAvPSB2ZXJ0aWNlcy5sZW5ndGg7XG4gICAgICAgIGNlbnRlci56IC89IHZlcnRpY2VzLmxlbmd0aDtcblxuICAgICAgICAvLyAyLiDmib7liLDnprvkuK3lv4PngrnmnIDov5znmoTpobbngrnvvIzlhbbot53nprvljbPkuLrljYrlvoRcbiAgICAgICAgbGV0IG1heERpc3RhbmNlU3F1YXJlZCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgdiBvZiB2ZXJ0aWNlcykge1xuICAgICAgICAgICAgY29uc3QgZHggPSB2LnggLSBjZW50ZXIueDtcbiAgICAgICAgICAgIGNvbnN0IGR5ID0gdi55IC0gY2VudGVyLnk7XG4gICAgICAgICAgICBjb25zdCBkeiA9IHYueiAtIGNlbnRlci56O1xuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2VTcXVhcmVkID0gZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6O1xuXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2VTcXVhcmVkID4gbWF4RGlzdGFuY2VTcXVhcmVkKSB7XG4gICAgICAgICAgICAgICAgbWF4RGlzdGFuY2VTcXVhcmVkID0gZGlzdGFuY2VTcXVhcmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmFkaXVzID0gTWF0aC5zcXJ0KG1heERpc3RhbmNlU3F1YXJlZCk7XG4gICAgICAgIHJldHVybiBuZXcgU3BoZXJlKGNlbnRlciwgcmFkaXVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDku45BQUJC55Sf5oiQ55CD5L2T5YyF5Zu055uSXG4gICAgICogQHBhcmFtIGFhYmIg6L205a+56b2Q5YyF5Zu055uSXG4gICAgICogQHJldHVybnMg55Sf5oiQ55qE55CD5L2TXG4gICAgICovXG4gICAgc3RhdGljIGZyb21BQUJCKGFhYmI6IEJvdW5kcyk6IFNwaGVyZSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IGFhYmIuY2VudGVyO1xuICAgICAgICBjb25zdCBoYWxmRXh0ZW50cyA9IGFhYmIuaGFsZkV4dGVudHM7XG4gICAgICAgIC8vIOWNiuW+hOaYr+S7juS4reW/g+WIsOinkuiQveeahOi3neemu1xuICAgICAgICBjb25zdCByYWRpdXMgPSBoYWxmRXh0ZW50cy5tYWduaXR1ZGU7XG4gICAgICAgIHJldHVybiBuZXcgU3BoZXJlKGNlbnRlciwgcmFkaXVzKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQmxlbmRPcCB9IGZyb20gXCIuLi9SZW5kZXJlci9SZW5kZXJlckRlZmluZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29sb3Ige1xuICAgIC8vIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgV0hJVEUgPSBPYmplY3QuZnJlZXplKG5ldyBDb2xvcigxLCAxLCAxLCAxKSkgYXMgUmVhZG9ubHk8Q29sb3I+O1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IFdISVRFKCkgeyByZXR1cm4gbmV3IENvbG9yKDEsIDEsIDEsIDEpOyB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgQkxBQ0soKSB7IHJldHVybiBuZXcgQ29sb3IoMCwgMCwgMCwgMSk7IH1cbiAgICBwdWJsaWMgc3RhdGljIGdldCBHUkFZKCkgeyByZXR1cm4gbmV3IENvbG9yKDAuNSwgMC41LCAwLjUsIDEpOyB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgUkVEKCkgeyByZXR1cm4gbmV3IENvbG9yKDEsIDAsIDAsIDEpOyB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgR1JFRU4oKSB7IHJldHVybiBuZXcgQ29sb3IoMCwgMSwgMCwgMSk7IH1cbiAgICBwdWJsaWMgc3RhdGljIGdldCBCTFVFKCkgeyByZXR1cm4gbmV3IENvbG9yKDAsIDAsIDEsIDEpOyB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgWUVMTE9XKCkgeyByZXR1cm4gbmV3IENvbG9yKDEsIDEsIDAsIDEpOyB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgQ1lBTigpIHsgcmV0dXJuIG5ldyBDb2xvcigwLCAxLCAxLCAxKTsgfVxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IE1BR0VOVEEoKSB7IHJldHVybiBuZXcgQ29sb3IoMSwgMCwgMSwgMSk7IH1cbiAgICBwdWJsaWMgc3RhdGljIGdldCBPUkFOR0UoKSB7IHJldHVybiBuZXcgQ29sb3IoMSwgMC42NDcsIDAsIDEpOyB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgUFVSUExFKCkgeyByZXR1cm4gbmV3IENvbG9yKDAuNTAyLCAwLCAwLjUwMiwgMSk7IH1cbiAgICBwdWJsaWMgc3RhdGljIGdldCBCUk9XTigpIHsgcmV0dXJuIG5ldyBDb2xvcigwLjY0NywgMC4xNjUsIDAsIDEpOyB9XG4gICAgcHVibGljIHN0YXRpYyBnZXQgTUFST09OKCkgeyByZXR1cm4gbmV3IENvbG9yKDAuNSwgMCwgMCwgMSk7IH1cbiAgICBwdWJsaWMgc3RhdGljIGdldCBDTEVBUigpIHsgcmV0dXJuIG5ldyBDb2xvcigwLCAwLCAwLCAwKTsgfVxuXG4gICAgcHVibGljIHI6IG51bWJlcjtcbiAgICBwdWJsaWMgZzogbnVtYmVyO1xuICAgIHB1YmxpYyBiOiBudW1iZXI7XG4gICAgcHVibGljIGE6IG51bWJlcjtcblxuXG4gICAgY29uc3RydWN0b3IocjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYTogbnVtYmVyID0gMSkge1xuICAgICAgICB0aGlzLnIgPSBDb2xvci5jbGFtcDAxKHIpO1xuICAgICAgICB0aGlzLmcgPSBDb2xvci5jbGFtcDAxKGcpO1xuICAgICAgICB0aGlzLmIgPSBDb2xvci5jbGFtcDAxKGIpO1xuICAgICAgICB0aGlzLmEgPSBDb2xvci5jbGFtcDAxKGEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9uZSgpOiBDb2xvciB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IodGhpcy5yLCB0aGlzLmcsIHRoaXMuYiwgdGhpcy5hKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkKGM6IENvbG9yKTogQ29sb3Ige1xuICAgICAgICB0aGlzLnIgPSBDb2xvci5jbGFtcDAxKHRoaXMuciArIGMucik7XG4gICAgICAgIHRoaXMuZyA9IENvbG9yLmNsYW1wMDEodGhpcy5nICsgYy5nKTtcbiAgICAgICAgdGhpcy5iID0gQ29sb3IuY2xhbXAwMSh0aGlzLmIgKyBjLmIpO1xuICAgICAgICB0aGlzLmEgPSBDb2xvci5jbGFtcDAxKHRoaXMuYSArIGMuYSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdWJ0cmFjdChjOiBDb2xvcik6IENvbG9yIHtcbiAgICAgICAgdGhpcy5yID0gQ29sb3IuY2xhbXAwMSh0aGlzLnIgLSBjLnIpO1xuICAgICAgICB0aGlzLmcgPSBDb2xvci5jbGFtcDAxKHRoaXMuZyAtIGMuZyk7XG4gICAgICAgIHRoaXMuYiA9IENvbG9yLmNsYW1wMDEodGhpcy5iIC0gYy5iKTtcbiAgICAgICAgdGhpcy5hID0gQ29sb3IuY2xhbXAwMSh0aGlzLmEgLSBjLmEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgbXVsdGlwbHkoYzogQ29sb3IpOiBDb2xvciB7XG4gICAgICAgIHRoaXMuciA9IENvbG9yLmNsYW1wMDEodGhpcy5yICogYy5yKTtcbiAgICAgICAgdGhpcy5nID0gQ29sb3IuY2xhbXAwMSh0aGlzLmcgKiBjLmcpO1xuICAgICAgICB0aGlzLmIgPSBDb2xvci5jbGFtcDAxKHRoaXMuYiAqIGMuYik7XG4gICAgICAgIHRoaXMuYSA9IENvbG9yLmNsYW1wMDEodGhpcy5hICogYy5hKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIG11bHRpcGx5U2NhbGFyKHNjYWxhcjogbnVtYmVyKTogQ29sb3Ige1xuICAgICAgICB0aGlzLnIgPSBDb2xvci5jbGFtcDAxKHRoaXMuciAqIHNjYWxhcik7XG4gICAgICAgIHRoaXMuZyA9IENvbG9yLmNsYW1wMDEodGhpcy5nICogc2NhbGFyKTtcbiAgICAgICAgdGhpcy5iID0gQ29sb3IuY2xhbXAwMSh0aGlzLmIgKiBzY2FsYXIpO1xuICAgICAgICB0aGlzLmEgPSBDb2xvci5jbGFtcDAxKHRoaXMuYSAqIHNjYWxhcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBUb1VpbnQzMigpIHtcbiAgICAgICAgcmV0dXJuICgodGhpcy5hICogMjU1KSA8PCAyNCkgfCAoKHRoaXMuYiAqIDI1NSkgPDwgMTYpIHwgKCh0aGlzLmcgKiAyNTUpIDw8IDgpIHwgKHRoaXMuciAqIDI1NSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBGcm9tVWludDMyKHVpbnQzMjogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IoXG4gICAgICAgICAgICAodWludDMyICYgMHhGRikgLyAyNTUsXG4gICAgICAgICAgICAoKHVpbnQzMiA+PiA4KSAmIDB4RkYpIC8gMjU1LFxuICAgICAgICAgICAgKCh1aW50MzIgPj4gMTYpICYgMHhGRikgLyAyNTUsXG4gICAgICAgICAgICAoKHVpbnQzMiA+PiAyNCkgJiAweEZGKSAvIDI1NVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYWRkKGMxOiBDb2xvciwgYzI6IENvbG9yKTogQ29sb3Ige1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yKFxuICAgICAgICAgICAgQ29sb3IuY2xhbXAwMShjMS5yICsgYzIuciksXG4gICAgICAgICAgICBDb2xvci5jbGFtcDAxKGMxLmcgKyBjMi5nKSxcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYzEuYiArIGMyLmIpLFxuICAgICAgICAgICAgQ29sb3IuY2xhbXAwMShjMS5hICsgYzIuYSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHN1YnRyYWN0KGMxOiBDb2xvciwgYzI6IENvbG9yKTogQ29sb3Ige1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yKFxuICAgICAgICAgICAgQ29sb3IuY2xhbXAwMShjMS5yIC0gYzIuciksXG4gICAgICAgICAgICBDb2xvci5jbGFtcDAxKGMxLmcgLSBjMi5nKSxcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYzEuYiAtIGMyLmIpLFxuICAgICAgICAgICAgQ29sb3IuY2xhbXAwMShjMS5hIC0gYzIuYSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG11bHRpcGx5KGMxOiBDb2xvciwgYzI6IENvbG9yKTogQ29sb3Ige1xuICAgICAgICByZXR1cm4gbmV3IENvbG9yKFxuICAgICAgICAgICAgQ29sb3IuY2xhbXAwMShjMS5yICogYzIuciksXG4gICAgICAgICAgICBDb2xvci5jbGFtcDAxKGMxLmcgKiBjMi5nKSxcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYzEuYiAqIGMyLmIpLFxuICAgICAgICAgICAgQ29sb3IuY2xhbXAwMShjMS5hICogYzIuYSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG11bHRpcGx5U2NhbGFyKGM6IENvbG9yLCBzY2FsYXI6IG51bWJlcik6IENvbG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYy5yICogc2NhbGFyKSxcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYy5nICogc2NhbGFyKSxcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYy5iICogc2NhbGFyKSxcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYy5hICogc2NhbGFyKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbGVycChjMTogQ29sb3IsIGMyOiBDb2xvciwgdDogbnVtYmVyKTogQ29sb3Ige1xuICAgICAgICB0ID0gQ29sb3IuY2xhbXAwMSh0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYzEuciArIChjMi5yIC0gYzEucikgKiB0KSxcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYzEuZyArIChjMi5nIC0gYzEuZykgKiB0KSxcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYzEuYiArIChjMi5iIC0gYzEuYikgKiB0KSxcbiAgICAgICAgICAgIENvbG9yLmNsYW1wMDEoYzEuYSArIChjMi5hIC0gYzEuYSkgKiB0KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOminOiJsua3t+WQiOaWueazlVxuICAgICAqIOaUr+aMgeWkmuenjea3t+WQiOaooeW8j1xuICAgICAqL1xuICAgIC8vIHB1YmxpYyBzdGF0aWMgYmxlbmRDb2xvcnMoZGVzdDogQ29sb3IsIHNyYzogQ29sb3IsIG1vZGU6IEJsZW5kT3ApOiBDb2xvciB7XG4gICAgLy8gICAgIC8vIOaPkOWPluebruagh+minOiJsuWIhumHjyAoQVJHQuagvOW8jylcbiAgICAvLyAgICAgY29uc3QgZGVzdEEgPSBkZXN0LmE7XG4gICAgLy8gICAgIGNvbnN0IGRlc3RSID0gZGVzdC5yO1xuICAgIC8vICAgICBjb25zdCBkZXN0RyA9IGRlc3QuZztcbiAgICAvLyAgICAgY29uc3QgZGVzdEIgPSBkZXN0LmI7XG5cbiAgICAvLyAgICAgLy8g5o+Q5Y+W5rqQ6aKc6Imy5YiG6YePIChBUkdC5qC85byPKVxuICAgIC8vICAgICBjb25zdCBzcmNBID0gc3JjLmE7XG4gICAgLy8gICAgIGNvbnN0IHNyY1IgPSBzcmMucjtcbiAgICAvLyAgICAgY29uc3Qgc3JjRyA9IHNyYy5nO1xuICAgIC8vICAgICBjb25zdCBzcmNCID0gc3JjLmI7XG5cbiAgICAvLyAgICAgbGV0IHJlc3VsdEEsIHJlc3VsdFIsIHJlc3VsdEcsIHJlc3VsdEI7XG5cbiAgICAvLyAgICAgc3dpdGNoIChtb2RlKSB7XG4gICAgLy8gICAgICAgICBjYXNlIEJsZW5kT3AuQWxwaGFCbGVuZDpcbiAgICAvLyAgICAgICAgICAgICAvLyBBbHBoYSDmt7flkIggKOacgOW4uOeUqOeahOa3t+WQiOaooeW8jylcbiAgICAvLyAgICAgICAgICAgICBjb25zdCBhbHBoYSA9IHNyY0E7XG4gICAgLy8gICAgICAgICAgICAgY29uc3QgaW52QWxwaGEgPSAxIC0gYWxwaGE7XG5cbiAgICAvLyAgICAgICAgICAgICByZXN1bHRBID0gTWF0aC5taW4oMSwgZGVzdEEgKyBzcmNBIC0gKGRlc3RBICogc3JjQSkpO1xuICAgIC8vICAgICAgICAgICAgIHJlc3VsdFIgPSBzcmNSICogYWxwaGEgKyBkZXN0UiAqIGludkFscGhhO1xuICAgIC8vICAgICAgICAgICAgIHJlc3VsdEcgPSBzcmNHICogYWxwaGEgKyBkZXN0RyAqIGludkFscGhhO1xuICAgIC8vICAgICAgICAgICAgIHJlc3VsdEIgPSBzcmNCICogYWxwaGEgKyBkZXN0QiAqIGludkFscGhhO1xuICAgIC8vICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgLy8gICAgICAgICBjYXNlIEJsZW5kT3AuQWRkaXRpdmU6XG4gICAgLy8gICAgICAgICAgICAgLy8g5Yqg5rOV5re35ZCIICjpopzoibLlj6DliqApXG4gICAgLy8gICAgICAgICAgICAgcmVzdWx0QSA9IE1hdGgubWluKDEsIGRlc3RBICsgc3JjQSk7XG4gICAgLy8gICAgICAgICAgICAgcmVzdWx0UiA9IE1hdGgubWluKDEsIGRlc3RSICsgc3JjUik7XG4gICAgLy8gICAgICAgICAgICAgcmVzdWx0RyA9IE1hdGgubWluKDEsIGRlc3RHICsgc3JjRyk7XG4gICAgLy8gICAgICAgICAgICAgcmVzdWx0QiA9IE1hdGgubWluKDEsIGRlc3RCICsgc3JjQik7XG4gICAgLy8gICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAvLyAgICAgICAgIGNhc2UgQmxlbmRPcC5NdWx0aXBseTpcbiAgICAvLyAgICAgICAgICAgICAvLyDkuZjms5Xmt7flkIggKOminOiJsuebuOS5mClcbiAgICAvLyAgICAgICAgICAgICByZXN1bHRBID0gTWF0aC5taW4oMSwgZGVzdEEpO1xuICAgIC8vICAgICAgICAgICAgIHJlc3VsdFIgPSBkZXN0UiAqIHNyY1I7XG4gICAgLy8gICAgICAgICAgICAgcmVzdWx0RyA9IGRlc3RHICogc3JjRztcbiAgICAvLyAgICAgICAgICAgICByZXN1bHRCID0gZGVzdEIgKiBzcmNCO1xuICAgIC8vICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgLy8gICAgICAgICBjYXNlIEJsZW5kT3AuT2ZmOlxuICAgIC8vICAgICAgICAgZGVmYXVsdDpcbiAgICAvLyAgICAgICAgICAgICAvLyDnm7TmjqXmm7/mjaJcbiAgICAvLyAgICAgICAgICAgICByZXR1cm4gc3JjLmNsb25lKCk7XG4gICAgLy8gICAgIH1cblxuICAgIC8vICAgICAvLyDnu4TlkIjpopzoibLliIbph49cbiAgICAvLyAgICAgcmV0dXJuIG5ldyBDb2xvcihyZXN1bHRSLCByZXN1bHRHLCByZXN1bHRCLCByZXN1bHRBKTtcbiAgICAvLyB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBjbGFtcDAxKHZhbHVlOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdmFsdWUpKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gXCIuL1ZlY3RvcjRcIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi9WZWN0b3IzXCI7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSBcIi4vUXVhdGVybmlvblwiO1xuXG5leHBvcnQgY2xhc3MgTWF0cml4NHg0IHtcblxuICAgIHB1YmxpYyBtYXRyaXg6IEFycmF5PEFycmF5PG51bWJlcj4+ID0gbmV3IEFycmF5PEFycmF5PG51bWJlcj4+KCk7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY29sdW1uMDogVmVjdG9yNCwgY29sdW1uMTogVmVjdG9yNCwgY29sdW1uMjogVmVjdG9yNCwgY29sdW1uMzogVmVjdG9yNCk7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSA0KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCB2ID0gYXJndW1lbnRzW2ldIGFzIFZlY3RvcjQ7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRyaXhbaV0gPSBuZXcgQXJyYXk8bnVtYmVyPih2LngsIHYueSwgdi56LCB2LncpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdHJpeFtpXSA9IG5ldyBBcnJheTxudW1iZXI+KDAsIDAsIDAsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIGluZGV4IOihjFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRSb3coaW5kZXg6IG51bWJlcik6IFZlY3RvcjQge1xuICAgICAgICB2YXIgYyA9IHRoaXMubWF0cml4W2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KGNbMF0sIGNbMV0sIGNbMl0sIGNbM10pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBpbmRleCDliJdcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0Q29sdW1uKGluZGV4OiBudW1iZXIpOiBWZWN0b3I0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHRoaXMubWF0cml4WzBdW2luZGV4XSwgdGhpcy5tYXRyaXhbMV1baW5kZXhdLCB0aGlzLm1hdHJpeFsyXVtpbmRleF0sIHRoaXMubWF0cml4WzNdW2luZGV4XSk7XG4gICAgfVxuXG4gICAgcHVibGljIFNldFJvdyhpbmRleDogbnVtYmVyLCByb3c6IFZlY3RvcjQpIHtcbiAgICAgICAgdGhpcy5tYXRyaXhbaW5kZXhdWzBdID0gcm93Lng7XG4gICAgICAgIHRoaXMubWF0cml4W2luZGV4XVsxXSA9IHJvdy55O1xuICAgICAgICB0aGlzLm1hdHJpeFtpbmRleF1bMl0gPSByb3cuejtcbiAgICAgICAgdGhpcy5tYXRyaXhbaW5kZXhdWzNdID0gcm93Lnc7XG4gICAgfVxuXG4gICAgcHVibGljIFNldENvbHVtbihpbmRleDogbnVtYmVyLCBjb2x1bW46IFZlY3RvcjQpIHtcbiAgICAgICAgdGhpcy5tYXRyaXhbMF1baW5kZXhdID0gY29sdW1uLng7XG4gICAgICAgIHRoaXMubWF0cml4WzFdW2luZGV4XSA9IGNvbHVtbi55O1xuICAgICAgICB0aGlzLm1hdHJpeFsyXVtpbmRleF0gPSBjb2x1bW4uejtcbiAgICAgICAgdGhpcy5tYXRyaXhbM11baW5kZXhdID0gY29sdW1uLnc7XG4gICAgfVxuXG4gICAgcHVibGljIG11bHRpcGx5KG06IE1hdHJpeDR4NCk6IE1hdHJpeDR4NCB7XG4gICAgICAgIGxldCBsaHMgPSB0aGlzLm1hdHJpeDtcbiAgICAgICAgbGV0IHJocyA9IG0ubWF0cml4O1xuICAgICAgICBsZXQgbWF0cml4ID0gbmV3IE1hdHJpeDR4NCgpLm1hdHJpeDtcblxuICAgICAgICBtYXRyaXhbMF1bMF0gPSBsaHNbMF1bMF0gKiByaHNbMF1bMF0gKyBsaHNbMF1bMV0gKiByaHNbMV1bMF0gKyBsaHNbMF1bMl0gKiByaHNbMl1bMF0gKyBsaHNbMF1bM10gKiByaHNbM11bMF07XG4gICAgICAgIG1hdHJpeFswXVsxXSA9IGxoc1swXVswXSAqIHJoc1swXVsxXSArIGxoc1swXVsxXSAqIHJoc1sxXVsxXSArIGxoc1swXVsyXSAqIHJoc1syXVsxXSArIGxoc1swXVszXSAqIHJoc1szXVsxXTtcbiAgICAgICAgbWF0cml4WzBdWzJdID0gbGhzWzBdWzBdICogcmhzWzBdWzJdICsgbGhzWzBdWzFdICogcmhzWzFdWzJdICsgbGhzWzBdWzJdICogcmhzWzJdWzJdICsgbGhzWzBdWzNdICogcmhzWzNdWzJdO1xuICAgICAgICBtYXRyaXhbMF1bM10gPSBsaHNbMF1bMF0gKiByaHNbMF1bM10gKyBsaHNbMF1bMV0gKiByaHNbMV1bM10gKyBsaHNbMF1bMl0gKiByaHNbMl1bM10gKyBsaHNbMF1bM10gKiByaHNbM11bM107XG4gICAgICAgIG1hdHJpeFsxXVswXSA9IGxoc1sxXVswXSAqIHJoc1swXVswXSArIGxoc1sxXVsxXSAqIHJoc1sxXVswXSArIGxoc1sxXVsyXSAqIHJoc1syXVswXSArIGxoc1sxXVszXSAqIHJoc1szXVswXTtcbiAgICAgICAgbWF0cml4WzFdWzFdID0gbGhzWzFdWzBdICogcmhzWzBdWzFdICsgbGhzWzFdWzFdICogcmhzWzFdWzFdICsgbGhzWzFdWzJdICogcmhzWzJdWzFdICsgbGhzWzFdWzNdICogcmhzWzNdWzFdO1xuICAgICAgICBtYXRyaXhbMV1bMl0gPSBsaHNbMV1bMF0gKiByaHNbMF1bMl0gKyBsaHNbMV1bMV0gKiByaHNbMV1bMl0gKyBsaHNbMV1bMl0gKiByaHNbMl1bMl0gKyBsaHNbMV1bM10gKiByaHNbM11bMl07XG4gICAgICAgIG1hdHJpeFsxXVszXSA9IGxoc1sxXVswXSAqIHJoc1swXVszXSArIGxoc1sxXVsxXSAqIHJoc1sxXVszXSArIGxoc1sxXVsyXSAqIHJoc1syXVszXSArIGxoc1sxXVszXSAqIHJoc1szXVszXTtcbiAgICAgICAgbWF0cml4WzJdWzBdID0gbGhzWzJdWzBdICogcmhzWzBdWzBdICsgbGhzWzJdWzFdICogcmhzWzFdWzBdICsgbGhzWzJdWzJdICogcmhzWzJdWzBdICsgbGhzWzJdWzNdICogcmhzWzNdWzBdO1xuICAgICAgICBtYXRyaXhbMl1bMV0gPSBsaHNbMl1bMF0gKiByaHNbMF1bMV0gKyBsaHNbMl1bMV0gKiByaHNbMV1bMV0gKyBsaHNbMl1bMl0gKiByaHNbMl1bMV0gKyBsaHNbMl1bM10gKiByaHNbM11bMV07XG4gICAgICAgIG1hdHJpeFsyXVsyXSA9IGxoc1syXVswXSAqIHJoc1swXVsyXSArIGxoc1syXVsxXSAqIHJoc1sxXVsyXSArIGxoc1syXVsyXSAqIHJoc1syXVsyXSArIGxoc1syXVszXSAqIHJoc1szXVsyXTtcbiAgICAgICAgbWF0cml4WzJdWzNdID0gbGhzWzJdWzBdICogcmhzWzBdWzNdICsgbGhzWzJdWzFdICogcmhzWzFdWzNdICsgbGhzWzJdWzJdICogcmhzWzJdWzNdICsgbGhzWzJdWzNdICogcmhzWzNdWzNdO1xuICAgICAgICBtYXRyaXhbM11bMF0gPSBsaHNbM11bMF0gKiByaHNbMF1bMF0gKyBsaHNbM11bMV0gKiByaHNbMV1bMF0gKyBsaHNbM11bMl0gKiByaHNbMl1bMF0gKyBsaHNbM11bM10gKiByaHNbM11bMF07XG4gICAgICAgIG1hdHJpeFszXVsxXSA9IGxoc1szXVswXSAqIHJoc1swXVsxXSArIGxoc1szXVsxXSAqIHJoc1sxXVsxXSArIGxoc1szXVsyXSAqIHJoc1syXVsxXSArIGxoc1szXVszXSAqIHJoc1szXVsxXTtcbiAgICAgICAgbWF0cml4WzNdWzJdID0gbGhzWzNdWzBdICogcmhzWzBdWzJdICsgbGhzWzNdWzFdICogcmhzWzFdWzJdICsgbGhzWzNdWzJdICogcmhzWzJdWzJdICsgbGhzWzNdWzNdICogcmhzWzNdWzJdO1xuICAgICAgICBtYXRyaXhbM11bM10gPSBsaHNbM11bMF0gKiByaHNbMF1bM10gKyBsaHNbM11bMV0gKiByaHNbMV1bM10gKyBsaHNbM11bMl0gKiByaHNbMl1bM10gKyBsaHNbM11bM10gKiByaHNbM11bM107XG5cbiAgICAgICAgdGhpcy5tYXRyaXggPSBtYXRyaXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBtdWx0aXBseVZlY3RvcjModjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICBsZXQgcmVzID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgICAgbGV0IG0gPSB0aGlzLm1hdHJpeDtcblxuICAgICAgICByZXMueCA9IG1bMF1bMF0gKiB2LnggKyBtWzBdWzFdICogdi55ICsgbVswXVsyXSAqIHYuejtcbiAgICAgICAgcmVzLnkgPSBtWzFdWzBdICogdi54ICsgbVsxXVsxXSAqIHYueSArIG1bMV1bMl0gKiB2Lno7XG4gICAgICAgIHJlcy56ID0gbVsyXVswXSAqIHYueCArIG1bMl1bMV0gKiB2LnkgKyBtWzJdWzJdICogdi56O1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8g5b2TdyA9IDHml7bvvIzpvZDmrKHlnZDmoIcoeCwgeSwgeiwgMSnooajnpLogM0Qg56m66Ze05Lit55qE54K5KHgsIHksIHopXG4gICAgLy8g5b2TdyA9IDDml7bvvIzpvZDmrKHlnZDmoIcoeCwgeSwgeiwgMCnooajnpLogM0Qg56m66Ze05Lit55qE5pa55ZCR5ZCR6YeP77yI5peg5L2N572u5L+h5oGv77yJXG4gICAgcHVibGljIG11bHRpcGx5VmVjdG9yNCh2OiBWZWN0b3I0KTogVmVjdG9yNCB7XG4gICAgICAgIGxldCByZXMgPSBuZXcgVmVjdG9yNCgpO1xuICAgICAgICBsZXQgbSA9IHRoaXMubWF0cml4O1xuXG4gICAgICAgIHJlcy54ID0gbVswXVswXSAqIHYueCArIG1bMF1bMV0gKiB2LnkgKyBtWzBdWzJdICogdi56ICsgbVswXVszXSAqIHYudztcbiAgICAgICAgcmVzLnkgPSBtWzFdWzBdICogdi54ICsgbVsxXVsxXSAqIHYueSArIG1bMV1bMl0gKiB2LnogKyBtWzFdWzNdICogdi53O1xuICAgICAgICByZXMueiA9IG1bMl1bMF0gKiB2LnggKyBtWzJdWzFdICogdi55ICsgbVsyXVsyXSAqIHYueiArIG1bMl1bM10gKiB2Lnc7XG4gICAgICAgIHJlcy53ID0gbVszXVswXSAqIHYueCArIG1bM11bMV0gKiB2LnkgKyBtWzNdWzJdICogdi56ICsgbVszXVszXSAqIHYudztcblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRUcmFuc2xhdGUoKTogVmVjdG9yMyB7XG4gICAgICAgIGxldCBtID0gdGhpcy5tYXRyaXg7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhtWzBdWzNdLCBtWzFdWzNdLCBtWzJdWzNdKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0VHJhbnNsYXRlKHY6IFZlY3RvcjMpIHtcbiAgICAgICAgbGV0IG0gPSB0aGlzLm1hdHJpeDtcbiAgICAgICAgbVswXVszXSA9IHYueDtcbiAgICAgICAgbVsxXVszXSA9IHYueTtcbiAgICAgICAgbVsyXVszXSA9IHYuejtcbiAgICB9XG5cbiAgICAvLyBwdWJsaWMgZ2V0Um90YXRlKCk6IFZlY3RvcjMge1xuICAgIC8vICAgICBsZXQgbWF0ID0gdGhpcy5tYXRyaXg7XG5cbiAgICAvLyAgICAgbGV0IHggPSBNYXRoLmF0YW4yKG1hdFsxXVsyXSwgbWF0WzJdWzJdKTtcbiAgICAvLyAgICAgbGV0IHkgPSBNYXRoLmF0YW4yKC1tYXRbMF1bMl0sIE1hdGguc3FydChtYXRbMV1bMl0gKiBtYXRbMV1bMl0gKyBtYXRbMl1bMl0gKiBtYXRbMl1bMl0pKTtcbiAgICAvLyAgICAgbGV0IHogPSBNYXRoLmF0YW4yKG1hdFswXVsxXSwgbWF0WzBdWzBdKTtcblxuICAgIC8vICAgICByZXR1cm4gbmV3IFZlY3RvcjMoeCAvIE1hdGguUEkgKiAxODAsIHkgLyBNYXRoLlBJICogMTgwLCB6IC8gTWF0aC5QSSAqIDE4MCk7XG4gICAgLy8gfVxuXG4gICAgcHVibGljIGdldFJvdGF0ZSgpOiBRdWF0ZXJuaW9uIHtcbiAgICAgICAgLy/kuIDlrpropoHojrflj5bnuq/lh4DnmoTml4vovaznn6npmLXvvIzljbPljrvpmaTnvKnmlL7lgI3njodcbiAgICAgICAgbGV0IG1hdCA9IHRoaXMuZ2V0Um90YXRlTWF0cml4KCkubWF0cml4O1xuICAgICAgICBsZXQgcSA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cbiAgICAgICAgdmFyIHRyYWNlID0gbWF0WzBdWzBdICsgbWF0WzFdWzFdICsgbWF0WzJdWzJdOyAvLyBJIHJlbW92ZWQgKyAxLjBmOyBzZWUgZGlzY3Vzc2lvbiB3aXRoIEV0aGFuXG4gICAgICAgIHZhciBzID0gMDtcblxuICAgICAgICBpZiAodHJhY2UgPiAwKSB7Ly8gSSBjaGFuZ2VkIE1fRVBTSUxPTiB0byAwXG4gICAgICAgICAgICBzID0gMC41IC8gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKTtcbiAgICAgICAgICAgIHEudyA9IDAuMjUgLyBzO1xuICAgICAgICAgICAgcS54ID0gKG1hdFsyXVsxXSAtIG1hdFsxXVsyXSkgKiBzO1xuICAgICAgICAgICAgcS55ID0gKG1hdFswXVsyXSAtIG1hdFsyXVswXSkgKiBzO1xuICAgICAgICAgICAgcS56ID0gKG1hdFsxXVswXSAtIG1hdFswXVsxXSkgKiBzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1hdFswXVswXSA+IG1hdFsxXVsxXSAmJiBtYXRbMF1bMF0gPiBtYXRbMl1bMl0pIHtcbiAgICAgICAgICAgICAgICBzID0gMi4wICogTWF0aC5zcXJ0KDEuMCArIG1hdFswXVswXSAtIG1hdFsxXVsxXSAtIG1hdFsyXVsyXSk7XG4gICAgICAgICAgICAgICAgcS53ID0gKG1hdFsyXVsxXSAtIG1hdFsxXVsyXSkgLyBzO1xuICAgICAgICAgICAgICAgIHEueCA9IDAuMjUgKiBzO1xuICAgICAgICAgICAgICAgIHEueSA9IChtYXRbMF1bMV0gKyBtYXRbMV1bMF0pIC8gcztcbiAgICAgICAgICAgICAgICBxLnogPSAobWF0WzBdWzJdICsgbWF0WzJdWzBdKSAvIHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1hdFsxXVsxXSA+IG1hdFsyXVsyXSkge1xuICAgICAgICAgICAgICAgIHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbWF0WzFdWzFdIC0gbWF0WzBdWzBdIC0gbWF0WzJdWzJdKTtcbiAgICAgICAgICAgICAgICBxLncgPSAobWF0WzBdWzJdIC0gbWF0WzJdWzBdKSAvIHM7XG4gICAgICAgICAgICAgICAgcS54ID0gKG1hdFswXVsxXSArIG1hdFsxXVswXSkgLyBzO1xuICAgICAgICAgICAgICAgIHEueSA9IDAuMjUgKiBzO1xuICAgICAgICAgICAgICAgIHEueiA9IChtYXRbMV1bMl0gKyBtYXRbMl1bMV0pIC8gcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcyA9IDIuMCAqIE1hdGguc3FydCgxLjAgKyBtYXRbMl1bMl0gLSBtYXRbMF1bMF0gLSBtYXRbMV1bMV0pO1xuICAgICAgICAgICAgICAgIHEudyA9IChtYXRbMV1bMF0gLSBtYXRbMF1bMV0pIC8gcztcbiAgICAgICAgICAgICAgICBxLnggPSAobWF0WzBdWzJdICsgbWF0WzJdWzBdKSAvIHM7XG4gICAgICAgICAgICAgICAgcS55ID0gKG1hdFsxXVsyXSArIG1hdFsyXVsxXSkgLyBzO1xuICAgICAgICAgICAgICAgIHEueiA9IDAuMjUgKiBzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHE7XG4gICAgfVxuXG4gICAgcHVibGljIGdldFJvdGF0ZU1hdHJpeCgpOiBNYXRyaXg0eDQge1xuICAgICAgICAvL2h0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9kZXYvc3JjL21hdGgvTWF0cml4NC5qc1xuICAgICAgICAvL+WboOS4uuaXi+i9rOefqemYteavlOi+g+eJueauiu+8jOacieaXtuWAmeimgeWNleeLrOWkhOeQhu+8jOaJgOacieaLpeacieS4gOS4quaPkOWPluaWueazlVxuICAgICAgICAvL+aPkOWPluaWueW8j+W+iOeugOWNle+8jOWFiOiOt+WPlue8qeaUvuWAvO+8jOeEtuWQjuWIqeeUqOiOt+WPlue8qeaUvuWAvOeahOWOn+eQhu+8jOmAhuWQkemZpOWOu+e8qeaUvuWAvO+8jOWwseW+l+WIsOe6r+WHgOeahOaXi+i9rOefqemYtVxuICAgICAgICAvL+atpOaWueazleS4jeaUr+aMgeWPjeWwhOefqemYtVxuXG4gICAgICAgIHZhciBtYXQgPSBuZXcgTWF0cml4NHg0KCk7XG4gICAgICAgIHZhciB0ZSA9IG1hdC5tYXRyaXg7XG4gICAgICAgIHZhciBtZSA9IHRoaXMubWF0cml4O1xuXG4gICAgICAgIHZhciBzY2FsZSA9IHRoaXMuZ2V0U2NhbGUoKTtcbiAgICAgICAgdmFyIHNjYWxlWCA9IDEgLyBzY2FsZS54O1xuICAgICAgICB2YXIgc2NhbGVZID0gMSAvIHNjYWxlLnk7XG4gICAgICAgIHZhciBzY2FsZVogPSAxIC8gc2NhbGUuejtcblxuICAgICAgICB0ZVswXVswXSA9IG1lWzBdWzBdICogc2NhbGVYO1xuICAgICAgICB0ZVsxXVswXSA9IG1lWzFdWzBdICogc2NhbGVYO1xuICAgICAgICB0ZVsyXVswXSA9IG1lWzJdWzBdICogc2NhbGVYO1xuICAgICAgICB0ZVszXVswXSA9IDA7XG5cbiAgICAgICAgdGVbMF1bMV0gPSBtZVswXVsxXSAqIHNjYWxlWTtcbiAgICAgICAgdGVbMV1bMV0gPSBtZVsxXVsxXSAqIHNjYWxlWTtcbiAgICAgICAgdGVbMl1bMV0gPSBtZVsyXVsxXSAqIHNjYWxlWTtcbiAgICAgICAgdGVbM11bMV0gPSAwO1xuXG4gICAgICAgIHRlWzBdWzJdID0gbWVbMF1bMl0gKiBzY2FsZVo7XG4gICAgICAgIHRlWzFdWzJdID0gbWVbMV1bMl0gKiBzY2FsZVo7XG4gICAgICAgIHRlWzJdWzJdID0gbWVbMl1bMl0gKiBzY2FsZVo7XG4gICAgICAgIHRlWzNdWzJdID0gMDtcblxuICAgICAgICB0ZVswXVszXSA9IDA7XG4gICAgICAgIHRlWzFdWzNdID0gMDtcbiAgICAgICAgdGVbMl1bM10gPSAwO1xuICAgICAgICB0ZVszXVszXSA9IDE7XG5cbiAgICAgICAgcmV0dXJuIG1hdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RXVsZXJBbmdsZXMoKTogVmVjdG9yMyB7XG4gICAgICAgIC8vaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9ibG9iL2Rldi9zcmMvbWF0aC9NYXRyaXg0LmpzXG4gICAgICAgIC8v5LuO5peL6L2s55+p6Zi16YeM6I635Y+W5qyn5ouJ6KeSXG4gICAgICAgIC8v5b+F6aG75piv57qv5YeA55qE5peL6L2s55+p6Zi1XG5cbiAgICAgICAgdmFyIGFuZ2xlID0gbmV3IFZlY3RvcjMoKTtcblxuICAgICAgICB2YXIgdGUgPSB0aGlzLmdldFJvdGF0ZU1hdHJpeCgpLm1hdHJpeDtcbiAgICAgICAgdmFyIG0xMSA9IHRlWzBdWzBdLCBtMTIgPSB0ZVswXVsxXSwgbTEzID0gdGVbMF1bMl07XG4gICAgICAgIHZhciBtMjEgPSB0ZVsxXVswXSwgbTIyID0gdGVbMV1bMV0sIG0yMyA9IHRlWzFdWzJdO1xuICAgICAgICB2YXIgbTMxID0gdGVbMl1bMF0sIG0zMiA9IHRlWzJdWzFdLCBtMzMgPSB0ZVsyXVsyXTtcblxuICAgICAgICBtMTMgPSBtMTMgPiAxID8gMSA6IG0xMztcbiAgICAgICAgbTEzID0gbTEzIDwgLTEgPyAtMSA6IG0xMztcbiAgICAgICAgYW5nbGUueSA9IE1hdGguYXNpbihtMTMpO1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhtMTMpIDwgMC45OTk5OTk5KSB7XG4gICAgICAgICAgICBhbmdsZS54ID0gTWF0aC5hdGFuMigtbTIzLCBtMzMpO1xuICAgICAgICAgICAgYW5nbGUueiA9IE1hdGguYXRhbjIoLW0xMiwgbTExKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFuZ2xlLnggPSBNYXRoLmF0YW4yKG0zMiwgbTIyKTtcbiAgICAgICAgICAgIGFuZ2xlLnogPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKGFuZ2xlLnggLyBNYXRoLlBJICogMTgwLCBhbmdsZS55IC8gTWF0aC5QSSAqIDE4MCwgYW5nbGUueiAvIE1hdGguUEkgKiAxODApO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTY2FsZSgpOiBWZWN0b3IzIHtcbiAgICAgICAgbGV0IG0gPSB0aGlzLm1hdHJpeDtcbiAgICAgICAgbGV0IHYgPSBuZXcgVmVjdG9yMygpO1xuXG4gICAgICAgIHYueCA9IE1hdGguc3FydChtWzBdWzBdICogbVswXVswXSArIG1bMV1bMF0gKiBtWzFdWzBdICsgbVsyXVswXSAqIG1bMl1bMF0pO1xuICAgICAgICB2LnkgPSBNYXRoLnNxcnQobVswXVsxXSAqIG1bMF1bMV0gKyBtWzFdWzFdICogbVsxXVsxXSArIG1bMl1bMV0gKiBtWzJdWzFdKTtcbiAgICAgICAgdi56ID0gTWF0aC5zcXJ0KG1bMF1bMl0gKiBtWzBdWzJdICsgbVsxXVsyXSAqIG1bMV1bMl0gKyBtWzJdWzJdICogbVsyXVsyXSk7XG5cbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuXG4gICAgLy8g6L2s572u55+p6Zi1XG4gICAgcHVibGljIHRyYW5zcG9zZSgpOiBNYXRyaXg0eDQge1xuICAgICAgICBsZXQgbTEgPSB0aGlzLm1hdHJpeDtcbiAgICAgICAgdmFyIG0yID0gbmV3IE1hdHJpeDR4NCgpLm1hdHJpeDtcblxuICAgICAgICBtMlswXVswXSA9IG0xWzBdWzBdOyBtMlswXVsxXSA9IG0xWzFdWzBdOyBtMlswXVsyXSA9IG0xWzJdWzBdOyBtMlswXVszXSA9IG0xWzNdWzBdO1xuICAgICAgICBtMlsxXVswXSA9IG0xWzBdWzFdOyBtMlsxXVsxXSA9IG0xWzFdWzFdOyBtMlsxXVsyXSA9IG0xWzJdWzFdOyBtMlsxXVszXSA9IG0xWzNdWzFdO1xuICAgICAgICBtMlsyXVswXSA9IG0xWzBdWzJdOyBtMlsyXVsxXSA9IG0xWzFdWzJdOyBtMlsyXVsyXSA9IG0xWzJdWzJdOyBtMlsyXVszXSA9IG0xWzNdWzJdO1xuICAgICAgICBtMlszXVswXSA9IG0xWzBdWzNdOyBtMlszXVsxXSA9IG0xWzFdWzNdOyBtMlszXVsyXSA9IG0xWzJdWzNdOyBtMlszXVszXSA9IG0xWzNdWzNdO1xuXG4gICAgICAgIHRoaXMubWF0cml4ID0gbTI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyB0cmFuc2xhdGUocG9zOiBWZWN0b3IzKTogTWF0cml4NHg0IHtcbiAgICAgICAgbGV0IG0gPSBNYXRyaXg0eDQuZ2V0VHJhbnNsYXRlTWF0cml4KHBvcyk7XG4gICAgICAgIHRoaXMubWF0cml4ID0gbS5tdWx0aXBseSh0aGlzKS5tYXRyaXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyByb3RhdGUocTogUXVhdGVybmlvbik6IE1hdHJpeDR4NDtcbiAgICBwdWJsaWMgcm90YXRlKGV1bGVyQW5nbGVzOiBWZWN0b3IzKTogTWF0cml4NHg0O1xuICAgIHB1YmxpYyByb3RhdGUoYW5nbGU6IG51bWJlciwgYXhpczogVmVjdG9yMyk6IE1hdHJpeDR4NDtcbiAgICBwdWJsaWMgcm90YXRlKCk6IE1hdHJpeDR4NCB7XG4gICAgICAgIGxldCBtID0gbmV3IE1hdHJpeDR4NCgpO1xuXG4gICAgICAgIGlmIChhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBRdWF0ZXJuaW9uKSB7XG4gICAgICAgICAgICBtID0gTWF0cml4NHg0LmdldFJvdGF0ZU1hdHJpeEJ5UXVhdGVybmlvbihhcmd1bWVudHNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIFZlY3RvcjMpIHtcbiAgICAgICAgICAgIG0gPSBNYXRyaXg0eDQuZ2V0Um90YXRlTWF0cml4QnlFdWxlckFuZ2xlcyhhcmd1bWVudHNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbSA9IE1hdHJpeDR4NC5nZXRSb3RhdGVNYXRyaXhCeUF4aXMoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXRyaXggPSBtLm11bHRpcGx5KHRoaXMpLm1hdHJpeDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHNjYWxlKHM6IFZlY3RvcjMpOiBNYXRyaXg0eDQge1xuICAgICAgICBsZXQgbSA9IE1hdHJpeDR4NC5nZXRTY2FsZU1hdHJpeChzKTtcbiAgICAgICAgdGhpcy5tYXRyaXggPSBtLm11bHRpcGx5KHRoaXMpLm1hdHJpeDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGxvb2tBdCh0YXJnZXQ6IFZlY3RvcjMpOiBNYXRyaXg0eDQge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb29rUm90YXRpb24gbm90IGltcGxlbWVudGVkXCIpO1xuICAgIH1cblxuICAgIC8v6L2s5o2i5Yiw5pGE5b2x5py655yL5ZCR55qE55+p6Zi16YeMXG4gICAgcHVibGljIHRyYW5zZm9ybVRvTG9va0F0U3BhY2UoZXllOiBWZWN0b3IzLCB0YXJnZXRQb2ludDogVmVjdG9yMywgdXA6IFZlY3RvcjMgPSBWZWN0b3IzLlVQKTogTWF0cml4NHg0IHtcbiAgICAgICAgLy/ku47lk6rph4znnIvlkJHlk6rph4zvvIzkuZ/lj6/ku6XnkIbop6PkuLrmkYTlvbHmnLrop4bop5LvvIzljbPop4Llr5/nqbrpl7RcbiAgICAgICAgLy/oi6XopoHlj5jmjaLliLDmkYTlvbHmnLrnqbrpl7TvvIzlj6/ku6XlgYforr7mlbTkuKrop4Llr5/nqbrpl7Tku6XmkYTlvbHmnLrkvY3kuo7kuJbnlYzlnZDmoIfljp/ngrnvvIznhLblkI7lsIbmiYDmnInniankvZPmnJ3mkYTlvbHmnLrljp/lhYjlnKjkuJbnlYznqbrpl7TkuK3nmoTkvY3nva7lj43lkJHnp7vliqjljbPlj69cbiAgICAgICAgLy/lnKjnurjkuIrnlLvkuIvlm77lsLHmuIXmmbDkuoZcblxuICAgICAgICAvL+eUseS6jum7mOiupOefqemYteaYr1NSVOmhuuW6j+e7hOaIkOeahOWPmOaNouepuumXtO+8jOimgemAhuWQke+8jOWImeaYr1RSU+eahOmhuuW6j++8jOWNs+WFiOenu+WKqOWQjuaXi+i9rFxuICAgICAgICAvLzEu5ZCR5Y+N5pa55ZCR5bmz56e7XG4gICAgICAgIHRoaXMudHJhbnNsYXRlKG5ldyBWZWN0b3IzKC1leWUueCwgLWV5ZS55LCAtZXllLnopKTtcblxuICAgICAgICAvLzIu5ZCR5Y+N5pa55ZCR5peL6L2sXG4gICAgICAgIC8v5YWI6I635Y+W5pGE5b2x5LiW55WM6YOo5Z2Q5qCH6L20XG4gICAgICAgIHZhciB6QXhpcyA9IFZlY3RvcjMuZGlmZmVyZW5jZShleWUsIHRhcmdldFBvaW50KS5ub3JtYWxpemUoKTtcbiAgICAgICAgLy/lm6DkuLrmiJHku6zmmK/lj7PmiYvns7vnu5/vvIzopoHmsYJY77yM5YiZ5b+F6aG7euS5mHlcbiAgICAgICAgdmFyIHhBeGlzID0gVmVjdG9yMy5jcm9zcyh1cCwgekF4aXMpLm5vcm1hbGl6ZSgpO1xuICAgICAgICB2YXIgeUF4aXMgPSBWZWN0b3IzLmNyb3NzKHpBeGlzLCB4QXhpcykubm9ybWFsaXplKCk7XG4gICAgICAgIC8v5p6E5bu65pGE5b2x5py65Y+N5pa55ZCR5peL6L2s55+p6Zi1XG4gICAgICAgIHZhciBtYXQgPSBuZXcgTWF0cml4NHg0KFxuICAgICAgICAgICAgbmV3IFZlY3RvcjQoeEF4aXMpLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjQoeUF4aXMpLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjQoekF4aXMpLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjQoMCwgMCwgMCwgMSkpO1xuXG4gICAgICAgIHRoaXMubWF0cml4ID0gbWF0Lm11bHRpcGx5KHRoaXMpLm1hdHJpeDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGZydXN0dW0obGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyLCBib3R0b206IG51bWJlciwgdG9wOiBudW1iZXIsIG5lYXI6IG51bWJlciwgZmFyOiBudW1iZXIpOiBNYXRyaXg0eDQge1xuICAgICAgICBjb25zdCBybCA9IChyaWdodCAtIGxlZnQpXG4gICAgICAgIGNvbnN0IHRiID0gKHRvcCAtIGJvdHRvbSlcbiAgICAgICAgY29uc3QgZm4gPSAoZmFyIC0gbmVhcilcblxuICAgICAgICB2YXIgbWF0ID0gbmV3IE1hdHJpeDR4NChcbiAgICAgICAgICAgIG5ldyBWZWN0b3I0KChuZWFyICogMikgLyBybCwgMCwgKHJpZ2h0ICsgbGVmdCkgLyBybCwgMCksXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgwLCAobmVhciAqIDIpIC8gdGIsICh0b3AgKyBib3R0b20pIC8gdGIsIDApLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjQoMCwgMCwgLShmYXIgKyBuZWFyKSAvIGZuLCAtKGZhciAqIG5lYXIgKiAyKSAvIGZuKSxcbiAgICAgICAgICAgIG5ldyBWZWN0b3I0KDAsIDAsIC0xLCAwKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubWF0cml4ID0gbWF0Lm11bHRpcGx5KHRoaXMpLm1hdHJpeDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIG9ydGhvZ3JhcGhpYyhsZWZ0OiBudW1iZXIsIHJpZ2h0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCB0b3A6IG51bWJlciwgbmVhcjogbnVtYmVyLCBmYXI6IG51bWJlcik6IE1hdHJpeDR4NCB7XG4gICAgICAgIGNvbnN0IHJsID0gKHJpZ2h0IC0gbGVmdClcbiAgICAgICAgY29uc3QgdGIgPSAodG9wIC0gYm90dG9tKVxuICAgICAgICBjb25zdCBmbiA9IChmYXIgLSBuZWFyKVxuXG4gICAgICAgIHZhciBtYXQgPSBuZXcgTWF0cml4NHg0KFxuICAgICAgICAgICAgbmV3IFZlY3RvcjQoMiAvIHJsLCAwLCAwLCAtKGxlZnQgKyByaWdodCkgLyBybCksXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgwLCAyIC8gdGIsIDAsIC0odG9wICsgYm90dG9tKSAvIHRiKSxcbiAgICAgICAgICAgIG5ldyBWZWN0b3I0KDAsIDAsIC0yIC8gZm4sIC0oZmFyICsgbmVhcikgLyBmbiksXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgwLCAwLCAwLCAxKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubWF0cml4ID0gbWF0Lm11bHRpcGx5KHRoaXMpLm1hdHJpeDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIHBlcnNwZWN0aXZlKGZvdjogbnVtYmVyLCBhc3BlY3Q6IG51bWJlciwgbmVhcjogbnVtYmVyLCBmYXI6IG51bWJlcik6IE1hdHJpeDR4NCB7XG4gICAgICAgIGNvbnN0IGhmb3YgPSBmb3YgLyAxODAgKiBNYXRoLlBJIC8gMjtcbiAgICAgICAgY29uc3QgdGFuID0gTWF0aC50YW4oaGZvdik7XG5cbiAgICAgICAgdmFyIG1hdCA9IG5ldyBNYXRyaXg0eDQoXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgxIC8gKGFzcGVjdCAqIHRhbiksIDAsIDAsIDApLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjQoMCwgMSAvIHRhbiwgMCwgMCksXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgwLCAwLCAtKGZhciArIG5lYXIpIC8gKGZhciAtIG5lYXIpLCAtKDIgKiBmYXIgKiBuZWFyKSAvIChmYXIgLSBuZWFyKSksXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgwLCAwLCAtMSwgMClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm1hdHJpeCA9IG1hdC5tdWx0aXBseSh0aGlzKS5tYXRyaXg7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIOmAmui/h+KAi+KAi+S7o+aVsOS9meWtkOW8j+azle+8iENvZmFjdG9yIE1ldGhvZO+8ieKAi+KAiyDmnaXorqHnrpfkuIDkuKogNHg0IOaWuemYteeahOmAhuefqemYtVxuICAgIHB1YmxpYyBpbnZlcnQoKTogTWF0cml4NHg0IHtcbiAgICAgICAgdmFyIG1hdCA9IHRoaXMubWF0cml4O1xuXG4gICAgICAgIGNvbnN0IGEwMCA9IG1hdFswXVswXTtcbiAgICAgICAgY29uc3QgYTAxID0gbWF0WzBdWzFdO1xuICAgICAgICBjb25zdCBhMDIgPSBtYXRbMF1bMl07XG4gICAgICAgIGNvbnN0IGEwMyA9IG1hdFswXVszXTtcbiAgICAgICAgY29uc3QgYTEwID0gbWF0WzFdWzBdO1xuICAgICAgICBjb25zdCBhMTEgPSBtYXRbMV1bMV07XG4gICAgICAgIGNvbnN0IGExMiA9IG1hdFsxXVsyXTtcbiAgICAgICAgY29uc3QgYTEzID0gbWF0WzFdWzNdO1xuICAgICAgICBjb25zdCBhMjAgPSBtYXRbMl1bMF07XG4gICAgICAgIGNvbnN0IGEyMSA9IG1hdFsyXVsxXTtcbiAgICAgICAgY29uc3QgYTIyID0gbWF0WzJdWzJdO1xuICAgICAgICBjb25zdCBhMjMgPSBtYXRbMl1bM107XG4gICAgICAgIGNvbnN0IGEzMCA9IG1hdFszXVswXTtcbiAgICAgICAgY29uc3QgYTMxID0gbWF0WzNdWzFdO1xuICAgICAgICBjb25zdCBhMzIgPSBtYXRbM11bMl07XG4gICAgICAgIGNvbnN0IGEzMyA9IG1hdFszXVszXTtcblxuICAgICAgICBjb25zdCBkZXQwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMFxuICAgICAgICBjb25zdCBkZXQwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMFxuICAgICAgICBjb25zdCBkZXQwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMFxuICAgICAgICBjb25zdCBkZXQwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMVxuICAgICAgICBjb25zdCBkZXQwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMVxuICAgICAgICBjb25zdCBkZXQwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMlxuICAgICAgICBjb25zdCBkZXQwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMFxuICAgICAgICBjb25zdCBkZXQwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMFxuICAgICAgICBjb25zdCBkZXQwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMFxuICAgICAgICBjb25zdCBkZXQwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMVxuICAgICAgICBjb25zdCBkZXQxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMVxuICAgICAgICBjb25zdCBkZXQxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMlxuXG4gICAgICAgIGxldCBkZXQgPSAoZGV0MDAgKiBkZXQxMSAtIGRldDAxICogZGV0MTAgKyBkZXQwMiAqIGRldDA5ICsgZGV0MDMgKiBkZXQwOCAtIGRldDA0ICogZGV0MDcgKyBkZXQwNSAqIGRldDA2KTtcblxuICAgICAgICBpZiAoIWRldCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdHJpeDR4NCBpbnZlcnNlIGZhaWxlZCwgZGV0ZXJtaW5hbnQgaXMgMFwiKTtcbiAgICAgICAgICAgIC8vIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgICAgIG1hdFswXVswXSA9IChhMTEgKiBkZXQxMSAtIGExMiAqIGRldDEwICsgYTEzICogZGV0MDkpICogZGV0XG4gICAgICAgIG1hdFswXVsxXSA9ICgtYTAxICogZGV0MTEgKyBhMDIgKiBkZXQxMCAtIGEwMyAqIGRldDA5KSAqIGRldFxuICAgICAgICBtYXRbMF1bMl0gPSAoYTMxICogZGV0MDUgLSBhMzIgKiBkZXQwNCArIGEzMyAqIGRldDAzKSAqIGRldFxuICAgICAgICBtYXRbMF1bM10gPSAoLWEyMSAqIGRldDA1ICsgYTIyICogZGV0MDQgLSBhMjMgKiBkZXQwMykgKiBkZXRcbiAgICAgICAgbWF0WzFdWzBdID0gKC1hMTAgKiBkZXQxMSArIGExMiAqIGRldDA4IC0gYTEzICogZGV0MDcpICogZGV0XG4gICAgICAgIG1hdFsxXVsxXSA9IChhMDAgKiBkZXQxMSAtIGEwMiAqIGRldDA4ICsgYTAzICogZGV0MDcpICogZGV0XG4gICAgICAgIG1hdFsxXVsyXSA9ICgtYTMwICogZGV0MDUgKyBhMzIgKiBkZXQwMiAtIGEzMyAqIGRldDAxKSAqIGRldFxuICAgICAgICBtYXRbMV1bM10gPSAoYTIwICogZGV0MDUgLSBhMjIgKiBkZXQwMiArIGEyMyAqIGRldDAxKSAqIGRldFxuICAgICAgICBtYXRbMl1bMF0gPSAoYTEwICogZGV0MTAgLSBhMTEgKiBkZXQwOCArIGExMyAqIGRldDA2KSAqIGRldFxuICAgICAgICBtYXRbMl1bMV0gPSAoLWEwMCAqIGRldDEwICsgYTAxICogZGV0MDggLSBhMDMgKiBkZXQwNikgKiBkZXRcbiAgICAgICAgbWF0WzJdWzJdID0gKGEzMCAqIGRldDA0IC0gYTMxICogZGV0MDIgKyBhMzMgKiBkZXQwMCkgKiBkZXRcbiAgICAgICAgbWF0WzJdWzNdID0gKC1hMjAgKiBkZXQwNCArIGEyMSAqIGRldDAyIC0gYTIzICogZGV0MDApICogZGV0XG4gICAgICAgIG1hdFszXVswXSA9ICgtYTEwICogZGV0MDkgKyBhMTEgKiBkZXQwNyAtIGExMiAqIGRldDA2KSAqIGRldFxuICAgICAgICBtYXRbM11bMV0gPSAoYTAwICogZGV0MDkgLSBhMDEgKiBkZXQwNyArIGEwMiAqIGRldDA2KSAqIGRldFxuICAgICAgICBtYXRbM11bMl0gPSAoLWEzMCAqIGRldDAzICsgYTMxICogZGV0MDEgLSBhMzIgKiBkZXQwMCkgKiBkZXRcbiAgICAgICAgbWF0WzNdWzNdID0gKGEyMCAqIGRldDAzIC0gYTIxICogZGV0MDEgKyBhMjIgKiBkZXQwMCkgKiBkZXRcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9GbG9hdDMyTGlzdCgpOiBGbG9hdDMyTGlzdCB7XG4gICAgICAgIGxldCBtID0gdGhpcy5tYXRyaXg7XG4gICAgICAgIC8v55Sx5LqOT3BlbkdM5piv5YiX5bqP5a2Y5YKo77yM5omA5Lul6ZyA6KaB6L2s572u5LiA5LiL55+p6Zi1XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAgICAgICAgIG1bMF1bMF0sIG1bMV1bMF0sIG1bMl1bMF0sIG1bM11bMF0sXG4gICAgICAgICAgICBtWzBdWzFdLCBtWzFdWzFdLCBtWzJdWzFdLCBtWzNdWzFdLFxuICAgICAgICAgICAgbVswXVsyXSwgbVsxXVsyXSwgbVsyXVsyXSwgbVszXVsyXSxcbiAgICAgICAgICAgIG1bMF1bM10sIG1bMV1bM10sIG1bMl1bM10sIG1bM11bM11cbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsb25lKCk6IE1hdHJpeDR4NCB7XG4gICAgICAgIHJldHVybiBuZXcgTWF0cml4NHg0KFxuICAgICAgICAgICAgdGhpcy5nZXRSb3coMCksXG4gICAgICAgICAgICB0aGlzLmdldFJvdygxKSxcbiAgICAgICAgICAgIHRoaXMuZ2V0Um93KDIpLFxuICAgICAgICAgICAgdGhpcy5nZXRSb3coMyksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgU1RBVElDIEZVTkNUSU9OU1xuICAgICAqL1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXRUUlNNYXRyaXgocG9zOiBWZWN0b3IzLCBxdWF0OiBRdWF0ZXJuaW9uLCBzY2FsZTogVmVjdG9yMyk6IE1hdHJpeDR4NCB7XG4gICAgICAgIGxldCB0bSA9IE1hdHJpeDR4NC5nZXRUcmFuc2xhdGVNYXRyaXgocG9zKTtcbiAgICAgICAgbGV0IHJtID0gTWF0cml4NHg0LmdldFJvdGF0ZU1hdHJpeEJ5UXVhdGVybmlvbihxdWF0KTtcbiAgICAgICAgbGV0IHNtID0gTWF0cml4NHg0LmdldFNjYWxlTWF0cml4KHNjYWxlKTtcblxuICAgICAgICAvL+W/hemhu+S4peagvOaMieeFp+WFiFNjYWxl77yM5YaNUm90YXRl77yM5YaNVHJhbnNsYXRl55qE6aG65bqP77yM5ZCm5YiZ5b6X5Yiw55qE57uT5p6c6IKv5a6a5piv5LiN5ruh5oSP55qEXG4gICAgICAgIC8v5L6L5aaC5pyJ5LiA5LiqMVgx5q2j5pa55b2i5Zyo5Y6f54K577yM5oiR5Lus5oOz6KaB5b6X5Yiw5LiA5LiqMVgy77yM5bm25LiU5pac5ZCRNDXCsO+8jOiAjOS4lOemu+WdkOagh+WOn+eCuTHkuKrljZXkvY3lpIRcbiAgICAgICAgLy/lpoLmnpzlhYjml4vovazvvIzlho3nvKnmlL7nmoTor53vvIzml4vovazmlrnlkJHmmK/lr7nkuobvvIzkvYbmmK/miJHku6zmmK/lsIbml4vovazlkI40NcKw55qE5q2j5pa55b2i55qEWei9tOaLieS8uDLlgI3vvIzlvpfliLDnmoTmmK/kuIDkuKrooqvmi4nplb/nmoToj7HlvaJcbiAgICAgICAgLy/lpoLmnpzlhYjlubPnp7vvvIzlho3ml4vovaznmoTor53vvIzlm6DkuLrmiJHku6zml4vovazpg73mmK/nu5XnnYDlnZDmoIfljp/ngrnnmoTvvIznu5Pmnpzoh6rnhLbmmK/mraPmlrnlvaLkuI3mmK/oh6rouqvml4vovaw0NcKw77yM6ICM5piv57uV552A5Y6f54K55peL6L2sXG4gICAgICAgIHJldHVybiB0bS5tdWx0aXBseShybS5tdWx0aXBseShzbSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0VHJhbnNsYXRlTWF0cml4KHBvczogVmVjdG9yMyk6IE1hdHJpeDR4NCB7XG4gICAgICAgIGxldCByZXN1bHQgPSBuZXcgTWF0cml4NHg0KCk7XG4gICAgICAgIGxldCBtID0gcmVzdWx0Lm1hdHJpeDtcblxuICAgICAgICBtWzBdWzBdID0gMTsgbVswXVsxXSA9IDA7IG1bMF1bMl0gPSAwOyBtWzBdWzNdID0gcG9zLng7XG4gICAgICAgIG1bMV1bMF0gPSAwOyBtWzFdWzFdID0gMTsgbVsxXVsyXSA9IDA7IG1bMV1bM10gPSBwb3MueTtcbiAgICAgICAgbVsyXVswXSA9IDA7IG1bMl1bMV0gPSAwOyBtWzJdWzJdID0gMTsgbVsyXVszXSA9IHBvcy56O1xuICAgICAgICBtWzNdWzBdID0gMDsgbVszXVsxXSA9IDA7IG1bM11bMl0gPSAwOyBtWzNdWzNdID0gMTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0Um90YXRlTWF0cml4QnlRdWF0ZXJuaW9uKHE6IFF1YXRlcm5pb24pOiBNYXRyaXg0eDQge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IE1hdHJpeDR4NCgpO1xuICAgICAgICBsZXQgbSA9IHJlc3VsdC5tYXRyaXg7XG5cbiAgICAgICAgbGV0IG51bSA9IHEueCAqIDI7XG4gICAgICAgIGxldCBudW0yID0gcS55ICogMjtcbiAgICAgICAgbGV0IG51bTMgPSBxLnogKiAyO1xuICAgICAgICBsZXQgbnVtNCA9IHEueCAqIG51bTtcbiAgICAgICAgbGV0IG51bTUgPSBxLnkgKiBudW0yO1xuICAgICAgICBsZXQgbnVtNiA9IHEueiAqIG51bTM7XG4gICAgICAgIGxldCBudW03ID0gcS54ICogbnVtMjtcbiAgICAgICAgbGV0IG51bTggPSBxLnggKiBudW0zO1xuICAgICAgICBsZXQgbnVtOSA9IHEueSAqIG51bTM7XG4gICAgICAgIGxldCBudW0xMCA9IHEudyAqIG51bTtcbiAgICAgICAgbGV0IG51bTExID0gcS53ICogbnVtMjtcbiAgICAgICAgbGV0IG51bTEyID0gcS53ICogbnVtMztcblxuICAgICAgICBtWzBdWzBdID0gMSAtIChudW01ICsgbnVtNik7XG4gICAgICAgIG1bMV1bMF0gPSBudW03ICsgbnVtMTI7XG4gICAgICAgIG1bMl1bMF0gPSBudW04IC0gbnVtMTE7XG4gICAgICAgIG1bM11bMF0gPSAwO1xuICAgICAgICBtWzBdWzFdID0gbnVtNyAtIG51bTEyO1xuICAgICAgICBtWzFdWzFdID0gMSAtIChudW00ICsgbnVtNik7XG4gICAgICAgIG1bMl1bMV0gPSBudW05ICsgbnVtMTA7XG4gICAgICAgIG1bM11bMV0gPSAwO1xuICAgICAgICBtWzBdWzJdID0gbnVtOCArIG51bTExO1xuICAgICAgICBtWzFdWzJdID0gbnVtOSAtIG51bTEwO1xuICAgICAgICBtWzJdWzJdID0gMSAtIChudW00ICsgbnVtNSk7XG4gICAgICAgIG1bM11bMl0gPSAwO1xuICAgICAgICBtWzBdWzNdID0gMDtcbiAgICAgICAgbVsxXVszXSA9IDA7XG4gICAgICAgIG1bMl1bM10gPSAwO1xuICAgICAgICBtWzNdWzNdID0gMTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0Um90YXRlTWF0cml4QnlFdWxlckFuZ2xlcyhlOiBWZWN0b3IzLCBvcmRlcjogc3RyaW5nID0gXCJYWVpcIik6IE1hdHJpeDR4NCB7XG4gICAgICAgIC8v6YCa6L+H5qyn5ouJ6KeS6I635Y+W5peL6L2s55+p6Zi1XG4gICAgICAgIC8v5YWI5YiG5Yir6I635Y+WWFla6L205LiK55qE5peL6L2s55+p6Zi177yM54S25ZCO5ZCI5bm26LW35p2lXG4gICAgICAgIC8v5rOo5oSP77ya5peL6L2s6L2055qE6aG65bqP5YWI5ZCO5LiN5ZCM77yM5Lya5Ye6546w5LiN5ZCM55qE57uT5p6c77yM5Zug5q2k5b+F6aG76KaB5oyH5a6a5peL6L2s6aG65bqPXG4gICAgICAgIC8vaHR0cDovL3BsYW5uaW5nLmNzLnVpdWMuZWR1L25vZGUxMDIuaHRtbFxuICAgICAgICAvL2h0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL21hdGgvRXVsZXIub3JkZXJcbiAgICAgICAgdmFyIHggPSBNYXRyaXg0eDQuZ2V0Um90YXRlTWF0cml4QnlBeGlzKGUueCwgVmVjdG9yMy5SSUdIVCk7XG4gICAgICAgIHZhciB5ID0gTWF0cml4NHg0LmdldFJvdGF0ZU1hdHJpeEJ5QXhpcyhlLnksIFZlY3RvcjMuVVApO1xuICAgICAgICB2YXIgeiA9IE1hdHJpeDR4NC5nZXRSb3RhdGVNYXRyaXhCeUF4aXMoZS56LCBWZWN0b3IzLkZPUldBUkQpO1xuXG4gICAgICAgIHN3aXRjaCAob3JkZXIpIHtcbiAgICAgICAgICAgIGNhc2UgXCJYWVpcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gei5tdWx0aXBseSh5Lm11bHRpcGx5KHgpKTtcbiAgICAgICAgICAgIGNhc2UgXCJYWllcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geS5tdWx0aXBseSh6Lm11bHRpcGx5KHgpKTtcbiAgICAgICAgICAgIGNhc2UgXCJZWFpcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gei5tdWx0aXBseSh4Lm11bHRpcGx5KHkpKTtcbiAgICAgICAgICAgIGNhc2UgXCJZWlhcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geC5tdWx0aXBseSh6Lm11bHRpcGx5KHkpKTtcbiAgICAgICAgICAgIGNhc2UgXCJaWFlcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geS5tdWx0aXBseSh4Lm11bHRpcGx5KHopKTtcbiAgICAgICAgICAgIGNhc2UgXCJaWVhcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geC5tdWx0aXBseSh5Lm11bHRpcGx5KHopKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlJvdGF0aW9uIG9yZGVyIGVycm9yLCBtdXN0IGJlIHNpbWlsYXIgdG8gJ1hZWidcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHoubXVsdGlwbHkoeS5tdWx0aXBseSh4KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldFJvdGF0ZU1hdHJpeEJ5QXhpcyhhbmdsZTogbnVtYmVyLCBheGlzOiBWZWN0b3IzKTogTWF0cml4NHg0IHtcbiAgICAgICAgdmFyIG91dCA9IG5ldyBNYXRyaXg0eDQoKTtcbiAgICAgICAgdmFyIG0gPSBvdXQubWF0cml4O1xuICAgICAgICB2YXIgeCA9IGF4aXMueCwgeSA9IGF4aXMueSwgeiA9IGF4aXMuejtcbiAgICAgICAgdmFyIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xuICAgICAgICB2YXIgcyA9IDAsIGMgPSAwLCB0ID0gMDtcblxuICAgICAgICBhbmdsZSA9IE1hdGguUEkgKiBhbmdsZSAvIDE4MDtcbiAgICAgICAgbGVuID0gMSAvIGxlbjtcbiAgICAgICAgeCAqPSBsZW47XG4gICAgICAgIHkgKj0gbGVuO1xuICAgICAgICB6ICo9IGxlbjtcbiAgICAgICAgcyA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgYyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICAgICAgdCA9IDEgLSBjO1xuICAgICAgICBtWzBdWzBdID0geCAqIHggKiB0ICsgYztcbiAgICAgICAgbVsxXVswXSA9IHkgKiB4ICogdCArIHogKiBzO1xuICAgICAgICBtWzJdWzBdID0geiAqIHggKiB0IC0geSAqIHM7XG4gICAgICAgIG1bM11bMF0gPSAwO1xuICAgICAgICBtWzBdWzFdID0geCAqIHkgKiB0IC0geiAqIHM7XG4gICAgICAgIG1bMV1bMV0gPSB5ICogeSAqIHQgKyBjO1xuICAgICAgICBtWzJdWzFdID0geiAqIHkgKiB0ICsgeCAqIHM7XG4gICAgICAgIG1bM11bMV0gPSAwO1xuICAgICAgICBtWzBdWzJdID0geCAqIHogKiB0ICsgeSAqIHM7XG4gICAgICAgIG1bMV1bMl0gPSB5ICogeiAqIHQgLSB4ICogcztcbiAgICAgICAgbVsyXVsyXSA9IHogKiB6ICogdCArIGM7XG4gICAgICAgIG1bM11bMl0gPSAwO1xuICAgICAgICBtWzBdWzNdID0gMDtcbiAgICAgICAgbVsxXVszXSA9IDA7XG4gICAgICAgIG1bMl1bM10gPSAwO1xuICAgICAgICBtWzNdWzNdID0gMTtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldFNjYWxlTWF0cml4KHM6IFZlY3RvcjMpOiBNYXRyaXg0eDQge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IE1hdHJpeDR4NCgpO1xuICAgICAgICBsZXQgbSA9IHJlc3VsdC5tYXRyaXg7XG5cbiAgICAgICAgbVswXVswXSA9IHMueDsgbVswXVsxXSA9IDA7IG1bMF1bMl0gPSAwOyBtWzBdWzNdID0gMDtcbiAgICAgICAgbVsxXVswXSA9IDA7IG1bMV1bMV0gPSBzLnk7IG1bMV1bMl0gPSAwOyBtWzFdWzNdID0gMDtcbiAgICAgICAgbVsyXVswXSA9IDA7IG1bMl1bMV0gPSAwOyBtWzJdWzJdID0gcy56OyBtWzJdWzNdID0gMDtcbiAgICAgICAgbVszXVswXSA9IDA7IG1bM11bMV0gPSAwOyBtWzNdWzJdID0gMDsgbVszXVszXSA9IDE7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHBlcnNwZWN0aXZlKGZvdjogbnVtYmVyLCBhc3BlY3Q6IG51bWJlciwgbmVhcjogbnVtYmVyLCBmYXI6IG51bWJlcik6IE1hdHJpeDR4NCB7XG4gICAgICAgIGNvbnN0IGZvdlJhZCA9IGZvdiAvIDE4MCAqIE1hdGguUEk7XG4gICAgICAgIGNvbnN0IHRhbkhhbGZGb3YgPSBNYXRoLnRhbihmb3ZSYWQgLyAyKTtcbiAgICAgICAgY29uc3QgbWF0ID0gbmV3IE1hdHJpeDR4NChcbiAgICAgICAgICAgIG5ldyBWZWN0b3I0KDEgLyAoYXNwZWN0ICogdGFuSGFsZkZvdiksIDAsIDAsIDApLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjQoMCwgMSAvIHRhbkhhbGZGb3YsIDAsIDApLFxuICAgICAgICAgICAgLy8g5rex5bqm6K6h566X56ym5Y+377ya5a+55LqO55yL5ZCRK1rnmoTnm7jmnLrvvIzov5Hoo4HliarpnaLlnKggeiA9IG5lYXIsIOi/nOijgeWJqumdouWcqCB6ID0gZmFyXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgwLCAwLCAoZmFyICsgbmVhcikgLyAoZmFyIC0gbmVhciksIC0yICogZmFyICogbmVhciAvIChmYXIgLSBuZWFyKSksXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgwLCAwLCAxLCAwKVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbWF0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgb3J0aG9ncmFwaGljKGxlZnQ6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIHRvcDogbnVtYmVyLCBuZWFyOiBudW1iZXIsIGZhcjogbnVtYmVyKTogTWF0cml4NHg0IHtcbiAgICAgICAgY29uc3QgcmwgPSAocmlnaHQgLSBsZWZ0KVxuICAgICAgICBjb25zdCB0YiA9ICh0b3AgLSBib3R0b20pXG4gICAgICAgIGNvbnN0IGZuID0gKGZhciAtIG5lYXIpXG5cbiAgICAgICAgdmFyIG1hdCA9IG5ldyBNYXRyaXg0eDQoXG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgyIC8gcmwsIDAsIDAsIC0obGVmdCArIHJpZ2h0KSAvIHJsKSwgIC8vIFjovbTnvKnmlL7kuI7lubPnp7tcbiAgICAgICAgICAgIG5ldyBWZWN0b3I0KDAsIDIgLyB0YiwgMCwgLSh0b3AgKyBib3R0b20pIC8gdGIpLCAgLy8gWei9tOe8qeaUvuS4juW5s+enu1xuICAgICAgICAgICAgbmV3IFZlY3RvcjQoMCwgMCwgMiAvIGZuLCAtKGZhciArIG5lYXIpIC8gZm4pLCAgICAvLyBa6L2057yp5pS+5LiO5bmz56e7XG4gICAgICAgICAgICBuZXcgVmVjdG9yNCgwLCAwLCAwLCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOm9kOasoeWIhumHj1xuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbWF0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGlkZW50aXR5KCk6IE1hdHJpeDR4NCB7XG4gICAgICAgIGxldCBtID0gbmV3IE1hdHJpeDR4NCgpO1xuICAgICAgICBtLm1hdHJpeFswXVswXSA9IDE7XG4gICAgICAgIG0ubWF0cml4WzFdWzFdID0gMTtcbiAgICAgICAgbS5tYXRyaXhbMl1bMl0gPSAxO1xuICAgICAgICBtLm1hdHJpeFszXVszXSA9IDE7XG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYWRkKG0xOiBNYXRyaXg0eDQsIG0yOiBNYXRyaXg0eDQpOiBNYXRyaXg0eDQge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IE1hdHJpeDR4NCgpO1xuICAgICAgICBsZXQgbSA9IHJlc3VsdC5tYXRyaXg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDQ7IGorKykge1xuICAgICAgICAgICAgICAgIG1baV1bal0gPSBtMS5tYXRyaXhbaV1bal0gKyBtMi5tYXRyaXhbaV1bal07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHN1YnRyYWN0KG0xOiBNYXRyaXg0eDQsIG0yOiBNYXRyaXg0eDQpOiBNYXRyaXg0eDQge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IE1hdHJpeDR4NCgpO1xuICAgICAgICBsZXQgbSA9IHJlc3VsdC5tYXRyaXg7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDQ7IGorKykge1xuICAgICAgICAgICAgICAgIG1baV1bal0gPSBtMS5tYXRyaXhbaV1bal0gLSBtMi5tYXRyaXhbaV1bal07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG11bHRpcGx5U2NhbGFyKG06IE1hdHJpeDR4NCwgc2NhbGFyOiBudW1iZXIpOiBNYXRyaXg0eDQge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbmV3IE1hdHJpeDR4NCgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA0OyBqKyspIHtcbiAgICAgICAgICAgICAgICBtW2ldW2pdID0gbS5tYXRyaXhbaV1bal0gKiBzY2FsYXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGxlcnAobTE6IE1hdHJpeDR4NCwgbTI6IE1hdHJpeDR4NCwgdDogbnVtYmVyKTogTWF0cml4NHg0IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBNYXRyaXg0eDQoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNDsgaisrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lm1hdHJpeFtpXVtqXSA9IG0xLm1hdHJpeFtpXVtqXSArIChtMi5tYXRyaXhbaV1bal0gLSBtMS5tYXRyaXhbaV1bal0pICogdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn0iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4vVmVjdG9yM1wiO1xuXG4vKlxuICAgIOW5s+mdouaWueeoi+aOqOWvvO+8mlxuICAgIOW5s+mdouaWueeoiyBheCArIGJ5ICsgY3ogKyBkID0gMCDnmoTmjqjlr7zlj6/ku6XpgJrov4cg4oCc5rOV5ZCR6YeP5LiO5bmz6Z2i5Z6C55u04oCdIOeahOaguOW/g+aAp+i0qOadpeWujOaIkO+8jOatpemqpOWmguS4i++8mlxuXG4gICAgMS4g6K6+5a6a5bey55+l5p2h5Lu2XG4gICAgLSDorr7lubPpnaLkuIrku7vmhI/kuIDngrnkuLogUCh4LCB5LCB6KVxuICAgIC0g6K6+5bmz6Z2i55qE5rOV5ZCR6YeP5Li6IG4gPSAoYSwgYiwgYynvvIjlnoLnm7Tkuo7lubPpnaLnmoTlkJHph4/vvIlcbiAgICAtIOiuvuW5s+mdouS4iuS4gOS4quWbuuWumueCueS4uiBQ4oKAKHjigoAsIHnigoAsIHrigoApXG5cbiAgICAyLiDliKnnlKjlkJHph4/lnoLnm7TnmoTmgKfotKhcbiAgICDlubPpnaLkuIrnmoTlkJHph48gUOKCgFAgPSAoeCAtIHjigoAsIHkgLSB54oKALCB6IC0geuKCgCkg5LiO5rOV5ZCR6YePIG4g5Z6C55u077yM5Zug5q2k5a6D5Lus55qE54K556ev5Li6IDDvvJpuIMK3IFDigoBQID0gMFxuXG4gICAgMy4g5bGV5byA54K556ev5bm25pW055CGXG4gICAg5Luj5YWl54K556ev5YWs5byP77yaYSh4IC0geOKCgCkgKyBiKHkgLSB54oKAKSArIGMoeiAtIHrigoApID0gMFxuXG4gICAg5bGV5byA5ZCO77yaYXggKyBieSArIGN6IC0gKGF44oKAICsgYnnigoAgKyBjeuKCgCkgPSAwXG5cbiAgICA0LiDlrprkuYnluLjmlbAgZFxuICAgIOS7pCBkID0gLSAoYXjigoAgKyBieeKCgCArIGN64oKAKe+8iOWboCBQ4oKAIOaYr+W5s+mdouS4iueahOWbuuWumueCue+8jOaVhSBkIOS4uuW4uOaVsO+8ie+8jOS7o+WFpeS4iuW8j+WNs+W+l+W5s+mdouaWueeoi++8mmF4ICsgYnkgKyBjeiArIGQgPSAwXG5cblxuICAgIOW5s+mdouWIsOWOn+eCuei3neemu+aOqOWvvO+8mlxuICAgIOimgeaOqOWvvOW5s+mdouWIsOWOn+eCueeahOi3neemu++8jOWPr+e7k+WQiCBkID0gLShheOKCgCArIGJ54oKAICsgY3rigoApIOWSjOWQkemHj+aKleW9seeahOWOn+eQhu+8jOatpemqpOWmguS4i++8mlxuXG4gICAgMS4g5piO56Gu5bey55+l5YWz57O7XG4gICAg5bmz6Z2i5pa556iL77yaYXggKyBieSArIGN6ICsgZCA9IDBcbiAgICDlubPpnaLkuIrlm7rlrprngrkgUOKCgCh44oKALCB54oKALCB64oKAKSDmu6HotrPvvJpheOKCgCArIGJ54oKAICsgY3rigoAgKyBkID0gMO+8jOWNsyBkID0gLShheOKCgCArIGJ54oKAICsgY3rigoApXG4gICAg5Y6f54K5IE8oMCwwLDApIOWIsOW5s+mdoueahOi3neemu++8jOetieS6juWQkemHjyBPUOKCgO+8iOS7juWOn+eCueWIsOW5s+mdouS4iueCuSBQ4oKAIOeahOWQkemHj++8ieWcqOazleWQkemHjyBuID0gKGEsYixjKSDkuIrnmoTmipXlvbHplb/luqZcblxuICAgIDIuIOiuoeeul+WQkemHj+aKleW9semVv+W6plxuICAgIOWQkemHjyBPUOKCgCA9ICh44oKALCB54oKALCB64oKAKe+8jOWug+WcqOazleWQkemHjyBuIOS4iueahOaKleW9semVv+W6puWFrOW8j+S4uu+8mlxuICAgIOaKleW9semVv+W6piA9IHxPUOKCgCDCtyBufCAvIHxufFxuICAgIOWIhuWtkO+8muWQkemHj+eCueenr+eahOe7neWvueWAvCB8T1DigoAgwrcgbnwgPSB8YXjigoAgKyBieeKCgCArIGN64oKAfFxuICAgIOWIhuavje+8muazleWQkemHj+eahOaooemVvyB8bnwgPSDiiJooYcKyICsgYsKyICsgY8KyKVxuXG4gICAgMy4g5Luj5YWlIGQg55qE6KGo6L6+5byPXG4gICAg55SxIGQgPSAtKGF44oKAICsgYnnigoAgKyBjeuKCgCnvvIzlj6/lvpcgfGF44oKAICsgYnnigoAgKyBjeuKCgHwgPSB8LWR8ID0gfGR877yM5Luj5YWl5oqV5b2x6ZW/5bqm5YWs5byP77yaXG4gICAg5bmz6Z2i5Yiw5Y6f54K555qE6Led56a7ID0gfGR8IC8g4oiaKGHCsiArIGLCsiArIGPCsilcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYW5lIHtcbiAgICAvKipcbiAgICAgKiDlubPpnaLmlrnnqIvvvJpheCArIGJ5ICsgY3ogKyBkID0gMFxuICAgICAqIOW5s+mdouS7u+aEj+eCue+8mih4LCB5LCB6KVxuICAgICAqIOW5s+mdouazleWQkemHj++8mihhLCBiLCBjKVxuICAgICAqIOWIsOWOn+eCueeahOi3neemuyA9IHxkfCDDtyDiiJooYcKyICsgYsKyICsgY8KyKVxuICAgICAqIEBwYXJhbSBhIOW5s+mdouazleWQkemHj1jliIbph49cbiAgICAgKiBAcGFyYW0gYiDlubPpnaLms5XlkJHph49Z5YiG6YePXG4gICAgICogQHBhcmFtIGMg5bmz6Z2i5rOV5ZCR6YePWuWIhumHj1xuICAgICAqIEBwYXJhbSBkIOWGs+WumuW5s+mdouS4jiDigJzlnZDmoIfljp/ngrnnmoTot53nprvigJ3vvIxkIOeahCDmraPotJ8g6KGo56S65bmz6Z2i5ZyoIOKAnOazleWQkemHj+aWueWQkeKAnSDkuIrnm7jlr7nkuo7ljp/ngrnnmoTkvY3nva5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGE6IG51bWJlcixcbiAgICAgICAgcHVibGljIGI6IG51bWJlcixcbiAgICAgICAgcHVibGljIGM6IG51bWJlcixcbiAgICAgICAgcHVibGljIGQ6IG51bWJlclxuICAgICkgeyB9XG5cbiAgICAvKipcbiAgICAgKiDlvZLkuIDljJblubPpnaLvvIjnoa7kv53ms5XlkJHph4/plb/luqbkuLox77yM5L+d6K+B6Led56a76K6h566X57K+5bqm77yJXG4gICAgICovXG4gICAgcHVibGljIG5vcm1hbGl6ZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsTGVuZ3RoID0gTWF0aC5zcXJ0KHRoaXMuYSAqKiAyICsgdGhpcy5iICoqIDIgKyB0aGlzLmMgKiogMik7XG4gICAgICAgIGlmIChub3JtYWxMZW5ndGggPCBOdW1iZXIuRVBTSUxPTikgcmV0dXJuOyAvLyDpgb/lhY3pmaTku6UwXG5cbiAgICAgICAgdGhpcy5hIC89IG5vcm1hbExlbmd0aDtcbiAgICAgICAgdGhpcy5iIC89IG5vcm1hbExlbmd0aDtcbiAgICAgICAgdGhpcy5jIC89IG5vcm1hbExlbmd0aDtcbiAgICAgICAgdGhpcy5kIC89IG5vcm1hbExlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDorqHnrpfngrnliLDlubPpnaLnmoTot53nprvvvIjnlKjkuo7op4bplKXkvZPliZTpmaTmo4DmtYvvvIlcbiAgICAgKiBAcGFyYW0gcG9pbnQg5LiW55WM56m66Ze05Lit55qE54K5XG4gICAgICogQHJldHVybnMg6Led56a777yI5q2j5pWw77ya54K55Zyo5bmz6Z2i5q2j6Z2i77yb6LSf5pWw77ya54K55Zyo5bmz6Z2i5Y+N6Z2i77ybMO+8mueCueWcqOW5s+mdouS4iu+8iVxuICAgICAqL1xuICAgIHB1YmxpYyBkaXN0YW5jZVRvUG9pbnQocG9pbnQ6IFZlY3RvcjMpOiBudW1iZXIge1xuICAgICAgICAvKlxuICAgICAgICAgICAg6KaB5o6o5a+856m66Ze05Lit5Lu75oSP54K55Yiw5bmz6Z2i55qE6Led56a75YWs5byP77yM5Y+v5Z+65LqOIOKAnOWQkemHj+aKleW9seKAnSDnmoTlh6DkvZXljp/nkIbvvIznu5PlkIjlubPpnaLmlrnnqIvnmoTmgKfotKjov5vooYzmjqjlr7zvvIzmraXpqqTlpoLkuIvvvJpcblxuICAgICAgICAgICAg5bey55+l5p2h5Lu2XG4gICAgICAgICAgICDlubPpnaLmlrnnqIvvvJpheCArIGJ5ICsgY3ogKyBkID0gMO+8iOazleWQkemHj+S4uiBuID0gKGEsIGIsIGMp77yJXG4gICAgICAgICAgICDlubPpnaLkuIrku7vmhI/kuIDngrnvvJpQ4oKAKHjigoAsIHnigoAsIHrigoAp77yI5ruh6Laz5bmz6Z2i5pa556iL77yaYXjigoAgKyBieeKCgCArIGN64oKAICsgZCA9IDDvvIlcbiAgICAgICAgICAgIOepuumXtOS4reS7u+aEj+S4gOeCue+8mlAoeCwgeSwgeinvvIjmsYLor6XngrnliLDlubPpnaLnmoTot53nprvvvIlcblxuICAgICAgICAgICAg5o6o5a+85qC45b+D77ya6Led56a7ID0g5ZCR6YeP5Zyo5rOV5ZCR6YeP5LiK55qE5oqV5b2x6ZW/5bqmXG4gICAgICAgICAgICDku7vmhI/ngrkgUCDliLDlubPpnaLnmoTot53nprvvvIznrYnkuo7lkJHph48gUOKCgFAg5Zyo5bmz6Z2i5rOV5ZCR6YePIG4g5LiK55qE5oqV5b2x6ZW/5bqm77yI5Zug5rOV5ZCR6YeP5Z6C55u05LqO5bmz6Z2i77yM5q2k5oqV5b2x6ZW/5bqm5Y2z5Li654K55Yiw5bmz6Z2i55qE5pyA55+t6Led56a777yJ44CCXG5cbiAgICAgICAgICAgIOWQkemHjyBQ4oKAUCDnmoTlnZDmoIfvvJpcbiAgICAgICAgICAgIFDigoBQID0gKHggLSB44oKALCB5IC0geeKCgCwgeiAtIHrigoApXG5cbiAgICAgICAgICAgIOaKleW9semVv+W6puWFrOW8j++8mlxuICAgICAgICAgICAg5ZCR6YeP5Zyo5rOV5ZCR6YeP5LiK55qE5oqV5b2x6ZW/5bqmID0gfFDigoBQIMK3IG58IC8gfG58XG4gICAgICAgICAgICDvvIjliIblrZDkuLrlkJHph4/ngrnnp6/nmoTnu53lr7nlgLzvvIzliIbmr43kuLrms5XlkJHph4/nmoTmqKHplb/vvIlcblxuICAgICAgICAgICAg5Luj5YWl6K6h566X5bm25YyW566AXG4gICAgICAgICAgICDorqHnrpfliIblrZDvvIjngrnnp6/nmoTnu53lr7nlgLzvvInvvJpcbiAgICAgICAgICAgIFDigoBQIMK3IG4gPSBhKHggLSB44oKAKSArIGIoeSAtIHnigoApICsgYyh6IC0geuKCgClcbiAgICAgICAgICAgIOWxleW8gOWQju+8mlxuICAgICAgICAgICAgPSBheCArIGJ5ICsgY3ogLSAoYXjigoAgKyBieeKCgCArIGN64oKAKVxuICAgICAgICAgICAg55Sx5bmz6Z2i5pa556iL5Y+v55+lIGF44oKAICsgYnnigoAgKyBjeuKCgCA9IC1k77yM5Luj5YWl5b6X77yaXG4gICAgICAgICAgICBQ4oKAUCDCtyBuID0gYXggKyBieSArIGN6ICsgZFxuICAgICAgICAgICAg5Y+W57ud5a+55YC877yafFDigoBQIMK3IG58ID0gfGF4ICsgYnkgKyBjeiArIGR8XG5cbiAgICAgICAgICAgIOiuoeeul+WIhuavje+8iOazleWQkemHj+eahOaooemVv++8ie+8mlxuICAgICAgICAgICAgfG58ID0g4oiaKGHCsiArIGLCsiArIGPCsilcblxuICAgICAgICAgICAg5ZCI5bm25b6X6Led56a75YWs5byP77yaXG4gICAgICAgICAgICDngrnliLDlubPpnaLnmoTot53nprsgPSB8YXggKyBieSArIGN6ICsgZHwgLyDiiJooYcKyICsgYsKyICsgY8KyKVxuICAgICAgICAgKi9cbiAgICAgICAgcmV0dXJuIHRoaXMuYSAqIHBvaW50LnggKyB0aGlzLmIgKiBwb2ludC55ICsgdGhpcy5jICogcG9pbnQueiArIHRoaXMuZDtcbiAgICB9XG59IiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuL1ZlY3RvcjNcIjtcbmltcG9ydCB7IE1hdHJpeDR4NCB9IGZyb20gXCIuL01hdHJpeDR4NFwiO1xuXG5leHBvcnQgY2xhc3MgUXVhdGVybmlvbiB7XG4gICAgcHVibGljIHg6IG51bWJlciA9IDA7XG4gICAgcHVibGljIHk6IG51bWJlciA9IDA7XG4gICAgcHVibGljIHo6IG51bWJlciA9IDA7XG4gICAgcHVibGljIHc6IG51bWJlciA9IDA7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgdzogbnVtYmVyKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoYW5nbGU6IG51bWJlciwgYXhpczogVmVjdG9yMyk7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGV1bGVyOiBWZWN0b3IzKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDQpIHtcbiAgICAgICAgICAgIHRoaXMueCA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIHRoaXMueSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHRoaXMueiA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgICAgIHRoaXMudyA9IGFyZ3VtZW50c1szXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgIHRoaXMucm90YXRlQXJvdW5kKGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZXVsZXJBbmdsZXMgPSBhcmd1bWVudHNbMF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLnogPSAwO1xuICAgICAgICAgICAgdGhpcy53ID0gMTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZXVsZXJBbmdsZXMoKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiBNYXRyaXg0eDQuZ2V0Um90YXRlTWF0cml4QnlRdWF0ZXJuaW9uKHRoaXMpLmdldEV1bGVyQW5nbGVzKCk7XG5cbiAgICAgICAgLy8g5oiW5LiL6Z2i55u05o6l6YCa6L+H5LiJ6KeS5Ye95pWw5YWs5byP5o+Q5Y+W5qyn5ouJ6KeS77yM5peg6ZyA55+p6Zi1XG4gICAgICAgIC8vIC8vIOWbm+WFg+aVsOi9rFhZWumhuuW6j+asp+aLieinku+8iHJvbGwsIHBpdGNoLCB5YXfvvIlcbiAgICAgICAgLy8gLy8g5peL6L2s6aG65bqP77ya5YWI57uVWOi9tChyb2xsKe+8jOWGjee7lVnovbQocGl0Y2gp77yM5pyA5ZCO57uVWui9tCh5YXcpXG4gICAgICAgIC8vIC8vIOiuoeeul+WQhOWIhumHj+W5s+aWue+8iOeUqOS6juWHj+WwkemHjeWkjeiuoeeul++8iVxuICAgICAgICAvLyBjb25zdCBxeDIgPSB0aGlzLnggKiB0aGlzLng7XG4gICAgICAgIC8vIGNvbnN0IHF5MiA9IHRoaXMueSAqIHRoaXMueTtcbiAgICAgICAgLy8gY29uc3QgcXoyID0gdGhpcy56ICogdGhpcy56O1xuICAgICAgICAvLyAvLyBYWVrpobrluo/nmoTovazmjaLlhazlvI/vvIjnu5PmnpzkuLrlvKfluqbvvIlcbiAgICAgICAgLy8gY29uc3Qgcm9sbCA9IE1hdGguYXRhbjIoMiAqICh0aGlzLncgKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnopLCAxIC0gMiAqIChxeDIgKyBxeTIpKTtcbiAgICAgICAgLy8gY29uc3QgcGl0Y2ggPSBNYXRoLmFzaW4oMiAqICh0aGlzLncgKiB0aGlzLnkgLSB0aGlzLnogKiB0aGlzLngpKTtcbiAgICAgICAgLy8gY29uc3QgeWF3ID0gTWF0aC5hdGFuMigyICogKHRoaXMudyAqIHRoaXMueiArIHRoaXMueCAqIHRoaXMueSksIDEgLSAyICogKHF5MiArIHF6MikpO1xuICAgICAgICAvLyAvLyDovazmjaLkuLrop5LluqbvvIjlj6/pgInvvIzmoLnmja7pnIDopoHkv53nlZnvvIlcbiAgICAgICAgLy8gY29uc3Qgcm9sbERlZyA9IHJvbGwgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICAvLyBjb25zdCBwaXRjaERlZyA9IHBpdGNoICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgLy8gY29uc3QgeWF3RGVnID0geWF3ICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgLy8gcmV0dXJuIG5ldyBWZWN0b3IzKHJvbGxEZWcsIHBpdGNoRGVnLCB5YXdEZWcpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgZXVsZXJBbmdsZXMoZTogVmVjdG9yMykge1xuICAgICAgICB2YXIgcSA9IE1hdHJpeDR4NC5nZXRSb3RhdGVNYXRyaXhCeUV1bGVyQW5nbGVzKGUpLmdldFJvdGF0ZSgpO1xuICAgICAgICB0aGlzLncgPSBxLnc7XG4gICAgICAgIHRoaXMueCA9IHEueDtcbiAgICAgICAgdGhpcy55ID0gcS55O1xuICAgICAgICB0aGlzLnogPSBxLno7XG5cbiAgICAgICAgLy8g5oiW5LiL6Z2i55u05o6l6YCa6L+H5LiJ6KeS5Ye95pWw5YWs5byP6K6h566X5Zub5YWD5pWw5YiG6YeP77yM5peg6ZyA55+p6Zi1XG4gICAgICAgIC8vIC8vIFhZWumhuuW6j+eahOasp+aLieinku+8iHJvbGwsIHBpdGNoLCB5YXfvvInovazlm5vlhYPmlbBcbiAgICAgICAgLy8gLy8g5peL6L2s6aG65bqP77ya5YWI57uVWOi9tChyb2xsKe+8jOWGjee7lVnovbQocGl0Y2gp77yM5pyA5ZCO57uVWui9tCh5YXcpXG4gICAgICAgIC8vIGNvbnN0IHJvbGwgPSBlLnggKiBNYXRoLlBJIC8gMTgwOyAgLy8gWOi9tOaXi+i9rO+8iHJvbGzvvInvvIzop5LluqbovazlvKfluqZcbiAgICAgICAgLy8gY29uc3QgcGl0Y2ggPSBlLnkgKiBNYXRoLlBJIC8gMTgwOyAvLyBZ6L205peL6L2s77yIcGl0Y2jvvInvvIzop5LluqbovazlvKfluqZcbiAgICAgICAgLy8gY29uc3QgeWF3ID0gZS56ICogTWF0aC5QSSAvIDE4MDsgICAvLyBa6L205peL6L2s77yIeWF377yJ77yM6KeS5bqm6L2s5byn5bqmXG4gICAgICAgIC8vIC8vIOiuoeeul+WNiuinkueahOS4ieinkuWHveaVsOWAvFxuICAgICAgICAvLyBjb25zdCBjb3NSb2xsID0gTWF0aC5jb3Mocm9sbCAvIDIpO1xuICAgICAgICAvLyBjb25zdCBzaW5Sb2xsID0gTWF0aC5zaW4ocm9sbCAvIDIpO1xuICAgICAgICAvLyBjb25zdCBjb3NQaXRjaCA9IE1hdGguY29zKHBpdGNoIC8gMik7XG4gICAgICAgIC8vIGNvbnN0IHNpblBpdGNoID0gTWF0aC5zaW4ocGl0Y2ggLyAyKTtcbiAgICAgICAgLy8gY29uc3QgY29zWWF3ID0gTWF0aC5jb3MoeWF3IC8gMik7XG4gICAgICAgIC8vIGNvbnN0IHNpbllhdyA9IE1hdGguc2luKHlhdyAvIDIpO1xuICAgICAgICAvLyAvLyBYWVrpobrluo/nmoTlm5vlhYPmlbDovazmjaLlhazlvI9cbiAgICAgICAgLy8gdGhpcy53ID0gY29zUm9sbCAqIGNvc1BpdGNoICogY29zWWF3ICsgc2luUm9sbCAqIHNpblBpdGNoICogc2luWWF3O1xuICAgICAgICAvLyB0aGlzLnggPSBzaW5Sb2xsICogY29zUGl0Y2ggKiBjb3NZYXcgLSBjb3NSb2xsICogc2luUGl0Y2ggKiBzaW5ZYXc7XG4gICAgICAgIC8vIHRoaXMueSA9IGNvc1JvbGwgKiBzaW5QaXRjaCAqIGNvc1lhdyArIHNpblJvbGwgKiBjb3NQaXRjaCAqIHNpbllhdztcbiAgICAgICAgLy8gdGhpcy56ID0gY29zUm9sbCAqIGNvc1BpdGNoICogc2luWWF3IC0gc2luUm9sbCAqIHNpblBpdGNoICogY29zWWF3O1xuICAgIH1cblxuICAgIHB1YmxpYyByb3RhdGVBcm91bmQoYW5nbGU6IG51bWJlciwgYXhpczogVmVjdG9yMyk6IFF1YXRlcm5pb24ge1xuICAgICAgICBsZXQgcSA9IFF1YXRlcm5pb24uYW5nbGVBeGlzKGFuZ2xlLCBheGlzKTtcbiAgICAgICAgdGhpcy54ID0gcS54O1xuICAgICAgICB0aGlzLnkgPSBxLnk7XG4gICAgICAgIHRoaXMueiA9IHEuejtcbiAgICAgICAgdGhpcy53ID0gcS53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEB6aCDlkJHph4/lm5vlhYPmlbDkuZjms5VcbiAgICAqL1xuICAgIHB1YmxpYyB0cmFuc2Zvcm1RdWF0KGE6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICAgICAgLy8gYmVuY2htYXJrczogaHR0cDovL2pzcGVyZi5jb20vcXVhdGVybmlvbi10cmFuc2Zvcm0tVmVjMy1pbXBsZW1lbnRhdGlvbnNcblxuICAgICAgICBsZXQgb3V0ID0gbmV3IFZlY3RvcjMoKTtcbiAgICAgICAgbGV0IHEgPSB0aGlzO1xuXG4gICAgICAgIC8vIGNhbGN1bGF0ZSBxdWF0ICogdmVjXG4gICAgICAgIGNvbnN0IGl4ID0gcS53ICogYS54ICsgcS55ICogYS56IC0gcS56ICogYS55O1xuICAgICAgICBjb25zdCBpeSA9IHEudyAqIGEueSArIHEueiAqIGEueCAtIHEueCAqIGEuejtcbiAgICAgICAgY29uc3QgaXogPSBxLncgKiBhLnogKyBxLnggKiBhLnkgLSBxLnkgKiBhLng7XG4gICAgICAgIGNvbnN0IGl3ID0gLXEueCAqIGEueCAtIHEueSAqIGEueSAtIHEueiAqIGEuejtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG4gICAgICAgIG91dC54ID0gaXggKiBxLncgKyBpdyAqIC1xLnggKyBpeSAqIC1xLnogLSBpeiAqIC1xLnk7XG4gICAgICAgIG91dC55ID0gaXkgKiBxLncgKyBpdyAqIC1xLnkgKyBpeiAqIC1xLnggLSBpeCAqIC1xLno7XG4gICAgICAgIG91dC56ID0gaXogKiBxLncgKyBpdyAqIC1xLnogKyBpeCAqIC1xLnkgLSBpeSAqIC1xLng7XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgcHVibGljIGNsb25lKCk6IFF1YXRlcm5pb24ge1xuICAgICAgICByZXR1cm4gbmV3IFF1YXRlcm5pb24odGhpcy54LCB0aGlzLnksIHRoaXMueiwgdGhpcy53KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAemgg5qOA5p+l5Zub5YWD5pWw5piv5ZCm55u4562JXG4gICAgICovXG4gICAgcHVibGljIGVxdWFscyhxOiBRdWF0ZXJuaW9uKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGVwc2lsb24gPSAxZS02O1xuICAgICAgICByZXR1cm4gTWF0aC5hYnModGhpcy54IC0gcS54KSA8IGVwc2lsb24gJiYgXG4gICAgICAgICAgICAgICBNYXRoLmFicyh0aGlzLnkgLSBxLnkpIDwgZXBzaWxvbiAmJiBcbiAgICAgICAgICAgICAgIE1hdGguYWJzKHRoaXMueiAtIHEueikgPCBlcHNpbG9uICYmIFxuICAgICAgICAgICAgICAgTWF0aC5hYnModGhpcy53IC0gcS53KSA8IGVwc2lsb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHpoIOWbm+WFg+aVsOeQg+mdouaPkuWAvFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgc2xlcnAoYTogUXVhdGVybmlvbiwgYjogUXVhdGVybmlvbiwgdDogbnVtYmVyKTogUXVhdGVybmlvbiB7XG4gICAgICAgIC8vIGJlbmNobWFya3M6XG4gICAgICAgIC8vICAgIGh0dHA6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tc2xlcnAtaW1wbGVtZW50YXRpb25zXG5cbiAgICAgICAgbGV0IG91dCA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cbiAgICAgICAgbGV0IHNjYWxlMCA9IDA7XG4gICAgICAgIGxldCBzY2FsZTEgPSAwO1xuXG4gICAgICAgIC8vIGNhbGMgY29zaW5lXG4gICAgICAgIGxldCBjb3NvbSA9IGEueCAqIGIueCArIGEueSAqIGIueSArIGEueiAqIGIueiArIGEudyAqIGIudztcbiAgICAgICAgLy8gYWRqdXN0IHNpZ25zIChpZiBuZWNlc3NhcnkpXG4gICAgICAgIGlmIChjb3NvbSA8IDAuMCkge1xuICAgICAgICAgICAgY29zb20gPSAtY29zb207XG4gICAgICAgICAgICBiLnggPSAtYi54O1xuICAgICAgICAgICAgYi55ID0gLWIueTtcbiAgICAgICAgICAgIGIueiA9IC1iLno7XG4gICAgICAgICAgICBiLncgPSAtYi53O1xuICAgICAgICB9XG4gICAgICAgIC8vIGNhbGN1bGF0ZSBjb2VmZmljaWVudHNcbiAgICAgICAgaWYgKCgxLjAgLSBjb3NvbSkgPiAwLjAwMDAwMSkge1xuICAgICAgICAgICAgLy8gc3RhbmRhcmQgY2FzZSAoc2xlcnApXG4gICAgICAgICAgICBjb25zdCBvbWVnYSA9IE1hdGguYWNvcyhjb3NvbSk7XG4gICAgICAgICAgICBjb25zdCBzaW5vbSA9IE1hdGguc2luKG9tZWdhKTtcbiAgICAgICAgICAgIHNjYWxlMCA9IE1hdGguc2luKCgxLjAgLSB0KSAqIG9tZWdhKSAvIHNpbm9tO1xuICAgICAgICAgICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIG9tZWdhKSAvIHNpbm9tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZVxuICAgICAgICAgICAgLy8gIC4uLiBzbyB3ZSBjYW4gZG8gYSBsaW5lYXIgaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgc2NhbGUwID0gMS4wIC0gdDtcbiAgICAgICAgICAgIHNjYWxlMSA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FsY3VsYXRlIGZpbmFsIHZhbHVlc1xuICAgICAgICBvdXQueCA9IHNjYWxlMCAqIGEueCArIHNjYWxlMSAqIGIueDtcbiAgICAgICAgb3V0LnkgPSBzY2FsZTAgKiBhLnkgKyBzY2FsZTEgKiBiLnk7XG4gICAgICAgIG91dC56ID0gc2NhbGUwICogYS56ICsgc2NhbGUxICogYi56O1xuICAgICAgICBvdXQudyA9IHNjYWxlMCAqIGEudyArIHNjYWxlMSAqIGIudztcblxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZG90KGE6IFF1YXRlcm5pb24sIGI6IFF1YXRlcm5pb24pOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gYS54ICogYi54ICsgYS55ICogYi55ICsgYS56ICogYi56ICsgYS53ICogYi53O1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYW5nbGVBeGlzKGFuZ2xlOiBudW1iZXIsIGF4aXM6IFZlY3RvcjMpOiBRdWF0ZXJuaW9uIHtcbiAgICAgICAgbGV0IHJlcyA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cbiAgICAgICAgYW5nbGUgPSBNYXRoLlBJICogYW5nbGUgLyAxODA7XG4gICAgICAgIGFuZ2xlICo9IDAuNTtcbiAgICAgICAgY29uc3Qgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuXG4gICAgICAgIHJlcy54ID0gYXhpcy54ICogc2luO1xuICAgICAgICByZXMueSA9IGF4aXMueSAqIHNpbjtcbiAgICAgICAgcmVzLnogPSBheGlzLnogKiBzaW47XG4gICAgICAgIHJlcy53ID0gTWF0aC5jb3MoYW5nbGUpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Yib5bu65LiA5Liq5peL6L2s77yM5L2/54mp5L2T5pyd5ZCR55uu5qCH5pa55ZCRXG4gICAgICogQHBhcmFtIGRpcmVjdGlvbiDnm67moIfmlrnlkJHlkJHph4/vvIjkuJbnlYznqbrpl7TvvInvvIzpnIDopoHlvZLkuIDljJZcbiAgICAgKiBAcGFyYW0gdXAg5LiK5pa55ZCR5ZCR6YeP77yI5LiW55WM56m66Ze077yJ77yM6buY6K6k5Li6KDAsMSwwKVxuICAgICAqIEByZXR1cm5zIOaXi+i9rOWbm+WFg+aVsFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgTG9va1JvdGF0aW9uKGRpcmVjdGlvbjogVmVjdG9yMywgdXA6IFZlY3RvcjMgPSBWZWN0b3IzLlVQKTogUXVhdGVybmlvbiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvb2tSb3RhdGlvbiBub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgaWRlbnRpdHkoKTogUXVhdGVybmlvbiB7XG4gICAgICAgIHJldHVybiBuZXcgUXVhdGVybmlvbigwLCAwLCAwLCAxKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuL1ZlY3RvcjNcIjsgLy8g5YGH6K6+55qE5ZCR6YeP57G7XG5cbmV4cG9ydCBjbGFzcyBSYXkge1xuICAgIHB1YmxpYyBvcmlnaW46IFZlY3RvcjM7XG4gICAgcHVibGljIGRpcmVjdGlvbjogVmVjdG9yMztcblxuICAgIC8qKlxuICAgICAqIOaehOmAoOS4gOadoeWwhOe6v1xuICAgICAqIEBwYXJhbSBvcmlnaW4g5bCE57q/6LW354K5XG4gICAgICogQHBhcmFtIGRpcmVjdGlvbiDlsITnur/mlrnlkJHvvIjpgJrluLjlupTmmK/lvZLkuIDljJbnmoTljZXkvY3lkJHph4/vvIlcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcmlnaW46IFZlY3RvcjMsIGRpcmVjdGlvbjogVmVjdG9yMykge1xuICAgICAgICB0aGlzLm9yaWdpbiA9IG9yaWdpbi5jbG9uZSgpOyAvLyDkvb/nlKjlhYvpmobpgb/lhY3lvJXnlKjpl67pophcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBkaXJlY3Rpb24uY2xvbmUoKS5ub3JtYWxpemUoKTsgLy8g56Gu5L+d5pa55ZCR5piv5Y2V5L2N5ZCR6YePXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6I635Y+W5bCE57q/5LiK5p+Q5LiA54K555qE5L2N572uXG4gICAgICogQHBhcmFtIHQg5rK/5bCE57q/5pa55ZCR55qE5Y+C5pWw6Led56a7XG4gICAgICogQHJldHVybnMg5bCE57q/5LiK5a+55bqU54K555qEVmVjdG9yM+WdkOagh1xuICAgICAqL1xuICAgIHB1YmxpYyBhdCh0OiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICAgICAgLy8g5YWs5byPOiBwb2ludCA9IG9yaWdpbiArIHQgKiBkaXJlY3Rpb25cbiAgICAgICAgcmV0dXJuIFZlY3RvcjMuYWRkKHRoaXMub3JpZ2luLCBWZWN0b3IzLm11bHRpcGx5U2NhbGFyKHRoaXMuZGlyZWN0aW9uLCB0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5YWL6ZqG5b2T5YmN5bCE57q/XG4gICAgICogQHJldHVybnMg5LiA5p2h5paw55qEUmF55a6e5L6LXG4gICAgICovXG4gICAgcHVibGljIGNsb25lKCk6IFJheSB7XG4gICAgICAgIHJldHVybiBuZXcgUmF5KHRoaXMub3JpZ2luLmNsb25lKCksIHRoaXMuZGlyZWN0aW9uLmNsb25lKCkpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBDYW1lcmEgfSBmcm9tIFwiLi4vQ29tcG9uZW50L0NhbWVyYVwiO1xuaW1wb3J0IHsgTGlnaHQsIExpZ2h0VHlwZSB9IGZyb20gXCIuLi9Db21wb25lbnQvTGlnaHRcIjtcbmltcG9ydCB7IEVuZ2luZUNvbmZpZyB9IGZyb20gXCIuLi9Db3JlL1NldHRpbmdcIjtcbmltcG9ydCB7IFRyYW5zZm9ybSB9IGZyb20gXCIuLi9Db3JlL1RyYW5zZm9ybVwiO1xuaW1wb3J0IHsgTWF0cml4NHg0IH0gZnJvbSBcIi4vTWF0cml4NHg0XCI7XG5pbXBvcnQgeyBRdWF0ZXJuaW9uIH0gZnJvbSBcIi4vUXVhdGVybmlvblwiO1xuaW1wb3J0IHsgUmF5IH0gZnJvbSBcIi4vUmF5XCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vVmVjdG9yMlwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuL1ZlY3RvcjNcIjtcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tIFwiLi9WZWN0b3I0XCI7XG5cbmV4cG9ydCBjbGFzcyBUcmFuc2Zvcm1Ub29scyB7XG5cbiAgICAvKipcbiAgICAgKiDlsIboo4Hliarnqbrpl7TlnZDmoIfovazmjaLkuLrmoIflh4bljJborr7lpIflnZDmoIcoTkRDKVxuICAgICAqIEBwYXJhbSBjbGlwUG9zIOijgeWJquepuumXtOWdkOagh++8jOWMheWQq3gsIHksIHosIHflm5vkuKrliIbph49cbiAgICAgKiBAcmV0dXJucyDmoIflh4bljJborr7lpIflnZDmoIcoTkRDKe+8jOS4ieS4quWIhumHj+iMg+WbtOWdh+S4ulstMSwgMV1cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIENsaXBUb05kY1BvcyhjbGlwUG9zOiBWZWN0b3I0KTogVmVjdG9yMyB7XG4gICAgICAgIC8vIOiOt+WPluijgeWJquWdkOagh+eahHfliIbph4/vvIznlKjkuo7pgI/op4bpmaTms5VcbiAgICAgICAgY29uc3QgdyA9IGNsaXBQb3MudztcblxuICAgICAgICAvLyDpgb/lhY3pmaTku6Uw77yI55CG6K665LiKdz0w55qE54K55Zyo5peg56m36L+c5aSE77yM5a6e6ZmF5Lit6YCa5bi46L+U5Zue5Y6f54K577yJXG4gICAgICAgIGlmICh3ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yMy5aRVJPO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5omn6KGM6YCP6KeG6Zmk5rOV77ya6KOB5Ymq56m66Ze05Z2Q5qCH5ZCE5YiG6YeP6Zmk5Luld+WIhumHj++8jOW+l+WIsE5EQ1xuICAgICAgICAvLyDpgI/op4bmipXlvbHkuK3vvIx35YiG6YeP5LiO5rex5bqm55u45YWz77yM6Zmk5rOV5Lya5Lqn55Sf6L+R5aSn6L+c5bCP55qE6YCP6KeG5pWI5p6cXG4gICAgICAgIGNvbnN0IG5kY1ggPSBjbGlwUG9zLnggLyB3O1xuICAgICAgICBjb25zdCBuZGNZID0gY2xpcFBvcy55IC8gdztcbiAgICAgICAgY29uc3QgbmRjWiA9IGNsaXBQb3MueiAvIHc7XG5cbiAgICAgICAgLy8g6L+U5ZueTkRD5Z2Q5qCH77yM5LiJ5Liq5YiG6YeP5Z2H5bqU6JC95ZyoWy0xLCAxXeiMg+WbtOWGhe+8iOi2heWHuuatpOiMg+WbtOeahOeCueS8muiiq+ijgeWJqu+8iVxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMobmRjWCwgbmRjWSwgbmRjWik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5bCGTkRD5Z2Q5qCH6L2s5o2i5Li66KeG5Y+j5Z2Q5qCHXG4gICAgICogQHBhcmFtIG5kY1BvcyDmoIflh4bljJborr7lpIflnZDmoIcoTkRDKe+8jOiMg+WbtOS4ulg6Wy0xLDFdLCBZOlstMSwxXSwgWjpbLTEsMV1cbiAgICAgKiBAcGFyYW0gdmlld3BvcnQg6KeG5Y+j5Y+C5pWw77yM5qC85byP5Li6W3gsIHksIHdpZHRoLCBoZWlnaHRd77yM5YW25LitKHgseSnmmK/op4blj6Plt6bkuIrop5LlnKjlsY/luZXkuIrnmoTlnZDmoIdcbiAgICAgKiBAcmV0dXJucyDop4blj6Pnqbrpl7TkuK3nmoTkuoznu7TlnZDmoIdcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIE5kY1RvVmlld3BvcnRQb3MobmRjUG9zOiBWZWN0b3IzLCB2aWV3cG9ydDogVmVjdG9yNCk6IFZlY3RvcjIge1xuICAgICAgICBjb25zdCBzdGFydFggPSB2aWV3cG9ydC54OyAgICAvLyDop4blj6Plt6bkuIrop5JY5Z2Q5qCHXG4gICAgICAgIGNvbnN0IHN0YXJ0WSA9IHZpZXdwb3J0Lnk7ICAgIC8vIOinhuWPo+W3puS4iuinklnlnZDmoIdcbiAgICAgICAgY29uc3Qgd2lkdGggPSB2aWV3cG9ydC56OyAgICAgLy8g6KeG5Y+j5a695bqmXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHZpZXdwb3J0Lnc7ICAgIC8vIOinhuWPo+mrmOW6plxuXG4gICAgICAgIC8vIE5EQ+WdkOagh+iMg+WbtOaYr1stMSwxXe+8jOWFiOi9rOaNouS4ulswLDFd6IyD5Zu055qE55u45a+55Z2Q5qCHXG4gICAgICAgIC8vIOWFrOW8j++8mlswLDFdID0gKE5EQyArIDEpIC8gMlxuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9IChuZGNQb3MueCArIDEpICogMC41O1xuICAgICAgICBjb25zdCBub3JtYWxpemVkWSA9IChuZGNQb3MueSArIDEpICogMC41O1xuXG4gICAgICAgIC8vIOi9rOaNouS4uuinhuWPo+WdkOagh++8mlxuICAgICAgICAvLyBY6L2077ya6KeG5Y+j6LW35aeLWCArIOebuOWvuVggKiDop4blj6Plrr3luqZcbiAgICAgICAgLy8gWei9tO+8mueUseS6juWxj+W5leWdkOagh+ezu1novbTlkJHkuIvvvIjkuI5OREPnmoRZ6L205pa55ZCR55u45Y+N77yJ77yM6ZyA6KaB55SoMeWHj+WOu+ebuOWvuVnlgLzlkI7lho3orqHnrpdcbiAgICAgICAgY29uc3Qgdmlld1BvcnRYID0gc3RhcnRYICsgbm9ybWFsaXplZFggKiB3aWR0aDtcbiAgICAgICAgY29uc3Qgdmlld1BvcnRZID0gc3RhcnRZICsgKDEgLSBub3JtYWxpemVkWSkgKiBoZWlnaHQ7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHZpZXdQb3J0WCwgdmlld1BvcnRZKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIFZpZXdwb3J0VG9TY3JlZW5Qb3ModnA6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICAgICAgY29uc3Qgc2NyZWVuWCA9IHZwLnggKiBFbmdpbmVDb25maWcuY2FudmFzV2lkdGg7XG4gICAgICAgIGNvbnN0IHNjcmVlblkgPSB2cC55ICogRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodDtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHNjcmVlblgsIHNjcmVlblkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgV29ybGRUb0NsaXBQb3MocG9zOiBWZWN0b3IzLCBjYW1lcmE6IENhbWVyYSk6IFZlY3RvcjQge1xuICAgICAgICBjb25zdCB2aWV3TWF0cml4ID0gY2FtZXJhLmdldFZpZXdNYXRyaXgoKTtcbiAgICAgICAgY29uc3QgcHJvamVjdGlvbk1hdHJpeCA9IGNhbWVyYS5nZXRQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgICAgIGNvbnN0IHZwTWF0cml4ID0gcHJvamVjdGlvbk1hdHJpeC5tdWx0aXBseSh2aWV3TWF0cml4KTtcbiAgICAgICAgY29uc3QgY2xpcFBvcyA9IHZwTWF0cml4Lm11bHRpcGx5VmVjdG9yNChuZXcgVmVjdG9yNChwb3MsIDEpKTtcbiAgICAgICAgcmV0dXJuIGNsaXBQb3M7XG4gICAgfVxuXG4gICAgLy8g5LiW55WM5Z2Q5qCH6L2s5Li65bGP5bmV5Z2Q5qCHXG4gICAgcHVibGljIHN0YXRpYyBXb3JsZFRvU2NyZWVuUG9zKHBvczogVmVjdG9yMywgY2FtZXJhOiBDYW1lcmEpOiB7IHNjcmVlbjogVmVjdG9yMjsgZGVwdGg6IG51bWJlciB9IHtcbiAgICAgICAgY29uc3QgY2xpcFBvcyA9IHRoaXMuV29ybGRUb0NsaXBQb3MocG9zLCBjYW1lcmEpO1xuICAgICAgICBjb25zdCBuZGMgPSB0aGlzLkNsaXBUb05kY1BvcyhjbGlwUG9zKTtcbiAgICAgICAgY29uc3QgdnAgPSB0aGlzLk5kY1RvVmlld3BvcnRQb3MobmRjLCBjYW1lcmEudmlld1BvcnQpO1xuICAgICAgICBjb25zdCBzY3JlZW4gPSB0aGlzLlZpZXdwb3J0VG9TY3JlZW5Qb3ModnApO1xuXG4gICAgICAgIC8vIOa3seW6puWAvO+8muWwhk5EQ+eahHrku45bLTEsIDFd5pig5bCE5YiwWzAsIDFd55qE6IyD5Zu077yM5bi455So5LqO5rex5bqm57yT5YayXG4gICAgICAgIGNvbnN0IGRlcHRoID0gKG5kYy56ICsgMSkgLyAyO1xuXG4gICAgICAgIHJldHVybiB7IHNjcmVlbiwgZGVwdGggfTtcbiAgICB9XG5cbiAgICAvLyDkuJbnlYzlnZDmoIfliLDop4blj6PlnZDmoIdcbiAgICBwdWJsaWMgc3RhdGljIFdvcmxkVG9WaWV3cG9ydFBvcyh3b3JsZFBvczogVmVjdG9yMywgY2FtZXJhOiBDYW1lcmEpOiBWZWN0b3IyIHtcbiAgICAgICAgY29uc3QgY2xpcFBvcyA9IHRoaXMuV29ybGRUb0NsaXBQb3Mod29ybGRQb3MsIGNhbWVyYSk7XG4gICAgICAgIGNvbnN0IG5kYyA9IHRoaXMuQ2xpcFRvTmRjUG9zKGNsaXBQb3MpO1xuICAgICAgICBjb25zdCB2cCA9IHRoaXMuTmRjVG9WaWV3cG9ydFBvcyhuZGMsIGNhbWVyYS52aWV3UG9ydCk7XG4gICAgICAgIHJldHVybiB2cDtcbiAgICB9XG5cbiAgICAvLyDop4blj6PlnZDmoIfovazmjaJcbiAgICBwdWJsaWMgc3RhdGljIFNjcmVlblRvVmlld3BvcnRQb3Moc2NyZWVuUG9zOiBWZWN0b3IyKTogVmVjdG9yMiB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMihcbiAgICAgICAgICAgIHNjcmVlblBvcy54IC8gRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoLFxuICAgICAgICAgICAgc2NyZWVuUG9zLnkgLyBFbmdpbmVDb25maWcuY2FudmFzSGVpZ2h0XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLy8g5bGP5bmV5Z2Q5qCH6L2s5Li65LiW55WM5Z2Q5qCHXG4gICAgcHVibGljIHN0YXRpYyBTY3JlZW5Ub1dvcmxkUG9zKHNjcmVlblBvczogVmVjdG9yMiwgY2FtZXJhOiBDYW1lcmEsIGRlcHRoOiBudW1iZXIgPSAxLjApOiBWZWN0b3IzIHtcbiAgICAgICAgLy8gMS4g5bCG5bGP5bmV5Z2Q5qCH6L2s5o2i5Li6TkRD5Z2Q5qCH77yILTHliLAx6IyD5Zu077yJXG4gICAgICAgIGNvbnN0IG5kY1ggPSAoc2NyZWVuUG9zLnggLyBFbmdpbmVDb25maWcuY2FudmFzV2lkdGgpICogMiAtIDE7XG4gICAgICAgIGNvbnN0IG5kY1kgPSAxIC0gKHNjcmVlblBvcy55IC8gRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodCkgKiAyOyAvLyBZ6L206ZyA6KaB57+76L2sXG5cbiAgICAgICAgLy8gMi4g5Yib5bu66b2Q5qyh6KOB5Ymq56m66Ze05Z2Q5qCHXG4gICAgICAgIGNvbnN0IGNsaXBQb3MgPSBuZXcgVmVjdG9yNChuZGNYLCBuZGNZLCBkZXB0aCwgMS4wKTtcblxuICAgICAgICAvLyAzLiDojrflj5bop4blm77mipXlvbHnn6npmLXnmoTpgIbnn6npmLVcbiAgICAgICAgY29uc3Qgdmlld01hdHJpeCA9IGNhbWVyYS5nZXRWaWV3TWF0cml4KCk7XG4gICAgICAgIGNvbnN0IHByb2plY3Rpb25NYXRyaXggPSBjYW1lcmEuZ2V0UHJvamVjdGlvbk1hdHJpeCgpO1xuICAgICAgICBjb25zdCB2cE1hdHJpeCA9IHByb2plY3Rpb25NYXRyaXgubXVsdGlwbHkodmlld01hdHJpeCk7XG4gICAgICAgIGNvbnN0IGludmVyc2VWUE1hdHJpeCA9IHZwTWF0cml4LmludmVydCgpO1xuXG4gICAgICAgIC8vIDQuIOWwhuijgeWJquepuumXtOWdkOagh+i9rOaNouWIsOS4lueVjOepuumXtFxuICAgICAgICBjb25zdCB3b3JsZFBvcyA9IGludmVyc2VWUE1hdHJpeC5tdWx0aXBseVZlY3RvcjQoY2xpcFBvcyk7XG5cbiAgICAgICAgLy8gNS4g6L+b6KGM6YCP6KeG6Zmk5rOV77yI6b2Q5qyh5Z2Q5qCH5b2S5LiA5YyW77yJXG4gICAgICAgIGNvbnN0IHcgPSB3b3JsZFBvcy53O1xuICAgICAgICBpZiAodyAhPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKFxuICAgICAgICAgICAgICAgIHdvcmxkUG9zLnggLyB3LFxuICAgICAgICAgICAgICAgIHdvcmxkUG9zLnkgLyB3LFxuICAgICAgICAgICAgICAgIHdvcmxkUG9zLnogLyB3XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHdvcmxkUG9zLngsIHdvcmxkUG9zLnksIHdvcmxkUG9zLnopO1xuICAgIH1cblxuICAgIC8vIOS9v+eUqOWwhOe6v+azlei/m+ihjOeyvuehrueahOWxj+W5leWIsOS4lueVjOWdkOagh+i9rOaNou+8iOaOqOiNkOeUqOS6jjNE5ou+5Y+W77yJXG4gICAgcHVibGljIHN0YXRpYyBTY3JlZW5Ub1dvcmxkUG9zUmF5Y2FzdChzY3JlZW5Qb3M6IFZlY3RvcjIsIGNhbWVyYTogQ2FtZXJhKTogUmF5IHtcbiAgICAgICAgLy8gMS4g5bCG5bGP5bmV5Z2Q5qCH6L2s5o2i5Li6TkRD5Z2Q5qCHXG4gICAgICAgIGNvbnN0IG5kY1ggPSAoc2NyZWVuUG9zLnggLyBFbmdpbmVDb25maWcuY2FudmFzV2lkdGgpICogMiAtIDE7XG4gICAgICAgIGNvbnN0IG5kY1kgPSAxIC0gKHNjcmVlblBvcy55IC8gRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodCkgKiAyO1xuXG4gICAgICAgIC8vIDIuIOWIm+W7uui/keW5s+mdouWSjOi/nOW5s+mdoueahOeCuVxuICAgICAgICBjb25zdCBuZWFyUG9pbnQgPSBuZXcgVmVjdG9yNChuZGNYLCBuZGNZLCAtMSwgMSk7XG4gICAgICAgIGNvbnN0IGZhclBvaW50ID0gbmV3IFZlY3RvcjQobmRjWCwgbmRjWSwgMSwgMSk7XG5cbiAgICAgICAgLy8gMy4g6I635Y+W6KeG5Zu+5oqV5b2x55+p6Zi155qE6YCG55+p6Zi1XG4gICAgICAgIGNvbnN0IHZpZXdNYXRyaXggPSBjYW1lcmEuZ2V0Vmlld01hdHJpeCgpO1xuICAgICAgICBjb25zdCBwcm9qZWN0aW9uTWF0cml4ID0gY2FtZXJhLmdldFByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgICAgY29uc3QgdnBNYXRyaXggPSBwcm9qZWN0aW9uTWF0cml4Lm11bHRpcGx5KHZpZXdNYXRyaXgpO1xuICAgICAgICBjb25zdCBpbnZlcnNlVlBNYXRyaXggPSB2cE1hdHJpeC5pbnZlcnQoKTtcblxuICAgICAgICAvLyA0LiDovazmjaLliLDkuJbnlYznqbrpl7RcbiAgICAgICAgY29uc3Qgd29ybGROZWFyID0gaW52ZXJzZVZQTWF0cml4Lm11bHRpcGx5VmVjdG9yNChuZWFyUG9pbnQpO1xuICAgICAgICBjb25zdCB3b3JsZEZhciA9IGludmVyc2VWUE1hdHJpeC5tdWx0aXBseVZlY3RvcjQoZmFyUG9pbnQpO1xuXG4gICAgICAgIC8vIDUuIOi/m+ihjOmAj+inhumZpOazlVxuICAgICAgICBjb25zdCBuZWFyV29ybGQgPSBuZXcgVmVjdG9yMyhcbiAgICAgICAgICAgIHdvcmxkTmVhci54IC8gd29ybGROZWFyLncsXG4gICAgICAgICAgICB3b3JsZE5lYXIueSAvIHdvcmxkTmVhci53LFxuICAgICAgICAgICAgd29ybGROZWFyLnogLyB3b3JsZE5lYXIud1xuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGZhcldvcmxkID0gbmV3IFZlY3RvcjMoXG4gICAgICAgICAgICB3b3JsZEZhci54IC8gd29ybGRGYXIudyxcbiAgICAgICAgICAgIHdvcmxkRmFyLnkgLyB3b3JsZEZhci53LFxuICAgICAgICAgICAgd29ybGRGYXIueiAvIHdvcmxkRmFyLndcbiAgICAgICAgKTtcblxuICAgICAgICAvLyA2LiDliJvlu7rlsITnur9cbiAgICAgICAgY29uc3QgcmF5RGlyZWN0aW9uID0gZmFyV29ybGQuc3VidHJhY3QobmVhcldvcmxkKS5ub3JtYWxpemUoKTtcbiAgICAgICAgY29uc3QgcmF5T3JpZ2luID0gbmVhcldvcmxkO1xuXG4gICAgICAgIHJldHVybiBuZXcgUmF5KHJheU9yaWdpbiwgcmF5RGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvLyDmqKHlnovlnZDmoIfovazkuLroo4HliarlnZDmoIdcbiAgICBwdWJsaWMgc3RhdGljIE1vZGVsVG9DbGlwUG9zKHZlcnRleDogVmVjdG9yMywgbW9kZWxNYXRyaXg6IE1hdHJpeDR4NCwgY2FtZXJhOiBDYW1lcmEpOiBWZWN0b3I0IHtcbiAgICAgICAgLy8g5a+56aG254K55bqU55SoIE1WUCDnn6npmLXvvIhNb2RlbOKGklZpZXfihpJQcm9qZWN0aW9uIOefqemYteeahOe7hOWQiO+8ie+8jOiuoeeul+i/h+eoi+S4uu+8mlxuICAgICAgICAvLyDoo4Hliarnqbrpl7TlnZDmoIcgPSBwcm9qZWN0aW9uTWF0cml4IMOXIHZpZXdNYXRyaXggw5cgbW9kZWxNYXRyaXggw5cg5qih5Z6L56m66Ze06aG254K5XG4gICAgICAgIGNvbnN0IHZpZXdNYXRyaXggPSBjYW1lcmEuZ2V0Vmlld01hdHJpeCgpO1xuICAgICAgICBjb25zdCBwcm9qZWN0aW9uTWF0cml4ID0gY2FtZXJhLmdldFByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgICAgY29uc3QgbXZwTWF0cml4ID0gcHJvamVjdGlvbk1hdHJpeC5tdWx0aXBseSh2aWV3TWF0cml4KS5tdWx0aXBseShtb2RlbE1hdHJpeCk7XG5cbiAgICAgICAgLy8g5Y+m5LiA56eN5p6E5bu6bXbnn6npmLXnmoTmlrnlvI9cbiAgICAgICAgLy8g5p6E5bu65LiA5Liq5YWI5pyd5pGE5b2x5py65Y+N5pa55ZCR56e75Yqo77yM5YaN5Y+N5pa55ZCR5peL6L2s55qE55+p6Zi177yM5YW25a6e5b6X5Yiw55qE5Lmf5bCx5piv5LiK6Z2i5pGE5b2x5py655qE5LiW55WM5Z2Q5qCH55+p6Zi1XG4gICAgICAgIC8vIGNvbnN0IGNhbWVyYUZvcndhcmQgPSBjYW1lcmEudHJhbnNmb3JtLmZvcndhcmQ7XG4gICAgICAgIC8vIGNvbnN0IGNhbWVyYVVwID0gY2FtZXJhLnRyYW5zZm9ybS51cDtcbiAgICAgICAgLy8gY29uc3QgbW9kZWxWaWV3TWF0cml4ID0gbW9kZWxNYXRyaXguY2xvbmUoKS50cmFuc2Zvcm1Ub0xvb2tBdFNwYWNlKGNhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24sIGNhbWVyYS50cmFuc2Zvcm0ucG9zaXRpb24uYWRkKGNhbWVyYUZvcndhcmQpLCBjYW1lcmFVcCk7XG4gICAgICAgIC8vIGNvbnN0IG12cE1hdHJpeCA9IG1vZGVsVmlld01hdHJpeC5wZXJzcGVjdGl2ZShjYW1lcmEuZm92LCBjYW1lcmEuYXNwZWN0LCBjYW1lcmEubmVhckNsaXAsIGNhbWVyYS5mYXJDbGlwKTtcblxuICAgICAgICAvLyDopoHmiopWZWMz6L2s5Li66b2Q5qyh5Z2Q5qCH54K577yM5Y2zdz0xXG4gICAgICAgIHJldHVybiBtdnBNYXRyaXgubXVsdGlwbHlWZWN0b3I0KG5ldyBWZWN0b3I0KHZlcnRleCwgMSkpO1xuICAgIH1cblxuICAgIC8vIOaooeWei+WdkOagh+i9rOS4uuWxj+W5leWdkOagh1xuICAgIHB1YmxpYyBzdGF0aWMgTW9kZWxUb1NjcmVlblBvcyh2ZXJ0ZXg6IFZlY3RvcjMsIG1vZGVsTWF0cml4OiBNYXRyaXg0eDQsIGNhbWVyYTogQ2FtZXJhKTogeyBzY3JlZW46IFZlY3RvcjI7IGRlcHRoOiBudW1iZXIgfSB7XG4gICAgICAgIGNvbnN0IGNsaXBQb3MgPSB0aGlzLk1vZGVsVG9DbGlwUG9zKHZlcnRleCwgbW9kZWxNYXRyaXgsIGNhbWVyYSk7XG4gICAgICAgIGNvbnN0IG5kYyA9IHRoaXMuQ2xpcFRvTmRjUG9zKGNsaXBQb3MpO1xuICAgICAgICBjb25zdCB2cCA9IHRoaXMuTmRjVG9WaWV3cG9ydFBvcyhuZGMsIGNhbWVyYS52aWV3UG9ydCk7XG4gICAgICAgIGNvbnN0IHNjcmVlbiA9IHRoaXMuVmlld3BvcnRUb1NjcmVlblBvcyh2cCk7XG4gICAgICAgIGNvbnN0IGRlcHRoID0gKG5kYy56ICsgMSkgLyAyO1xuICAgICAgICByZXR1cm4geyBzY3JlZW4sIGRlcHRoIH07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBDbGlwVG9TY3JlZW5Qb3MoY2xpcFBvczogVmVjdG9yNCwgY2FtZXJhOiBDYW1lcmEpOiBWZWN0b3IzIHtcbiAgICAgICAgY29uc3QgbmRjID0gdGhpcy5DbGlwVG9OZGNQb3MoY2xpcFBvcyk7XG4gICAgICAgIGNvbnN0IHZwID0gdGhpcy5OZGNUb1ZpZXdwb3J0UG9zKG5kYywgY2FtZXJhLnZpZXdQb3J0KTtcbiAgICAgICAgY29uc3Qgc2NyZWVuID0gdGhpcy5WaWV3cG9ydFRvU2NyZWVuUG9zKHZwKTtcbiAgICAgICAgY29uc3QgZGVwdGggPSAobmRjLnogKyAxKSAvIDI7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyhzY3JlZW4ueCwgc2NyZWVuLnksIGRlcHRoKTtcbiAgICB9XG5cbiAgICAvLyDmqKHlnovms5Xnur/ovazkuLrkuJbnlYzms5Xnur9cbiAgICBwdWJsaWMgc3RhdGljIE1vZGVsVG9Xb3JsZE5vcm1hbChub3JtYWw6IFZlY3RvcjMsIG1vZGVsTWF0cml4OiBNYXRyaXg0eDQpOiBWZWN0b3IzIHtcbiAgICAgICAgLy8g6I635Y+W5qih5Z6L55+p6Zi177yI5bGA6YOo5Yiw5LiW55WM56m66Ze055qE5Y+Y5o2i55+p6Zi177yJXG5cbiAgICAgICAgLy8g6K6h566X5qih5Z6L55+p6Zi155qE6YCG6L2s572u55+p6Zi1XG4gICAgICAgIC8vIOmAhui9rOe9ruefqemYteWPr+S7peehruS/neazlee6v+WcqOmdnuWdh+WMgOe8qeaUvuaXtuS7jeeEtuS/neaMgeS4juihqOmdouWeguebtFxuICAgICAgICBjb25zdCBpbnZlcnNlVHJhbnNwb3NlTW9kZWwgPSBtb2RlbE1hdHJpeC5pbnZlcnQoKS50cmFuc3Bvc2UoKTtcblxuICAgICAgICAvLyDkvb/nlKjpgIbovaznva7nn6npmLXlj5jmjaLms5Xnur/lkJHph4/vvIjlv73nlaXlubPnp7vliIbph4/vvIzlj6rlupTnlKjml4vovazlkoznvKnmlL7nmoTpgIblj5jmjaLvvIlcbiAgICAgICAgY29uc3Qgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNwb3NlTW9kZWwubXVsdGlwbHlWZWN0b3IzKG5vcm1hbCk7XG5cbiAgICAgICAgLy8g5b2S5LiA5YyW57uT5p6c77yM56Gu5L+d5rOV57q/5L+d5oyB5Y2V5L2N6ZW/5bqmXG4gICAgICAgIHJldHVybiB3b3JsZE5vcm1hbC5ub3JtYWxpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDorqHnrpfmqKHlnovnqbrpl7TkuK3ku47pobbngrnmjIflkJHlhYnmupDnmoTmlrnlkJHlkJHph49cbiAgICAgKiBAcGFyYW0gdiDmqKHlnovnqbrpl7TkuK3nmoTpobbngrnlnZDmoIdcbiAgICAgKiBAcmV0dXJucyDlvZLkuIDljJbnmoTmlrnlkJHlkJHph4/vvIjmqKHlnovnqbrpl7TvvIlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIE9ialNwYWNlTGlnaHREaXIodjogVmVjdG9yMywgbGlnaHQ6IExpZ2h0LCB0cmFuc2Zvcm06IFRyYW5zZm9ybSk6IFZlY3RvcjMge1xuICAgICAgICBsZXQgbGlnaHREaXI6IFZlY3RvcjM7XG5cbiAgICAgICAgaWYgKGxpZ2h0LnR5cGUgPT09IExpZ2h0VHlwZS5EaXJlY3Rpb25hbCkge1xuICAgICAgICAgICAgLy8g5pa55ZCR5YWJ77ya55u05o6l5bCG5LiW55WM56m66Ze055qE5YWJ57q/5pa55ZCR6L2s5o2i5Yiw5qih5Z6L56m66Ze077yI5pa55ZCR5ZCR6YeP55So55+p6Zi15LmY5rOV77yM5b+955Wl5bmz56e777yJXG4gICAgICAgICAgICBsaWdodERpciA9IHRyYW5zZm9ybS53b3JsZFRvTG9jYWxNYXRyaXgubXVsdGlwbHlWZWN0b3IzKGxpZ2h0LnRyYW5zZm9ybS5mb3J3YXJkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIOeCueWFiea6kC/ogZrlhYnnga/vvJrorqHnrpfpobbngrnliLDlhYnmupDnmoTlkJHph4/vvIjmqKHlnovnqbrpl7TvvIlcbiAgICAgICAgICAgIC8vIDEuIOWwhuS4lueVjOepuumXtOeahOWFiea6kOS9jee9rui9rOaNouWIsOaooeWei+epuumXtFxuICAgICAgICAgICAgY29uc3QgbGlnaHRQb3NPYmogPSB0cmFuc2Zvcm0ud29ybGRUb0xvY2FsTWF0cml4Lm11bHRpcGx5VmVjdG9yNChuZXcgVmVjdG9yNChsaWdodC50cmFuc2Zvcm0ud29ybGRQb3NpdGlvbiwgMSkpO1xuICAgICAgICAgICAgLy8gMi4g5qih5Z6L56m66Ze05Lit77yM5LuO6aG254K55oyH5ZCR5YWJ5rqQ55qE5ZCR6YePID0g5YWJ5rqQ5L2N572uIC0g6aG254K55L2N572uXG4gICAgICAgICAgICBsaWdodERpciA9IChuZXcgVmVjdG9yMyhsaWdodFBvc09iaikpLnN1YnRyYWN0KHYpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5b2S5LiA5YyW5bm26L+U5ZueXG4gICAgICAgIHJldHVybiBsaWdodERpci5ub3JtYWxpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDorqHnrpfmqKHlnovnqbrpl7TkuK3ku47pobbngrnmjIflkJHmkYTlg4/mnLrnmoTmlrnlkJHlkJHph49cbiAgICAgKiBAcGFyYW0gdiDmqKHlnovnqbrpl7TkuK3nmoTpobbngrnlnZDmoIdcbiAgICAgKiBAcmV0dXJucyDlvZLkuIDljJbnmoTmlrnlkJHlkJHph4/vvIjmqKHlnovnqbrpl7TvvIlcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIE9ialNwYWNlVmlld0Rpcih2OiBWZWN0b3IzLCBjYW1lcmE6IENhbWVyYSwgdHJhbnNmb3JtOiBUcmFuc2Zvcm0pOiBWZWN0b3IzIHtcbiAgICAgICAgLy8gMS4g5bCG5LiW55WM56m66Ze055qE5pGE5YOP5py65L2N572u6L2s5o2i5Yiw5qih5Z6L56m66Ze0XG4gICAgICAgIGNvbnN0IGNhbWVyYVBvc09iaiA9IHRyYW5zZm9ybS53b3JsZFRvTG9jYWxNYXRyaXgubXVsdGlwbHlWZWN0b3I0KG5ldyBWZWN0b3I0KGNhbWVyYS50cmFuc2Zvcm0ud29ybGRQb3NpdGlvbiwgMSkpO1xuXG4gICAgICAgIC8vIDIuIOaooeWei+epuumXtOS4re+8jOS7jumhtueCueaMh+WQkeaRhOWDj+acuueahOWQkemHjyA9IOaRhOWDj+acuuS9jee9riAtIOmhtueCueS9jee9rlxuICAgICAgICBjb25zdCB2aWV3RGlyID0gKG5ldyBWZWN0b3IzKGNhbWVyYVBvc09iaikpLnN1YnRyYWN0KHYpO1xuXG4gICAgICAgIC8vIOW9kuS4gOWMluW5tui/lOWbnlxuICAgICAgICByZXR1cm4gdmlld0Rpci5ub3JtYWxpemUoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIEFwcGx5U2NhbGVUb1ZlcnRleCh2ZXJ0ZXg6IFZlY3RvcjMsIHNjYWxlOiBWZWN0b3IzKSB7XG4gICAgICAgIHZlcnRleC54ICo9IHNjYWxlLng7XG4gICAgICAgIHZlcnRleC55ICo9IHNjYWxlLnk7XG4gICAgICAgIHZlcnRleC56ICo9IHNjYWxlLno7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBBcHBseVJvdGF0aW9uVG9WZXJ0ZXgodmVydGV4OiBWZWN0b3IzLCBxdWF0ZXJuaW9uOiBRdWF0ZXJuaW9uKSB7XG4gICAgICAgIC8vIOWbm+WFg+aVsOaXi+i9rOWFrOW8jzogdicgPSBxICogdiAqIHHigbvCuVxuICAgICAgICBjb25zdCBxeCA9IHF1YXRlcm5pb24ueCwgcXkgPSBxdWF0ZXJuaW9uLnksIHF6ID0gcXVhdGVybmlvbi56LCBxdyA9IHF1YXRlcm5pb24udztcbiAgICAgICAgY29uc3QgeCA9IHZlcnRleC54LCB5ID0gdmVydGV4LnksIHogPSB2ZXJ0ZXguejtcblxuICAgICAgICAvLyDorqHnrpcgcSAqIHZcbiAgICAgICAgY29uc3QgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XG4gICAgICAgIGNvbnN0IGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xuICAgICAgICBjb25zdCBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcbiAgICAgICAgY29uc3QgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xuXG4gICAgICAgIC8vIOiuoeeulyAocSAqIHYpICogceKBu8K5IChx4oG7wrkg5pivIHHnmoTlhbHova0pXG4gICAgICAgIGNvbnN0IHJ4ID0gaXggKiBxdyArIGl3ICogKC1xeCkgKyBpeSAqICgtcXopIC0gaXogKiAoLXF5KTtcbiAgICAgICAgY29uc3QgcnkgPSBpeSAqIHF3ICsgaXcgKiAoLXF5KSArIGl6ICogKC1xeCkgLSBpeCAqICgtcXopO1xuICAgICAgICBjb25zdCByeiA9IGl6ICogcXcgKyBpdyAqICgtcXopICsgaXggKiAoLXF5KSAtIGl5ICogKC1xeCk7XG5cbiAgICAgICAgdmVydGV4LnggPSByeDtcbiAgICAgICAgdmVydGV4LnkgPSByeTtcbiAgICAgICAgdmVydGV4LnogPSByejtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIEFwcGx5VHJhbnNsYXRpb25Ub1ZlcnRleCh2ZXJ0ZXg6IFZlY3RvcjMsIHBvc2l0aW9uOiBWZWN0b3IzKSB7XG4gICAgICAgIHZlcnRleC54ICs9IHBvc2l0aW9uLng7XG4gICAgICAgIHZlcnRleC55ICs9IHBvc2l0aW9uLnk7XG4gICAgICAgIHZlcnRleC56ICs9IHBvc2l0aW9uLno7XG4gICAgfVxufSIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi9WZWN0b3IzXCI7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSBcIi4vVmVjdG9yNFwiO1xuXG5leHBvcnQgY2xhc3MgVmVjdG9yMiB7XG5cbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgZ2V0IHUoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMueDsgfVxuICAgIHB1YmxpYyBnZXQgdigpOiBudW1iZXIgeyByZXR1cm4gdGhpcy55OyB9XG5cbiAgICBwdWJsaWMgZ2V0IHdpZHRoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLng7IH1cbiAgICBwdWJsaWMgZ2V0IGhlaWdodCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy55OyB9XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih2OiBWZWN0b3IzKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodjogVmVjdG9yNClcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBWZWN0b3IzKSB7XG4gICAgICAgICAgICB0aGlzLnggPSBhcmd1bWVudHNbMF0ueDtcbiAgICAgICAgICAgIHRoaXMueSA9IGFyZ3VtZW50c1swXS55O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIFZlY3RvcjQpIHtcbiAgICAgICAgICAgIHRoaXMueCA9IGFyZ3VtZW50c1swXS54O1xuICAgICAgICAgICAgdGhpcy55ID0gYXJndW1lbnRzWzBdLnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAyKSB7XG4gICAgICAgICAgICB0aGlzLnggPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB0aGlzLnkgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLnkgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgICAgT1BFUkFUSU9OUyBPTiBWRUNUT1JcbiAgICAgKi9cblxuICAgIHB1YmxpYyBhZGQodjogVmVjdG9yMik6IFZlY3RvcjIge1xuICAgICAgICB0aGlzLnggKz0gdi54O1xuICAgICAgICB0aGlzLnkgKz0gdi55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc3VidHJhY3QodjogVmVjdG9yMik6IFZlY3RvcjIge1xuICAgICAgICB0aGlzLnggLT0gdi54O1xuICAgICAgICB0aGlzLnkgLT0gdi55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgbXVsdGlwbHkodjogVmVjdG9yMik6IFZlY3RvcjIge1xuICAgICAgICB0aGlzLnggKj0gdi54O1xuICAgICAgICB0aGlzLnkgKj0gdi55O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZGl2aWRlKGQ6IG51bWJlcik6IFZlY3RvcjIge1xuICAgICAgICB0aGlzLnggLz0gZDtcbiAgICAgICAgdGhpcy55IC89IGQ7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBtdWx0aXBseVNjYWxhcihkOiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICAgICAgdGhpcy54ICo9IGQ7XG4gICAgICAgIHRoaXMueSAqPSBkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZG90KHY6IFZlY3RvcjIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueSk7XG4gICAgfVxuXG4gICAgcHVibGljIG5lZ2F0ZSgpOiBWZWN0b3IyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoLTEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBub3JtYWxpemUoKTogVmVjdG9yMiB7XG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLm1hZ25pdHVkZTtcblxuICAgICAgICBpZiAobGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZGl2aWRlKGxlbmd0aCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtYWduaXR1ZGUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChWZWN0b3IyLmRvdCh0aGlzLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzcXJNYWduaXR1ZGUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjIuZG90KHRoaXMsIHRoaXMpO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIEFERElUSU9OQUwgRlVOQ1RJT05TXG4gICAgICovXG5cbiAgICBwdWJsaWMgY2xvbmUoKTogVmVjdG9yMiB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLngsIHRoaXMueSk7XG4gICAgfVxuXG4gICAgcHVibGljIGVxdWFscyh2OiBWZWN0b3IyKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB2LnggPT0gdGhpcy54ICYmIHYueSA9PSB0aGlzLnk7XG4gICAgfVxuXG4gICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIltcIiArIHRoaXMueCArIFwiLCBcIiArIHRoaXMueSArIFwiXVwiO1xuICAgIH1cblxuICAgIC8qXG4gICAgICAgIFNUQVRJQyBGVU5DVElPTlNcbiAgICAgKi9cblxuICAgIHB1YmxpYyBzdGF0aWMgYWRkKHYxOiBWZWN0b3IyLCB2MjogVmVjdG9yMik6IFZlY3RvcjIge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodjEueCArIHYyLngsIHYxLnkgKyB2Mi55KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHN1YnRyYWN0KHYxOiBWZWN0b3IyLCB2MjogVmVjdG9yMik6IFZlY3RvcjIge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodjEueCAtIHYyLngsIHYxLnkgLSB2Mi55KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG11bHRpcGx5KHYxOiBWZWN0b3IyLCB2MjogVmVjdG9yMik6IFZlY3RvcjIge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIodjEueCAqIHYyLngsIHYxLnkgKiB2Mi55KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGRpdmlkZSh2MTogVmVjdG9yMiwgdjI6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHYxLnggLyB2Mi54LCB2MS55IC8gdjIueSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBtdWx0aXBseVNjYWxhcih2MTogVmVjdG9yMiwgc2NhbGFyOiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHYxLnggKiBzY2FsYXIsIHYxLnkgKiBzY2FsYXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbGVycCh2MTogVmVjdG9yMiwgdjI6IFZlY3RvcjIsIHQ6IG51bWJlcik6IFZlY3RvcjIge1xuICAgICAgICB2YXIgdiA9IG5ldyBWZWN0b3IyKCk7XG4gICAgICAgIHYueCA9IHYxLnggKyB0ICogKHYyLnggLSB2MS54KTtcbiAgICAgICAgdi55ID0gdjEueSArIHQgKiAodjIueSAtIHYxLnkpO1xuICAgICAgICByZXR1cm4gdjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGRvdCh2MTogVmVjdG9yMiwgdjI6IFZlY3RvcjIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gKHYxLnggKiB2Mi54ICsgdjEueSAqIHYyLnkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgY3Jvc3ModjE6IFZlY3RvcjIsIHYyOiBWZWN0b3IyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh2MS54ICogdjIueSAtIHYxLnkgKiB2Mi54KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGRpc3RhbmNlKHYxOiBWZWN0b3IyLCB2MjogVmVjdG9yMik6IG51bWJlciB7XG4gICAgICAgIHZhciB4ID0gdjIueCAtIHYxLng7XG4gICAgICAgIHZhciB5ID0gdjIueSAtIHYxLnk7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBhbmdsZSh2MTogVmVjdG9yMiwgdjI6IFZlY3RvcjIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5hY29zKFZlY3RvcjIuZG90KHYxLCB2MikgLyAodjEubWFnbml0dWRlICogdjIubWFnbml0dWRlKSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgICAgU1RBVElDIFZBUklBQkxFU1xuICAgICAqL1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgWkVSTygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKDAsIDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IE9ORSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKDEsIDEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IFJJR0hUKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoMSwgMCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgTEVGVCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKC0xLCAwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBVUCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKDAsIDEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IERPV04oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMigwLCAtMSk7XG4gICAgfVxufSIsImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi9WZWN0b3IyXCI7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSBcIi4vVmVjdG9yNFwiO1xuXG5leHBvcnQgY2xhc3MgVmVjdG9yMyB7XG4gICAgcHVibGljIHg6IG51bWJlcjtcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xuICAgIHB1YmxpYyB6OiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcik7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHY6IFZlY3RvcjIpO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih2OiBWZWN0b3I0KTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBWZWN0b3IyKSB7XG4gICAgICAgICAgICB0aGlzLnggPSBhcmd1bWVudHNbMF0ueDtcbiAgICAgICAgICAgIHRoaXMueSA9IGFyZ3VtZW50c1swXS55O1xuICAgICAgICAgICAgdGhpcy56ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmd1bWVudHNbMF0gaW5zdGFuY2VvZiBWZWN0b3I0KSB7XG4gICAgICAgICAgICB0aGlzLnggPSBhcmd1bWVudHNbMF0ueDtcbiAgICAgICAgICAgIHRoaXMueSA9IGFyZ3VtZW50c1swXS55O1xuICAgICAgICAgICAgdGhpcy56ID0gYXJndW1lbnRzWzBdLno7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICB0aGlzLnggPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB0aGlzLnkgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB0aGlzLnogPSBhcmd1bWVudHNbMl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLnogPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgT1BFUkFUSU9OUyBPTiBWRUNUT1JcbiAgICAgKi9cblxuICAgIHB1YmxpYyBhZGQodjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICB0aGlzLnggKz0gdi54O1xuICAgICAgICB0aGlzLnkgKz0gdi55O1xuICAgICAgICB0aGlzLnogKz0gdi56O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc3VidHJhY3QodjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICB0aGlzLnggLT0gdi54O1xuICAgICAgICB0aGlzLnkgLT0gdi55O1xuICAgICAgICB0aGlzLnogLT0gdi56O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgbXVsdGlwbHkodjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICB0aGlzLnggKj0gdi54O1xuICAgICAgICB0aGlzLnkgKj0gdi55O1xuICAgICAgICB0aGlzLnogKj0gdi56O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZGl2aWRlKGQ6IG51bWJlcik6IFZlY3RvcjMge1xuICAgICAgICB0aGlzLnggLz0gZDtcbiAgICAgICAgdGhpcy55IC89IGQ7XG4gICAgICAgIHRoaXMueiAvPSBkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgbXVsdGlwbHlTY2FsYXIoczogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgICAgIHRoaXMueCAqPSBzO1xuICAgICAgICB0aGlzLnkgKj0gcztcbiAgICAgICAgdGhpcy56ICo9IHM7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZWdhdGUoKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpcGx5U2NhbGFyKC0xKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbm9ybWFsaXplKCk6IFZlY3RvcjMge1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5tYWduaXR1ZGU7XG4gICAgICAgIGlmIChsZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGl2aWRlKGxlbmd0aCk7XG4gICAgfVxuXG4gICAgcHVibGljIGRvdCh2OiBWZWN0b3IzKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjMuZG90KHRoaXMsIHYpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjcm9zcyh2OiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiBWZWN0b3IzLmNyb3NzKHRoaXMsIHYpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgbWFnbml0dWRlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoVmVjdG9yMy5kb3QodGhpcywgdGhpcykpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgc3FyTWFnbml0dWRlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiBWZWN0b3IzLmRvdCh0aGlzLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDojrflj5blkJHph4/nmoTmjIflrprliIbph49cbiAgICAgKiBAcGFyYW0gaW5kZXgg5YiG6YeP57Si5byVICgwPXgsIDE9eSwgMj16KVxuICAgICAqIEByZXR1cm5zIOWvueW6lOWIhumHj+eahOWAvFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRDb21wb25lbnQoaW5kZXg6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHN3aXRjaCAoaW5kZXgpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIHRoaXMueDtcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIHRoaXMueTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIHRoaXMuejtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGNvbXBvbmVudCBpbmRleDogJHtpbmRleH0uIE11c3QgYmUgMCwgMSwgb3IgMi5gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiuvue9ruWQkemHj+eahOaMh+WumuWIhumHj1xuICAgICAqIEBwYXJhbSBpbmRleCDliIbph4/ntKLlvJUgKDA9eCwgMT15LCAyPXopXG4gICAgICogQHBhcmFtIHZhbHVlIOimgeiuvue9rueahOWAvFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRDb21wb25lbnQoaW5kZXg6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBzd2l0Y2ggKGluZGV4KSB7XG4gICAgICAgICAgICBjYXNlIDA6IHRoaXMueCA9IHZhbHVlOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTogdGhpcy55ID0gdmFsdWU7IGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOiB0aGlzLnogPSB2YWx1ZTsgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjb21wb25lbnQgaW5kZXg6ICR7aW5kZXh9LiBNdXN0IGJlIDAsIDEsIG9yIDIuYCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKlxuICAgICBBRERJVElPTkFMIEZVTkNUSU9OU1xuICAgICAqL1xuXG4gICAgcHVibGljIGNsb25lKCk6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModGhpcy54LCB0aGlzLnksIHRoaXMueik7XG4gICAgfVxuXG4gICAgcHVibGljIGVxdWFscyh2OiBWZWN0b3IzKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB2LnggPT0gdGhpcy54ICYmIHYueSA9PSB0aGlzLnkgJiYgdi56ID09IHRoaXMuejtcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiW1wiICsgdGhpcy54ICsgXCIsIFwiICsgdGhpcy55ICsgXCIsIFwiICsgdGhpcy56ICsgXCJdXCI7XG4gICAgfVxuXG4gICAgLypcbiAgICAgU1RBVElDIEZVTkNUSU9OU1xuICAgICAqL1xuXG4gICAgcHVibGljIHN0YXRpYyBhZGQodjE6IFZlY3RvcjMsIHYyOiBWZWN0b3IzKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh2MS54ICsgdjIueCwgdjEueSArIHYyLnksIHYxLnogKyB2Mi56KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHN1YnRyYWN0KHYxOiBWZWN0b3IzLCB2MjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModjEueCAtIHYyLngsIHYxLnkgLSB2Mi55LCB2MS56IC0gdjIueik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBtdWx0aXBseSh2MTogVmVjdG9yMywgdjI6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKHYxLnggKiB2Mi54LCB2MS55ICogdjIueSwgdjEueiAqIHYyLnopO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZGl2aWRlKHYxOiBWZWN0b3IzLCB2MjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjModjEueCAvIHYyLngsIHYxLnkgLyB2Mi55LCB2MS56IC8gdjIueik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBtdWx0aXBseVNjYWxhcih2MTogVmVjdG9yMywgczogbnVtYmVyKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh2MS54ICogcywgdjEueSAqIHMsIHYxLnogKiBzKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGxlcnAodjE6IFZlY3RvcjMsIHYyOiBWZWN0b3IzLCB0OiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICAgICAgdmFyIHYgPSBuZXcgVmVjdG9yMygpO1xuICAgICAgICB2LnggPSB2MS54ICsgdCAqICh2Mi54IC0gdjEueCk7XG4gICAgICAgIHYueSA9IHYxLnkgKyB0ICogKHYyLnkgLSB2MS55KTtcbiAgICAgICAgdi56ID0gdjEueiArIHQgKiAodjIueiAtIHYxLnopO1xuICAgICAgICByZXR1cm4gdjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlZmxlY3QodjogVmVjdG9yMywgbjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gVmVjdG9yMy5zdWJ0cmFjdCh2LCBWZWN0b3IzLm11bHRpcGx5U2NhbGFyKG4sIDIgKiBWZWN0b3IzLmRvdCh2LCBuKSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZG90KHYxOiBWZWN0b3IzLCB2MjogVmVjdG9yMyk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAodjEueCAqIHYyLnggKyB2MS55ICogdjIueSArIHYxLnogKiB2Mi56KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyb3NzKHYxOiBWZWN0b3IzLCB2MjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICB2YXIgeCA9IHYxLnkgKiB2Mi56IC0gdjEueiAqIHYyLnk7XG4gICAgICAgIHZhciB5ID0gdjEueiAqIHYyLnggLSB2MS54ICogdjIuejtcbiAgICAgICAgdmFyIHogPSB2MS54ICogdjIueSAtIHYxLnkgKiB2Mi54O1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoeCwgeSwgeik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBkaXN0YW5jZSh2MTogVmVjdG9yMywgdjI6IFZlY3RvcjMpOiBudW1iZXIge1xuICAgICAgICB2YXIgeCA9IHYyLnggLSB2MS54O1xuICAgICAgICB2YXIgeSA9IHYyLnkgLSB2MS55O1xuICAgICAgICB2YXIgeiA9IHYyLnogLSB2MS56O1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBkaWZmZXJlbmNlKHYxOiBWZWN0b3IzLCB2MjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICB2YXIgZGVzdCA9IG5ldyBWZWN0b3IzKCk7XG5cbiAgICAgICAgZGVzdC54ID0gdjEueCAtIHYyLnhcbiAgICAgICAgZGVzdC55ID0gdjEueSAtIHYyLnlcbiAgICAgICAgZGVzdC56ID0gdjEueiAtIHYyLnpcblxuICAgICAgICByZXR1cm4gZGVzdFxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgYW5nbGUodjE6IFZlY3RvcjMsIHYyOiBWZWN0b3IzKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGguYWNvcyhWZWN0b3IzLmRvdCh2MSwgdjIpIC8gKHYxLm1hZ25pdHVkZSAqIHYyLm1hZ25pdHVkZSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbm9ybWFsaXplKHY6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHYubWFnbml0dWRlO1xuICAgICAgICBpZiAobGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKCk7XG4gICAgICAgIHJldHVybiBWZWN0b3IzLm11bHRpcGx5U2NhbGFyKHYsIDEgLyBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOi/lOWbnuS4pOS4quWQkemHj+S4reavj+WvueWIhumHj+eahOi+g+Wwj+WAvOe7hOaIkOeahOaWsOWQkemHj1sxLDJdKEByZWYpXG4gICAgICogQHBhcmFtIGEg56ys5LiA5Liq5ZCR6YePXG4gICAgICogQHBhcmFtIGIg56ys5LqM5Liq5ZCR6YePXG4gICAgICogQHJldHVybnMg55Sx5ZCE5YiG6YeP6L6D5bCP5YC857uE5oiQ55qE5paw5ZCR6YePXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBtaW4oYTogVmVjdG9yMywgYjogVmVjdG9yMyk6IFZlY3RvcjMge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoXG4gICAgICAgICAgICBNYXRoLm1pbihhLngsIGIueCksXG4gICAgICAgICAgICBNYXRoLm1pbihhLnksIGIueSksXG4gICAgICAgICAgICBNYXRoLm1pbihhLnosIGIueilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDov5Tlm57kuKTkuKrlkJHph4/kuK3mr4/lr7nliIbph4/nmoTovoPlpKflgLznu4TmiJDnmoTmlrDlkJHph49bMyw0XShAcmVmKVxuICAgICAqIEBwYXJhbSBhIOesrOS4gOS4quWQkemHj1xuICAgICAqIEBwYXJhbSBiIOesrOS6jOS4quWQkemHj1xuICAgICAqIEByZXR1cm5zIOeUseWQhOWIhumHj+i+g+Wkp+WAvOe7hOaIkOeahOaWsOWQkemHj1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgbWF4KGE6IFZlY3RvcjMsIGI6IFZlY3RvcjMpOiBWZWN0b3IzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKFxuICAgICAgICAgICAgTWF0aC5tYXgoYS54LCBiLngpLFxuICAgICAgICAgICAgTWF0aC5tYXgoYS55LCBiLnkpLFxuICAgICAgICAgICAgTWF0aC5tYXgoYS56LCBiLnopXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgU1RBVElDIFZBUklBQkxFU1xuICAgICAqL1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgWkVSTygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAsIDAsIDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IE9ORSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDEsIDEsIDEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IFJJR0hUKCkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjMoMSwgMCwgMCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgTEVGVCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKC0xLCAwLCAwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBVUCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAsIDEsIDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IERPV04oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygwLCAtMSwgMCk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgRk9SV0FSRCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKDAsIDAsIDEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IEJBQ0soKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMygwLCAwLCAtMSk7XG4gICAgfVxufSIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi9WZWN0b3IzXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vVmVjdG9yMlwiO1xuXG5leHBvcnQgY2xhc3MgVmVjdG9yNCB7XG5cbiAgICBwdWJsaWMgeDogbnVtYmVyO1xuICAgIHB1YmxpYyB5OiBudW1iZXI7XG4gICAgcHVibGljIHo6IG51bWJlcjtcbiAgICBwdWJsaWMgdzogbnVtYmVyO1xuXG4gICAgcHVibGljIGdldCByKCk6IG51bWJlciB7IHJldHVybiB0aGlzLng7IH1cbiAgICBwdWJsaWMgZ2V0IGcoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMueTsgfVxuICAgIHB1YmxpYyBnZXQgYigpOiBudW1iZXIgeyByZXR1cm4gdGhpcy56OyB9XG4gICAgcHVibGljIGdldCBhKCk6IG51bWJlciB7IHJldHVybiB0aGlzLnc7IH1cblxuICAgIHB1YmxpYyBnZXQgdmVjdG9yMygpOiBWZWN0b3IzIHsgcmV0dXJuIG5ldyBWZWN0b3IzKHRoaXMpOyB9XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlciwgdzogbnVtYmVyKTtcbiAgICBwdWJsaWMgY29uc3RydWN0b3IodjogVmVjdG9yMik7XG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHY6IFZlY3RvcjMpO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih2OiBWZWN0b3IzLCB3OiBudW1iZXIpO1xuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIFZlY3RvcjIpIHtcbiAgICAgICAgICAgIHRoaXMueCA9IGFyZ3VtZW50c1swXS54O1xuICAgICAgICAgICAgdGhpcy55ID0gYXJndW1lbnRzWzBdLnk7XG4gICAgICAgICAgICB0aGlzLnogPSB0aGlzLncgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIFZlY3RvcjMpIHtcbiAgICAgICAgICAgIHRoaXMueCA9IGFyZ3VtZW50c1swXS54O1xuICAgICAgICAgICAgdGhpcy55ID0gYXJndW1lbnRzWzBdLnk7XG4gICAgICAgICAgICB0aGlzLnogPSBhcmd1bWVudHNbMF0uejtcbiAgICAgICAgICAgIHRoaXMudyA9IGFyZ3VtZW50cy5sZW5ndGggPT0gMiA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSA0KSB7XG4gICAgICAgICAgICB0aGlzLnggPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICB0aGlzLnkgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICB0aGlzLnogPSBhcmd1bWVudHNbMl07XG4gICAgICAgICAgICB0aGlzLncgPSBhcmd1bWVudHNbM107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnggPSB0aGlzLnkgPSB0aGlzLnogPSB0aGlzLncgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLypcbiAgICAgT1BFUkFUSU9OUyBPTiBWRUNUT1JcbiAgICAgKi9cblxuICAgIHB1YmxpYyBhZGQodjogVmVjdG9yNCk6IFZlY3RvcjQge1xuICAgICAgICB0aGlzLnggKz0gdi54O1xuICAgICAgICB0aGlzLnkgKz0gdi55O1xuICAgICAgICB0aGlzLnogKz0gdi56O1xuICAgICAgICB0aGlzLncgKz0gdi53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgc3VidHJhY3QodjogVmVjdG9yNCk6IFZlY3RvcjQge1xuICAgICAgICB0aGlzLnggLT0gdi54O1xuICAgICAgICB0aGlzLnkgLT0gdi55O1xuICAgICAgICB0aGlzLnogLT0gdi56O1xuICAgICAgICB0aGlzLncgLT0gdi53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgbXVsdGlwbHkodjogVmVjdG9yNCk6IFZlY3RvcjQge1xuICAgICAgICB0aGlzLnggKj0gdi54O1xuICAgICAgICB0aGlzLnkgKj0gdi55O1xuICAgICAgICB0aGlzLnogKj0gdi56O1xuICAgICAgICB0aGlzLncgKj0gdi53O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZGl2aWRlKGQ6IG51bWJlcik6IFZlY3RvcjQge1xuICAgICAgICB0aGlzLnggLz0gZDtcbiAgICAgICAgdGhpcy55IC89IGQ7XG4gICAgICAgIHRoaXMueiAvPSBkO1xuICAgICAgICB0aGlzLncgLz0gZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIG11bHRpcGx5U2NhbGFyKGQ6IG51bWJlcik6IFZlY3RvcjQge1xuICAgICAgICB0aGlzLnggKj0gZDtcbiAgICAgICAgdGhpcy55ICo9IGQ7XG4gICAgICAgIHRoaXMueiAqPSBkO1xuICAgICAgICB0aGlzLncgKj0gZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIG5lZ2F0ZSgpOiBWZWN0b3I0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoLTEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBub3JtYWxpemUoKTogVmVjdG9yNCB7XG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLm1hZ25pdHVkZTtcblxuICAgICAgICBpZiAobGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZGl2aWRlKGxlbmd0aCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBtYWduaXR1ZGUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChWZWN0b3I0LmRvdCh0aGlzLCB0aGlzKSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBzcXJNYWduaXR1ZGUoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIFZlY3RvcjQuZG90KHRoaXMsIHRoaXMpO1xuICAgIH1cblxuICAgIC8qXG4gICAgIEFERElUSU9OQUwgRlVOQ1RJT05TXG4gICAgICovXG5cbiAgICBwdWJsaWMgY2xvbmUoKTogVmVjdG9yNCB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh0aGlzLngsIHRoaXMueSwgdGhpcy56LCB0aGlzLncpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlcXVhbHModjogVmVjdG9yNCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdi54ID09IHRoaXMueCAmJiB2LnkgPT0gdGhpcy55ICYmIHYueiA9PSB0aGlzLnogJiYgdi53ID09IHRoaXMudztcbiAgICB9XG5cbiAgICBwdWJsaWMgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiW1wiICsgdGhpcy54ICsgXCIsIFwiICsgdGhpcy55ICsgXCIsIFwiICsgdGhpcy56ICsgXCIsIFwiICsgdGhpcy53ICsgXCJdXCI7XG4gICAgfVxuXG4gICAgLypcbiAgICAgU1RBVElDIEZVTkNUSU9OU1xuICAgICAqL1xuXG4gICAgcHVibGljIHN0YXRpYyBhZGQodjE6IFZlY3RvcjQsIHYyOiBWZWN0b3I0KTogVmVjdG9yNCB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCh2MS54ICsgdjIueCwgdjEueSArIHYyLnksIHYxLnogKyB2Mi56LCB2MS53ICsgdjIudyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzdWJ0cmFjdCh2MTogVmVjdG9yNCwgdjI6IFZlY3RvcjQpOiBWZWN0b3I0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHYxLnggLSB2Mi54LCB2MS55IC0gdjIueSwgdjEueiAtIHYyLnosIHYxLncgLSB2Mi53KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIG11bHRpcGx5KHYxOiBWZWN0b3I0LCB2MjogVmVjdG9yNCk6IFZlY3RvcjQge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQodjEueCAqIHYyLngsIHYxLnkgKiB2Mi55LCB2MS56ICogdjIueiwgdjEudyAqIHYyLncpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZGl2aWRlKHYxOiBWZWN0b3I0LCBzY2FsYXI6IG51bWJlcik6IFZlY3RvcjQge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjQodjEueCAvIHNjYWxhciwgdjEueSAvIHNjYWxhciwgdjEueiAvIHNjYWxhciwgdjEudyAvIHNjYWxhcik7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBtdWx0aXBseVNjYWxhcih2MTogVmVjdG9yNCwgc2NhbGFyOiBudW1iZXIpOiBWZWN0b3I0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3I0KHYxLnggKiBzY2FsYXIsIHYxLnkgKiBzY2FsYXIsIHYxLnogKiBzY2FsYXIsIHYxLncgKiBzY2FsYXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgbGVycCh2MTogVmVjdG9yNCwgdjI6IFZlY3RvcjQsIHQ6IG51bWJlcik6IFZlY3RvcjQge1xuICAgICAgICB2YXIgdiA9IG5ldyBWZWN0b3I0KCk7XG4gICAgICAgIHYueCA9IHYxLnggKyB0ICogKHYyLnggLSB2MS54KTtcbiAgICAgICAgdi55ID0gdjEueSArIHQgKiAodjIueSAtIHYxLnkpO1xuICAgICAgICB2LnogPSB2MS56ICsgdCAqICh2Mi56IC0gdjEueik7XG4gICAgICAgIHYudyA9IHYxLncgKyB0ICogKHYyLncgLSB2MS53KTtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBkb3QodjE6IFZlY3RvcjQsIHYyOiBWZWN0b3I0KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh2MS54ICogdjIueCArIHYxLnkgKiB2Mi55ICsgdjEueiAqIHYyLnogKyB2MS53ICogdjIudyk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBkaXN0YW5jZSh2MTogVmVjdG9yNCwgdjI6IFZlY3RvcjQpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KFZlY3RvcjQuZG90KHYxLCB2MikpO1xuICAgIH1cblxuICAgIC8qXG4gICAgIFNUQVRJQyBWQVJJQUJMRVNcbiAgICAgKi9cblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IFpFUk8oKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCgwLCAwLCAwLCAwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBPTkUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNCgxLCAxLCAxLCAxKTtcbiAgICB9XG59IiwiaW1wb3J0ICogYXMgQ0FOTk9OIGZyb20gJ2Nhbm5vbic7XG5pbXBvcnQgeyBUaW1lIH0gZnJvbSAnLi4vQ29yZS9UaW1lJztcbmltcG9ydCB7IFJheWNhc3RIaXQgfSBmcm9tICcuL1JheWNhc3RIaXQnO1xuaW1wb3J0IHsgUmF5IH0gZnJvbSAnLi4vTWF0aC9SYXknO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gJy4uL01hdGgvVmVjdG9yMyc7XG5pbXBvcnQgeyBDb2xsaWRlciB9IGZyb20gJy4uL0NvbXBvbmVudC9Db2xsaWRlcic7XG5pbXBvcnQgeyBSaWdpZGJvZHkgfSBmcm9tICcuLi9Db21wb25lbnQvUmlnaWRCb2R5JztcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tICcuLi9NYXRoL1F1YXRlcm5pb24nO1xuaW1wb3J0IHsgQm94Q29sbGlkZXIsIEJveENvbGxpZGVyRGF0YSB9IGZyb20gJy4uL0NvbXBvbmVudC9Cb3hDb2xsaWRlcic7XG5pbXBvcnQgeyBTcGhlcmVDb2xsaWRlciwgU3BoZXJlQ29sbGlkZXJEYXRhIH0gZnJvbSAnLi4vQ29tcG9uZW50L1NwaGVyZUNvbGxpZGVyJztcblxuZXhwb3J0IGNsYXNzIFBoeXNpY3Mge1xuICAgIHByaXZhdGUgd29ybGQ6IENBTk5PTi5Xb3JsZDtcbiAgICBwcml2YXRlIHJpZ2lkYm9kaWVzOiBNYXA8UmlnaWRib2R5LCBDQU5OT04uQm9keT4gPSBuZXcgTWFwKCk7ICAgICAgIC8vIOWImuS9k+WSjOeJqeeQhuS9k+eahOaYoOWwhFxuICAgIHByaXZhdGUgY29sbGlkZXJzOiBNYXA8Q29sbGlkZXIsIENBTk5PTi5TaGFwZT4gPSBuZXcgTWFwKCk7ICAgICAgICAgLy8g56Kw5pKe5L2T5ZKM54mp55CG5b2i54q255qE5pig5bCEXG4gICAgcHJpdmF0ZSBzaGFwZXM6IE1hcDxDQU5OT04uU2hhcGUsIENBTk5PTi5Cb2R5PiA9IG5ldyBNYXAoKTsgICAgICAgICAvLyDniannkIblvaLnirblkozniannkIbkvZPnmoTmmKDlsIRcbiAgICBwcml2YXRlIHNoYXBlSWRUb0NvbGxpZGVyTWFwOiBNYXA8bnVtYmVyLCBDb2xsaWRlcj4gPSBuZXcgTWFwKCk7ICAgIC8vIOW9oueKtklE5ZKM56Kw5pKe5L2T55qE5pig5bCEXG5cbiAgICAvLyDph43liptcbiAgICBwdWJsaWMgZ2V0IGdyYXZpdHkoKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yMyh0aGlzLndvcmxkLmdyYXZpdHkueCwgdGhpcy53b3JsZC5ncmF2aXR5LnksIHRoaXMud29ybGQuZ3Jhdml0eS56KTtcbiAgICB9XG4gICAgcHVibGljIHNldCBncmF2aXR5KHZhbHVlOiBWZWN0b3IzKSB7XG4gICAgICAgIHRoaXMud29ybGQuZ3Jhdml0eS5zZXQodmFsdWUueCwgdmFsdWUueSwgdmFsdWUueik7XG4gICAgfVxuXG4gICAgLy8g54mp55CG5Y+C5pWwXG4gICAgcHVibGljIG1pblBlbmV0cmF0aW9uRm9yUGVuYWx0eTogbnVtYmVyID0gMC4wNTtcbiAgICBwdWJsaWMgYm91bmNlVGhyZXNob2xkOiBudW1iZXIgPSAwLjU7XG4gICAgcHVibGljIHNsZWVwVmVsb2NpdHk6IG51bWJlciA9IDAuMTQ7XG4gICAgcHVibGljIHNsZWVwQW5ndWxhclZlbG9jaXR5OiBudW1iZXIgPSAwLjE0O1xuICAgIHB1YmxpYyBtYXhBbmd1bGFyVmVsb2NpdHk6IG51bWJlciA9IDc7XG4gICAgcHVibGljIHNvbHZlckl0ZXJhdGlvbkNvdW50OiBudW1iZXIgPSA2O1xuXG4gICAgcHVibGljIGluaXQoKTogdm9pZCB7XG4gICAgICAgIC8vIOWIm+W7uueJqeeQhuS4lueVjFxuICAgICAgICB0aGlzLndvcmxkID0gbmV3IENBTk5PTi5Xb3JsZCgpO1xuICAgICAgICB0aGlzLndvcmxkLmdyYXZpdHkuc2V0KDAsIC05LjgyLCAwKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICB0aGlzLndvcmxkLmJyb2FkcGhhc2UgPSBuZXcgQ0FOTk9OLk5haXZlQnJvYWRwaGFzZSgpOyAgICAgIC8vIOeisOaSnuajgOa1i+eul+azlVxuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHRoaXMud29ybGQuc29sdmVyLml0ZXJhdGlvbnMgPSAxMDsgICAgICAgICAgICAgICAgICAgICAgICAgLy8g57qm5p2f5rGC6Kej6L+t5Luj5qyh5pWw77yM5b2x5ZON57K+5bqmXG4gICAgICAgIHRoaXMud29ybGQuYWxsb3dTbGVlcCA9IHRydWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5YWB6K6454mp5L2T6L+b5YWl552h55yg54q25oCBIFxuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy53b3JsZCkgcmV0dXJuO1xuICAgICAgICAvLyDmm7TmlrDniannkIbkuJbnlYxcbiAgICAgICAgdGhpcy53b3JsZC5zdGVwKFRpbWUuZml4ZWREZWx0YVRpbWUpO1xuICAgICAgICAvLyDmm7TmlrDliJrkvZPkvY3nva7lkozml4vovaxcbiAgICAgICAgZm9yIChjb25zdCBbcmlnaWRib2R5LCBib2R5XSBvZiB0aGlzLnJpZ2lkYm9kaWVzKSB7XG4gICAgICAgICAgICBjb25zdCBwb3MgPSBib2R5LnBvc2l0aW9uO1xuICAgICAgICAgICAgY29uc3Qgcm90ID0gYm9keS5xdWF0ZXJuaW9uO1xuICAgICAgICAgICAgcmlnaWRib2R5LnRyYW5zZm9ybS5wb3NpdGlvbiA9IG5ldyBWZWN0b3IzKHBvcy54LCBwb3MueSwgcG9zLnopO1xuICAgICAgICAgICAgcmlnaWRib2R5LnRyYW5zZm9ybS5yb3RhdGlvbiA9IG5ldyBRdWF0ZXJuaW9uKHJvdC54LCByb3QueSwgcm90LnosIHJvdC53KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgfVxuXG4gICAgcHVibGljIENyZWF0ZVJpZ2lkYm9keShyaWdpZGJvZHk6IFJpZ2lkYm9keSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5yaWdpZGJvZGllcy5oYXMocmlnaWRib2R5KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdSaWdpZGJvZHkgYWxyZWFkeSBhZGRlZDonLCByaWdpZGJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYm9keSA9IG5ldyBDQU5OT04uQm9keSh7XG4gICAgICAgICAgICBtYXNzOiByaWdpZGJvZHkuaXNLaW5lbWF0aWMgPyAwIDogcmlnaWRib2R5Lm1hc3MsXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IENBTk5PTi5WZWMzKHJpZ2lkYm9keS50cmFuc2Zvcm0ucG9zaXRpb24ueCwgcmlnaWRib2R5LnRyYW5zZm9ybS5wb3NpdGlvbi55LCByaWdpZGJvZHkudHJhbnNmb3JtLnBvc2l0aW9uLnopLFxuICAgICAgICAgICAgcXVhdGVybmlvbjogbmV3IENBTk5PTi5RdWF0ZXJuaW9uKHJpZ2lkYm9keS50cmFuc2Zvcm0ucm90YXRpb24ueCwgcmlnaWRib2R5LnRyYW5zZm9ybS5yb3RhdGlvbi55LCByaWdpZGJvZHkudHJhbnNmb3JtLnJvdGF0aW9uLnosIHJpZ2lkYm9keS50cmFuc2Zvcm0ucm90YXRpb24udyksXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAgIHRoaXMud29ybGQuYWRkQm9keShib2R5KTtcbiAgICAgICAgICAgIHRoaXMucmlnaWRib2RpZXMuc2V0KHJpZ2lkYm9keSwgYm9keSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgUmVtb3ZlUmlnaWRib2R5KHJpZ2lkYm9keTogUmlnaWRib2R5KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLnJpZ2lkYm9kaWVzLmdldChyaWdpZGJvZHkpO1xuICAgICAgICBpZiAoYm9keSkge1xuICAgICAgICAgICAgdGhpcy53b3JsZC5yZW1vdmUoYm9keSk7XG4gICAgICAgICAgICB0aGlzLnJpZ2lkYm9kaWVzLmRlbGV0ZShyaWdpZGJvZHkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIENyZWF0ZUNvbGxpZGVyKGNvbGxpZGVyOiBDb2xsaWRlcik6IHZvaWQge1xuICAgICAgICBjb25zdCByaWdpZGJvZHkgPSBjb2xsaWRlci5hdHRhY2hlZFJpZ2lkYm9keTtcbiAgICAgICAgaWYgKCFyaWdpZGJvZHkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvbGxpZGVyIG5vdCBhdHRhY2hlZCB0byBhIFJpZ2lkYm9keTonLCBjb2xsaWRlcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlpoLmnpzlt7Lnu4/lrZjlnKjvvIzliJnlhYjplIDmr4Hml6fnmoTlho3mlrDlu7pcbiAgICAgICAgaWYgKHRoaXMuY29sbGlkZXJzLmhhcyhjb2xsaWRlcikpIHtcbiAgICAgICAgICAgIHRoaXMuUmVtb3ZlQ29sbGlkZXIoY29sbGlkZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYm9keSA9IHRoaXMucmlnaWRib2RpZXMuZ2V0KHJpZ2lkYm9keSk7XG4gICAgICAgIGlmIChib2R5KSB7XG4gICAgICAgICAgICBsZXQgc2hhcGU6IENBTk5PTi5TaGFwZSB8IG51bGwgPSBudWxsO1xuICAgICAgICAgICAgY29uc3QgY29sbGlkZXJEYXRhID0gY29sbGlkZXIuZ2V0Q29sbGlkZXJEYXRhKCk7XG4gICAgICAgICAgICBpZiAoY29sbGlkZXIgaW5zdGFuY2VvZiBCb3hDb2xsaWRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJveERhdGEgPSBjb2xsaWRlckRhdGEgYXMgQm94Q29sbGlkZXJEYXRhO1xuICAgICAgICAgICAgICAgIHNoYXBlID0gbmV3IENBTk5PTi5Cb3gobmV3IENBTk5PTi5WZWMzKGJveERhdGEuc2l6ZS54IC8gMiwgYm94RGF0YS5zaXplLnkgLyAyLCBib3hEYXRhLnNpemUueiAvIDIpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sbGlkZXIgaW5zdGFuY2VvZiBTcGhlcmVDb2xsaWRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNwaGVyZURhdGEgPSBjb2xsaWRlckRhdGEgYXMgU3BoZXJlQ29sbGlkZXJEYXRhO1xuICAgICAgICAgICAgICAgIHNoYXBlID0gbmV3IENBTk5PTi5TcGhlcmUoc3BoZXJlRGF0YS5yYWRpdXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNoYXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBuZXcgQ0FOTk9OLlZlYzMoY29sbGlkZXIuY2VudGVyLngsIGNvbGxpZGVyLmNlbnRlci55LCBjb2xsaWRlci5jZW50ZXIueik7XG4gICAgICAgICAgICAgICAgYm9keS5hZGRTaGFwZShzaGFwZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNoYXBlcy5zZXQoc2hhcGUsIGJvZHkpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29sbGlkZXJzLnNldChjb2xsaWRlciwgc2hhcGUpO1xuICAgICAgICAgICAgICAgIC8vIOi/memHjOmcgOimgeeJueWIq+azqOaEj++8jOeisOaSnuaIluWwhOe6v+ajgOa1i+eahOW9oueKtu+8jOW5tuS4jeS4gOWumuaYr+eOsOWcqOa3u+WKoOeahFNoYXBl77yM5L6L5aaCQm9477yM5Lya5pyJ5LiA5Liq5Ye45aSa6L655b2i5Luj55CG77yM5bCE57q/5qOA5rWL5piv5Lul5a6D5Li655uu5qCH6K6h566X55qEXG4gICAgICAgICAgICAgICAgaWYgKHNoYXBlIGluc3RhbmNlb2YgQ0FOTk9OLkJveCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYXBlSWRUb0NvbGxpZGVyTWFwLnNldCgoc2hhcGUgYXMgQ0FOTk9OLkJveCkuY29udmV4UG9seWhlZHJvblJlcHJlc2VudGF0aW9uLmlkLCBjb2xsaWRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNoYXBlSWRUb0NvbGxpZGVyTWFwLnNldChzaGFwZS5pZCwgY29sbGlkZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1JpZ2lkYm9keSBub3QgZm91bmQ6JywgcmlnaWRib2R5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBSZWJ1aWxkQ29sbGlkZXJzKGNvbGxpZGVyOiBDb2xsaWRlcik6IHZvaWQge1xuICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMuY29sbGlkZXJzLmdldChjb2xsaWRlcik7XG4gICAgICAgIGlmIChzaGFwZSA9PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5SZW1vdmVDb2xsaWRlcihjb2xsaWRlcik7XG4gICAgICAgIHRoaXMuQ3JlYXRlQ29sbGlkZXIoY29sbGlkZXIpO1xuICAgICAgICAvLyDlvLrliLbmm7TmlrDnorDmkp7mo4DmtYvkv6Hmga9cbiAgICAgICAgLy9UT0RPOuenu+mZpOW9oueKtuWQju+8jOS4juWug+ebuOmCu+eahOeJqeS9k+S4jeS8muiiq+a/gOa0u++8jOi/meS4jeespuWQiOW4uOeQhu+8jOaaguaXtuS4jeefpemBk+aAjuS5iOino+WGs++8jOi/memHjOaJi+WKqOWUpOmGkuS4i+WFqOmDqOeahOeJqeS9k1xuICAgICAgICB0aGlzLndvcmxkLmJvZGllcy5mb3JFYWNoKGJvZHkgPT4ge1xuICAgICAgICAgICAgYm9keS53YWtlVXAoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIFJlbW92ZUNvbGxpZGVyKGNvbGxpZGVyOiBDb2xsaWRlcik6IHZvaWQge1xuICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMuY29sbGlkZXJzLmdldChjb2xsaWRlcik7XG4gICAgICAgIGlmIChzaGFwZSA9PSBudWxsKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLnNoYXBlcy5nZXQoc2hhcGUpO1xuICAgICAgICBpZiAoYm9keSA9PSBudWxsKSByZXR1cm47XG5cbiAgICAgICAgLy8gMS4g5om+5Yiw55uu5qCH5b2i54q255qE57Si5byVXG4gICAgICAgIGNvbnN0IGluZGV4ID0gYm9keS5zaGFwZXMuaW5kZXhPZihzaGFwZSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybjsgLy8g5b2i54q25LiN5a2Y5Zyo5YiZ6YCA5Ye6XG5cbiAgICAgICAgLy8gMi4g56e76Zmk5b2i54q25Y+K5a+55bqU55qE5YGP56e75ZKM5peL6L2s5L+h5oGvXG4gICAgICAgIGJvZHkuc2hhcGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIGJvZHkuc2hhcGVPZmZzZXRzLnNwbGljZShpbmRleCwgMSk7IC8vIOenu+mZpOWvueW6lOeahOWBj+enu1xuICAgICAgICBib2R5LnNoYXBlT3JpZW50YXRpb25zLnNwbGljZShpbmRleCwgMSk7IC8vIOenu+mZpOWvueW6lOeahOaXi+i9rFxuXG4gICAgICAgIC8vIDMuIOWmguaenOaYr+WKqOaAgeWImuS9k++8jOmHjeaWsOiuoeeul+aDr+aAp1xuICAgICAgICBpZiAoYm9keS5tYXNzID4gMCkge1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gNC4g5by65Yi25pu05paw56Kw5pKe5qOA5rWL5L+h5oGvXG4gICAgICAgIC8vIGJvZHkuYWFiYk5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgLy9UT0RPOuenu+mZpOW9oueKtuWQju+8jOS4juWug+ebuOmCu+eahOeJqeS9k+S4jeS8muiiq+a/gOa0u++8jOi/meS4jeespuWQiOW4uOeQhu+8jOaaguaXtuS4jeefpemBk+aAjuS5iOino+WGs++8jOi/memHjOaJi+WKqOWUpOmGkuS4i+WFqOmDqOeahOeJqeS9k1xuICAgICAgICB0aGlzLndvcmxkLmJvZGllcy5mb3JFYWNoKGJvZHkgPT4ge1xuICAgICAgICAgICAgYm9keS53YWtlVXAoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5zaGFwZXMuZGVsZXRlKHNoYXBlKTtcbiAgICAgICAgdGhpcy5jb2xsaWRlcnMuZGVsZXRlKGNvbGxpZGVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgUmF5Y2FzdChcbiAgICAgICAgcmF5OiBSYXksXG4gICAgICAgIGRpc3RhbmNlOiBudW1iZXIgPSAxMCxcbiAgICAgICAgbGF5ZXJNYXNrPzogbnVtYmVyLFxuICAgICk6IFJheWNhc3RIaXQgfCBudWxsIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IENBTk5PTi5SYXljYXN0UmVzdWx0KCk7XG4gICAgICAgIGNvbnN0IGZyb20gPSBuZXcgQ0FOTk9OLlZlYzMocmF5Lm9yaWdpbi54LCByYXkub3JpZ2luLnksIHJheS5vcmlnaW4ueik7XG4gICAgICAgIGNvbnN0IHRvID0gbmV3IENBTk5PTi5WZWMzKHJheS5hdChkaXN0YW5jZSkueCwgcmF5LmF0KGRpc3RhbmNlKS55LCByYXkuYXQoZGlzdGFuY2UpLnopO1xuICAgICAgICB0aGlzLndvcmxkLnJheVRlc3QoZnJvbSwgdG8sIHJlc3VsdCk7XG5cbiAgICAgICAgLy8gdGhpcy53b3JsZC5yYXljYXN0QWxsKGZyb20sIHRvLCB7XG4gICAgICAgIC8vIH0sIChyKSA9PiB7XG4gICAgICAgIC8vICAgICBjb25zdCByZSA9IHIgYXMgQ0FOTk9OLlJheWNhc3RSZXN1bHQ7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhyZS5zaGFwZT8uaWQpO1xuICAgICAgICAvLyB9KTtcblxuICAgICAgICBpZiAocmVzdWx0Lmhhc0hpdCAmJiByZXN1bHQuc2hhcGUpIHtcbiAgICAgICAgICAgIC8vIOazqOaEj++8jHJlc3VsdC5zaGFwZeW5tuS4jeS4gOWumuS8muaYr+WOn+adpea3u+WKoOeahFNoYXBl77yM5L6L5aaCQm9477yM5Lya5pyJ5LiA5Liq5Ye45aSa6L655b2i5Luj55CG77yM5YWI5YmN5Yib5bu6Qm9455qE5pe25YCZ5bey57uP5Zyoc2hhcGVJZFRvQ29sbGlkZXJNYXDph4znvJPlhrLov5nkuKrku6PnkIbnmoRJROS6hlxuICAgICAgICAgICAgY29uc3QgY29sbGlkZXIgPSB0aGlzLnNoYXBlSWRUb0NvbGxpZGVyTWFwLmdldChyZXN1bHQuc2hhcGUuaWQpO1xuICAgICAgICAgICAgaWYgKCFjb2xsaWRlcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvbGxpZGVyIG5vdCBmb3VuZCBmb3Igc2hhcGU6JywgcmVzdWx0LnNoYXBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGhpdCA9IFJheWNhc3RIaXQuY3JlYXRlKFxuICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IzKHJlc3VsdC5oaXRQb2ludFdvcmxkLngsIHJlc3VsdC5oaXRQb2ludFdvcmxkLnksIHJlc3VsdC5oaXRQb2ludFdvcmxkLnopLFxuICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IzKHJlc3VsdC5oaXROb3JtYWxXb3JsZC54LCByZXN1bHQuaGl0Tm9ybWFsV29ybGQueSwgcmVzdWx0LmhpdE5vcm1hbFdvcmxkLnopLFxuICAgICAgICAgICAgICAgIHJlc3VsdC5kaXN0YW5jZSxcbiAgICAgICAgICAgICAgICBjb2xsaWRlcixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gaGl0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIOmAmui/hyBSYXkg5a+56LGh5qOA5rWL5omA5pyJ5bCE57q/56Kw5pKeXG4gICAgcHVibGljIFJheWNhc3RBbGwoXG4gICAgICAgIHJheTogUmF5LFxuICAgICAgICBkaXN0YW5jZTogbnVtYmVyID0gSW5maW5pdHksXG4gICAgICAgIGxheWVyTWFzazogbnVtYmVyXG4gICAgKTogUmF5Y2FzdEhpdFtdIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgQ29sbGlkZXIgfSBmcm9tIFwiLi4vQ29tcG9uZW50L0NvbGxpZGVyXCI7XG5pbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tIFwiLi4vQ29yZS9UcmFuc2Zvcm1cIjtcbmltcG9ydCB7IFJpZ2lkYm9keSB9IGZyb20gXCIuLi9Db21wb25lbnQvUmlnaWRCb2R5XCI7XG5cbi8qKlxuICogU3RydWN0dXJlIHVzZWQgdG8gZ2V0IGluZm9ybWF0aW9uIGJhY2sgZnJvbSBhIHJheWNhc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBSYXljYXN0SGl0IHtcbiAgICBwcml2YXRlIG1fUG9pbnQ6IFZlY3RvcjMgPSBWZWN0b3IzLlpFUk87XG4gICAgcHJpdmF0ZSBtX05vcm1hbDogVmVjdG9yMyA9IFZlY3RvcjMuWkVSTztcbiAgICBwcml2YXRlIG1fRGlzdGFuY2U6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBtX0NvbGxpZGVyOiBDb2xsaWRlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBDb2xsaWRlciB0aGF0IHdhcyBoaXQuXG4gICAgICovXG4gICAgcHVibGljIGdldCBjb2xsaWRlcigpOiBDb2xsaWRlciB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5tX0NvbGxpZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBpbXBhY3QgcG9pbnQgaW4gd29ybGQgc3BhY2Ugd2hlcmUgdGhlIHJheSBoaXQgdGhlIGNvbGxpZGVyLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgcG9pbnQoKTogVmVjdG9yMyB7XG4gICAgICAgIHJldHVybiB0aGlzLm1fUG9pbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG5vcm1hbCBvZiB0aGUgc3VyZmFjZSB0aGUgcmF5IGhpdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG5vcm1hbCgpOiBWZWN0b3IzIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubV9Ob3JtYWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGRpc3RhbmNlIGZyb20gdGhlIHJheSdzIG9yaWdpbiB0byB0aGUgaW1wYWN0IHBvaW50LlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgZGlzdGFuY2UoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubV9EaXN0YW5jZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgVHJhbnNmb3JtIG9mIHRoZSByaWdpZGJvZHkgb3IgY29sbGlkZXIgdGhhdCB3YXMgaGl0LlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdHJhbnNmb3JtKCk6IFRyYW5zZm9ybSB8IG51bGwge1xuICAgICAgICBjb25zdCByYiA9IHRoaXMucmlnaWRib2R5O1xuICAgICAgICBpZiAocmIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiByYi50cmFuc2Zvcm07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb2wgPSB0aGlzLmNvbGxpZGVyO1xuICAgICAgICBpZiAoY29sICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sLnRyYW5zZm9ybTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBSaWdpZGJvZHkgb2YgdGhlIGNvbGxpZGVyIHRoYXQgd2FzIGhpdC4gSWYgdGhlIGNvbGxpZGVyIGlzIG5vdCBhdHRhY2hlZCB0b1xuICAgICAqIGEgcmlnaWRib2R5IHRoZW4gaXQgaXMgbnVsbC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHJpZ2lkYm9keSgpOiBSaWdpZGJvZHkgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubV9Db2xsaWRlcj8uYXR0YWNoZWRSaWdpZGJvZHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBSYXljYXN0SGl0IHdpdGggZGVmYXVsdCB2YWx1ZXMuXG4gICAgICovXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFJheWNhc3RIaXQgd2l0aCB0aGUgc3BlY2lmaWVkIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0gcG9pbnQgVGhlIGltcGFjdCBwb2ludFxuICAgICAqIEBwYXJhbSBub3JtYWwgVGhlIHN1cmZhY2Ugbm9ybWFsXG4gICAgICogQHBhcmFtIGRpc3RhbmNlIFRoZSBkaXN0YW5jZSBmcm9tIG9yaWdpblxuICAgICAqIEBwYXJhbSBjb2xsaWRlckluc3RhbmNlSUQgVGhlIGNvbGxpZGVyIGluc3RhbmNlIElEXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoXG4gICAgICAgIHBvaW50OiBWZWN0b3IzLFxuICAgICAgICBub3JtYWw6IFZlY3RvcjMsXG4gICAgICAgIGRpc3RhbmNlOiBudW1iZXIsXG4gICAgICAgIGNvbGxpZGVyOiBDb2xsaWRlcixcbiAgICApOiBSYXljYXN0SGl0IHtcbiAgICAgICAgY29uc3QgaGl0ID0gbmV3IFJheWNhc3RIaXQoKTtcbiAgICAgICAgaGl0Lm1fUG9pbnQgPSBwb2ludDtcbiAgICAgICAgaGl0Lm1fTm9ybWFsID0gbm9ybWFsO1xuICAgICAgICBoaXQubV9EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICBoaXQubV9Db2xsaWRlciA9IGNvbGxpZGVyO1xuICAgICAgICByZXR1cm4gaGl0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIFJheWNhc3RIaXQuXG4gICAgICovXG4gICAgcHVibGljIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgUmF5Y2FzdEhpdChwb2ludDogJHt0aGlzLnBvaW50fSwgbm9ybWFsOiAke3RoaXMubm9ybWFsfSwgZGlzdGFuY2U6ICR7dGhpcy5kaXN0YW5jZX0sIGNvbGxpZGVyOiAke3RoaXMuY29sbGlkZXI/LmdhbWVPYmplY3Q/Lm5hbWUgfHwgJ251bGwnfSlgO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9NYXRoL0NvbG9yXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yMlwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3I0XCI7XG5pbXBvcnQgeyBNYXRyaXg0eDQgfSBmcm9tIFwiLi4vTWF0aC9NYXRyaXg0eDRcIjtcbmltcG9ydCB7IEZyYWdtZW50LCBUcmlhbmdsZVJhc3Rlcml6ZXIgfSBmcm9tIFwiLi9UcmlhbmdsZVJhc3Rlcml6ZXJcIjtcbmltcG9ydCB7IFZlcnRleEF0dHJpYnV0ZXMgfSBmcm9tIFwiLi4vUmVuZGVyZXIvUmVuZGVyZXJEZWZpbmVcIjtcblxuZXhwb3J0IGNsYXNzIEJhcnljZW50cmljVHJpYW5nbGVSYXN0ZXJpemVyIGV4dGVuZHMgVHJpYW5nbGVSYXN0ZXJpemVyIHtcbiAgICAvKipcbiAgICAgKiDorqHnrpfngrkgcCDlnKjkuInop5LlvaIgKHYwLCB2MSwgdjIpIOS4reeahOmHjeW/g+WdkOagh+OAglxuICAgICAqIEBwYXJhbSBwIOebruagh+eCue+8iDJEIOWdkOagh++8iVxuICAgICAqIEBwYXJhbSB2MCDkuInop5LlvaLpobbngrkw77yIMkQg5Z2Q5qCH77yJXG4gICAgICogQHBhcmFtIHYxIOS4ieinkuW9oumhtueCuTHvvIgyRCDlnZDmoIfvvIlcbiAgICAgKiBAcGFyYW0gdjIg5LiJ6KeS5b2i6aG254K5Mu+8iDJEIOWdkOagh++8iVxuICAgICAqIEByZXR1cm5zIOmHjeW/g+WdkOaghyBbYWxwaGEsIGJldGEsIGdhbW1hXVxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGNvbXB1dGVCYXJ5Y2VudHJpY0Nvb3JkcyhcbiAgICAgICAgcDogW251bWJlciwgbnVtYmVyXSxcbiAgICAgICAgdjA6IFZlY3RvcjMsXG4gICAgICAgIHYxOiBWZWN0b3IzLFxuICAgICAgICB2MjogVmVjdG9yM1xuICAgICk6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSB7XG4gICAgICAgIGNvbnN0IFt4LCB5XSA9IHA7XG5cbiAgICAgICAgLy8g6K6h566X5pW05Liq5LiJ6KeS5b2i55qE6Z2i56ev77yI55qE5Lik5YCN77yM5pyJ56ym5Y+377yJXG4gICAgICAgIGNvbnN0IGFyZWFBQkMgPSAodjEueCAtIHYwLngpICogKHYyLnkgLSB2MC55KSAtICh2Mi54IC0gdjAueCkgKiAodjEueSAtIHYwLnkpO1xuXG4gICAgICAgIC8vIOiuoeeul+WtkOS4ieinkuW9oiBQQkMg55qE6Z2i56ev77yI55qE5Lik5YCN77yM5pyJ56ym5Y+377yJXG4gICAgICAgIGNvbnN0IGFyZWFQQkMgPSAodjEueCAtIHgpICogKHYyLnkgLSB5KSAtICh2Mi54IC0geCkgKiAodjEueSAtIHkpO1xuICAgICAgICBjb25zdCBhbHBoYSA9IGFyZWFQQkMgLyBhcmVhQUJDO1xuXG4gICAgICAgIC8vIOiuoeeul+WtkOS4ieinkuW9oiBQQ0Eg55qE6Z2i56ev77yI55qE5Lik5YCN77yM5pyJ56ym5Y+377yJXG4gICAgICAgIGNvbnN0IGFyZWFQQ0EgPSAodjIueCAtIHgpICogKHYwLnkgLSB5KSAtICh2MC54IC0geCkgKiAodjIueSAtIHkpO1xuICAgICAgICBjb25zdCBiZXRhID0gYXJlYVBDQSAvIGFyZWFBQkM7XG5cbiAgICAgICAgLy8g6K6h566X5a2Q5LiJ6KeS5b2iIFBBQiDnmoTpnaLnp6/vvIjnmoTkuKTlgI3vvIzmnInnrKblj7fvvIlcbiAgICAgICAgY29uc3QgYXJlYVBBQiA9ICh2MC54IC0geCkgKiAodjEueSAtIHkpIC0gKHYxLnggLSB4KSAqICh2MC55IC0geSk7XG4gICAgICAgIGNvbnN0IGdhbW1hID0gYXJlYVBBQiAvIGFyZWFBQkM7XG4gICAgICAgIC8vIOaIluiAhSBnYW1tYSA9IDEgLSBhbHBoYSAtIGJldGE7XG5cbiAgICAgICAgcmV0dXJuIFthbHBoYSwgYmV0YSwgZ2FtbWFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWvueS4ieinkuW9oui/m+ihjOagheagvOWMluW5tuaPkuWAvOmhtueCueWxnuaAp1xuICAgICAqIEBwYXJhbSB2MCDnrKzkuIDkuKrpobbngrnnmoTlsY/luZXlnZDmoIdcbiAgICAgKiBAcGFyYW0gdjEg56ys5LqM5Liq6aG254K555qE5bGP5bmV5Z2Q5qCHXG4gICAgICogQHBhcmFtIHYyIOesrOS4ieS4qumhtueCueeahOWxj+W5leWdkOagh1xuICAgICAqIEBwYXJhbSBhdHRyczAg56ys5LiA5Liq6aG254K555qE5omA5pyJ5bGe5oCnXG4gICAgICogQHBhcmFtIGF0dHJzMSDnrKzkuozkuKrpobbngrnnmoTmiYDmnInlsZ7mgKdcbiAgICAgKiBAcGFyYW0gYXR0cnMyIOesrOS4ieS4qumhtueCueeahOaJgOacieWxnuaAp1xuICAgICAqIEByZXR1cm5zIOaJgOacieWDj+e0oOWPiuWFtuaPkuWAvOWQjueahOWxnuaAp1xuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgcmFzdGVyaXplVHJpYW5nbGUoXG4gICAgICAgIHYwOiBWZWN0b3IzLFxuICAgICAgICB2MTogVmVjdG9yMyxcbiAgICAgICAgdjI6IFZlY3RvcjMsXG4gICAgICAgIGF0dHJzMDogVmVydGV4QXR0cmlidXRlcyxcbiAgICAgICAgYXR0cnMxOiBWZXJ0ZXhBdHRyaWJ1dGVzLFxuICAgICAgICBhdHRyczI6IFZlcnRleEF0dHJpYnV0ZXNcbiAgICApOiBGcmFnbWVudFtdIHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnRzOiBGcmFnbWVudFtdID0gW107XG5cbiAgICAgICAgLy8gMS4g6K6h566X5LiJ6KeS5b2i55qE5YyF5Zu055uSXG4gICAgICAgIGNvbnN0IG1pblggPSBNYXRoLmZsb29yKE1hdGgubWluKHYwLngsIHYxLngsIHYyLngpKTtcbiAgICAgICAgY29uc3QgbWF4WCA9IE1hdGguY2VpbChNYXRoLm1heCh2MC54LCB2MS54LCB2Mi54KSk7XG4gICAgICAgIGNvbnN0IG1pblkgPSBNYXRoLmZsb29yKE1hdGgubWluKHYwLnksIHYxLnksIHYyLnkpKTtcbiAgICAgICAgY29uc3QgbWF4WSA9IE1hdGguY2VpbChNYXRoLm1heCh2MC55LCB2MS55LCB2Mi55KSk7XG5cbiAgICAgICAgLy8gMi4g6YGN5Y6G6L6555WM5qGG5YaF55qE5q+P5LiA5Liq5YOP57Sg54K5XG4gICAgICAgIGZvciAobGV0IHkgPSBtaW5ZOyB5IDw9IG1heFk7IHkrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgeCA9IG1pblg7IHggPD0gbWF4WDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGl4ZWw6IFtudW1iZXIsIG51bWJlcl0gPSBbeCwgeV07XG5cbiAgICAgICAgICAgICAgICAvLyAzLiDorqHnrpflvZPliY3lg4/ntKDngrnnmoTph43lv4PlnZDmoIdcbiAgICAgICAgICAgICAgICBjb25zdCBbYWxwaGEsIGJldGEsIGdhbW1hXSA9IHRoaXMuY29tcHV0ZUJhcnljZW50cmljQ29vcmRzKHBpeGVsLCB2MCwgdjEsIHYyKTtcblxuICAgICAgICAgICAgICAgIC8vIDQuIOWIpOaWreeCueaYr+WQpuWcqOS4ieinkuW9ouWGhemDqO+8iOmHjeW/g+WdkOagh+Wdh+mdnui0n++8jOS4lOi/keS8vOWSjOS4ujHvvIlcbiAgICAgICAgICAgICAgICBjb25zdCB0b2xlcmFuY2UgPSAxZS01OyAvLyDmta7ngrnmlbDnsr7luqblrrnlt65cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGFscGhhID49IC10b2xlcmFuY2UgJiZcbiAgICAgICAgICAgICAgICAgICAgYmV0YSA+PSAtdG9sZXJhbmNlICYmXG4gICAgICAgICAgICAgICAgICAgIGdhbW1hID49IC10b2xlcmFuY2UgJiZcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMoYWxwaGEgKyBiZXRhICsgZ2FtbWEgLSAxKSA8IHRvbGVyYW5jZVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAvLyA1LiDkvb/nlKjph43lv4PlnZDmoIfkvZzkuLrmnYPph43lr7nlsZ7mgKfov5vooYzmj5LlgLxcbiAgICAgICAgICAgICAgICAgICAgLy8g5L6L5aaC77yM5aaC5p6cIFQg5pivIG51bWJlcjogaW50ZXJwb2xhdGVkVmFsdWUgPSBhbHBoYSAqIHYwLmF0dHIgKyBiZXRhICogdjEuYXR0ciArIGdhbW1hICogdjIuYXR0cjtcbiAgICAgICAgICAgICAgICAgICAgLy8g5aaC5p6cIFQg5piv5pWw57uE77yM6ZyA6KaB5q+P5Liq5YiG6YeP5YiG5Yir6K6h566X44CCXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludGVycG9sYXRlZEF0dHJzID0gdGhpcy5pbnRlcnBvbGF0ZUF0dHJpYnV0ZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczAsIGF0dHJzMSwgYXR0cnMyLCBhbHBoYSwgYmV0YSwgZ2FtbWFcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyA2LiDmt7HluqblgLzvvIzpnIDopoHljZXni6zpop3lpJbmj5LlgLzorqHnrpdcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeiA9IHRoaXMuaW50ZXJwb2xhdGVOdW1iZXIodjAueiwgdjEueiwgdjIueiwgYWxwaGEsIGJldGEsIGdhbW1hKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyDmt7vliqDliLDniYfmrrXliJfooahcbiAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgeCwgeSwgeixcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGludGVycG9sYXRlZEF0dHJzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmcmFnbWVudHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Z+65LqOIGJhcnljZW50cmljIOWdkOagh+aPkuWAvOmhtueCueWxnuaAp++8jOaUr+aMgeWkmuenjeexu+Wei1xuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGludGVycG9sYXRlQXR0cmlidXRlcyhcbiAgICAgICAgYTogVmVydGV4QXR0cmlidXRlcyxcbiAgICAgICAgYjogVmVydGV4QXR0cmlidXRlcyxcbiAgICAgICAgYzogVmVydGV4QXR0cmlidXRlcyxcbiAgICAgICAgdzogbnVtYmVyLCAgLy8g6aG254K5YeeahOadg+mHjVxuICAgICAgICB1OiBudW1iZXIsIC8vIOmhtueCuWLnmoTmnYPph41cbiAgICAgICAgdjogbnVtYmVyIC8vIOmhtueCuWPnmoTmnYPph41cbiAgICApOiBWZXJ0ZXhBdHRyaWJ1dGVzIHtcbiAgICAgICAgY29uc3QgcmVzdWx0OiBWZXJ0ZXhBdHRyaWJ1dGVzID0ge307XG5cbiAgICAgICAgLy8g6I635Y+W5omA5pyJ5bGe5oCn5ZCN56ew5bm26aqM6K+BXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZU5hbWVzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgIHRoaXMudmFsaWRhdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZU5hbWVzLCBiLCBjKTtcblxuICAgICAgICAvLyDlr7nmr4/kuKrlsZ7mgKfov5vooYzmj5LlgLxcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIGF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgICAgICAgICBjb25zdCB2YWxBID0gYVtuYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbEIgPSBiW25hbWVdO1xuICAgICAgICAgICAgY29uc3QgdmFsQyA9IGNbbmFtZV07XG5cbiAgICAgICAgICAgIC8vIOagueaNruWxnuaAp+exu+Wei+aJp+ihjOebuOW6lOeahOaPkuWAvFxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWxBID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIC8vIOagh+mHj+aPkuWAvFxuICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHRoaXMuaW50ZXJwb2xhdGVOdW1iZXIoXG4gICAgICAgICAgICAgICAgICAgIHZhbEEgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICB2YWxCIGFzIG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgdmFsQyBhcyBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHcsIHUsIHZcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsQSBpbnN0YW5jZW9mIENvbG9yKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29sb3Lmj5LlgLxcbiAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSB0aGlzLmludGVycG9sYXRlQ29sb3IoXG4gICAgICAgICAgICAgICAgICAgIHZhbEEsXG4gICAgICAgICAgICAgICAgICAgIHZhbEIgYXMgQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHZhbEMgYXMgQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHcsIHUsIHZcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsQSBpbnN0YW5jZW9mIFZlY3RvcjIpIHtcbiAgICAgICAgICAgICAgICAvLyBWZWN0b3Iy5o+S5YC8XG4gICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gdGhpcy5pbnRlcnBvbGF0ZVZlY3RvcjIoXG4gICAgICAgICAgICAgICAgICAgIHZhbEEsXG4gICAgICAgICAgICAgICAgICAgIHZhbEIgYXMgVmVjdG9yMixcbiAgICAgICAgICAgICAgICAgICAgdmFsQyBhcyBWZWN0b3IyLFxuICAgICAgICAgICAgICAgICAgICB3LCB1LCB2XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbEEgaW5zdGFuY2VvZiBWZWN0b3IzKSB7XG4gICAgICAgICAgICAgICAgLy8gVmVjdG9yM+aPkuWAvFxuICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHRoaXMuaW50ZXJwb2xhdGVWZWN0b3IzKFxuICAgICAgICAgICAgICAgICAgICB2YWxBLFxuICAgICAgICAgICAgICAgICAgICB2YWxCIGFzIFZlY3RvcjMsXG4gICAgICAgICAgICAgICAgICAgIHZhbEMgYXMgVmVjdG9yMyxcbiAgICAgICAgICAgICAgICAgICAgdywgdSwgdlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWxBIGluc3RhbmNlb2YgVmVjdG9yNCkge1xuICAgICAgICAgICAgICAgIC8vIFZlY3RvcjTmj5LlgLxcbiAgICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gPSB0aGlzLmludGVycG9sYXRlVmVjdG9yNChcbiAgICAgICAgICAgICAgICAgICAgdmFsQSxcbiAgICAgICAgICAgICAgICAgICAgdmFsQiBhcyBWZWN0b3I0LFxuICAgICAgICAgICAgICAgICAgICB2YWxDIGFzIFZlY3RvcjQsXG4gICAgICAgICAgICAgICAgICAgIHcsIHUsIHZcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsQSBpbnN0YW5jZW9mIE1hdHJpeDR4NCkge1xuICAgICAgICAgICAgICAgIC8vIOefqemYteaPkuWAvCAtIOWvueefqemYteeahOavj+S4quWFg+e0oOWIhuWIq+aPkuWAvFxuICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHRoaXMuaW50ZXJwb2xhdGVNYXRyaXg0eDQoXG4gICAgICAgICAgICAgICAgICAgIHZhbEEsXG4gICAgICAgICAgICAgICAgICAgIHZhbEIgYXMgTWF0cml4NHg0LFxuICAgICAgICAgICAgICAgICAgICB2YWxDIGFzIE1hdHJpeDR4NCxcbiAgICAgICAgICAgICAgICAgICAgdywgdSwgdlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOS4jeaUr+aMgeeahOWxnuaAp+exu+WeizogJHt0eXBlb2YgdmFsQX0g55So5LqO5bGe5oCnICR7bmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6aqM6K+B5omA5pyJ6aG254K55piv5ZCm5YW35pyJ55u45ZCM55qE5bGe5oCnXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgdmFsaWRhdGVBdHRyaWJ1dGVzKGF0dHJpYnV0ZU5hbWVzOiBzdHJpbmdbXSwgLi4ub3RoZXJBdHRyczogVmVydGV4QXR0cmlidXRlc1tdKSB7XG4gICAgICAgIGZvciAoY29uc3QgYXR0cnMgb2Ygb3RoZXJBdHRycykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIGF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEobmFtZSBpbiBhdHRycykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDpobbngrnlsZ7mgKfkuI3ljLnphY06IOe8uuWwkeWxnuaApyAke25hbWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgT2JqZWN0LmtleXMoYXR0cnMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhdHRyaWJ1dGVOYW1lcy5pbmNsdWRlcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOmhtueCueWxnuaAp+S4jeWMuemFjTog5a2Y5Zyo6aKd5aSW5bGe5oCnICR7bmFtZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmj5LlgLzmoIfph49cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBpbnRlcnBvbGF0ZU51bWJlcihhOiBudW1iZXIsIGI6IG51bWJlciwgYzogbnVtYmVyLCB3OiBudW1iZXIsIHU6IG51bWJlciwgdjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIGEgKiB3ICsgYiAqIHUgKyBjICogdjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmj5LlgLxDb2xvclxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGludGVycG9sYXRlQ29sb3IoYTogQ29sb3IsIGI6IENvbG9yLCBjOiBDb2xvciwgdzogbnVtYmVyLCB1OiBudW1iZXIsIHY6IG51bWJlcik6IENvbG9yIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihcbiAgICAgICAgICAgIGEuciAqIHcgKyBiLnIgKiB1ICsgYy5yICogdixcbiAgICAgICAgICAgIGEuZyAqIHcgKyBiLmcgKiB1ICsgYy5nICogdixcbiAgICAgICAgICAgIGEuYiAqIHcgKyBiLmIgKiB1ICsgYy5iICogdixcbiAgICAgICAgICAgIGEuYSAqIHcgKyBiLmEgKiB1ICsgYy5hICogdlxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaPkuWAvFZlY3RvcjJcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBpbnRlcnBvbGF0ZVZlY3RvcjIoYTogVmVjdG9yMiwgYjogVmVjdG9yMiwgYzogVmVjdG9yMiwgdzogbnVtYmVyLCB1OiBudW1iZXIsIHY6IG51bWJlcik6IFZlY3RvcjIge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjIoXG4gICAgICAgICAgICBhLnggKiB3ICsgYi54ICogdSArIGMueCAqIHYsXG4gICAgICAgICAgICBhLnkgKiB3ICsgYi55ICogdSArIGMueSAqIHZcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDmj5LlgLxWZWN0b3IzXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW50ZXJwb2xhdGVWZWN0b3IzKGE6IFZlY3RvcjMsIGI6IFZlY3RvcjMsIGM6IFZlY3RvcjMsIHc6IG51bWJlciwgdTogbnVtYmVyLCB2OiBudW1iZXIpOiBWZWN0b3IzIHtcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IzKFxuICAgICAgICAgICAgYS54ICogdyArIGIueCAqIHUgKyBjLnggKiB2LFxuICAgICAgICAgICAgYS55ICogdyArIGIueSAqIHUgKyBjLnkgKiB2LFxuICAgICAgICAgICAgYS56ICogdyArIGIueiAqIHUgKyBjLnogKiB2XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5o+S5YC8VmVjdG9yNFxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGludGVycG9sYXRlVmVjdG9yNChhOiBWZWN0b3I0LCBiOiBWZWN0b3I0LCBjOiBWZWN0b3I0LCB3OiBudW1iZXIsIHU6IG51bWJlciwgdjogbnVtYmVyKTogVmVjdG9yNCB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNChcbiAgICAgICAgICAgIGEueCAqIHcgKyBiLnggKiB1ICsgYy54ICogdixcbiAgICAgICAgICAgIGEueSAqIHcgKyBiLnkgKiB1ICsgYy55ICogdixcbiAgICAgICAgICAgIGEueiAqIHcgKyBiLnogKiB1ICsgYy56ICogdixcbiAgICAgICAgICAgIGEudyAqIHcgKyBiLncgKiB1ICsgYy53ICogdlxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaPkuWAvDR4NOefqemYtSAtIOWvueefqemYteeahOavj+S4quWFg+e0oOWIhuWIq+i/m+ihjOaPkuWAvFxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGludGVycG9sYXRlTWF0cml4NHg0KGE6IE1hdHJpeDR4NCwgYjogTWF0cml4NHg0LCBjOiBNYXRyaXg0eDQsIHc6IG51bWJlciwgdTogbnVtYmVyLCB2OiBudW1iZXIpOiBNYXRyaXg0eDQge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWF0cml4NHg0KCk7XG4gICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IDQ7IHJvdysrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCA0OyBjb2wrKykge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5tYXRyaXhbcm93XVtjb2xdID0gYS5tYXRyaXhbcm93XVtjb2xdICogdyArIGIubWF0cml4W3Jvd11bY29sXSAqIHUgKyBjLm1hdHJpeFtyb3ddW2NvbF0gKiB2O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufSIsImltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL01hdGgvQ29sb3JcIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yNFwiO1xuaW1wb3J0IHsgVHJhbnNmb3JtIH0gZnJvbSBcIi4uL0NvcmUvVHJhbnNmb3JtXCI7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gXCIuLi9Db21wb25lbnQvUmVuZGVyZXJcIjtcbmltcG9ydCB7IE1lc2hSZW5kZXJlciB9IGZyb20gXCIuLi9Db21wb25lbnQvTWVzaFJlbmRlcmVyXCI7XG5pbXBvcnQgeyBDYW1lcmEsIENhbWVyYUNsZWFyRmxhZ3MgfSBmcm9tIFwiLi4vQ29tcG9uZW50L0NhbWVyYVwiO1xuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSBcIi4uL0NvcmUvRW5naW5lXCI7XG5pbXBvcnQgeyBFbmdpbmVDb25maWcsIFJlbmRlclNldHRpbmdzIH0gZnJvbSBcIi4uL0NvcmUvU2V0dGluZ1wiO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gXCIuLi9SZXNvdXJjZXMvTWVzaFwiO1xuaW1wb3J0IHsgQmFyeWNlbnRyaWNUcmlhbmdsZVJhc3Rlcml6ZXIgfSBmcm9tIFwiLi9CYXJ5Y2VudHJpY1RyaWFuZ2xlUmFzdGVyaXplclwiXG5pbXBvcnQgeyBUcmFuc2Zvcm1Ub29scyB9IGZyb20gXCIuLi9NYXRoL1RyYW5zZm9ybVRvb2xzXCI7XG5pbXBvcnQgeyBEZWJ1ZyB9IGZyb20gXCIuLi9VdGlscy9EZWJ1Z1wiO1xuaW1wb3J0IHsgQ3VsbE1vZGUsIGRlcHRoVGVzdCwgU3RlbmNpbE9wLCBzdGVuY2lsVGVzdCwgWlRlc3QsIENvbG9yTWFzaywgYXBwbHlDb2xvck1hc2ssIFJlbmRlclR5cGUsIGFwcGx5U3RlbmNpbE9wZXJhdGlvbiwgYmxlbmRDb2xvcnMgfSBmcm9tIFwiLi9SZW5kZXJlckRlZmluZVwiO1xuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gXCIuLi9Db3JlL0dhbWVPYmplY3RcIjtcbmltcG9ydCB7IEdpem1vIH0gZnJvbSBcIi4uL1V0aWxzL0dpem1vXCI7XG5cbmVudW0gRHJhd01vZGUge1xuICAgIFdpcmVmcmFtZSA9IDEsXG4gICAgUG9pbnQgPSAyLFxuICAgIFNoYWRlciA9IDQsXG59XG5cbmV4cG9ydCBjbGFzcyBSYXN0ZXJpemF0aW9uUGlwZWxpbmUge1xuICAgIHB1YmxpYyBkcmF3TW9kZTogRHJhd01vZGUgPSBEcmF3TW9kZS5TaGFkZXI7XG5cbiAgICAvLyDnvJPlhrLljLpcbiAgICBwcml2YXRlIGZyYW1lQnVmZmVyOiBVaW50MzJBcnJheTtcbiAgICBwcml2YXRlIGRlcHRoQnVmZmVyOiBGbG9hdDMyQXJyYXk7XG4gICAgcHJpdmF0ZSBzdGVuY2lsQnVmZmVyOiBVaW50OEFycmF5O1xuICAgIHByaXZhdGUgb3ZlcmRyYXdCdWZmZXI6IFVpbnQzMkFycmF5O1xuXG4gICAgLy8g5LiK5LiL5paH5YaF5a65XG4gICAgcHJpdmF0ZSBjdXJyZW50Q2FtZXJhOiBDYW1lcmE7XG4gICAgcHJpdmF0ZSBjdXJyZW50UmVuZGVyZXJPYmpzOiBNZXNoUmVuZGVyZXJbXTtcblxuICAgIGNvbnN0cnVjdG9yKGZyYW1lQnVmZmVyOiBVaW50MzJBcnJheSkge1xuICAgICAgICB0aGlzLmZyYW1lQnVmZmVyID0gZnJhbWVCdWZmZXI7XG4gICAgICAgIHRoaXMuZGVwdGhCdWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aCAqIEVuZ2luZUNvbmZpZy5jYW52YXNIZWlnaHQpO1xuICAgICAgICB0aGlzLnN0ZW5jaWxCdWZmZXIgPSBuZXcgVWludDhBcnJheShFbmdpbmVDb25maWcuY2FudmFzV2lkdGggKiBFbmdpbmVDb25maWcuY2FudmFzSGVpZ2h0KTtcbiAgICAgICAgdGhpcy5vdmVyZHJhd0J1ZmZlciA9IG5ldyBVaW50MzJBcnJheShFbmdpbmVDb25maWcuY2FudmFzV2lkdGggKiBFbmdpbmVDb25maWcuY2FudmFzSGVpZ2h0KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgUmVuZGVyKCkge1xuICAgICAgICBjb25zdCByb290T2JqZWN0ID0gRW5naW5lLnNjZW5lTWFuYWdlci5nZXRBY3RpdmVTY2VuZSgpPy5nZXRSb290R2FtZU9iamVjdCgpO1xuICAgICAgICBpZiAocm9vdE9iamVjdCkge1xuICAgICAgICAgICAgY29uc3QgY2FtZXJhcyA9IENhbWVyYS5jYW1lcmFzO1xuICAgICAgICAgICAgLy8g55u45py6ZGVwdGjotorkvY7otorml6nmuLLmn5NcbiAgICAgICAgICAgIGNhbWVyYXMuc29ydCgoYSwgYikgPT4gYS5kZXB0aCAtIGIuZGVwdGgpO1xuICAgICAgICAgICAgLy8g5q+P5Liq55u45py65riy5p+T5LiA6YGNXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2FtZXJhcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudENhbWVyYSA9IGNhbWVyYXNbaV07XG4gICAgICAgICAgICAgICAgdGhpcy5DbGVhcih0aGlzLmN1cnJlbnRDYW1lcmEpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFJlbmRlcmVyT2JqcyA9IHJvb3RPYmplY3QuZ2V0Q29tcG9uZW50c0luQ2hpbGRyZW4oTWVzaFJlbmRlcmVyKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG9wYXF1ZVJlbmRlcmVyT2JqczogTWVzaFJlbmRlcmVyW10gPSBbXTtcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc3BhcmVudFJlbmRlcmVyT2JqczogTWVzaFJlbmRlcmVyW10gPSBbXTtcblxuICAgICAgICAgICAgICAgIC8vIOa4suafk+euoee6vzEu6KeG6ZSl5L2T5YmU6Zmk5bm25a+55Zy65pmv54mp5L2T6L+b6KGM5o6S5bqPXG4gICAgICAgICAgICAgICAgY29uc3Qgdmlld01hdHJpeCA9IHRoaXMuY3VycmVudENhbWVyYS5nZXRWaWV3TWF0cml4KCk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGxlbiA9IHRoaXMuY3VycmVudFJlbmRlcmVyT2Jqcy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJlciA9IHRoaXMuY3VycmVudFJlbmRlcmVyT2Jqc1tqXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2hhZGVyID0gcmVuZGVyZXIubWF0ZXJpYWwuc2hhZGVyO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hhZGVyID09IG51bGwpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOinhumUpeS9k+WJlOmZpFxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5GcnVzdHVtQ3VsbGluZyhyZW5kZXJlcikpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOWtmOWCqFrlgLznlKjkuo7lkI7nu63mjpLluo9cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgdmlld1BvcyA9IHZpZXdNYXRyaXgubXVsdGlwbHlWZWN0b3I0KG5ldyBWZWN0b3I0KHJlbmRlcmVyLnRyYW5zZm9ybS53b3JsZFBvc2l0aW9uLCAxKSk7XG4gICAgICAgICAgICAgICAgICAgIChyZW5kZXJlciBhcyBhbnkpLnZpZXdaID0gdmlld1Bvcy56O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOW9kuexu1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZW5kZXJUeXBlID0gc2hhZGVyLnJlbmRlclR5cGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXJUeXBlID09IFJlbmRlclR5cGUuT3BhcXVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGFxdWVSZW5kZXJlck9ianMucHVzaChyZW5kZXJlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocmVuZGVyVHlwZSA9PSBSZW5kZXJUeXBlLlRyYW5zcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc3BhcmVudFJlbmRlcmVyT2Jqcy5wdXNoKHJlbmRlcmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyDlr7nkuI3pgI/mmI7niankvZPov5vooYzmjpLluo/vvJrku47liY3lvoDlkI7vvIzpmY3kvY5vdmVyZHJhd1xuICAgICAgICAgICAgICAgIG9wYXF1ZVJlbmRlcmVyT2Jqcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYSBhcyBhbnkpLnZpZXdaIC0gKGIgYXMgYW55KS52aWV3WjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyDlr7npgI/mmI7niankvZPov5vooYzmjpLluo/vvJrku47lkI7lvoDliY3vvIzlhYjnu5jliLbov5znmoTvvIzpopzoibLmt7flkIjmiY3og73mraPnoa5cbiAgICAgICAgICAgICAgICB0cmFuc3BhcmVudFJlbmRlcmVyT2Jqcy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYiBhcyBhbnkpLnZpZXdaIC0gKGEgYXMgYW55KS52aWV3WjtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIOa4suafk+euoee6vzIu5oyJ54Wn5YWI5LiN6YCP5piO5YaN5aSp56m655uS5YaN6YCP5piO55qE6aG65bqP57uY55S7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvYmogb2Ygb3BhcXVlUmVuZGVyZXJPYmpzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuRHJhd09iamVjdChvYmopO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyDnu5jliLblpKnnqbrnm5JcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmF3TW9kZSA9PSBEcmF3TW9kZS5TaGFkZXIpIHRoaXMuRHJhd1NreWJveCh0aGlzLmN1cnJlbnRDYW1lcmEpO1xuICAgICAgICAgICAgICAgIC8vIOe7mOWItumAj+aYjueJqeS9k1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqIG9mIHRyYW5zcGFyZW50UmVuZGVyZXJPYmpzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuRHJhd09iamVjdChvYmopO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIOiwg+ivleS/oeaBr1xuICAgICAgICAgICAgdGhpcy5EZWJ1Z0RyYXcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vI3JlZ2lvbiDln7rnoYDnu5jliLbmjqXlj6NcblxuICAgIHB1YmxpYyBDbGVhcihjYW1lcmE6IENhbWVyYSk6IHZvaWQge1xuXG4gICAgICAgIGNvbnN0IGNsZWFyRmxhZ3MgPSBjYW1lcmEuY2xlYXJGbGFncztcbiAgICAgICAgY29uc3Qgdmlld3BvcnQgPSBjYW1lcmEudmlld1BvcnQ7XG4gICAgICAgIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IGNhbWVyYS5iYWNrR3JvdW5kQ29sb3I7XG5cbiAgICAgICAgLy8gMS4g6K6h566X6KeG5Y+j5Zyo5bGP5bmV57yT5Yay5Yy65Lit55qE5YOP57Sg6IyD5Zu0XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0UGl4ZWxYID0gTWF0aC5mbG9vcih2aWV3cG9ydC54ICogRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoKTtcbiAgICAgICAgY29uc3Qgdmlld3BvcnRQaXhlbFkgPSBNYXRoLmZsb29yKHZpZXdwb3J0LnkgKiBFbmdpbmVDb25maWcuY2FudmFzSGVpZ2h0KTtcbiAgICAgICAgY29uc3Qgdmlld3BvcnRQaXhlbFdpZHRoID0gTWF0aC5mbG9vcih2aWV3cG9ydC56ICogRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoKTtcbiAgICAgICAgY29uc3Qgdmlld3BvcnRQaXhlbEhlaWdodCA9IE1hdGguZmxvb3Iodmlld3BvcnQudyAqIEVuZ2luZUNvbmZpZy5jYW52YXNIZWlnaHQpO1xuXG4gICAgICAgIC8vIDIuIOagueaNrua4hemZpOagh+W/l++8jOa4hemZpOinhuWPo+WvueW6lOeahOWMuuWfn1xuICAgICAgICBpZiAoY2FtZXJhLmNsZWFyRmxhZ3MgPT0gQ2FtZXJhQ2xlYXJGbGFncy5Ta3lib3gpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJWaWV3cG9ydFJlZ2lvbih0aGlzLmZyYW1lQnVmZmVyLCB2aWV3cG9ydFBpeGVsWCwgdmlld3BvcnRQaXhlbFksIHZpZXdwb3J0UGl4ZWxXaWR0aCwgdmlld3BvcnRQaXhlbEhlaWdodCwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2xlYXJGbGFncyA9PSBDYW1lcmFDbGVhckZsYWdzLkNvbG9yKSB7XG4gICAgICAgICAgICB0aGlzLmNsZWFyVmlld3BvcnRSZWdpb24odGhpcy5mcmFtZUJ1ZmZlciwgdmlld3BvcnRQaXhlbFgsIHZpZXdwb3J0UGl4ZWxZLCB2aWV3cG9ydFBpeGVsV2lkdGgsIHZpZXdwb3J0UGl4ZWxIZWlnaHQsIGJhY2tncm91bmRDb2xvci5Ub1VpbnQzMigpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGVhckZsYWdzICE9IENhbWVyYUNsZWFyRmxhZ3MuTm9uZSkge1xuICAgICAgICAgICAgdGhpcy5jbGVhclZpZXdwb3J0UmVnaW9uKHRoaXMuZGVwdGhCdWZmZXIsIHZpZXdwb3J0UGl4ZWxYLCB2aWV3cG9ydFBpeGVsWSwgdmlld3BvcnRQaXhlbFdpZHRoLCB2aWV3cG9ydFBpeGVsSGVpZ2h0LCAxKTtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJWaWV3cG9ydFJlZ2lvbih0aGlzLnN0ZW5jaWxCdWZmZXIsIHZpZXdwb3J0UGl4ZWxYLCB2aWV3cG9ydFBpeGVsWSwgdmlld3BvcnRQaXhlbFdpZHRoLCB2aWV3cG9ydFBpeGVsSGVpZ2h0LCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2xlYXJWaWV3cG9ydFJlZ2lvbih0aGlzLm92ZXJkcmF3QnVmZmVyLCB2aWV3cG9ydFBpeGVsWCwgdmlld3BvcnRQaXhlbFksIHZpZXdwb3J0UGl4ZWxXaWR0aCwgdmlld3BvcnRQaXhlbEhlaWdodCwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5riF6Zmk57yT5Yay5Yy65Lit5oyH5a6a55+p5b2i5Yy65Z+f55qE6L6F5Yqp5pa55rOVXG4gICAgICogQHBhcmFtIGJ1ZmZlciDnm67moIfnvJPlhrLljLogKFVpbnQzMkFycmF5IOaIliBGbG9hdDMyQXJyYXkg562JKVxuICAgICAqIEBwYXJhbSB4IOWMuuWfn+i1t+Wni1jlnZDmoIcgKOWDj+e0oClcbiAgICAgKiBAcGFyYW0geSDljLrln5/otbflp4tZ5Z2Q5qCHICjlg4/ntKApXG4gICAgICogQHBhcmFtIHdpZHRoIOWMuuWfn+WuveW6piAo5YOP57SgKVxuICAgICAqIEBwYXJhbSBoZWlnaHQg5Yy65Z+f6auY5bqmICjlg4/ntKApXG4gICAgICogQHBhcmFtIHZhbHVlIOimgeWhq+WFheeahOWAvFxuICAgICAqL1xuICAgIHByaXZhdGUgY2xlYXJWaWV3cG9ydFJlZ2lvbihidWZmZXI6IFVpbnQzMkFycmF5IHwgRmxvYXQzMkFycmF5IHwgVWludDhBcnJheSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIC8vIOWmguaenOaYr+a7oeWxj+W5le+8jOWImeW/q+mAn+Whq+WFhVxuICAgICAgICBpZiAoeCA9PSAwICYmIHkgPT0gMCAmJiB3aWR0aCA9PSBFbmdpbmVDb25maWcuY2FudmFzV2lkdGggJiYgaGVpZ2h0ID09IEVuZ2luZUNvbmZpZy5jYW52YXNIZWlnaHQpIHtcbiAgICAgICAgICAgIGJ1ZmZlci5maWxsKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbnZhc1dpZHRoID0gRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoO1xuICAgICAgICBmb3IgKGxldCByb3cgPSB5OyByb3cgPCB5ICsgaGVpZ2h0OyByb3crKykge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IHJvdyAqIGNhbnZhc1dpZHRoICsgeDtcbiAgICAgICAgICAgIGNvbnN0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIHdpZHRoO1xuICAgICAgICAgICAgLy8g5L2/55SoIHN1YmFycmF5IOWSjCBmaWxsIOadpeWhq+WFheS4gOihjOS4reeahOi/nue7reWMuuWfn++8jOavlOmAkOS4quWDj+e0oOiuvue9ruabtOW/q1xuICAgICAgICAgICAgYnVmZmVyLnN1YmFycmF5KHN0YXJ0SW5kZXgsIGVuZEluZGV4KS5maWxsKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgRHJhd1NreWJveChjYW1lcmE6IENhbWVyYSk6IHZvaWQge1xuICAgICAgICBpZiAoY2FtZXJhLmNsZWFyRmxhZ3MgIT09IENhbWVyYUNsZWFyRmxhZ3MuU2t5Ym94KSByZXR1cm47XG4gICAgICAgIGlmICghUmVuZGVyU2V0dGluZ3Muc2t5Ym94KSByZXR1cm47XG5cbiAgICAgICAgLy8g6I635Y+W55u45py655qE6KeG5Zu+5ZKM5oqV5b2x55+p6Zi1XG4gICAgICAgIGNvbnN0IHZpZXdNYXRyaXggPSBjYW1lcmEuZ2V0Vmlld01hdHJpeCgpO1xuICAgICAgICAvLyDkv67mraPop4blm77nn6npmLXvvJrnp7vpmaTlubPnp7vvvIzlj6rkv53nlZnml4vovaxcbiAgICAgICAgdmlld01hdHJpeC5zZXRUcmFuc2xhdGUoVmVjdG9yMy5aRVJPKTtcbiAgICAgICAgY29uc3QgcHJvamVjdGlvbk1hdHJpeCA9IGNhbWVyYS5nZXRQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgICAgIC8vIOiuoeeul+mAhuinhuWbvuaKleW9seefqemYte+8jOeUqOS6juWwhuWxj+W5leWdkOagh+i9rOaNouS4uuS4lueVjOaWueWQkVxuICAgICAgICBjb25zdCBpbnZWaWV3UHJvaiA9IHByb2plY3Rpb25NYXRyaXgubXVsdGlwbHkodmlld01hdHJpeCkuaW52ZXJ0KCk7XG5cbiAgICAgICAgLy8g6KeG5Y+j5YOP57Sg6IyD5Zu06K6h566XXG4gICAgICAgIGNvbnN0IHZpZXdwb3J0ID0gY2FtZXJhLnZpZXdQb3J0O1xuICAgICAgICBjb25zdCB2aWV3cG9ydFBpeGVsWCA9IE1hdGguZmxvb3Iodmlld3BvcnQueCAqIEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aCk7XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0UGl4ZWxZID0gTWF0aC5mbG9vcih2aWV3cG9ydC55ICogRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodCk7XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0UGl4ZWxXaWR0aCA9IE1hdGguZmxvb3Iodmlld3BvcnQueiAqIEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aCk7XG4gICAgICAgIGNvbnN0IHZpZXdwb3J0UGl4ZWxIZWlnaHQgPSBNYXRoLmZsb29yKHZpZXdwb3J0LncgKiBFbmdpbmVDb25maWcuY2FudmFzSGVpZ2h0KTtcblxuICAgICAgICAvLyDpgY3ljobop4blj6PlhoXnmoTlg4/ntKBcbiAgICAgICAgZm9yIChsZXQgeSA9IHZpZXdwb3J0UGl4ZWxZOyB5IDwgdmlld3BvcnRQaXhlbFkgKyB2aWV3cG9ydFBpeGVsSGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHggPSB2aWV3cG9ydFBpeGVsWDsgeCA8IHZpZXdwb3J0UGl4ZWxYICsgdmlld3BvcnRQaXhlbFdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAvLyDmo4Dmn6Xmt7HluqbnvJPlhrLvvIzlpoLmnpzor6Xlg4/ntKDlt7LmnInniankvZPliJnot7Pov4dcbiAgICAgICAgICAgICAgICBjb25zdCBkZXB0aCA9IHRoaXMuZGVwdGhCdWZmZXJbeSAqIEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aCArIHhdO1xuICAgICAgICAgICAgICAgIGlmIChkZXB0aCA8IDAuOTk5KSBjb250aW51ZTsgLy8g5L2/55So5o6l6L+RMeeahOWAvOmBv+WFjeeyvuW6pumXrumimFxuXG4gICAgICAgICAgICAgICAgLy8g5bCG5bGP5bmV5Z2Q5qCH6L2s5o2i5Li65qCH5YeG5YyW6K6+5aSH5Z2Q5qCHKE5EQynvvIzln7rkuo7op4blj6PogIzpnZ7mlbTkuKrnlLvluINcbiAgICAgICAgICAgICAgICBjb25zdCBuZGNYID0gKCh4IC0gdmlld3BvcnRQaXhlbFgpIC8gdmlld3BvcnRQaXhlbFdpZHRoKSAqIDIgLSAxO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5kY1kgPSAxIC0gKCh5IC0gdmlld3BvcnRQaXhlbFkpIC8gdmlld3BvcnRQaXhlbEhlaWdodCkgKiAyO1xuXG4gICAgICAgICAgICAgICAgLy8g5Yib5bu6TkRD56m66Ze05Lit55qE54K577yI6L+c5bmz6Z2i77yJXG4gICAgICAgICAgICAgICAgY29uc3QgbmRjUG9zID0gbmV3IFZlY3RvcjQobmRjWCwgbmRjWSwgMS4wLCAxLjApO1xuXG4gICAgICAgICAgICAgICAgLy8g5bCGTkRD5Z2Q5qCH6L2s5o2i5Li65LiW55WM56m66Ze05pa55ZCRXG4gICAgICAgICAgICAgICAgY29uc3Qgd29ybGREaXIgPSBpbnZWaWV3UHJvai5tdWx0aXBseVZlY3RvcjQobmRjUG9zKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBuZXcgVmVjdG9yMyh3b3JsZERpci54LCB3b3JsZERpci55LCB3b3JsZERpci56KS5ub3JtYWxpemUoKTtcblxuICAgICAgICAgICAgICAgIC8vIOmHh+agt+WkqeepuuebkuW5tue7mOWItuWDj+e0oFxuICAgICAgICAgICAgICAgIGNvbnN0IHNreUNvbG9yID0gUmVuZGVyU2V0dGluZ3Muc2t5Ym94LlNhbXBsZUN1YmUoZGlyZWN0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLkRyYXdQaXhlbCh4LCB5LCBza3lDb2xvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgRHJhd1BpeGVsKHg6IG51bWJlciwgeTogbnVtYmVyLCBjb2xvcjogQ29sb3IsIGNvdW50T3ZlcmRyYXc6IGJvb2xlYW4gPSBmYWxzZSkge1xuICAgICAgICAvLyDnu5jliLbliLDlsY/luZXkuIrnmoTlg4/ntKDlupTor6XmmK/mlbTmlbDnmoRcbiAgICAgICAgLy8g5LyY5YyWOiDkvb/nlKjkvY3ov5Dnrpfku6Pmm79NYXRoLmZsb29y77yM5o+Q5Y2H5oCn6IO9XG4gICAgICAgIHggPSAoeCB8IDApO1xuICAgICAgICB5ID0gKHkgfCAwKTtcbiAgICAgICAgLy8geCA9IE1hdGguZmxvb3IoeCk7XG4gICAgICAgIC8vIHkgPSBNYXRoLmZsb29yKHkpO1xuXG4gICAgICAgIGlmICh4IDwgMCB8fCB4ID49IEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aCB8fCB5IDwgMCB8fCB5ID49IEVuZ2luZUNvbmZpZy5jYW52YXNIZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluZGV4ID0geSAqIEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aCArIHg7XG4gICAgICAgIHRoaXMuZnJhbWVCdWZmZXJbaW5kZXhdID0gY29sb3IuVG9VaW50MzIoKTtcbiAgICAgICAgLy8gT3ZlcmRyYXforqHmlbBcbiAgICAgICAgaWYgKGNvdW50T3ZlcmRyYXcpIHRoaXMub3ZlcmRyYXdCdWZmZXJbaW5kZXhdKytcbiAgICB9XG5cbiAgICBwdWJsaWMgRHJhd0xpbmUoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgY29sb3IxOiBDb2xvciwgY29sb3IyPzogQ29sb3IpIHtcbiAgICAgICAgLy8g5L2/55So5L2N6L+Q566X5LyY5YyW6L6555WM5qOA5p+lXG4gICAgICAgIC8vIOeUu+e6v+WJjeimgei/m+ihjOi+ueajgOafpe+8jOehruS/nee6v+eahOS4pOerr+eCuemDveWcqOWxj+W5leWGhe+8jOWmguaenOe6v+eahOiMg+WbtOW+iOmVv+W5tuS4lOS4jeWcqOWxj+W5leiMg+WbtOWGhe+8jOmDvei/m+ihjOiuoeeul+S8mumAoOaIkOa1qui0ueWkp+mHj+eahOi1hOa6kO+8jOijgeWJquaOiei2heWHuueahOmDqOWIhlxuICAgICAgICBjb25zdCB3ID0gRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoO1xuICAgICAgICBjb25zdCBoID0gRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodDtcbiAgICAgICAgaWYgKCgoeDEgfCB5MSkgPCAwKSB8fCAoeDEgPj0gdykgfHwgKHkxID49IGgpIHx8ICgoeDIgfCB5MikgPCAwKSB8fCAoeDIgPj0gdykgfHwgKHkyID49IGgpKSB7XG4gICAgICAgICAgICAvL1RPRE866KOB5Ymq5o6J6LaF5Ye65bGP5bmV55qE6YOo5YiGXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlj5bmlbRcbiAgICAgICAgeDEgPSB4MSB8IDA7XG4gICAgICAgIHkxID0geTEgfCAwO1xuICAgICAgICB4MiA9IHgyIHwgMDtcbiAgICAgICAgeTIgPSB5MiB8IDA7XG5cbiAgICAgICAgY29uc3QgZHggPSB4MiAtIHgxO1xuICAgICAgICBjb25zdCBkeSA9IHkyIC0geTE7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWF4KE1hdGguYWJzKGR4KSwgTWF0aC5hYnMoZHkpKTtcblxuICAgICAgICAvLyDkuLrkvZXopoHljLrliIbmlpznjofmmK/lkKblgY/msLTlubPov5jmmK/lnoLnm7TlkaLvvJ/lm6DkuLrlpoLmnpzkuI3ljLrliIbvvIzkvovlpoLlvZPmlpznjoflpKfkuo4x5pe277yM5Lya5a+86Ie055u057q/57uY5Yi25LiN6L+e57ut77yM5Zug5Li6eeS8mui3s+WPmO+8jOiAjOS4jeaYr+i/nue7reeahOWinuWKoOOAglxuICAgICAgICAvLyDlj6rmnInmlpznjofliJrlpb3kuLox5pe277yMeOi3n3nmiY3mmK/ov57nu63lkIzmraXoh6rlop7nmoTvvIx4KzHvvIzliJl55LmfKzFcbiAgICAgICAgLy8g5omA5Lul77yM5b2T5pac546H5aSn5LqOMeaXtu+8jOaIkeS7rOmcgOimgeS9v+eUqHnkvZzkuLrlvqrnjq/lj5jph4/vvIzogIzlvZPmlpznjoflsI/kuo4x5pe277yM5oiR5Lus6ZyA6KaB5L2/55SoeOS9nOS4uuW+queOr+WPmOmHj+OAglxuICAgICAgICAvLyDkuL7kuKrmnoHnq6/kvovlrZDvvIzlvZPmlpznjofkuLow5pe277yM55u057q/5bCx5piv5LiA5p2h5Z6C55u055u057q/77yM5aaC5p6c6L+Z5pe25YCZ6L+Y55SoeOS9nOS4uuW+queOr+WPmOmHj++8jOWImeS8muWvvOiHtOi/meadoeebtOe6v+S4iuaJgOaciXnngrnpg73lr7nlupTkuIDkuKp477yM5Lmf5bCx5piv6K+06L+Z5p2h57q/5Y+Y5oiQ5LiA5Liq54K55LqG44CCXG5cbiAgICAgICAgLy8g5pac546H5bCP5LqOMe+8jOebtOe6v+WBj+awtOW5s+aDheWGte+8jOS9v+eUqHjkvZzkuLrlvqrnjq/lj5jph49cbiAgICAgICAgaWYgKE1hdGguYWJzKGR4KSA+IE1hdGguYWJzKGR5KSkge1xuICAgICAgICAgICAgLy8g5LiL6Z2i55qE5b6q546v57uY5Yi25Ye95pWw5piv5LuO5bem5b6A5Y+z55qE77yM6L+Z6YeM6KaB56Gu5L+d57uT5p2f54K55Zyo5byA5aeL54K555qE5Y+z6L65XG4gICAgICAgICAgICBpZiAoeDIgPCB4MSkge1xuICAgICAgICAgICAgICAgIFt4MSwgeTEsIHgyLCB5Ml0gPSBbeDIsIHkyLCB4MSwgeTFdO1xuICAgICAgICAgICAgICAgIC8vIOWQjOaXtuS6pOaNouminOiJslxuICAgICAgICAgICAgICAgIGlmIChjb2xvcjIgIT09IHVuZGVmaW5lZCkgW2NvbG9yMSwgY29sb3IyXSA9IFtjb2xvcjIsIGNvbG9yMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOaWnOeOh1xuICAgICAgICAgICAgY29uc3QgYSA9IGR5IC8gZHg7XG4gICAgICAgICAgICAvLyDmiKrot53vvIh5PWF4K2LvvIxiPXktYXjvvIlcbiAgICAgICAgICAgIC8vIGNvbnN0IGIgPSB5MSAtIGEgKiB4MTtcbiAgICAgICAgICAgIGxldCB5ID0geTE7XG4gICAgICAgICAgICAvLyDnu5jliLbnm7Tnur9cbiAgICAgICAgICAgIGZvciAobGV0IHggPSB4MTsgeCA8PSB4MjsgeCsrKSB7XG4gICAgICAgICAgICAgICAgLy8g6K6h566X5o+S5YC85Zug5a2QICgwIOWIsCAxKVxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBsZW5ndGggPiAwID8gKHggLSB4MSkgLyBsZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgIC8vIOagueaNruaYr+WQpuacieesrOS6jOS4quminOiJsuWGs+WumuS9v+eUqOWNleS4gOminOiJsui/mOaYr+aPkuWAvFxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gY29sb3IyICE9PSB1bmRlZmluZWQgPyB0aGlzLmludGVycG9sYXRlQ29sb3IoY29sb3IxLCBjb2xvcjIsIHQpIDogY29sb3IxO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5EcmF3UGl4ZWwoeCwgeSwgY29sb3IpO1xuICAgICAgICAgICAgICAgIC8vIOebtOe6v+WFrOW8j3k9YXgrYu+8jOi/memHjOS4jeW/heiuoeeul+i/meS4quWFrOW8j++8jOWboOS4uuW9k3jliqAx6Ieq5aKe5pe277yMeeS5n+S8muWKoGHvvIzmiYDku6Xlj6/ku6Xnm7TmjqXnlKh5K2Hku6Pmm79heCti77yM566X5piv5LiA5Liq5oCn6IO95LyY5YyW54K5XG4gICAgICAgICAgICAgICAgLy8geSA9IGEgKiB4ICsgYjtcbiAgICAgICAgICAgICAgICB5ID0geSArIGE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOaIllxuICAgICAgICAgICAgLy8gY29uc3QgeXMgPSB0aGlzLkludGVycG9sYXRlKHgxLCB5MSwgeDIsIHkyKTtcbiAgICAgICAgICAgIC8vIGZvciAobGV0IHggPSB4MTsgeCA8PSB4MjsgeCsrKSB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5EcmF3UGl4ZWwoeCwgeXNbeCAtIHgxXSwgY29sb3IpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgICAgIC8vIOaWnOeOh+Wkp+S6jjHvvIznm7Tnur/lgY/lnoLnm7Tmg4XlhrXvvIzkvb/nlKh55L2c5Li65b6q546v5Y+Y6YePXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHkyIDwgeTEpIHtcbiAgICAgICAgICAgICAgICBbeDEsIHkxLCB4MiwgeTJdID0gW3gyLCB5MiwgeDEsIHkxXTtcbiAgICAgICAgICAgICAgICAvLyDlkIzml7bkuqTmjaLpopzoibJcbiAgICAgICAgICAgICAgICBpZiAoY29sb3IyICE9PSB1bmRlZmluZWQpIFtjb2xvcjEsIGNvbG9yMl0gPSBbY29sb3IyLCBjb2xvcjFdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBhID0gZHggLyBkeTtcbiAgICAgICAgICAgIGxldCB4ID0geDE7XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0geTE7IHkgPD0geTI7IHkrKykge1xuICAgICAgICAgICAgICAgIC8vIOiuoeeul+aPkuWAvOWboOWtkCAoMCDliLAgMSlcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbGVuZ3RoID4gMCA/ICh5IC0geTEpIC8gbGVuZ3RoIDogMDtcbiAgICAgICAgICAgICAgICAvLyDmoLnmja7mmK/lkKbmnInnrKzkuozkuKrpopzoibLlhrPlrprkvb/nlKjljZXkuIDpopzoibLov5jmmK/mj5LlgLxcbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IGNvbG9yMiAhPT0gdW5kZWZpbmVkID8gdGhpcy5pbnRlcnBvbGF0ZUNvbG9yKGNvbG9yMSwgY29sb3IyLCB0KSA6IGNvbG9yMTtcblxuICAgICAgICAgICAgICAgIHRoaXMuRHJhd1BpeGVsKHgsIHksIGNvbG9yKTtcbiAgICAgICAgICAgICAgICB4ID0geCArIGE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOaIllxuICAgICAgICAgICAgLy8gY29uc3QgeHMgPSB0aGlzLkludGVycG9sYXRlKHkxLCB4MSwgeTIsIHgyKTtcbiAgICAgICAgICAgIC8vIGZvciAobGV0IHkgPSB5MTsgeSA8PSB5MjsgeSsrKSB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5EcmF3UGl4ZWwoeHNbeSAtIHkxXSwgeSwgY29sb3IpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIERyYXdUcmlhbmdsZSh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCB4MzogbnVtYmVyLCB5MzogbnVtYmVyLCBjb2xvcjogQ29sb3IpIHtcbiAgICAgICAgdGhpcy5EcmF3TGluZSh4MSwgeTEsIHgyLCB5MiwgY29sb3IpO1xuICAgICAgICB0aGlzLkRyYXdMaW5lKHgyLCB5MiwgeDMsIHkzLCBjb2xvcik7XG4gICAgICAgIHRoaXMuRHJhd0xpbmUoeDMsIHkzLCB4MSwgeTEsIGNvbG9yKTtcbiAgICB9XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIC8vI3JlZ2lvbiDlj5jmjaJcblxuICAgIC8qXG4gICAgICog6aG254K55aSE55CG6Zi25q6177ya5qih5Z6L56m66Ze0IOKGku+8iOaooeWei+efqemYte+8ieKGkiDkuJbnlYznqbrpl7Qg4oaS77yI6KeG5Zu+55+p6Zi177yJ4oaSIOinguWvn+epuumXtCDihpLvvIjmipXlvbHnn6npmLXvvInihpIg6KOB5Ymq56m66Ze0IOKGku+8iOmAj+inhumZpOazle+8ieKGkiBOREMg56m66Ze0IOKGku+8iOinhuWPo+WPmOaNou+8ieKGkiDlsY/luZXnqbrpl7Qg4oaSIOWFieagheWMlua4suafk1xuICAgICAqL1xuICAgIHB1YmxpYyBWZXJ0ZXhQcm9jZXNzaW5nU3RhZ2UodmVydGljZXM6IFZlY3RvcjNbXSwgdHJhbnNmb3JtOiBUcmFuc2Zvcm0pOiBWZWN0b3IzW10ge1xuICAgICAgICBjb25zdCBvdXRWZXJ0aWNlcyA9IG5ldyBBcnJheSh2ZXJ0aWNlcy5sZW5ndGgpO1xuXG4gICAgICAgIC8vIDEuIE1WUOWPmOaNouWIsOijgeWJquepuumXtFxuICAgICAgICAvLyDmqKHlnovnqbrpl7QgLT4g5LiW55WM56m66Ze0IC0+IOinguWvn+epuumXtCAtPiDoo4Hliarnqbrpl7RcbiAgICAgICAgLy8gMi4g6YCP6KeG6Zmk5rOV77ya5bCG6KOB5Ymq56m66Ze05Z2Q5qCH6L2s5o2i5Li65qCH5YeG6K6+5aSH5Z2Q5qCH77yITkRD77yJXG4gICAgICAgIC8vIOijgeWJquepuumXtCAtPiDmoIflh4bljJborr7lpIflnZDmoIfvvIhOREMg56m66Ze077yJXG4gICAgICAgIC8vIDMuIOinhuWPo+WPmOaNou+8muWwhk5EQ+WdkOagh+aYoOWwhOWIsOWxj+W5leWdkOagh1xuICAgICAgICAvLyDmoIflh4bljJborr7lpIflnZDmoIfvvIhOREMg56m66Ze077yJIC0+IOWxj+W5leepuumXtFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBvdXQgPSBUcmFuc2Zvcm1Ub29scy5Nb2RlbFRvU2NyZWVuUG9zKHZlcnRpY2VzW2ldLCB0cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTWF0cml4LCB0aGlzLmN1cnJlbnRDYW1lcmEpO1xuICAgICAgICAgICAgb3V0VmVydGljZXNbaV0gPSBuZXcgVmVjdG9yMyhvdXQuc2NyZWVuLngsIG91dC5zY3JlZW4ueSwgb3V0LmRlcHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvdXRWZXJ0aWNlcztcbiAgICB9XG5cbiAgICAvLyNlbmRyZWdpb25cblxuICAgIC8vI3JlZ2lvbiDliZTpmaToo4HliapcblxuICAgIC8vIOinhumUpeS9k+WJlOmZpFxuICAgIHB1YmxpYyBGcnVzdHVtQ3VsbGluZyhvYmo6IE1lc2hSZW5kZXJlcik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBib3VuZHMgPSBvYmoubWVzaD8uYm91bmRzO1xuICAgICAgICBpZiAoYm91bmRzID09IG51bGwgfHwgYm91bmRzLmxlbmd0aCA8PSAwKSByZXR1cm4gdHJ1ZTtcblxuICAgICAgICBjb25zdCBtb2RlbE1hdHJpeCA9IG9iai50cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTWF0cml4O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYm91bmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBib3VuZCA9IGJvdW5kc1tpXTtcbiAgICAgICAgICAgIC8vIFRPRE865b6F5LyY5YyW77yM5Y+q5L2/55SoMuS4quaegeWAvOeCueWNs+WPr++8jOi/memHjOeUqOS6huWFqOmDqDjkuKrngrnmnaXorqHnrpdcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYm91bmQudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0ZXggPSBib3VuZC52ZXJ0aWNlc1tqXTtcbiAgICAgICAgICAgICAgICBjb25zdCB3b3JsZFBvcyA9IG1vZGVsTWF0cml4Lm11bHRpcGx5VmVjdG9yNChuZXcgVmVjdG9yNCh2ZXJ0ZXgsIDEpKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Q2FtZXJhLmlzUG9pbnRJbkZydXN0dW0obmV3IFZlY3RvcjMod29ybGRQb3MueCwgd29ybGRQb3MueSwgd29ybGRQb3MueikpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOWPquimgeacieS7u+S9leS4gOS4queCueWcqOinhumUpeS9k+WGhe+8jOWImeivpeeJqeS9k+WPr+inge+8jOS4jeivpeiiq+ijgeWJqlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIOiDjOmdouWJlOmZpFxuICAgIHB1YmxpYyBGYWNlQ3VsbGluZyh0cmlhbmdsZXM6IG51bWJlcltdLCBtZXNoOiBNZXNoLCByZW5kZXJlcjogUmVuZGVyZXIsIGN1bGxNb2RlOiBDdWxsTW9kZSkge1xuICAgICAgICBpZiAoY3VsbE1vZGUgPT09IEN1bGxNb2RlLk9mZikgcmV0dXJuIHRyaWFuZ2xlcztcblxuICAgICAgICAvLyBBLuWxj+W5leepuumXtOS4ieinkuW9oumhtueCuemhuuW6j+azlVxuICAgICAgICAvLyDov5nph4zlj6rmmK/lgZrkuKrnpLrojIPvvIzlrp7pmYXkuIrov5nkuIDmraXpqqTlj6/ku6XmlL7liLDpobbngrnnnYDoibLlmajkuYvlkI7vvIzlsLHlj6/ku6XlsJHpobbngrnlj5jmjaLorqHnrpfvvIjkvYbnvLrngrnlsLHmmK/lpJrkuoblvojlpJrpobbngrnnnYDoibLlmajorqHnrpfvvIzkuI3ov4flnKhHUFXkuK3ov5npg73kuI3nrpfku4DkuYjvvIlcbiAgICAgICAgLy8gY29uc3QgdmlzaWJsZVRyaWFuZ2xlczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgLy8gY29uc3QgbW9kZWxNYXRyaXggPSByZW5kZXJlci50cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTWF0cml4O1xuICAgICAgICAvLyBjb25zdCB2aWV3TWF0cml4ID0gdGhpcy5jdXJyZW50Q2FtZXJhLmdldFZpZXdNYXRyaXgoKTtcbiAgICAgICAgLy8gY29uc3QgcHJvamVjdGlvbk1hdHJpeCA9IHRoaXMuY3VycmVudENhbWVyYS5nZXRQcm9qZWN0aW9uTWF0cml4KCk7XG4gICAgICAgIC8vIGNvbnN0IG12cE1hdHJpeCA9IHByb2plY3Rpb25NYXRyaXgubXVsdGlwbHkodmlld01hdHJpeCkubXVsdGlwbHkobW9kZWxNYXRyaXgpO1xuICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAvLyAgICAgY29uc3QgdjEgPSBtZXNoLnZlcnRpY2VzW3RyaWFuZ2xlc1tpICsgMF1dO1xuICAgICAgICAvLyAgICAgY29uc3QgdjIgPSBtZXNoLnZlcnRpY2VzW3RyaWFuZ2xlc1tpICsgMV1dO1xuICAgICAgICAvLyAgICAgY29uc3QgdjMgPSBtZXNoLnZlcnRpY2VzW3RyaWFuZ2xlc1tpICsgMl1dO1xuICAgICAgICAvLyAgICAgLy8g6L2s5o2i5Yiw6KOB5Ymq56m66Ze0XG4gICAgICAgIC8vICAgICBjb25zdCBwMSA9IG12cE1hdHJpeC5tdWx0aXBseVZlY3RvcjQobmV3IFZlY3RvcjQodjEsIDEpKTtcbiAgICAgICAgLy8gICAgIGNvbnN0IHAyID0gbXZwTWF0cml4Lm11bHRpcGx5VmVjdG9yNChuZXcgVmVjdG9yNCh2MiwgMSkpO1xuICAgICAgICAvLyAgICAgY29uc3QgcDMgPSBtdnBNYXRyaXgubXVsdGlwbHlWZWN0b3I0KG5ldyBWZWN0b3I0KHYzLCAxKSk7XG4gICAgICAgIC8vICAgICAvLyDmo4Dmn6UgdyDliIbph4/mnInmlYjmgKdcbiAgICAgICAgLy8gICAgIGlmIChwMS53ID09PSAwIHx8IHAyLncgPT09IDAgfHwgcDMudyA9PT0gMCkge1xuICAgICAgICAvLyAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyAgICAgLy8g6KOB5Ymq56m66Ze06L2sIE5EQ++8iOmAj+inhumZpOazle+8iVxuICAgICAgICAvLyAgICAgY29uc3QgcDFOREMgPSB7IHg6IHAxLnggLyBwMS53LCB5OiBwMS55IC8gcDEudyB9O1xuICAgICAgICAvLyAgICAgY29uc3QgcDJOREMgPSB7IHg6IHAyLnggLyBwMi53LCB5OiBwMi55IC8gcDIudyB9O1xuICAgICAgICAvLyAgICAgY29uc3QgcDNOREMgPSB7IHg6IHAzLnggLyBwMy53LCB5OiBwMy55IC8gcDMudyB9O1xuICAgICAgICAvLyAgICAgLy8g6K6h566X5Y+J56ev5Yik5pat546v57uV6aG65bqP77yI5YGH6K6+6YCG5pe26ZKI5Li65q2j6Z2i77yJXG4gICAgICAgIC8vICAgICBjb25zdCBjcm9zcyA9IChwMk5EQy54IC0gcDFOREMueCkgKiAocDNOREMueSAtIHAxTkRDLnkpIC1cbiAgICAgICAgLy8gICAgICAgICAocDJOREMueSAtIHAxTkRDLnkpICogKHAzTkRDLnggLSBwMU5EQy54KTtcbiAgICAgICAgLy8gICAgIC8vIOS/neeVmeato+mdouS4ieinkuW9ou+8iGNyb3NzIDwgMCDooajnpLrpgIbml7bpkojvvIlcbiAgICAgICAgLy8gICAgIGlmIChjcm9zcyA8IDApIHtcbiAgICAgICAgLy8gICAgICAgICB2aXNpYmxlVHJpYW5nbGVzLnB1c2godHJpYW5nbGVzW2kgKyAwXSwgdHJpYW5nbGVzW2kgKyAxXSwgdHJpYW5nbGVzW2kgKyAyXSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBCLuinguWvn+epuumXtOazleWQkemHj+S4juinhue6v+aWueWQkeeahOeCueenr+WIpOaWreazlVxuICAgICAgICBjb25zdCB2aXNpYmxlVHJpYW5nbGVzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgICBjb25zdCBmYWNlTm9ybWFscyA9IG1lc2guZmFjZU5vcm1hbHM7XG4gICAgICAgIGNvbnN0IGZhY2VDZW50ZXJzID0gbWVzaC5mYWNlQ2VudGVycztcbiAgICAgICAgY29uc3QgY2FtZXJhUG9zaXRpb24gPSB0aGlzLmN1cnJlbnRDYW1lcmEudHJhbnNmb3JtLnBvc2l0aW9uO1xuXG4gICAgICAgIC8vIOiOt+WPluaooeWei+efqemYte+8iOaooeWei+acrOWcsOepuumXtOWIsOS4lueVjOepuumXtOeahOWPmOaNouefqemYte+8iVxuICAgICAgICBjb25zdCBtb2RlbE1hdHJpeCA9IHJlbmRlcmVyLnRyYW5zZm9ybS5sb2NhbFRvV29ybGRNYXRyaXg7XG4gICAgICAgIC8vIOiuoeeul+azlee6v+efqemYte+8muaooeWei+efqemYteeahOmAhuefqemYteeahOi9rOe9rlxuICAgICAgICBjb25zdCBub3JtYWxNYXRyaXggPSByZW5kZXJlci50cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTm9ybWFsTWF0cml4O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjZU5vcm1hbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIOimgeaKilZlYzPovazkuLrpvZDmrKHlnZDmoIfngrnvvIzljbN3PTFcbiAgICAgICAgICAgIGNvbnN0IHdvcmxkX2NlbnRlciA9IG5ldyBWZWN0b3IzKG1vZGVsTWF0cml4Lm11bHRpcGx5VmVjdG9yNChuZXcgVmVjdG9yNChmYWNlQ2VudGVyc1tpXSwgMSkpKTtcbiAgICAgICAgICAgIC8vIOimgeaKilZlYzPovazkuLrpvZDmrKHlnZDlkJHph4/vvIzljbN3PTBcbiAgICAgICAgICAgIGNvbnN0IHdvcmxkX25vcm1hbCA9IG5vcm1hbE1hdHJpeC5tdWx0aXBseVZlY3RvcjMoZmFjZU5vcm1hbHNbaV0pO1xuXG4gICAgICAgICAgICAvLyAyLuiOt+WPlumdoueahOS4reW/g+WIsOaRhOWDj+acuueahOWQkemHj1xuICAgICAgICAgICAgY29uc3QgY2VudGVyVG9DYW1lcmEgPSBWZWN0b3IzLnN1YnRyYWN0KGNhbWVyYVBvc2l0aW9uLCB3b3JsZF9jZW50ZXIpO1xuXG4gICAgICAgICAgICAvLyAzLuiuoeeul+i/mTLkuKrlkJHph4/nmoTlpLnop5JcbiAgICAgICAgICAgIGNvbnN0IGRvdCA9IHdvcmxkX25vcm1hbC5kb3QoY2VudGVyVG9DYW1lcmEpO1xuXG4gICAgICAgICAgICAvLyA0LuWIpOaWreWkueinkuaYr+WQpuWkp+S6juetieS6jjDCsOWwj+S6jjkwwrBcbiAgICAgICAgICAgIGlmICgoY3VsbE1vZGUgPT09IEN1bGxNb2RlLkJhY2sgJiYgZG90ID4gMCkgfHwgKGN1bGxNb2RlID09PSBDdWxsTW9kZS5Gcm9udCAmJiBkb3QgPCAwKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRyaUluZGV4ID0gaSAqIDM7XG4gICAgICAgICAgICAgICAgdmlzaWJsZVRyaWFuZ2xlcy5wdXNoKHRyaWFuZ2xlc1t0cmlJbmRleF0sIHRyaWFuZ2xlc1t0cmlJbmRleCArIDFdLCB0cmlhbmdsZXNbdHJpSW5kZXggKyAyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmlzaWJsZVRyaWFuZ2xlcztcbiAgICB9XG5cbiAgICAvLyDpga7mjKHliZTpmaRcbiAgICBwdWJsaWMgT2NjbHVzaW9uQ3VsbGluZygpIHtcblxuICAgIH1cblxuICAgIHB1YmxpYyBDbGlwVHJpYW5nbGUodHJpYW5nbGU6IFZlY3RvcjNbXSkge1xuXG4gICAgfVxuXG4gICAgLy8jZW5kcmVnaW9uXG5cbiAgICAvLyNyZWdpb24g57uY5Yi254mp5L2TXG5cbiAgICBwdWJsaWMgRHJhd09iamVjdChyZW5kZXJlcjogTWVzaFJlbmRlcmVyKSB7XG4gICAgICAgIGNvbnN0IG1lc2ggPSByZW5kZXJlci5tZXNoO1xuICAgICAgICBpZiAoIW1lc2gpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzaGFkZXIgPSByZW5kZXJlci5tYXRlcmlhbC5zaGFkZXI7XG4gICAgICAgIGlmICghc2hhZGVyKSByZXR1cm47XG4gICAgICAgIHNoYWRlci5pbml0KHJlbmRlcmVyLnRyYW5zZm9ybSwgdGhpcy5jdXJyZW50Q2FtZXJhKTtcblxuICAgICAgICAvLyDmuLLmn5PmiYDmnInpgJrpgZNcbiAgICAgICAgc2hhZGVyLnBhc3Nlcy5mb3JFYWNoKHBhc3MgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyVHlwZSA9IHNoYWRlci5yZW5kZXJUeXBlO1xuICAgICAgICAgICAgY29uc3QgcmVuZGVyU3RhdGUgPSBwYXNzLnJlbmRlclN0YXRlID8/IHt9O1xuICAgICAgICAgICAgY29uc3QgY29sb3JNYXNrID0gcmVuZGVyU3RhdGUuY29sb3JNYXNrID8/IENvbG9yTWFzay5BbGw7XG4gICAgICAgICAgICBjb25zdCBjdWxsTW9kZSA9IHJlbmRlclN0YXRlLmN1bGxNb2RlID8/IEN1bGxNb2RlLkJhY2s7XG4gICAgICAgICAgICBjb25zdCB6VGVzdCA9IHJlbmRlclN0YXRlLnpUZXN0ID8/IFpUZXN0Lkxlc3M7XG4gICAgICAgICAgICBjb25zdCB6V3JpdGUgPSBwYXNzLnJlbmRlclN0YXRlPy56V3JpdGUgPz8gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGJsZW5kID0gcGFzcy5yZW5kZXJTdGF0ZT8uYmxlbmQ7XG4gICAgICAgICAgICBjb25zdCBzdGVuY2lsID0gcGFzcy5yZW5kZXJTdGF0ZT8uc3RlbmNpbDtcblxuICAgICAgICAgICAgbGV0IHRyaWFuZ2xlcyA9IG1lc2gudHJpYW5nbGVzO1xuXG4gICAgICAgICAgICAvLyDmuLLmn5PnrqHnur8zLuiDjOmdouWJlOmZpFxuICAgICAgICAgICAgdHJpYW5nbGVzID0gdGhpcy5GYWNlQ3VsbGluZyh0cmlhbmdsZXMsIG1lc2gsIHJlbmRlcmVyLCBjdWxsTW9kZSk7XG4gICAgICAgICAgICAvLyDmuLLmn5PnrqHnur80LumBruaMoeWJlOmZpFxuICAgICAgICAgICAgdGhpcy5PY2NsdXNpb25DdWxsaW5nKCk7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICAgICAgLy8g5riy5p+T566h57q/NS7pobbngrnnnYDoibLlmagoTVZQ5Y+Y5o2iKVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmVydGV4T3V0OiB2MSwgYXR0ck91dDogdjFBdHRyIH0gPSBwYXNzLnZlcnQoe1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXg6IG1lc2gudmVydGljZXNbdHJpYW5nbGVzW2ldXSxcbiAgICAgICAgICAgICAgICAgICAgdXY6IG1lc2gudXZbdHJpYW5nbGVzW2ldXSxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsOiBtZXNoLm5vcm1hbHNbdHJpYW5nbGVzW2ldXSxcbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudDogbWVzaC50YW5nZW50c1t0cmlhbmdsZXNbaV1dLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmVydGV4T3V0OiB2MiwgYXR0ck91dDogdjJBdHRyIH0gPSBwYXNzLnZlcnQoe1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXg6IG1lc2gudmVydGljZXNbdHJpYW5nbGVzW2kgKyAxXV0sXG4gICAgICAgICAgICAgICAgICAgIHV2OiBtZXNoLnV2W3RyaWFuZ2xlc1tpICsgMV1dLFxuICAgICAgICAgICAgICAgICAgICBub3JtYWw6IG1lc2gubm9ybWFsc1t0cmlhbmdsZXNbaSArIDFdXSxcbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudDogbWVzaC50YW5nZW50c1t0cmlhbmdsZXNbaSArIDFdXSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHZlcnRleE91dDogdjMsIGF0dHJPdXQ6IHYzQXR0ciB9ID0gcGFzcy52ZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdmVydGV4OiBtZXNoLnZlcnRpY2VzW3RyaWFuZ2xlc1tpICsgMl1dLFxuICAgICAgICAgICAgICAgICAgICB1djogbWVzaC51dlt0cmlhbmdsZXNbaSArIDJdXSxcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsOiBtZXNoLm5vcm1hbHNbdHJpYW5nbGVzW2kgKyAyXV0sXG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnQ6IG1lc2gudGFuZ2VudHNbdHJpYW5nbGVzW2kgKyAyXV0sXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyDmuLLmn5PnrqHnur82LuWxj+W5leaYoOWwhFxuICAgICAgICAgICAgICAgIGNvbnN0IHAxID0gVHJhbnNmb3JtVG9vbHMuQ2xpcFRvU2NyZWVuUG9zKHYxLCB0aGlzLmN1cnJlbnRDYW1lcmEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHAyID0gVHJhbnNmb3JtVG9vbHMuQ2xpcFRvU2NyZWVuUG9zKHYyLCB0aGlzLmN1cnJlbnRDYW1lcmEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHAzID0gVHJhbnNmb3JtVG9vbHMuQ2xpcFRvU2NyZWVuUG9zKHYzLCB0aGlzLmN1cnJlbnRDYW1lcmEpO1xuXG4gICAgICAgICAgICAgICAgLy8g5riy5p+T566h57q/Ny7oo4HliapcbiAgICAgICAgICAgICAgICAvLyDnlLvkuInop5LlvaLliY3opoHov5vooYzovrnmo4Dmn6XvvIznoa7kv53kuInop5LlvaLnmoTkuInkuKrngrnpg73lnKjlsY/luZXlhoXvvIzlpoLmnpzmnInngrnotoXlh7rlsY/luZXojIPlm7TvvIzliJnoo4HliarvvIzlubbnlJ/miJDmlrDnmoTkuInop5LlvaJcbiAgICAgICAgICAgICAgICAvLyDnroDljZXnspfmmrTnmoToo4HliarvvIzmnInngrnlnKjlsY/luZXlpJbnm7TmjqXmipvlvINcbiAgICAgICAgICAgICAgICBjb25zdCB3ID0gRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoO1xuICAgICAgICAgICAgICAgIGNvbnN0IGggPSBFbmdpbmVDb25maWcuY2FudmFzSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGlmICgoKHAxLnggfCBwMS55KSA8IDApIHx8IChwMS54ID49IHcpIHx8IChwMS55ID49IGgpIHx8ICgocDIueCB8IHAyLnkpIDwgMCkgfHwgKHAyLnggPj0gdykgfHwgKHAyLnkgPj0gaCkgfHwgKChwMy54IHwgcDMueSkgPCAwKSB8fCAocDMueCA+PSB3KSB8fCAocDMueSA+PSBoKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmF3TW9kZSAmIERyYXdNb2RlLldpcmVmcmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkRyYXdUcmlhbmdsZShwMS54LCBwMS55LCBwMi54LCBwMi55LCBwMy54LCBwMy55LCBDb2xvci5XSElURSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyYXdNb2RlICYgRHJhd01vZGUuUG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5EcmF3UGl4ZWwocDEueCwgcDEueSwgQ29sb3IuV0hJVEUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkRyYXdQaXhlbChwMi54LCBwMi55LCBDb2xvci5XSElURSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuRHJhd1BpeGVsKHAzLngsIHAzLnksIENvbG9yLldISVRFKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJhd01vZGUgJiBEcmF3TW9kZS5TaGFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g5riy5p+T566h57q/OC7lhYnmoIXljJZcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhZ21lbnRzID0gQmFyeWNlbnRyaWNUcmlhbmdsZVJhc3Rlcml6ZXIucmFzdGVyaXplVHJpYW5nbGUocDEsIHAyLCBwMywgdjFBdHRyLCB2MkF0dHIsIHYzQXR0cik7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZnJhZ21lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeCA9IGZyYWdtZW50Lng7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB5ID0gZnJhZ21lbnQueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHogPSBmcmFnbWVudC56O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmo4Dmn6XlnZDmoIfmmK/lkKblnKjlsY/luZXojIPlm7TlhoVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4IDwgMCB8fCB4ID49IEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPCAwIHx8IHkgPj0gRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6I635Y+W5b2T5YmN57yT5Yay5Yy66YeM55qE5YC8XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHkgKiBFbmdpbmVDb25maWcuY2FudmFzV2lkdGggKyB4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEJ1ZmZlckNvbG9yID0gQ29sb3IuRnJvbVVpbnQzMih0aGlzLmZyYW1lQnVmZmVyW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QnVmZmVyRGVwdGggPSB0aGlzLmRlcHRoQnVmZmVyW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCdWZmZXJTdGVuY2lsID0gdGhpcy5zdGVuY2lsQnVmZmVyW2luZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5riy5p+T566h57q/OS7ml6nmnJ/mt7HluqbmtYvor5VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlcHRoVGVzdFJlc3VsdCA9IGRlcHRoVGVzdCh6LCBjdXJyZW50QnVmZmVyRGVwdGgsIHpUZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGVwdGhUZXN0UmVzdWx0KSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5riy5p+T566h57q/MTAu5qih5p2/5rWL6K+VXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RlbmNpbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ZW5jaWxUZXN0UmVzdWx0ID0gc3RlbmNpbFRlc3QoY3VycmVudEJ1ZmZlclN0ZW5jaWwsIHN0ZW5jaWwucmVmLCBzdGVuY2lsLmNvbXBhcmlzb25PcGVyYXRpb24sIHN0ZW5jaWwucmVhZE1hc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOaJp+ihjOaooeadv+aTjeS9nO+8iOagueaNrua1i+ivlee7k+aenOWSjOa3seW6pua1i+ivlee7k+aenO+8iVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvcGVyYXRpb246IFN0ZW5jaWxPcCB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RlbmNpbFRlc3RSZXN1bHQpIHsgb3BlcmF0aW9uID0gZGVwdGhUZXN0UmVzdWx0ID8gc3RlbmNpbC5wYXNzT3BlcmF0aW9uIDogc3RlbmNpbC56RmFpbE9wZXJhdGlvbjsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyBvcGVyYXRpb24gPSBzdGVuY2lsLmZhaWxPcGVyYXRpb247IH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDlupTnlKjmk43kvZzmm7TmlrDmqKHmnb/lgLxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IGFwcGx5U3RlbmNpbE9wZXJhdGlvbihjdXJyZW50QnVmZmVyU3RlbmNpbCwgc3RlbmNpbC5yZWYsIG9wZXJhdGlvbiwgc3RlbmNpbC53cml0ZU1hc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOabtOaWsOaooeadv+e8k+WGsuWMulxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RlbmNpbEJ1ZmZlcltpbmRleF0gPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmqKHmnb/mtYvor5XlpLHotKXot7Pov4flg4/ntKBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0ZW5jaWxUZXN0UmVzdWx0KSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5riy5p+T566h57q/MTEu5YOP57Sg552A6Imy5ZmoXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGl4ZWxDb2xvciA9IHBhc3MuZnJhZyhmcmFnbWVudC5hdHRyaWJ1dGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWDj+e0oOiiq+S4ouW8g++8jOWPr+iDveaYr0FscGhh5rWL6K+V5aSx6LSlXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBpeGVsQ29sb3IpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmuLLmn5PnrqHnur8xMi7moLnmja4geldyaXRlIOagh+W/l+WGs+WumuaYr+WQpuWGmeWFpea3seW6pue8k+WGsuWMulxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5aaC5p6c5rKh6K6+572ueldyaXRl77yM5YiZ6buY6K6k5YWB6K645YaZ5YWl77yM5ZCm5YiZ5bCx5Yik5pateldyaXRl5YC8XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeldyaXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXB0aEJ1ZmZlcltpbmRleF0gPSB6O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmuLLmn5PnrqHnur8xMy7popzoibLmt7flkIhcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChibGVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nQ29sb3IgPSBDb2xvci5Gcm9tVWludDMyKHRoaXMuZnJhbWVCdWZmZXJbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhlbENvbG9yID0gYmxlbmRDb2xvcnMocGl4ZWxDb2xvciwgZXhpc3RpbmdDb2xvciwgYmxlbmQuc3JjLCBibGVuZC5kc3QsIGJsZW5kLm9wKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5riy5p+T566h57q/MTMu57uY5Yi25YOP57Sg5Yiw5bin57yT5YayXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmoLnmja7popzoibLmjqnnoIHlhrPlrprmnIDnu4jlhpnlhaXnmoTliIbph4/vvIjmnKrlkK/nlKjnmoTpgJrpgZPkv53nlZnljp/mnInlgLzvvIlcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5Q29sb3JNYXNrKHBpeGVsQ29sb3IsIGN1cnJlbnRCdWZmZXJDb2xvciwgY29sb3JNYXNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWmguaenOaYr+S4jemAj+aYjuedgOiJsu+8jGFscGhh6YCa6YGT5by66KGM6L6T5Ye6MVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbmRlclR5cGUgPT09IFJlbmRlclR5cGUuT3BhcXVlKSBwaXhlbENvbG9yLmEgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5EcmF3UGl4ZWwoeCwgeSwgcGl4ZWxDb2xvciwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vI2VuZHJlZ2lvblxuXG4gICAgLy8jcmVnaW9uIOW3peWFt+WHveaVsFxuXG4gICAgcHJpdmF0ZSBEZWJ1Z0RyYXcoKTogdm9pZCB7XG4gICAgICAgIC8vIOe7mOWItuWMheWbtOebklxuICAgICAgICAvLyB0aGlzLkRyYXdCb3VuZHMoKTtcblxuICAgICAgICAvLyDnu5jliLbms5Xnur/ot5/liIfnur9cbiAgICAgICAgLy8gdGhpcy5EcmF3Tm9ybWFsKCk7XG5cbiAgICAgICAgLy8g57uY5Yi25rex5bqm57q555CGXG4gICAgICAgIC8vIHRoaXMuRHJhd0RlcHRoQnVmZmVyKCk7XG5cbiAgICAgICAgLy8g57uY5Yi2T3ZlcmRhcndcbiAgICAgICAgLy8gdGhpcy5EcmF3T3ZlcmRyYXcoKTtcblxuICAgICAgICAvLyDnu5jliLbmqKHmnb/nvJPlhrLljLpcbiAgICAgICAgLy8gdGhpcy5EcmF3U3RlbmNpbEJ1ZmZlcigpO1xuXG4gICAgICAgIC8vIOe7mOWItueJqeeQhuiwg+ivleS/oeaBr1xuICAgICAgICAvLyBQaHlzaWNzRGVidWdEcmF3LkRyYXdQaHlzaWNzRGVidWcodGhpcy5EcmF3TGluZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICAvLyDnu5jliLZHaXptb1xuICAgICAgICB0aGlzLkRyYXdHaXptbyhFbmdpbmUuc2NlbmVNYW5hZ2VyLmdldEFjdGl2ZVNjZW5lKCk/LmdldFJvb3RHYW1lT2JqZWN0KCkgfHwgbnVsbCk7XG5cbiAgICAgICAgLy8g57uY5Yi26LCD6K+V57q/XG4gICAgICAgIGNvbnN0IGxpbmVzID0gRGVidWcuR2V0RGVidWdMaW5lcygpO1xuICAgICAgICBsaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuICAgICAgICAgICAgdGhpcy5EcmF3TGluZShsaW5lLnN0YXJ0LngsIGxpbmUuc3RhcnQueSwgbGluZS5lbmQueCwgbGluZS5lbmQueSwgbGluZS5jb2xvcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByaXZhdGUgRHJhd0dpem1vKG9iajogR2FtZU9iamVjdCB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFvYmopIHJldHVybjtcbiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IG9iai5nZXRBbGxDb21wb25lbnRzKCk7XG4gICAgICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIGNvbXBvbmVudHMpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKGNvbXBvbmVudCBhcyBhbnkpLm9uRHJhd0dpem1vcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIChjb21wb25lbnQgYXMgYW55KS5vbkRyYXdHaXptb3MoKTtcbiAgICAgICAgICAgICAgICBHaXptby5SZXNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIOe7mOWItuWtkOeJqeS9k1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG9iai50cmFuc2Zvcm0uY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIHRoaXMuRHJhd0dpem1vKGNoaWxkLmdhbWVPYmplY3QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBEcmF3Tm9ybWFsKCk6IHZvaWQge1xuICAgICAgICBmb3IgKGNvbnN0IHJlbmRlcmVyIG9mIHRoaXMuY3VycmVudFJlbmRlcmVyT2Jqcykge1xuICAgICAgICAgICAgY29uc3QgbWVzaCA9IHJlbmRlcmVyLm1lc2g7XG4gICAgICAgICAgICBpZiAoIW1lc2gpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsTWF0cml4ID0gcmVuZGVyZXIudHJhbnNmb3JtLmxvY2FsVG9Xb3JsZE1hdHJpeDtcbiAgICAgICAgICAgIGNvbnN0IGNhbWVyYSA9IENhbWVyYS5tYWluQ2FtZXJhO1xuXG4gICAgICAgICAgICAvLyDpnaLms5Xnur9cbiAgICAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzaC5mYWNlTm9ybWFscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gICAgIGNvbnN0IG5vcm1hbCA9IG1lc2guZmFjZU5vcm1hbHNbaV07XG4gICAgICAgICAgICAvLyAgICAgY29uc3QgY2VudGVyID0gbWVzaC5mYWNlQ2VudGVyc1tpXTtcbiAgICAgICAgICAgIC8vICAgICBjb25zdCBzdGFydCA9IFRyYW5zZm9ybVRvb2xzLk1vZGVsVG9TY3JlZW5Qb3MoY2VudGVyLCByZW5kZXJlci50cmFuc2Zvcm0sIHRoaXMuY3VycmVudENhbWVyYSkuc2NyZWVuO1xuICAgICAgICAgICAgLy8gICAgIGNvbnN0IGVuZCA9IFRyYW5zZm9ybVRvb2xzLk1vZGVsVG9TY3JlZW5Qb3MoVmVjdG9yMy5hZGQoY2VudGVyLCBWZWN0b3IzLm11bHRpcGx5U2NhbGFyKG5vcm1hbCwgMC4xKSksIHJlbmRlcmVyLnRyYW5zZm9ybSwgdGhpcy5jdXJyZW50Q2FtZXJhKS5zY3JlZW47XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5EcmF3TGluZShzdGFydC54LCBzdGFydC55LCBlbmQueCwgZW5kLnksIENvbG9yLlJFRCwgQ29sb3IuR1JFRU4pO1xuICAgICAgICAgICAgLy8gfVxuXG4gICAgICAgICAgICAvLyDpobbngrnms5Xnur/jgIHliIfnur/jgIHlia/liIfnur9cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzaC52ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnRleCA9IG1lc2gudmVydGljZXNbaV07XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsID0gbWVzaC5ub3JtYWxzW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhbmdlbnQgPSBtZXNoLnRhbmdlbnRzW2ldO1xuXG4gICAgICAgICAgICAgICAgLy8g56Gu5L+d5oiR5Lus5pyJ5b+F6KaB55qE5pWw5o2uXG4gICAgICAgICAgICAgICAgaWYgKCFub3JtYWwgfHwgIXRhbmdlbnQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIC8vIOS7juWIh+e6v+WQkemHj+aPkOWPlnfliIbph4/vvIjnlKjkuo7orqHnrpflia/liIfnur/mlrnlkJHvvIlcbiAgICAgICAgICAgICAgICBjb25zdCB0YW5nZW50VyA9IHRhbmdlbnQudztcbiAgICAgICAgICAgICAgICAvLyDku47liIfnur/lkJHph4/ojrflj5Z4eXrliIbph4/kvZzkuLrliIfnur/mlrnlkJFcbiAgICAgICAgICAgICAgICBjb25zdCB0YW5nZW50RGlyID0gbmV3IFZlY3RvcjModGFuZ2VudC54LCB0YW5nZW50LnksIHRhbmdlbnQueikubm9ybWFsaXplKCk7XG4gICAgICAgICAgICAgICAgLy8g6K6h566X5Ymv5YiH57q/IChCaXRhbmdlbnQpID0g5rOV57q/IMOXIOWIh+e6vyDDlyB35YiG6YePXG4gICAgICAgICAgICAgICAgY29uc3QgYml0YW5nZW50RGlyID0gVmVjdG9yMy5jcm9zcyhub3JtYWwsIHRhbmdlbnREaXIpLm11bHRpcGx5U2NhbGFyKHRhbmdlbnRXKS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgICAgICAvLyDlsIbpobbngrnkvY3nva7ovazmjaLliLDlsY/luZXnqbrpl7RcbiAgICAgICAgICAgICAgICBjb25zdCB2ZXJ0ZXhTY3JlZW5Qb3MgPSBUcmFuc2Zvcm1Ub29scy5Nb2RlbFRvU2NyZWVuUG9zKHZlcnRleCwgbW9kZWxNYXRyaXgsIGNhbWVyYSkuc2NyZWVuO1xuICAgICAgICAgICAgICAgIC8vIOWumuS5iee6v+eahOmVv+W6plxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVMZW5ndGggPSAwLjE7XG5cbiAgICAgICAgICAgICAgICAvLyAxLiDnu5jliLbms5Xnur8gLSDnuqLoibJcbiAgICAgICAgICAgICAgICBjb25zdCBub3JtYWxFbmQgPSBWZWN0b3IzLmFkZCh2ZXJ0ZXgsIFZlY3RvcjMubXVsdGlwbHlTY2FsYXIobm9ybWFsLCBsaW5lTGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsU2NyZWVuRW5kID0gVHJhbnNmb3JtVG9vbHMuTW9kZWxUb1NjcmVlblBvcyhub3JtYWxFbmQsIG1vZGVsTWF0cml4LCBjYW1lcmEpLnNjcmVlbjtcbiAgICAgICAgICAgICAgICB0aGlzLkRyYXdMaW5lKHZlcnRleFNjcmVlblBvcy54LCB2ZXJ0ZXhTY3JlZW5Qb3MueSwgbm9ybWFsU2NyZWVuRW5kLngsIG5vcm1hbFNjcmVlbkVuZC55LCBDb2xvci5SRUQpO1xuXG4gICAgICAgICAgICAgICAgLy8gMi4g57uY5Yi25YiH57q/IC0g57u/6ImyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFuZ2VudEVuZCA9IFZlY3RvcjMuYWRkKHZlcnRleCwgVmVjdG9yMy5tdWx0aXBseVNjYWxhcih0YW5nZW50RGlyLCBsaW5lTGVuZ3RoKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFuZ2VudFNjcmVlbkVuZCA9IFRyYW5zZm9ybVRvb2xzLk1vZGVsVG9TY3JlZW5Qb3ModGFuZ2VudEVuZCwgbW9kZWxNYXRyaXgsIGNhbWVyYSkuc2NyZWVuO1xuICAgICAgICAgICAgICAgIHRoaXMuRHJhd0xpbmUodmVydGV4U2NyZWVuUG9zLngsIHZlcnRleFNjcmVlblBvcy55LCB0YW5nZW50U2NyZWVuRW5kLngsIHRhbmdlbnRTY3JlZW5FbmQueSwgQ29sb3IuR1JFRU4pO1xuXG4gICAgICAgICAgICAgICAgLy8gMy4g57uY5Yi25Ymv5YiH57q/IC0g6buE6ImyXG4gICAgICAgICAgICAgICAgY29uc3QgYml0YW5nZW50RW5kID0gVmVjdG9yMy5hZGQodmVydGV4LCBWZWN0b3IzLm11bHRpcGx5U2NhbGFyKGJpdGFuZ2VudERpciwgbGluZUxlbmd0aCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpdGFuZ2VudFNjcmVlbkVuZCA9IFRyYW5zZm9ybVRvb2xzLk1vZGVsVG9TY3JlZW5Qb3MoYml0YW5nZW50RW5kLCBtb2RlbE1hdHJpeCwgY2FtZXJhKS5zY3JlZW47XG4gICAgICAgICAgICAgICAgdGhpcy5EcmF3TGluZSh2ZXJ0ZXhTY3JlZW5Qb3MueCwgdmVydGV4U2NyZWVuUG9zLnksIGJpdGFuZ2VudFNjcmVlbkVuZC54LCBiaXRhbmdlbnRTY3JlZW5FbmQueSwgQ29sb3IuWUVMTE9XKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgRHJhd0RlcHRoQnVmZmVyKCk6IHZvaWQge1xuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aDsgeCsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IEVuZ2luZUNvbmZpZy5jYW52YXNIZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0geSAqIEVuZ2luZUNvbmZpZy5jYW52YXNXaWR0aCArIHg7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudERlcHRoID0gdGhpcy5kZXB0aEJ1ZmZlcltpbmRleF07XG4gICAgICAgICAgICAgICAgLy8g5Yib5bu654Gw5bqm6aKc6Imy5a+56LGhXG4gICAgICAgICAgICAgICAgY29uc3QgZGVwdGhDb2xvciA9IG5ldyBDb2xvcihjdXJyZW50RGVwdGgsIGN1cnJlbnREZXB0aCwgY3VycmVudERlcHRoKTtcbiAgICAgICAgICAgICAgICB0aGlzLkRyYXdQaXhlbCh4LCB5LCBkZXB0aENvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgRHJhd1N0ZW5jaWxCdWZmZXIoKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB5ICogRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoICsgeDtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGVuY2lsVmFsdWUgPSB0aGlzLnN0ZW5jaWxCdWZmZXJbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ZW5jaWxDb2xvciA9IG5ldyBDb2xvcihzdGVuY2lsVmFsdWUsIHN0ZW5jaWxWYWx1ZSwgc3RlbmNpbFZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLkRyYXdQaXhlbCh4LCB5LCBzdGVuY2lsQ29sb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBEcmF3T3ZlcmRyYXcoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZnJhbWVCdWZmZXIuZmlsbCgwKTtcbiAgICAgICAgLy8g5L2/55So6aKE6K6+55qE5pyA5aSn5Y+v6KeG5YyW6IyD5Zu05p2l5b2S5LiA5YyWIE92ZXJkcmF3IOiuoeaVsFxuICAgICAgICBjb25zdCBNQVhfVklTVUFMSVpBVElPTl9SQU5HRSA9IDg7XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoOyB4KyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgRW5naW5lQ29uZmlnLmNhbnZhc0hlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB5ICogRW5naW5lQ29uZmlnLmNhbnZhc1dpZHRoICsgeDtcbiAgICAgICAgICAgICAgICBjb25zdCBvdmVyZHJhd0NvdW50ID0gdGhpcy5vdmVyZHJhd0J1ZmZlcltpbmRleF07XG4gICAgICAgICAgICAgICAgaWYgKG92ZXJkcmF3Q291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOWwhiBPdmVyZHJhdyDorqHmlbDpmZDliLblnKjlj6/op4bljJbojIPlm7TlhoXlubblvZLkuIDljJZcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZENvdW50ID0gTWF0aC5taW4ob3ZlcmRyYXdDb3VudCwgTUFYX1ZJU1VBTElaQVRJT05fUkFOR0UpIC8gTUFYX1ZJU1VBTElaQVRJT05fUkFOR0U7XG4gICAgICAgICAgICAgICAgICAgIC8vIOiuoeeul+mAj+aYjuW6pu+8mk92ZXJkcmF3IOi2iuWkmu+8jOi2iuS4jemAj+aYjlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHBoYSA9IG5vcm1hbGl6ZWRDb3VudDtcbiAgICAgICAgICAgICAgICAgICAgLy8g57uE5ZCI6aKc6Imy77yIQVJHQuagvOW8j++8iVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IENvbG9yLk9SQU5HRTtcbiAgICAgICAgICAgICAgICAgICAgY29sb3IuYSA9IGFscGhhO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLkRyYXdQaXhlbCh4LCB5LCBjb2xvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBEcmF3Qm91bmRzKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHJlbmRlcmVyIG9mIHRoaXMuY3VycmVudFJlbmRlcmVyT2Jqcykge1xuICAgICAgICAgICAgY29uc3QgbWVzaCA9IHJlbmRlcmVyLm1lc2g7XG4gICAgICAgICAgICBpZiAoIW1lc2gpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IGNhbWVyYSA9IENhbWVyYS5tYWluQ2FtZXJhO1xuICAgICAgICAgICAgY29uc3QgbW9kZWxNYXRyaXggPSByZW5kZXJlci50cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTWF0cml4O1xuXG4gICAgICAgICAgICBjb25zdCBib3VuZHMgPSBtZXNoLmJvdW5kcztcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gQ29sb3IuV0hJVEU7XG5cbiAgICAgICAgICAgIGNvbnN0IGJvdW5kID0gYm91bmRzWzBdO1xuXG4gICAgICAgICAgICAvLyDlsIbmiYDmnInpobbngrnovazmjaLliLDlsY/luZXnqbrpl7RcbiAgICAgICAgICAgIGNvbnN0IHNjcmVlblZlcnRpY2VzID0gYm91bmQudmVydGljZXMubWFwKHYgPT5cbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1Ub29scy5Nb2RlbFRvU2NyZWVuUG9zKG5ldyBWZWN0b3IzKHYueCwgdi55LCB2LnopLCBtb2RlbE1hdHJpeCwgY2FtZXJhKS5zY3JlZW5cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIOe7mOWItuaJgOaciei+uVxuICAgICAgICAgICAgYm91bmQuZWRnZXMuZm9yRWFjaCgoW2kxLCBpMl0pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MSA9IHNjcmVlblZlcnRpY2VzW2kxXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2MiA9IHNjcmVlblZlcnRpY2VzW2kyXTtcbiAgICAgICAgICAgICAgICB0aGlzLkRyYXdMaW5lKHYxLngsIHYxLnksIHYyLngsIHYyLnksIGNvbG9yKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyDnu5jliLbkuK3lv4PngrlcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IGJvdW5kLmNlbnRlcjtcbiAgICAgICAgICAgIGNvbnN0IHNjcmVlbkNlbnRlciA9IFRyYW5zZm9ybVRvb2xzLk1vZGVsVG9TY3JlZW5Qb3MoY2VudGVyLCBtb2RlbE1hdHJpeCwgY2FtZXJhKS5zY3JlZW47XG4gICAgICAgICAgICBpZiAoc2NyZWVuQ2VudGVyKSB7XG4gICAgICAgICAgICAgICAgLy8g57uY5Yi25LiA5Liq5bCP5Y2B5a2X5L2c5Li65Lit5b+D54K55qCH6K6wXG4gICAgICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IDU7XG4gICAgICAgICAgICAgICAgdGhpcy5EcmF3TGluZShcbiAgICAgICAgICAgICAgICAgICAgc2NyZWVuQ2VudGVyLnggLSBzaXplLCBzY3JlZW5DZW50ZXIueSxcbiAgICAgICAgICAgICAgICAgICAgc2NyZWVuQ2VudGVyLnggKyBzaXplLCBzY3JlZW5DZW50ZXIueSxcbiAgICAgICAgICAgICAgICAgICAgQ29sb3IuUkVEXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLkRyYXdMaW5lKFxuICAgICAgICAgICAgICAgICAgICBzY3JlZW5DZW50ZXIueCwgc2NyZWVuQ2VudGVyLnkgLSBzaXplLFxuICAgICAgICAgICAgICAgICAgICBzY3JlZW5DZW50ZXIueCwgc2NyZWVuQ2VudGVyLnkgKyBzaXplLFxuICAgICAgICAgICAgICAgICAgICBDb2xvci5SRURcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6aKc6Imy5o+S5YC86L6F5Yqp5Ye95pWwXG4gICAgICogQHBhcmFtIGNvbG9yMSDotbflp4vpopzoibIgKDMy5L2N5pW05pWw77yM5qC85byP5Li6MHhBQVJSR0dCQilcbiAgICAgKiBAcGFyYW0gY29sb3IyIOe7k+adn+minOiJsiAoMzLkvY3mlbTmlbDvvIzmoLzlvI/kuLoweEFBUlJHR0JCKVxuICAgICAqIEBwYXJhbSB0IOaPkuWAvOWboOWtkCAoMCDliLAgMSlcbiAgICAgKiBAcmV0dXJucyDmj5LlgLzlkI7nmoTpopzoibJcbiAgICAgKi9cbiAgICBwcml2YXRlIGludGVycG9sYXRlQ29sb3IoY29sb3IxOiBDb2xvciwgY29sb3IyOiBDb2xvciwgdDogbnVtYmVyKTogQ29sb3Ige1xuICAgICAgICAvLyDmj5Dlj5ZBUkdC5YiG6YePXG4gICAgICAgIGNvbnN0IGExID0gY29sb3IxLmE7XG4gICAgICAgIGNvbnN0IHIxID0gY29sb3IxLnI7XG4gICAgICAgIGNvbnN0IGcxID0gY29sb3IxLmc7XG4gICAgICAgIGNvbnN0IGIxID0gY29sb3IxLmI7XG5cbiAgICAgICAgY29uc3QgYTIgPSBjb2xvcjIuYTtcbiAgICAgICAgY29uc3QgcjIgPSBjb2xvcjIucjtcbiAgICAgICAgY29uc3QgZzIgPSBjb2xvcjIuZztcbiAgICAgICAgY29uc3QgYjIgPSBjb2xvcjIuYjtcblxuICAgICAgICAvLyDnur/mgKfmj5LlgLzmr4/kuKrliIbph49cbiAgICAgICAgY29uc3QgYSA9IE1hdGgucm91bmQoYTEgKyAoYTIgLSBhMSkgKiB0KTtcbiAgICAgICAgY29uc3QgciA9IE1hdGgucm91bmQocjEgKyAocjIgLSByMSkgKiB0KTtcbiAgICAgICAgY29uc3QgZyA9IE1hdGgucm91bmQoZzEgKyAoZzIgLSBnMSkgKiB0KTtcbiAgICAgICAgY29uc3QgYiA9IE1hdGgucm91bmQoYjEgKyAoYjIgLSBiMSkgKiB0KTtcblxuICAgICAgICByZXR1cm4gbmV3IENvbG9yKHIsIGcsIGIsIGEpO1xuICAgIH1cblxuICAgIC8vI2VuZHJlZ2lvblxufSIsImltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL01hdGgvQ29sb3JcIjtcbmltcG9ydCB7IE1hdHJpeDR4NCB9IGZyb20gXCIuLi9NYXRoL01hdHJpeDR4NFwiO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjJcIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgeyBWZWN0b3I0IH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yNFwiO1xuaW1wb3J0IHsgQ3ViZU1hcCB9IGZyb20gXCIuLi9SZXNvdXJjZXMvQ3ViZU1hcFwiO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gXCIuLi9SZXNvdXJjZXMvVGV4dHVyZVwiO1xuXG4vLyDmlK/mjIHnmoTlsZ7mgKfnsbvlnotcbmV4cG9ydCB0eXBlIEF0dHJpYnV0ZVR5cGUgPSBudW1iZXIgfCBDb2xvciB8IFZlY3RvcjIgfCBWZWN0b3IzIHwgVmVjdG9yNCB8IE1hdHJpeDR4NCB8IFRleHR1cmUgfCBDdWJlTWFwIHwgc3RyaW5nO1xuXG4vLyDpobbngrnlsZ7mgKfpm4blkIjvvIzplK7kuLrlsZ7mgKflkI3np7DvvIzlgLzkuLrku7vmhI/mlK/mjIHnmoTnsbvlnotcbmV4cG9ydCBpbnRlcmZhY2UgVmVydGV4QXR0cmlidXRlcyB7XG4gICAgW2tleTogc3RyaW5nXTogQXR0cmlidXRlVHlwZTtcbn1cblxuLy8g552A6Imy5ZmoUGFzc+aOpeWPo1xuZXhwb3J0IGludGVyZmFjZSBTaGFkZXJQYXNzIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIC8vIOmhtueCueedgOiJsuWZqO+8muW4pum7mOiupOWunueOsFxuICAgIHZlcnQ6IChpbnB1dDogVmVydGV4QXR0cmlidXRlcykgPT4geyB2ZXJ0ZXhPdXQ6IFZlY3RvcjQ7IGF0dHJPdXQ6IFZlcnRleEF0dHJpYnV0ZXM7IH07XG4gICAgLy8g54mH5q61552A6Imy5Zmo77ya6buY6K6k6L+U5Zue5rSL57qi6ImyXG4gICAgZnJhZzogKGlucHV0OiBWZXJ0ZXhBdHRyaWJ1dGVzKSA9PiBDb2xvciB8IG51bGw7XG4gICAgLy8g5riy5p+T54q25oCBXG4gICAgcmVuZGVyU3RhdGU/OiBTaGFkZXJSZW5kZXJTdGF0ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaGFkZXJSZW5kZXJTdGF0ZSB7XG4gICAgY29sb3JNYXNrPzogQ29sb3JNYXNrOyAgICAgICAgICAgLy8g6aKc6Imy5YaZ5YWl6YCa6YGT5o6p56CB77yM6buY6K6k5YC85Li6IEFsbFxuICAgIGN1bGxNb2RlPzogQ3VsbE1vZGU7ICAgICAgICAgICAgIC8vIOWJlOmZpOaooeW8j++8jOm7mOiupOWAvCBCYWNrXG4gICAgelRlc3Q/OiBaVGVzdDsgICAgICAgICAgICAgICAgICAgLy8g5pep5pyf5rex5bqm5rWL6K+V5Ye95pWw77yM6buY6K6k5YC8IExFcXVhbFxuICAgIHpXcml0ZT86IGJvb2xlYW47ICAgICAgICAgICAgICAgIC8vIOa3seW6puWGmeWFpe+8jOm7mOiupOWAvOS4uiB0cnVlXG4gICAgYmxlbmQ/OiBCbGVuZDsgICAgICAgICAgICAgICAgICAgLy8g5re35ZCI54q25oCBXG4gICAgc3RlbmNpbD86IFN0ZW5jaWw7ICAgICAgICAgICAgICAgLy8g5qih5p2/5rWL6K+V54q25oCBXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmxlbmQge1xuICAgIG9wPzogQmxlbmRPcDsgICAgICAgICAgICAvLyDmt7flkIjmk43kvZzvvIzpu5jorqTlgLzkuLogQWRkXG4gICAgc3JjOiBCbGVuZEZhY3RvcjtcbiAgICBkc3Q6IEJsZW5kRmFjdG9yO1xuICAgIC8vIFVuaXR55pSv5oyBUkdC6LefQeWIhuW8gOiuoeeul+a3t+WQiO+8jOi/memHjOeugOWNleWunueOsOaaguaXtuWxj+iUvVxuICAgIC8vIHNyY1JHQj86IEJsZW5kRmFjdG9yO1xuICAgIC8vIGRzdFJHQj86IEJsZW5kRmFjdG9yO1xuICAgIC8vIHNyY0FscGhhPzogQmxlbmRGYWN0b3I7XG4gICAgLy8gZHN0QWxwaGE/OiBCbGVuZEZhY3Rvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGVuY2lsIHtcbiAgICAvKlxuICAgIFJlZjpHUFUg5L2/55So5ZyoIGNvbXBhcmVPcGVyYXRpb24g5Lit5a6a5LmJ55qE5pON5L2c5bCG5qih5p2/57yT5Yay5Yy655qE5b2T5YmN5YaF5a655LiO5q2k5YC86L+b6KGM5q+U6L6D44CCXG4gICAg5q2k5YC85L2/55SoIHJlYWRNYXNrIOaIliB3cml0ZU1hc2sg6L+b6KGM6YGu572p77yM5YW35L2T5Y+W5Yaz5LqO6L+b6KGM55qE5piv6K+75Y+W5pON5L2c6L+Y5piv5YaZ5YWl5pON5L2c44CCXG4gICAg5aaC5p6cIFBhc3PjgIFGYWlsIOaIliBaRmFpbCDnmoTlgLzkuLogUmVwbGFjZe+8jOWImSBHUFUg5Lmf5Y+v5Lul5bCG5q2k5YC85YaZ5YWl5qih5p2/57yT5Yay5Yy644CCXG4gICAgKi9cbiAgICByZWY/OiBudW1iZXI7ICAgICAgICAgICAgIC8vIOWPguiAg+WAvO+8jDAg5YiwIDI1NeOAgum7mOiupOWAvOS4uiAwXG4gICAgcmVhZE1hc2s/OiBudW1iZXI7ICAgICAgICAvLyBHUFUg5Zyo5omn6KGM5qih5p2/5rWL6K+V5pe25L2/55So5q2k5YC85L2c5Li66YGu572p44CCMCDliLAgMjU144CC6buY6K6k5YC85Li6IDI1NVxuICAgIHdyaXRlTWFzaz86IG51bWJlcjsgICAgICAgLy8gR1BVIOWcqOWGmeWFpeaooeadv+e8k+WGsuWMuuaXtuS9v+eUqOatpOWAvOS9nOS4uumBrue9qeOAgjAg5YiwIDI1NeOAgum7mOiupOWAvOS4uiAyNTVcbiAgICBjb21wYXJpc29uT3BlcmF0aW9uPzogU3RlbmNpbENvbXBhcmVGdW5jdGlvbjsgICAvLyBHUFUg5Li65omA5pyJ5YOP57Sg55qE5qih5p2/5rWL6K+V5omn6KGM55qE5pON5L2c44CC6buY6K6k5YC85Li6IEFsd2F5c1xuICAgIHBhc3NPcGVyYXRpb24/OiBTdGVuY2lsT3A7ICAgICAgLy8g5b2T5YOP57Sg6YCa6L+H5qih5p2/5rWL6K+V5ZKM5rex5bqm5rWL6K+V5pe277yMR1BVIOWvueaooeadv+e8k+WGsuWMuuaJp+ihjOeahOaTjeS9nOOAgum7mOiupOWAvOS4uiBLZWVwXG4gICAgZmFpbE9wZXJhdGlvbj86IFN0ZW5jaWxPcDsgICAgICAvLyDlvZPlg4/ntKDmnKrpgJrov4fmqKHmnb/mtYvor5Xml7bvvIxHUFUg5a+55qih5p2/57yT5Yay5Yy65omn6KGM55qE5pON5L2c44CC6buY6K6k5YC85Li6IEtlZXBcbiAgICB6RmFpbE9wZXJhdGlvbj86IFN0ZW5jaWxPcDsgICAgIC8vIOW9k+WDj+e0oOmAmui/h+aooeadv+a1i+ivleS9huacqumAmui/h+a3seW6pua1i+ivleaXtu+8jEdQVSDlr7nmqKHmnb/nvJPlhrLljLrmiafooYznmoTmk43kvZzjgILpu5jorqTlgLzkuLogS2VlcFxufVxuXG5leHBvcnQgZW51bSBCbGVuZEZhY3RvciB7XG4gICAgT25lLCAgICAgICAgICAgIC8vIOatpOi+k+WFpeeahOWAvOaYryBvbmXjgILor6XlgLznlKjkuo7kvb/nlKjmupDmiJbnm67moIfnmoTpopzoibLnmoTlgLzjgIJcbiAgICBaZXJvLCAgICAgICAgICAgLy8g5q2k6L6T5YWl55qE5YC85pivIHplcm/jgILor6XlgLznlKjkuo7liKDpmaTmupDmiJbnm67moIflgLzjgIJcbiAgICBTcmNDb2xvciwgICAgICAgLy8gR1BVIOWwhuatpOi+k+WFpeeahOWAvOS5mOS7pea6kOminOiJsuWAvOOAglxuICAgIFNyY0FscGhhLCAgICAgICAvLyBHUFUg5bCG5q2k6L6T5YWl55qE5YC85LmY5Lul5rqQIEFscGhhIOWAvOOAglxuICAgIERzdENvbG9yLCAgICAgICAvLyBHUFUg5bCG5q2k6L6T5YWl55qE5YC85LmY5Lul5bin57yT5Yay5Yy655qE5rqQ6aKc6Imy5YC844CCXG4gICAgRHN0QWxwaGEsICAgICAgIC8vIEdQVSDlsIbmraTovpPlhaXnmoTlgLzkuZjku6XluKfnvJPlhrLljLrnmoTmupAgQWxwaGEg5YC844CCXG4gICAgT25lTWludXNTcmNDb2xvciwgICAgICAgLy8gR1BVIOWwhuatpOi+k+WFpeeahOWAvOS5mOS7pe+8iDEgLSDmupDpopzoibLvvInjgIJcbiAgICBPbmVNaW51c1NyY0FscGhhLCAgICAgICAvLyBHUFUg5bCG5q2k6L6T5YWl55qE5YC85LmY5Lul77yIMSAtIOa6kCBBbHBoYe+8ieOAglxuICAgIE9uZU1pbnVzRHN0Q29sb3IsICAgICAgIC8vIEdQVSDlsIbmraTovpPlhaXnmoTlgLzkuZjku6XvvIgxIC0g55uu5qCH6aKc6Imy77yJ44CCXG4gICAgT25lTWludXNEc3RBbHBoYSwgICAgICAgLy8gR1BVIOWwhuatpOi+k+WFpeeahOWAvOS5mOS7pe+8iDEgLSDnm67moIcgQWxwaGHvvInjgIJcbn1cblxuZXhwb3J0IGVudW0gQmxlbmRPcCB7XG4gICAgQWRkLCAgICAvLyDlsIbmupDlkoznm67moIfnm7jliqDjgIJcbiAgICBTdWIsICAgIC8vIOS7jua6kOWHj+WOu+ebruagh+OAglxuICAgIFJldlN1YiwgLy8g5LuO55uu5qCH5YeP5Y675rqQ44CCXG4gICAgTWluLCAgICAvLyDkvb/nlKjmupDlkoznm67moIfkuK3nmoTovoPlsI/ogIXjgIJcbiAgICBNYXgsICAgIC8vIOS9v+eUqOa6kOWSjOebruagh+S4reeahOi+g+Wkp+iAheOAglxufVxuXG5leHBvcnQgZW51bSBSZW5kZXJUeXBlIHtcbiAgICBPcGFxdWUsXG4gICAgVHJhbnNwYXJlbnRcbn1cblxuZXhwb3J0IGVudW0gQ29sb3JNYXNrIHtcbiAgICBOb25lID0gMCxcbiAgICBSZWQgPSAxLFxuICAgIEdyZWVuID0gMixcbiAgICBCbHVlID0gNCxcbiAgICBBbHBoYSA9IDgsXG4gICAgQWxsID0gUmVkIHwgR3JlZW4gfCBCbHVlIHwgQWxwaGFcbn1cblxuZXhwb3J0IGVudW0gQ3VsbE1vZGUge1xuICAgIE9mZiA9IDAsXG4gICAgRnJvbnQgPSAxLFxuICAgIEJhY2sgPSAyLFxufVxuXG5leHBvcnQgZW51bSBTdGVuY2lsQ29tcGFyZUZ1bmN0aW9uIHtcbiAgICBOZXZlciA9IDEsXHQgICAgLy8g5LuO5LiN5riy5p+T5YOP57Sg44CCXG4gICAgTGVzcyA9IDIsXHQgICAgLy8g5Zyo5Y+C6ICD5YC85bCP5LqO5qih5p2/57yT5Yay5Yy65Lit55qE5b2T5YmN5YC85pe25riy5p+T5YOP57Sg44CCXG4gICAgRXF1YWwgPSAzLFx0ICAgIC8vIOWcqOWPguiAg+WAvOetieS6juaooeadv+e8k+WGsuWMuuS4reeahOW9k+WJjeWAvOaXtua4suafk+WDj+e0oOOAglxuICAgIExFcXVhbCA9IDQsXHQgICAgLy8g5Zyo5Y+C6ICD5YC85bCP5LqO5oiW562J5LqO5qih5p2/57yT5Yay5Yy65Lit55qE5b2T5YmN5YC85pe25riy5p+T5YOP57Sg44CCXG4gICAgR3JlYXRlciA9IDUsXHQvLyDlnKjlj4LogIPlgLzlpKfkuo7mqKHmnb/nvJPlhrLljLrkuK3nmoTlvZPliY3lgLzml7bmuLLmn5Plg4/ntKDjgIJcbiAgICBOb3RFcXVhbCA9IDYsXHQvLyDlnKjlj4LogIPlgLzkuI7mqKHmnb/nvJPlhrLljLrkuK3nmoTlvZPliY3lgLzkuI3lkIzml7bmuLLmn5Plg4/ntKDjgIJcbiAgICBHRXF1YWwgPSA3LFx0ICAgIC8vIOWcqOWPguiAg+WAvOWkp+S6juaIluetieS6juaooeadv+e8k+WGsuWMuuS4reeahOW9k+WJjeWAvOaXtua4suafk+WDj+e0oOOAglxuICAgIEFsd2F5cyA9IDgsXHQgICAgLy8g5aeL57uI5riy5p+T5YOP57Sg44CCXG59XG5cbmV4cG9ydCBlbnVtIFN0ZW5jaWxPcCB7XG4gICAgS2VlcCA9IDAsXHQgICAgLy8g5L+d5oyB5qih5p2/57yT5Yay5Yy655qE5b2T5YmN5YaF5a6544CCXG4gICAgWmVybyA9IDEsXHQgICAgLy8g5bCGIDAg5YaZ5YWl5qih5p2/57yT5Yay5Yy644CCXG4gICAgUmVwbGFjZSA9IDIsXHQvLyDlsIblj4LogIPlgLzlhpnlhaXnvJPlhrLljLrjgIJcbiAgICBJbmNyU2F0ID0gMyxcdC8vIOmAkuWinue8k+WGsuWMuuS4reeahOW9k+WJjeWAvOOAguWmguaenOivpeWAvOW3sue7j+aYryAyNTXvvIzliJnkv53mjIHkuLogMjU144CCXG4gICAgRGVjclNhdCA9IDQsXHQvLyDpgJLlh4/nvJPlhrLljLrkuK3nmoTlvZPliY3lgLzjgILlpoLmnpzor6XlgLzlt7Lnu4/mmK8gMO+8jOWImeS/neaMgeS4uiAw44CCXG4gICAgSW52ZXJ0ID0gNSxcdCAgICAvLyDlsIbnvJPlhrLljLrkuK3lvZPliY3lgLznmoTmiYDmnInkvY3msYLlj43jgIJcbiAgICBJbmNyV3JhcCA9IDcsXHQvLyDpgJLlop7nvJPlhrLljLrkuK3nmoTlvZPliY3lgLzjgILlpoLmnpzor6XlgLzlt7Lnu4/mmK8gMjU177yM5YiZ5Y+Y5Li6IDDjgIJcbiAgICBEZWNyV3JhcCA9IDgsXHQvLyDpgJLlh4/nvJPlhrLljLrkuK3nmoTlvZPliY3lgLzjgILlpoLmnpzor6XlgLzlt7Lnu4/mmK8gMO+8jOWImeWPmOS4uiAyNTXjgIJcbn1cblxuZXhwb3J0IGVudW0gWlRlc3Qge1xuICAgIExlc3MsXHQgICAgLy8g57uY5Yi25L2N5LqO546w5pyJ5Yeg5L2V5L2T5YmN6Z2i55qE5Yeg5L2V5L2T44CC5LiN57uY5Yi25L2N5LqO546w5pyJ5Yeg5L2V5L2T55u45ZCM6Led56a75oiW5ZCO6Z2i55qE5Yeg5L2V5L2T44CCXG4gICAgTEVxdWFsLFx0ICAgIC8vIOe7mOWItuS9jeS6jueOsOacieWHoOS9leS9k+WJjemdouaIluebuOWQjOi3neemu+eahOWHoOS9leS9k+OAguS4jee7mOWItuS9jeS6jueOsOacieWHoOS9leS9k+WQjumdoueahOWHoOS9leS9k+OAglxuICAgIEVxdWFsLFx0ICAgIC8vIOe7mOWItuS9jeS6jueOsOacieWHoOS9leS9k+ebuOWQjOi3neemu+eahOWHoOS9leS9k+OAguS4jee7mOWItuS9jeS6jueOsOacieWHoOS9leS9k+WJjemdoueahOaIluWQjumdoueahOWHoOS9leS9k+OAglxuICAgIEdFcXVhbCxcdCAgICAvLyDnu5jliLbkvY3kuo7njrDmnInlh6DkvZXkvZPlkI7pnaLmiJbnm7jlkIzot53nprvnmoTlh6DkvZXkvZPjgILkuI3nu5jliLbkvY3kuo7njrDmnInlh6DkvZXkvZPliY3pnaLnmoTlh6DkvZXkvZPjgIJcbiAgICBHcmVhdGVyLFx0Ly8g57uY5Yi25L2N5LqO546w5pyJ5Yeg5L2V5L2T5ZCO6Z2i55qE5Yeg5L2V5L2T44CC5LiN57uY5Yi25L2N5LqO546w5pyJ5Yeg5L2V5L2T55u45ZCM6Led56a75oiW5YmN6Z2i55qE5Yeg5L2V5L2T44CCXG4gICAgTm90RXF1YWwsXHQvLyDnu5jliLbkuI3kvY3kuo7njrDmnInlh6DkvZXkvZPnm7jlkIzot53nprvnmoTlh6DkvZXkvZPjgILkuI3nu5jliLbkvY3kuo7njrDmnInlh6DkvZXkvZPnm7jlkIzot53nprvnmoTlh6DkvZXkvZPjgIJcbiAgICBBbHdheXMsXHQgICAgLy8g5LiN6L+b6KGM5rex5bqm5rWL6K+V44CC57uY5Yi25omA5pyJ5Yeg5L2V5L2T77yM5peg6K666Led56a75aaC5L2V44CCXG59XG5cbi8vIOaooeadv+a1i+ivleW4uOeUqOmFjee9rumihOiuvlxuZXhwb3J0IGNvbnN0IFN0ZW5jaWxQcmVzZXRzID0ge1xuICAgIC8vIOWPqua4suafk+WJjemdoueahOeJqeS9k++8jOmBruaMoeWQjumdoueahOeJqeS9k1xuICAgIGZyb250T25seShyZWY6IG51bWJlcik6IFBhcnRpYWw8U3RlbmNpbD4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29tcGFyaXNvbk9wZXJhdGlvbjogU3RlbmNpbENvbXBhcmVGdW5jdGlvbi5FcXVhbCxcbiAgICAgICAgICAgIHJlZjogcmVmLFxuICAgICAgICAgICAgcGFzc09wZXJhdGlvbjogU3RlbmNpbE9wLktlZXAsXG4gICAgICAgICAgICBmYWlsT3BlcmF0aW9uOiBTdGVuY2lsT3AuWmVybyxcbiAgICAgICAgICAgIHpGYWlsT3BlcmF0aW9uOiBTdGVuY2lsT3AuS2VlcFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8vIOWPqua4suafk+iiq+agh+iusOeJqeS9k+eahOi9ruW7k1xuICAgIG91dGxpbmUocmVmOiBudW1iZXIpOiBQYXJ0aWFsPFN0ZW5jaWw+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbXBhcmlzb25PcGVyYXRpb246IFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24uTm90RXF1YWwsXG4gICAgICAgICAgICByZWY6IHJlZixcbiAgICAgICAgICAgIHBhc3NPcGVyYXRpb246IFN0ZW5jaWxPcC5LZWVwLFxuICAgICAgICAgICAgZmFpbE9wZXJhdGlvbjogU3RlbmNpbE9wLktlZXAsXG4gICAgICAgICAgICB6RmFpbE9wZXJhdGlvbjogU3RlbmNpbE9wLktlZXBcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyDntK/np6/muLLmn5PvvIjlpoLmuLLmn5PpgI/mmI7niankvZPvvIlcbiAgICBhY2N1bXVsYXRlKHJlZjogbnVtYmVyKTogUGFydGlhbDxTdGVuY2lsPiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21wYXJpc29uT3BlcmF0aW9uOiBTdGVuY2lsQ29tcGFyZUZ1bmN0aW9uLkFsd2F5cyxcbiAgICAgICAgICAgIHJlZjogcmVmLFxuICAgICAgICAgICAgcGFzc09wZXJhdGlvbjogU3RlbmNpbE9wLkluY3JTYXQsXG4gICAgICAgICAgICBmYWlsT3BlcmF0aW9uOiBTdGVuY2lsT3AuS2VlcCxcbiAgICAgICAgICAgIHpGYWlsT3BlcmF0aW9uOiBTdGVuY2lsT3AuS2VlcFxuICAgICAgICB9XG4gICAgfSxcbn07XG5cbi8qKlxuICog5omn6KGM5rex5bqm5rWL6K+VXG4gKiBAcGFyYW0geiDlvZPliY3niYflhYPnmoTmt7HluqblgLxcbiAqIEBwYXJhbSBjdXJyZW50RGVwdGgg5rex5bqm57yT5Yay5Yy65Lit5a+55bqU5L2N572u55qE5rex5bqm5YC8XG4gKiBAcGFyYW0gelRlc3RGdW5jIOa3seW6pua1i+ivleWHveaVsO+8iFpUZXN0IOaemuS4vuWAvO+8iVxuICogQHJldHVybnMg5piv5ZCm6YCa6L+H5rex5bqm5rWL6K+VXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXB0aFRlc3QoejogbnVtYmVyLCBjdXJyZW50RGVwdGg6IG51bWJlciwgelRlc3RGdW5jOiBaVGVzdCA9IFpUZXN0LkxFcXVhbCk6IGJvb2xlYW4ge1xuICAgIHN3aXRjaCAoelRlc3RGdW5jKSB7XG4gICAgICAgIGNhc2UgWlRlc3QuTGVzczpcbiAgICAgICAgICAgIHJldHVybiB6IDwgY3VycmVudERlcHRoOyAvLyDlsI/kuo7lvZPliY3mt7HluqbliJnpgJrov4dcbiAgICAgICAgY2FzZSBaVGVzdC5FcXVhbDpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh6IC0gY3VycmVudERlcHRoKSA8IDFlLTY7IC8vIOetieS6juW9k+WJjea3seW6puWImemAmui/h++8iOmcgOiAg+iZkea1rueCueeyvuW6pu+8iVxuICAgICAgICBjYXNlIFpUZXN0LkxFcXVhbDpcbiAgICAgICAgICAgIHJldHVybiB6IDw9IGN1cnJlbnREZXB0aDsgLy8g5bCP5LqO5oiW562J5LqO5b2T5YmN5rex5bqm5YiZ6YCa6L+HXG4gICAgICAgIGNhc2UgWlRlc3QuR3JlYXRlcjpcbiAgICAgICAgICAgIHJldHVybiB6ID4gY3VycmVudERlcHRoOyAvLyDlpKfkuo7lvZPliY3mt7HluqbliJnpgJrov4dcbiAgICAgICAgY2FzZSBaVGVzdC5Ob3RFcXVhbDpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmFicyh6IC0gY3VycmVudERlcHRoKSA+PSAxZS02OyAvLyDkuI3nrYnkuo7lvZPliY3mt7HluqbliJnpgJrov4dcbiAgICAgICAgY2FzZSBaVGVzdC5HRXF1YWw6XG4gICAgICAgICAgICByZXR1cm4geiA+PSBjdXJyZW50RGVwdGg7IC8vIOWkp+S6juaIluetieS6juW9k+WJjea3seW6puWImemAmui/h1xuICAgICAgICBjYXNlIFpUZXN0LkFsd2F5czpcbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyDmgLvmmK/pgJrov4dcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlVua25vd24gWlRlc3QgZnVuY3Rpb24sIHVzaW5nIExlc3MgYXMgZGVmYXVsdC5cIik7XG4gICAgICAgICAgICByZXR1cm4geiA8IGN1cnJlbnREZXB0aDtcbiAgICB9XG59XG5cbi8qKlxuICog5omn6KGM5bim5o6p56CB55qE5qih5p2/5q+U6L6D5pON5L2cXG4gKiBAcGFyYW0gY3VycmVudFZhbHVlIOW9k+WJjeaooeadv+WAvFxuICogQHBhcmFtIHJlZlZhbHVlIOWPguiAg+WAvFxuICogQHBhcmFtIGZ1bmMg5q+U6L6D5Ye95pWwXG4gKiBAcGFyYW0gcmVhZE1hc2sg6K+75Y+W5o6p56CB77yM55So5LqO6L+H5ruk6ZyA6KaB5q+U6L6D55qE5L2NXG4gKiBAcmV0dXJucyDmr5TovoPnu5PmnpzvvIjmmK/lkKbpgJrov4fvvIlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0ZW5jaWxUZXN0KFxuICAgIGN1cnJlbnRWYWx1ZTogbnVtYmVyLFxuICAgIHJlZlZhbHVlOiBudW1iZXIgPSAwLFxuICAgIGZ1bmM6IFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24gPSBTdGVuY2lsQ29tcGFyZUZ1bmN0aW9uLkFsd2F5cyxcbiAgICByZWFkTWFzazogbnVtYmVyID0gMHhGRlxuKTogYm9vbGVhbiB7XG4gICAgLy8g5bqU55So6K+75Y+W5o6p56CB77yM5Y+q5L+d55WZ6ZyA6KaB5q+U6L6D55qE5L2NXG4gICAgY29uc3QgbWFza2VkQ3VycmVudCA9IGN1cnJlbnRWYWx1ZSAmIHJlYWRNYXNrO1xuICAgIGNvbnN0IG1hc2tlZFJlZiA9IHJlZlZhbHVlICYgcmVhZE1hc2s7XG5cbiAgICBzd2l0Y2ggKGZ1bmMpIHtcbiAgICAgICAgY2FzZSBTdGVuY2lsQ29tcGFyZUZ1bmN0aW9uLk5ldmVyOlxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjYXNlIFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24uTGVzczpcbiAgICAgICAgICAgIHJldHVybiBtYXNrZWRDdXJyZW50IDwgbWFza2VkUmVmO1xuICAgICAgICBjYXNlIFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24uRXF1YWw6XG4gICAgICAgICAgICByZXR1cm4gbWFza2VkQ3VycmVudCA9PT0gbWFza2VkUmVmO1xuICAgICAgICBjYXNlIFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24uTEVxdWFsOlxuICAgICAgICAgICAgcmV0dXJuIG1hc2tlZEN1cnJlbnQgPD0gbWFza2VkUmVmO1xuICAgICAgICBjYXNlIFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24uR3JlYXRlcjpcbiAgICAgICAgICAgIHJldHVybiBtYXNrZWRDdXJyZW50ID4gbWFza2VkUmVmO1xuICAgICAgICBjYXNlIFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24uTm90RXF1YWw6XG4gICAgICAgICAgICByZXR1cm4gbWFza2VkQ3VycmVudCAhPT0gbWFza2VkUmVmO1xuICAgICAgICBjYXNlIFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24uR0VxdWFsOlxuICAgICAgICAgICAgcmV0dXJuIG1hc2tlZEN1cnJlbnQgPj0gbWFza2VkUmVmO1xuICAgICAgICBjYXNlIFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24uQWx3YXlzOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG4vKipcbiAqIOW6lOeUqOaooeadv+aTjeS9nFxuICogQHBhcmFtIGN1cnJlbnRWYWx1ZSDlvZPliY3mqKHmnb/lgLxcbiAqIEBwYXJhbSByZWZWYWx1ZSDlj4LogIPlgLxcbiAqIEBwYXJhbSBvcCDopoHmiafooYznmoTmk43kvZxcbiAqIEBwYXJhbSB3cml0ZU1hc2sg5YaZ5YWl5o6p56CBXG4gKiBAcmV0dXJucyDmlrDnmoTmqKHmnb/lgLxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5U3RlbmNpbE9wZXJhdGlvbihcbiAgICBjdXJyZW50VmFsdWU6IG51bWJlcixcbiAgICByZWZWYWx1ZTogbnVtYmVyID0gMCxcbiAgICBvcDogU3RlbmNpbE9wID0gU3RlbmNpbE9wLktlZXAsXG4gICAgd3JpdGVNYXNrOiBudW1iZXIgPSAweEZGXG4pOiBudW1iZXIge1xuICAgIGxldCBuZXdWYWx1ZSA9IGN1cnJlbnRWYWx1ZTtcblxuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgICAgY2FzZSBTdGVuY2lsT3AuS2VlcDpcbiAgICAgICAgICAgIC8vIOS/neaMgeW9k+WJjeWAvFxuICAgICAgICAgICAgbmV3VmFsdWUgPSBjdXJyZW50VmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTdGVuY2lsT3AuWmVybzpcbiAgICAgICAgICAgIC8vIOiuvue9ruS4ujBcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gMDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFN0ZW5jaWxPcC5SZXBsYWNlOlxuICAgICAgICAgICAgLy8g5pu/5o2i5Li65Y+C6ICD5YC8XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IHJlZlZhbHVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU3RlbmNpbE9wLkluY3JTYXQ6XG4gICAgICAgICAgICAvLyDpgJLlop7lubbppbHlkozvvIjkuI3otoXov4cyNTXvvIlcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gTWF0aC5taW4oY3VycmVudFZhbHVlICsgMSwgMjU1KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFN0ZW5jaWxPcC5EZWNyU2F0OlxuICAgICAgICAgICAgLy8g6YCS5YeP5bm26aWx5ZKM77yI5LiN5L2O5LqOMO+8iVxuICAgICAgICAgICAgbmV3VmFsdWUgPSBNYXRoLm1heChjdXJyZW50VmFsdWUgLSAxLCAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFN0ZW5jaWxPcC5JbnZlcnQ6XG4gICAgICAgICAgICAvLyDlj43ovazlvZPliY3lgLzvvIjku4XkvY445L2N77yJXG4gICAgICAgICAgICBuZXdWYWx1ZSA9ICh+Y3VycmVudFZhbHVlKSAmIDB4RkY7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTdGVuY2lsT3AuSW5jcldyYXA6XG4gICAgICAgICAgICAvLyDpgJLlop7lubblvqrnjq/vvIjotoXov4cyNTXliJnlm57liLAw77yJXG4gICAgICAgICAgICBuZXdWYWx1ZSA9IChjdXJyZW50VmFsdWUgKyAxKSAlIDI1NjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFN0ZW5jaWxPcC5EZWNyV3JhcDpcbiAgICAgICAgICAgIC8vIOmAkuWHj+W5tuW+queOr++8iOS9juS6jjDliJnlm57liLAyNTXvvIlcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gKGN1cnJlbnRWYWx1ZSAtIDEgKyAyNTYpICUgMjU2O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8g5bqU55So5YaZ5YWl5o6p56CB77ya5Y+q5L+u5pS55o6p56CB5YWB6K6455qE5L2NXG4gICAgcmV0dXJuIChuZXdWYWx1ZSAmIHdyaXRlTWFzaykgfCAoY3VycmVudFZhbHVlICYgfndyaXRlTWFzayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNvbG9yTWFzayhjb2xvcjogQ29sb3IsIGJ1ZmZlckNvbG9yOiBDb2xvciwgbWFzazogQ29sb3JNYXNrKSB7XG4gICAgY29sb3IuciA9IChtYXNrICYgQ29sb3JNYXNrLlJlZCkgPyBjb2xvci5yIDogYnVmZmVyQ29sb3IucjtcbiAgICBjb2xvci5nID0gKG1hc2sgJiBDb2xvck1hc2suR3JlZW4pID8gY29sb3IuZyA6IGJ1ZmZlckNvbG9yLmc7XG4gICAgY29sb3IuYiA9IChtYXNrICYgQ29sb3JNYXNrLkJsdWUpID8gY29sb3IuYiA6IGJ1ZmZlckNvbG9yLmI7XG4gICAgY29sb3IuYSA9IChtYXNrICYgQ29sb3JNYXNrLkFscGhhKSA/IGNvbG9yLmEgOiBidWZmZXJDb2xvci5hO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmxlbmRDb2xvcnMoc3JjQ29sb3I6IENvbG9yLCBkc3RDb2xvcjogQ29sb3IsIHNyY0ZhY3RvcjogQmxlbmRGYWN0b3IsIGRzdEZhY3RvcjogQmxlbmRGYWN0b3IsIGJsZW5kT3A6IEJsZW5kT3AgPSBCbGVuZE9wLkFkZCk6IENvbG9yIHtcbiAgICAvLyBmaW5hbFZhbHVlID0gc291cmNlRmFjdG9yICogc291cmNlVmFsdWUgb3BlcmF0aW9uIGRlc3RpbmF0aW9uRmFjdG9yICogZGVzdGluYXRpb25WYWx1ZVxuICAgIC8vIOacgOe7iOminOiJsiA9IOa6kOminOiJsiDDlyDmupDlm6DlrZAgW+a3t+WQiOaTjeS9nF0g55uu5qCH6aKc6ImyIMOXIOebruagh+WboOWtkFxuXG4gICAgLy8g6K6h566X5rqQ5Zug5a2Q5ZKM55uu5qCH5Zug5a2Q55qE5YW35L2T5YC8XG4gICAgY29uc3QgW3NyY1JGYWN0b3IsIHNyY0dGYWN0b3IsIHNyY0JGYWN0b3IsIHNyY0FGYWN0b3JdID0gZ2V0QmxlbmRGYWN0b3JWYWx1ZXMoc3JjQ29sb3IsIGRzdENvbG9yLCBzcmNGYWN0b3IpO1xuICAgIGNvbnN0IFtkc3RSRmFjdG9yLCBkc3RHRmFjdG9yLCBkc3RCRmFjdG9yLCBkc3RBRmFjdG9yXSA9IGdldEJsZW5kRmFjdG9yVmFsdWVzKHNyY0NvbG9yLCBkc3RDb2xvciwgZHN0RmFjdG9yKTtcblxuICAgIC8vIOiuoeeul+a3t+WQiOWQjueahOavj+S4qumAmumBk+WAvFxuICAgIGxldCByID0gY2FsY3VsYXRlQmxlbmRWYWx1ZShzcmNDb2xvci5yLCBkc3RDb2xvci5yLCBzcmNSRmFjdG9yLCBkc3RSRmFjdG9yLCBibGVuZE9wKTtcbiAgICBsZXQgZyA9IGNhbGN1bGF0ZUJsZW5kVmFsdWUoc3JjQ29sb3IuZywgZHN0Q29sb3IuZywgc3JjR0ZhY3RvciwgZHN0R0ZhY3RvciwgYmxlbmRPcCk7XG4gICAgbGV0IGIgPSBjYWxjdWxhdGVCbGVuZFZhbHVlKHNyY0NvbG9yLmIsIGRzdENvbG9yLmIsIHNyY0JGYWN0b3IsIGRzdEJGYWN0b3IsIGJsZW5kT3ApO1xuICAgIGxldCBhID0gY2FsY3VsYXRlQmxlbmRWYWx1ZShzcmNDb2xvci5hLCBkc3RDb2xvci5hLCBzcmNBRmFjdG9yLCBkc3RBRmFjdG9yLCBibGVuZE9wKTtcblxuICAgIC8vIOehruS/neminOiJsuWAvOWcqDAtMeiMg+WbtOWGheW5tui/lOWbnuaWsOminOiJslxuICAgIHJldHVybiBuZXcgQ29sb3IociwgZywgYiwgYSk7XG59XG5cbi8qKlxuICog5qC55o2u5re35ZCI5Zug5a2Q6I635Y+W5a+55bqU55qE6K6h566X5YC8XG4gKi9cbmZ1bmN0aW9uIGdldEJsZW5kRmFjdG9yVmFsdWVzKHNyYzogQ29sb3IsIGRzdDogQ29sb3IsIGZhY3RvcjogQmxlbmRGYWN0b3IpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSB7XG4gICAgc3dpdGNoIChmYWN0b3IpIHtcbiAgICAgICAgY2FzZSBCbGVuZEZhY3Rvci5PbmU6XG4gICAgICAgICAgICByZXR1cm4gWzEsIDEsIDEsIDFdO1xuICAgICAgICBjYXNlIEJsZW5kRmFjdG9yLlplcm86XG4gICAgICAgICAgICByZXR1cm4gWzAsIDAsIDAsIDBdO1xuICAgICAgICBjYXNlIEJsZW5kRmFjdG9yLlNyY0NvbG9yOlxuICAgICAgICAgICAgcmV0dXJuIFtzcmMuciwgc3JjLmcsIHNyYy5iLCBzcmMuYV07XG4gICAgICAgIGNhc2UgQmxlbmRGYWN0b3IuU3JjQWxwaGE6XG4gICAgICAgICAgICByZXR1cm4gW3NyYy5hLCBzcmMuYSwgc3JjLmEsIHNyYy5hXTtcbiAgICAgICAgY2FzZSBCbGVuZEZhY3Rvci5Ec3RDb2xvcjpcbiAgICAgICAgICAgIHJldHVybiBbZHN0LnIsIGRzdC5nLCBkc3QuYiwgZHN0LmFdO1xuICAgICAgICBjYXNlIEJsZW5kRmFjdG9yLkRzdEFscGhhOlxuICAgICAgICAgICAgcmV0dXJuIFtkc3QuYSwgZHN0LmEsIGRzdC5hLCBkc3QuYV07XG4gICAgICAgIGNhc2UgQmxlbmRGYWN0b3IuT25lTWludXNTcmNDb2xvcjpcbiAgICAgICAgICAgIHJldHVybiBbMSAtIHNyYy5yLCAxIC0gc3JjLmcsIDEgLSBzcmMuYiwgMSAtIHNyYy5hXTtcbiAgICAgICAgY2FzZSBCbGVuZEZhY3Rvci5PbmVNaW51c1NyY0FscGhhOlxuICAgICAgICAgICAgcmV0dXJuIFsxIC0gc3JjLmEsIDEgLSBzcmMuYSwgMSAtIHNyYy5hLCAxIC0gc3JjLmFdO1xuICAgICAgICBjYXNlIEJsZW5kRmFjdG9yLk9uZU1pbnVzRHN0Q29sb3I6XG4gICAgICAgICAgICByZXR1cm4gWzEgLSBkc3QuciwgMSAtIGRzdC5nLCAxIC0gZHN0LmIsIDEgLSBkc3QuYV07XG4gICAgICAgIGNhc2UgQmxlbmRGYWN0b3IuT25lTWludXNEc3RBbHBoYTpcbiAgICAgICAgICAgIHJldHVybiBbMSAtIGRzdC5hLCAxIC0gZHN0LmEsIDEgLSBkc3QuYSwgMSAtIGRzdC5hXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBbMCwgMCwgMCwgMF07XG4gICAgfVxufVxuXG4vKipcbiAqIOagueaNrua3t+WQiOaTjeS9nOiuoeeul+WNleS4qumAmumBk+eahOa3t+WQiOe7k+aenFxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVCbGVuZFZhbHVlKHNyYzogbnVtYmVyLCBkc3Q6IG51bWJlciwgc3JjRmFjdG9yOiBudW1iZXIsIGRzdEZhY3RvcjogbnVtYmVyLCBvcDogQmxlbmRPcCk6IG51bWJlciB7XG4gICAgY29uc3Qgc3JjVmFsID0gc3JjICogc3JjRmFjdG9yO1xuICAgIGNvbnN0IGRzdFZhbCA9IGRzdCAqIGRzdEZhY3RvcjtcblxuICAgIHN3aXRjaCAob3ApIHtcbiAgICAgICAgY2FzZSBCbGVuZE9wLkFkZDpcbiAgICAgICAgICAgIHJldHVybiBzcmNWYWwgKyBkc3RWYWw7XG4gICAgICAgIGNhc2UgQmxlbmRPcC5TdWI6XG4gICAgICAgICAgICByZXR1cm4gc3JjVmFsIC0gZHN0VmFsO1xuICAgICAgICBjYXNlIEJsZW5kT3AuUmV2U3ViOlxuICAgICAgICAgICAgcmV0dXJuIGRzdFZhbCAtIHNyY1ZhbDtcbiAgICAgICAgY2FzZSBCbGVuZE9wLk1pbjpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1pbihzcmNWYWwsIGRzdFZhbCk7XG4gICAgICAgIGNhc2UgQmxlbmRPcC5NYXg6XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoc3JjVmFsLCBkc3RWYWwpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHNyY1ZhbDtcbiAgICB9XG59IiwiaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IFZlcnRleEF0dHJpYnV0ZXMgfSBmcm9tIFwiLi9SZW5kZXJlckRlZmluZVwiO1xuXG4vLyDniYfmrrXmlbDmja7mjqXlj6PvvIzljIXlkKvlg4/ntKDkvY3nva7lkozmj5LlgLzlkI7nmoTlsZ7mgKdcbmV4cG9ydCBpbnRlcmZhY2UgRnJhZ21lbnQge1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG4gICAgejogbnVtYmVyO1xuICAgIGF0dHJpYnV0ZXM6IFZlcnRleEF0dHJpYnV0ZXM7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUcmlhbmdsZVJhc3Rlcml6ZXIge1xuICAgIHB1YmxpYyBzdGF0aWMgcmFzdGVyaXplVHJpYW5nbGUodjA6IFZlY3RvcjMsIHYxOiBWZWN0b3IzLCB2MjogVmVjdG9yMywgYXR0cnMwOiBWZXJ0ZXhBdHRyaWJ1dGVzLCBhdHRyczE6IFZlcnRleEF0dHJpYnV0ZXMsIGF0dHJzMjogVmVydGV4QXR0cmlidXRlcyk6IEZyYWdtZW50W10ge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxufSIsImltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9NYXRoL0NvbG9yXCI7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSBcIi4vVGV4dHVyZVwiO1xuaW1wb3J0IHsgVU9iamVjdCB9IGZyb20gXCIuLi9Db3JlL1VPYmplY3RcIjtcblxuZXhwb3J0IGNsYXNzIEN1YmVNYXAgZXh0ZW5kcyBVT2JqZWN0IHtcbiAgICBwcml2YXRlIFBPU0lUSVZFX1g6IFRleHR1cmU7XG4gICAgcHJpdmF0ZSBORUdBVElWRV9YOiBUZXh0dXJlO1xuICAgIHByaXZhdGUgUE9TSVRJVkVfWTogVGV4dHVyZTtcbiAgICBwcml2YXRlIE5FR0FUSVZFX1k6IFRleHR1cmU7XG4gICAgcHJpdmF0ZSBQT1NJVElWRV9aOiBUZXh0dXJlO1xuICAgIHByaXZhdGUgTkVHQVRJVkVfWjogVGV4dHVyZTtcblxuICAgIC8qKlxuICAgICAqIOaehOmAoOeri+aWueS9k+e6ueeQhlxuICAgICAqIEBwYXJhbSBwb3NpdGl2ZVgg5q2jWOaWueWQkee6ueeQhlxuICAgICAqIEBwYXJhbSBuZWdhdGl2ZVgg6LSfWOaWueWQkee6ueeQhlxuICAgICAqIEBwYXJhbSBwb3NpdGl2ZVkg5q2jWeaWueWQkee6ueeQhlxuICAgICAqIEBwYXJhbSBuZWdhdGl2ZVkg6LSfWeaWueWQkee6ueeQhlxuICAgICAqIEBwYXJhbSBwb3NpdGl2ZVog5q2jWuaWueWQkee6ueeQhlxuICAgICAqIEBwYXJhbSBuZWdhdGl2ZVog6LSfWuaWueWQkee6ueeQhlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwb3NpdGl2ZVg6IFRleHR1cmUsXG4gICAgICAgIG5lZ2F0aXZlWDogVGV4dHVyZSxcbiAgICAgICAgcG9zaXRpdmVZOiBUZXh0dXJlLFxuICAgICAgICBuZWdhdGl2ZVk6IFRleHR1cmUsXG4gICAgICAgIHBvc2l0aXZlWjogVGV4dHVyZSxcbiAgICAgICAgbmVnYXRpdmVaOiBUZXh0dXJlXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuUE9TSVRJVkVfWCA9IHBvc2l0aXZlWDtcbiAgICAgICAgdGhpcy5ORUdBVElWRV9YID0gbmVnYXRpdmVYO1xuICAgICAgICB0aGlzLlBPU0lUSVZFX1kgPSBwb3NpdGl2ZVk7XG4gICAgICAgIHRoaXMuTkVHQVRJVkVfWSA9IG5lZ2F0aXZlWTtcbiAgICAgICAgdGhpcy5QT1NJVElWRV9aID0gcG9zaXRpdmVaO1xuICAgICAgICB0aGlzLk5FR0FUSVZFX1ogPSBuZWdhdGl2ZVo7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5qC55o2u5pa55ZCR5ZCR6YeP6YeH5qC356uL5pa55L2T6LS05Zu+XG4gICAgICogQHBhcmFtIGRpcmVjdGlvbiDlvZLkuIDljJbnmoTmlrnlkJHlkJHph49cbiAgICAgKiBAcmV0dXJucyDph4fmoLflvpfliLDnmoTpopzoibJcbiAgICAgKi9cbiAgICBwdWJsaWMgU2FtcGxlQ3ViZShkaXJlY3Rpb246IFZlY3RvcjMpOiBDb2xvciB7XG4gICAgICAgIC8vIOehruS/neaWueWQkeWQkemHj+W3suW9kuS4gOWMllxuICAgICAgICBjb25zdCBkaXIgPSBkaXJlY3Rpb24ubm9ybWFsaXplKCk7XG4gICAgICAgIGNvbnN0IHggPSBkaXIueDtcbiAgICAgICAgY29uc3QgeSA9IGRpci55O1xuICAgICAgICBjb25zdCB6ID0gZGlyLno7XG5cbiAgICAgICAgLy8g5om+5Yiw57ud5a+55YC85pyA5aSn55qE5YiG6YeP77yM56Gu5a6a6KaB6YeH5qC355qE6Z2iXG4gICAgICAgIGNvbnN0IGFic1ggPSBNYXRoLmFicyh4KTtcbiAgICAgICAgY29uc3QgYWJzWSA9IE1hdGguYWJzKHkpO1xuICAgICAgICBjb25zdCBhYnNaID0gTWF0aC5hYnMoeik7XG5cbiAgICAgICAgLy8g6K6h566X5ZCE6Z2i55qEVVblnZDmoIflubbph4fmoLdcbiAgICAgICAgaWYgKGFic1ggPj0gYWJzWSAmJiBhYnNYID49IGFic1opIHtcbiAgICAgICAgICAgIC8vIFjmlrnlkJHkuLrkuLvmlrnlkJHvvIjlt6blj7PpnaLvvIlcbiAgICAgICAgICAgIGNvbnN0IHUgPSAwLjUgLSB6IC8gKDIgKiBhYnNYKTtcbiAgICAgICAgICAgIGNvbnN0IHYgPSAwLjUgLSB5IC8gKDIgKiBhYnNYKTtcbiAgICAgICAgICAgIHJldHVybiB4ID4gMCA/IHRoaXMuUE9TSVRJVkVfWC5TYW1wbGUodSwgdikgOiB0aGlzLk5FR0FUSVZFX1guU2FtcGxlKDEgLSB1LCB2KTtcbiAgICAgICAgfSBlbHNlIGlmIChhYnNZID49IGFic1ggJiYgYWJzWSA+PSBhYnNaKSB7XG4gICAgICAgICAgICAvLyBZ5pa55ZCR5Li65Li75pa55ZCR77yI5LiK5LiL5bqV6Z2i77yJXG4gICAgICAgICAgICBjb25zdCB1ID0gMC41ICsgeCAvICgyICogYWJzWSk7XG4gICAgICAgICAgICBjb25zdCB2ID0gMC41ICsgeiAvICgyICogYWJzWSk7XG4gICAgICAgICAgICByZXR1cm4geSA+IDAgPyB0aGlzLlBPU0lUSVZFX1kuU2FtcGxlKHUsIHYpIDogdGhpcy5ORUdBVElWRV9ZLlNhbXBsZSgxIC0gdSwgdik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBa5pa55ZCR5Li65Li75pa55ZCR77yI5YmN5ZCO5Lik6Z2i77yJXG4gICAgICAgICAgICBjb25zdCB1ID0gMC41ICsgeCAvICgyICogYWJzWik7XG4gICAgICAgICAgICBjb25zdCB2ID0gMC41IC0geSAvICgyICogYWJzWik7XG4gICAgICAgICAgICByZXR1cm4geiA+IDAgPyB0aGlzLlBPU0lUSVZFX1ouU2FtcGxlKHUsIHYpIDogdGhpcy5ORUdBVElWRV9aLlNhbXBsZSgxIC11LCB2KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOmUgOavgeeri+aWueS9k+i0tOWbvui1hOa6kFxuICAgICAqL1xuICAgIHB1YmxpYyBvbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIFVPYmplY3QuRGVzdHJveSh0aGlzLlBPU0lUSVZFX1gpO1xuICAgICAgICBVT2JqZWN0LkRlc3Ryb3kodGhpcy5ORUdBVElWRV9YKTtcbiAgICAgICAgVU9iamVjdC5EZXN0cm95KHRoaXMuUE9TSVRJVkVfWSk7XG4gICAgICAgIFVPYmplY3QuRGVzdHJveSh0aGlzLk5FR0FUSVZFX1kpO1xuICAgICAgICBVT2JqZWN0LkRlc3Ryb3kodGhpcy5QT1NJVElWRV9aKTtcbiAgICAgICAgVU9iamVjdC5EZXN0cm95KHRoaXMuTkVHQVRJVkVfWik7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVU9iamVjdCB9IGZyb20gXCIuLi9Db3JlL1VPYmplY3RcIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL01hdGgvQ29sb3JcIjtcbmltcG9ydCB7IE1hdHJpeDR4NCB9IGZyb20gXCIuLi9NYXRoL01hdHJpeDR4NFwiO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjRcIjtcbmltcG9ydCB7IFZlcnRleEF0dHJpYnV0ZXMgfSBmcm9tIFwiLi4vUmVuZGVyZXIvUmVuZGVyZXJEZWZpbmVcIjtcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gXCIuLi9TaGFkZXIvU2hhZGVyXCI7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSBcIi4vVGV4dHVyZVwiO1xuXG5leHBvcnQgY2xhc3MgTWF0ZXJpYWwgZXh0ZW5kcyBVT2JqZWN0IHtcbiAgICBwdWJsaWMgc2hhZGVyOiBTaGFkZXIgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIGN1cnJlbnRQYXNzOiBudW1iZXIgPSAtMTtcblxuICAgIHB1YmxpYyBvbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICog5r+A5rS75oyH5a6a57Si5byV55qEUGFzc++8jOm7mOiupC0x77yM6KGo56S65omA5pyJ55qEUEFTU+mDveS8muaJp+ihjO+8jOa/gOa0u+WQjuWPquaJp+ihjOa/gOa0u+eahOmCo+S4qlBBU1NcbiAgICAqIEBwYXJhbSBwYXNzSW5kZXggUGFzc+eahOe0ouW8le+8jOS7jjDlvIDlp4tcbiAgICAqIEByZXR1cm5zIOaYr+WQpua/gOa0u+aIkOWKn1xuICAgICovXG4gICAgcHVibGljIHNldFBhc3MocGFzc0luZGV4OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCF0aGlzLnNoYWRlcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi5pyq5oyH5a6a552A6Imy5Zmo77yM5peg5rOV5r+A5rS7UGFzc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOajgOafpVBhc3PntKLlvJXmmK/lkKbmnInmlYjvvIjlgYforr5TaGFkZXLmnIlwYXNzQ291bnTlsZ7mgKfvvIlcbiAgICAgICAgaWYgKHBhc3NJbmRleCA8IDAgfHwgcGFzc0luZGV4ID49ICh0aGlzLnNoYWRlciBhcyBhbnkpLnBhc3NDb3VudCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBQYXNz57Si5byVICR7cGFzc0luZGV4fSDml6DmlYhgKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOiwg+eUqFNoYWRlcueahOa/gOa0u1Bhc3Pmlrnms5XvvIjlgYforr5TaGFkZXLmnIlhY3RpdmF0ZVBhc3Pmlrnms5XvvIlcbiAgICAgICAgaWYgKHR5cGVvZiAodGhpcy5zaGFkZXIgYXMgYW55KS5hY3RpdmF0ZVBhc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICh0aGlzLnNoYWRlciBhcyBhbnkpLmFjdGl2YXRlUGFzcyhwYXNzSW5kZXgpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFzcyA9IHBhc3NJbmRleDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS53YXJuKFwi552A6Imy5Zmo5LiN5pSv5oyBUGFzc+a/gOa0u+aTjeS9nFwiKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOaJuemHj+iuvue9ruWkmuS4quWxnuaAp1xuICAgICAqIEBwYXJhbSBwcm9wZXJ0aWVzIOWMheWQq+WkmuS4quWxnuaAp+mUruWAvOWvueeahOWvueixoVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRQcm9wZXJ0aWVzKHByb3BlcnRpZXM6IFZlcnRleEF0dHJpYnV0ZXMpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnNoYWRlcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi5pyq5oyH5a6a552A6Imy5Zmo77yM5peg5rOV5om56YeP6K6+572u5bGe5oCnXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g6YGN5Y6G5omA5pyJ5bGe5oCn5bm26K6+572uXG4gICAgICAgIGZvciAoY29uc3QgW3Byb3BlcnR5TmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BlcnRpZXMpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog57uZ552A6Imy5Zmo5Lit55qE6aKc6Imy5bGe5oCn6K6+572u5YC8XG4gICAgICogQHBhcmFtIHByb3BlcnR5TmFtZSDlsZ7mgKflkI3np7BcbiAgICAgKiBAcGFyYW0gY29sb3Ig6aKc6Imy5YC8XG4gICAgICovXG4gICAgcHVibGljIHNldENvbG9yKHByb3BlcnR5TmFtZTogc3RyaW5nLCBjb2xvcjogQ29sb3IpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZShwcm9wZXJ0eU5hbWUsIGNvbG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnu5nnnYDoibLlmajkuK3nmoTmlbDlrZflsZ7mgKforr7nva7lgLxcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIOWxnuaAp+WQjeensFxuICAgICAqIEBwYXJhbSB2YWx1ZSDmlbDlrZflgLxcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0TnVtYmVyKHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUocHJvcGVydHlOYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog57uZ552A6Imy5Zmo5Lit55qE55+p6Zi15bGe5oCn6K6+572u5YC8XG4gICAgICogQHBhcmFtIHByb3BlcnR5TmFtZSDlsZ7mgKflkI3np7BcbiAgICAgKiBAcGFyYW0gbWF0cml4IOefqemYteWAvFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRNYXRyaXg0eDQocHJvcGVydHlOYW1lOiBzdHJpbmcsIG1hdHJpeDogTWF0cml4NHg0KTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUocHJvcGVydHlOYW1lLCBtYXRyaXgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOe7meedgOiJsuWZqOS4reeahOe6ueeQhuWxnuaAp+iuvue9ruWAvFxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eU5hbWUg5bGe5oCn5ZCN56ewXG4gICAgICogQHBhcmFtIHRleHR1cmUg57q555CG5a+56LGhXG4gICAgICovXG4gICAgcHVibGljIHNldFRleHR1cmUocHJvcGVydHlOYW1lOiBzdHJpbmcsIHRleHR1cmU6IFRleHR1cmUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZShwcm9wZXJ0eU5hbWUsIHRleHR1cmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOe7meedgOiJsuWZqOS4reeahFZlY3RvcjTlsZ7mgKforr7nva7lgLxcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIOWxnuaAp+WQjeensFxuICAgICAqIEBwYXJhbSB2ZWN0b3Ig5ZCR6YeP5YC8XG4gICAgICovXG4gICAgcHVibGljIHNldFZlY3RvcjQocHJvcGVydHlOYW1lOiBzdHJpbmcsIHZlY3RvcjogVmVjdG9yNCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNldFZhbHVlKHByb3BlcnR5TmFtZSwgdmVjdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDpgJrnlKjnmoTlsZ7mgKforr7nva7mlrnms5XvvIznlKjkuo7lrp7pmYXmiafooYzorr7nva7mk43kvZxcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIOWxnuaAp+WQjeensFxuICAgICAqIEBwYXJhbSB2YWx1ZSDopoHorr7nva7nmoTlgLxcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldFZhbHVlKHByb3BlcnR5TmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5zaGFkZXIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihg5pyq5oyH5a6a552A6Imy5Zmo77yM5peg5rOV6K6+572u5bGe5oCnICR7cHJvcGVydHlOYW1lfWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5qOA5p+l552A6Imy5Zmo5piv5ZCm5pyJ6K+l5bGe5oCnXG4gICAgICAgIGlmICghKHByb3BlcnR5TmFtZSBpbiB0aGlzLnNoYWRlcikpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihg552A6Imy5Zmo5Lit5LiN5a2Y5Zyo5bGe5oCnICR7cHJvcGVydHlOYW1lfWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5bCd6K+V55u05o6l6K6+572u552A6Imy5Zmo55qE5bGe5oCn5YC8XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAodGhpcy5zaGFkZXIgYXMgYW55KVtwcm9wZXJ0eU5hbWVdID0gdmFsdWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGDorr7nva7lsZ7mgKcgJHtwcm9wZXJ0eU5hbWV9IOWksei0pTpgLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDojrflj5bnnYDoibLlmajkuK3lsZ7mgKfnmoTlvZPliY3lgLxcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlOYW1lIOWxnuaAp+WQjeensFxuICAgICAqIEByZXR1cm5zIOWxnuaAp+WAvOaIlm51bGxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eU5hbWU6IHN0cmluZyk6IGFueSB7XG4gICAgICAgIGlmICghdGhpcy5zaGFkZXIgfHwgIShwcm9wZXJ0eU5hbWUgaW4gdGhpcy5zaGFkZXIpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAodGhpcy5zaGFkZXIgYXMgYW55KVtwcm9wZXJ0eU5hbWVdO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBVT2JqZWN0IH0gZnJvbSBcIi4uL0NvcmUvVU9iamVjdFwiO1xuaW1wb3J0IHsgQm91bmRzIH0gZnJvbSBcIi4uL01hdGgvQm91bmRzXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yMlwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3I0XCI7XG5cbmV4cG9ydCBjbGFzcyBNZXNoIGV4dGVuZHMgVU9iamVjdCB7XG4gICAgcHVibGljIGJvdW5kczogQm91bmRzW107ICAgICAgICAgICAgICAgICAgICAgICAvLyDljIXlm7Tnm5JcbiAgICBwdWJsaWMgbWF0ZXJpYWw6IHN0cmluZ1tdOyAgICAgICAgICAgICAgICAgICAgIC8vIOadkOi0qFxuICAgIHB1YmxpYyB0cmlhbmdsZXM6IG51bWJlcltdOyAgICAgICAgICAgICAgICAgICAgLy8g5LiJ6KeS5b2iXG4gICAgcHVibGljIGZhY2VOb3JtYWxzOiBWZWN0b3IzW107ICAgICAgICAgICAgICAgICAvLyDpnaLms5Xnur9cbiAgICBwdWJsaWMgZmFjZUNlbnRlcnM6IFZlY3RvcjNbXTsgICAgICAgICAgICAgICAgIC8vIOmdouS4reW/g1xuICAgIHB1YmxpYyB2ZXJ0aWNlczogVmVjdG9yM1tdOyAgICAgICAgICAgICAgICAgICAgLy8g6aG254K5XG4gICAgcHVibGljIHV2OiBWZWN0b3IyW107ICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVVlxuICAgIHB1YmxpYyBub3JtYWxzOiBWZWN0b3IzW107ICAgICAgICAgICAgICAgICAgICAgLy8g5rOV57q/XG4gICAgcHVibGljIHRhbmdlbnRzOiBWZWN0b3I0W107ICAgICAgICAgICAgICAgICAgICAvLyDliIfnur9cbiAgICBwdWJsaWMgc3ViTWVzaGVzOiBTdWJNZXNoW107ICAgICAgICAgICAgICAgICAgIC8vIOWtkOe9keagvFxuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmJvdW5kcyA9IFtdO1xuICAgICAgICB0aGlzLm1hdGVyaWFsID0gW107XG4gICAgICAgIHRoaXMudHJpYW5nbGVzID0gW107XG4gICAgICAgIHRoaXMuZmFjZU5vcm1hbHMgPSBbXTtcbiAgICAgICAgdGhpcy52ZXJ0aWNlcyA9IFtdO1xuICAgICAgICB0aGlzLnV2ID0gW107XG4gICAgICAgIHRoaXMubm9ybWFscyA9IFtdO1xuICAgICAgICB0aGlzLnRhbmdlbnRzID0gW107XG4gICAgICAgIHRoaXMuc3ViTWVzaGVzID0gW107XG4gICAgfVxuXG4gICAgLy8g5qOA5p+l572R5qC85piv5ZCm5pyJ5pWIXG4gICAgcHVibGljIGNoZWNrVmFsaWQoKTogQm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2VzLmxlbmd0aCAhPT0gMFxuICAgICAgICAgICAgJiYgdGhpcy52ZXJ0aWNlcy5sZW5ndGggPT09IHRoaXMudXYubGVuZ3RoXG4gICAgICAgICAgICAmJiB0aGlzLnZlcnRpY2VzLmxlbmd0aCA9PT0gdGhpcy5ub3JtYWxzLmxlbmd0aFxuICAgICAgICAgICAgJiYgdGhpcy52ZXJ0aWNlcy5sZW5ndGggPT09IHRoaXMudGFuZ2VudHMubGVuZ3RoXG5cbiAgICAgICAgICAgICYmIHRoaXMudHJpYW5nbGVzLmxlbmd0aCAhPT0gMFxuICAgICAgICAgICAgJiYgdGhpcy50cmlhbmdsZXMubGVuZ3RoICUgMyA9PT0gMFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAmJiB0aGlzLmZhY2VOb3JtYWxzLmxlbmd0aCA9PT0gdGhpcy5mYWNlQ2VudGVycy5sZW5ndGhcbiAgICAgICAgICAgICYmIHRoaXMuZmFjZU5vcm1hbHMubGVuZ3RoICogMyA9PT0gdGhpcy50cmlhbmdsZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWdh+WMgOe8qeaUvue9keagvO+8iOS7peWOn+eCueS4uuWfuuWHhu+8iVxuICAgICAqIEBwYXJhbSBzY2FsZSDnvKnmlL7lgI3mlbBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2NhbGUoc2NhbGU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICBpZiAoc2NhbGUgPT09IDEpIHJldHVybjsgLy8g57yp5pS+5YCN5pWw5Li6MeaXtuaXoOmcgOWkhOeQhlxuXG4gICAgICAgIC8vIOe8qeaUvuaJgOaciemhtueCue+8iOebtOaOpeS7peWOn+eCueS4uuWfuuWHhu+8iVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMudmVydGljZXNbaV0gPSB0aGlzLnZlcnRpY2VzW2ldLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoc2NhbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g57yp5pS+6Z2i5Lit5b+DXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mYWNlQ2VudGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5mYWNlQ2VudGVyc1tpXSA9IHRoaXMuZmFjZUNlbnRlcnNbaV0uY2xvbmUoKS5tdWx0aXBseVNjYWxhcihzY2FsZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyDlnYfljIDnvKnmlL7lj6rpnIDlvZLkuIDljJbms5Xnur/vvIjmlrnlkJHkuI3lj5jkvYbplb/luqbkvJrlj5fnvKnmlL7lvbHlk43vvIlcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5vcm1hbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMubm9ybWFsc1tpXSA9IHRoaXMubm9ybWFsc1tpXS5ub3JtYWxpemUoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmFjZU5vcm1hbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuZmFjZU5vcm1hbHNbaV0gPSB0aGlzLmZhY2VOb3JtYWxzW2ldLm5vcm1hbGl6ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g6YeN5paw6K6h566X5YyF5Zu055uSXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlQm91bmRzKCk7XG4gICAgfVxuXG4gICAgLy8g6YeN5paw6K6h566X5YyF5Zu055uS5ZKM5YiH57q/562J5pWw5o2uXG4gICAgcHVibGljIGNhbGN1bGF0ZU1lc2hEYXRhKCkge1xuICAgICAgICAvLyDorqHnrpfliIfnur/lkJHph49cbiAgICAgICAgdGhpcy5jYWxjdWxhdGVUYW5nZW50cygpO1xuICAgICAgICAvLyDorqHnrpfmlbTkvZPljIXlm7Tnm5JcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVCb3VuZHMoKTtcbiAgICAgICAgLy8g6K6h566X5LiJ6KeS6Z2i55qE5rOV5ZCR6YePXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlRmFjZU5vcm1hbHMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICAvLyDmuIXnkIbmiYDmnInmlbDnu4TlvJXnlKhcbiAgICAgICAgdGhpcy52ZXJ0aWNlcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnV2Lmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMubm9ybWFscy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnRhbmdlbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMudHJpYW5nbGVzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuZmFjZU5vcm1hbHMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5mYWNlQ2VudGVycy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLnN1Yk1lc2hlcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmJvdW5kcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLm1hdGVyaWFsLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6YeN5paw6K6h566X5omA5pyJ5YyF5Zu055uSXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVCb3VuZHMoKTogdm9pZCB7XG4gICAgICAgIC8vIOabtOaWsOWtkOe9keagvOS/oeaBr1xuICAgICAgICB0aGlzLnN1Yk1lc2hlcy5mb3JFYWNoKHN1Yk1lc2ggPT4ge1xuICAgICAgICAgICAgLy8g6K6h566X5a2Q572R5qC85YyF5Zu055uSXG4gICAgICAgICAgICBjb25zdCBzdWJWZXJ0aWNlcyA9IHRoaXMudmVydGljZXMuc2xpY2UoXG4gICAgICAgICAgICAgICAgc3ViTWVzaC5maXJzdFZlcnRleCxcbiAgICAgICAgICAgICAgICBzdWJNZXNoLmZpcnN0VmVydGV4ICsgc3ViTWVzaC52ZXJ0ZXhDb3VudFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHN1Yk1lc2guYm91bmRzID0gQm91bmRzLmZyb21Qb2ludHMoc3ViVmVydGljZXMpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyDmm7TmlrDmlbTkvZPljIXlm7Tnm5JcbiAgICAgICAgdGhpcy5ib3VuZHMgPSB0aGlzLnN1Yk1lc2hlcy5tYXAoc20gPT4gc20uYm91bmRzKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZUZhY2VOb3JtYWxzKCkge1xuICAgICAgICBpZiAodGhpcy52ZXJ0aWNlcy5sZW5ndGggPT09IDAgfHwgdGhpcy50cmlhbmdsZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5mYWNlTm9ybWFscyA9IFtdO1xuICAgICAgICB0aGlzLmZhY2VDZW50ZXJzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRyaWFuZ2xlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgY29uc3QgaTAgPSB0aGlzLnRyaWFuZ2xlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGkxID0gdGhpcy50cmlhbmdsZXNbaSArIDFdO1xuICAgICAgICAgICAgY29uc3QgaTIgPSB0aGlzLnRyaWFuZ2xlc1tpICsgMl07XG5cbiAgICAgICAgICAgIGNvbnN0IHYwID0gdGhpcy52ZXJ0aWNlc1tpMF07XG4gICAgICAgICAgICBjb25zdCB2MSA9IHRoaXMudmVydGljZXNbaTFdO1xuICAgICAgICAgICAgY29uc3QgdjIgPSB0aGlzLnZlcnRpY2VzW2kyXTtcblxuICAgICAgICAgICAgY29uc3QgZTEgPSBWZWN0b3IzLnN1YnRyYWN0KHYxLCB2MCk7XG4gICAgICAgICAgICBjb25zdCBlMiA9IFZlY3RvcjMuc3VidHJhY3QodjIsIHYwKTtcbiAgICAgICAgICAgIGNvbnN0IGZhY2VOb3JtYWwgPSBWZWN0b3IzLmNyb3NzKGUxLCBlMikubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB0aGlzLmZhY2VOb3JtYWxzLnB1c2goZmFjZU5vcm1hbCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IFZlY3RvcjMuYWRkKHYwLCB2MSkuYWRkKHYyKS5kaXZpZGUoMyk7XG4gICAgICAgICAgICB0aGlzLmZhY2VDZW50ZXJzLnB1c2goY2VudGVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiuoeeul+e9keagvOeahOWIh+e6v+WQkemHj1xuICAgICAqL1xuICAgIHByaXZhdGUgY2FsY3VsYXRlVGFuZ2VudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnZlcnRpY2VzLmxlbmd0aCA9PT0gMCB8fCB0aGlzLnRyaWFuZ2xlcy5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgICAgICBjb25zdCB0YW4xID0gbmV3IEFycmF5KHRoaXMudmVydGljZXMubGVuZ3RoKS5maWxsKDApLm1hcCgoKSA9PiBuZXcgVmVjdG9yMygwLCAwLCAwKSk7XG4gICAgICAgIGNvbnN0IHRhbjIgPSBuZXcgQXJyYXkodGhpcy52ZXJ0aWNlcy5sZW5ndGgpLmZpbGwoMCkubWFwKCgpID0+IG5ldyBWZWN0b3IzKDAsIDAsIDApKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudHJpYW5nbGVzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBjb25zdCBpMCA9IHRoaXMudHJpYW5nbGVzW2ldO1xuICAgICAgICAgICAgY29uc3QgaTEgPSB0aGlzLnRyaWFuZ2xlc1tpICsgMV07XG4gICAgICAgICAgICBjb25zdCBpMiA9IHRoaXMudHJpYW5nbGVzW2kgKyAyXTtcblxuICAgICAgICAgICAgY29uc3QgdjAgPSB0aGlzLnZlcnRpY2VzW2kwXTtcbiAgICAgICAgICAgIGNvbnN0IHYxID0gdGhpcy52ZXJ0aWNlc1tpMV07XG4gICAgICAgICAgICBjb25zdCB2MiA9IHRoaXMudmVydGljZXNbaTJdO1xuXG4gICAgICAgICAgICBjb25zdCB3MCA9IHRoaXMudXZbaTBdO1xuICAgICAgICAgICAgY29uc3QgdzEgPSB0aGlzLnV2W2kxXTtcbiAgICAgICAgICAgIGNvbnN0IHcyID0gdGhpcy51dltpMl07XG5cbiAgICAgICAgICAgIGNvbnN0IHgxID0gdjEueCAtIHYwLng7XG4gICAgICAgICAgICBjb25zdCB5MSA9IHYxLnkgLSB2MC55O1xuICAgICAgICAgICAgY29uc3QgejEgPSB2MS56IC0gdjAuejtcblxuICAgICAgICAgICAgY29uc3QgeDIgPSB2Mi54IC0gdjAueDtcbiAgICAgICAgICAgIGNvbnN0IHkyID0gdjIueSAtIHYwLnk7XG4gICAgICAgICAgICBjb25zdCB6MiA9IHYyLnogLSB2MC56O1xuXG4gICAgICAgICAgICBjb25zdCBzMSA9IHcxLnggLSB3MC54O1xuICAgICAgICAgICAgY29uc3QgdDEgPSB3MS55IC0gdzAueTtcbiAgICAgICAgICAgIGNvbnN0IHMyID0gdzIueCAtIHcwLng7XG4gICAgICAgICAgICBjb25zdCB0MiA9IHcyLnkgLSB3MC55O1xuXG4gICAgICAgICAgICBjb25zdCByID0gMS4wIC8gKHMxICogdDIgLSBzMiAqIHQxKTtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gKHQyICogeDEgLSB0MSAqIHgyKSAqIHI7XG4gICAgICAgICAgICBjb25zdCB0eSA9ICh0MiAqIHkxIC0gdDEgKiB5MikgKiByO1xuICAgICAgICAgICAgY29uc3QgdHogPSAodDIgKiB6MSAtIHQxICogejIpICogcjtcblxuICAgICAgICAgICAgdGFuMVtpMF0ueCArPSB0eDtcbiAgICAgICAgICAgIHRhbjFbaTBdLnkgKz0gdHk7XG4gICAgICAgICAgICB0YW4xW2kwXS56ICs9IHR6O1xuXG4gICAgICAgICAgICB0YW4xW2kxXS54ICs9IHR4O1xuICAgICAgICAgICAgdGFuMVtpMV0ueSArPSB0eTtcbiAgICAgICAgICAgIHRhbjFbaTFdLnogKz0gdHo7XG5cbiAgICAgICAgICAgIHRhbjFbaTJdLnggKz0gdHg7XG4gICAgICAgICAgICB0YW4xW2kyXS55ICs9IHR5O1xuICAgICAgICAgICAgdGFuMVtpMl0ueiArPSB0ejtcblxuICAgICAgICAgICAgY29uc3QgYnggPSAoczEgKiB4MiAtIHMyICogeDEpICogcjtcbiAgICAgICAgICAgIGNvbnN0IGJ5ID0gKHMxICogeTIgLSBzMiAqIHkxKSAqIHI7XG4gICAgICAgICAgICBjb25zdCBieiA9IChzMSAqIHoyIC0gczIgKiB6MSkgKiByO1xuXG4gICAgICAgICAgICB0YW4yW2kwXS54ICs9IGJ4O1xuICAgICAgICAgICAgdGFuMltpMF0ueSArPSBieTtcbiAgICAgICAgICAgIHRhbjJbaTBdLnogKz0gYno7XG5cbiAgICAgICAgICAgIHRhbjJbaTFdLnggKz0gYng7XG4gICAgICAgICAgICB0YW4yW2kxXS55ICs9IGJ5O1xuICAgICAgICAgICAgdGFuMltpMV0ueiArPSBiejtcblxuICAgICAgICAgICAgdGFuMltpMl0ueCArPSBieDtcbiAgICAgICAgICAgIHRhbjJbaTJdLnkgKz0gYnk7XG4gICAgICAgICAgICB0YW4yW2kyXS56ICs9IGJ6O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gdGhpcy5ub3JtYWxzW2ldO1xuICAgICAgICAgICAgY29uc3QgdCA9IHRhbjFbaV07XG5cbiAgICAgICAgICAgIGNvbnN0IHRhbmdlbnQgPSBWZWN0b3IzLnN1YnRyYWN0KHQsIFZlY3RvcjMubXVsdGlwbHlTY2FsYXIobiwgVmVjdG9yMy5kb3QobiwgdCkpKS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRlZG5lc3MgPSBWZWN0b3IzLmRvdChWZWN0b3IzLmNyb3NzKG4sIHQpLCB0YW4yW2ldKSA8IDAuMCA/IC0xIDogMTtcblxuICAgICAgICAgICAgdGhpcy50YW5nZW50c1tpXSA9IG5ldyBWZWN0b3I0KHRhbmdlbnQueCwgdGFuZ2VudC55LCB0YW5nZW50LnosIGhhbmRlZG5lc3MpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3ViTWVzaCB7XG4gICAgcHVibGljIHZlcnRleENvdW50OiBudW1iZXI7XG4gICAgcHVibGljIGZpcnN0VmVydGV4OiBudW1iZXI7XG4gICAgcHVibGljIGluZGV4Q291bnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgaW5kZXhTdGFydDogbnVtYmVyO1xuICAgIHB1YmxpYyBib3VuZHM6IEJvdW5kcztcbiAgICBwdWJsaWMgbWF0ZXJpYWw6IHN0cmluZztcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy52ZXJ0ZXhDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuZmlyc3RWZXJ0ZXggPSAwO1xuICAgICAgICB0aGlzLmluZGV4Q291bnQgPSAwO1xuICAgICAgICB0aGlzLmluZGV4U3RhcnQgPSAwO1xuICAgICAgICB0aGlzLmJvdW5kcyA9IG5ldyBCb3VuZHMoKTtcbiAgICAgICAgdGhpcy5tYXRlcmlhbCA9IFwiXCI7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTWVzaCB9IGZyb20gXCIuL01lc2hcIjtcbmltcG9ydCB7IE9CSlBhcnNlciB9IGZyb20gXCIuLi9VdGlscy9PYmpQYXJzZXJcIjtcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwiLi9UZXh0dXJlXCI7XG5cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZXMge1xuICAgIHByaXZhdGUgc3RhdGljIGZpbGVDYWNoZTogTWFwPHN0cmluZywgYW55PiA9IG5ldyBNYXAoKTtcbiAgICBwcml2YXRlIHN0YXRpYyBsb2FkaW5nUHJvbWlzZXM6IE1hcDxzdHJpbmcsIFByb21pc2U8YW55Pj4gPSBuZXcgTWFwKCk7XG5cbiAgICAvKipcbiAgICAgKiDlvILmraXliqDovb3otYTmupDvvIzmqKHku79Vbml0eeeahFJlc291cmNlcy5Mb2FkQXN5bmNcbiAgICAgKiBAcGFyYW0gZmlsZU5hbWUg6LWE5rqQ6Lev5b6EXG4gICAgICogQHJldHVybnMg5YyF5ZCr6LWE5rqQ55qEUHJvbWlzZVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgbG9hZEFzeW5jPFQ+KGZpbGVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPFQgfCBudWxsPiB7XG4gICAgICAgIC8vIOajgOafpee8k+WtmFxuICAgICAgICBpZiAoUmVzb3VyY2VzLmZpbGVDYWNoZS5oYXMoZmlsZU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFJlc291cmNlcy5maWxlQ2FjaGUuZ2V0KGZpbGVOYW1lKSBhcyBUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOajgOafpeaYr+WQpuato+WcqOWKoOi9ve+8jOmBv+WFjemHjeWkjeivt+axglxuICAgICAgICBpZiAoUmVzb3VyY2VzLmxvYWRpbmdQcm9taXNlcy5oYXMoZmlsZU5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVzb3VyY2VzLmxvYWRpbmdQcm9taXNlcy5nZXQoZmlsZU5hbWUpIGFzIFByb21pc2U8VD47XG4gICAgICAgIH1cblxuICAgICAgICAvLyDnoa7lrprotYTmupDnsbvlnovlubbliqDovb1cbiAgICAgICAgbGV0IHByb21pc2U6IFByb21pc2U8VCB8IG51bGw+O1xuXG4gICAgICAgIGlmIChmaWxlTmFtZS5lbmRzV2l0aCgnLnBuZycpIHx8IGZpbGVOYW1lLmVuZHNXaXRoKCcuanBnJykgfHwgZmlsZU5hbWUuZW5kc1dpdGgoJy5qcGVnJykpIHtcbiAgICAgICAgICAgIC8vIOWKoOi9vee6ueeQhlxuICAgICAgICAgICAgcHJvbWlzZSA9IFJlc291cmNlcy5sb2FkVGV4dHVyZUFzeW5jKGZpbGVOYW1lKSBhcyBQcm9taXNlPFQgfCBudWxsPjtcbiAgICAgICAgfSBlbHNlIGlmIChmaWxlTmFtZS5lbmRzV2l0aCgnLm9iaicpKSB7XG4gICAgICAgICAgICAvLyDliqDovb3mqKHlnotcbiAgICAgICAgICAgIHByb21pc2UgPSBSZXNvdXJjZXMubG9hZE1vZGVsQXN5bmMoZmlsZU5hbWUpIGFzIFByb21pc2U8VCB8IG51bGw+O1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGVOYW1lLmVuZHNXaXRoKCcudHh0JykgfHwgZmlsZU5hbWUuZW5kc1dpdGgoJy5qc29uJykgfHwgZmlsZU5hbWUuZW5kc1dpdGgoJy54bWwnKSkge1xuICAgICAgICAgICAgLy8g5Yqg6L295paH5pysXG4gICAgICAgICAgICBwcm9taXNlID0gUmVzb3VyY2VzLmxvYWRUZXh0QXN5bmMoZmlsZU5hbWUpIGFzIFByb21pc2U8VCB8IG51bGw+O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihg5LiN5pSv5oyB55qE6LWE5rqQ57G75Z6LOiAke2ZpbGVOYW1lfWApO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWtmOWCqOWKoOi9veS4reeahFByb21pc2VcbiAgICAgICAgUmVzb3VyY2VzLmxvYWRpbmdQcm9taXNlcy5zZXQoZmlsZU5hbWUsIHByb21pc2UpO1xuXG4gICAgICAgIC8vIOetieW+heWKoOi9veWujOaIkOW5tuabtOaWsOe8k+WtmFxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9taXNlO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBSZXNvdXJjZXMuZmlsZUNhY2hlLnNldChmaWxlTmFtZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOenu+mZpOWKoOi9veS4reagh+iusFxuICAgICAgICBSZXNvdXJjZXMubG9hZGluZ1Byb21pc2VzLmRlbGV0ZShmaWxlTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyAvKipcbiAgICAvLyAgKiDlkIzmraXliqDovb3otYTmupDvvIjku4XmlK/mjIHlt7LnvJPlrZjnmoTotYTmupDvvIlcbiAgICAvLyAgKiBAcGFyYW0gZmlsZU5hbWUg6LWE5rqQ6Lev5b6EXG4gICAgLy8gICogQHJldHVybnMg6LWE5rqQ5a6e5L6L5oiWbnVsbFxuICAgIC8vICAqL1xuICAgIC8vIHB1YmxpYyBzdGF0aWMgbG9hZDxUPihmaWxlTmFtZTogc3RyaW5nKTogVCB8IG51bGwge1xuICAgIC8vICAgICBpZiAoUmVzb3VyY2VzLmZpbGVDYWNoZS5oYXMoZmlsZU5hbWUpKSB7XG4gICAgLy8gICAgICAgICByZXR1cm4gUmVzb3VyY2VzLmZpbGVDYWNoZS5nZXQoZmlsZU5hbWUpIGFzIFQ7XG4gICAgLy8gICAgIH1cblxuICAgIC8vICAgICBjb25zb2xlLndhcm4oYOi1hOa6kCAke2ZpbGVOYW1lfSDmnKrnvJPlrZjvvIzml6Dms5XlkIzmraXliqDovb3jgILor7flhYjkvb/nlKhsb2FkQXN5bmPliqDovb3jgIJgKTtcbiAgICAvLyAgICAgcmV0dXJuIG51bGw7XG4gICAgLy8gfVxuXG4gICAgLyoqXG4gICAgICog5Y246L295pyq5L2/55So55qE6LWE5rqQ77yM5qih5Lu/VW5pdHnnmoRVbmxvYWRVbnVzZWRBc3NldHNcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHVubG9hZFVudXNlZEFzc2V0cygpOiB2b2lkIHtcbiAgICAgICAgLy8g5a6e6ZmF6aG555uu5Lit5bqU6K+l5pyJ5byV55So6K6h5pWw5py65Yi2XG4gICAgICAgIC8vIOi/memHjOeugOWMluWkhOeQhu+8jOS7hea4hemZpOaJgOaciee8k+WtmFxuICAgICAgICBSZXNvdXJjZXMuZmlsZUNhY2hlLmNsZWFyKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwi5bey5Y246L295omA5pyJ5pyq5L2/55So55qE6LWE5rqQXCIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWNuOi9veeJueWumui1hOa6kFxuICAgICAqIEBwYXJhbSBmaWxlTmFtZSDotYTmupDot6/lvoRcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIHVubG9hZEFzc2V0KGZpbGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKFJlc291cmNlcy5maWxlQ2FjaGUuaGFzKGZpbGVOYW1lKSkge1xuICAgICAgICAgICAgUmVzb3VyY2VzLmZpbGVDYWNoZS5kZWxldGUoZmlsZU5hbWUpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYOW3suWNuOi9vei1hOa6kDogJHtmaWxlTmFtZX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChSZXNvdXJjZXMubG9hZGluZ1Byb21pc2VzLmhhcyhmaWxlTmFtZSkpIHtcbiAgICAgICAgICAgIFJlc291cmNlcy5sb2FkaW5nUHJvbWlzZXMuZGVsZXRlKGZpbGVOYW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOWKoOi9vee6ueeQhui1hOa6kFxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIGxvYWRUZXh0dXJlQXN5bmMoZmlsZU5hbWU6IHN0cmluZyk6IFByb21pc2U8VGV4dHVyZSB8IG51bGw+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGltZyA9IGF3YWl0IFJlc291cmNlcy5sb2FkSW1hZ2VGaWxlKGZpbGVOYW1lKTtcblxuICAgICAgICAgICAgLy8gMS4g6I635Y+W5Zu+54mH5Y6f5aeL5bC65a+4XG4gICAgICAgICAgICBjb25zdCBpbWdXaWR0aCA9IGltZy53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGltZ0hlaWdodCA9IGltZy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIC8vIDIuIOWIm+W7uuOAkOS4tOaXtkNhbnZhc+OAke+8iOWGheWtmOS4re+8jOS4jeaYvuekuuWIsOmhtemdou+8iVxuICAgICAgICAgICAgY29uc3QgdGVtcENhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICAgICAgY29uc3QgdGVtcEN0eCA9IHRlbXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIGlmICghdGVtcEN0eCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+aXoOazleWIm+W7uuS4tOaXtkNhbnZhc+S4iuS4i+aWhycpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAzLiDorqnkuLTml7ZDYW52YXPlsLrlr7jkuI7lm77niYfljp/lp4vlsLrlr7jlrozlhajkuIDoh7TvvIjlhbPplK7vvJrnoa7kv53lg4/ntKDml6DlpLHnnJ/vvIlcbiAgICAgICAgICAgIHRlbXBDYW52YXMud2lkdGggPSBpbWdXaWR0aDtcbiAgICAgICAgICAgIHRlbXBDYW52YXMuaGVpZ2h0ID0gaW1nSGVpZ2h0O1xuXG4gICAgICAgICAgICAvLyA0LiDku4XlnKjkuLTml7ZDYW52YXPkuIrnu5jliLblm77niYfvvIx3ZWLnmoTlm77lv4XpobvlhYjliqDovb3liLBjYW52YXPmiY3og73or7vlj5blroPnmoTmlbDmja5cbiAgICAgICAgICAgIHRlbXBDdHguZHJhd0ltYWdlKGltZywgMCwgMCwgaW1nV2lkdGgsIGltZ0hlaWdodCk7IC8vIDAsMOaYr+e7mOWItui1t+eCue+8jOWQjuS4pOS4quWPguaVsOaYr+e7mOWItuWwuuWvuO+8iOS4juWbvueJh+S4gOiHtO+8iVxuXG4gICAgICAgICAgICAvLyA1LiDmj5Dlj5blm77niYfnmoRJbWFnZURhdGHvvIjmraTml7blt7Lojrflj5blrozmlbTlg4/ntKDmlbDmja7vvIzml6DpnIDkvp3otZbkuJrliqFDYW52YXPvvIlcbiAgICAgICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IHRlbXBDdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIGltZ1dpZHRoLCBpbWdIZWlnaHQpO1xuICAgICAgICAgICAgY29uc3QgcGl4ZWxEYXRhID0gaW1hZ2VEYXRhLmRhdGE7IC8vIOaguOW/g++8mlVpbnQ4Q2xhbXBlZEFycmF557G75Z6L55qE5YOP57Sg5pWw57uE77yM5q+P5Liq5YOP57Sg5Y2gNOS9je+8iFJHQkHvvIlcblxuICAgICAgICAgICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKGltZ1dpZHRoLCBpbWdIZWlnaHQpO1xuICAgICAgICAgICAgdGV4dHVyZS5Mb2FkSW1hZ2UocGl4ZWxEYXRhKTtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0dXJlO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihg5Yqg6L2957q555CG5aSx6LSlOiAke2ZpbGVOYW1lfWAsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5Yqg6L295Zu+54mH5paH5Lu277yI5YaF6YOo5L2/55So77yJXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGF0aWMgbG9hZEltYWdlRmlsZShmaWxlTmFtZTogc3RyaW5nKTogUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAoUmVzb3VyY2VzLmZpbGVDYWNoZS5oYXMoZmlsZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShSZXNvdXJjZXMuZmlsZUNhY2hlLmdldChmaWxlTmFtZSkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIGlmICghaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCfml6Dms5XliJvlu7rlm77niYflr7nosaEnKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShpbWFnZSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpbWFnZS5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYOaXoOazleWKoOi9veWbvueJhzogJHtmaWxlTmFtZX1gKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyDot6jln5/orr7nva5cbiAgICAgICAgICAgIGltYWdlLmNyb3NzT3JpZ2luID0gXCJhbm9ueW1vdXNcIjtcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IGZpbGVOYW1lO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliqDovb3mlofmnKzmlofku7ZcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBsb2FkVGV4dEFzeW5jKGZpbGVOYW1lOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZyB8IG51bGw+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpZiAoUmVzb3VyY2VzLmZpbGVDYWNoZS5oYXMoZmlsZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShSZXNvdXJjZXMuZmlsZUNhY2hlLmdldChmaWxlTmFtZSkpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICAgICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gcmVxdWVzdC5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihg5Yqg6L295paH5pys5aSx6LSlOiAke2ZpbGVOYW1lfSwg54q25oCB56CBOiAke3JlcXVlc3Quc3RhdHVzfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vIOS9v+eUqOW8guatpeWKoOi9veS7pemBv+WFjemYu+WhnlxuICAgICAgICAgICAgcmVxdWVzdC5vcGVuKFwiR0VUXCIsIGZpbGVOYW1lLCB0cnVlKTtcbiAgICAgICAgICAgIHJlcXVlc3Quc2VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDliqDovb3mqKHlnovmlofku7ZcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXRpYyBhc3luYyBsb2FkTW9kZWxBc3luYyhtb2RlbFBhdGg6IHN0cmluZywgc2NhbGU6IG51bWJlciA9IDEpOiBQcm9taXNlPE1lc2ggfCBudWxsPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBvYmpEb2MgPSBhd2FpdCBSZXNvdXJjZXMubG9hZFRleHRBc3luYyhtb2RlbFBhdGgpO1xuICAgICAgICAgICAgaWYgKCFvYmpEb2MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbWVzaCA9IE9CSlBhcnNlci5wYXJzZShvYmpEb2MsIHNjYWxlKTtcbiAgICAgICAgICAgIHJldHVybiBtZXNoO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihg5Yqg6L295qih5Z6L5aSx6LSlOiAke21vZGVsUGF0aH1gLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7IFVPYmplY3QgfSBmcm9tIFwiLi4vQ29yZS9VT2JqZWN0XCI7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9NYXRoL0NvbG9yXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yMlwiO1xuXG5leHBvcnQgZW51bSBGaWx0ZXJNb2RlIHtcbiAgICBQb2ludCxcbiAgICBCaWxpbmVhcixcbiAgICBUcmlsaW5lYXJcbn1cblxuZXhwb3J0IGVudW0gVGV4dHVyZVdyYXBNb2RlIHtcbiAgICBSZXBlYXQsXG4gICAgQ2xhbXBcbn1cblxuZXhwb3J0IGVudW0gVGV4dHVyZUZvcm1hdCB7XG4gICAgQWxwaGE4ID0gMSxcbiAgICBBUkdCNDQ0NCA9IDIsXG4gICAgUkdCMjQgPSAzLFxuICAgIFJHQkEzMiA9IDQsXG4gICAgQVJHQjMyID0gNSxcbiAgICBSR0I1NjUgPSA3LFxuICAgIERYVDEgPSAxMCxcbiAgICBEWFQ1ID0gMTIsXG4gICAgUkdCQTQ0NDQgPSAxMyxcbiAgICBQVlJUQ19SR0IyID0gMzAsXG4gICAgUFZSVENfUkdCQTIgPSAzMSxcbiAgICBQVlJUQ19SR0I0ID0gMzIsXG4gICAgUFZSVENfUkdCQTQgPSAzMyxcbiAgICBFVENfUkdCNCA9IDM0LFxuICAgIEFUQ19SR0I0ID0gMzUsXG4gICAgQVRDX1JHQkE4ID0gMzYsXG4gICAgQkdSQTMyID0gMzcsXG4gICAgQVRGX1JHQl9EWFQxID0gMzgsXG4gICAgQVRGX1JHQkFfSlBHID0gMzksXG4gICAgQVRGX1JHQl9KUEcgPSA0MFxufVxuXG5pbnRlcmZhY2UgTWlwbWFwTGV2ZWwge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgZGF0YTogVWludDhDbGFtcGVkQXJyYXk7XG59XG5cbmV4cG9ydCBjbGFzcyBUZXh0dXJlIGV4dGVuZHMgVU9iamVjdCB7XG4gICAgcHVibGljIHdpZHRoOiBudW1iZXI7XG4gICAgcHVibGljIGhlaWdodDogbnVtYmVyO1xuICAgIHB1YmxpYyBtaXBNYXBCaWFzOiBudW1iZXIgPSAwO1xuICAgIHB1YmxpYyBtaXBtYXBDb3VudDogbnVtYmVyID0gMDtcbiAgICBwdWJsaWMgZGF0YTogVWludDhDbGFtcGVkQXJyYXk7XG4gICAgcHVibGljIGZpbHRlck1vZGU6IEZpbHRlck1vZGUgPSBGaWx0ZXJNb2RlLlBvaW50O1xuICAgIHB1YmxpYyB3cmFwTW9kZTogVGV4dHVyZVdyYXBNb2RlID0gVGV4dHVyZVdyYXBNb2RlLlJlcGVhdDtcbiAgICBwdWJsaWMgZm9ybWF0OiBUZXh0dXJlRm9ybWF0ID0gVGV4dHVyZUZvcm1hdC5SR0JBMzI7XG4gICAgcHVibGljIGFscGhhSXNUcmFuc3BhcmVuY3k6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBtaXBtYXBMZXZlbHM6IE1pcG1hcExldmVsW107XG5cblxuICAgIGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfVxuXG4gICAgTG9hZEltYWdlKGRhdGE6IFVpbnQ4Q2xhbXBlZEFycmF5KSB7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuZ2VuZXJhdGVNaXBtYXBzKCk7XG4gICAgfVxuXG4gICAgU2V0UGl4ZWwoeDogbnVtYmVyLCB5OiBudW1iZXIsIGNvbG9yOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSAoeSAqIHRoaXMud2lkdGggKyB4KSAqIDQ7XG4gICAgICAgIHRoaXMuZGF0YVtpbmRleF0gPSBjb2xvciAmIDB4ZmY7XG4gICAgICAgIHRoaXMuZGF0YVtpbmRleCArIDFdID0gKGNvbG9yID4+IDgpICYgMHhmZjtcbiAgICAgICAgdGhpcy5kYXRhW2luZGV4ICsgMl0gPSAoY29sb3IgPj4gMTYpICYgMHhmZjtcbiAgICAgICAgdGhpcy5kYXRhW2luZGV4ICsgM10gPSAoY29sb3IgPj4gMjQpICYgMHhmZjtcbiAgICB9XG5cbiAgICAvLyBTZXRQaXhlbHMoY29sb3JzOiBDb2xvcltdKXtcbiAgICAvLyAgICAgZm9yKGxldCBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkrKyl7XG4gICAgLy8gICAgICAgICBjb25zdCBjb2xvciA9IGNvbG9yc1tpXTtcbiAgICAvLyAgICAgICAgIGNvbnN0IHggPSBpICUgdGhpcy53aWR0aDtcbiAgICAvLyAgICAgICAgIGNvbnN0IHkgPSBNYXRoLmZsb29yKGkgLyB0aGlzLndpZHRoKTtcbiAgICAvLyAgICAgICAgIHRoaXMuU2V0UGl4ZWwoeCwgeSwgY29sb3IpO1xuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgLy8gU2V0UGl4ZWxzMih4OiBudW1iZXIsIHk6IG51bWJlciwgYmxvY2tXaWR0aDogbnVtYmVyLCBibG9ja0hlaWdodDogbnVtYmVyLCBjb2xvcnM6IENvbG9yW10pe1xuICAgIC8vICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvYWRJbWFnZSBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICAvLyB9XG5cbiAgICBHZXRQaXhlbCh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gKHkgKiB0aGlzLndpZHRoICsgeCkgKiA0O1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhW2luZGV4XSB8ICh0aGlzLmRhdGFbaW5kZXggKyAxXSA8PCA4KSB8ICh0aGlzLmRhdGFbaW5kZXggKyAyXSA8PCAxNikgfCAodGhpcy5kYXRhW2luZGV4ICsgM10gPDwgMjQpO1xuICAgIH1cblxuICAgIC8vIEdldFBpeGVscyh4OiBudW1iZXIsIHk6IG51bWJlciwgYmxvY2tXaWR0aDogbnVtYmVyLCBibG9ja0hlaWdodDogbnVtYmVyKTogbnVtYmVyW117XG4gICAgLy8gICAgIGNvbnN0IGNvbG9ycyA9IG5ldyBBcnJheTxudW1iZXI+KGJsb2NrV2lkdGggKiBibG9ja0hlaWdodCk7XG4gICAgLy8gICAgIGZvcihsZXQgaSA9IDA7IGkgPCBibG9ja1dpZHRoICogYmxvY2tIZWlnaHQ7IGkrKyl7XG4gICAgLy8gICAgICAgICBjb25zdCB4MCA9IHggKyBpICUgYmxvY2tXaWR0aDtcbiAgICAvLyAgICAgICAgIGNvbnN0IHkwID0geSArIE1hdGguZmxvb3IoaSAvIGJsb2NrV2lkdGgpO1xuICAgIC8vICAgICAgICAgY29sb3JzW2ldID0gdGhpcy5HZXRQaXhlbCh4MCwgeTApO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHJldHVybiBjb2xvcnM7XG4gICAgLy8gfVxuXG4gICAgLy8gR2V0UGl4ZWxCaWxpbmVhcih1OiBudW1iZXIsIHY6IG51bWJlcik6IENvbG9ye1xuICAgIC8vICAgICBjb25zdCB4ID0gdSAqIHRoaXMud2lkdGg7XG4gICAgLy8gICAgIGNvbnN0IHkgPSB2ICogdGhpcy5oZWlnaHQ7XG4gICAgLy8gICAgIGNvbnN0IHgwID0gTWF0aC5mbG9vcih4KTtcbiAgICAvLyAgICAgY29uc3QgeTAgPSBNYXRoLmZsb29yKHkpO1xuICAgIC8vICAgICBjb25zdCB4MSA9IHgwICsgMTtcbiAgICAvLyAgICAgY29uc3QgeTEgPSB5MCArIDE7XG4gICAgLy8gICAgIGNvbnN0IHUwID0geCAtIHgwO1xuICAgIC8vICAgICBjb25zdCB2MCA9IHkgLSB5MDtcbiAgICAvLyAgICAgY29uc3QgdTEgPSAxIC0gdTA7XG4gICAgLy8gICAgIGNvbnN0IHYxID0gMSAtIHYwO1xuICAgIC8vICAgICBjb25zdCBjMDAgPSB0aGlzLkdldFBpeGVsKHgwLCB5MCk7XG4gICAgLy8gICAgIGNvbnN0IGMwMSA9IHRoaXMuR2V0UGl4ZWwoeDAsIHkxKTtcbiAgICAvLyAgICAgY29uc3QgYzEwID0gdGhpcy5HZXRQaXhlbCh4MSwgeTApO1xuICAgIC8vICAgICBjb25zdCBjMTEgPSB0aGlzLkdldFBpeGVsKHgxLCB5MSk7XG4gICAgLy8gICAgIHJldHVybiBuZXcgQ29sb3IoXG4gICAgLy8gICAgICAgICBjMDAuciAqIHUxICogdjEgKyBjMDEuciAqIHUxICogdjAgKyBjMTAuciAqIHUwICogdjEgKyBjMTEuciAqIHUwICogdjAsICBcbiAgICAvLyAgICAgICAgIGMwMC5nICogdTEgKiB2MSArIGMwMS5nICogdTEgKiB2MCArIGMxMC5nICogdTAgKiB2MSArIGMxMS5nICogdTAgKiB2MCwgIFxuICAgIC8vICAgICAgICAgYzAwLmIgKiB1MSAqIHYxICsgYzAxLmIgKiB1MSAqIHYwICsgYzEwLmIgKiB1MCAqIHYxICsgYzExLmIgKiB1MCAqIHYwLCAgXG4gICAgLy8gICAgICAgICBjMDAuYSAqIHUxICogdjEgKyBjMDEuYSAqIHUxICogdjAgKyBjMTAuYSAqIHUwICogdjEgKyBjMTEuYSAqIHUwICogdjAsICBcbiAgICAvLyAgICAgKTtcbiAgICAvLyB9XG5cbiAgICAvLyBSZXNpemUod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpe1xuICAgIC8vICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xvYWRJbWFnZSBub3QgaW1wbGVtZW50ZWQnKTtcbiAgICAvLyB9XG5cbiAgICAvKipcbiAgICAgKiDpgJrov4dVVuWdkOagh+WSjOe6ueeQhuWdkOagh+WvvOaVsOiOt+WPluWDj+e0oOminOiJsu+8iOiAg+iZkU1pcG1hcO+8iVxuICAgICAqIEBwYXJhbSB1IOe6ueeQhlXlnZDmoIfvvIgwLTHvvIlcbiAgICAgKiBAcGFyYW0gdiDnurnnkIZW5Z2Q5qCH77yIMC0x77yJXG4gICAgICogQHBhcmFtIGR1X2R4IFXlnZDmoIflnKjlsY/luZXnqbrpl7RY5pa55ZCR55qE5a+85pWwXG4gICAgICogQHBhcmFtIGR2X2R4IFblnZDmoIflnKjlsY/luZXnqbrpl7RY5pa55ZCR55qE5a+85pWwXG4gICAgICogQHBhcmFtIGR1X2R5IFXlnZDmoIflnKjlsY/luZXnqbrpl7RZ5pa55ZCR55qE5a+85pWwXG4gICAgICogQHBhcmFtIGR2X2R5IFblnZDmoIflnKjlsY/luZXnqbrpl7RZ5pa55ZCR55qE5a+85pWwXG4gICAgICogQHJldHVybnMg6aKc6Imy5YC877yIQVJHQuagvOW8j+eahDMy5L2N5pW05pWw77yJXG4gICAgICovXG4gICAgcHVibGljIFNhbXBsZU1pcCh1OiBudW1iZXIsIHY6IG51bWJlciwgZHVfZHg6IG51bWJlciA9IDAuMDAxLCBkdl9keDogbnVtYmVyID0gMC4wMDEsIGR1X2R5OiBudW1iZXIgPSAwLjAwMSwgZHZfZHk6IG51bWJlciA9IDAuMDAxKTogQ29sb3Ige1xuICAgICAgICAvKiBcbiAgICAgICAg5ZyoIDNEIOa4suafk+S4re+8jOS4uuS6huiuqSBNaXBtYXAg5bGC57qn6K6h566X5pu05YeG56Gu77yI6YG/5YWN57q555CG5Zyo6L+c5aSE5Ye6546w6ZSv6b2/5oiW6L+R5aSE6L+H5bqm5qih57OK77yJ77yM6ZyA6KaB5Lyg6YCS57q555CG5Z2Q5qCH5Zyo5bGP5bmV56m66Ze055qE5a+85pWw44CC6L+Z5Lqb5a+85pWw5o+P6L+w5LqGIFVWIOWdkOagh+WcqOWxj+W5leS4iuavj+enu+WKqCAxIOWDj+e0oOaXtueahOWPmOWMlueOh++8jOiuoeeul+aWueW8j+WmguS4i++8mlxuICAgICAgICAvLyDlgYforr7lvZPliY3niYfmrrXnmoRVVuWdkOagh1xuICAgICAgICBjb25zdCBjdXJyZW50VSA9IHV2LnU7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWID0gdXYudjtcblxuICAgICAgICAvLyDlj7Pkvqfnm7jpgrvlg4/ntKDnmoRVVu+8iHjmlrnlkJErMe+8iVxuICAgICAgICBjb25zdCByaWdodFUgPSBuZWlnaGJvclJpZ2h0LmF0dHJpYnV0ZXMudXYudTtcbiAgICAgICAgY29uc3QgcmlnaHRWID0gbmVpZ2hib3JSaWdodC5hdHRyaWJ1dGVzLnV2LnY7XG5cbiAgICAgICAgLy8g5LiL5pa555u46YK75YOP57Sg55qEVVbvvIh55pa55ZCRKzHvvIlcbiAgICAgICAgY29uc3QgYm90dG9tVSA9IG5laWdoYm9yQm90dG9tLmF0dHJpYnV0ZXMudXYudTtcbiAgICAgICAgY29uc3QgYm90dG9tViA9IG5laWdoYm9yQm90dG9tLmF0dHJpYnV0ZXMudXYudjtcblxuICAgICAgICAvLyDorqHnrpflr7zmlbDvvIhVVuWcqOWxj+W5leepuumXtOeahOWPmOWMlueOh++8iVxuICAgICAgICBjb25zdCBkdV9keCA9IHJpZ2h0VSAtIGN1cnJlbnRVOyAvLyBV5ZyoWOaWueWQkeeahOWvvOaVsFxuICAgICAgICBjb25zdCBkdl9keCA9IHJpZ2h0ViAtIGN1cnJlbnRWOyAvLyBW5ZyoWOaWueWQkeeahOWvvOaVsFxuICAgICAgICBjb25zdCBkdV9keSA9IGJvdHRvbVUgLSBjdXJyZW50VTsgLy8gVeWcqFnmlrnlkJHnmoTlr7zmlbBcbiAgICAgICAgY29uc3QgZHZfZHkgPSBib3R0b21WIC0gY3VycmVudFY7IC8vIFblnKhZ5pa55ZCR55qE5a+85pWwXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8vIOiuoeeul01pcG1hcOWxgue6p1xuICAgICAgICBjb25zdCBtaXBMZXZlbCA9IHRoaXMuY2FsY3VsYXRlTWlwTGV2ZWwoZHVfZHgsIGR2X2R4LCBkdV9keSwgZHZfZHkpO1xuICAgICAgICByZXR1cm4gdGhpcy5TYW1wbGUodSwgdiwgbWlwTGV2ZWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOmAmui/h1VW5Z2Q5qCH6I635Y+W5YOP57Sg6aKc6Imy77yI5qC55o2u57q555CG6K6+572u6Ieq5Yqo5aSE55CG77yJXG4gICAgICogQHBhcmFtIHUg57q555CGVeWdkOagh++8iDAtMe+8iVxuICAgICAqIEBwYXJhbSB2IOe6ueeQhlblnZDmoIfvvIgwLTHvvIlcbiAgICAgKiBAcmV0dXJucyDpopzoibLlgLzvvIhBUkdC5qC85byP55qEMzLkvY3mlbTmlbDvvIlcbiAgICAgKi9cbiAgICBwdWJsaWMgU2FtcGxlKHU6IG51bWJlciwgdjogbnVtYmVyLCBtaXBMZXZlbDogbnVtYmVyID0gMCk6IENvbG9yIHtcbiAgICAgICAgLy8g5qC55o2u546v57uV5qih5byP5aSE55CGVVblnZDmoIdcbiAgICAgICAgY29uc3QgW2NsYW1wZWRVLCBjbGFtcGVkVl0gPSB0aGlzLmhhbmRsZVdyYXBNb2RlKHUsIHYpO1xuXG4gICAgICAgIC8vIOagueaNrui/h+a7pOaooeW8j+mHh+agt+WDj+e0oFxuICAgICAgICBzd2l0Y2ggKHRoaXMuZmlsdGVyTW9kZSkge1xuICAgICAgICAgICAgY2FzZSBGaWx0ZXJNb2RlLlBvaW50OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNhbXBsZVBvaW50KGNsYW1wZWRVLCBjbGFtcGVkViwgbWlwTGV2ZWwpO1xuICAgICAgICAgICAgY2FzZSBGaWx0ZXJNb2RlLkJpbGluZWFyOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNhbXBsZUJpbGluZWFyKGNsYW1wZWRVLCBjbGFtcGVkViwgbWlwTGV2ZWwpO1xuICAgICAgICAgICAgY2FzZSBGaWx0ZXJNb2RlLlRyaWxpbmVhcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zYW1wbGVUcmlsaW5lYXIoY2xhbXBlZFUsIGNsYW1wZWRWLCBtaXBMZXZlbCk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNhbXBsZVBvaW50KGNsYW1wZWRVLCBjbGFtcGVkViwgbWlwTGV2ZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5aSE55CGVVblnZDmoIfnmoTnjq/nu5XmqKHlvI9cbiAgICAgKiBAcGFyYW0gdSDljp/lp4tV5Z2Q5qCHXG4gICAgICogQHBhcmFtIHYg5Y6f5aeLVuWdkOagh1xuICAgICAqIEByZXR1cm5zIOWkhOeQhuWQjueahFVW5Z2Q5qCHXG4gICAgICovXG4gICAgcHJpdmF0ZSBoYW5kbGVXcmFwTW9kZSh1OiBudW1iZXIsIHY6IG51bWJlcik6IFtudW1iZXIsIG51bWJlcl0ge1xuICAgICAgICBsZXQgaGFuZGxlZFUgPSB1O1xuICAgICAgICBsZXQgaGFuZGxlZFYgPSB2O1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy53cmFwTW9kZSkge1xuICAgICAgICAgICAgY2FzZSBUZXh0dXJlV3JhcE1vZGUuUmVwZWF0OlxuICAgICAgICAgICAgICAgIC8vIOmHjeWkjeaooeW8j++8muWPluWwj+aVsOmDqOWIhuWunueOsOW5s+mTulxuICAgICAgICAgICAgICAgIGhhbmRsZWRVID0gaGFuZGxlZFUgLSBNYXRoLmZsb29yKGhhbmRsZWRVKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVkViA9IGhhbmRsZWRWIC0gTWF0aC5mbG9vcihoYW5kbGVkVik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFRleHR1cmVXcmFwTW9kZS5DbGFtcDpcbiAgICAgICAgICAgICAgICAvLyDmi4nkvLjmqKHlvI/vvJrpmZDliLblnKgwLTHojIPlm7TlhoVcbiAgICAgICAgICAgICAgICBoYW5kbGVkVSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGhhbmRsZWRVKSk7XG4gICAgICAgICAgICAgICAgaGFuZGxlZFYgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBoYW5kbGVkVikpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFtoYW5kbGVkVSwgaGFuZGxlZFZdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeCuei/h+a7pOmHh+agt++8iOacgOi/kemCu++8iVxuICAgICAqIEBwYXJhbSB1IOWkhOeQhuWQjueahFXlnZDmoIfvvIgwLTHvvIlcbiAgICAgKiBAcGFyYW0gdiDlpITnkIblkI7nmoRW5Z2Q5qCH77yIMC0x77yJXG4gICAgICogQHJldHVybnMg6aKc6Imy5YC8XG4gICAgICovXG4gICAgcHJpdmF0ZSBzYW1wbGVQb2ludCh1OiBudW1iZXIsIHY6IG51bWJlciwgbWlwTGV2ZWw6IG51bWJlciA9IDApOiBDb2xvciB7XG4gICAgICAgIC8vIOmAieaLqeacgOaOpei/keeahE1pcG1hcOWxgue6p1xuICAgICAgICBjb25zdCBsZXZlbCA9IE1hdGgucm91bmQobWlwTGV2ZWwpO1xuICAgICAgICBjb25zdCBtaXAgPSB0aGlzLmdldE1pcG1hcExldmVsKGxldmVsKTtcblxuICAgICAgICAvLyDlsIZVVuWdkOagh+i9rOaNouS4uuWDj+e0oOWdkOagh1xuICAgICAgICBjb25zdCB4ID0gTWF0aC5mbG9vcih1ICogbWlwLndpZHRoKTtcbiAgICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IodiAqIG1pcC5oZWlnaHQpO1xuXG4gICAgICAgIC8vIOehruS/neWdkOagh+WcqOacieaViOiMg+WbtOWGhVxuICAgICAgICBjb25zdCBjbGFtcGVkWCA9IE1hdGgubWF4KDAsIE1hdGgubWluKG1pcC53aWR0aCAtIDEsIHgpKTtcbiAgICAgICAgY29uc3QgY2xhbXBlZFkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihtaXAuaGVpZ2h0IC0gMSwgeSkpO1xuXG4gICAgICAgIC8vIOiOt+WPluWDj+e0oOminOiJslxuICAgICAgICBjb25zdCBpbmRleCA9IChjbGFtcGVkWSAqIG1pcC53aWR0aCArIGNsYW1wZWRYKSAqIDQ7XG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IoXG4gICAgICAgICAgICBtaXAuZGF0YVtpbmRleF0gLyAyNTUsXG4gICAgICAgICAgICBtaXAuZGF0YVtpbmRleCArIDFdIC8gMjU1LFxuICAgICAgICAgICAgbWlwLmRhdGFbaW5kZXggKyAyXSAvIDI1NSxcbiAgICAgICAgICAgIG1pcC5kYXRhW2luZGV4ICsgM10gLyAyNTVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlj4znur/mgKfov4fmu6Tph4fmoLdcbiAgICAgKiBAcGFyYW0gdSDlpITnkIblkI7nmoRV5Z2Q5qCH77yIMC0x77yJXG4gICAgICogQHBhcmFtIHYg5aSE55CG5ZCO55qEVuWdkOagh++8iDAtMe+8iVxuICAgICAqIEByZXR1cm5zIOaPkuWAvOWQjueahOminOiJsuWAvFxuICAgICAqL1xuICAgIHByaXZhdGUgc2FtcGxlQmlsaW5lYXIodTogbnVtYmVyLCB2OiBudW1iZXIsIG1pcExldmVsOiBudW1iZXIgPSAwKTogQ29sb3Ige1xuICAgICAgICAvLyDpgInmi6nmnIDmjqXov5HnmoRNaXBtYXDlsYLnuqdcbiAgICAgICAgY29uc3QgbGV2ZWwgPSBNYXRoLnJvdW5kKG1pcExldmVsKTtcbiAgICAgICAgY29uc3QgbWlwID0gdGhpcy5nZXRNaXBtYXBMZXZlbChsZXZlbCk7XG5cbiAgICAgICAgLy8g6L2s5o2i5Li65YOP57Sg5Z2Q5qCH77yI5bim5bCP5pWw6YOo5YiG77yJXG4gICAgICAgIGNvbnN0IHggPSB1ICogbWlwLndpZHRoO1xuICAgICAgICBjb25zdCB5ID0gdiAqIG1pcC5oZWlnaHQ7XG5cbiAgICAgICAgLy8g6K6h566X5ZGo5Zu05Zub5Liq5YOP57Sg55qE5Z2Q5qCHXG4gICAgICAgIGNvbnN0IHgwID0gTWF0aC5mbG9vcih4KTtcbiAgICAgICAgY29uc3QgeTAgPSBNYXRoLmZsb29yKHkpO1xuICAgICAgICBjb25zdCB4MSA9IHgwICsgMTtcbiAgICAgICAgY29uc3QgeTEgPSB5MCArIDE7XG5cbiAgICAgICAgLy8g6K6h566X5o+S5YC85p2D6YeNXG4gICAgICAgIGNvbnN0IHVXZWlnaHQgPSB4IC0geDA7XG4gICAgICAgIGNvbnN0IHZXZWlnaHQgPSB5IC0geTA7XG5cbiAgICAgICAgLy8g6I635Y+W5Zub5Liq6KeS6JC955qE5YOP57Sg6aKc6ImyXG4gICAgICAgIGNvbnN0IGMwMCA9IHRoaXMuZ2V0Q2xhbXBlZFBpeGVsRnJvbU1pcChtaXAsIHgwLCB5MCk7XG4gICAgICAgIGNvbnN0IGMwMSA9IHRoaXMuZ2V0Q2xhbXBlZFBpeGVsRnJvbU1pcChtaXAsIHgwLCB5MSk7XG4gICAgICAgIGNvbnN0IGMxMCA9IHRoaXMuZ2V0Q2xhbXBlZFBpeGVsRnJvbU1pcChtaXAsIHgxLCB5MCk7XG4gICAgICAgIGNvbnN0IGMxMSA9IHRoaXMuZ2V0Q2xhbXBlZFBpeGVsRnJvbU1pcChtaXAsIHgxLCB5MSk7XG5cbiAgICAgICAgLy8g5Y+M57q/5oCn5o+S5YC86K6h566XXG4gICAgICAgIGNvbnN0IGNvbG9yMCA9IHRoaXMubGVycENvbG9yKGMwMCwgYzEwLCB1V2VpZ2h0KTtcbiAgICAgICAgY29uc3QgY29sb3IxID0gdGhpcy5sZXJwQ29sb3IoYzAxLCBjMTEsIHVXZWlnaHQpO1xuICAgICAgICBjb25zdCBmaW5hbENvbG9yID0gdGhpcy5sZXJwQ29sb3IoY29sb3IwLCBjb2xvcjEsIHZXZWlnaHQpO1xuXG4gICAgICAgIHJldHVybiBmaW5hbENvbG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS4iee6v+aAp+i/h+a7pOmHh+agt++8jOWcqOWPjOe6v+aAp+i/h+a7pOWfuuehgOS4iu+8jOaJvuWIsDLkuKrmnIDov5HnmoRNaXBtYXDlsYLnuqfvvIzmoLnmja7ot53nprvmj5LlgLxcbiAgICAgKi9cbiAgICBwcml2YXRlIHNhbXBsZVRyaWxpbmVhcih1OiBudW1iZXIsIHY6IG51bWJlciwgbWlwTGV2ZWw6IG51bWJlciA9IDApOiBDb2xvciB7XG4gICAgICAgIC8vIOWmguaenE1pcG1hcOWxgue6p+S4jei2s++8jOmAgOWMluS4uuWPjOe6v+aAp+i/h+a7pFxuICAgICAgICBpZiAodGhpcy5taXBtYXBDb3VudCA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNhbXBsZUJpbGluZWFyKHUsIHYsIG1pcExldmVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOiuoeeul+S4iuS4i+S4pOS4qk1pcG1hcOWxgue6p1xuICAgICAgICBjb25zdCBsZXZlbEZsb29yID0gTWF0aC5mbG9vcihtaXBMZXZlbCk7XG4gICAgICAgIGNvbnN0IGxldmVsQ2VpbCA9IE1hdGgubWluKGxldmVsRmxvb3IgKyAxLCB0aGlzLm1pcG1hcENvdW50IC0gMSk7XG4gICAgICAgIGNvbnN0IGxldmVsV2VpZ2h0ID0gbWlwTGV2ZWwgLSBsZXZlbEZsb29yO1xuXG4gICAgICAgIC8vIOWcqOS4pOS4quWxgue6p+S4iuWIhuWIq+i/m+ihjOWPjOe6v+aAp+i/h+a7pFxuICAgICAgICBjb25zdCBjb2xvckZsb29yID0gdGhpcy5zYW1wbGVCaWxpbmVhcih1LCB2LCBsZXZlbEZsb29yKTtcbiAgICAgICAgY29uc3QgY29sb3JDZWlsID0gdGhpcy5zYW1wbGVCaWxpbmVhcih1LCB2LCBsZXZlbENlaWwpO1xuXG4gICAgICAgIC8vIOWcqOS4pOS4quWxgue6p+e7k+aenOS5i+mXtOi/m+ihjOe6v+aAp+aPkuWAvFxuICAgICAgICByZXR1cm4gdGhpcy5sZXJwQ29sb3IoY29sb3JGbG9vciwgY29sb3JDZWlsLCBsZXZlbFdlaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6aKc6Imy5o+S5YC877yI57q/5oCn5o+S5YC877yJXG4gICAgICogQHBhcmFtIGEg6LW35aeL6aKc6ImyXG4gICAgICogQHBhcmFtIGIg55uu5qCH6aKc6ImyXG4gICAgICogQHBhcmFtIHQg5o+S5YC857O75pWw77yIMC0x77yJXG4gICAgICogQHJldHVybnMg5o+S5YC85ZCO55qE6aKc6ImyXG4gICAgICovXG4gICAgcHJpdmF0ZSBsZXJwQ29sb3IoYTogQ29sb3IsIGI6IENvbG9yLCB0OiBudW1iZXIpOiBDb2xvciB7XG4gICAgICAgIC8vIOaPkOWPlkFSR0Llm5vkuKrpgJrpgZNcbiAgICAgICAgY29uc3QgYUEgPSBhLmE7XG4gICAgICAgIGNvbnN0IGFSID0gYS5yO1xuICAgICAgICBjb25zdCBhRyA9IGEuZztcbiAgICAgICAgY29uc3QgYUIgPSBhLmI7XG5cbiAgICAgICAgY29uc3QgYkEgPSBiLmE7XG4gICAgICAgIGNvbnN0IGJSID0gYi5yO1xuICAgICAgICBjb25zdCBiRyA9IGIuZztcbiAgICAgICAgY29uc3QgYkIgPSBiLmI7XG5cbiAgICAgICAgLy8g5q+P5Liq6YCa6YGT5Y2V54us5o+S5YC8XG4gICAgICAgIGNvbnN0IGxlcnBBID0gTWF0aC5yb3VuZChhQSArIChiQSAtIGFBKSAqIHQpO1xuICAgICAgICBjb25zdCBsZXJwUiA9IE1hdGgucm91bmQoYVIgKyAoYlIgLSBhUikgKiB0KTtcbiAgICAgICAgY29uc3QgbGVycEcgPSBNYXRoLnJvdW5kKGFHICsgKGJHIC0gYUcpICogdCk7XG4gICAgICAgIGNvbnN0IGxlcnBCID0gTWF0aC5yb3VuZChhQiArIChiQiAtIGFCKSAqIHQpO1xuXG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IobGVycEEsIGxlcnBSLCBsZXJwRywgbGVycEIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOeUn+aIkE1pcG1hcOWxgue6p1xuICAgICAqIOS7juWOn+Wni+e6ueeQhuW8gOWni++8jOmAkOe6p+e8qeWwj+S4ujEvMuWwuuWvuOW5tui/m+ihjOaooeeziuWkhOeQhlxuICAgICAqL1xuICAgIHByaXZhdGUgZ2VuZXJhdGVNaXBtYXBzKCkge1xuICAgICAgICAvLyDmuIXnqbrnjrDmnIlNaXBtYXDlsYLnuqdcbiAgICAgICAgdGhpcy5taXBtYXBMZXZlbHMgPSBbXTtcblxuICAgICAgICAvLyDmt7vliqDljp/lp4vnurnnkIbkvZzkuLrnrKww57qnTWlwbWFwXG4gICAgICAgIHRoaXMubWlwbWFwTGV2ZWxzLnB1c2goe1xuICAgICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgZGF0YTogbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHRoaXMuZGF0YSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGN1cnJlbnRXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgIGxldCBjdXJyZW50SGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIGxldCBjdXJyZW50TGV2ZWwgPSAwO1xuXG4gICAgICAgIC8vIOeUn+aIkOWQjue7rU1pcG1hcOWxgue6p++8jOebtOWIsDF4MeWDj+e0oFxuICAgICAgICB3aGlsZSAoY3VycmVudFdpZHRoID4gMSB8fCBjdXJyZW50SGVpZ2h0ID4gMSkge1xuICAgICAgICAgICAgY3VycmVudExldmVsKys7XG4gICAgICAgICAgICBjb25zdCBuZXdXaWR0aCA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IoY3VycmVudFdpZHRoIC8gMikpO1xuICAgICAgICAgICAgY29uc3QgbmV3SGVpZ2h0ID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihjdXJyZW50SGVpZ2h0IC8gMikpO1xuXG4gICAgICAgICAgICAvLyDliJvlu7rmlrDlsYLnuqfmlbDmja5cbiAgICAgICAgICAgIGNvbnN0IG5ld0RhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkobmV3V2lkdGggKiBuZXdIZWlnaHQgKiA0KTtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUxldmVsID0gdGhpcy5taXBtYXBMZXZlbHNbY3VycmVudExldmVsIC0gMV07XG5cbiAgICAgICAgICAgIC8vIOe8qeWwj+W5tuaooeeziuWkhOeQhu+8iOeugOWNleeahDJ4MuWMuuWfn+W5s+Wdh++8iVxuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBuZXdIZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgbmV3V2lkdGg7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICAvLyDorqHnrpfmupDnurnnkIbkuK3nmoTlr7nlupTljLrln59cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3JjWCA9IE1hdGgubWluKHggKiAyLCBzb3VyY2VMZXZlbC53aWR0aCAtIDEpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzcmNZID0gTWF0aC5taW4oeSAqIDIsIHNvdXJjZUxldmVsLmhlaWdodCAtIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOWPljJ4MuWMuuWfn+eahOWbm+S4quWDj+e0oFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaXhlbHMgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFBpeGVsRnJvbUxldmVsKHNvdXJjZUxldmVsLCBzcmNYLCBzcmNZKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGl4ZWxGcm9tTGV2ZWwoc291cmNlTGV2ZWwsIE1hdGgubWluKHNyY1ggKyAxLCBzb3VyY2VMZXZlbC53aWR0aCAtIDEpLCBzcmNZKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGl4ZWxGcm9tTGV2ZWwoc291cmNlTGV2ZWwsIHNyY1gsIE1hdGgubWluKHNyY1kgKyAxLCBzb3VyY2VMZXZlbC5oZWlnaHQgLSAxKSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldFBpeGVsRnJvbUxldmVsKHNvdXJjZUxldmVsLCBNYXRoLm1pbihzcmNYICsgMSwgc291cmNlTGV2ZWwud2lkdGggLSAxKSwgTWF0aC5taW4oc3JjWSArIDEsIHNvdXJjZUxldmVsLmhlaWdodCAtIDEpKVxuICAgICAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOiuoeeul+Wbm+S4quWDj+e0oOeahOW5s+Wdh+WAvFxuICAgICAgICAgICAgICAgICAgICBsZXQgciA9IDAsIGcgPSAwLCBiID0gMCwgYSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBwaXhlbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgKz0gcC5yO1xuICAgICAgICAgICAgICAgICAgICAgICAgZyArPSBwLmc7XG4gICAgICAgICAgICAgICAgICAgICAgICBiICs9IHAuYjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgKz0gcC5hO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgciA9IE1hdGgucm91bmQociAvIDQpO1xuICAgICAgICAgICAgICAgICAgICBnID0gTWF0aC5yb3VuZChnIC8gNCk7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBNYXRoLnJvdW5kKGIgLyA0KTtcbiAgICAgICAgICAgICAgICAgICAgYSA9IE1hdGgucm91bmQoYSAvIDQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOWGmeWFpeaWsE1pcG1hcOWxgue6p1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9ICh5ICogbmV3V2lkdGggKyB4KSAqIDQ7XG4gICAgICAgICAgICAgICAgICAgIG5ld0RhdGFbaW5kZXhdID0gcjtcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0YVtpbmRleCArIDFdID0gZztcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0YVtpbmRleCArIDJdID0gYjtcbiAgICAgICAgICAgICAgICAgICAgbmV3RGF0YVtpbmRleCArIDNdID0gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIOa3u+WKoOaWsOWxgue6p1xuICAgICAgICAgICAgdGhpcy5taXBtYXBMZXZlbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgd2lkdGg6IG5ld1dpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogbmV3SGVpZ2h0LFxuICAgICAgICAgICAgICAgIGRhdGE6IG5ld0RhdGFcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjdXJyZW50V2lkdGggPSBuZXdXaWR0aDtcbiAgICAgICAgICAgIGN1cnJlbnRIZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1pcG1hcENvdW50ID0gdGhpcy5taXBtYXBMZXZlbHMubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS7juaMh+Wumk1pcG1hcOWxgue6p+iOt+WPluWDj+e0oOminOiJsu+8iFJHQkHliIbph4/vvIlcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFBpeGVsRnJvbUxldmVsKGxldmVsOiBNaXBtYXBMZXZlbCwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiB7IHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGE6IG51bWJlciB9IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSAoeSAqIGxldmVsLndpZHRoICsgeCkgKiA0O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcjogbGV2ZWwuZGF0YVtpbmRleF0sXG4gICAgICAgICAgICBnOiBsZXZlbC5kYXRhW2luZGV4ICsgMV0sXG4gICAgICAgICAgICBiOiBsZXZlbC5kYXRhW2luZGV4ICsgMl0sXG4gICAgICAgICAgICBhOiBsZXZlbC5kYXRhW2luZGV4ICsgM11cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDorqHnrpfmiYDpnIDnmoRNaXBtYXDlsYLnuqdcbiAgICAgKiDln7rkuo7nurnnkIblnZDmoIflnKjlsY/luZXnqbrpl7TnmoTlj5jljJbnjofvvIjlr7zmlbDvvIlcbiAgICAgKi9cbiAgICBwcml2YXRlIGNhbGN1bGF0ZU1pcExldmVsKGR1X2R4OiBudW1iZXIsIGR2X2R4OiBudW1iZXIsIGR1X2R5OiBudW1iZXIsIGR2X2R5OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICAvLyDlpoLmnpzmsqHmnIlNaXBtYXDvvIznm7TmjqXov5Tlm54w57qnXG4gICAgICAgIGlmICh0aGlzLm1pcG1hcENvdW50IDw9IDEpIHJldHVybiAwO1xuXG4gICAgICAgIC8vIOiuoeeul+e6ueeQhuepuumXtOeahOWBj+WvvOaVsFxuICAgICAgICBjb25zdCBkeCA9IGR1X2R4ICogdGhpcy53aWR0aDtcbiAgICAgICAgY29uc3QgZHkgPSBkdl9keCAqIHRoaXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBkeiA9IGR1X2R5ICogdGhpcy53aWR0aDtcbiAgICAgICAgY29uc3QgZHcgPSBkdl9keSAqIHRoaXMuaGVpZ2h0O1xuXG4gICAgICAgIC8vIOiuoeeul+e6ueeQhuWdkOagh+WPmOWMlueahOW5heW6plxuICAgICAgICBjb25zdCBsZW5TcSA9IGR4ICogZHggKyBkeSAqIGR5ICsgZHogKiBkeiArIGR3ICogZHc7XG4gICAgICAgIGxldCBsZXZlbCA9IDAuNSAqIE1hdGgubG9nMihsZW5TcSk7XG5cbiAgICAgICAgLy8g5bqU55SoTWlwbWFw5YGP5beuXG4gICAgICAgIGxldmVsICs9IHRoaXMubWlwTWFwQmlhcztcblxuICAgICAgICAvLyDpmZDliLblnKjmnInmlYjlsYLnuqfojIPlm7TlhoVcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMubWlwbWFwQ291bnQgLSAxLCBsZXZlbCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiOt+WPluaMh+Wumk1pcG1hcOWxgue6p++8iOehruS/neacieaViO+8iVxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0TWlwbWFwTGV2ZWwobGV2ZWw6IG51bWJlcik6IE1pcG1hcExldmVsIHtcbiAgICAgICAgY29uc3QgY2xhbXBlZExldmVsID0gTWF0aC5tYXgoMCwgTWF0aC5taW4odGhpcy5taXBtYXBDb3VudCAtIDEsIGxldmVsKSk7XG4gICAgICAgIHJldHVybiB0aGlzLm1pcG1hcExldmVsc1tjbGFtcGVkTGV2ZWxdIHx8IHRoaXMubWlwbWFwTGV2ZWxzWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOS7jk1pcG1hcOWxgue6p+iOt+WPluiMg+WbtOWGheeahOWDj+e0oO+8iOmYsuatoui2iueVjO+8iVxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0Q2xhbXBlZFBpeGVsRnJvbU1pcChtaXA6IE1pcG1hcExldmVsLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IENvbG9yIHtcbiAgICAgICAgY29uc3QgY2xhbXBlZFggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihtaXAud2lkdGggLSAxLCB4KSk7XG4gICAgICAgIGNvbnN0IGNsYW1wZWRZID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obWlwLmhlaWdodCAtIDEsIHkpKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSAoY2xhbXBlZFkgKiBtaXAud2lkdGggKyBjbGFtcGVkWCkgKiA0O1xuXG4gICAgICAgIHJldHVybiBuZXcgQ29sb3IoXG4gICAgICAgICAgICBtaXAuZGF0YVtpbmRleF0gLyAyNTUsXG4gICAgICAgICAgICBtaXAuZGF0YVtpbmRleCArIDFdIC8gMjU1LFxuICAgICAgICAgICAgbWlwLmRhdGFbaW5kZXggKyAyXSAvIDI1NSxcbiAgICAgICAgICAgIG1pcC5kYXRhW2luZGV4ICsgM10gLyAyNTVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlsIZSR0JB5YiG6YeP5omT5YyF5Li6MzLkvY3mlbTmlbBcbiAgICAgKi9cbiAgICBwcml2YXRlIHBhY2tDb2xvcihyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyLCBhOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gciB8IChnIDw8IDgpIHwgKGIgPDwgMTYpIHwgKGEgPDwgMjQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIC8vIOa4heeQhk1pcG1hcOaVsOaNrlxuICAgICAgICB0aGlzLm1pcG1hcExldmVscyA9IFtdO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9NYXRoL0NvbG9yXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yMlwiO1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gXCIuL1RleHR1cmVcIjtcblxuZXhwb3J0IGNsYXNzIFRleHR1cmVDcmVhdG9yIHtcblxuICAgIC8qKlxuICAgICAqIOeUn+aIkOaji+ebmOe6ueeQhlxuICAgICAqIEBwYXJhbSB0aWxlU2l6ZSDmr4/kuKrmo4vnm5jmoLznmoTlpKflsI/vvIjlg4/ntKDvvIlcbiAgICAgKiBAcGFyYW0gY29sb3IxIOesrOS4gOenjeminOiJsu+8iOm7mOiupOeZveiJsu+8iVxuICAgICAqIEBwYXJhbSBjb2xvcjIg56ys5LqM56eN6aKc6Imy77yI6buY6K6k6buR6Imy77yJXG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBDaGVja2VyYm9hcmRUZXh0dXJlKFxuICAgICAgICB3aWR0aDogbnVtYmVyID0gNjQsXG4gICAgICAgIGhlaWdodDogbnVtYmVyID0gNjQsXG4gICAgICAgIHRpbGVTaXplOiBudW1iZXIgPSA4LFxuICAgICAgICBjb2xvcjE6IENvbG9yID0gQ29sb3IuV0hJVEUsXG4gICAgICAgIGNvbG9yMjogQ29sb3IgPSBDb2xvci5HUkFZXG4gICAgKTogVGV4dHVyZSB7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpO1xuXG4gICAgICAgIC8vIOWhq+WFheaji+ebmOagvFxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAvLyDorqHnrpflvZPliY3kvY3nva7lsZ7kuo7lk6rkuKrmo4vnm5jmoLxcbiAgICAgICAgICAgICAgICBjb25zdCB0aWxlWCA9IE1hdGguZmxvb3IoeCAvIHRpbGVTaXplKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWxlWSA9IE1hdGguZmxvb3IoeSAvIHRpbGVTaXplKTtcblxuICAgICAgICAgICAgICAgIC8vIOS6pOabv+mAieaLqeminOiJslxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gKHRpbGVYICsgdGlsZVkpICUgMiA9PT0gMCA/IGNvbG9yMSA6IGNvbG9yMjtcblxuICAgICAgICAgICAgICAgIC8vIOiuvue9ruWDj+e0oOminOiJslxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gKHkgKiB3aWR0aCArIHgpICogNDtcbiAgICAgICAgICAgICAgICBkYXRhW2luZGV4XSA9IGNvbG9yLnIgKiAyNTU7XG4gICAgICAgICAgICAgICAgZGF0YVtpbmRleCArIDFdID0gY29sb3IuZyAqIDI1NTtcbiAgICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgMl0gPSBjb2xvci5iICogMjU1O1xuICAgICAgICAgICAgICAgIGRhdGFbaW5kZXggKyAzXSA9IGNvbG9yLmEgKiAyNTU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0ZXh0dXJlLkxvYWRJbWFnZShkYXRhKTtcbiAgICAgICAgcmV0dXJuIHRleHR1cmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog55Sf5oiQ5Zmq5aOw57q555CGXG4gICAgICogQHBhcmFtIHdpZHRoIOe6ueeQhuWuveW6plxuICAgICAqIEBwYXJhbSBoZWlnaHQg57q555CG6auY5bqmXG4gICAgICogQHBhcmFtIHR5cGUg5Zmq5aOw57G75Z6L77yaJ3JhbmRvbSfvvIjpmo/mnLrlmarlo7DvvInjgIEncGVybGluJ++8iOafj+ael+WZquWjsO+8ieOAgSdmaWJyb3VzJ++8iOe6pOe7tOWZquWjsO+8iVxuICAgICAqIEBwYXJhbSBzY2FsZSDlmarlo7DnvKnmlL7mr5TkvovvvIjlgLzotorlsI/lmarlo7Dotorlr4bpm4bvvIlcbiAgICAgKiBAcGFyYW0gbW9ub2Nocm9tZSDmmK/lkKbnlJ/miJDljZXoibLlmarlo7DvvIjlkKbliJnkuLrlvanoibLvvIlcbiAgICAgKiBAcmV0dXJucyDnlJ/miJDnmoTlmarlo7DnurnnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIE5vaXNlVGV4dHVyZShcbiAgICAgICAgd2lkdGg6IG51bWJlciA9IDY0LFxuICAgICAgICBoZWlnaHQ6IG51bWJlciA9IDY0LFxuICAgICAgICB0eXBlOiAncmFuZG9tJyB8ICdwZXJsaW4nIHwgJ2ZpYnJvdXMnID0gJ3BlcmxpbicsXG4gICAgICAgIHNjYWxlOiBudW1iZXIgPSA0LFxuICAgICAgICBtb25vY2hyb21lOiBib29sZWFuID0gdHJ1ZVxuICAgICk6IFRleHR1cmUge1xuICAgICAgICAvLyDlj4LmlbDpqozor4HlkozovrnnlYzmo4Dmn6VcbiAgICAgICAgd2lkdGggPSBNYXRoLm1heCgxLCBNYXRoLm1pbigyMDQ4LCB3aWR0aCkpO1xuICAgICAgICBoZWlnaHQgPSBNYXRoLm1heCgxLCBNYXRoLm1pbigyMDQ4LCBoZWlnaHQpKTtcbiAgICAgICAgc2NhbGUgPSBNYXRoLm1heCgwLjEsIHNjYWxlKTtcblxuICAgICAgICBjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkod2lkdGggKiBoZWlnaHQgKiA0KTtcblxuICAgICAgICAvLyDmm7Tpq5jmlYjnmoTpmo/mnLrlmarlo7DnlJ/miJDlh73mlbDvvIjkvb/nlKjkvY3ov5DnrpfkvJjljJbvvIlcbiAgICAgICAgY29uc3QgZ2VuZXJhdGVSYW5kb21Ob2lzZSA9ICh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgICAgICAgICBsZXQgaGFzaCA9IHggPDwgMTIgXiB5O1xuICAgICAgICAgICAgaGFzaCA9IChoYXNoIF4gKGhhc2ggPj4gMTYpKSAqIDB4NDVkOWYzYjtcbiAgICAgICAgICAgIGhhc2ggPSAoaGFzaCBeIChoYXNoID4+IDEzKSkgKiAweDQ1ZDlmM2I7XG4gICAgICAgICAgICByZXR1cm4gKGhhc2ggJiAweDdmZmZmZmZmKSAvIDB4N2ZmZmZmZmY7IC8vIOebtOaOpeS9v+eUqOS9jei/kOeul+S7o+abv01hdGguYWJzXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8g5LyY5YyW55qE5o+S5YC85Ye95pWw77yI5L2/55So57yT5Yqo5Ye95pWw5o+Q6auY6KeG6KeJ6LSo6YeP77yJXG4gICAgICAgIGNvbnN0IGZhZGUgPSAodDogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0ICogdCAqIHQgKiAodCAqICh0ICogNiAtIDE1KSArIDEwKTsgLy8g5bmz5ruR55qE57yT5Yqo5Ye95pWwXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgaW50ZXJwb2xhdGUgPSAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHQ6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYSArIGZhZGUodCkgKiAoYiAtIGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIOmihOWFiOiuoeeul+maj+acuuWBj+enu++8iOmBv+WFjeavj+asoeeUn+aIkOWZquWjsOmDveWIm+W7uuaWsOWPmOmHj++8iVxuICAgICAgICBjb25zdCByYW5kb21PZmZzZXRYID0gTWF0aC5yYW5kb20oKSAqIDEwMDAwO1xuICAgICAgICBjb25zdCByYW5kb21PZmZzZXRZID0gTWF0aC5yYW5kb20oKSAqIDEwMDAwO1xuXG4gICAgICAgIC8vIOe8k+WtmDEvc2NhbGXlgLzvvIzpgb/lhY3ph43lpI3pmaTms5Xov5DnrpdcbiAgICAgICAgY29uc3QgaW52U2NhbGUgPSAxIC8gc2NhbGU7XG5cbiAgICAgICAgLy8g5LyY5YyW55qE5p+P5p6X5Zmq5aOw55Sf5oiQ77yI5YeP5bCR6YeN5aSN6K6h566X77yJXG4gICAgICAgIGNvbnN0IGdlbmVyYXRlUGVybGluTm9pc2UgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAgICAgICAgICAgLy8g5re75Yqg6ZqP5py65YGP56e777yM5L2/5q+P5qyh55Sf5oiQ55qE5Zmq5aOw5LiN5ZCMXG4gICAgICAgICAgICB4ICs9IHJhbmRvbU9mZnNldFg7XG4gICAgICAgICAgICB5ICs9IHJhbmRvbU9mZnNldFk7XG5cbiAgICAgICAgICAgIC8vIOS9v+eUqOe8k+WtmOeahGludlNjYWxl6L+b6KGM6K6h566XXG4gICAgICAgICAgICBjb25zdCB4R3JpZCA9IE1hdGguZmxvb3IoeCAqIGludlNjYWxlKTtcbiAgICAgICAgICAgIGNvbnN0IHlHcmlkID0gTWF0aC5mbG9vcih5ICogaW52U2NhbGUpO1xuICAgICAgICAgICAgY29uc3QgeEZyYWMgPSAoeCAqIGludlNjYWxlKSAtIHhHcmlkO1xuICAgICAgICAgICAgY29uc3QgeUZyYWMgPSAoeSAqIGludlNjYWxlKSAtIHlHcmlkO1xuXG4gICAgICAgICAgICAvLyDlm5vkuKrop5LnmoTpmo/mnLrlgLxcbiAgICAgICAgICAgIGNvbnN0IGMwMCA9IGdlbmVyYXRlUmFuZG9tTm9pc2UoeEdyaWQsIHlHcmlkKTtcbiAgICAgICAgICAgIGNvbnN0IGMxMCA9IGdlbmVyYXRlUmFuZG9tTm9pc2UoeEdyaWQgKyAxLCB5R3JpZCk7XG4gICAgICAgICAgICBjb25zdCBjMDEgPSBnZW5lcmF0ZVJhbmRvbU5vaXNlKHhHcmlkLCB5R3JpZCArIDEpO1xuICAgICAgICAgICAgY29uc3QgYzExID0gZ2VuZXJhdGVSYW5kb21Ob2lzZSh4R3JpZCArIDEsIHlHcmlkICsgMSk7XG5cbiAgICAgICAgICAgIC8vIOWPjOe6v+aAp+aPkuWAvFxuICAgICAgICAgICAgY29uc3QgeDEgPSBpbnRlcnBvbGF0ZShjMDAsIGMxMCwgeEZyYWMpO1xuICAgICAgICAgICAgY29uc3QgeDIgPSBpbnRlcnBvbGF0ZShjMDEsIGMxMSwgeEZyYWMpO1xuICAgICAgICAgICAgcmV0dXJuIGludGVycG9sYXRlKHgxLCB4MiwgeUZyYWMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIOe6pOe7tOWZquWjsOeUn+aIkO+8iOS9v+eUqOS4gOasoeafj+ael+WZquWjsOiuoeeul+e7k+aenO+8iVxuICAgICAgICBjb25zdCBnZW5lcmF0ZUZpYnJvdXNOb2lzZSA9ICh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgICAgICAgICAvLyDlh4/lsJHkuInop5Llh73mlbDorqHnrpfvvIzkvb/nlKjmm7TnroDljZXnmoTop5LluqborqHnrpdcbiAgICAgICAgICAgIGNvbnN0IGFuZ2xlID0gKE1hdGguc2luKHggKiBpbnZTY2FsZSkgKiBNYXRoLmNvcyh5ICogaW52U2NhbGUpKSAqIE1hdGguUEk7XG4gICAgICAgICAgICBjb25zdCBkeCA9IE1hdGguY29zKGFuZ2xlKSAqIHNjYWxlO1xuICAgICAgICAgICAgY29uc3QgZHkgPSBNYXRoLnNpbihhbmdsZSkgKiBzY2FsZTtcblxuICAgICAgICAgICAgLy8g6K6h566X5LiA5qyh5Z+656GA5Zmq5aOw5YC877yM6YG/5YWN6YeN5aSN6LCD55SoXG4gICAgICAgICAgICBjb25zdCBiYXNlTm9pc2UgPSBnZW5lcmF0ZVBlcmxpbk5vaXNlKHgsIHkpO1xuICAgICAgICAgICAgLy8g5L2/55So5Z+656GA5Zmq5aOw5YC85LiO5YGP56e75ZCO55qE5Zmq5aOw5YC85re35ZCIXG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVQZXJsaW5Ob2lzZSh4ICsgZHgsIHkgKyBkeSkgKiAwLjcgKyBiYXNlTm9pc2UgKiAwLjM7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8g5aGr5YWF57q555CG5pWw5o2u55qE5Li76KaB6YC76L6R77yI5LyY5YyW5YaF5a2Y6K6/6Zeu5qih5byP77yJXG4gICAgICAgIGNvbnN0IGdlbmVyYXRlTm9pc2VGb3JQaXhlbCA9ICh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdyYW5kb20nOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVSYW5kb21Ob2lzZSh4LCB5KTtcbiAgICAgICAgICAgICAgICBjYXNlICdmaWJyb3VzJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlRmlicm91c05vaXNlKHgsIHkpO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IC8vIHBlcmxpblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGVQZXJsaW5Ob2lzZSh4LCB5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyDkvJjljJbnmoTlvanoibLlmarlo7DnlJ/miJDlh73mlbDvvIjlh4/lsJHph43lpI3orqHnrpfvvIlcbiAgICAgICAgY29uc3QgZ2V0UkdCRnJvbU5vaXNlID0gKHZhbHVlOiBudW1iZXIpOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl0gPT4ge1xuICAgICAgICAgICAgLy8gSFNW6L2sUkdC55qE6auY5pWI5a6e546wXG4gICAgICAgICAgICBjb25zdCBodWUgPSAodmFsdWUgKiAzNjApICUgMzYwO1xuICAgICAgICAgICAgY29uc3Qgc2F0ID0gMC41ICsgdmFsdWUgKiAwLjU7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSAwLjMgKyB2YWx1ZSAqIDAuNztcblxuICAgICAgICAgICAgY29uc3QgYyA9IHZhbCAqIHNhdDtcbiAgICAgICAgICAgIGNvbnN0IHggPSBjICogKDEgLSBNYXRoLmFicygoaHVlIC8gNjApICUgMiAtIDEpKTtcbiAgICAgICAgICAgIGNvbnN0IG0gPSB2YWwgLSBjO1xuXG4gICAgICAgICAgICBsZXQgciA9IDAsIGcgPSAwLCBiID0gMDtcblxuICAgICAgICAgICAgaWYgKGh1ZSA8IDYwKSB7XG4gICAgICAgICAgICAgICAgW3IsIGcsIGJdID0gW2MsIHgsIDBdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChodWUgPCAxMjApIHtcbiAgICAgICAgICAgICAgICBbciwgZywgYl0gPSBbeCwgYywgMF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGh1ZSA8IDE4MCkge1xuICAgICAgICAgICAgICAgIFtyLCBnLCBiXSA9IFswLCBjLCB4XTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaHVlIDwgMjQwKSB7XG4gICAgICAgICAgICAgICAgW3IsIGcsIGJdID0gWzAsIHgsIGNdO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChodWUgPCAzMDApIHtcbiAgICAgICAgICAgICAgICBbciwgZywgYl0gPSBbeCwgMCwgY107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFtyLCBnLCBiXSA9IFtjLCAwLCB4XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFtyICsgbSwgZyArIG0sIGIgKyBtXTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyDkuLvopoHlvqrnjq/vvJrmjInooYzkuLvluo/loavlhYXnurnnkIbmlbDmja7vvIzmj5Dpq5jnvJPlrZjlkb3kuK3njodcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgY29uc3Qgcm93T2Zmc2V0ID0geSAqIHdpZHRoICogNDsgLy8g6aKE6K6h566X6KGM5YGP56e76YePXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAvLyDmoLnmja7lmarlo7DnsbvlnovnlJ/miJDlgLzvvIgwLTHojIPlm7TvvIlcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBnZW5lcmF0ZU5vaXNlRm9yUGl4ZWwoeCwgeSk7XG5cbiAgICAgICAgICAgICAgICAvLyDnoa7kv53lgLzlnKgwLTHojIPlm7TlhoXvvIjkvb/nlKjkuIDmrKFjbGFtcOaTjeS9nO+8iVxuICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgdmFsdWUpKTtcblxuICAgICAgICAgICAgICAgIGxldCByOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1vbm9jaHJvbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8g5Y2V6Imy5Zmq5aOw77yI54Gw5bqm77yJXG4gICAgICAgICAgICAgICAgICAgIHIgPSBnID0gYiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOW9qeiJsuWZquWjsO+8iOS9v+eUqOS8mOWMlueahEhTVui9rFJHQuWHveaVsO+8iVxuICAgICAgICAgICAgICAgICAgICBbciwgZywgYl0gPSBnZXRSR0JGcm9tTm9pc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIOWGmeWFpee6ueeQhuaVsOaNru+8iFJHQkHvvIlcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHJvd09mZnNldCArIHggKiA0O1xuICAgICAgICAgICAgICAgIGRhdGFbaW5kZXhdID0gciAqIDI1NTsgICAgICAgLy8g57qi6Imy6YCa6YGTXG4gICAgICAgICAgICAgICAgZGF0YVtpbmRleCArIDFdID0gZyAqIDI1NTsgICAvLyDnu7/oibLpgJrpgZNcbiAgICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgMl0gPSBiICogMjU1OyAgIC8vIOiTneiJsumAmumBk1xuICAgICAgICAgICAgICAgIGRhdGFbaW5kZXggKyAzXSA9IDI1NTsgICAgICAgLy8gYWxwaGHpgJrpgZPvvIjlrozlhajkuI3pgI/mmI7vvIlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRleHR1cmUuTG9hZEltYWdlKGRhdGEpO1xuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnlJ/miJDmuJDlj5jnurnnkIZcbiAgICAgKiBAcGFyYW0gd2lkdGgg57q555CG5a695bqmXG4gICAgICogQHBhcmFtIGhlaWdodCDnurnnkIbpq5jluqZcbiAgICAgKiBAcGFyYW0gdHlwZSDmuJDlj5jnsbvlnovvvJonbGluZWFyJ++8iOe6v+aAp++8ieOAgSdyYWRpYWwn77yI5b6E5ZCR77yJ44CBJ2FuZ3VsYXIn77yI6KeS5bqm77yJXG4gICAgICogQHBhcmFtIGNvbG9yU3RvcHMg6aKc6Imy5pat54K55pWw57uE77yM5qC85byP5aaCW3tvZmZzZXQ6IDAsIGNvbG9yOiAweGZmZmZmZn0sIHtvZmZzZXQ6IDEsIGNvbG9yOiAweDAwMDAwMH1dXG4gICAgICogQHBhcmFtIHN0YXJ0IOa4kOWPmOi1t+eCue+8iOe6v+aAp+a4kOWPmOacieaViO+8jOebuOWvueWdkOagh1swLDFd77yJXG4gICAgICogQHBhcmFtIGVuZCDmuJDlj5jnu4jngrnvvIjnur/mgKfmuJDlj5jmnInmlYjvvIznm7jlr7nlnZDmoIdbMCwxXe+8iVxuICAgICAqIEBwYXJhbSBjZW50ZXIg5riQ5Y+Y5Lit5b+D77yI5b6E5ZCRL+inkuW6pua4kOWPmOacieaViO+8jOebuOWvueWdkOagh1swLDFd77yJXG4gICAgICogQHBhcmFtIHJhZGl1cyDmuJDlj5jljYrlvoTvvIjlvoTlkJHmuJDlj5jmnInmlYjvvIznm7jlr7nlgLzvvIlcbiAgICAgKiBAcmV0dXJucyDnlJ/miJDnmoTmuJDlj5jnurnnkIZcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIEdyYWRpZW50VGV4dHVyZShcbiAgICAgICAgd2lkdGg6IG51bWJlciA9IDY0LFxuICAgICAgICBoZWlnaHQ6IG51bWJlciA9IDY0LFxuICAgICAgICB0eXBlOiAnbGluZWFyJyB8ICdyYWRpYWwnIHwgJ2FuZ3VsYXInID0gJ2xpbmVhcicsXG4gICAgICAgIGNvbG9yU3RvcHM6IEFycmF5PHsgb2Zmc2V0OiBudW1iZXIsIGNvbG9yOiBDb2xvciB9PiA9IFtcbiAgICAgICAgICAgIHsgb2Zmc2V0OiAwLCBjb2xvcjogQ29sb3IuV0hJVEUgfSxcbiAgICAgICAgICAgIHsgb2Zmc2V0OiAxLCBjb2xvcjogQ29sb3IuQkxBQ0sgfVxuICAgICAgICBdLFxuICAgICAgICBzdGFydDogVmVjdG9yMiA9IG5ldyBWZWN0b3IyKDAsIDAuNSksXG4gICAgICAgIGVuZDogVmVjdG9yMiA9IG5ldyBWZWN0b3IyKDEsIDAuNSksXG4gICAgICAgIGNlbnRlcjogVmVjdG9yMiA9IG5ldyBWZWN0b3IyKDAuNSwgMC41KSxcbiAgICAgICAgcmFkaXVzOiBudW1iZXIgPSAwLjVcbiAgICApOiBUZXh0dXJlIHtcbiAgICAgICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHdpZHRoICogaGVpZ2h0ICogNCk7XG5cbiAgICAgICAgLy8g56Gu5L+d6aKc6Imy5pat54K55oyJb2Zmc2V05o6S5bqPXG4gICAgICAgIGNvbG9yU3RvcHMuc29ydCgoYSwgYikgPT4gYS5vZmZzZXQgLSBiLm9mZnNldCk7XG5cbiAgICAgICAgLy8g5o+Q5Y+W6aKc6Imy6YCa6YGT5YC8XG4gICAgICAgIGNvbnN0IGdldENvbG9yQ2hhbm5lbHMgPSAoY29sb3I6IENvbG9yKSA9PiAoe1xuICAgICAgICAgICAgcjogY29sb3IucixcbiAgICAgICAgICAgIGc6IGNvbG9yLmcsXG4gICAgICAgICAgICBiOiBjb2xvci5iLFxuICAgICAgICAgICAgYTogY29sb3IuYSB8fCAxIC8vIOm7mOiupOS4uuS4jemAj+aYjlxuICAgICAgICB9KTtcblxuICAgICAgICAvLyDpopzoibLmj5LlgLzlh73mlbBcbiAgICAgICAgY29uc3QgaW50ZXJwb2xhdGVDb2xvciA9ICh0OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIC8vIOWkhOeQhui+ueeVjOaDheWGtVxuICAgICAgICAgICAgaWYgKHQgPD0gY29sb3JTdG9wc1swXS5vZmZzZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q29sb3JDaGFubmVscyhjb2xvclN0b3BzWzBdLmNvbG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0ID49IGNvbG9yU3RvcHNbY29sb3JTdG9wcy5sZW5ndGggLSAxXS5vZmZzZXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q29sb3JDaGFubmVscyhjb2xvclN0b3BzW2NvbG9yU3RvcHMubGVuZ3RoIC0gMV0uY29sb3IpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyDmib7liLDlvZPliY105omA5Zyo55qE6aKc6Imy5Yy66Ze0XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoY29sb3JTdG9wc1tpICsgMV0ub2Zmc2V0IDwgdCkge1xuICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBjb2xvclN0b3BzW2ldO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gY29sb3JTdG9wc1tpICsgMV07XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IGVuZC5vZmZzZXQgLSBzdGFydC5vZmZzZXQ7XG4gICAgICAgICAgICBjb25zdCByYXRpbyA9ICh0IC0gc3RhcnQub2Zmc2V0KSAvIHJhbmdlO1xuXG4gICAgICAgICAgICBjb25zdCBzdGFydENvbG9yID0gZ2V0Q29sb3JDaGFubmVscyhzdGFydC5jb2xvcik7XG4gICAgICAgICAgICBjb25zdCBlbmRDb2xvciA9IGdldENvbG9yQ2hhbm5lbHMoZW5kLmNvbG9yKTtcblxuICAgICAgICAgICAgLy8g57q/5oCn5o+S5YC85q+P5Liq6aKc6Imy6YCa6YGTXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHI6IHN0YXJ0Q29sb3IuciArIChlbmRDb2xvci5yIC0gc3RhcnRDb2xvci5yKSAqIHJhdGlvLFxuICAgICAgICAgICAgICAgIGc6IHN0YXJ0Q29sb3IuZyArIChlbmRDb2xvci5nIC0gc3RhcnRDb2xvci5nKSAqIHJhdGlvLFxuICAgICAgICAgICAgICAgIGI6IHN0YXJ0Q29sb3IuYiArIChlbmRDb2xvci5iIC0gc3RhcnRDb2xvci5iKSAqIHJhdGlvLFxuICAgICAgICAgICAgICAgIGE6IHN0YXJ0Q29sb3IuYSArIChlbmRDb2xvci5hIC0gc3RhcnRDb2xvci5hKSAqIHJhdGlvXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIOWhq+WFhee6ueeQhuaVsOaNrlxuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgICAgICAvLyDorqHnrpfnm7jlr7nlnZDmoIdbMCwxXVxuICAgICAgICAgICAgICAgIGNvbnN0IHUgPSB4IC8gKHdpZHRoIC0gMSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdiA9IHkgLyAoaGVpZ2h0IC0gMSk7XG4gICAgICAgICAgICAgICAgbGV0IHQgPSAwO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmVhcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDnur/mgKfmuJDlj5jvvJrorqHnrpfngrnliLDotbfngrnnmoTmipXlvbHplb/luqbkuI7mgLvplb/luqbnmoTmr5TkvotcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0VG9FbmQgPSBuZXcgVmVjdG9yMihlbmQueCAtIHN0YXJ0LngsIGVuZC55IC0gc3RhcnQueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGFydFRvUG9pbnQgPSBuZXcgVmVjdG9yMih1IC0gc3RhcnQueCwgdiAtIHN0YXJ0LnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoU3EgPSBzdGFydFRvRW5kLnggKiBzdGFydFRvRW5kLnggKyBzdGFydFRvRW5kLnkgKiBzdGFydFRvRW5kLnk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW5ndGhTcSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkb3QgPSBzdGFydFRvUG9pbnQueCAqIHN0YXJ0VG9FbmQueCArIHN0YXJ0VG9Qb2ludC55ICogc3RhcnRUb0VuZC55O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBkb3QgLyBsZW5ndGhTcSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAncmFkaWFsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOW+hOWQkea4kOWPmO+8muiuoeeul+eCueWIsOS4reW/g+eahOi3neemu+S4juWNiuW+hOeahOavlOS+i1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZHggPSB1IC0gY2VudGVyLng7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkeSA9IHYgLSBjZW50ZXIueTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBkaXN0YW5jZSAvIHJhZGl1cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnYW5ndWxhcic6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDop5LluqbmuJDlj5jvvJrorqHnrpfngrnnm7jlr7nkuo7kuK3lv4PnmoTop5LluqZcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbmdsZSA9IE1hdGguYXRhbjIodiAtIGNlbnRlci55LCB1IC0gY2VudGVyLngpICsgTWF0aC5QSTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSAoYW5nbGUgLyAoTWF0aC5QSSAqIDIpKSAlIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyDojrflj5bmj5LlgLzpopzoibLlubblhpnlhaXmlbDmja5cbiAgICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IGludGVycG9sYXRlQ29sb3IodCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSAoeSAqIHdpZHRoICsgeCkgKiA0O1xuICAgICAgICAgICAgICAgIGRhdGFbaW5kZXhdID0gY29sb3IuciAqIDI1NTtcbiAgICAgICAgICAgICAgICBkYXRhW2luZGV4ICsgMV0gPSBjb2xvci5nICogMjU1O1xuICAgICAgICAgICAgICAgIGRhdGFbaW5kZXggKyAyXSA9IGNvbG9yLmIgKiAyNTU7XG4gICAgICAgICAgICAgICAgZGF0YVtpbmRleCArIDNdID0gY29sb3IuYSAqIDI1NTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRleHR1cmUuTG9hZEltYWdlKGRhdGEpO1xuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQm94Q29sbGlkZXIgfSBmcm9tIFwiLi4vQ29tcG9uZW50L0JveENvbGxpZGVyXCI7XG5pbXBvcnQgeyBDYW1lcmEsIENhbWVyYUNsZWFyRmxhZ3MgfSBmcm9tIFwiLi4vQ29tcG9uZW50L0NhbWVyYVwiO1xuaW1wb3J0IHsgQ2FtZXJhQ29udHJvbGxlciB9IGZyb20gXCIuLi9Db21wb25lbnQvVGVzdENvbXAvQ2FtZXJhQ29udHJvbGxlclwiO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSBcIi4uL0NvbXBvbmVudC9Db21wb25lbnRcIjtcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4uL0NvbXBvbmVudC9MaWdodFwiO1xuaW1wb3J0IHsgTWVzaFJlbmRlcmVyIH0gZnJvbSBcIi4uL0NvbXBvbmVudC9NZXNoUmVuZGVyZXJcIjtcbmltcG9ydCB7IFJheVRlc3QgfSBmcm9tIFwiLi4vQ29tcG9uZW50L1Rlc3RDb21wL1JheVRlc3RcIjtcbmltcG9ydCB7IFJpZ2lkYm9keSB9IGZyb20gXCIuLi9Db21wb25lbnQvUmlnaWRCb2R5XCI7XG5pbXBvcnQgeyBTcGhlcmVDb2xsaWRlciB9IGZyb20gXCIuLi9Db21wb25lbnQvU3BoZXJlQ29sbGlkZXJcIjtcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gXCIuLi9Db3JlL0VuZ2luZVwiO1xuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gXCIuLi9Db3JlL0dhbWVPYmplY3RcIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL01hdGgvQ29sb3JcIjtcbmltcG9ydCB7IFF1YXRlcm5pb24gfSBmcm9tIFwiLi4vTWF0aC9RdWF0ZXJuaW9uXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjRcIjtcbmltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSBcIi4uL1Jlc291cmNlcy9NYXRlcmlhbFwiO1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gXCIuLi9SZXNvdXJjZXMvTWVzaFwiO1xuaW1wb3J0IHsgUmVzb3VyY2VzIH0gZnJvbSBcIi4uL1Jlc291cmNlcy9SZXNvdXJjZXNcIjtcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwiLi4vUmVzb3VyY2VzL1RleHR1cmVcIjtcbmltcG9ydCB7IExpdFNoYWRlciB9IGZyb20gXCIuLi9TaGFkZXIvTGl0U2hhZGVyXCI7XG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gXCIuL1NjZW5lXCI7XG5pbXBvcnQgeyBPYmpSb3RhdGUgfSBmcm9tIFwiLi4vQ29tcG9uZW50L1Rlc3RDb21wL09ialJvdGF0ZVwiO1xuaW1wb3J0IHsgT2JqQXV0b1JvdGF0ZSB9IGZyb20gXCIuLi9Db21wb25lbnQvVGVzdENvbXAvT2JqQXV0b1JvdGF0ZVwiO1xuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSBcIi4uL1NoYWRlci9TaGFkZXJcIjtcbmltcG9ydCB7IFRvb25TaGFkZXIgfSBmcm9tIFwiLi4vU2hhZGVyL1Rvb25TaGFkZXJcIjtcbmltcG9ydCB7IEN1YmVNYXAgfSBmcm9tIFwiLi4vUmVzb3VyY2VzL0N1YmVNYXBcIjtcbmltcG9ydCB7IFJlbmRlclNldHRpbmdzIH0gZnJvbSBcIi4uL0NvcmUvU2V0dGluZ1wiO1xuaW1wb3J0IHsgU2Nyb2xsVGV4dHVyZSB9IGZyb20gXCIuLi9Db21wb25lbnQvVGVzdENvbXAvU2Nyb2xsVGV4dHVyZVwiO1xuaW1wb3J0IHsgVGV4dHVyZUNyZWF0b3IgfSBmcm9tIFwiLi4vUmVzb3VyY2VzL1RleHR1cmVDcmVhdG9yXCI7XG5pbXBvcnQgeyBNZXNoQ3JlYXRvciB9IGZyb20gXCIuLi9SZXNvdXJjZXMvTWVzaENyZWF0b3JcIjtcbmltcG9ydCB7IFBCUlNoYWRlciB9IGZyb20gXCIuLi9TaGFkZXIvUEJSU2hhZGVyXCI7XG5pbXBvcnQgeyBBbHBoYUN1dE9mZlNoYWRlciB9IGZyb20gXCIuLi9TaGFkZXIvQWxwaGFDdXRPZmZTaGFkZXJcIjtcbmltcG9ydCB7IEJpbGxCb2FyZCB9IGZyb20gXCIuLi9Db21wb25lbnQvVGVzdENvbXAvQmlsbEJvYXJkXCI7XG5pbXBvcnQgeyBWZXJ0ZXhBdHRyaWJ1dGVzIH0gZnJvbSBcIi4uL1JlbmRlcmVyL1JlbmRlcmVyRGVmaW5lXCI7XG5pbXBvcnQgeyBTdGVuY2lsT3V0bGluZVNoYWRlciB9IGZyb20gXCIuLi9TaGFkZXIvU3RlbmNpbE91dGxpbmVTaGFkZXJcIjtcbmltcG9ydCB7IFRyYW5zcGFyZW50U2hhZGVyIH0gZnJvbSBcIi4uL1NoYWRlci9UcmFuc3BhcmVudFNoYWRlclwiO1xuaW1wb3J0IHsgU2NyZWVuRG9vclNoYWRlciB9IGZyb20gXCIuLi9TaGFkZXIvU2NyZWVuRG9vclNoYWRlclwiO1xuXG5leHBvcnQgY29uc3QgTWFpblNjZW5lID0ge1xuICAgIG5hbWU6IFwiTWFpblNjZW5lXCIsXG4gICAgaW5pdGZ1bjogYXN5bmMgKHNjZW5lOiBTY2VuZSkgPT4ge1xuICAgICAgICAvLyDnm7jmnLpcbiAgICAgICAgY29uc3QgY2FtZXJhT2JqID0gYXdhaXQgY3JlYXRlT2JqKHtcbiAgICAgICAgICAgIG5hbWU6IFwiY2FtZXJhXCIsXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMCwgMCwgLTUpLFxuICAgICAgICAgICAgcm90YXRpb246IG5ldyBRdWF0ZXJuaW9uKG5ldyBWZWN0b3IzKDAsIDAsIDApKSxcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtDYW1lcmEsIENhbWVyYUNvbnRyb2xsZXJdXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBjb25zdCBjYW1lcmEgPSBjYW1lcmFPYmouZ2V0Q29tcG9uZW50KENhbWVyYSk7XG4gICAgICAgIC8vIGlmIChjYW1lcmEpIHtcbiAgICAgICAgLy8gICAgIGNhbWVyYS52aWV3UG9ydCA9IG5ldyBWZWN0b3I0KDAsIDAsIDAuNSwgMSk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyAvLyDnm7jmnLoyXG4gICAgICAgIC8vIGNvbnN0IGNhbWVyYTJPYmogPSBhd2FpdCBjcmVhdGVPYmooe1xuICAgICAgICAvLyAgICAgbmFtZTogXCJjYW1lcmFcIixcbiAgICAgICAgLy8gICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLCAwLCA1KSxcbiAgICAgICAgLy8gICAgIHJvdGF0aW9uOiBuZXcgUXVhdGVybmlvbihuZXcgVmVjdG9yMygwLCAxODAsIDApKSxcbiAgICAgICAgLy8gICAgIGNvbXBvbmVudHM6IFtDYW1lcmFdXG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyBjb25zdCBjYW1lcmEyID0gY2FtZXJhMk9iai5nZXRDb21wb25lbnQoQ2FtZXJhKTtcbiAgICAgICAgLy8gaWYgKGNhbWVyYTIpIHtcbiAgICAgICAgLy8gICAgIGNhbWVyYTIudmlld1BvcnQgPSBuZXcgVmVjdG9yNCgwLjUsIDAsIDAuNSwgMC41KTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIOeBr1xuICAgICAgICBjb25zdCBsaWdodE9iaiA9IGF3YWl0IGNyZWF0ZU9iaih7XG4gICAgICAgICAgICBuYW1lOiBcImxpZ2h0XCIsXG4gICAgICAgICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMCwgMywgMCksXG4gICAgICAgICAgICByb3RhdGlvbjogbmV3IFF1YXRlcm5pb24obmV3IFZlY3RvcjMoMCwgMCwgMCkpLFxuICAgICAgICAgICAgY29tcG9uZW50czogW0xpZ2h0LCBPYmpSb3RhdGVdXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBsaWdodCA9IGxpZ2h0T2JqLmdldENvbXBvbmVudChMaWdodCk7XG4gICAgICAgIGlmIChsaWdodCkge1xuICAgICAgICAgICAgTGlnaHQuc3VuTGlnaHQgPSBsaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOWkqeepuuebklxuICAgICAgICBjb25zdCBQT1NJVElWRV9YID0gYXdhaXQgUmVzb3VyY2VzLmxvYWRBc3luYzxUZXh0dXJlPihcInJlc291cmNlcy9za3lib3gvUE9TSVRJVkVfWC5qcGdcIik7XG4gICAgICAgIGNvbnN0IE5FR0FUSVZFX1ggPSBhd2FpdCBSZXNvdXJjZXMubG9hZEFzeW5jPFRleHR1cmU+KFwicmVzb3VyY2VzL3NreWJveC9ORUdBVElWRV9YLmpwZ1wiKTtcbiAgICAgICAgY29uc3QgUE9TSVRJVkVfWSA9IGF3YWl0IFJlc291cmNlcy5sb2FkQXN5bmM8VGV4dHVyZT4oXCJyZXNvdXJjZXMvc2t5Ym94L1BPU0lUSVZFX1kuanBnXCIpO1xuICAgICAgICBjb25zdCBORUdBVElWRV9ZID0gYXdhaXQgUmVzb3VyY2VzLmxvYWRBc3luYzxUZXh0dXJlPihcInJlc291cmNlcy9za3lib3gvTkVHQVRJVkVfWS5qcGdcIik7XG4gICAgICAgIGNvbnN0IFBPU0lUSVZFX1ogPSBhd2FpdCBSZXNvdXJjZXMubG9hZEFzeW5jPFRleHR1cmU+KFwicmVzb3VyY2VzL3NreWJveC9QT1NJVElWRV9aLmpwZ1wiKTtcbiAgICAgICAgY29uc3QgTkVHQVRJVkVfWiA9IGF3YWl0IFJlc291cmNlcy5sb2FkQXN5bmM8VGV4dHVyZT4oXCJyZXNvdXJjZXMvc2t5Ym94L05FR0FUSVZFX1ouanBnXCIpO1xuICAgICAgICBpZiAoUE9TSVRJVkVfWCAmJiBORUdBVElWRV9YICYmIFBPU0lUSVZFX1kgJiYgTkVHQVRJVkVfWSAmJiBQT1NJVElWRV9aICYmIE5FR0FUSVZFX1opIHtcbiAgICAgICAgICAgIFJlbmRlclNldHRpbmdzLnNreWJveCA9IG5ldyBDdWJlTWFwKFxuICAgICAgICAgICAgICAgIFBPU0lUSVZFX1gsXG4gICAgICAgICAgICAgICAgTkVHQVRJVkVfWCxcbiAgICAgICAgICAgICAgICBQT1NJVElWRV9ZLFxuICAgICAgICAgICAgICAgIE5FR0FUSVZFX1ksXG4gICAgICAgICAgICAgICAgUE9TSVRJVkVfWixcbiAgICAgICAgICAgICAgICBORUdBVElWRV9aLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnN0IHRlc3RPYmogPSBhd2FpdCBjcmVhdGVPYmooe1xuICAgICAgICAvLyAgICAgbmFtZTogXCJvYmpcIixcbiAgICAgICAgLy8gICAgIG1vZGVsUGF0aDogJ3Jlc291cmNlcy9hc3NldHMvbWVzaGVzL3N1emFubmVfbG93Lm9iaicsXG4gICAgICAgIC8vICAgICBjb21wb25lbnRzOiBbT2JqUm90YXRlLCBTY3JvbGxUZXh0dXJlXSxcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgLy8gY29uc3QgbGVlT2JqID0gYXdhaXQgY3JlYXRlT2JqKHtcbiAgICAgICAgLy8gICAgIG5hbWU6IFwibGVlXCIsXG4gICAgICAgIC8vICAgICBtb2RlbDogJ3Jlc291cmNlcy9hc3NldHMvbWVzaGVzL2xlZS5vYmonLFxuICAgICAgICAvLyAgICAgLy8gc2hhZGVyOiBQQlJTaGFkZXIsXG4gICAgICAgIC8vICAgICBzaGFkZXJQcm9wOiB7XG4gICAgICAgIC8vICAgICAgICAgbWFpblRleHR1cmU6IFwicmVzb3VyY2VzL2Fzc2V0cy90ZXh0dXJlcy90ZXh0dXJlL2xlZS5qcGdcIixcbiAgICAgICAgLy8gICAgICAgICAvLyBub3JtYWxUZXh0dXJlOiBcInJlc291cmNlcy9hc3NldHMvdGV4dHVyZXMvdGV4dHVyZS9sZWVfbm9ybWFsLmpwZ1wiLFxuICAgICAgICAvLyAgICAgICAgIC8vIGdsb3NzOiAxMDAwXG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIGNvbnN0IGZlbWFsZTAyT2JqID0gYXdhaXQgY3JlYXRlT2JqKHtcbiAgICAgICAgLy8gICAgIG5hbWU6IFwiZmVtYWxlMDJcIixcbiAgICAgICAgLy8gICAgIG1vZGVsUGF0aDogJ3Jlc291cmNlcy9mZW1hbGUwMi9mZW1hbGUwMi5vYmonLFxuICAgICAgICAvLyAgICAgbW9kZWxTY2FsZTogMC4wMSxcbiAgICAgICAgLy8gICAgIHRleHR1cmU6IFRleHR1cmUuQ2hlY2tlcmJvYXJkVGV4dHVyZSgpLFxuICAgICAgICAvLyAgICAgY29tcG9uZW50czogW09ialJvdGF0ZV0sXG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIC8vIGNvbnN0IGdyb3VuZE9iaiA9IGF3YWl0IGNyZWF0ZU9iaih7XG4gICAgICAgIC8vICAgICBuYW1lOiBcImdyb3VuZFwiLFxuICAgICAgICAvLyAgICAgc2NhbGU6IFZlY3RvcjMuT05FLm11bHRpcGx5U2NhbGFyKDEuNSksXG4gICAgICAgIC8vICAgICByb3RhdGlvbjogUXVhdGVybmlvbi5hbmdsZUF4aXMoLTkwLCBWZWN0b3IzLlJJR0hUKSxcbiAgICAgICAgLy8gICAgIG1vZGVsOiBcInJlc291cmNlcy9wYW5lbC5vYmpcIixcbiAgICAgICAgLy8gICAgIC8vIG1vZGVsOiBNZXNoQ3JlYXRvci5jcmVhdGVQYW5lbCgpLFxuICAgICAgICAvLyAgICAgc2hhZGVyOiBBbHBoYUN1dE9mZlNoYWRlcixcbiAgICAgICAgLy8gICAgIHNoYWRlclByb3A6IHtcbiAgICAgICAgLy8gICAgICAgICAvLyBtYWluVGV4dHVyZTogXCJyZXNvdXJjZXMvYXNzZXRzL3RleHR1cmVzL3RleHR1cmUvYW5jaWVudGJyaWNrX2FsYmVkby5qcGdcIixcbiAgICAgICAgLy8gICAgICAgICBtYWluVGV4dHVyZTogXCJyZXNvdXJjZXMvdGV4dHVyZS90cmFuc3BhcmVudF90ZXh0dXJlLnBuZ1wiLFxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KTtcbiAgICAgICAgLy8gY29uc3QgZ3JvdW5kT2JqID0gcGFuZWxPYmouZ2V0Q29tcG9uZW50KFJpZ2lkYm9keSk7XG4gICAgICAgIC8vIGlmIChncm91bmRPYmopIGdyb3VuZE9iai5pc0tpbmVtYXRpYyA9IHRydWU7XG5cbiAgICAgICAgLy8g6ZqP5py655Sf5oiQMjDpopfmoJHvvIzlroPku6znmoTkvY3nva7lnKhbLTUsIDVd55qE5rC05bmz6IyD5Zu05YaF6ZqP5py65YiG5biDXG4gICAgICAgIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgMzA7IGkrKykge1xuICAgICAgICAvLyAgICAgY29uc3QgcmFuZG9tWCA9IChNYXRoLnJhbmRvbSgpICogNSkgLSAyLjU7XG4gICAgICAgIC8vICAgICBjb25zdCByYW5kb21aID0gKE1hdGgucmFuZG9tKCkgKiA1KSAtIDIuNTtcbiAgICAgICAgLy8gICAgIGNvbnN0IHJhbmRvbUggPSAxICsgKE1hdGgucmFuZG9tKCkgKiAwLjQpIC0gMC4yO1xuICAgICAgICAvLyAgICAgY29uc3QgcGFuZWxPYmogPSBhd2FpdCBjcmVhdGVPYmooe1xuICAgICAgICAvLyAgICAgICAgIG5hbWU6IGB0cmVlXyR7aX1gLFxuICAgICAgICAvLyAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMyhyYW5kb21YLCAwLjUgKiByYW5kb21ILCByYW5kb21aKSxcbiAgICAgICAgLy8gICAgICAgICBzY2FsZTogVmVjdG9yMy5PTkUubXVsdGlwbHlTY2FsYXIocmFuZG9tSCksXG4gICAgICAgIC8vICAgICAgICAgbW9kZWw6IE1lc2hDcmVhdG9yLmNyZWF0ZVF1YWQoKSxcbiAgICAgICAgLy8gICAgICAgICBjb21wb25lbnRzOiBbQmlsbEJvYXJkXSxcbiAgICAgICAgLy8gICAgICAgICBzaGFkZXI6IEFscGhhQ3V0T2ZmU2hhZGVyLFxuICAgICAgICAvLyAgICAgICAgIHNoYWRlclByb3A6IHtcbiAgICAgICAgLy8gICAgICAgICAgICAgbWFpblRleHR1cmU6IFwicmVzb3VyY2VzL3RleHR1cmUvdHJlZS5wbmdcIixcbiAgICAgICAgLy8gICAgICAgICB9XG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIC8vIOW3plxuICAgICAgICAvLyBhd2FpdCBjcmVhdGVPYmooe1xuICAgICAgICAvLyAgICAgbmFtZTogXCJjdWJlXCIsXG4gICAgICAgIC8vICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoLTIsIDAsIDApLFxuICAgICAgICAvLyAgICAgbW9kZWw6IFwicmVzb3VyY2VzL2N1YmUub2JqXCIsXG4gICAgICAgIC8vICAgICBzaGFkZXJQcm9wOiB7XG4gICAgICAgIC8vICAgICAgICAgYmFzZUNvbG9yOiBDb2xvci5ZRUxMT1csXG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyAvLyDlj7NcbiAgICAgICAgLy8gYXdhaXQgY3JlYXRlT2JqKHtcbiAgICAgICAgLy8gICAgIG5hbWU6IFwiY3ViZVwiLFxuICAgICAgICAvLyAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDIsIDAsIDApLFxuICAgICAgICAvLyAgICAgbW9kZWw6IFwicmVzb3VyY2VzL2N1YmUub2JqXCIsXG4gICAgICAgIC8vICAgICBzaGFkZXJQcm9wOiB7XG4gICAgICAgIC8vICAgICAgICAgYmFzZUNvbG9yOiBDb2xvci5SRUQsXG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pO1xuICAgICAgICAvLyAvLyDliY1cbiAgICAgICAgLy8gYXdhaXQgY3JlYXRlT2JqKHtcbiAgICAgICAgLy8gICAgIG5hbWU6IFwiY3ViZVwiLFxuICAgICAgICAvLyAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDAsIDAsIDIpLFxuICAgICAgICAvLyAgICAgbW9kZWw6IFwicmVzb3VyY2VzL2N1YmUub2JqXCIsXG4gICAgICAgIC8vICAgICBzaGFkZXJQcm9wOiB7XG4gICAgICAgIC8vICAgICAgICAgYmFzZUNvbG9yOiBDb2xvci5HUkVFTixcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIC8vIOWQjlxuICAgICAgICAvLyBhd2FpdCBjcmVhdGVPYmooe1xuICAgICAgICAvLyAgICAgbmFtZTogXCJjdWJlXCIsXG4gICAgICAgIC8vICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMCwgMCwgLTIpLFxuICAgICAgICAvLyAgICAgbW9kZWw6IFwicmVzb3VyY2VzL2N1YmUub2JqXCIsXG4gICAgICAgIC8vICAgICBzaGFkZXJQcm9wOiB7XG4gICAgICAgIC8vICAgICAgICAgYmFzZUNvbG9yOiBDb2xvci5CTFVFLFxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KTtcblxuICAgICAgICBjb25zdCBzcGhlcmVzT2JqID0gYXdhaXQgY3JlYXRlT2JqKHtcbiAgICAgICAgICAgIG5hbWU6IFwic3BoZXJlc1wiLFxuICAgICAgICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDAsIDEuNSwgMS41KSxcbiAgICAgICAgICAgIG1vZGVsOiBcInJlc291cmNlcy9zcGhlcmUub2JqXCIsXG4gICAgICAgICAgICAvLyBjb21wb25lbnRzOiBbUmlnaWRib2R5LCBTcGhlcmVDb2xsaWRlcl1cbiAgICAgICAgICAgIGNvbXBvbmVudHM6IFtPYmpBdXRvUm90YXRlXSxcbiAgICAgICAgICAgIC8vIHNoYWRlcjogU2NyZWVuRG9vclNoYWRlcixcbiAgICAgICAgICAgIHNoYWRlclByb3A6IHtcbiAgICAgICAgICAgICAgICBtYWluVGV4dHVyZTogVGV4dHVyZUNyZWF0b3IuQ2hlY2tlcmJvYXJkVGV4dHVyZSgpLFxuICAgICAgICAgICAgICAgIC8vIG1haW5UZXh0dXJlOiBcInJlc291cmNlcy90ZXh0dXJlL0JyaWNrX0RpZmZ1c2UuanBnXCIsXG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsVGV4dHVyZTogXCJyZXNvdXJjZXMvdGV4dHVyZS9Ccmlja19Ob3JtYWwuanBnXCIsXG4gICAgICAgICAgICAgICAgLy8gbWFpblRleHR1cmU6IFwicmVzb3VyY2VzL3RleHR1cmUvUm9hZF9EaWZmdXNlLmpwZ1wiLFxuICAgICAgICAgICAgICAgIC8vIG5vcm1hbFRleHR1cmU6IFwicmVzb3VyY2VzL3RleHR1cmUvUm9hZF9Ob3JtYWwuanBnXCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGF3YWl0IGNyZWF0ZU9iaih7XG4gICAgICAgICAgICBuYW1lOiBcImN1YmVcIixcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygtMiwgMCwgMCksXG4gICAgICAgICAgICBtb2RlbDogXCJyZXNvdXJjZXMvY3ViZS5vYmpcIixcbiAgICAgICAgICAgIHNoYWRlcjogVHJhbnNwYXJlbnRTaGFkZXIsXG4gICAgICAgICAgICBzaGFkZXJQcm9wOiB7XG4gICAgICAgICAgICAgICAgbWFpblRleHR1cmU6IFwicmVzb3VyY2VzL3RleHR1cmUvdHJhbnNwYXJlbnRfdGV4dHVyZS5wbmdcIixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY29uc3QgYnVubnlPYmogPSBhd2FpdCBjcmVhdGVPYmooe1xuICAgICAgICAvLyAgICAgbmFtZTogXCJidW5ueVwiLFxuICAgICAgICAvLyAgICAgbW9kZWw6ICdyZXNvdXJjZXMvbW9kZWxzL2J1bm55Mi5vYmonLFxuICAgICAgICAvLyAgICAgbW9kZWxTY2FsZTogMTAsXG4gICAgICAgIC8vICAgICBzaGFkZXJQcm9wOiB7XG4gICAgICAgIC8vICAgICAgICAgbWFpblRleHR1cmU6IFRleHR1cmVDcmVhdG9yLkNoZWNrZXJib2FyZFRleHR1cmUoKSxcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgY29uc3QgdG91a3VpT2JqID0gYXdhaXQgY3JlYXRlT2JqKHtcbiAgICAgICAgICAgIG5hbWU6IFwidG91a3VpXCIsXG4gICAgICAgICAgICBtb2RlbDogJ3Jlc291cmNlcy90b3VrdWkvQ29uc3RydWN0aW9uX0hlbG1ldC5vYmonLFxuICAgICAgICAgICAgbW9kZWxTY2FsZTogMC4xLFxuICAgICAgICAgICAgY29tcG9uZW50czogW09ialJvdGF0ZV0sXG4gICAgICAgICAgICBzaGFkZXI6IFN0ZW5jaWxPdXRsaW5lU2hhZGVyLFxuICAgICAgICAgICAgc2hhZGVyUHJvcDoge1xuICAgICAgICAgICAgICAgIG1haW5UZXh0dXJlOiBcInJlc291cmNlcy90b3VrdWkvQ29uc3RydWN0aW9uX0hlbG1ldF9NX0hlbG1ldF9CYXNlQ29sb3IucG5nXCIsXG4gICAgICAgICAgICAgICAgLy8gbm9ybWFsVGV4dHVyZTogXCJyZXNvdXJjZXMvdG91a3VpL0NvbnN0cnVjdGlvbl9IZWxtZXRfTV9IZWxtZXRfTm9ybWFsLnBuZ1wiLFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gc3BoZXJlc09iai50cmFuc2Zvcm0uc2V0UGFyZW50KHRvdWt1aU9iai50cmFuc2Zvcm0pO1xuICAgIH1cbn1cblxuaW50ZXJmYWNlIENyZWF0ZU9iakNvbmZpZyB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHBvc2l0aW9uPzogVmVjdG9yMztcbiAgICByb3RhdGlvbj86IFF1YXRlcm5pb247XG4gICAgc2NhbGU/OiBWZWN0b3IzO1xuICAgIG1vZGVsPzogc3RyaW5nIHwgTWVzaDtcbiAgICBtb2RlbFNjYWxlPzogbnVtYmVyO1xuICAgIHNoYWRlcj86IG5ldyAoLi4uYXJnczogYW55W10pID0+IFNoYWRlcjtcbiAgICBzaGFkZXJQcm9wPzogVmVydGV4QXR0cmlidXRlcztcbiAgICBjb21wb25lbnRzPzogKG5ldyAoZ2FtZU9iamVjdDogR2FtZU9iamVjdCkgPT4gQ29tcG9uZW50KVtdO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVPYmooY29uZmlnOiBDcmVhdGVPYmpDb25maWcpOiBQcm9taXNlPEdhbWVPYmplY3Q+IHtcbiAgICBjb25zdCBvYmogPSBuZXcgR2FtZU9iamVjdChjb25maWcubmFtZSk7XG4gICAgb2JqLnRyYW5zZm9ybS5wb3NpdGlvbiA9IGNvbmZpZy5wb3NpdGlvbiB8fCBWZWN0b3IzLlpFUk87XG4gICAgb2JqLnRyYW5zZm9ybS5yb3RhdGlvbiA9IGNvbmZpZy5yb3RhdGlvbiB8fCBRdWF0ZXJuaW9uLmlkZW50aXR5O1xuICAgIG9iai50cmFuc2Zvcm0uc2NhbGUgPSBjb25maWcuc2NhbGUgfHwgVmVjdG9yMy5PTkU7XG5cbiAgICBpZiAoY29uZmlnLm1vZGVsKSB7XG4gICAgICAgIGNvbnN0IG1vZGVsID0gdHlwZW9mIGNvbmZpZy5tb2RlbCA9PT0gJ3N0cmluZycgPyBhd2FpdCBSZXNvdXJjZXMubG9hZEFzeW5jPE1lc2g+KGNvbmZpZy5tb2RlbCkgOiBjb25maWcubW9kZWw7XG4gICAgICAgIGlmIChjb25maWcubW9kZWxTY2FsZSkgbW9kZWw/LnNjYWxlKGNvbmZpZy5tb2RlbFNjYWxlKTtcblxuICAgICAgICBjb25zdCByZW5kZXJlciA9IG9iai5hZGRDb21wb25lbnQoTWVzaFJlbmRlcmVyKTtcbiAgICAgICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICAgICAgICByZW5kZXJlci5tZXNoID0gbW9kZWw7XG4gICAgICAgICAgICBjb25zdCBtYXQgPSByZW5kZXJlci5tYXRlcmlhbDtcbiAgICAgICAgICAgIG1hdC5zaGFkZXIgPSBjb25maWcuc2hhZGVyID8gbmV3IGNvbmZpZy5zaGFkZXIoKSA6IG5ldyBMaXRTaGFkZXIoKTtcbiAgICAgICAgICAgIC8vIOiuvue9rue6ueeQhlxuICAgICAgICAgICAgaWYgKGNvbmZpZy5zaGFkZXJQcm9wKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIE9iamVjdC5lbnRyaWVzKGNvbmZpZy5zaGFkZXJQcm9wKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3BbMV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gYXdhaXQgUmVzb3VyY2VzLmxvYWRBc3luYzxUZXh0dXJlPihwcm9wWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0KSBtYXQuc2V0VGV4dHVyZShwcm9wWzBdLCB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuc2hhZGVyUHJvcFtwcm9wWzBdXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyDorr7nva7lhbbku5blsZ7mgKdcbiAgICAgICAgICAgICAgICBtYXQuc2V0UHJvcGVydGllcyhjb25maWcuc2hhZGVyUHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNvbXBvbmVudHMgJiYgY29uZmlnLmNvbXBvbmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGNvbnN0IENvbXBvbmVudENsYXNzIG9mIGNvbmZpZy5jb21wb25lbnRzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9iai5hZGRDb21wb25lbnQoQ29tcG9uZW50Q2xhc3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gYWRkIGNvbXBvbmVudCAke0NvbXBvbmVudENsYXNzLm5hbWV9OmAsIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSBcIi4uL0NvbXBvbmVudC9DYW1lcmFcIjtcbmltcG9ydCB7IFJlbmRlcmVyIH0gZnJvbSBcIi4uL0NvbXBvbmVudC9SZW5kZXJlclwiO1xuaW1wb3J0IHsgR2FtZU9iamVjdCB9IGZyb20gXCIuLi9Db3JlL0dhbWVPYmplY3RcIjtcbmltcG9ydCB7IEJWSFRyZWUgfSBmcm9tIFwiLi4vTWF0aC9CVkhUcmVlXCI7XG5pbXBvcnQgeyBUcmFuc2Zvcm1Ub29scyB9IGZyb20gXCIuLi9NYXRoL1RyYW5zZm9ybVRvb2xzXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yMlwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjNcIjtcblxuZXhwb3J0IGNsYXNzIFNjZW5lIHtcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICAgIHByaXZhdGUgcm9vdEdhbWVPYmplY3Q6IEdhbWVPYmplY3Q7XG4gICAgcHJpdmF0ZSBidmhUcmVlOiBCVkhUcmVlO1xuICAgIHByaXZhdGUgbmVlZHNSZWJ1aWxkOiBib29sZWFuID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLnJvb3RHYW1lT2JqZWN0ID0gbmV3IEdhbWVPYmplY3QoXCJyb290XCIpO1xuICAgICAgICB0aGlzLmJ2aFRyZWUgPSBuZXcgQlZIVHJlZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRSb290R2FtZU9iamVjdCgpOiBHYW1lT2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucm9vdEdhbWVPYmplY3Q7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMucm9vdEdhbWVPYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMucm9vdEdhbWVPYmplY3Quc3RhcnRDb21wb25lbnRzKCk7XG4gICAgICAgICAgICB0aGlzLnJvb3RHYW1lT2JqZWN0LnVwZGF0ZUNvbXBvbmVudHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOmcgOimgeaXtumHjeW7ukJWSFxuICAgICAgICBpZiAodGhpcy5uZWVkc1JlYnVpbGQpIHtcbiAgICAgICAgICAgIHRoaXMucmVidWlsZEJWSCgpO1xuICAgICAgICAgICAgdGhpcy5uZWVkc1JlYnVpbGQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOagh+iusOmcgOimgemHjeW7ukJWSFxuICAgICAqL1xuICAgIHB1YmxpYyBtYXJrRGlydHkoKTogdm9pZCB7XG4gICAgICAgIHRoaXMubmVlZHNSZWJ1aWxkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDph43lu7pCVkjmoJFcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlYnVpbGRCVkgoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGFsbE9iamVjdHMgPSB0aGlzLmNvbGxlY3RBbGxPYmplY3RzKHRoaXMucm9vdEdhbWVPYmplY3QpO1xuICAgICAgICB0aGlzLmJ2aFRyZWUuYnVpbGQoYWxsT2JqZWN0cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pS26ZuG5Zy65pmv5Lit5omA5pyJ5a+56LGhXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb2xsZWN0QWxsT2JqZWN0cyhyb290OiBHYW1lT2JqZWN0KTogR2FtZU9iamVjdFtdIHtcbiAgICAgICAgY29uc3Qgb2JqZWN0czogR2FtZU9iamVjdFtdID0gW107XG4gICAgICAgIHRoaXMudHJhdmVyc2VHYW1lT2JqZWN0cyhyb290LCBvYmplY3RzKTtcbiAgICAgICAgcmV0dXJuIG9iamVjdHM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6YGN5Y6G5ri45oiP5a+56LGh5qCRXG4gICAgICovXG4gICAgcHJpdmF0ZSB0cmF2ZXJzZUdhbWVPYmplY3RzKG5vZGU6IEdhbWVPYmplY3QsIGNvbGxlY3Rpb246IEdhbWVPYmplY3RbXSk6IHZvaWQge1xuICAgICAgICBpZiAobm9kZS5nZXRDb21wb25lbnQoUmVuZGVyZXIpKSB7XG4gICAgICAgICAgICBjb2xsZWN0aW9uLnB1c2gobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IG5vZGUudHJhbnNmb3JtLmNoaWxkcmVuO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlR2FtZU9iamVjdHMoY2hpbGQuZ2FtZU9iamVjdCwgY29sbGVjdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDlsITnur/mo4DmtYvmjqXlj6NcbiAgICAgKi9cbiAgICBwdWJsaWMgcmF5Y2FzdChyYXlPcmlnaW46IFZlY3RvcjMsIHJheURpcmVjdGlvbjogVmVjdG9yMywgbWF4RGlzdGFuY2U6IG51bWJlciA9IEluZmluaXR5KTogR2FtZU9iamVjdFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnZoVHJlZS5yYXljYXN0KHJheU9yaWdpbiwgcmF5RGlyZWN0aW9uLCBtYXhEaXN0YW5jZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog54K55Ye75bGP5bmV6YCJ5Y+W5pyA5YmN6Z2i5a+56LGhXG4gICAgICovXG4gICAgcHVibGljIHBpY2tPYmplY3Qoc2NyZWVuWDogbnVtYmVyLCBzY3JlZW5ZOiBudW1iZXIsIGNhbWVyYTogQ2FtZXJhKTogR2FtZU9iamVjdCB8IG51bGwge1xuICAgICAgICAvLyDlsIblsY/luZXlnZDmoIfovazmjaLkuLrkuJbnlYznqbrpl7TlsITnur9cbiAgICAgICAgY29uc3QgcmF5ID0gVHJhbnNmb3JtVG9vbHMuU2NyZWVuVG9Xb3JsZFBvc1JheWNhc3QobmV3IFZlY3RvcjIoc2NyZWVuWCwgc2NyZWVuWSksIGNhbWVyYSk7XG5cbiAgICAgICAgLy8g6L+b6KGM5bCE57q/5qOA5rWLXG4gICAgICAgIGNvbnN0IGhpdE9iamVjdHMgPSB0aGlzLnJheWNhc3QocmF5Lm9yaWdpbiwgcmF5LmRpcmVjdGlvbik7XG5cbiAgICAgICAgaWYgKGhpdE9iamVjdHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIOaJvuWIsOi3neemu+acgOi/keeahOWvueixoVxuICAgICAgICBsZXQgY2xvc2VzdE9iamVjdDogR2FtZU9iamVjdCB8IG51bGwgPSBudWxsO1xuICAgICAgICBsZXQgY2xvc2VzdERpc3RhbmNlID0gSW5maW5pdHk7XG5cbiAgICAgICAgZm9yIChjb25zdCBvYmogb2YgaGl0T2JqZWN0cykge1xuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSB0aGlzLmNhbGN1bGF0ZUhpdERpc3RhbmNlKG9iaiwgcmF5Lm9yaWdpbiwgcmF5LmRpcmVjdGlvbik7XG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPCBjbG9zZXN0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBjbG9zZXN0RGlzdGFuY2UgPSBkaXN0YW5jZTtcbiAgICAgICAgICAgICAgICBjbG9zZXN0T2JqZWN0ID0gb2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsb3Nlc3RPYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6K6h566X5ZG95Lit6Led56a777yI6ZyA6KaB5qC55o2u5YW35L2T5a+56LGh5b2i54q25a6e546w77yJXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVIaXREaXN0YW5jZShvYmo6IEdhbWVPYmplY3QsIHJheU9yaWdpbjogVmVjdG9yMywgcmF5RGlyZWN0aW9uOiBWZWN0b3IzKTogbnVtYmVyIHtcbiAgICAgICAgLy8g6L+Z6YeM6ZyA6KaB5a6e546w5YW35L2T55qE5bCE57q/5LiO5a+56LGh55u45Lqk5qOA5rWLXG4gICAgICAgIC8vIOWPr+S7peS9v+eUqOWvueixoeeahOWMheWbtOebkuaIluabtOeyvuehrueahOe9keagvOebuOS6pOajgOa1i1xuICAgICAgICBjb25zdCBib3VuZHMgPSB0aGlzLmJ2aFRyZWUuY2FsY3VsYXRlT2JqZWN0Qm91bmRzKG9iaik7XG4gICAgICAgIGlmIChib3VuZHMpIHtcbiAgICAgICAgICAgIHJldHVybiBib3VuZHMucmF5SW50ZXJzZWN0RGlzdGFuY2UocmF5T3JpZ2luLCByYXlEaXJlY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICB9XG59IiwiaW1wb3J0IHsgU2NlbmUgfSBmcm9tIFwiLi9TY2VuZVwiO1xuXG5leHBvcnQgY2xhc3MgU2NlbmVNYW5hZ2VyIHtcbiAgICBwcml2YXRlIHNjZW5lczogTWFwPHN0cmluZywgU2NlbmU+ID0gbmV3IE1hcDxzdHJpbmcsIFNjZW5lPigpO1xuICAgIHByaXZhdGUgYWN0aXZlU2NlbmU6IFNjZW5lIHwgbnVsbCA9IG51bGw7XG5cbiAgICBwdWJsaWMgY3JlYXRlU2NlbmUobmFtZTogc3RyaW5nKTogU2NlbmUge1xuICAgICAgICBjb25zdCBzY2VuZSA9IG5ldyBTY2VuZShuYW1lKTtcbiAgICAgICAgdGhpcy5zY2VuZXMuc2V0KG5hbWUsIHNjZW5lKTtcbiAgICAgICAgcmV0dXJuIHNjZW5lO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTY2VuZShuYW1lOiBzdHJpbmcpOiBTY2VuZSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjZW5lcy5nZXQobmFtZSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldEFjdGl2ZVNjZW5lKHNjZW5lOiBTY2VuZSB8IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAodHlwZW9mIHNjZW5lID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgZm91bmRTY2VuZSA9IHRoaXMuc2NlbmVzLmdldChzY2VuZSk7XG4gICAgICAgICAgICBpZiAoZm91bmRTY2VuZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZlU2NlbmUgPSBmb3VuZFNjZW5lO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmVTY2VuZSA9IHNjZW5lO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldEFjdGl2ZVNjZW5lKCk6IFNjZW5lIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZVNjZW5lO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVBY3RpdmVTY2VuZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlU2NlbmUpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU2NlbmUudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgbG9hZFNjZW5lKGRhdGE6IGFueSkge1xuICAgICAgICBpZiAoIWRhdGEubmFtZSB8fCAhZGF0YS5pbml0ZnVuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8g5Yid5aeL5YyW5Zy65pmvXG4gICAgICAgIGNvbnN0IG1haW5TY2VuZSA9IHRoaXMuY3JlYXRlU2NlbmUoZGF0YS5uYW1lKTtcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVTY2VuZShtYWluU2NlbmUpO1xuICAgICAgICBhd2FpdCBkYXRhLmluaXRmdW4obWFpblNjZW5lKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiLi4vTWF0aC9Db2xvclwiO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjJcIjtcbmltcG9ydCB7IFZlY3RvcjMgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IzXCI7XG5pbXBvcnQgeyBTaGFkZXJQYXNzLCBWZXJ0ZXhBdHRyaWJ1dGVzIH0gZnJvbSBcIi4uL1JlbmRlcmVyL1JlbmRlcmVyRGVmaW5lXCI7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tIFwiLi9TaGFkZXJcIjtcblxuZXhwb3J0IGNsYXNzIExpdFNoYWRlciBleHRlbmRzIFNoYWRlciB7XG5cbiAgICBwdWJsaWMgcGFzc2VzOiBTaGFkZXJQYXNzW10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiRm9yd2FyZFwiLFxuICAgICAgICAgICAgdmVydDogdGhpcy52ZXJ0ZXhTaGFkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGZyYWc6IHRoaXMuZnJhZ21lbnRTaGFkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgfVxuICAgIF07XG5cbiAgICBwdWJsaWMgZnJhZ21lbnRTaGFkZXIodjJmQXR0cjogVmVydGV4QXR0cmlidXRlcyk6IENvbG9yIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IHV2ID0gdjJmQXR0ci51diBhcyBWZWN0b3IyO1xuICAgICAgICBjb25zdCBub3JtYWwgPSB2MmZBdHRyLm5vcm1hbCBhcyBWZWN0b3IzO1xuXG4gICAgICAgIC8vIOmHh+agt+WfuuehgOminOiJslxuICAgICAgICBjb25zdCBzdXJmYWNlQ29sb3IgPSB0aGlzLm1haW5UZXh0dXJlPy5TYW1wbGUoXG4gICAgICAgICAgICB1di51ICogdGhpcy5tYWluVGV4dHVyZVNULnggKyB0aGlzLm1haW5UZXh0dXJlU1QueixcbiAgICAgICAgICAgIHV2LnYgKiB0aGlzLm1haW5UZXh0dXJlU1QueSArIHRoaXMubWFpblRleHR1cmVTVC53XG4gICAgICAgICkgfHwgQ29sb3IuV0hJVEU7XG4gICAgICAgIHN1cmZhY2VDb2xvci5tdWx0aXBseSh0aGlzLmJhc2VDb2xvcik7XG5cbiAgICAgICAgLy8g6auY5YWJ57O75pWw77yM5YC86LaK5aSn6auY5YWJ6LaK6ZuG5LitXG4gICAgICAgIGNvbnN0IHNoaW5pbmVzczogbnVtYmVyID0gMTAwXG5cbiAgICAgICAgLy8g56Gu5L+d5rOV5ZCR6YeP5b2S5LiA5YyWXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWROb3JtYWwgPSBub3JtYWwubm9ybWFsaXplKCk7XG5cbiAgICAgICAgLy8g6K6h566X5ryr5Y+N5bCE77yI5Y2K5YWw5Lyv54m577yJ6YOo5YiGXG4gICAgICAgIGNvbnN0IGRvdFByb2R1Y3QgPSBNYXRoLm1heCgwLCBWZWN0b3IzLmRvdChub3JtYWxpemVkTm9ybWFsLCB0aGlzLmxpZ2h0RGlyZWN0aW9uKSkgKiAwLjUgKyAwLjU7XG5cbiAgICAgICAgLy8g6K6h566X6auY5YWJ77yIUGhvbmfvvInpg6jliIZcbiAgICAgICAgLy8gMS4g6K6h566X5Y+N5bCE5YWJ5pa55ZCRID0gMioo5rOV5ZCR6YePwrflhYnmupDmlrnlkJEpKuazleWQkemHjyAtIOWFiea6kOaWueWQkVxuICAgICAgICBjb25zdCByZWZsZWN0RGlyID0gbm9ybWFsaXplZE5vcm1hbC5jbG9uZSgpXG4gICAgICAgICAgICAubXVsdGlwbHlTY2FsYXIoMiAqIFZlY3RvcjMuZG90KG5vcm1hbGl6ZWROb3JtYWwsIHRoaXMubGlnaHREaXJlY3Rpb24pKVxuICAgICAgICAgICAgLnN1YnRyYWN0KHRoaXMubGlnaHREaXJlY3Rpb24pXG4gICAgICAgICAgICAubm9ybWFsaXplKCk7XG5cbiAgICAgICAgLy8gMi4g6K6h566X5Y+N5bCE5pa55ZCR5LiO6KeG6KeS5pa55ZCR55qE54K556evXG4gICAgICAgIGNvbnN0IHNwZWNEb3QgPSBNYXRoLm1heCgwLCBWZWN0b3IzLmRvdChyZWZsZWN0RGlyLCB0aGlzLnZpZXdEaXIpKTtcblxuICAgICAgICAvLyAzLiDorqHnrpfpq5jlhYnlm6DlrZDvvIjkvb/nlKjpq5jlhYnns7vmlbDmjqfliLbpq5jlhYnojIPlm7TvvIlcbiAgICAgICAgY29uc3Qgc3BlY3VsYXJGYWN0b3IgPSBNYXRoLnBvdyhzcGVjRG90LCBzaGluaW5lc3MpO1xuXG4gICAgICAgIC8vIDQuIOiuoeeul+mrmOWFieminOiJsu+8iOmAmuW4uOS9v+eUqOWFiea6kOminOiJsu+8jOWPr+a3u+WKoOmrmOWFieW8uuW6puWPguaVsO+8iVxuICAgICAgICBjb25zdCBzcGVjdWxhckludGVuc2l0eSA9IDAuNTsgLy8g6auY5YWJ5by65bqmXG4gICAgICAgIGNvbnN0IHNwZWN1bGFyUiA9IHRoaXMubGlnaHRDb2xvci5yICogc3BlY3VsYXJJbnRlbnNpdHkgKiBzcGVjdWxhckZhY3RvcjtcbiAgICAgICAgY29uc3Qgc3BlY3VsYXJHID0gdGhpcy5saWdodENvbG9yLmcgKiBzcGVjdWxhckludGVuc2l0eSAqIHNwZWN1bGFyRmFjdG9yO1xuICAgICAgICBjb25zdCBzcGVjdWxhckIgPSB0aGlzLmxpZ2h0Q29sb3IuYiAqIHNwZWN1bGFySW50ZW5zaXR5ICogc3BlY3VsYXJGYWN0b3I7XG5cbiAgICAgICAgLy8g6K6h566X5ryr5Y+N5bCE6aKc6ImyXG4gICAgICAgIGNvbnN0IGRpZmZSID0gc3VyZmFjZUNvbG9yLnIgKiB0aGlzLmxpZ2h0Q29sb3IuciAqIHRoaXMubGlnaHRJbnRlbnNpdHkgKiBkb3RQcm9kdWN0O1xuICAgICAgICBjb25zdCBkaWZmRyA9IHN1cmZhY2VDb2xvci5nICogdGhpcy5saWdodENvbG9yLmcgKiB0aGlzLmxpZ2h0SW50ZW5zaXR5ICogZG90UHJvZHVjdDtcbiAgICAgICAgY29uc3QgZGlmZkIgPSBzdXJmYWNlQ29sb3IuYiAqIHRoaXMubGlnaHRDb2xvci5iICogdGhpcy5saWdodEludGVuc2l0eSAqIGRvdFByb2R1Y3Q7XG5cbiAgICAgICAgLy8g5ZCI5bm25omA5pyJ5YWJ54Wn6LSh54yu77yI5ryr5Y+N5bCEICsg6auY5YWJ77yJXG4gICAgICAgIGNvbnN0IHRvdGFsUiA9IGRpZmZSICsgc3BlY3VsYXJSO1xuICAgICAgICBjb25zdCB0b3RhbEcgPSBkaWZmRyArIHNwZWN1bGFyRztcbiAgICAgICAgY29uc3QgdG90YWxCID0gZGlmZkIgKyBzcGVjdWxhckI7XG5cbiAgICAgICAgLy8g56Gu5L+d6aKc6Imy5YC85ZyoMC0x6IyD5Zu05YaFXG4gICAgICAgIGNvbnN0IGNsYW1wZWRSID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgdG90YWxSKSk7XG4gICAgICAgIGNvbnN0IGNsYW1wZWRHID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgdG90YWxHKSk7XG4gICAgICAgIGNvbnN0IGNsYW1wZWRCID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgdG90YWxCKSk7XG5cbiAgICAgICAgLy8g57uE5ZCI5oiQMzLkvY3popzoibLlgLzvvIjkv53nlZnljp/lp4tBbHBoYe+8iVxuICAgICAgICByZXR1cm4gbmV3IENvbG9yKGNsYW1wZWRSLCBjbGFtcGVkRywgY2xhbXBlZEIsIHN1cmZhY2VDb2xvci5hKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQ2FtZXJhIH0gZnJvbSBcIi4uL0NvbXBvbmVudC9DYW1lcmFcIjtcbmltcG9ydCB7IExpZ2h0IH0gZnJvbSBcIi4uL0NvbXBvbmVudC9MaWdodFwiO1xuaW1wb3J0IHsgUmVuZGVyU2V0dGluZ3MgfSBmcm9tIFwiLi4vQ29yZS9TZXR0aW5nXCI7XG5pbXBvcnQgeyBUcmFuc2Zvcm0gfSBmcm9tIFwiLi4vQ29yZS9UcmFuc2Zvcm1cIjtcbmltcG9ydCB7IFVPYmplY3QgfSBmcm9tIFwiLi4vQ29yZS9VT2JqZWN0XCI7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9NYXRoL0NvbG9yXCI7XG5pbXBvcnQgeyBNYXRyaXg0eDQgfSBmcm9tIFwiLi4vTWF0aC9NYXRyaXg0eDRcIjtcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IyXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjRcIjtcbmltcG9ydCB7IFJlbmRlclR5cGUsIFNoYWRlclBhc3MsIFZlcnRleEF0dHJpYnV0ZXMgfSBmcm9tIFwiLi4vUmVuZGVyZXIvUmVuZGVyZXJEZWZpbmVcIjtcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tIFwiLi4vUmVzb3VyY2VzL1RleHR1cmVcIjtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFNoYWRlciBleHRlbmRzIFVPYmplY3Qge1xuICAgIHB1YmxpYyByZW5kZXJUeXBlOiBSZW5kZXJUeXBlID0gUmVuZGVyVHlwZS5PcGFxdWU7XG4gICAgcHVibGljIHJlbmRlclF1ZXVlOiBudW1iZXIgPSAwO1xuXG4gICAgLy8g5LiA5Lqb5YWo5bGA5Y+C5pWw77yMQ1BV5Lyg57uZR1BVXG4gICAgcHJvdGVjdGVkIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICAgIHByb3RlY3RlZCBjYW1lcmE6IENhbWVyYTtcbiAgICBwcm90ZWN0ZWQgdmlld0RpcjogVmVjdG9yMztcbiAgICBwcm90ZWN0ZWQgbW9kZWxNYXRyaXg6IE1hdHJpeDR4NDtcbiAgICBwcm90ZWN0ZWQgdmlld01hdHJpeDogTWF0cml4NHg0O1xuICAgIHByb3RlY3RlZCBwcm9qZWN0aW9uTWF0cml4OiBNYXRyaXg0eDQ7XG4gICAgcHJvdGVjdGVkIG12cE1hdHJpeDogTWF0cml4NHg0O1xuICAgIHByb3RlY3RlZCBub3JtYWxNYXRyaXg6IE1hdHJpeDR4NDtcbiAgICBwcm90ZWN0ZWQgbGlnaHQ6IExpZ2h0O1xuICAgIHByb3RlY3RlZCBsaWdodENvbG9yOiBDb2xvcjtcbiAgICBwcm90ZWN0ZWQgbGlnaHREaXJlY3Rpb246IFZlY3RvcjM7XG4gICAgcHJvdGVjdGVkIGxpZ2h0SW50ZW5zaXR5OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIGFtYmllbnRMaWdodDogQ29sb3I7XG5cbiAgICBwdWJsaWMgcGFzc2VzOiBTaGFkZXJQYXNzW10gPSBbXTtcblxuICAgIHB1YmxpYyBpbml0KHRyYW5zZm9ybTogVHJhbnNmb3JtLCBjYW1lcmE6IENhbWVyYSk6IHZvaWQge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBjYW1lcmE7XG4gICAgICAgIHRoaXMudmlld0RpciA9IGNhbWVyYS50cmFuc2Zvcm0uZm9yd2FyZC5uZWdhdGUoKS5ub3JtYWxpemUoKTtcblxuICAgICAgICB0aGlzLm1vZGVsTWF0cml4ID0gdGhpcy50cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTWF0cml4O1xuICAgICAgICB0aGlzLnZpZXdNYXRyaXggPSB0aGlzLmNhbWVyYS5nZXRWaWV3TWF0cml4KCk7XG4gICAgICAgIHRoaXMucHJvamVjdGlvbk1hdHJpeCA9IHRoaXMuY2FtZXJhLmdldFByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAgICAgdGhpcy5tdnBNYXRyaXggPSB0aGlzLnByb2plY3Rpb25NYXRyaXguY2xvbmUoKS5tdWx0aXBseSh0aGlzLnZpZXdNYXRyaXgpLm11bHRpcGx5KHRoaXMubW9kZWxNYXRyaXgpO1xuXG4gICAgICAgIHRoaXMubm9ybWFsTWF0cml4ID0gdGhpcy50cmFuc2Zvcm0ubG9jYWxUb1dvcmxkTm9ybWFsTWF0cml4O1xuXG4gICAgICAgIHRoaXMubGlnaHQgPSBMaWdodC5zdW5MaWdodDtcbiAgICAgICAgdGhpcy5hbWJpZW50TGlnaHQgPSBSZW5kZXJTZXR0aW5ncy5hbWJpZW50TGlnaHQ7XG4gICAgICAgIHRoaXMubGlnaHRDb2xvciA9IHRoaXMubGlnaHQuY29sb3I7XG4gICAgICAgIHRoaXMubGlnaHREaXJlY3Rpb24gPSB0aGlzLmxpZ2h0LnRyYW5zZm9ybS5mb3J3YXJkLm5vcm1hbGl6ZSgpO1xuICAgICAgICB0aGlzLmxpZ2h0SW50ZW5zaXR5ID0gdGhpcy5saWdodC5pbnRlbnNpdHk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxuXG4gICAgLy8jcmVnaW9uIOedgOiJsuWZqOmAmueUqOaooeadv1xuICAgIHB1YmxpYyBiYXNlQ29sb3I6IENvbG9yID0gQ29sb3IuV0hJVEU7XG4gICAgcHVibGljIG1haW5UZXh0dXJlOiBUZXh0dXJlIHwgbnVsbCA9IG51bGw7XG4gICAgcHVibGljIG1haW5UZXh0dXJlU1Q6IFZlY3RvcjQgPSBuZXcgVmVjdG9yNCgxLCAxLCAwLCAwKTtcblxuICAgIC8vIOmAmueUqOmhtueCueWHveaVsO+8jOWwhumhtueCueWdkOagh+S7peWPiuazlee6v+WPmOaNouWIsOijgeWJquepuumXtFxuICAgIHByb3RlY3RlZCB2ZXJ0ZXhTaGFkZXIoaW5BdHRyOiBWZXJ0ZXhBdHRyaWJ1dGVzKTogeyB2ZXJ0ZXhPdXQ6IFZlY3RvcjQ7IGF0dHJPdXQ6IFZlcnRleEF0dHJpYnV0ZXMgfSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2ZXJ0ZXhPdXQ6IHRoaXMubXZwTWF0cml4Lm11bHRpcGx5VmVjdG9yNChuZXcgVmVjdG9yNChpbkF0dHIudmVydGV4IGFzIFZlY3RvcjMsIDEpKSxcbiAgICAgICAgICAgIGF0dHJPdXQ6IHtcbiAgICAgICAgICAgICAgICB1djogaW5BdHRyLnV2LFxuICAgICAgICAgICAgICAgIG5vcm1hbDogdGhpcy5ub3JtYWxNYXRyaXgubXVsdGlwbHlWZWN0b3IzKGluQXR0ci5ub3JtYWwgYXMgVmVjdG9yMyksXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8g6YCa55So552A6Imy5Zmo5Ye95pWw77yM6YeH5qC357q555CG5LiO5Z+656GA6aKc6Imy55u45LmYXG4gICAgcHJvdGVjdGVkIGZyYWdtZW50U2hhZGVyKHYyZkF0dHI6IFZlcnRleEF0dHJpYnV0ZXMpOiBDb2xvciB8IG51bGwge1xuICAgICAgICBpZiAoIXRoaXMubWFpblRleHR1cmUpIHJldHVybiBDb2xvci5NQUdFTlRBO1xuICAgICAgICBjb25zdCB1diA9IHYyZkF0dHIudXYgYXMgVmVjdG9yMjtcbiAgICAgICAgY29uc3Qgc2FtcGxlZENvbG9yID0gdGhpcy5tYWluVGV4dHVyZS5TYW1wbGUoXG4gICAgICAgICAgICB1di51ICogdGhpcy5tYWluVGV4dHVyZVNULnggKyB0aGlzLm1haW5UZXh0dXJlU1QueixcbiAgICAgICAgICAgIHV2LnYgKiB0aGlzLm1haW5UZXh0dXJlU1QueSArIHRoaXMubWFpblRleHR1cmVTVC53XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBDb2xvci5tdWx0aXBseShzYW1wbGVkQ29sb3IsIHRoaXMuYmFzZUNvbG9yKTtcbiAgICB9XG4gICAgLy8jZW5kcmVnaW9uXG59IiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tIFwiLi4vTWF0aC9Db2xvclwiO1xuaW1wb3J0IHsgQ3VsbE1vZGUsIFNoYWRlclBhc3MsIFN0ZW5jaWxDb21wYXJlRnVuY3Rpb24sIFN0ZW5jaWxPcCwgU3RlbmNpbFByZXNldHMgfSBmcm9tIFwiLi4vUmVuZGVyZXIvUmVuZGVyZXJEZWZpbmVcIjtcbmltcG9ydCB7IFNoYWRlciB9IGZyb20gXCIuL1NoYWRlclwiO1xuaW1wb3J0IHsgVG9vblNoYWRlciB9IGZyb20gXCIuL1Rvb25TaGFkZXJcIjtcblxuZXhwb3J0IGNsYXNzIFN0ZW5jaWxPdXRsaW5lU2hhZGVyIGV4dGVuZHMgU2hhZGVyIHtcblxuICAgIC8vIOWfuuehgOedgOiJsuWPguaVsFxuICAgIHB1YmxpYyBzaGFkb3dUaHJlc2hvbGQ6IG51bWJlciA9IDAuMztcbiAgICBwdWJsaWMgbWlkdG9uZVRocmVzaG9sZDogbnVtYmVyID0gMC43O1xuICAgIHB1YmxpYyBoaWdobGlnaHRJbnRlbnNpdHk6IG51bWJlciA9IDEuMjtcblxuICAgIC8vIOaPj+i+ueWPguaVsFxuICAgIHB1YmxpYyBvdXRsaW5lQ29sb3I6IENvbG9yID0gQ29sb3IuQkxBQ0s7ICAgICAgICAgIC8vIOaPj+i+ueminOiJslxuICAgIHB1YmxpYyBvdXRsaW5lVGhpY2tuZXNzOiBudW1iZXIgPSAwLjA1OyAgICAgICAgICAgIC8vIOaPj+i+ueWOmuW6plxuICAgIHB1YmxpYyBvdXRsaW5lU3RlbmNpbFJlZjogbnVtYmVyID0gMTsgICAgICAgICAgICAgIC8vIOaooeadv+a1i+ivleWPguiAg+WAvFxuXG4gICAgcHVibGljIHBhc3NlczogU2hhZGVyUGFzc1tdID0gW1xuICAgICAgICAvLyDnrKzkuIDpgY3vvJrmraPluLjmuLLmn5PniankvZPlubbmoIforrDmqKHmnb/nvJPlhrLljLpcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJSZW5kZXJPYmplY3RBbmRNYXJrU3RlbmNpbFwiLFxuICAgICAgICAgICAgdmVydDogdGhpcy52ZXJ0ZXhTaGFkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGZyYWc6IFRvb25TaGFkZXIucHJvdG90eXBlLmZyYWdtZW50U2hhZGVyLmJpbmQodGhpcyksXG4gICAgICAgICAgICByZW5kZXJTdGF0ZToge1xuICAgICAgICAgICAgICAgIGN1bGxNb2RlOiBDdWxsTW9kZS5CYWNrLFxuICAgICAgICAgICAgICAgIC8vIOaooeadv+a1i+ivlemFjee9ru+8muagh+iusOeJqeS9k+WMuuWfn1xuICAgICAgICAgICAgICAgIHN0ZW5jaWw6IHtcbiAgICAgICAgICAgICAgICAgICAgcmVmOiB0aGlzLm91dGxpbmVTdGVuY2lsUmVmLFxuICAgICAgICAgICAgICAgICAgICBjb21wYXJpc29uT3BlcmF0aW9uOiBTdGVuY2lsQ29tcGFyZUZ1bmN0aW9uLkFsd2F5cyxcbiAgICAgICAgICAgICAgICAgICAgcGFzc09wZXJhdGlvbjogU3RlbmNpbE9wLlJlcGxhY2UsICAgIC8vIOmAmui/h+aXtuabv+aNouS4uuWPguiAg+WAvFxuICAgICAgICAgICAgICAgICAgICBmYWlsT3BlcmF0aW9uOiBTdGVuY2lsT3AuS2VlcCwgICAgICAvLyDlpLHotKXml7bkv53mjIHljp/lgLxcbiAgICAgICAgICAgICAgICAgICAgekZhaWxPcGVyYXRpb246IFN0ZW5jaWxPcC5LZWVwICAgICAgLy8g5rex5bqm5aSx6LSl5pe25L+d5oyB5Y6f5YC8XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyDnrKzkuozpgY3vvJrmuLLmn5PlpJbmiannmoTmqKHlnovkvZzkuLrmj4/ovrnvvIzlj6rlnKjmnKrooqvmoIforrDnmoTljLrln5/nu5jliLZcbiAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJSZW5kZXJPdXRsaW5lXCIsXG4gICAgICAgICAgICB2ZXJ0OiBUb29uU2hhZGVyLnByb3RvdHlwZS5vdXRsaW5lVmVydGV4U2hhZGVyLmJpbmQodGhpcyksXG4gICAgICAgICAgICBmcmFnOiBUb29uU2hhZGVyLnByb3RvdHlwZS5vdXRsaW5lRnJhZ21lbnRTaGFkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHJlbmRlclN0YXRlOiB7XG4gICAgICAgICAgICAgICAgY3VsbE1vZGU6IEN1bGxNb2RlLkJhY2ssXG4gICAgICAgICAgICAgICAgLy8g5qih5p2/5rWL6K+V6YWN572u77ya5Y+q5Zyo6Z2e54mp5L2T5Yy65Z+f57uY5Yi25o+P6L65XG4gICAgICAgICAgICAgICAgc3RlbmNpbDogU3RlbmNpbFByZXNldHMub3V0bGluZSh0aGlzLm91dGxpbmVTdGVuY2lsUmVmKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIF07XG59XG4iLCJpbXBvcnQgeyBDb2xvciB9IGZyb20gXCIuLi9NYXRoL0NvbG9yXCI7XG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yMlwiO1xuaW1wb3J0IHsgVmVjdG9yMyB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjNcIjtcbmltcG9ydCB7IFZlY3RvcjQgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3I0XCI7XG5pbXBvcnQgeyBDdWxsTW9kZSwgU2hhZGVyUGFzcywgVmVydGV4QXR0cmlidXRlcyB9IGZyb20gXCIuLi9SZW5kZXJlci9SZW5kZXJlckRlZmluZVwiO1xuaW1wb3J0IHsgU2hhZGVyIH0gZnJvbSBcIi4vU2hhZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBUb29uU2hhZGVyIGV4dGVuZHMgU2hhZGVyIHtcblxuICAgIC8vIOWNoemAmuedgOiJsueJueacieeahOWPguaVsFxuICAgIHB1YmxpYyBzaGFkb3dUaHJlc2hvbGQ6IG51bWJlciA9IDAuMzsgICAgICAgICAgICAgICAvLyDpmLTlvbHpmIjlgLxcbiAgICBwdWJsaWMgbWlkdG9uZVRocmVzaG9sZDogbnVtYmVyID0gMC43OyAgICAgICAgICAgICAgLy8g5Lit6Ze06LCD6ZiI5YC8XG4gICAgcHVibGljIGhpZ2hsaWdodEludGVuc2l0eTogbnVtYmVyID0gMS4yOyAgICAgICAgICAgIC8vIOmrmOWFieW8uuW6plxuICAgIHB1YmxpYyBvdXRsaW5lQ29sb3I6IENvbG9yID0gbmV3IENvbG9yKDAsIDAsIDAsIDEpOyAvLyDova7lu5PpopzoibJcbiAgICBwdWJsaWMgb3V0bGluZVRoaWNrbmVzczogbnVtYmVyID0gMC4wNTsgICAgICAgICAgICAgLy8g6L2u5buT5Y6a5bqmXG5cbiAgICBwdWJsaWMgcGFzc2VzOiBTaGFkZXJQYXNzW10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiRm9yd2FyZFwiLFxuICAgICAgICAgICAgdmVydDogdGhpcy52ZXJ0ZXhTaGFkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGZyYWc6IHRoaXMuZnJhZ21lbnRTaGFkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHJlbmRlclN0YXRlOiB7XG4gICAgICAgICAgICAgICAgY3VsbE1vZGU6IEN1bGxNb2RlLkJhY2ssXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiT3V0bGluZVwiLFxuICAgICAgICAgICAgdmVydDogdGhpcy5vdXRsaW5lVmVydGV4U2hhZGVyLmJpbmQodGhpcyksXG4gICAgICAgICAgICBmcmFnOiB0aGlzLm91dGxpbmVGcmFnbWVudFNoYWRlci5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgcmVuZGVyU3RhdGU6IHtcbiAgICAgICAgICAgICAgICBjdWxsTW9kZTogQ3VsbE1vZGUuRnJvbnQsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICBdO1xuXG4gICAgcHVibGljIGZyYWdtZW50U2hhZGVyKHYyZkF0dHI6IFZlcnRleEF0dHJpYnV0ZXMpOiBDb2xvciB8IG51bGwge1xuICAgICAgICBpZiAoIXRoaXMubWFpblRleHR1cmUpIHsgcmV0dXJuIENvbG9yLk1BR0VOVEE7IH1cblxuICAgICAgICBjb25zdCB1diA9IHYyZkF0dHIudXYgYXMgVmVjdG9yMjtcbiAgICAgICAgY29uc3Qgbm9ybWFsID0gdjJmQXR0ci5ub3JtYWwgYXMgVmVjdG9yMztcblxuICAgICAgICAvLyDph4fmoLfnurnnkIbpopzoibJcbiAgICAgICAgY29uc3Qgc3VyZmFjZUNvbG9yID0gdGhpcy5tYWluVGV4dHVyZS5TYW1wbGUodXYudSwgdXYudik7XG5cbiAgICAgICAgLy8g56Gu5L+d5rOV5ZCR6YeP5b2S5LiA5YyWXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWROb3JtYWwgPSBub3JtYWwubm9ybWFsaXplKCk7XG5cbiAgICAgICAgLy8g6K6h566X5rOV5ZCR6YeP5LiO5YWJ5rqQ5pa55ZCR55qE54K556evXG4gICAgICAgIGNvbnN0IGRvdFByb2R1Y3QgPSBWZWN0b3IzLmRvdChub3JtYWxpemVkTm9ybWFsLCB0aGlzLmxpZ2h0RGlyZWN0aW9uKTtcblxuICAgICAgICAvLyDljaHpgJrnnYDoibLnmoTmoLjlv4PvvJrlsIblhYnnhafliIbkuLrlh6DkuKrnprvmlaPnmoTlsYLmrKFcbiAgICAgICAgbGV0IGxpZ2h0SW50ZW5zaXR5ID0gMDtcbiAgICAgICAgaWYgKGRvdFByb2R1Y3QgPiB0aGlzLm1pZHRvbmVUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIC8vIOmrmOWFieWMuuWfn1xuICAgICAgICAgICAgbGlnaHRJbnRlbnNpdHkgPSB0aGlzLmhpZ2hsaWdodEludGVuc2l0eTtcbiAgICAgICAgfSBlbHNlIGlmIChkb3RQcm9kdWN0ID4gdGhpcy5zaGFkb3dUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIC8vIOS4remXtOiwg+WMuuWfn1xuICAgICAgICAgICAgbGlnaHRJbnRlbnNpdHkgPSAwLjc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyDpmLTlvbHljLrln59cbiAgICAgICAgICAgIGxpZ2h0SW50ZW5zaXR5ID0gMC4zO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g6K6h566X5ryr5Y+N5bCE6aKc6Imy77yI5Y2h6YCa6aOO5qC86YCa5bi45LiN5L2/55So5aSN5p2C55qE5YWJ54Wn5YWs5byP77yJXG4gICAgICAgIGNvbnN0IGRpZmZSID0gc3VyZmFjZUNvbG9yLnIgKiB0aGlzLmxpZ2h0Q29sb3IuciAqIHRoaXMubGlnaHRJbnRlbnNpdHkgKiBsaWdodEludGVuc2l0eTtcbiAgICAgICAgY29uc3QgZGlmZkcgPSBzdXJmYWNlQ29sb3IuZyAqIHRoaXMubGlnaHRDb2xvci5nICogdGhpcy5saWdodEludGVuc2l0eSAqIGxpZ2h0SW50ZW5zaXR5O1xuICAgICAgICBjb25zdCBkaWZmQiA9IHN1cmZhY2VDb2xvci5iICogdGhpcy5saWdodENvbG9yLmIgKiB0aGlzLmxpZ2h0SW50ZW5zaXR5ICogbGlnaHRJbnRlbnNpdHk7XG5cbiAgICAgICAgLy8g5re75Yqg546v5aKD5YWJXG4gICAgICAgIGNvbnN0IHRvdGFsUiA9IHRoaXMuYW1iaWVudExpZ2h0LnIgKyBkaWZmUjtcbiAgICAgICAgY29uc3QgdG90YWxHID0gdGhpcy5hbWJpZW50TGlnaHQuZyArIGRpZmZHO1xuICAgICAgICBjb25zdCB0b3RhbEIgPSB0aGlzLmFtYmllbnRMaWdodC5iICsgZGlmZkI7XG5cbiAgICAgICAgLy8g56Gu5L+d6aKc6Imy5YC85ZyoMC0x6IyD5Zu05YaFXG4gICAgICAgIGNvbnN0IGNsYW1wZWRSID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgdG90YWxSKSk7XG4gICAgICAgIGNvbnN0IGNsYW1wZWRHID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgdG90YWxHKSk7XG4gICAgICAgIGNvbnN0IGNsYW1wZWRCID0gTWF0aC5taW4oMSwgTWF0aC5tYXgoMCwgdG90YWxCKSk7XG5cbiAgICAgICAgLy8g6L+U5Zue5pyA57uI6aKc6Imy77yM5L+d55WZ5Y6f5aeLQWxwaGFcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihjbGFtcGVkUiwgY2xhbXBlZEcsIGNsYW1wZWRCLCBzdXJmYWNlQ29sb3IuYSk7XG4gICAgfVxuXG4gICAgLy8g6L2u5buT57q/6aG254K5552A6Imy5ZmoXG4gICAgcHVibGljIG91dGxpbmVWZXJ0ZXhTaGFkZXIoaW5BdHRyOiBWZXJ0ZXhBdHRyaWJ1dGVzKTogeyB2ZXJ0ZXhPdXQ6IFZlY3RvcjQ7IGF0dHJPdXQ6IFZlcnRleEF0dHJpYnV0ZXMgfSB7XG4gICAgICAgIC8vIOayv+azlee6v+aWueWQkeWkluaOqOmhtueCueadpeWIm+W7uui9ruW7k1xuICAgICAgICBjb25zdCBub3JtYWwgPSBpbkF0dHIubm9ybWFsIGFzIFZlY3RvcjM7XG4gICAgICAgIGNvbnN0IG9mZnNldFZlcnRleCA9IChpbkF0dHIudmVydGV4IGFzIFZlY3RvcjMpLmNsb25lKClcbiAgICAgICAgICAgIC5hZGQobm9ybWFsLmNsb25lKCkubXVsdGlwbHlTY2FsYXIodGhpcy5vdXRsaW5lVGhpY2tuZXNzKSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZlcnRleE91dDogdGhpcy5tdnBNYXRyaXgubXVsdGlwbHlWZWN0b3I0KG5ldyBWZWN0b3I0KG9mZnNldFZlcnRleCwgMSkpLFxuICAgICAgICAgICAgYXR0ck91dDoge31cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyDova7lu5Pnur/niYfmrrXnnYDoibLlmahcbiAgICBwdWJsaWMgb3V0bGluZUZyYWdtZW50U2hhZGVyKCk6IENvbG9yIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm91dGxpbmVDb2xvcjtcbiAgICB9XG59IiwiaW1wb3J0IHsgQmxlbmRGYWN0b3IsIEN1bGxNb2RlLCBSZW5kZXJUeXBlLCBTaGFkZXJQYXNzIH0gZnJvbSBcIi4uL1JlbmRlcmVyL1JlbmRlcmVyRGVmaW5lXCI7XG5pbXBvcnQgeyBTaGFkZXIgfSBmcm9tIFwiLi9TaGFkZXJcIjtcblxuZXhwb3J0IGNsYXNzIFRyYW5zcGFyZW50U2hhZGVyIGV4dGVuZHMgU2hhZGVyIHtcblxuICAgIHB1YmxpYyByZW5kZXJUeXBlOiBSZW5kZXJUeXBlID0gUmVuZGVyVHlwZS5UcmFuc3BhcmVudDtcbiAgICBcbiAgICBwdWJsaWMgcGFzc2VzOiBTaGFkZXJQYXNzW10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwiRm9yd2FyZFwiLFxuICAgICAgICAgICAgdmVydDogdGhpcy52ZXJ0ZXhTaGFkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGZyYWc6IHRoaXMuZnJhZ21lbnRTaGFkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHJlbmRlclN0YXRlOiB7XG4gICAgICAgICAgICAgICAgY3VsbE1vZGU6IEN1bGxNb2RlLkJhY2ssXG4gICAgICAgICAgICAgICAgeldyaXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBibGVuZDoge1xuICAgICAgICAgICAgICAgICAgICBzcmM6IEJsZW5kRmFjdG9yLlNyY0FscGhhLFxuICAgICAgICAgICAgICAgICAgICBkc3Q6IEJsZW5kRmFjdG9yLk9uZU1pbnVzU3JjQWxwaGEsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH1cbiAgICBdO1xufSIsImltcG9ydCB7IENhbWVyYSB9IGZyb20gXCIuLi9Db21wb25lbnQvQ2FtZXJhXCI7XG5pbXBvcnQgeyBFbmdpbmUgfSBmcm9tIFwiLi4vQ29yZS9FbmdpbmVcIjtcbmltcG9ydCB7IENvbG9yIH0gZnJvbSBcIi4uL01hdGgvQ29sb3JcIjtcbmltcG9ydCB7IFRyYW5zZm9ybVRvb2xzIH0gZnJvbSBcIi4uL01hdGgvVHJhbnNmb3JtVG9vbHNcIjtcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IyXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yM1wiO1xuXG5lbnVtIExvZ1R5cGUge1xuICAgIEluZm8sXG4gICAgV2FybmluZyxcbiAgICBFcnJvcixcbn1cblxuaW50ZXJmYWNlIElMb2cge1xuICAgIG1lc3NhZ2U6IHN0cmluZztcbiAgICB0eXBlOiBMb2dUeXBlO1xuICAgIGR1cmF0aW9uOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBJTGluZSB7XG4gICAgc3RhcnQ6IFZlY3RvcjI7XG4gICAgZW5kOiBWZWN0b3IyO1xuICAgIGNvbG9yOiBDb2xvcjtcbiAgICBkdXJhdGlvbjogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgRGVidWcge1xuICAgIHByaXZhdGUgc3RhdGljIGxvZ3M6IElMb2dbXSA9IFtdO1xuICAgIHByaXZhdGUgc3RhdGljIGxpbmVzOiBJTGluZVtdID0gW107XG5cbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBsb2dDb2xvcnMgPSB7XG4gICAgICAgIFtMb2dUeXBlLkluZm9dOiAnd2hpdGUnLFxuICAgICAgICBbTG9nVHlwZS5XYXJuaW5nXTogJ29yYW5nZScsXG4gICAgICAgIFtMb2dUeXBlLkVycm9yXTogJ3JlZCdcbiAgICB9O1xuXG4gICAgc3RhdGljIFByaW50TG9ncygpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxvZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxvZyA9IHRoaXMubG9nc1tpXTtcbiAgICAgICAgICAgIEVuZ2luZS5jb250ZXh0LmZpbGxTdHlsZSA9IERlYnVnLmxvZ0NvbG9yc1tsb2cudHlwZV07XG4gICAgICAgICAgICBFbmdpbmUuY29udGV4dC5maWxsVGV4dChsb2cubWVzc2FnZSwgMTAsIDIwICsgaSAqIDE1KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxvZ3MgPSBbXTtcbiAgICB9XG5cbiAgICBzdGF0aWMgR2V0RGVidWdMaW5lcygpIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSB0aGlzLmxpbmVzO1xuICAgICAgICB0aGlzLmxpbmVzID0gW107XG4gICAgICAgIHJldHVybiBsaW5lcztcbiAgICB9XG5cbiAgICBzdGF0aWMgTG9nKG1lc3NhZ2U6IHN0cmluZywgZHVyYXRpb24/OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wdXNoKG1lc3NhZ2UsIExvZ1R5cGUuSW5mbywgZHVyYXRpb24pO1xuICAgIH1cblxuICAgIHN0YXRpYyBMb2dXYXJuaW5nKG1lc3NhZ2U6IHN0cmluZywgZHVyYXRpb24/OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5wdXNoKG1lc3NhZ2UsIExvZ1R5cGUuV2FybmluZywgZHVyYXRpb24pO1xuICAgIH1cblxuICAgIHN0YXRpYyBMb2dFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGR1cmF0aW9uPzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucHVzaChtZXNzYWdlLCBMb2dUeXBlLkVycm9yLCBkdXJhdGlvbik7XG4gICAgfVxuXG4gICAgc3RhdGljIERyYXdMaW5lKHN0YXJ0OiBWZWN0b3IyLCBlbmQ6IFZlY3RvcjIsIGNvbG9yOiBDb2xvciwgZHVyYXRpb24/OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgbGluZTogSUxpbmUgPSB7XG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uID8/IDAsXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saW5lcy5wdXNoKGxpbmUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBEcmF3TGluZTNEKHN0YXJ0OiBWZWN0b3IzLCBlbmQ6IFZlY3RvcjMsIGNvbG9yOiBDb2xvciwgZHVyYXRpb24/OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgYSA9IFRyYW5zZm9ybVRvb2xzLldvcmxkVG9TY3JlZW5Qb3Moc3RhcnQsIENhbWVyYS5tYWluQ2FtZXJhKS5zY3JlZW47XG4gICAgICAgIGNvbnN0IGIgPSBUcmFuc2Zvcm1Ub29scy5Xb3JsZFRvU2NyZWVuUG9zKGVuZCwgQ2FtZXJhLm1haW5DYW1lcmEpLnNjcmVlbjtcbiAgICAgICAgdGhpcy5EcmF3TGluZShhLCBiLCBjb2xvciwgZHVyYXRpb24pO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIHB1c2gobWVzc2FnZTogc3RyaW5nLCB0eXBlOiBMb2dUeXBlLCBkdXJhdGlvbj86IG51bWJlcikge1xuICAgICAgICBjb25zdCBsb2c6IElMb2cgPSB7XG4gICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbiA/PyAwLFxuICAgICAgICB9XG4gICAgICAgIHRoaXMubG9ncy5wdXNoKGxvZyk7XG4gICAgfVxufSIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vTWF0aC9Db2xvcic7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSAnLi4vTWF0aC9WZWN0b3IzJztcbmltcG9ydCB7IE1hdHJpeDR4NCB9IGZyb20gJy4uL01hdGgvTWF0cml4NHg0JztcbmltcG9ydCB7IFRyYW5zZm9ybVRvb2xzIH0gZnJvbSAnLi4vTWF0aC9UcmFuc2Zvcm1Ub29scyc7XG5pbXBvcnQgeyBDYW1lcmEgfSBmcm9tICcuLi9Db21wb25lbnQvQ2FtZXJhJztcbmltcG9ydCB7IEVuZ2luZSB9IGZyb20gJy4uL0NvcmUvRW5naW5lJztcblxuLyoqXG4gKiBHaXptb+W3peWFt+exu++8jOeUqOS6jue7mOWItuWQhOenjeiwg+ivleWbvuW9olxuICog5Y+C6ICDVW5pdHnnmoRHaXptb+ezu+e7n+WunueOsFxuICovXG5leHBvcnQgY2xhc3MgR2l6bW8ge1xuICAgIC8vIOW9k+WJjee7mOWItuminOiJslxuICAgIHByaXZhdGUgc3RhdGljIF9jb2xvcjogQ29sb3IgPSBDb2xvci5XSElURTtcblxuICAgIC8vIOW9k+WJjeefqemYteWPmOaNolxuICAgIHByaXZhdGUgc3RhdGljIF9tYXRyaXg6IE1hdHJpeDR4NCA9IE1hdHJpeDR4NC5pZGVudGl0eTtcblxuICAgIC8qKlxuICAgICAqIOiuvue9ruW9k+WJjee7mOWItuminOiJslxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgc2V0IGNvbG9yKGNvbG9yOiBDb2xvcikge1xuICAgICAgICB0aGlzLl9jb2xvciA9IGNvbG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiOt+WPluW9k+WJjee7mOWItuminOiJslxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IGNvbG9yKCk6IENvbG9yIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOiuvue9ruW9k+WJjeWPmOaNouefqemYtVxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgc2V0IG1hdHJpeChtYXRyaXg6IE1hdHJpeDR4NCkge1xuICAgICAgICB0aGlzLl9tYXRyaXggPSBtYXRyaXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog6I635Y+W5b2T5YmN5Y+Y5o2i55+p6Zi1XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBnZXQgbWF0cml4KCk6IE1hdHJpeDR4NCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXRyaXg7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBSZXNldCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fY29sb3IgPSBDb2xvci5XSElURTtcbiAgICAgICAgdGhpcy5fbWF0cml4ID0gTWF0cml4NHg0LmlkZW50aXR5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOe7mOWItuS4gOadoeS7jnN0YXJ05YiwZW5k55qE57q/XG4gICAgICovXG4gICAgcHVibGljIHN0YXRpYyBEcmF3TGluZShzdGFydDogVmVjdG9yMywgZW5kOiBWZWN0b3IzKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGEgPSBUcmFuc2Zvcm1Ub29scy5Nb2RlbFRvU2NyZWVuUG9zKHN0YXJ0LCB0aGlzLl9tYXRyaXgsIENhbWVyYS5tYWluQ2FtZXJhKS5zY3JlZW47XG4gICAgICAgIGNvbnN0IGIgPSBUcmFuc2Zvcm1Ub29scy5Nb2RlbFRvU2NyZWVuUG9zKGVuZCwgdGhpcy5fbWF0cml4LCBDYW1lcmEubWFpbkNhbWVyYSkuc2NyZWVuO1xuICAgICAgICBFbmdpbmUucGlwZWxpbmUuRHJhd0xpbmUoYS54LCBhLnksIGIueCwgYi55LCB0aGlzLl9jb2xvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog57uY5Yi25LiA5p2h5LuOcG9zaXRpb27lvIDlp4vvvIzmsr9kaXJlY3Rpb27mlrnlkJHnmoTlsITnur9cbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIERyYXdSYXkocG9zaXRpb246IFZlY3RvcjMsIGRpcmVjdGlvbjogVmVjdG9yMyk6IHZvaWQge1xuICAgICAgICBjb25zdCBlbmQgPSBWZWN0b3IzLmFkZChwb3NpdGlvbiwgZGlyZWN0aW9uKTtcbiAgICAgICAgdGhpcy5EcmF3TGluZShwb3NpdGlvbiwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiDnu5jliLbkuIDkuKrnq4vmlrnkvZPnur/moYZcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIERyYXdDdWJlKGNlbnRlcjogVmVjdG9yMywgc2l6ZTogVmVjdG9yMyk6IHZvaWQge1xuICAgICAgICAvLyDorqHnrpfnq4vmlrnkvZPnmoQ45Liq6aG254K5XG4gICAgICAgIGNvbnN0IGhhbGZTaXplID0gVmVjdG9yMy5tdWx0aXBseVNjYWxhcihzaXplLCAwLjUpO1xuICAgICAgICBjb25zdCB2ZXJ0aWNlcyA9IFtcbiAgICAgICAgICAgIG5ldyBWZWN0b3IzKC1oYWxmU2l6ZS54LCAtaGFsZlNpemUueSwgLWhhbGZTaXplLnopLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjMoaGFsZlNpemUueCwgLWhhbGZTaXplLnksIC1oYWxmU2l6ZS56KSxcbiAgICAgICAgICAgIG5ldyBWZWN0b3IzKGhhbGZTaXplLngsIGhhbGZTaXplLnksIC1oYWxmU2l6ZS56KSxcbiAgICAgICAgICAgIG5ldyBWZWN0b3IzKC1oYWxmU2l6ZS54LCBoYWxmU2l6ZS55LCAtaGFsZlNpemUueiksXG4gICAgICAgICAgICBuZXcgVmVjdG9yMygtaGFsZlNpemUueCwgLWhhbGZTaXplLnksIGhhbGZTaXplLnopLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjMoaGFsZlNpemUueCwgLWhhbGZTaXplLnksIGhhbGZTaXplLnopLFxuICAgICAgICAgICAgbmV3IFZlY3RvcjMoaGFsZlNpemUueCwgaGFsZlNpemUueSwgaGFsZlNpemUueiksXG4gICAgICAgICAgICBuZXcgVmVjdG9yMygtaGFsZlNpemUueCwgaGFsZlNpemUueSwgaGFsZlNpemUueilcbiAgICAgICAgXTtcblxuICAgICAgICAvLyDlrprkuYnnq4vmlrnkvZPnmoQxMuadoei+uVxuICAgICAgICBjb25zdCBlZGdlcyA9IFtcbiAgICAgICAgICAgIFswLCAxXSwgWzEsIDJdLCBbMiwgM10sIFszLCAwXSwgIC8vIOWJjemdolxuICAgICAgICAgICAgWzQsIDVdLCBbNSwgNl0sIFs2LCA3XSwgWzcsIDRdLCAgLy8g5ZCO6Z2iXG4gICAgICAgICAgICBbMCwgNF0sIFsxLCA1XSwgWzIsIDZdLCBbMywgN10gICAvLyDov57mjqXnur9cbiAgICAgICAgXTtcblxuICAgICAgICAvLyDlupTnlKjlj5jmjaLlubbnu5jliLbmiYDmnInovrlcbiAgICAgICAgZm9yIChjb25zdCBbaTEsIGkyXSBvZiBlZGdlcykge1xuICAgICAgICAgICAgY29uc3QgcDEgPSBWZWN0b3IzLmFkZChjZW50ZXIsIHZlcnRpY2VzW2kxXSk7XG4gICAgICAgICAgICBjb25zdCBwMiA9IFZlY3RvcjMuYWRkKGNlbnRlciwgdmVydGljZXNbaTJdKTtcbiAgICAgICAgICAgIHRoaXMuRHJhd0xpbmUocDEsIHAyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIOe7mOWItuS4gOS4quWdkOagh+i9tFxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgRHJhd0F4aXMocG9zaXRpb246IFZlY3RvcjMsIHNpemU6IG51bWJlciA9IDEuMCk6IHZvaWQge1xuICAgICAgICAvLyBY6L20ICjnuqLoibIpXG4gICAgICAgIGNvbnN0IG9yaWdpbmFsQ29sb3IgPSB0aGlzLl9jb2xvcjtcbiAgICAgICAgdGhpcy5fY29sb3IgPSBDb2xvci5SRUQ7XG4gICAgICAgIGNvbnN0IHhFbmQgPSBWZWN0b3IzLmFkZChwb3NpdGlvbiwgbmV3IFZlY3RvcjMoc2l6ZSwgMCwgMCkpO1xuICAgICAgICB0aGlzLkRyYXdMaW5lKHBvc2l0aW9uLCB4RW5kKTtcblxuICAgICAgICAvLyBZ6L20ICjnu7/oibIpXG4gICAgICAgIHRoaXMuX2NvbG9yID0gQ29sb3IuR1JFRU47XG4gICAgICAgIGNvbnN0IHlFbmQgPSBWZWN0b3IzLmFkZChwb3NpdGlvbiwgbmV3IFZlY3RvcjMoMCwgc2l6ZSwgMCkpO1xuICAgICAgICB0aGlzLkRyYXdMaW5lKHBvc2l0aW9uLCB5RW5kKTtcblxuICAgICAgICAvLyBa6L20ICjok53oibIpXG4gICAgICAgIHRoaXMuX2NvbG9yID0gQ29sb3IuQkxVRTtcbiAgICAgICAgY29uc3QgekVuZCA9IFZlY3RvcjMuYWRkKHBvc2l0aW9uLCBuZXcgVmVjdG9yMygwLCAwLCBzaXplKSk7XG4gICAgICAgIHRoaXMuRHJhd0xpbmUocG9zaXRpb24sIHpFbmQpO1xuXG4gICAgICAgIC8vIOaBouWkjeWOn+Wni+minOiJslxuICAgICAgICB0aGlzLl9jb2xvciA9IG9yaWdpbmFsQ29sb3I7XG4gICAgfVxufSIsImltcG9ydCB7IE1lc2ggfSBmcm9tIFwiLi4vUmVzb3VyY2VzL01lc2hcIjtcbmltcG9ydCB7IFN1Yk1lc2ggfSBmcm9tIFwiLi4vUmVzb3VyY2VzL01lc2hcIjtcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi4vTWF0aC9WZWN0b3IyXCI7XG5pbXBvcnQgeyBWZWN0b3IzIH0gZnJvbSBcIi4uL01hdGgvVmVjdG9yM1wiO1xuaW1wb3J0IHsgVmVjdG9yNCB9IGZyb20gXCIuLi9NYXRoL1ZlY3RvcjRcIjtcbmltcG9ydCB7IEJvdW5kcyB9IGZyb20gXCIuLi9NYXRoL0JvdW5kc1wiO1xuXG5leHBvcnQgY2xhc3MgT0JKUGFyc2VyIHtcbiAgICAvKipcbiAgICAgKiDop6PmnpBPQkrmlofku7blhoXlrrnlubbnlJ/miJBNZXNo5a+56LGhXG4gICAgICogQHBhcmFtIGNvbnRlbnQgT0JK5paH5Lu255qE5paH5pys5YaF5a65XG4gICAgICogQHBhcmFtIHNjYWxlIOaooeWei+e8qeaUvuavlOS+i++8jOm7mOiupDEuMFxuICAgICAqIEByZXR1cm5zIOino+aekOWQjueahE1lc2jlr7nosaFcbiAgICAgKi9cbiAgICBzdGF0aWMgcGFyc2UoY29udGVudDogc3RyaW5nLCBzY2FsZTogbnVtYmVyID0gMSk6IE1lc2gge1xuICAgICAgICBjb25zdCBtZXNoID0gbmV3IE1lc2goKTtcbiAgICAgICAgbWVzaC52ZXJ0aWNlcyA9IFtdO1xuICAgICAgICBtZXNoLnV2ID0gW107XG4gICAgICAgIG1lc2gubm9ybWFscyA9IFtdO1xuICAgICAgICBtZXNoLnRhbmdlbnRzID0gW107XG4gICAgICAgIG1lc2gudHJpYW5nbGVzID0gW107XG4gICAgICAgIG1lc2guYm91bmRzID0gW107XG4gICAgICAgIG1lc2guc3ViTWVzaGVzID0gW107XG4gICAgICAgIG1lc2gubWF0ZXJpYWwgPSBbXTsgLy8g5Yid5aeL5YyW5p2Q6LSo5pWw57uEXG5cbiAgICAgICAgLy8g5Li05pe25a2Y5YKoT0JK5paH5Lu25Lit55qE5Y6f5aeL5pWw5o2u77yI57Si5byV5LuOMeW8gOWni++8iVxuICAgICAgICBjb25zdCB0ZW1wVmVydGljZXM6IFZlY3RvcjNbXSA9IFtdO1xuICAgICAgICBjb25zdCB0ZW1wVXZzOiBWZWN0b3IyW10gPSBbXTtcbiAgICAgICAgY29uc3QgdGVtcE5vcm1hbHM6IFZlY3RvcjNbXSA9IFtdO1xuXG4gICAgICAgIC8vIOmhtueCuee0ouW8leaYoOWwhOihqO+8mueUqOS6juWOu+mHjSAo5qC85byPOiBcInZJbmRleC92dEluZGV4L3ZuSW5kZXhcIiA9PiDlkIjlubblkI7nmoTntKLlvJUpXG4gICAgICAgIGNvbnN0IHZlcnRleE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XG5cbiAgICAgICAgLy8g5p2Q6LSo55u45YWz5Y+Y6YePXG4gICAgICAgIGxldCBjdXJyZW50TWF0ZXJpYWwgPSBcIlwiOyAvLyDlvZPliY3kvb/nlKjnmoTmnZDotKjlkI3np7BcbiAgICAgICAgY29uc3QgbWF0ZXJpYWxTZXQgPSBuZXcgU2V0PHN0cmluZz4oKTsgLy8g55So5LqO5pS26ZuG5omA5pyJ5ZSv5LiA5p2Q6LSoXG5cbiAgICAgICAgLy8g5oyJ6KGM5YiG5Ymy5YaF5a655bm25aSE55CGXG4gICAgICAgIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdCgvXFxyP1xcbi8pO1xuICAgICAgICBsZXQgY3VycmVudFN1Yk1lc2g6IFN1Yk1lc2ggfCBudWxsID0gbnVsbDtcblxuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRyaW1tZWRMaW5lID0gbGluZS50cmltKCk7XG4gICAgICAgICAgICBpZiAoIXRyaW1tZWRMaW5lIHx8IHRyaW1tZWRMaW5lLnN0YXJ0c1dpdGgoJyMnKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyDot7Pov4fnqbrooYzlkozms6jph4pcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSB0cmltbWVkTGluZS5zcGxpdCgvXFxzKy8pO1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHBhcnRzWzBdO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHBhcnRzLnNsaWNlKDEpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd2JzogLy8g6aG254K55Z2Q5qCHICh4LCB5LCB6KSAtIOW6lOeUqOe8qeaUvlxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFZlcnRpY2VzLnB1c2gobmV3IFZlY3RvcjMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChkYXRhWzBdKSAqIHNjYWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoZGF0YVsxXSkgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KGRhdGFbMl0pICogc2NhbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAndnQnOiAvLyDnurnnkIblnZDmoIcgKHUsIHYpXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wVXZzLnB1c2gobmV3IFZlY3RvcjIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChkYXRhWzBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxIC0gcGFyc2VGbG9hdChkYXRhWzFdKSAvLyDnv7vovaxW6L20XG4gICAgICAgICAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3ZuJzogLy8g5rOV57q/ICh4LCB5LCB6KVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPj0gMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcE5vcm1hbHMucHVzaChuZXcgVmVjdG9yMyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJzZUZsb2F0KGRhdGFbMF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlRmxvYXQoZGF0YVsxXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VGbG9hdChkYXRhWzJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdtdGxsaWInOiAvLyDmnZDotKjlupPlvJXnlKjvvIjmmoLlrZjmnZDotKjlupPmlofku7blkI3vvIzlrp7pmYXliqDovb3pnIDpop3lpJblrp7njrDvvIlcbiAgICAgICAgICAgICAgICAgICAgLy8g6L+Z6YeM5Y+v5Lul6K6w5b2V5p2Q6LSo5bqT5paH5Lu26Lev5b6E77yM55So5LqO5ZCO57ut5Yqg6L295p2Q6LSoXG4gICAgICAgICAgICAgICAgICAgIC8vIOekuuS+izogY29uc3QgbXRsUGF0aCA9IGRhdGEuam9pbignICcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ3VzZW10bCc6IC8vIOS9v+eUqOadkOi0qFxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWF0ZXJpYWwgPSBkYXRhLmpvaW4oJyAnKTsgLy8g5pSv5oyB5bim56m65qC855qE5p2Q6LSo5ZCNXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbFNldC5hZGQoY3VycmVudE1hdGVyaWFsKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTdWJNZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFN1Yk1lc2gubWF0ZXJpYWwgPSBjdXJyZW50TWF0ZXJpYWw7IC8vIOWFs+iBlOadkOi0qFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZyc6IC8vIOWkhOeQhue7hOaMh+S7pO+8jOWIm+W7uuaWsOeahOWtkOe9keagvFxuICAgICAgICAgICAgICAgICAgICAvLyDnu5PnrpflvZPliY3lrZDnvZHmoLxcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTdWJNZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViTWVzaC52ZXJ0ZXhDb3VudCA9IG1lc2gudmVydGljZXMubGVuZ3RoIC0gY3VycmVudFN1Yk1lc2guZmlyc3RWZXJ0ZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViTWVzaC5pbmRleENvdW50ID0gbWVzaC50cmlhbmdsZXMubGVuZ3RoIC0gY3VycmVudFN1Yk1lc2guaW5kZXhTdGFydDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyDliJvlu7rmlrDlrZDnvZHmoLzlubbnu6fmib/lvZPliY3mnZDotKhcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFN1Yk1lc2ggPSBuZXcgU3ViTWVzaCgpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViTWVzaC5maXJzdFZlcnRleCA9IG1lc2gudmVydGljZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViTWVzaC5pbmRleFN0YXJ0ID0gbWVzaC50cmlhbmdsZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViTWVzaC52ZXJ0ZXhDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdWJNZXNoLmluZGV4Q291bnQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViTWVzaC5ib3VuZHMgPSBuZXcgQm91bmRzKCk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdWJNZXNoLm1hdGVyaWFsID0gY3VycmVudE1hdGVyaWFsOyAvLyDnu6fmib/lvZPliY3mnZDotKhcbiAgICAgICAgICAgICAgICAgICAgbWVzaC5zdWJNZXNoZXMucHVzaChjdXJyZW50U3ViTWVzaCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAnZic6IC8vIOmdolxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCAzKSBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAvLyDliJ3lp4vljJblvZPliY3lrZDnvZHmoLzvvIjlpoLmnpzmsqHmnInvvIlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50U3ViTWVzaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFN1Yk1lc2ggPSBuZXcgU3ViTWVzaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFN1Yk1lc2guZmlyc3RWZXJ0ZXggPSBtZXNoLnZlcnRpY2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdWJNZXNoLmluZGV4U3RhcnQgPSBtZXNoLnRyaWFuZ2xlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViTWVzaC52ZXJ0ZXhDb3VudCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3ViTWVzaC5pbmRleENvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdWJNZXNoLmJvdW5kcyA9IG5ldyBCb3VuZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTdWJNZXNoLm1hdGVyaWFsID0gY3VycmVudE1hdGVyaWFsOyAvLyDkvb/nlKjlvZPliY3mnZDotKhcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc2guc3ViTWVzaGVzLnB1c2goY3VycmVudFN1Yk1lc2gpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g5aSE55CG6Z2i55qE6aG254K55pWw5o2uXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZhY2VWZXJ0aWNlcyA9IGRhdGEubWFwKHZlcnRleFN0ciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRpY2VzID0gdmVydGV4U3RyLnNwbGl0KCcvJykubWFwKGlkeCA9PiBwYXJzZUludChpZHgpIHx8IDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2OiBpbmRpY2VzWzBdIC0gMSwgLy8g6L2s5o2i5Li6MOWfuue0ouW8lVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZ0OiBpbmRpY2VzWzFdIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bjogaW5kaWNlc1syXSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOWkhOeQhuS4ieinkuW9ouWMluWSjOmhtueCueWOu+mHjVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMjsgaSA8IGZhY2VWZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgWzAsIGkgLSAxLCBpXS5mb3JFYWNoKGlkeCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB2LCB2dCwgdm4gfSA9IGZhY2VWZXJ0aWNlc1tpZHhdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Yib5bu65ZSv5LiA5qCH6K+G6ZSuICjlpITnkIblj6/og73nmoTotJ/mlbDntKLlvJXlkozpu5jorqTlgLwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYCR7diA+PSAwID8gdiA6IC0xfS8ke3Z0ID49IDAgPyB2dCA6IC0xfS8ke3ZuID49IDAgPyB2biA6IC0xfWA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmVydGV4TWFwLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWkjeeUqOW3suWtmOWcqOeahOmhtueCuee0ouW8lVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnRyaWFuZ2xlcy5wdXNoKHZlcnRleE1hcC5nZXQoa2V5KSEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOa3u+WKoOaWsOmhtueCueaVsOaNrlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdJbmRleCA9IG1lc2gudmVydGljZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0ZXhNYXAuc2V0KGtleSwgbmV3SW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOmhtueCueaVsOaNrlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoLnZlcnRpY2VzLnB1c2godiA+PSAwICYmIHYgPCB0ZW1wVmVydGljZXMubGVuZ3RoID8gdGVtcFZlcnRpY2VzW3ZdIDogbmV3IFZlY3RvcjMoMCwgMCwgMCkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVW5pWw5o2uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc2gudXYucHVzaCh2dCA+PSAwICYmIHZ0IDwgdGVtcFV2cy5sZW5ndGggPyB0ZW1wVXZzW3Z0XSA6IG5ldyBWZWN0b3IyKDAsIDApKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDms5Xnur/mlbDmja5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC5ub3JtYWxzLnB1c2godm4gPj0gMCAmJiB2biA8IHRlbXBOb3JtYWxzLmxlbmd0aCA/IHRlbXBOb3JtYWxzW3ZuXSA6IG5ldyBWZWN0b3IzKDAsIDAsIDEpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDlhYjliJ3lp4vljJbliIfnur/kuLrpm7blkJHph4/vvIzlkI7nu63kvJrorqHnrpdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC50YW5nZW50cy5wdXNoKG5ldyBWZWN0b3I0KDAsIDAsIDAsIDEpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmt7vliqDntKLlvJVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaC50cmlhbmdsZXMucHVzaChuZXdJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyDmm7TmlrDlrZDnvZHmoLzkv6Hmga9cbiAgICAgICAgbWVzaC5zdWJNZXNoZXMuZm9yRWFjaChzdWJNZXNoID0+IHtcbiAgICAgICAgICAgIHN1Yk1lc2gudmVydGV4Q291bnQgPSBtZXNoLnZlcnRpY2VzLmxlbmd0aCAtIHN1Yk1lc2guZmlyc3RWZXJ0ZXg7XG4gICAgICAgICAgICBzdWJNZXNoLmluZGV4Q291bnQgPSBtZXNoLnRyaWFuZ2xlcy5sZW5ndGggLSBzdWJNZXNoLmluZGV4U3RhcnQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIOaUtumbhuaJgOacieadkOi0qOWIsG1lc2gubWF0ZXJpYWzmlbDnu4RcbiAgICAgICAgbWVzaC5tYXRlcmlhbCA9IEFycmF5LmZyb20obWF0ZXJpYWxTZXQpO1xuXG4gICAgICAgIG1lc2guY2FsY3VsYXRlTWVzaERhdGEoKTtcblxuICAgICAgICBpZiAoIW1lc2guY2hlY2tWYWxpZCgpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTWVzaCBjaGVjayB2YWxpZCBmYWlsZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWVzaDtcbiAgICB9XG59IiwiaW1wb3J0IHsgRW5naW5lIH0gZnJvbSBcIi4vQ29yZS9FbmdpbmVcIjtcblxuLy8g5b2TRE9N5YaF5a655Yqg6L295a6M5oiQ5ZCO5omn6KGMXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIOWIneWni+WMluW8leaTjlxuICAgIGF3YWl0IEVuZ2luZS5Jbml0KCk7XG4gICAgLy8g5Li75b6q546vXG4gICAgZnVuY3Rpb24gbWFpbkxvb3AodGltZTogbnVtYmVyKSB7XG4gICAgICAgIEVuZ2luZS5Mb29wKHRpbWUpO1xuICAgICAgICAvLyDor7fmsYLkuIvkuIDluKfliqjnlLtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1haW5Mb29wKTtcbiAgICB9XG4gICAgLy8g5byA5aeL5Yqo55S75b6q546vXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKG1haW5Mb29wKTtcbn0pOyJdfQ=="}