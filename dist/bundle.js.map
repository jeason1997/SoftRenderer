{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@tweenjs/tween.js/dist/tween.cjs","node_modules/cannon/build/cannon.js","node_modules/reflect-metadata/Reflect.js","src/Component/BoxCollider.ts","src/Component/Camera.ts","src/Component/Collider.ts","src/Component/Component.ts","src/Component/Light.ts","src/Component/MeshRenderer.ts","src/Component/Renderer.ts","src/Component/RigidBody.ts","src/Component/SphereCollider.ts","src/Component/TestComp/CameraController.ts","src/Component/TestComp/ObjAutoRotate.ts","src/Component/TestComp/ObjRotate.ts","src/Core/Decorators.ts","src/Core/Engine.ts","src/Core/GameObject.ts","src/Core/Input.ts","src/Core/Setting.ts","src/Core/Time.ts","src/Core/Transform.ts","src/Core/TweenManager.ts","src/Core/UObject.ts","src/Math/BVHTree.ts","src/Math/Bounds.ts","src/Math/Color.ts","src/Math/Matrix4x4.ts","src/Math/Panel.ts","src/Math/Quaternion.ts","src/Math/Ray.ts","src/Math/TransformTools.ts","src/Math/Vector2.ts","src/Math/Vector3.ts","src/Math/Vector4.ts","src/Physics/Physics.ts","src/Physics/RaycastHit.ts","src/Renderer/BarycentricTriangleRasterizer.ts","src/Renderer/RasterizationPipeline.ts","src/Renderer/RendererDefine.ts","src/Renderer/TriangleRasterizer.ts","src/Resources/CubeMap.ts","src/Resources/Material.ts","src/Resources/Mesh.ts","src/Resources/Resources.ts","src/Resources/Texture.ts","src/Resources/TextureCreator.ts","src/Scene/MainScene.ts","src/Scene/Scene.ts","src/Scene/SceneManager.ts","src/Shader/LitShader.ts","src/Shader/Shader.ts","src/Shader/StencilOutlineShader.ts","src/Shader/ToonShader.ts","src/Shader/TransparentShader.ts","src/Utils/Debug.ts","src/Utils/Gizmo.ts","src/Utils/ObjParser.ts","src/index.ts"],"names":[],"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C,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrF,MAAM;gBACN,IAAI,aAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrF,MAAM;gBACN,IAAI,aAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrF,MAAM;gBACN,IAAI,aAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrF,MAAM;gBACN,IAAI,aAAK,CAAC,CAAC,CAAC,CAAC,C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AAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7G,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAA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AAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnF,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnF,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnF,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAA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C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtB,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QACnC,MAAM,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAA;QAEnC,IAA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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * The Ease class provides a collection of easing functions for use with tween.js.\n */\nvar Easing = Object.freeze({\n    Linear: Object.freeze({\n        None: function (amount) {\n            return amount;\n        },\n        In: function (amount) {\n            return amount;\n        },\n        Out: function (amount) {\n            return amount;\n        },\n        InOut: function (amount) {\n            return amount;\n        },\n    }),\n    Quadratic: Object.freeze({\n        In: function (amount) {\n            return amount * amount;\n        },\n        Out: function (amount) {\n            return amount * (2 - amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount;\n            }\n            return -0.5 * (--amount * (amount - 2) - 1);\n        },\n    }),\n    Cubic: Object.freeze({\n        In: function (amount) {\n            return amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount + 2);\n        },\n    }),\n    Quartic: Object.freeze({\n        In: function (amount) {\n            return amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return 1 - --amount * amount * amount * amount;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount;\n            }\n            return -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n        },\n    }),\n    Quintic: Object.freeze({\n        In: function (amount) {\n            return amount * amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n        },\n    }),\n    Sinusoidal: Object.freeze({\n        In: function (amount) {\n            return 1 - Math.sin(((1.0 - amount) * Math.PI) / 2);\n        },\n        Out: function (amount) {\n            return Math.sin((amount * Math.PI) / 2);\n        },\n        InOut: function (amount) {\n            return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));\n        },\n    }),\n    Exponential: Object.freeze({\n        In: function (amount) {\n            return amount === 0 ? 0 : Math.pow(1024, amount - 1);\n        },\n        Out: function (amount) {\n            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            if ((amount *= 2) < 1) {\n                return 0.5 * Math.pow(1024, amount - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n        },\n    }),\n    Circular: Object.freeze({\n        In: function (amount) {\n            return 1 - Math.sqrt(1 - amount * amount);\n        },\n        Out: function (amount) {\n            return Math.sqrt(1 - --amount * amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n        },\n    }),\n    Elastic: Object.freeze({\n        In: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n        },\n        Out: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            amount *= 2;\n            if (amount < 1) {\n                return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n            }\n            return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n        },\n    }),\n    Back: Object.freeze({\n        In: function (amount) {\n            var s = 1.70158;\n            return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);\n        },\n        Out: function (amount) {\n            var s = 1.70158;\n            return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;\n        },\n        InOut: function (amount) {\n            var s = 1.70158 * 1.525;\n            if ((amount *= 2) < 1) {\n                return 0.5 * (amount * amount * ((s + 1) * amount - s));\n            }\n            return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n        },\n    }),\n    Bounce: Object.freeze({\n        In: function (amount) {\n            return 1 - Easing.Bounce.Out(1 - amount);\n        },\n        Out: function (amount) {\n            if (amount < 1 / 2.75) {\n                return 7.5625 * amount * amount;\n            }\n            else if (amount < 2 / 2.75) {\n                return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n            }\n            else if (amount < 2.5 / 2.75) {\n                return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n            }\n            else {\n                return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n            }\n        },\n        InOut: function (amount) {\n            if (amount < 0.5) {\n                return Easing.Bounce.In(amount * 2) * 0.5;\n            }\n            return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n        },\n    }),\n    generatePow: function (power) {\n        if (power === void 0) { power = 4; }\n        power = power < Number.EPSILON ? Number.EPSILON : power;\n        power = power > 10000 ? 10000 : power;\n        return {\n            In: function (amount) {\n                return Math.pow(amount, power);\n            },\n            Out: function (amount) {\n                return 1 - Math.pow((1 - amount), power);\n            },\n            InOut: function (amount) {\n                if (amount < 0.5) {\n                    return Math.pow((amount * 2), power) / 2;\n                }\n                return (1 - Math.pow((2 - amount * 2), power)) / 2 + 0.5;\n            },\n        };\n    },\n});\n\nvar now = function () { return performance.now(); };\n\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tween\n */\nvar Group = /** @class */ (function () {\n    function Group() {\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        this._tweens = {};\n        this._tweensAddedDuringUpdate = {};\n        this.add.apply(this, tweens);\n    }\n    Group.prototype.getAll = function () {\n        var _this = this;\n        return Object.keys(this._tweens).map(function (tweenId) { return _this._tweens[tweenId]; });\n    };\n    Group.prototype.removeAll = function () {\n        this._tweens = {};\n    };\n    Group.prototype.add = function () {\n        var _a;\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        for (var _b = 0, tweens_1 = tweens; _b < tweens_1.length; _b++) {\n            var tween = tweens_1[_b];\n            // Remove from any other group first, a tween can only be in one group at a time.\n            // @ts-expect-error library internal access\n            (_a = tween._group) === null || _a === void 0 ? void 0 : _a.remove(tween);\n            // @ts-expect-error library internal access\n            tween._group = this;\n            this._tweens[tween.getId()] = tween;\n            this._tweensAddedDuringUpdate[tween.getId()] = tween;\n        }\n    };\n    Group.prototype.remove = function () {\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        for (var _a = 0, tweens_2 = tweens; _a < tweens_2.length; _a++) {\n            var tween = tweens_2[_a];\n            // @ts-expect-error library internal access\n            tween._group = undefined;\n            delete this._tweens[tween.getId()];\n            delete this._tweensAddedDuringUpdate[tween.getId()];\n        }\n    };\n    /** Return true if all tweens in the group are not paused or playing. */\n    Group.prototype.allStopped = function () {\n        return this.getAll().every(function (tween) { return !tween.isPlaying(); });\n    };\n    Group.prototype.update = function (time, preserve) {\n        if (time === void 0) { time = now(); }\n        if (preserve === void 0) { preserve = true; }\n        var tweenIds = Object.keys(this._tweens);\n        if (tweenIds.length === 0)\n            return;\n        // Tweens are updated in \"batches\". If you add a new tween during an\n        // update, then the new tween will be updated in the next batch.\n        // If you remove a tween during an update, it may or may not be updated.\n        // However, if the removed tween was added during the current batch,\n        // then it will not be updated.\n        while (tweenIds.length > 0) {\n            this._tweensAddedDuringUpdate = {};\n            for (var i = 0; i < tweenIds.length; i++) {\n                var tween = this._tweens[tweenIds[i]];\n                var autoStart = !preserve;\n                if (tween && tween.update(time, autoStart) === false && !preserve)\n                    this.remove(tween);\n            }\n            tweenIds = Object.keys(this._tweensAddedDuringUpdate);\n        }\n    };\n    return Group;\n}());\n\n/**\n *\n */\nvar Interpolation = {\n    Linear: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.Linear;\n        if (k < 0) {\n            return fn(v[0], v[1], f);\n        }\n        if (k > 1) {\n            return fn(v[m], v[m - 1], m - f);\n        }\n        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n    },\n    Bezier: function (v, k) {\n        var b = 0;\n        var n = v.length - 1;\n        var pw = Math.pow;\n        var bn = Interpolation.Utils.Bernstein;\n        for (var i = 0; i <= n; i++) {\n            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n        }\n        return b;\n    },\n    CatmullRom: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.CatmullRom;\n        if (v[0] === v[m]) {\n            if (k < 0) {\n                i = Math.floor((f = m * (1 + k)));\n            }\n            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n        }\n        else {\n            if (k < 0) {\n                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n            }\n            if (k > 1) {\n                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n            }\n            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n        }\n    },\n    Utils: {\n        Linear: function (p0, p1, t) {\n            return (p1 - p0) * t + p0;\n        },\n        Bernstein: function (n, i) {\n            var fc = Interpolation.Utils.Factorial;\n            return fc(n) / fc(i) / fc(n - i);\n        },\n        Factorial: (function () {\n            var a = [1];\n            return function (n) {\n                var s = 1;\n                if (a[n]) {\n                    return a[n];\n                }\n                for (var i = n; i > 1; i--) {\n                    s *= i;\n                }\n                a[n] = s;\n                return s;\n            };\n        })(),\n        CatmullRom: function (p0, p1, p2, p3, t) {\n            var v0 = (p2 - p0) * 0.5;\n            var v1 = (p3 - p1) * 0.5;\n            var t2 = t * t;\n            var t3 = t * t2;\n            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n        },\n    },\n};\n\n/**\n * Utils\n */\nvar Sequence = /** @class */ (function () {\n    function Sequence() {\n    }\n    Sequence.nextId = function () {\n        return Sequence._nextId++;\n    };\n    Sequence._nextId = 0;\n    return Sequence;\n}());\n\nvar mainGroup = new Group();\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar Tween = /** @class */ (function () {\n    function Tween(object, group) {\n        this._isPaused = false;\n        this._pauseStart = 0;\n        this._valuesStart = {};\n        this._valuesEnd = {};\n        this._valuesStartRepeat = {};\n        this._duration = 1000;\n        this._isDynamic = false;\n        this._initialRepeat = 0;\n        this._repeat = 0;\n        this._yoyo = false;\n        this._isPlaying = false;\n        this._reversed = false;\n        this._delayTime = 0;\n        this._startTime = 0;\n        this._easingFunction = Easing.Linear.None;\n        this._interpolationFunction = Interpolation.Linear;\n        // eslint-disable-next-line\n        this._chainedTweens = [];\n        this._onStartCallbackFired = false;\n        this._onEveryStartCallbackFired = false;\n        this._id = Sequence.nextId();\n        this._isChainStopped = false;\n        this._propertiesAreSetUp = false;\n        this._goToEnd = false;\n        this._object = object;\n        if (typeof group === 'object') {\n            this._group = group;\n            group.add(this);\n        }\n        // Use \"true\" to restore old behavior (will be removed in future release).\n        else if (group === true) {\n            this._group = mainGroup;\n            mainGroup.add(this);\n        }\n    }\n    Tween.prototype.getId = function () {\n        return this._id;\n    };\n    Tween.prototype.isPlaying = function () {\n        return this._isPlaying;\n    };\n    Tween.prototype.isPaused = function () {\n        return this._isPaused;\n    };\n    Tween.prototype.getDuration = function () {\n        return this._duration;\n    };\n    Tween.prototype.to = function (target, duration) {\n        if (duration === void 0) { duration = 1000; }\n        if (this._isPlaying)\n            throw new Error('Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.');\n        this._valuesEnd = target;\n        this._propertiesAreSetUp = false;\n        this._duration = duration < 0 ? 0 : duration;\n        return this;\n    };\n    Tween.prototype.duration = function (duration) {\n        if (duration === void 0) { duration = 1000; }\n        this._duration = duration < 0 ? 0 : duration;\n        return this;\n    };\n    Tween.prototype.dynamic = function (dynamic) {\n        if (dynamic === void 0) { dynamic = false; }\n        this._isDynamic = dynamic;\n        return this;\n    };\n    Tween.prototype.start = function (time, overrideStartingValues) {\n        if (time === void 0) { time = now(); }\n        if (overrideStartingValues === void 0) { overrideStartingValues = false; }\n        if (this._isPlaying) {\n            return this;\n        }\n        this._repeat = this._initialRepeat;\n        if (this._reversed) {\n            // If we were reversed (f.e. using the yoyo feature) then we need to\n            // flip the tween direction back to forward.\n            this._reversed = false;\n            for (var property in this._valuesStartRepeat) {\n                this._swapEndStartRepeatValues(property);\n                this._valuesStart[property] = this._valuesStartRepeat[property];\n            }\n        }\n        this._isPlaying = true;\n        this._isPaused = false;\n        this._onStartCallbackFired = false;\n        this._onEveryStartCallbackFired = false;\n        this._isChainStopped = false;\n        this._startTime = time;\n        this._startTime += this._delayTime;\n        if (!this._propertiesAreSetUp || overrideStartingValues) {\n            this._propertiesAreSetUp = true;\n            // If dynamic is not enabled, clone the end values instead of using the passed-in end values.\n            if (!this._isDynamic) {\n                var tmp = {};\n                for (var prop in this._valuesEnd)\n                    tmp[prop] = this._valuesEnd[prop];\n                this._valuesEnd = tmp;\n            }\n            this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, overrideStartingValues);\n        }\n        return this;\n    };\n    Tween.prototype.startFromCurrentValues = function (time) {\n        return this.start(time, true);\n    };\n    Tween.prototype._setupProperties = function (_object, _valuesStart, _valuesEnd, _valuesStartRepeat, overrideStartingValues) {\n        for (var property in _valuesEnd) {\n            var startValue = _object[property];\n            var startValueIsArray = Array.isArray(startValue);\n            var propType = startValueIsArray ? 'array' : typeof startValue;\n            var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n            // If `to()` specifies a property that doesn't exist in the source object,\n            // we should not set that property in the object\n            if (propType === 'undefined' || propType === 'function') {\n                continue;\n            }\n            // Check if an Array was provided as property value\n            if (isInterpolationList) {\n                var endValues = _valuesEnd[property];\n                if (endValues.length === 0) {\n                    continue;\n                }\n                // Handle an array of relative values.\n                // Creates a local copy of the Array with the start value at the front\n                var temp = [startValue];\n                for (var i = 0, l = endValues.length; i < l; i += 1) {\n                    var value = this._handleRelativeValue(startValue, endValues[i]);\n                    if (isNaN(value)) {\n                        isInterpolationList = false;\n                        console.warn('Found invalid interpolation list. Skipping.');\n                        break;\n                    }\n                    temp.push(value);\n                }\n                if (isInterpolationList) {\n                    // if (_valuesStart[property] === undefined) { // handle end values only the first time. NOT NEEDED? setupProperties is now guarded by _propertiesAreSetUp.\n                    _valuesEnd[property] = temp;\n                    // }\n                }\n            }\n            // handle the deepness of the values\n            if ((propType === 'object' || startValueIsArray) && startValue && !isInterpolationList) {\n                _valuesStart[property] = startValueIsArray ? [] : {};\n                var nestedObject = startValue;\n                for (var prop in nestedObject) {\n                    _valuesStart[property][prop] = nestedObject[prop];\n                }\n                // TODO? repeat nested values? And yoyo? And array values?\n                _valuesStartRepeat[property] = startValueIsArray ? [] : {};\n                var endValues = _valuesEnd[property];\n                // If dynamic is not enabled, clone the end values instead of using the passed-in end values.\n                if (!this._isDynamic) {\n                    var tmp = {};\n                    for (var prop in endValues)\n                        tmp[prop] = endValues[prop];\n                    _valuesEnd[property] = endValues = tmp;\n                }\n                this._setupProperties(nestedObject, _valuesStart[property], endValues, _valuesStartRepeat[property], overrideStartingValues);\n            }\n            else {\n                // Save the starting value, but only once unless override is requested.\n                if (typeof _valuesStart[property] === 'undefined' || overrideStartingValues) {\n                    _valuesStart[property] = startValue;\n                }\n                if (!startValueIsArray) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n                }\n                if (isInterpolationList) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();\n                }\n                else {\n                    _valuesStartRepeat[property] = _valuesStart[property] || 0;\n                }\n            }\n        }\n    };\n    Tween.prototype.stop = function () {\n        if (!this._isChainStopped) {\n            this._isChainStopped = true;\n            this.stopChainedTweens();\n        }\n        if (!this._isPlaying) {\n            return this;\n        }\n        this._isPlaying = false;\n        this._isPaused = false;\n        if (this._onStopCallback) {\n            this._onStopCallback(this._object);\n        }\n        return this;\n    };\n    Tween.prototype.end = function () {\n        this._goToEnd = true;\n        this.update(this._startTime + this._duration);\n        return this;\n    };\n    Tween.prototype.pause = function (time) {\n        if (time === void 0) { time = now(); }\n        if (this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = true;\n        this._pauseStart = time;\n        return this;\n    };\n    Tween.prototype.resume = function (time) {\n        if (time === void 0) { time = now(); }\n        if (!this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = false;\n        this._startTime += time - this._pauseStart;\n        this._pauseStart = 0;\n        return this;\n    };\n    Tween.prototype.stopChainedTweens = function () {\n        for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n            this._chainedTweens[i].stop();\n        }\n        return this;\n    };\n    Tween.prototype.group = function (group) {\n        if (!group) {\n            console.warn('tween.group() without args has been removed, use group.add(tween) instead.');\n            return this;\n        }\n        group.add(this);\n        return this;\n    };\n    /**\n     * Removes the tween from whichever group it is in.\n     */\n    Tween.prototype.remove = function () {\n        var _a;\n        (_a = this._group) === null || _a === void 0 ? void 0 : _a.remove(this);\n        return this;\n    };\n    Tween.prototype.delay = function (amount) {\n        if (amount === void 0) { amount = 0; }\n        this._delayTime = amount;\n        return this;\n    };\n    Tween.prototype.repeat = function (times) {\n        if (times === void 0) { times = 0; }\n        this._initialRepeat = times;\n        this._repeat = times;\n        return this;\n    };\n    Tween.prototype.repeatDelay = function (amount) {\n        this._repeatDelayTime = amount;\n        return this;\n    };\n    Tween.prototype.yoyo = function (yoyo) {\n        if (yoyo === void 0) { yoyo = false; }\n        this._yoyo = yoyo;\n        return this;\n    };\n    Tween.prototype.easing = function (easingFunction) {\n        if (easingFunction === void 0) { easingFunction = Easing.Linear.None; }\n        this._easingFunction = easingFunction;\n        return this;\n    };\n    Tween.prototype.interpolation = function (interpolationFunction) {\n        if (interpolationFunction === void 0) { interpolationFunction = Interpolation.Linear; }\n        this._interpolationFunction = interpolationFunction;\n        return this;\n    };\n    // eslint-disable-next-line\n    Tween.prototype.chain = function () {\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        this._chainedTweens = tweens;\n        return this;\n    };\n    Tween.prototype.onStart = function (callback) {\n        this._onStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onEveryStart = function (callback) {\n        this._onEveryStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onUpdate = function (callback) {\n        this._onUpdateCallback = callback;\n        return this;\n    };\n    Tween.prototype.onRepeat = function (callback) {\n        this._onRepeatCallback = callback;\n        return this;\n    };\n    Tween.prototype.onComplete = function (callback) {\n        this._onCompleteCallback = callback;\n        return this;\n    };\n    Tween.prototype.onStop = function (callback) {\n        this._onStopCallback = callback;\n        return this;\n    };\n    /**\n     * @returns true if the tween is still playing after the update, false\n     * otherwise (calling update on a paused tween still returns true because\n     * it is still playing, just paused).\n     *\n     * @param autoStart - When true, calling update will implicitly call start()\n     * as well. Note, if you stop() or end() the tween, but are still calling\n     * update(), it will start again!\n     */\n    Tween.prototype.update = function (time, autoStart) {\n        var _this = this;\n        var _a;\n        if (time === void 0) { time = now(); }\n        if (autoStart === void 0) { autoStart = Tween.autoStartOnUpdate; }\n        if (this._isPaused)\n            return true;\n        var property;\n        if (!this._goToEnd && !this._isPlaying) {\n            if (autoStart)\n                this.start(time, true);\n            else\n                return false;\n        }\n        this._goToEnd = false;\n        if (time < this._startTime) {\n            return true;\n        }\n        if (this._onStartCallbackFired === false) {\n            if (this._onStartCallback) {\n                this._onStartCallback(this._object);\n            }\n            this._onStartCallbackFired = true;\n        }\n        if (this._onEveryStartCallbackFired === false) {\n            if (this._onEveryStartCallback) {\n                this._onEveryStartCallback(this._object);\n            }\n            this._onEveryStartCallbackFired = true;\n        }\n        var elapsedTime = time - this._startTime;\n        var durationAndDelay = this._duration + ((_a = this._repeatDelayTime) !== null && _a !== void 0 ? _a : this._delayTime);\n        var totalTime = this._duration + this._repeat * durationAndDelay;\n        var calculateElapsedPortion = function () {\n            if (_this._duration === 0)\n                return 1;\n            if (elapsedTime > totalTime) {\n                return 1;\n            }\n            var timesRepeated = Math.trunc(elapsedTime / durationAndDelay);\n            var timeIntoCurrentRepeat = elapsedTime - timesRepeated * durationAndDelay;\n            // TODO use %?\n            // const timeIntoCurrentRepeat = elapsedTime % durationAndDelay\n            var portion = Math.min(timeIntoCurrentRepeat / _this._duration, 1);\n            if (portion === 0 && elapsedTime === _this._duration) {\n                return 1;\n            }\n            return portion;\n        };\n        var elapsed = calculateElapsedPortion();\n        var value = this._easingFunction(elapsed);\n        // properties transformations\n        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n        if (this._onUpdateCallback) {\n            this._onUpdateCallback(this._object, elapsed);\n        }\n        if (this._duration === 0 || elapsedTime >= this._duration) {\n            if (this._repeat > 0) {\n                var completeCount = Math.min(Math.trunc((elapsedTime - this._duration) / durationAndDelay) + 1, this._repeat);\n                if (isFinite(this._repeat)) {\n                    this._repeat -= completeCount;\n                }\n                // Reassign starting values, restart by making startTime = now\n                for (property in this._valuesStartRepeat) {\n                    if (!this._yoyo && typeof this._valuesEnd[property] === 'string') {\n                        this._valuesStartRepeat[property] =\n                            // eslint-disable-next-line\n                            // @ts-ignore FIXME?\n                            this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);\n                    }\n                    if (this._yoyo) {\n                        this._swapEndStartRepeatValues(property);\n                    }\n                    this._valuesStart[property] = this._valuesStartRepeat[property];\n                }\n                if (this._yoyo) {\n                    this._reversed = !this._reversed;\n                }\n                this._startTime += durationAndDelay * completeCount;\n                if (this._onRepeatCallback) {\n                    this._onRepeatCallback(this._object);\n                }\n                this._onEveryStartCallbackFired = false;\n                return true;\n            }\n            else {\n                if (this._onCompleteCallback) {\n                    this._onCompleteCallback(this._object);\n                }\n                for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n                    // Make the chained tweens start exactly at the time they should,\n                    // even if the `update()` method was called way past the duration of the tween\n                    this._chainedTweens[i].start(this._startTime + this._duration, false);\n                }\n                this._isPlaying = false;\n                return false;\n            }\n        }\n        return true;\n    };\n    Tween.prototype._updateProperties = function (_object, _valuesStart, _valuesEnd, value) {\n        for (var property in _valuesEnd) {\n            // Don't update properties that do not exist in the source object\n            if (_valuesStart[property] === undefined) {\n                continue;\n            }\n            var start = _valuesStart[property] || 0;\n            var end = _valuesEnd[property];\n            var startIsArray = Array.isArray(_object[property]);\n            var endIsArray = Array.isArray(end);\n            var isInterpolationList = !startIsArray && endIsArray;\n            if (isInterpolationList) {\n                _object[property] = this._interpolationFunction(end, value);\n            }\n            else if (typeof end === 'object' && end) {\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._updateProperties(_object[property], start, end, value);\n            }\n            else {\n                // Parses relative end values with start as base (e.g.: +10, -3)\n                end = this._handleRelativeValue(start, end);\n                // Protect against non numeric properties.\n                if (typeof end === 'number') {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _object[property] = start + (end - start) * value;\n                }\n            }\n        }\n    };\n    Tween.prototype._handleRelativeValue = function (start, end) {\n        if (typeof end !== 'string') {\n            return end;\n        }\n        if (end.charAt(0) === '+' || end.charAt(0) === '-') {\n            return start + parseFloat(end);\n        }\n        return parseFloat(end);\n    };\n    Tween.prototype._swapEndStartRepeatValues = function (property) {\n        var tmp = this._valuesStartRepeat[property];\n        var endValue = this._valuesEnd[property];\n        if (typeof endValue === 'string') {\n            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);\n        }\n        else {\n            this._valuesStartRepeat[property] = this._valuesEnd[property];\n        }\n        this._valuesEnd[property] = tmp;\n    };\n    Tween.autoStartOnUpdate = false;\n    return Tween;\n}());\n\nvar VERSION = '25.0.0';\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar nextId = Sequence.nextId;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tweens.\n */\nvar TWEEN = mainGroup;\n// This is the best way to export things in a way that's compatible with both ES\n// Modules and CommonJS, without build hacks, and so as not to break the\n// existing API.\n// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar getAll = TWEEN.getAll.bind(TWEEN);\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar removeAll = TWEEN.removeAll.bind(TWEEN);\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar add = TWEEN.add.bind(TWEEN);\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar remove = TWEEN.remove.bind(TWEEN);\n/**\n * @deprecated The global TWEEN Group will be removed in a following major\n * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n * group.\n *\n * Old code:\n *\n * ```js\n * import * as TWEEN from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new TWEEN.Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   TWEEN.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n *\n * New code:\n *\n * ```js\n * import {Tween, Group} from '@tweenjs/tween.js'\n *\n * //...\n *\n * const tween = new Tween(obj)\n * const tween2 = new TWEEN.Tween(obj2)\n *\n * //...\n *\n * const group = new Group()\n * group.add(tween)\n * group.add(tween2)\n *\n * //...\n *\n * requestAnimationFrame(function loop(time) {\n *   group.update(time)\n *   requestAnimationFrame(loop)\n * })\n * ```\n */\nvar update = TWEEN.update.bind(TWEEN);\nvar exports$1 = {\n    Easing: Easing,\n    Group: Group,\n    Interpolation: Interpolation,\n    now: now,\n    Sequence: Sequence,\n    nextId: nextId,\n    Tween: Tween,\n    VERSION: VERSION,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    getAll: getAll,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    removeAll: removeAll,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    add: add,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    remove: remove,\n    /**\n     * @deprecated The global TWEEN Group will be removed in a following major\n     * release. To migrate, create a `new Group()` instead of using `TWEEN` as a\n     * group.\n     *\n     * Old code:\n     *\n     * ```js\n     * import * as TWEEN from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new TWEEN.Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   TWEEN.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     *\n     * New code:\n     *\n     * ```js\n     * import {Tween, Group} from '@tweenjs/tween.js'\n     *\n     * //...\n     *\n     * const tween = new Tween(obj)\n     * const tween2 = new TWEEN.Tween(obj2)\n     *\n     * //...\n     *\n     * const group = new Group()\n     * group.add(tween)\n     * group.add(tween2)\n     *\n     * //...\n     *\n     * requestAnimationFrame(function loop(time) {\n     *   group.update(time)\n     *   requestAnimationFrame(loop)\n     * })\n     * ```\n     */\n    update: update,\n};\n\nexports.Easing = Easing;\nexports.Group = Group;\nexports.Interpolation = Interpolation;\nexports.Sequence = Sequence;\nexports.Tween = Tween;\nexports.VERSION = VERSION;\nexports.add = add;\nexports.default = exports$1;\nexports.getAll = getAll;\nexports.nextId = nextId;\nexports.now = now;\nexports.remove = remove;\nexports.removeAll = removeAll;\nexports.update = update;\n","/*\n * Copyright (c) 2015 cannon.js Authors\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use, copy,\n * modify, merge, publish, distribute, sublicense, and/or sell copies\n * of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&false)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.CANNON=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\nmodule.exports={\n  \"name\": \"cannon\",\n  \"version\": \"0.6.2\",\n  \"description\": \"A lightweight 3D physics engine written in JavaScript.\",\n  \"homepage\": \"https://github.com/schteppe/cannon.js\",\n  \"author\": \"Stefan Hedman <schteppe@gmail.com> (http://steffe.se)\",\n  \"keywords\": [\n    \"cannon.js\",\n    \"cannon\",\n    \"physics\",\n    \"engine\",\n    \"3d\"\n  ],\n  \"main\": \"./build/cannon.js\",\n  \"engines\": {\n    \"node\": \"*\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/schteppe/cannon.js.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/schteppe/cannon.js/issues\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"MIT\"\n    }\n  ],\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"uglify-js\": \"latest\",\n    \"nodeunit\": \"^0.9.0\",\n    \"grunt\": \"~0.4.0\",\n    \"grunt-contrib-jshint\": \"~0.1.1\",\n    \"grunt-contrib-nodeunit\": \"^0.4.1\",\n    \"grunt-contrib-concat\": \"~0.1.3\",\n    \"grunt-contrib-uglify\": \"^0.5.1\",\n    \"grunt-browserify\": \"^2.1.4\",\n    \"grunt-contrib-yuidoc\": \"^0.5.2\",\n    \"browserify\": \"*\"\n  },\n  \"dependencies\": {}\n}\n\n},{}],2:[function(_dereq_,module,exports){\n// Export classes\nmodule.exports = {\n    version :                       _dereq_('../package.json').version,\n\n    AABB :                          _dereq_('./collision/AABB'),\n    ArrayCollisionMatrix :          _dereq_('./collision/ArrayCollisionMatrix'),\n    Body :                          _dereq_('./objects/Body'),\n    Box :                           _dereq_('./shapes/Box'),\n    Broadphase :                    _dereq_('./collision/Broadphase'),\n    Constraint :                    _dereq_('./constraints/Constraint'),\n    ContactEquation :               _dereq_('./equations/ContactEquation'),\n    Narrowphase :                   _dereq_('./world/Narrowphase'),\n    ConeTwistConstraint :           _dereq_('./constraints/ConeTwistConstraint'),\n    ContactMaterial :               _dereq_('./material/ContactMaterial'),\n    ConvexPolyhedron :              _dereq_('./shapes/ConvexPolyhedron'),\n    Cylinder :                      _dereq_('./shapes/Cylinder'),\n    DistanceConstraint :            _dereq_('./constraints/DistanceConstraint'),\n    Equation :                      _dereq_('./equations/Equation'),\n    EventTarget :                   _dereq_('./utils/EventTarget'),\n    FrictionEquation :              _dereq_('./equations/FrictionEquation'),\n    GSSolver :                      _dereq_('./solver/GSSolver'),\n    GridBroadphase :                _dereq_('./collision/GridBroadphase'),\n    Heightfield :                   _dereq_('./shapes/Heightfield'),\n    HingeConstraint :               _dereq_('./constraints/HingeConstraint'),\n    LockConstraint :                _dereq_('./constraints/LockConstraint'),\n    Mat3 :                          _dereq_('./math/Mat3'),\n    Material :                      _dereq_('./material/Material'),\n    NaiveBroadphase :               _dereq_('./collision/NaiveBroadphase'),\n    ObjectCollisionMatrix :         _dereq_('./collision/ObjectCollisionMatrix'),\n    Pool :                          _dereq_('./utils/Pool'),\n    Particle :                      _dereq_('./shapes/Particle'),\n    Plane :                         _dereq_('./shapes/Plane'),\n    PointToPointConstraint :        _dereq_('./constraints/PointToPointConstraint'),\n    Quaternion :                    _dereq_('./math/Quaternion'),\n    Ray :                           _dereq_('./collision/Ray'),\n    RaycastVehicle :                _dereq_('./objects/RaycastVehicle'),\n    RaycastResult :                 _dereq_('./collision/RaycastResult'),\n    RigidVehicle :                  _dereq_('./objects/RigidVehicle'),\n    RotationalEquation :            _dereq_('./equations/RotationalEquation'),\n    RotationalMotorEquation :       _dereq_('./equations/RotationalMotorEquation'),\n    SAPBroadphase :                 _dereq_('./collision/SAPBroadphase'),\n    SPHSystem :                     _dereq_('./objects/SPHSystem'),\n    Shape :                         _dereq_('./shapes/Shape'),\n    Solver :                        _dereq_('./solver/Solver'),\n    Sphere :                        _dereq_('./shapes/Sphere'),\n    SplitSolver :                   _dereq_('./solver/SplitSolver'),\n    Spring :                        _dereq_('./objects/Spring'),\n    Trimesh :                       _dereq_('./shapes/Trimesh'),\n    Vec3 :                          _dereq_('./math/Vec3'),\n    Vec3Pool :                      _dereq_('./utils/Vec3Pool'),\n    World :                         _dereq_('./world/World'),\n};\n\n},{\"../package.json\":1,\"./collision/AABB\":3,\"./collision/ArrayCollisionMatrix\":4,\"./collision/Broadphase\":5,\"./collision/GridBroadphase\":6,\"./collision/NaiveBroadphase\":7,\"./collision/ObjectCollisionMatrix\":8,\"./collision/Ray\":9,\"./collision/RaycastResult\":10,\"./collision/SAPBroadphase\":11,\"./constraints/ConeTwistConstraint\":12,\"./constraints/Constraint\":13,\"./constraints/DistanceConstraint\":14,\"./constraints/HingeConstraint\":15,\"./constraints/LockConstraint\":16,\"./constraints/PointToPointConstraint\":17,\"./equations/ContactEquation\":19,\"./equations/Equation\":20,\"./equations/FrictionEquation\":21,\"./equations/RotationalEquation\":22,\"./equations/RotationalMotorEquation\":23,\"./material/ContactMaterial\":24,\"./material/Material\":25,\"./math/Mat3\":27,\"./math/Quaternion\":28,\"./math/Vec3\":30,\"./objects/Body\":31,\"./objects/RaycastVehicle\":32,\"./objects/RigidVehicle\":33,\"./objects/SPHSystem\":34,\"./objects/Spring\":35,\"./shapes/Box\":37,\"./shapes/ConvexPolyhedron\":38,\"./shapes/Cylinder\":39,\"./shapes/Heightfield\":40,\"./shapes/Particle\":41,\"./shapes/Plane\":42,\"./shapes/Shape\":43,\"./shapes/Sphere\":44,\"./shapes/Trimesh\":45,\"./solver/GSSolver\":46,\"./solver/Solver\":47,\"./solver/SplitSolver\":48,\"./utils/EventTarget\":49,\"./utils/Pool\":51,\"./utils/Vec3Pool\":54,\"./world/Narrowphase\":55,\"./world/World\":56}],3:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = AABB;\n\n/**\n * Axis aligned bounding box class.\n * @class AABB\n * @constructor\n * @param {Object} [options]\n * @param {Vec3}   [options.upperBound]\n * @param {Vec3}   [options.lowerBound]\n */\nfunction AABB(options){\n    options = options || {};\n\n    /**\n     * The lower bound of the bounding box.\n     * @property lowerBound\n     * @type {Vec3}\n     */\n    this.lowerBound = new Vec3();\n    if(options.lowerBound){\n        this.lowerBound.copy(options.lowerBound);\n    }\n\n    /**\n     * The upper bound of the bounding box.\n     * @property upperBound\n     * @type {Vec3}\n     */\n    this.upperBound = new Vec3();\n    if(options.upperBound){\n        this.upperBound.copy(options.upperBound);\n    }\n}\n\nvar tmp = new Vec3();\n\n/**\n * Set the AABB bounds from a set of points.\n * @method setFromPoints\n * @param {Array} points An array of Vec3's.\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {number} skinSize\n * @return {AABB} The self object\n */\nAABB.prototype.setFromPoints = function(points, position, quaternion, skinSize){\n    var l = this.lowerBound,\n        u = this.upperBound,\n        q = quaternion;\n\n    // Set to the first point\n    l.copy(points[0]);\n    if(q){\n        q.vmult(l, l);\n    }\n    u.copy(l);\n\n    for(var i = 1; i<points.length; i++){\n        var p = points[i];\n\n        if(q){\n            q.vmult(p, tmp);\n            p = tmp;\n        }\n\n        if(p.x > u.x){ u.x = p.x; }\n        if(p.x < l.x){ l.x = p.x; }\n        if(p.y > u.y){ u.y = p.y; }\n        if(p.y < l.y){ l.y = p.y; }\n        if(p.z > u.z){ u.z = p.z; }\n        if(p.z < l.z){ l.z = p.z; }\n    }\n\n    // Add offset\n    if (position) {\n        position.vadd(l, l);\n        position.vadd(u, u);\n    }\n\n    if(skinSize){\n        l.x -= skinSize;\n        l.y -= skinSize;\n        l.z -= skinSize;\n        u.x += skinSize;\n        u.y += skinSize;\n        u.z += skinSize;\n    }\n\n    return this;\n};\n\n/**\n * Copy bounds from an AABB to this AABB\n * @method copy\n * @param  {AABB} aabb Source to copy from\n * @return {AABB} The this object, for chainability\n */\nAABB.prototype.copy = function(aabb){\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n};\n\n/**\n * Clone an AABB\n * @method clone\n */\nAABB.prototype.clone = function(){\n    return new AABB().copy(this);\n};\n\n/**\n * Extend this AABB so that it covers the given AABB too.\n * @method extend\n * @param  {AABB} aabb\n */\nAABB.prototype.extend = function(aabb){\n    // Extend lower bound\n    var l = aabb.lowerBound.x;\n    if(this.lowerBound.x > l){\n        this.lowerBound.x = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.x;\n    if(this.upperBound.x < u){\n        this.upperBound.x = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.y;\n    if(this.lowerBound.y > l){\n        this.lowerBound.y = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.y;\n    if(this.upperBound.y < u){\n        this.upperBound.y = u;\n    }\n\n    // Extend lower bound\n    var l = aabb.lowerBound.z;\n    if(this.lowerBound.z > l){\n        this.lowerBound.z = l;\n    }\n\n    // Upper\n    var u = aabb.upperBound.z;\n    if(this.upperBound.z < u){\n        this.upperBound.z = u;\n    }\n};\n\n/**\n * Returns true if the given AABB overlaps this AABB.\n * @method overlaps\n * @param  {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.overlaps = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    return ((l2.x <= u1.x && u1.x <= u2.x) || (l1.x <= u2.x && u2.x <= u1.x)) &&\n           ((l2.y <= u1.y && u1.y <= u2.y) || (l1.y <= u2.y && u2.y <= u1.y)) &&\n           ((l2.z <= u1.z && u1.z <= u2.z) || (l1.z <= u2.z && u2.z <= u1.z));\n};\n\n/**\n * Returns true if the given AABB is fully contained in this AABB.\n * @method contains\n * @param {AABB} aabb\n * @return {Boolean}\n */\nAABB.prototype.contains = function(aabb){\n    var l1 = this.lowerBound,\n        u1 = this.upperBound,\n        l2 = aabb.lowerBound,\n        u2 = aabb.upperBound;\n\n    //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return (\n        (l1.x <= l2.x && u1.x >= u2.x) &&\n        (l1.y <= l2.y && u1.y >= u2.y) &&\n        (l1.z <= l2.z && u1.z >= u2.z)\n    );\n};\n\n/**\n * @method getCorners\n * @param {Vec3} a\n * @param {Vec3} b\n * @param {Vec3} c\n * @param {Vec3} d\n * @param {Vec3} e\n * @param {Vec3} f\n * @param {Vec3} g\n * @param {Vec3} h\n */\nAABB.prototype.getCorners = function(a, b, c, d, e, f, g, h){\n    var l = this.lowerBound,\n        u = this.upperBound;\n\n    a.copy(l);\n    b.set( u.x, l.y, l.z );\n    c.set( u.x, u.y, l.z );\n    d.set( l.x, u.y, u.z );\n    e.set( u.x, l.y, l.z );\n    f.set( l.x, u.y, l.z );\n    g.set( l.x, l.y, u.z );\n    h.copy(u);\n};\n\nvar transformIntoFrame_corners = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\n\n/**\n * Get the representation of an AABB in another frame.\n * @method toLocalFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toLocalFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n/**\n * Get the representation of an AABB in the global frame.\n * @method toWorldFrame\n * @param  {Transform} frame\n * @param  {AABB} target\n * @return {AABB} The \"target\" AABB object.\n */\nAABB.prototype.toWorldFrame = function(frame, target){\n\n    var corners = transformIntoFrame_corners;\n    var a = corners[0];\n    var b = corners[1];\n    var c = corners[2];\n    var d = corners[3];\n    var e = corners[4];\n    var f = corners[5];\n    var g = corners[6];\n    var h = corners[7];\n\n    // Get corners in current frame\n    this.getCorners(a, b, c, d, e, f, g, h);\n\n    // Transform them to new local frame\n    for(var i=0; i !== 8; i++){\n        var corner = corners[i];\n        frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n};\n\n},{\"../math/Vec3\":30,\"../utils/Utils\":53}],4:[function(_dereq_,module,exports){\nmodule.exports = ArrayCollisionMatrix;\n\n/**\n * Collision \"matrix\". It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n * @class ArrayCollisionMatrix\n * @constructor\n */\nfunction ArrayCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Array}\n     */\n\tthis.matrix = [];\n}\n\n/**\n * Get an element\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nArrayCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn this.matrix[(i*(i + 1)>>1) + j-1];\n};\n\n/**\n * Set an element\n * @method set\n * @param {Number} i\n * @param {Number} j\n * @param {Number} value\n */\nArrayCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.index;\n\tj = j.index;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\tthis.matrix[(i*(i + 1)>>1) + j-1] = value ? 1 : 0;\n};\n\n/**\n * Sets all elements to zero\n * @method reset\n */\nArrayCollisionMatrix.prototype.reset = function() {\n\tfor (var i=0, l=this.matrix.length; i!==l; i++) {\n\t\tthis.matrix[i]=0;\n\t}\n};\n\n/**\n * Sets the max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nArrayCollisionMatrix.prototype.setNumObjects = function(n) {\n\tthis.matrix.length = n*(n-1)>>1;\n};\n\n},{}],5:[function(_dereq_,module,exports){\nvar Body = _dereq_('../objects/Body');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Shape = _dereq_('../shapes/Shape');\nvar Plane = _dereq_('../shapes/Plane');\n\nmodule.exports = Broadphase;\n\n/**\n * Base class for broadphase implementations\n * @class Broadphase\n * @constructor\n * @author schteppe\n */\nfunction Broadphase(){\n    /**\n    * The world to search for collisions in.\n    * @property world\n    * @type {World}\n    */\n    this.world = null;\n\n    /**\n     * If set to true, the broadphase uses bounding boxes for intersection test, else it uses bounding spheres.\n     * @property useBoundingBoxes\n     * @type {Boolean}\n     */\n    this.useBoundingBoxes = false;\n\n    /**\n     * Set to true if the objects in the world moved.\n     * @property {Boolean} dirty\n     */\n    this.dirty = true;\n}\n\n/**\n * Get the collision pairs from the world\n * @method collisionPairs\n * @param {World} world The world to search in\n * @param {Array} p1 Empty array to be filled with body objects\n * @param {Array} p2 Empty array to be filled with body objects\n */\nBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    throw new Error(\"collisionPairs not implemented for this BroadPhase class!\");\n};\n\n/**\n * Check if a body pair needs to be intersection tested at all.\n * @method needBroadphaseCollision\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {bool}\n */\nvar Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC = Body.STATIC | Body.KINEMATIC;\nBroadphase.prototype.needBroadphaseCollision = function(bodyA,bodyB){\n\n    // Check collision filter masks\n    if( (bodyA.collisionFilterGroup & bodyB.collisionFilterMask)===0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask)===0){\n        return false;\n    }\n\n    // Check types\n    if(((bodyA.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyA.sleepState === Body.SLEEPING) &&\n       ((bodyB.type & Broadphase_needBroadphaseCollision_STATIC_OR_KINEMATIC)!==0 || bodyB.sleepState === Body.SLEEPING)) {\n        // Both bodies are static, kinematic or sleeping. Skip.\n        return false;\n    }\n\n    return true;\n};\n\n/**\n * Check if the bounding volumes of two bodies intersect.\n * @method intersectionTest\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {array} pairs1\n * @param {array} pairs2\n  */\nBroadphase.prototype.intersectionTest = function(bodyA, bodyB, pairs1, pairs2){\n    if(this.useBoundingBoxes){\n        this.doBoundingBoxBroadphase(bodyA,bodyB,pairs1,pairs2);\n    } else {\n        this.doBoundingSphereBroadphase(bodyA,bodyB,pairs1,pairs2);\n    }\n};\n\n/**\n * Check if the bounding spheres of two bodies are intersecting.\n * @method doBoundingSphereBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1 bodyA is appended to this array if intersection\n * @param {Array} pairs2 bodyB is appended to this array if intersection\n */\nvar Broadphase_collisionPairs_r = new Vec3(), // Temp objects\n    Broadphase_collisionPairs_normal =  new Vec3(),\n    Broadphase_collisionPairs_quat =  new Quaternion(),\n    Broadphase_collisionPairs_relpos  =  new Vec3();\nBroadphase.prototype.doBoundingSphereBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    var r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position,r);\n    var boundingRadiusSum2 = Math.pow(bodyA.boundingRadius + bodyB.boundingRadius, 2);\n    var norm2 = r.norm2();\n    if(norm2 < boundingRadiusSum2){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Check if the bounding boxes of two bodies are intersecting.\n * @method doBoundingBoxBroadphase\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nBroadphase.prototype.doBoundingBoxBroadphase = function(bodyA,bodyB,pairs1,pairs2){\n    if(bodyA.aabbNeedsUpdate){\n        bodyA.computeAABB();\n    }\n    if(bodyB.aabbNeedsUpdate){\n        bodyB.computeAABB();\n    }\n\n    // Check AABB / AABB\n    if(bodyA.aabb.overlaps(bodyB.aabb)){\n        pairs1.push(bodyA);\n        pairs2.push(bodyB);\n    }\n};\n\n/**\n * Removes duplicate pairs from the pair arrays.\n * @method makePairsUnique\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar Broadphase_makePairsUnique_temp = { keys:[] },\n    Broadphase_makePairsUnique_p1 = [],\n    Broadphase_makePairsUnique_p2 = [];\nBroadphase.prototype.makePairsUnique = function(pairs1,pairs2){\n    var t = Broadphase_makePairsUnique_temp,\n        p1 = Broadphase_makePairsUnique_p1,\n        p2 = Broadphase_makePairsUnique_p2,\n        N = pairs1.length;\n\n    for(var i=0; i!==N; i++){\n        p1[i] = pairs1[i];\n        p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for(var i=0; i!==N; i++){\n        var id1 = p1[i].id,\n            id2 = p2[i].id;\n        var key = id1 < id2 ? id1+\",\"+id2 :  id2+\",\"+id1;\n        t[key] = i;\n        t.keys.push(key);\n    }\n\n    for(var i=0; i!==t.keys.length; i++){\n        var key = t.keys.pop(),\n            pairIndex = t[key];\n        pairs1.push(p1[pairIndex]);\n        pairs2.push(p2[pairIndex]);\n        delete t[key];\n    }\n};\n\n/**\n * To be implemented by subcasses\n * @method setWorld\n * @param {World} world\n */\nBroadphase.prototype.setWorld = function(world){\n};\n\n/**\n * Check if the bounding spheres of two bodies overlap.\n * @method boundingSphereCheck\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @return {boolean}\n */\nvar bsc_dist = new Vec3();\nBroadphase.boundingSphereCheck = function(bodyA,bodyB){\n    var dist = bsc_dist;\n    bodyA.position.vsub(bodyB.position,dist);\n    return Math.pow(bodyA.shape.boundingSphereRadius + bodyB.shape.boundingSphereRadius,2) > dist.norm2();\n};\n\n/**\n * Returns all the bodies within the AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param  {array} result An array to store resulting bodies in.\n * @return {array}\n */\nBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n};\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Plane\":42,\"../shapes/Shape\":43}],6:[function(_dereq_,module,exports){\nmodule.exports = GridBroadphase;\n\nvar Broadphase = _dereq_('./Broadphase');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Shape = _dereq_('../shapes/Shape');\n\n/**\n * Axis aligned uniform grid broadphase.\n * @class GridBroadphase\n * @constructor\n * @extends Broadphase\n * @todo Needs support for more than just planes and spheres.\n * @param {Vec3} aabbMin\n * @param {Vec3} aabbMax\n * @param {Number} nx Number of boxes along x\n * @param {Number} ny Number of boxes along y\n * @param {Number} nz Number of boxes along z\n */\nfunction GridBroadphase(aabbMin,aabbMax,nx,ny,nz){\n    Broadphase.apply(this);\n    this.nx = nx || 10;\n    this.ny = ny || 10;\n    this.nz = nz || 10;\n    this.aabbMin = aabbMin || new Vec3(100,100,100);\n    this.aabbMax = aabbMax || new Vec3(-100,-100,-100);\n\tvar nbins = this.nx * this.ny * this.nz;\n\tif (nbins <= 0) {\n\t\tthrow \"GridBroadphase: Each dimension's n must be >0\";\n\t}\n    this.bins = [];\n\tthis.binLengths = []; //Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\tthis.bins.length = nbins;\n\tthis.binLengths.length = nbins;\n\tfor (var i=0;i<nbins;i++) {\n\t\tthis.bins[i]=[];\n\t\tthis.binLengths[i]=0;\n\t}\n}\nGridBroadphase.prototype = new Broadphase();\nGridBroadphase.prototype.constructor = GridBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nvar GridBroadphase_collisionPairs_d = new Vec3();\nvar GridBroadphase_collisionPairs_binPos = new Vec3();\nGridBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var N = world.numObjects(),\n        bodies = world.bodies;\n\n    var max = this.aabbMax,\n        min = this.aabbMin,\n        nx = this.nx,\n        ny = this.ny,\n        nz = this.nz;\n\n\tvar xstep = ny*nz;\n\tvar ystep = nz;\n\tvar zstep = 1;\n\n    var xmax = max.x,\n        ymax = max.y,\n        zmax = max.z,\n        xmin = min.x,\n        ymin = min.y,\n        zmin = min.z;\n\n    var xmult = nx / (xmax-xmin),\n        ymult = ny / (ymax-ymin),\n        zmult = nz / (zmax-zmin);\n\n    var binsizeX = (xmax - xmin) / nx,\n        binsizeY = (ymax - ymin) / ny,\n        binsizeZ = (zmax - zmin) / nz;\n\n\tvar binRadius = Math.sqrt(binsizeX*binsizeX + binsizeY*binsizeY + binsizeZ*binsizeZ) * 0.5;\n\n    var types = Shape.types;\n    var SPHERE =            types.SPHERE,\n        PLANE =             types.PLANE,\n        BOX =               types.BOX,\n        COMPOUND =          types.COMPOUND,\n        CONVEXPOLYHEDRON =  types.CONVEXPOLYHEDRON;\n\n    var bins=this.bins,\n\t\tbinLengths=this.binLengths,\n        Nbins=this.bins.length;\n\n    // Reset bins\n    for(var i=0; i!==Nbins; i++){\n        binLengths[i] = 0;\n    }\n\n    var ceil = Math.ceil;\n\tvar min = Math.min;\n\tvar max = Math.max;\n\n\tfunction addBoxToBins(x0,y0,z0,x1,y1,z1,bi) {\n\t\tvar xoff0 = ((x0 - xmin) * xmult)|0,\n\t\t\tyoff0 = ((y0 - ymin) * ymult)|0,\n\t\t\tzoff0 = ((z0 - zmin) * zmult)|0,\n\t\t\txoff1 = ceil((x1 - xmin) * xmult),\n\t\t\tyoff1 = ceil((y1 - ymin) * ymult),\n\t\t\tzoff1 = ceil((z1 - zmin) * zmult);\n\n\t\tif (xoff0 < 0) { xoff0 = 0; } else if (xoff0 >= nx) { xoff0 = nx - 1; }\n\t\tif (yoff0 < 0) { yoff0 = 0; } else if (yoff0 >= ny) { yoff0 = ny - 1; }\n\t\tif (zoff0 < 0) { zoff0 = 0; } else if (zoff0 >= nz) { zoff0 = nz - 1; }\n\t\tif (xoff1 < 0) { xoff1 = 0; } else if (xoff1 >= nx) { xoff1 = nx - 1; }\n\t\tif (yoff1 < 0) { yoff1 = 0; } else if (yoff1 >= ny) { yoff1 = ny - 1; }\n\t\tif (zoff1 < 0) { zoff1 = 0; } else if (zoff1 >= nz) { zoff1 = nz - 1; }\n\n\t\txoff0 *= xstep;\n\t\tyoff0 *= ystep;\n\t\tzoff0 *= zstep;\n\t\txoff1 *= xstep;\n\t\tyoff1 *= ystep;\n\t\tzoff1 *= zstep;\n\n\t\tfor (var xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n\t\t\tfor (var yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n\t\t\t\tfor (var zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n\t\t\t\t\tvar idx = xoff+yoff+zoff;\n\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n    // Put all bodies into the bins\n    for(var i=0; i!==N; i++){\n        var bi = bodies[i];\n        var si = bi.shape;\n\n        switch(si.type){\n        case SPHERE:\n            // Put in bin\n            // check if overlap with other bins\n            var x = bi.position.x,\n                y = bi.position.y,\n                z = bi.position.z;\n            var r = si.radius;\n\n\t\t\taddBoxToBins(x-r, y-r, z-r, x+r, y+r, z+r, bi);\n            break;\n\n        case PLANE:\n            if(si.worldNormalNeedsUpdate){\n                si.computeWorldNormal(bi.quaternion);\n            }\n            var planeNormal = si.worldNormal;\n\n\t\t\t//Relative position from origin of plane object to the first bin\n\t\t\t//Incremented as we iterate through the bins\n\t\t\tvar xreset = xmin + binsizeX*0.5 - bi.position.x,\n\t\t\t\tyreset = ymin + binsizeY*0.5 - bi.position.y,\n\t\t\t\tzreset = zmin + binsizeZ*0.5 - bi.position.z;\n\n            var d = GridBroadphase_collisionPairs_d;\n\t\t\td.set(xreset, yreset, zreset);\n\n\t\t\tfor (var xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n\t\t\t\tfor (var yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n\t\t\t\t\tfor (var zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n\t\t\t\t\t\tif (d.dot(planeNormal) < binRadius) {\n\t\t\t\t\t\t\tvar idx = xoff + yoff + zoff;\n\t\t\t\t\t\t\tbins[idx][binLengths[idx]++] = bi;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n            break;\n\n        default:\n\t\t\tif (bi.aabbNeedsUpdate) {\n\t\t\t\tbi.computeAABB();\n\t\t\t}\n\n\t\t\taddBoxToBins(\n\t\t\t\tbi.aabb.lowerBound.x,\n\t\t\t\tbi.aabb.lowerBound.y,\n\t\t\t\tbi.aabb.lowerBound.z,\n\t\t\t\tbi.aabb.upperBound.x,\n\t\t\t\tbi.aabb.upperBound.y,\n\t\t\t\tbi.aabb.upperBound.z,\n\t\t\t\tbi);\n            break;\n        }\n    }\n\n    // Check each bin\n    for(var i=0; i!==Nbins; i++){\n\t\tvar binLength = binLengths[i];\n\t\t//Skip bins with no potential collisions\n\t\tif (binLength > 1) {\n\t\t\tvar bin = bins[i];\n\n\t\t\t// Do N^2 broadphase inside\n\t\t\tfor(var xi=0; xi!==binLength; xi++){\n\t\t\t\tvar bi = bin[xi];\n\t\t\t\tfor(var yi=0; yi!==xi; yi++){\n\t\t\t\t\tvar bj = bin[yi];\n\t\t\t\t\tif(this.needBroadphaseCollision(bi,bj)){\n\t\t\t\t\t\tthis.intersectionTest(bi,bj,pairs1,pairs2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n//\tfor (var zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n//\t\tconsole.log(\"layer \"+zi);\n//\t\tfor (var yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n//\t\t\tvar row = '';\n//\t\t\tfor (var xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n//\t\t\t\tvar idx = xoff + yoff + zoff;\n//\t\t\t\trow += ' ' + binLengths[idx];\n//\t\t\t}\n//\t\t\tconsole.log(row);\n//\t\t}\n//\t}\n\n    this.makePairsUnique(pairs1,pairs2);\n};\n\n},{\"../math/Vec3\":30,\"../shapes/Shape\":43,\"./Broadphase\":5}],7:[function(_dereq_,module,exports){\nmodule.exports = NaiveBroadphase;\n\nvar Broadphase = _dereq_('./Broadphase');\nvar AABB = _dereq_('./AABB');\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n * @class NaiveBroadphase\n * @constructor\n * @description The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 (which is bad)\n * @extends Broadphase\n */\nfunction NaiveBroadphase(){\n    Broadphase.apply(this);\n}\nNaiveBroadphase.prototype = new Broadphase();\nNaiveBroadphase.prototype.constructor = NaiveBroadphase;\n\n/**\n * Get all the collision pairs in the physics world\n * @method collisionPairs\n * @param {World} world\n * @param {Array} pairs1\n * @param {Array} pairs2\n */\nNaiveBroadphase.prototype.collisionPairs = function(world,pairs1,pairs2){\n    var bodies = world.bodies,\n        n = bodies.length,\n        i,j,bi,bj;\n\n    // Naive N^2 ftw!\n    for(i=0; i!==n; i++){\n        for(j=0; j!==i; j++){\n\n            bi = bodies[i];\n            bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            this.intersectionTest(bi,bj,pairs1,pairs2);\n        }\n    }\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nNaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    for(var i = 0; i < world.bodies.length; i++){\n        var b = world.bodies[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        // Ugly hack until Body gets aabb\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n},{\"./AABB\":3,\"./Broadphase\":5}],8:[function(_dereq_,module,exports){\nmodule.exports = ObjectCollisionMatrix;\n\n/**\n * Records what objects are colliding with each other\n * @class ObjectCollisionMatrix\n * @constructor\n */\nfunction ObjectCollisionMatrix() {\n\n    /**\n     * The matrix storage\n     * @property matrix\n     * @type {Object}\n     */\n\tthis.matrix = {};\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nObjectCollisionMatrix.prototype.get = function(i, j) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n\treturn i+'-'+j in this.matrix;\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nObjectCollisionMatrix.prototype.set = function(i, j, value) {\n\ti = i.id;\n\tj = j.id;\n    if (j > i) {\n        var temp = j;\n        j = i;\n        i = temp;\n\t}\n\tif (value) {\n\t\tthis.matrix[i+'-'+j] = true;\n\t}\n\telse {\n\t\tdelete this.matrix[i+'-'+j];\n\t}\n};\n\n/**\n * Empty the matrix\n * @method reset\n */\nObjectCollisionMatrix.prototype.reset = function() {\n\tthis.matrix = {};\n};\n\n/**\n * Set max number of objects\n * @method setNumObjects\n * @param {Number} n\n */\nObjectCollisionMatrix.prototype.setNumObjects = function(n) {\n};\n\n},{}],9:[function(_dereq_,module,exports){\nmodule.exports = Ray;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\nvar ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');\nvar Box = _dereq_('../shapes/Box');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Shape = _dereq_('../shapes/Shape');\nvar AABB = _dereq_('../collision/AABB');\n\n/**\n * A line in 3D space that intersects bodies and return points.\n * @class Ray\n * @constructor\n * @param {Vec3} from\n * @param {Vec3} to\n */\nfunction Ray(from, to){\n    /**\n     * @property {Vec3} from\n     */\n    this.from = from ? from.clone() : new Vec3();\n\n    /**\n     * @property {Vec3} to\n     */\n    this.to = to ? to.clone() : new Vec3();\n\n    /**\n     * @private\n     * @property {Vec3} _direction\n     */\n    this._direction = new Vec3();\n\n    /**\n     * The precision of the ray. Used when checking parallelity etc.\n     * @property {Number} precision\n     */\n    this.precision = 0.0001;\n\n    /**\n     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n     * @property {Boolean} checkCollisionResponse\n     */\n    this.checkCollisionResponse = true;\n\n    /**\n     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n     * @property {Boolean} skipBackfaces\n     */\n    this.skipBackfaces = false;\n\n    /**\n     * @property {number} collisionFilterMask\n     * @default -1\n     */\n    this.collisionFilterMask = -1;\n\n    /**\n     * @property {number} collisionFilterGroup\n     * @default -1\n     */\n    this.collisionFilterGroup = -1;\n\n    /**\n     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n     * @property {number} mode\n     */\n    this.mode = Ray.ANY;\n\n    /**\n     * Current result object.\n     * @property {RaycastResult} result\n     */\n    this.result = new RaycastResult();\n\n    /**\n     * Will be set to true during intersectWorld() if the ray hit anything.\n     * @property {Boolean} hasHit\n     */\n    this.hasHit = false;\n\n    /**\n     * Current, user-provided result callback. Will be used if mode is Ray.ALL.\n     * @property {Function} callback\n     */\n    this.callback = function(result){};\n}\nRay.prototype.constructor = Ray;\n\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\n\nvar tmpAABB = new AABB();\nvar tmpArray = [];\n\n/**\n * Do itersection against all bodies in the given World.\n * @method intersectWorld\n * @param  {World} world\n * @param  {object} options\n * @return {Boolean} True if the ray hit anything, otherwise false.\n */\nRay.prototype.intersectWorld = function (world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof(options.collisionFilterMask) !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) !== 'undefined' ? options.collisionFilterGroup : -1;\n    if(options.from){\n        this.from.copy(options.from);\n    }\n    if(options.to){\n        this.to.copy(options.to);\n    }\n    this.callback = options.callback || function(){};\n    this.hasHit = false;\n\n    this.result.reset();\n    this._updateDirection();\n\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n\n    return this.hasHit;\n};\n\nvar v1 = new Vec3(),\n    v2 = new Vec3();\n\n/*\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\n */\nRay.pointInTriangle = pointInTriangle;\nfunction pointInTriangle(p, a, b, c) {\n    c.vsub(a,v0);\n    b.vsub(a,v1);\n    p.vsub(a,v2);\n\n    var dot00 = v0.dot( v0 );\n    var dot01 = v0.dot( v1 );\n    var dot02 = v0.dot( v2 );\n    var dot11 = v1.dot( v1 );\n    var dot12 = v1.dot( v2 );\n\n    var u,v;\n\n    return  ( (u = dot11 * dot02 - dot01 * dot12) >= 0 ) &&\n            ( (v = dot00 * dot12 - dot01 * dot02) >= 0 ) &&\n            ( u + v < ( dot00 * dot11 - dot01 * dot01 ) );\n}\n\n/**\n * Shoot a ray at a body, get back information about the hit.\n * @method intersectBody\n * @private\n * @param {Body} body\n * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\n */\nvar intersectBody_xi = new Vec3();\nvar intersectBody_qi = new Quaternion();\nRay.prototype.intersectBody = function (body, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n    var checkCollisionResponse = this.checkCollisionResponse;\n\n    if(checkCollisionResponse && !body.collisionResponse){\n        return;\n    }\n\n    if((this.collisionFilterGroup & body.collisionFilterMask)===0 || (body.collisionFilterGroup & this.collisionFilterMask)===0){\n        return;\n    }\n\n    var xi = intersectBody_xi;\n    var qi = intersectBody_qi;\n\n    for (var i = 0, N = body.shapes.length; i < N; i++) {\n        var shape = body.shapes[i];\n\n        if(checkCollisionResponse && !shape.collisionResponse){\n            continue; // Skip\n        }\n\n        body.quaternion.mult(body.shapeOrientations[i], qi);\n        body.quaternion.vmult(body.shapeOffsets[i], xi);\n        xi.vadd(body.position, xi);\n\n        this.intersectShape(\n            shape,\n            qi,\n            xi,\n            body\n        );\n\n        if(this.result._shouldStop){\n            break;\n        }\n    }\n};\n\n/**\n * @method intersectBodies\n * @param {Array} bodies An array of Body objects.\n * @param {RaycastResult} [result] Deprecated\n */\nRay.prototype.intersectBodies = function (bodies, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n\n    for ( var i = 0, l = bodies.length; !this.result._shouldStop && i < l; i ++ ) {\n        this.intersectBody(bodies[i]);\n    }\n};\n\n/**\n * Updates the _direction vector.\n * @private\n * @method _updateDirection\n */\nRay.prototype._updateDirection = function(){\n    this.to.vsub(this.from, this._direction);\n    this._direction.normalize();\n};\n\n/**\n * @method intersectShape\n * @private\n * @param {Shape} shape\n * @param {Quaternion} quat\n * @param {Vec3} position\n * @param {Body} body\n */\nRay.prototype.intersectShape = function(shape, quat, position, body){\n    var from = this.from;\n\n\n    // Checking boundingSphere\n    var distance = distanceFromIntersection(from, this._direction, position);\n    if ( distance > shape.boundingSphereRadius ) {\n        return;\n    }\n\n    var intersectMethod = this[shape.type];\n    if(intersectMethod){\n        intersectMethod.call(this, shape, quat, position, body);\n    }\n};\n\nvar vector = new Vec3();\nvar normal = new Vec3();\nvar intersectPoint = new Vec3();\n\nvar a = new Vec3();\nvar b = new Vec3();\nvar c = new Vec3();\nvar d = new Vec3();\n\nvar tmpRaycastResult = new RaycastResult();\n\n/**\n * @method intersectBox\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectBox = function(shape, quat, position, body){\n    return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body);\n};\nRay.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;\n\n/**\n * @method intersectPlane\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectPlane = function(shape, quat, position, body){\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    // Get plane normal\n    var worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n\n    var len = new Vec3();\n    from.vsub(position, len);\n    var planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    var planeToTo = len.dot(worldNormal);\n\n    if(planeToFrom * planeToTo > 0){\n        // \"from\" and \"to\" are on the same side of the plane... bail out\n        return;\n    }\n\n    if(from.distanceTo(to) < planeToFrom){\n        return;\n    }\n\n    var n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n        // No intersection\n        return;\n    }\n\n    var planePointToFrom = new Vec3();\n    var dir_scaled_with_t = new Vec3();\n    var hitPointWorld = new Vec3();\n\n    from.vsub(position, planePointToFrom);\n    var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n\n    this.reportIntersection(worldNormal, hitPointWorld, shape, body, -1);\n};\nRay.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;\n\n/**\n * Get the world AABB of the ray.\n * @method getAABB\n * @param  {AABB} aabb\n */\nRay.prototype.getAABB = function(result){\n    var to = this.to;\n    var from = this.from;\n    result.lowerBound.x = Math.min(to.x, from.x);\n    result.lowerBound.y = Math.min(to.y, from.y);\n    result.lowerBound.z = Math.min(to.z, from.z);\n    result.upperBound.x = Math.max(to.x, from.x);\n    result.upperBound.y = Math.max(to.y, from.y);\n    result.upperBound.z = Math.max(to.z, from.z);\n};\n\nvar intersectConvexOptions = {\n    faceList: [0]\n};\n\n/**\n * @method intersectHeightfield\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectHeightfield = function(shape, quat, position, body){\n    var data = shape.data,\n        w = shape.elementSize,\n        worldPillarOffset = new Vec3();\n\n    // Convert the ray to local heightfield coordinates\n    var localRay = new Ray(this.from, this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n\n    // Get the index of the data points to test against\n    var index = [];\n    var iMinX = null;\n    var iMinY = null;\n    var iMaxX = null;\n    var iMaxY = null;\n\n    var inside = shape.getIndexOfPosition(localRay.from.x, localRay.from.y, index, false);\n    if(inside){\n        iMinX = index[0];\n        iMinY = index[1];\n        iMaxX = index[0];\n        iMaxY = index[1];\n    }\n    inside = shape.getIndexOfPosition(localRay.to.x, localRay.to.y, index, false);\n    if(inside){\n        if (iMinX === null || index[0] < iMinX) { iMinX = index[0]; }\n        if (iMaxX === null || index[0] > iMaxX) { iMaxX = index[0]; }\n        if (iMinY === null || index[1] < iMinY) { iMinY = index[1]; }\n        if (iMaxY === null || index[1] > iMaxY) { iMaxY = index[1]; }\n    }\n\n    if(iMinX === null){\n        return;\n    }\n\n    var minMax = [];\n    shape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // // Bail out if the ray can't touch the bounding box\n    // // TODO\n    // var aabb = new AABB();\n    // this.getAABB(aabb);\n    // if(aabb.intersects()){\n    //     return;\n    // }\n\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Lower triangle\n            shape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Upper triangle\n            shape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, intersectConvexOptions);\n        }\n    }\n};\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;\n\nvar Ray_intersectSphere_intersectionPoint = new Vec3();\nvar Ray_intersectSphere_normal = new Vec3();\n\n/**\n * @method intersectSphere\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectSphere = function(shape, quat, position, body){\n    var from = this.from,\n        to = this.to,\n        r = shape.radius;\n\n    var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);\n    var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);\n\n    var delta = Math.pow(b, 2) - 4 * a * c;\n\n    var intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    var normal = Ray_intersectSphere_normal;\n\n    if(delta < 0){\n        // No intersection\n        return;\n\n    } else if(delta === 0){\n        // single intersection point\n        from.lerp(to, delta, intersectionPoint);\n\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n\n        this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n\n    } else {\n        var d1 = (- b - Math.sqrt(delta)) / (2 * a);\n        var d2 = (- b + Math.sqrt(delta)) / (2 * a);\n\n        if(d1 >= 0 && d1 <= 1){\n            from.lerp(to, d1, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n\n        if(this.result._shouldStop){\n            return;\n        }\n\n        if(d2 >= 0 && d2 <= 1){\n            from.lerp(to, d2, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, shape, body, -1);\n        }\n    }\n};\nRay.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;\n\n\nvar intersectConvex_normal = new Vec3();\nvar intersectConvex_minDistNormal = new Vec3();\nvar intersectConvex_minDistIntersect = new Vec3();\nvar intersectConvex_vector = new Vec3();\n\n/**\n * @method intersectConvex\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @param {array} [options.faceList]\n */\nRay.prototype.intersectConvex = function intersectConvex(\n    shape,\n    quat,\n    position,\n    body,\n    options\n){\n    var minDistNormal = intersectConvex_minDistNormal;\n    var normal = intersectConvex_normal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var faces = shape.faces,\n        vertices = shape.vertices,\n        normals = shape.faceNormals;\n    var direction = this._direction;\n\n    var from = this.from;\n    var to = this.to;\n    var fromToDistance = from.distanceTo(to);\n\n    var minDist = -1;\n    var Nfaces = faceList ? faceList.length : faces.length;\n    var result = this.result;\n\n    for (var j = 0; !result._shouldStop && j < Nfaces; j++) {\n        var fi = faceList ? faceList[j] : j;\n\n        var face = faces[fi];\n        var faceNormal = normals[fi];\n        var q = quat;\n        var x = position;\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        vector.copy(vertices[face[0]]);\n        q.vmult(vector,vector);\n        vector.vadd(x,vector);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        vector.vsub(from,vector);\n\n        // Get plane normal\n        q.vmult(faceNormal,normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = direction.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        if ( Math.abs( dot ) < this.precision ){\n            continue;\n        }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // if (dot < 0) {\n\n        // Intersection point is from + direction * scalar\n        direction.mult(scalar,intersectPoint);\n        intersectPoint.vadd(from,intersectPoint);\n\n        // a is the point we compare points b and c with.\n        a.copy(vertices[face[0]]);\n        q.vmult(a,a);\n        x.vadd(a,a);\n\n        for(var i = 1; !result._shouldStop && i < face.length - 1; i++){\n            // Transform 3 vertices to world coords\n            b.copy(vertices[face[i]]);\n            c.copy(vertices[face[i+1]]);\n            q.vmult(b,b);\n            q.vmult(c,c);\n            x.vadd(b,b);\n            x.vadd(c,c);\n\n            var distance = intersectPoint.distanceTo(from);\n\n            if(!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance){\n                continue;\n            }\n\n            this.reportIntersection(normal, intersectPoint, shape, body, fi);\n        }\n        // }\n    }\n};\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;\n\nvar intersectTrimesh_normal = new Vec3();\nvar intersectTrimesh_localDirection = new Vec3();\nvar intersectTrimesh_localFrom = new Vec3();\nvar intersectTrimesh_localTo = new Vec3();\nvar intersectTrimesh_worldNormal = new Vec3();\nvar intersectTrimesh_worldIntersectPoint = new Vec3();\nvar intersectTrimesh_localAABB = new AABB();\nvar intersectTrimesh_triangles = [];\nvar intersectTrimesh_treeTransform = new Transform();\n\n/**\n * @method intersectTrimesh\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @todo Optimize by transforming the world to local space first.\n * @todo Use Octree lookup\n */\nRay.prototype.intersectTrimesh = function intersectTrimesh(\n    mesh,\n    quat,\n    position,\n    body,\n    options\n){\n    var normal = intersectTrimesh_normal;\n    var triangles = intersectTrimesh_triangles;\n    var treeTransform = intersectTrimesh_treeTransform;\n    var minDistNormal = intersectConvex_minDistNormal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var localAABB = intersectTrimesh_localAABB;\n    var localDirection = intersectTrimesh_localDirection;\n    var localFrom = intersectTrimesh_localFrom;\n    var localTo = intersectTrimesh_localTo;\n    var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    var worldNormal = intersectTrimesh_worldNormal;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var indices = mesh.indices,\n        vertices = mesh.vertices,\n        normals = mesh.faceNormals;\n\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    var minDist = -1;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat);\n\n    // Transform ray to local space!\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    //body.vectorToLocalFrame(direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    //body.pointToLocalFrame(from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    //body.pointToLocalFrame(to, localTo);\n    var fromToDistanceSquared = localFrom.distanceSquared(localTo);\n\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (var i = 0, N = triangles.length; !this.result._shouldStop && i !== N; i++) {\n        var trianglesIndex = triangles[i];\n\n        mesh.getNormal(trianglesIndex, normal);\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        mesh.getVertex(indices[trianglesIndex * 3], a);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        a.vsub(localFrom,vector);\n\n        // Get plane normal\n        // quat.vmult(normal, normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = localDirection.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        // if (Math.abs( dot ) < this.precision){\n        //     continue;\n        // }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // Intersection point is from + direction * scalar\n        localDirection.scale(scalar,intersectPoint);\n        intersectPoint.vadd(localFrom,intersectPoint);\n\n        // Get triangle vertices\n        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n\n        var squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n        if(!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared){\n            continue;\n        }\n\n        // transform intersectpoint and normal to world\n        Transform.vectorToWorldFrame(quat, normal, worldNormal);\n        //body.vectorToWorldFrame(normal, worldNormal);\n        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n        //body.pointToWorldFrame(intersectPoint, worldIntersectPoint);\n        this.reportIntersection(worldNormal, worldIntersectPoint, mesh, body, trianglesIndex);\n    }\n    triangles.length = 0;\n};\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype.intersectTrimesh;\n\n\n/**\n * @method reportIntersection\n * @private\n * @param  {Vec3} normal\n * @param  {Vec3} hitPointWorld\n * @param  {Shape} shape\n * @param  {Body} body\n * @return {boolean} True if the intersections should continue\n */\nRay.prototype.reportIntersection = function(normal, hitPointWorld, shape, body, hitFaceIndex){\n    var from = this.from;\n    var to = this.to;\n    var distance = from.distanceTo(hitPointWorld);\n    var result = this.result;\n\n    // Skip back faces?\n    if(this.skipBackfaces && normal.dot(this._direction) > 0){\n        return;\n    }\n\n    result.hitFaceIndex = typeof(hitFaceIndex) !== 'undefined' ? hitFaceIndex : -1;\n\n    switch(this.mode){\n    case Ray.ALL:\n        this.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n    case Ray.CLOSEST:\n\n        // Store if closer than current closest\n        if(distance < result.distance || !result.hasHit){\n            this.hasHit = true;\n            result.hasHit = true;\n            result.set(\n                from,\n                to,\n                normal,\n                hitPointWorld,\n                shape,\n                body,\n                distance\n            );\n        }\n        break;\n\n    case Ray.ANY:\n\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result._shouldStop = true;\n        break;\n    }\n};\n\nvar v0 = new Vec3(),\n    intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n\n    // v0 is vector from from to position\n    position.vsub(from,v0);\n    var dot = v0.dot(direction);\n\n    // intersect = direction*dot + from\n    direction.mult(dot,intersect);\n    intersect.vadd(from,intersect);\n\n    var distance = position.distanceTo(intersect);\n\n    return distance;\n}\n\n\n},{\"../collision/AABB\":3,\"../collision/RaycastResult\":10,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/ConvexPolyhedron\":38,\"../shapes/Shape\":43}],10:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = RaycastResult;\n\n/**\n * Storage for Ray casting data.\n * @class RaycastResult\n * @constructor\n */\nfunction RaycastResult(){\n\n\t/**\n\t * @property {Vec3} rayFromWorld\n\t */\n\tthis.rayFromWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} rayToWorld\n\t */\n\tthis.rayToWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitNormalWorld\n\t */\n\tthis.hitNormalWorld = new Vec3();\n\n\t/**\n\t * @property {Vec3} hitPointWorld\n\t */\n\tthis.hitPointWorld = new Vec3();\n\n\t/**\n\t * @property {boolean} hasHit\n\t */\n\tthis.hasHit = false;\n\n\t/**\n\t * The hit shape, or null.\n\t * @property {Shape} shape\n\t */\n\tthis.shape = null;\n\n\t/**\n\t * The hit body, or null.\n\t * @property {Body} body\n\t */\n\tthis.body = null;\n\n\t/**\n\t * The index of the hit triangle, if the hit shape was a trimesh.\n\t * @property {number} hitFaceIndex\n\t * @default -1\n\t */\n\tthis.hitFaceIndex = -1;\n\n\t/**\n\t * Distance to the hit. Will be set to -1 if there was no hit.\n\t * @property {number} distance\n\t * @default -1\n\t */\n\tthis.distance = -1;\n\n\t/**\n\t * If the ray should stop traversing the bodies.\n\t * @private\n\t * @property {Boolean} _shouldStop\n\t * @default false\n\t */\n\tthis._shouldStop = false;\n}\n\n/**\n * Reset all result data.\n * @method reset\n */\nRaycastResult.prototype.reset = function () {\n\tthis.rayFromWorld.setZero();\n\tthis.rayToWorld.setZero();\n\tthis.hitNormalWorld.setZero();\n\tthis.hitPointWorld.setZero();\n\tthis.hasHit = false;\n\tthis.shape = null;\n\tthis.body = null;\n\tthis.hitFaceIndex = -1;\n\tthis.distance = -1;\n\tthis._shouldStop = false;\n};\n\n/**\n * @method abort\n */\nRaycastResult.prototype.abort = function(){\n\tthis._shouldStop = true;\n};\n\n/**\n * @method set\n * @param {Vec3} rayFromWorld\n * @param {Vec3} rayToWorld\n * @param {Vec3} hitNormalWorld\n * @param {Vec3} hitPointWorld\n * @param {Shape} shape\n * @param {Body} body\n * @param {number} distance\n */\nRaycastResult.prototype.set = function(\n\trayFromWorld,\n\trayToWorld,\n\thitNormalWorld,\n\thitPointWorld,\n\tshape,\n\tbody,\n\tdistance\n){\n\tthis.rayFromWorld.copy(rayFromWorld);\n\tthis.rayToWorld.copy(rayToWorld);\n\tthis.hitNormalWorld.copy(hitNormalWorld);\n\tthis.hitPointWorld.copy(hitPointWorld);\n\tthis.shape = shape;\n\tthis.body = body;\n\tthis.distance = distance;\n};\n},{\"../math/Vec3\":30}],11:[function(_dereq_,module,exports){\nvar Shape = _dereq_('../shapes/Shape');\nvar Broadphase = _dereq_('../collision/Broadphase');\n\nmodule.exports = SAPBroadphase;\n\n/**\n * Sweep and prune broadphase along one axis.\n *\n * @class SAPBroadphase\n * @constructor\n * @param {World} [world]\n * @extends Broadphase\n */\nfunction SAPBroadphase(world){\n    Broadphase.apply(this);\n\n    /**\n     * List of bodies currently in the broadphase.\n     * @property axisList\n     * @type {Array}\n     */\n    this.axisList = [];\n\n    /**\n     * The world to search in.\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Axis to sort the bodies along. Set to 0 for x axis, and 1 for y axis. For best performance, choose an axis that the bodies are spread out more on.\n     * @property axisIndex\n     * @type {Number}\n     */\n    this.axisIndex = 0;\n\n    var axisList = this.axisList;\n\n    this._addBodyHandler = function(e){\n        axisList.push(e.body);\n    };\n\n    this._removeBodyHandler = function(e){\n        var idx = axisList.indexOf(e.body);\n        if(idx !== -1){\n            axisList.splice(idx,1);\n        }\n    };\n\n    if(world){\n        this.setWorld(world);\n    }\n}\nSAPBroadphase.prototype = new Broadphase();\n\n/**\n * Change the world\n * @method setWorld\n * @param  {World} world\n */\nSAPBroadphase.prototype.setWorld = function(world){\n    // Clear the old axis array\n    this.axisList.length = 0;\n\n    // Add all bodies from the new world\n    for(var i=0; i<world.bodies.length; i++){\n        this.axisList.push(world.bodies[i]);\n    }\n\n    // Remove old handlers, if any\n    world.removeEventListener(\"addBody\", this._addBodyHandler);\n    world.removeEventListener(\"removeBody\", this._removeBodyHandler);\n\n    // Add handlers to update the list of bodies.\n    world.addEventListener(\"addBody\", this._addBodyHandler);\n    world.addEventListener(\"removeBody\", this._removeBodyHandler);\n\n    this.world = world;\n    this.dirty = true;\n};\n\n/**\n * @static\n * @method insertionSortX\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortX = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortY\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortY = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * @static\n * @method insertionSortZ\n * @param  {Array} a\n * @return {Array}\n */\nSAPBroadphase.insertionSortZ = function(a) {\n    for(var i=1,l=a.length;i<l;i++) {\n        var v = a[i];\n        for(var j=i - 1;j>=0;j--) {\n            if(a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z){\n                break;\n            }\n            a[j+1] = a[j];\n        }\n        a[j+1] = v;\n    }\n    return a;\n};\n\n/**\n * Collect all collision pairs\n * @method collisionPairs\n * @param  {World} world\n * @param  {Array} p1\n * @param  {Array} p2\n */\nSAPBroadphase.prototype.collisionPairs = function(world,p1,p2){\n    var bodies = this.axisList,\n        N = bodies.length,\n        axisIndex = this.axisIndex,\n        i, j;\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    // Look through the list\n    for(i=0; i !== N; i++){\n        var bi = bodies[i];\n\n        for(j=i+1; j < N; j++){\n            var bj = bodies[j];\n\n            if(!this.needBroadphaseCollision(bi,bj)){\n                continue;\n            }\n\n            if(!SAPBroadphase.checkBounds(bi,bj,axisIndex)){\n                break;\n            }\n\n            this.intersectionTest(bi,bj,p1,p2);\n        }\n    }\n};\n\nSAPBroadphase.prototype.sortList = function(){\n    var axisList = this.axisList;\n    var axisIndex = this.axisIndex;\n    var N = axisList.length;\n\n    // Update AABBs\n    for(var i = 0; i!==N; i++){\n        var bi = axisList[i];\n        if(bi.aabbNeedsUpdate){\n            bi.computeAABB();\n        }\n    }\n\n    // Sort the list\n    if(axisIndex === 0){\n        SAPBroadphase.insertionSortX(axisList);\n    } else if(axisIndex === 1){\n        SAPBroadphase.insertionSortY(axisList);\n    } else if(axisIndex === 2){\n        SAPBroadphase.insertionSortZ(axisList);\n    }\n};\n\n/**\n * Check if the bounds of two bodies overlap, along the given SAP axis.\n * @static\n * @method checkBounds\n * @param  {Body} bi\n * @param  {Body} bj\n * @param  {Number} axisIndex\n * @return {Boolean}\n */\nSAPBroadphase.checkBounds = function(bi, bj, axisIndex){\n    var biPos;\n    var bjPos;\n\n    if(axisIndex === 0){\n        biPos = bi.position.x;\n        bjPos = bj.position.x;\n    } else if(axisIndex === 1){\n        biPos = bi.position.y;\n        bjPos = bj.position.y;\n    } else if(axisIndex === 2){\n        biPos = bi.position.z;\n        bjPos = bj.position.z;\n    }\n\n    var ri = bi.boundingRadius,\n        rj = bj.boundingRadius,\n        boundA1 = biPos - ri,\n        boundA2 = biPos + ri,\n        boundB1 = bjPos - rj,\n        boundB2 = bjPos + rj;\n\n    return boundB1 < boundA2;\n};\n\n/**\n * Computes the variance of the body positions and estimates the best\n * axis to use. Will automatically set property .axisIndex.\n * @method autoDetectAxis\n */\nSAPBroadphase.prototype.autoDetectAxis = function(){\n    var sumX=0,\n        sumX2=0,\n        sumY=0,\n        sumY2=0,\n        sumZ=0,\n        sumZ2=0,\n        bodies = this.axisList,\n        N = bodies.length,\n        invN=1/N;\n\n    for(var i=0; i!==N; i++){\n        var b = bodies[i];\n\n        var centerX = b.position.x;\n        sumX += centerX;\n        sumX2 += centerX*centerX;\n\n        var centerY = b.position.y;\n        sumY += centerY;\n        sumY2 += centerY*centerY;\n\n        var centerZ = b.position.z;\n        sumZ += centerZ;\n        sumZ2 += centerZ*centerZ;\n    }\n\n    var varianceX = sumX2 - sumX*sumX*invN,\n        varianceY = sumY2 - sumY*sumY*invN,\n        varianceZ = sumZ2 - sumZ*sumZ*invN;\n\n    if(varianceX > varianceY){\n        if(varianceX > varianceZ){\n            this.axisIndex = 0;\n        } else{\n            this.axisIndex = 2;\n        }\n    } else if(varianceY > varianceZ){\n        this.axisIndex = 1;\n    } else{\n        this.axisIndex = 2;\n    }\n};\n\n/**\n * Returns all the bodies within an AABB.\n * @method aabbQuery\n * @param  {World} world\n * @param  {AABB} aabb\n * @param {array} result An array to store resulting bodies in.\n * @return {array}\n */\nSAPBroadphase.prototype.aabbQuery = function(world, aabb, result){\n    result = result || [];\n\n    if(this.dirty){\n        this.sortList();\n        this.dirty = false;\n    }\n\n    var axisIndex = this.axisIndex, axis = 'x';\n    if(axisIndex === 1){ axis = 'y'; }\n    if(axisIndex === 2){ axis = 'z'; }\n\n    var axisList = this.axisList;\n    var lower = aabb.lowerBound[axis];\n    var upper = aabb.upperBound[axis];\n    for(var i = 0; i < axisList.length; i++){\n        var b = axisList[i];\n\n        if(b.aabbNeedsUpdate){\n            b.computeAABB();\n        }\n\n        if(b.aabb.overlaps(aabb)){\n            result.push(b);\n        }\n    }\n\n    return result;\n};\n},{\"../collision/Broadphase\":5,\"../shapes/Shape\":43}],12:[function(_dereq_,module,exports){\nmodule.exports = ConeTwistConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar ConeEquation = _dereq_('../equations/ConeEquation');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * @class ConeTwistConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA]\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction ConeTwistConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    this.collideConnected = !!options.collideConnected;\n\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n\n    /**\n     * @property {ConeEquation} coneEquation\n     */\n    var c = this.coneEquation = new ConeEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} twistEquation\n     */\n    var t = this.twistEquation = new RotationalEquation(bodyA,bodyB,options);\n    this.twistAngle = typeof(options.twistAngle) !== 'undefined' ? options.twistAngle : 0;\n\n    // Make the cone equation push the bodies toward the cone axis, not outward\n    c.maxForce = 0;\n    c.minForce = -maxForce;\n\n    // Make the twist equation add torque toward the initial position\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n\n    this.equations.push(c, t);\n}\nConeTwistConstraint.prototype = new PointToPointConstraint();\nConeTwistConstraint.constructor = ConeTwistConstraint;\n\nvar ConeTwistConstraint_update_tmpVec1 = new Vec3();\nvar ConeTwistConstraint_update_tmpVec2 = new Vec3();\n\nConeTwistConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        cone = this.coneEquation,\n        twist = this.twistEquation;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Update the axes to the cone constraint\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB);\n\n    // Update the world axes in the twist constraint\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n};\n\n\n},{\"../equations/ConeEquation\":18,\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],13:[function(_dereq_,module,exports){\nmodule.exports = Constraint;\n\nvar Utils = _dereq_('../utils/Utils');\n\n/**\n * Constraint base class\n * @class Constraint\n * @author schteppe\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {boolean} [options.collideConnected=true]\n * @param {boolean} [options.wakeUpBodies=true]\n */\nfunction Constraint(bodyA, bodyB, options){\n    options = Utils.defaults(options,{\n        collideConnected : true,\n        wakeUpBodies : true,\n    });\n\n    /**\n     * Equations to be solved in this constraint\n     * @property equations\n     * @type {Array}\n     */\n    this.equations = [];\n\n    /**\n     * @property {Body} bodyA\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * @property {Body} bodyB\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * @property {Number} id\n     */\n    this.id = Constraint.idCounter++;\n\n    /**\n     * Set to true if you want the bodies to collide when they are connected.\n     * @property collideConnected\n     * @type {boolean}\n     */\n    this.collideConnected = options.collideConnected;\n\n    if(options.wakeUpBodies){\n        if(bodyA){\n            bodyA.wakeUp();\n        }\n        if(bodyB){\n            bodyB.wakeUp();\n        }\n    }\n}\n\n/**\n * Update all the equations with data.\n * @method update\n */\nConstraint.prototype.update = function(){\n    throw new Error(\"method update() not implmemented in this Constraint subclass!\");\n};\n\n/**\n * Enables all equations in the constraint.\n * @method enable\n */\nConstraint.prototype.enable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = true;\n    }\n};\n\n/**\n * Disables all equations in the constraint.\n * @method disable\n */\nConstraint.prototype.disable = function(){\n    var eqs = this.equations;\n    for(var i=0; i<eqs.length; i++){\n        eqs[i].enabled = false;\n    }\n};\n\nConstraint.idCounter = 0;\n\n},{\"../utils/Utils\":53}],14:[function(_dereq_,module,exports){\nmodule.exports = DistanceConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\n\n/**\n * Constrains two bodies to be at a constant distance from each others center of mass.\n * @class DistanceConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} [distance] The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n * @param {Number} [maxForce=1e6]\n * @extends Constraint\n */\nfunction DistanceConstraint(bodyA,bodyB,distance,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    if(typeof(distance)===\"undefined\") {\n        distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    if(typeof(maxForce)===\"undefined\") {\n        maxForce = 1e6;\n    }\n\n    /**\n     * @property {number} distance\n     */\n    this.distance = distance;\n\n    /**\n     * @property {ContactEquation} distanceEquation\n     */\n    var eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq);\n\n    // Make it bidirectional\n    eq.minForce = -maxForce;\n    eq.maxForce =  maxForce;\n}\nDistanceConstraint.prototype = new Constraint();\n\nDistanceConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var eq = this.distanceEquation;\n    var halfDist = this.distance * 0.5;\n    var normal = eq.ni;\n\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.mult(halfDist, eq.ri);\n    normal.mult(-halfDist, eq.rj);\n};\n},{\"../equations/ContactEquation\":19,\"./Constraint\":13}],15:[function(_dereq_,module,exports){\nmodule.exports = HingeConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n * @class HingeConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Vec3} [options.pivotA] A point defined locally in bodyA. This defines the offset of axisA.\n * @param {Vec3} [options.axisA] An axis that bodyA can rotate around, defined locally in bodyA.\n * @param {Vec3} [options.pivotB]\n * @param {Vec3} [options.axisB]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction HingeConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n    var pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    var pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * Rotation axis, defined locally in bodyA.\n     * @property {Vec3} axisA\n     */\n    var axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1,0,0);\n    axisA.normalize();\n\n    /**\n     * Rotation axis, defined locally in bodyB.\n     * @property {Vec3} axisB\n     */\n    var axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1,0,0);\n    axisB.normalize();\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalMotorEquation} motorEquation\n     */\n    var motor = this.motorEquation = new RotationalMotorEquation(bodyA,bodyB,maxForce);\n    motor.enabled = false; // Not enabled by default\n\n    // Equations to be fed to the solver\n    this.equations.push(\n        r1, // rotational1\n        r2, // rotational2\n        motor\n    );\n}\nHingeConstraint.prototype = new PointToPointConstraint();\nHingeConstraint.constructor = HingeConstraint;\n\n/**\n * @method enableMotor\n */\nHingeConstraint.prototype.enableMotor = function(){\n    this.motorEquation.enabled = true;\n};\n\n/**\n * @method disableMotor\n */\nHingeConstraint.prototype.disableMotor = function(){\n    this.motorEquation.enabled = false;\n};\n\n/**\n * @method setMotorSpeed\n * @param {number} speed\n */\nHingeConstraint.prototype.setMotorSpeed = function(speed){\n    this.motorEquation.targetVelocity = speed;\n};\n\n/**\n * @method setMotorMaxForce\n * @param {number} maxForce\n */\nHingeConstraint.prototype.setMotorMaxForce = function(maxForce){\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n};\n\nvar HingeConstraint_update_tmpVec1 = new Vec3();\nvar HingeConstraint_update_tmpVec2 = new Vec3();\n\nHingeConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        worldAxisA = HingeConstraint_update_tmpVec1,\n        worldAxisB = HingeConstraint_update_tmpVec2;\n\n    var axisA = this.axisA;\n    var axisB = this.axisB;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    // Get world axes\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if(this.motorEquation.enabled){\n        bodyA.quaternion.vmult(this.axisA, motor.axisA);\n        bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n};\n\n\n},{\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../equations/RotationalMotorEquation\":23,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],16:[function(_dereq_,module,exports){\nmodule.exports = LockConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar PointToPointConstraint = _dereq_('./PointToPointConstraint');\nvar RotationalEquation = _dereq_('../equations/RotationalEquation');\nvar RotationalMotorEquation = _dereq_('../equations/RotationalMotorEquation');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Lock constraint. Will remove all degrees of freedom between the bodies.\n * @class LockConstraint\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {object} [options]\n * @param {Number} [options.maxForce=1e6]\n * @extends PointToPointConstraint\n */\nfunction LockConstraint(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    // Set pivot point in between\n    var pivotA = new Vec3();\n    var pivotB = new Vec3();\n    var halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA);\n    PointToPointConstraint.call(this, bodyA, pivotA, bodyB, pivotB, maxForce);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation1\n     */\n    var r1 = this.rotationalEquation1 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation2\n     */\n    var r2 = this.rotationalEquation2 = new RotationalEquation(bodyA,bodyB,options);\n\n    /**\n     * @property {RotationalEquation} rotationalEquation3\n     */\n    var r3 = this.rotationalEquation3 = new RotationalEquation(bodyA,bodyB,options);\n\n    this.equations.push(r1, r2, r3);\n}\nLockConstraint.prototype = new PointToPointConstraint();\nLockConstraint.constructor = LockConstraint;\n\nvar LockConstraint_update_tmpVec1 = new Vec3();\nvar LockConstraint_update_tmpVec2 = new Vec3();\n\nLockConstraint.prototype.update = function(){\n    var bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        motor = this.motorEquation,\n        r1 = this.rotationalEquation1,\n        r2 = this.rotationalEquation2,\n        r3 = this.rotationalEquation3,\n        worldAxisA = LockConstraint_update_tmpVec1,\n        worldAxisB = LockConstraint_update_tmpVec2;\n\n    PointToPointConstraint.prototype.update.call(this);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_X, r1.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Y, r1.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Y, r2.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_Z, r2.axisB);\n\n    bodyA.vectorToWorldFrame(Vec3.UNIT_Z, r3.axisA);\n    bodyB.vectorToWorldFrame(Vec3.UNIT_X, r3.axisB);\n};\n\n\n},{\"../equations/ContactEquation\":19,\"../equations/RotationalEquation\":22,\"../equations/RotationalMotorEquation\":23,\"../math/Vec3\":30,\"./Constraint\":13,\"./PointToPointConstraint\":17}],17:[function(_dereq_,module,exports){\nmodule.exports = PointToPointConstraint;\n\nvar Constraint = _dereq_('./Constraint');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Connects two bodies at given offset points.\n * @class PointToPointConstraint\n * @extends Constraint\n * @constructor\n * @param {Body} bodyA\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n * @param {Vec3} pivotB See pivotA.\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\n *\n * @example\n *     var bodyA = new Body({ mass: 1 });\n *     var bodyB = new Body({ mass: 1 });\n *     bodyA.position.set(-1, 0, 0);\n *     bodyB.position.set(1, 0, 0);\n *     bodyA.addShape(shapeA);\n *     bodyB.addShape(shapeB);\n *     world.addBody(bodyA);\n *     world.addBody(bodyB);\n *     var localPivotA = new Vec3(1, 0, 0);\n *     var localPivotB = new Vec3(-1, 0, 0);\n *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\n *     world.addConstraint(constraint);\n */\nfunction PointToPointConstraint(bodyA,pivotA,bodyB,pivotB,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n\n    /**\n     * Pivot, defined locally in bodyA.\n     * @property {Vec3} pivotA\n     */\n    this.pivotA = pivotA ? pivotA.clone() : new Vec3();\n\n    /**\n     * Pivot, defined locally in bodyB.\n     * @property {Vec3} pivotB\n     */\n    this.pivotB = pivotB ? pivotB.clone() : new Vec3();\n\n    /**\n     * @property {ContactEquation} equationX\n     */\n    var x = this.equationX = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationY\n     */\n    var y = this.equationY = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationZ\n     */\n    var z = this.equationZ = new ContactEquation(bodyA,bodyB);\n\n    // Equations to be fed to the solver\n    this.equations.push(x, y, z);\n\n    // Make the equations bidirectional\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce =  maxForce;\n\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n}\nPointToPointConstraint.prototype = new Constraint();\n\nPointToPointConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var x = this.equationX;\n    var y = this.equationY;\n    var z = this.equationZ;\n\n    // Rotate the pivots to world space\n    bodyA.quaternion.vmult(this.pivotA,x.ri);\n    bodyB.quaternion.vmult(this.pivotB,x.rj);\n\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n};\n},{\"../equations/ContactEquation\":19,\"../math/Vec3\":30,\"./Constraint\":13}],18:[function(_dereq_,module,exports){\nmodule.exports = ConeEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n * @class ConeEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA] Local axis in A\n * @param {Vec3} [options.axisB] Local axis in B\n * @param {Vec3} [options.angle] The \"cone angle\" to keep\n * @param {number} [options.maxForce=1e6]\n * @extends Equation\n */\nfunction ConeEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    /**\n     * The cone angle to keep\n     * @property {number} angle\n     */\n    this.angle = typeof(options.angle) !== 'undefined' ? options.angle : 0;\n}\n\nConeEquation.prototype = new Equation();\nConeEquation.prototype.constructor = ConeEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nConeEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.angle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],19:[function(_dereq_,module,exports){\nmodule.exports = ContactEquation;\n\nvar Equation = _dereq_('./Equation');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\n\n/**\n * Contact/non-penetration constraint equation\n * @class ContactEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @extends Equation\n */\nfunction ContactEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n    Equation.call(this, bodyA, bodyB, 0, maxForce);\n\n    /**\n     * @property restitution\n     * @type {Number}\n     */\n    this.restitution = 0.0; // \"bounciness\": u1 = -e*u0\n\n    /**\n     * World-oriented vector that goes from the center of bi to the contact point.\n     * @property {Vec3} ri\n     */\n    this.ri = new Vec3();\n\n    /**\n     * World-oriented vector that starts in body j position and goes to the contact point.\n     * @property {Vec3} rj\n     */\n    this.rj = new Vec3();\n\n    /**\n     * Contact normal, pointing out of body i.\n     * @property {Vec3} ni\n     */\n    this.ni = new Vec3();\n}\n\nContactEquation.prototype = new Equation();\nContactEquation.prototype.constructor = ContactEquation;\n\nvar ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\nvar ContactEquation_computeB_temp2 = new Vec3();\nvar ContactEquation_computeB_temp3 = new Vec3();\nContactEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixn = ContactEquation_computeB_temp1,\n        rjxn = ContactEquation_computeB_temp2,\n\n        vi = bi.velocity,\n        wi = bi.angularVelocity,\n        fi = bi.force,\n        taui = bi.torque,\n\n        vj = bj.velocity,\n        wj = bj.angularVelocity,\n        fj = bj.force,\n        tauj = bj.torque,\n\n        penetrationVec = ContactEquation_computeB_temp3,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n\n        n = this.ni;\n\n    // Caluclate cross products\n    ri.cross(n,rixn);\n    rj.cross(n,rjxn);\n\n    // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn);\n\n    // Calculate the penetration vector\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj,penetrationVec);\n    penetrationVec.vsub(bi.position,penetrationVec);\n    penetrationVec.vsub(ri,penetrationVec);\n\n    var g = n.dot(penetrationVec);\n\n    // Compute iteration\n    var ePlusOne = this.restitution + 1;\n    var GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    var GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h*GiMf;\n\n    return B;\n};\n\nvar ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nvar ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\n * Get the current relative velocity in the contact point.\n * @method getImpactVelocityAlongNormal\n * @return {number}\n */\nContactEquation.prototype.getImpactVelocityAlongNormal = function(){\n    var vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    var vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    var xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    var xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    var relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n\n    vi.vsub(vj, relVel);\n\n    return this.ni.dot(relVel);\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],20:[function(_dereq_,module,exports){\nmodule.exports = Equation;\n\nvar JacobianElement = _dereq_('../math/JacobianElement'),\n    Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Equation base class\n * @class Equation\n * @constructor\n * @author schteppe\n * @param {Body} bi\n * @param {Body} bj\n * @param {Number} minForce Minimum (read: negative max) force to be applied by the constraint.\n * @param {Number} maxForce Maximum (read: positive max) force to be applied by the constraint.\n */\nfunction Equation(bi,bj,minForce,maxForce){\n    this.id = Equation.id++;\n\n    /**\n     * @property {number} minForce\n     */\n    this.minForce = typeof(minForce)===\"undefined\" ? -1e6 : minForce;\n\n    /**\n     * @property {number} maxForce\n     */\n    this.maxForce = typeof(maxForce)===\"undefined\" ? 1e6 : maxForce;\n\n    /**\n     * @property bi\n     * @type {Body}\n     */\n    this.bi = bi;\n\n    /**\n     * @property bj\n     * @type {Body}\n     */\n    this.bj = bj;\n\n    /**\n     * SPOOK parameter\n     * @property {number} a\n     */\n    this.a = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} b\n     */\n    this.b = 0.0;\n\n    /**\n     * SPOOK parameter\n     * @property {number} eps\n     */\n    this.eps = 0.0;\n\n    /**\n     * @property {JacobianElement} jacobianElementA\n     */\n    this.jacobianElementA = new JacobianElement();\n\n    /**\n     * @property {JacobianElement} jacobianElementB\n     */\n    this.jacobianElementB = new JacobianElement();\n\n    /**\n     * @property {boolean} enabled\n     * @default true\n     */\n    this.enabled = true;\n\n    // Set typical spook params\n    this.setSpookParams(1e7,4,1/60);\n}\nEquation.prototype.constructor = Equation;\n\nEquation.id = 0;\n\n/**\n * Recalculates a,b,eps.\n * @method setSpookParams\n */\nEquation.prototype.setSpookParams = function(stiffness,relaxation,timeStep){\n    var d = relaxation,\n        k = stiffness,\n        h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = (4.0 * d) / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n};\n\n/**\n * Computes the RHS of the SPOOK equation\n * @method computeB\n * @return {Number}\n */\nEquation.prototype.computeB = function(a,b,h){\n    var GW = this.computeGW(),\n        Gq = this.computeGq(),\n        GiMf = this.computeGiMf();\n    return - Gq * a - GW * b - GiMf*h;\n};\n\n/**\n * Computes G*q, where q are the generalized body coordinates\n * @method computeGq\n * @return {Number}\n */\nEquation.prototype.computeGq = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        xi = bi.position,\n        xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n};\n\nvar zero = new Vec3();\n\n/**\n * Computes G*W, where W are the body velocities\n * @method computeGW\n * @return {Number}\n */\nEquation.prototype.computeGW = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.velocity,\n        vj = bj.velocity,\n        wi = bi.angularVelocity || zero,\n        wj = bj.angularVelocity || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n\n/**\n * Computes G*Wlambda, where W are the body velocities\n * @method computeGWlambda\n * @return {Number}\n */\nEquation.prototype.computeGWlambda = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        vi = bi.vlambda,\n        vj = bj.vlambda,\n        wi = bi.wlambda || zero,\n        wj = bj.wlambda || zero;\n    return GA.multiplyVectors(vi,wi) + GB.multiplyVectors(vj,wj);\n};\n\n/**\n * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n * @method computeGiMf\n * @return {Number}\n */\nvar iMfi = new Vec3(),\n    iMfj = new Vec3(),\n    invIi_vmult_taui = new Vec3(),\n    invIj_vmult_tauj = new Vec3();\nEquation.prototype.computeGiMf = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        fi = bi.force,\n        ti = bi.torque,\n        fj = bj.force,\n        tj = bj.torque,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve;\n\n    if(bi.invInertiaWorldSolve){ bi.invInertiaWorldSolve.vmult(ti,invIi_vmult_taui); }\n    else { invIi_vmult_taui.set(0,0,0); }\n    if(bj.invInertiaWorldSolve){ bj.invInertiaWorldSolve.vmult(tj,invIj_vmult_tauj); }\n    else { invIj_vmult_tauj.set(0,0,0); }\n\n    fi.mult(invMassi,iMfi);\n    fj.mult(invMassj,iMfj);\n\n    return GA.multiplyVectors(iMfi,invIi_vmult_taui) + GB.multiplyVectors(iMfj,invIj_vmult_tauj);\n};\n\n/**\n * Computes G*inv(M)*G'\n * @method computeGiMGt\n * @return {Number}\n */\nvar tmp = new Vec3();\nEquation.prototype.computeGiMGt = function(){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        invMassi = bi.invMassSolve,\n        invMassj = bj.invMassSolve,\n        invIi = bi.invInertiaWorldSolve,\n        invIj = bj.invInertiaWorldSolve,\n        result = invMassi + invMassj;\n\n    if(invIi){\n        invIi.vmult(GA.rotational,tmp);\n        result += tmp.dot(GA.rotational);\n    }\n\n    if(invIj){\n        invIj.vmult(GB.rotational,tmp);\n        result += tmp.dot(GB.rotational);\n    }\n\n    return  result;\n};\n\nvar addToWlambda_temp = new Vec3(),\n    addToWlambda_Gi = new Vec3(),\n    addToWlambda_Gj = new Vec3(),\n    addToWlambda_ri = new Vec3(),\n    addToWlambda_rj = new Vec3(),\n    addToWlambda_Mdiag = new Vec3();\n\n/**\n * Add constraint velocity to the bodies.\n * @method addToWlambda\n * @param {Number} deltalambda\n */\nEquation.prototype.addToWlambda = function(deltalambda){\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB,\n        bi = this.bi,\n        bj = this.bj,\n        temp = addToWlambda_temp;\n\n    // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n    GA.spatial.mult(bi.invMassSolve * deltalambda,temp);\n    bi.vlambda.vadd(temp, bi.vlambda);\n\n    GB.spatial.mult(bj.invMassSolve * deltalambda,temp);\n    bj.vlambda.vadd(temp, bj.vlambda);\n\n    // Add to angular velocity\n    if(bi.invInertiaWorldSolve){\n        bi.invInertiaWorldSolve.vmult(GA.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bi.wlambda.vadd(temp,bi.wlambda);\n    }\n\n    if(bj.invInertiaWorldSolve){\n        bj.invInertiaWorldSolve.vmult(GB.rotational,temp);\n        temp.mult(deltalambda,temp);\n        bj.wlambda.vadd(temp,bj.wlambda);\n    }\n};\n\n/**\n * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n * @method computeInvC\n * @param  {Number} eps\n * @return {Number}\n */\nEquation.prototype.computeC = function(){\n    return this.computeGiMGt() + this.eps;\n};\n\n},{\"../math/JacobianElement\":26,\"../math/Vec3\":30}],21:[function(_dereq_,module,exports){\nmodule.exports = FrictionEquation;\n\nvar Equation = _dereq_('./Equation');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\n\n/**\n * Constrains the slipping in a contact along a tangent\n * @class FrictionEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n * @extends Equation\n */\nfunction FrictionEquation(bodyA, bodyB, slipForce){\n    Equation.call(this,bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3(); // tangent\n}\n\nFrictionEquation.prototype = new Equation();\nFrictionEquation.prototype.constructor = FrictionEquation;\n\nvar FrictionEquation_computeB_temp1 = new Vec3();\nvar FrictionEquation_computeB_temp2 = new Vec3();\nFrictionEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n        ri = this.ri,\n        rj = this.rj,\n        rixt = FrictionEquation_computeB_temp1,\n        rjxt = FrictionEquation_computeB_temp2,\n        t = this.t;\n\n    // Caluclate cross products\n    ri.cross(t,rixt);\n    rj.cross(t,rjxt);\n\n    // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n    var GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n\n    var GW = this.computeGW();\n    var GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],22:[function(_dereq_,module,exports){\nmodule.exports = RotationalEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n * @class RotationalEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec3} [options.axisA]\n * @param {Vec3} [options.axisB]\n * @param {number} [options.maxForce]\n * @extends Equation\n */\nfunction RotationalEquation(bodyA, bodyB, options){\n    options = options || {};\n    var maxForce = typeof(options.maxForce) !== 'undefined' ? options.maxForce : 1e6;\n\n    Equation.call(this,bodyA,bodyB,-maxForce, maxForce);\n\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n\n    this.maxAngle = Math.PI / 2;\n}\n\nRotationalEquation.prototype = new Equation();\nRotationalEquation.prototype.constructor = RotationalEquation;\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\n\nRotationalEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n\n        ni = this.axisA,\n        nj = this.axisB,\n\n        nixnj = tmpVec1,\n        njxni = tmpVec2,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // Caluclate cross products\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni);\n\n    // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n\n    var g = Math.cos(this.maxAngle) - ni.dot(nj),\n        GW = this.computeGW(),\n        GiMf = this.computeGiMf();\n\n    var B = - g * a - GW * b - h * GiMf;\n\n    return B;\n};\n\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],23:[function(_dereq_,module,exports){\nmodule.exports = RotationalMotorEquation;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Equation = _dereq_('./Equation');\n\n/**\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n * @class RotationalMotorEquation\n * @constructor\n * @author schteppe\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Number} maxForce\n * @extends Equation\n */\nfunction RotationalMotorEquation(bodyA, bodyB, maxForce){\n    maxForce = typeof(maxForce)!=='undefined' ? maxForce : 1e6;\n    Equation.call(this,bodyA,bodyB,-maxForce,maxForce);\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisA\n     */\n    this.axisA = new Vec3();\n\n    /**\n     * World oriented rotational axis\n     * @property {Vec3} axisB\n     */\n    this.axisB = new Vec3(); // World oriented rotational axis\n\n    /**\n     * Motor velocity\n     * @property {Number} targetVelocity\n     */\n    this.targetVelocity = 0;\n}\n\nRotationalMotorEquation.prototype = new Equation();\nRotationalMotorEquation.prototype.constructor = RotationalMotorEquation;\n\nRotationalMotorEquation.prototype.computeB = function(h){\n    var a = this.a,\n        b = this.b,\n        bi = this.bi,\n        bj = this.bj,\n\n        axisA = this.axisA,\n        axisB = this.axisB,\n\n        GA = this.jacobianElementA,\n        GB = this.jacobianElementB;\n\n    // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n\n    var GW = this.computeGW() - this.targetVelocity,\n        GiMf = this.computeGiMf();\n\n    var B = - GW * b - h * GiMf;\n\n    return B;\n};\n\n},{\"../math/Mat3\":27,\"../math/Vec3\":30,\"./Equation\":20}],24:[function(_dereq_,module,exports){\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = ContactMaterial;\n\n/**\n * Defines what happens when two materials meet.\n * @class ContactMaterial\n * @constructor\n * @param {Material} m1\n * @param {Material} m2\n * @param {object} [options]\n * @param {Number} [options.friction=0.3]\n * @param {Number} [options.restitution=0.3]\n * @param {number} [options.contactEquationStiffness=1e7]\n * @param {number} [options.contactEquationRelaxation=3]\n * @param {number} [options.frictionEquationStiffness=1e7]\n * @param {Number} [options.frictionEquationRelaxation=3]\n */\nfunction ContactMaterial(m1, m2, options){\n    options = Utils.defaults(options, {\n        friction: 0.3,\n        restitution: 0.3,\n        contactEquationStiffness: 1e7,\n        contactEquationRelaxation: 3,\n        frictionEquationStiffness: 1e7,\n        frictionEquationRelaxation: 3\n    });\n\n    /**\n     * Identifier of this material\n     * @property {Number} id\n     */\n    this.id = ContactMaterial.idCounter++;\n\n    /**\n     * Participating materials\n     * @property {Array} materials\n     * @todo  Should be .materialA and .materialB instead\n     */\n    this.materials = [m1, m2];\n\n    /**\n     * Friction coefficient\n     * @property {Number} friction\n     */\n    this.friction = options.friction;\n\n    /**\n     * Restitution coefficient\n     * @property {Number} restitution\n     */\n    this.restitution = options.restitution;\n\n    /**\n     * Stiffness of the produced contact equations\n     * @property {Number} contactEquationStiffness\n     */\n    this.contactEquationStiffness = options.contactEquationStiffness;\n\n    /**\n     * Relaxation time of the produced contact equations\n     * @property {Number} contactEquationRelaxation\n     */\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n\n    /**\n     * Stiffness of the produced friction equations\n     * @property {Number} frictionEquationStiffness\n     */\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n\n    /**\n     * Relaxation time of the produced friction equations\n     * @property {Number} frictionEquationRelaxation\n     */\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n}\n\nContactMaterial.idCounter = 0;\n\n},{\"../utils/Utils\":53}],25:[function(_dereq_,module,exports){\nmodule.exports = Material;\n\n/**\n * Defines a physics material.\n * @class Material\n * @constructor\n * @param {object} [options]\n * @author schteppe\n */\nfunction Material(options){\n    var name = '';\n    options = options || {};\n\n    // Backwards compatibility fix\n    if(typeof(options) === 'string'){\n        name = options;\n        options = {};\n    } else if(typeof(options) === 'object') {\n        name = '';\n    }\n\n    /**\n     * @property name\n     * @type {String}\n     */\n    this.name = name;\n\n    /**\n     * material id.\n     * @property id\n     * @type {number}\n     */\n    this.id = Material.idCounter++;\n\n    /**\n     * Friction for this material. If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} friction\n     */\n    this.friction = typeof(options.friction) !== 'undefined' ? options.friction : -1;\n\n    /**\n     * Restitution for this material. If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from .defaultContactMaterial in the World will be used.\n     * @property {number} restitution\n     */\n    this.restitution = typeof(options.restitution) !== 'undefined' ? options.restitution : -1;\n}\n\nMaterial.idCounter = 0;\n\n},{}],26:[function(_dereq_,module,exports){\nmodule.exports = JacobianElement;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n * @class JacobianElement\n * @constructor\n */\nfunction JacobianElement(){\n\n    /**\n     * @property {Vec3} spatial\n     */\n    this.spatial = new Vec3();\n\n    /**\n     * @property {Vec3} rotational\n     */\n    this.rotational = new Vec3();\n}\n\n/**\n * Multiply with other JacobianElement\n * @method multiplyElement\n * @param  {JacobianElement} element\n * @return {Number}\n */\nJacobianElement.prototype.multiplyElement = function(element){\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n};\n\n/**\n * Multiply with two vectors\n * @method multiplyVectors\n * @param  {Vec3} spatial\n * @param  {Vec3} rotational\n * @return {Number}\n */\nJacobianElement.prototype.multiplyVectors = function(spatial,rotational){\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n};\n\n},{\"./Vec3\":30}],27:[function(_dereq_,module,exports){\nmodule.exports = Mat3;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * A 3x3 matrix.\n * @class Mat3\n * @constructor\n * @param array elements Array of nine elements. Optional.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Mat3(elements){\n    /**\n     * A vector of length 9, containing all matrix elements\n     * @property {Array} elements\n     */\n    if(elements){\n        this.elements = elements;\n    } else {\n        this.elements = [0,0,0,0,0,0,0,0,0];\n    }\n}\n\n/**\n * Sets the matrix to identity\n * @method identity\n * @todo Should perhaps be renamed to setIdentity() to be more clear.\n * @todo Create another function that immediately creates an identity matrix eg. eye()\n */\nMat3.prototype.identity = function(){\n    var e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n};\n\n/**\n * Set all elements to zero\n * @method setZero\n */\nMat3.prototype.setZero = function(){\n    var e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n};\n\n/**\n * Sets the matrix diagonal elements from a Vec3\n * @method setTrace\n * @param {Vec3} vec3\n */\nMat3.prototype.setTrace = function(vec3){\n    var e = this.elements;\n    e[0] = vec3.x;\n    e[4] = vec3.y;\n    e[8] = vec3.z;\n};\n\n/**\n * Gets the matrix diagonal elements\n * @method getTrace\n * @return {Vec3}\n */\nMat3.prototype.getTrace = function(target){\n    var target = target || new Vec3();\n    var e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n};\n\n/**\n * Matrix-Vector multiplication\n * @method vmult\n * @param {Vec3} v The vector to multiply with\n * @param {Vec3} target Optional, target to save the result in.\n */\nMat3.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var e = this.elements,\n        x = v.x,\n        y = v.y,\n        z = v.z;\n    target.x = e[0]*x + e[1]*y + e[2]*z;\n    target.y = e[3]*x + e[4]*y + e[5]*z;\n    target.z = e[6]*x + e[7]*y + e[8]*z;\n\n    return target;\n};\n\n/**\n * Matrix-scalar multiplication\n * @method smult\n * @param {Number} s\n */\nMat3.prototype.smult = function(s){\n    for(var i=0; i<this.elements.length; i++){\n        this.elements[i] *= s;\n    }\n};\n\n/**\n * Matrix multiplication\n * @method mmult\n * @param {Mat3} m Matrix to multiply with from left side.\n * @return {Mat3} The result.\n */\nMat3.prototype.mmult = function(m,target){\n    var r = target || new Mat3();\n    for(var i=0; i<3; i++){\n        for(var j=0; j<3; j++){\n            var sum = 0.0;\n            for(var k=0; k<3; k++){\n                sum += m.elements[i+k*3] * this.elements[k+j*3];\n            }\n            r.elements[i+j*3] = sum;\n        }\n    }\n    return r;\n};\n\n/**\n * Scale each column of the matrix\n * @method scale\n * @param {Vec3} v\n * @return {Mat3} The result.\n */\nMat3.prototype.scale = function(v,target){\n    target = target || new Mat3();\n    var e = this.elements,\n        t = target.elements;\n    for(var i=0; i!==3; i++){\n        t[3*i + 0] = v.x * e[3*i + 0];\n        t[3*i + 1] = v.y * e[3*i + 1];\n        t[3*i + 2] = v.z * e[3*i + 2];\n    }\n    return target;\n};\n\n/**\n * Solve Ax=b\n * @method solve\n * @param {Vec3} b The right hand side\n * @param {Vec3} target Optional. Target vector to save in.\n * @return {Vec3} The solution x\n * @todo should reuse arrays\n */\nMat3.prototype.solve = function(b,target){\n    target = target || new Vec3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 4; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+4*0] = b.x;\n    eqns[3+4*1] = b.y;\n    eqns[3+4*2] = b.z;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = 4; // num rows\n    var p, els;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do {  // do ligne( i ) = ligne( i ) + ligne( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do {  // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // Get the solution\n    target.z = eqns[2*nc+3] / eqns[2*nc+2];\n    target.y = (eqns[1*nc+3] - eqns[1*nc+2]*target.z) / eqns[1*nc+1];\n    target.x = (eqns[0*nc+3] - eqns[0*nc+2]*target.z - eqns[0*nc+1]*target.y) / eqns[0*nc+0];\n\n    if(isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x===Infinity || target.y===Infinity || target.z===Infinity){\n        throw \"Could not solve equation! Got x=[\"+target.toString()+\"], b=[\"+b.toString()+\"], A=[\"+this.toString()+\"]\";\n    }\n\n    return target;\n};\n\n/**\n * Get an element in the matrix by index. Index starts at 0, not 1!!!\n * @method e\n * @param {Number} row\n * @param {Number} column\n * @param {Number} value Optional. If provided, the matrix element will be set to this value.\n * @return {Number}\n */\nMat3.prototype.e = function( row , column ,value){\n    if(value===undefined){\n        return this.elements[column+3*row];\n    } else {\n        // Set value\n        this.elements[column+3*row] = value;\n    }\n};\n\n/**\n * Copy another matrix into this matrix object.\n * @method copy\n * @param {Mat3} source\n * @return {Mat3} this\n */\nMat3.prototype.copy = function(source){\n    for(var i=0; i < source.elements.length; i++){\n        this.elements[i] = source.elements[i];\n    }\n    return this;\n};\n\n/**\n * Returns a string representation of the matrix.\n * @method toString\n * @return string\n */\nMat3.prototype.toString = function(){\n    var r = \"\";\n    var sep = \",\";\n    for(var i=0; i<9; i++){\n        r += this.elements[i] + sep;\n    }\n    return r;\n};\n\n/**\n * reverse the matrix\n * @method reverse\n * @param {Mat3} target Optional. Target matrix to save in.\n * @return {Mat3} The solution x\n */\nMat3.prototype.reverse = function(target){\n\n    target = target || new Mat3();\n\n    // Construct equations\n    var nr = 3; // num rows\n    var nc = 6; // num cols\n    var eqns = [];\n    for(var i=0; i<nr*nc; i++){\n        eqns.push(0);\n    }\n    var i,j;\n    for(i=0; i<3; i++){\n        for(j=0; j<3; j++){\n            eqns[i+nc*j] = this.elements[i+3*j];\n        }\n    }\n    eqns[3+6*0] = 1;\n    eqns[3+6*1] = 0;\n    eqns[3+6*2] = 0;\n    eqns[4+6*0] = 0;\n    eqns[4+6*1] = 1;\n    eqns[4+6*2] = 0;\n    eqns[5+6*0] = 0;\n    eqns[5+6*1] = 0;\n    eqns[5+6*2] = 1;\n\n    // Compute right upper triangular version of the matrix - Gauss elimination\n    var n = 3, k = n, np;\n    var kp = nc; // num rows\n    var p;\n    do {\n        i = k - n;\n        if (eqns[i+nc*i] === 0) {\n            // the pivot is null, swap lines\n            for (j = i + 1; j < k; j++) {\n                if (eqns[i+nc*j] !== 0) {\n                    np = kp;\n                    do { // do line( i ) = line( i ) + line( k )\n                        p = kp - np;\n                        eqns[p+nc*i] += eqns[p+nc*j];\n                    } while (--np);\n                    break;\n                }\n            }\n        }\n        if (eqns[i+nc*i] !== 0) {\n            for (j = i + 1; j < k; j++) {\n                var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n                np = kp;\n                do { // do line( k ) = line( k ) - multiplier * line( i )\n                    p = kp - np;\n                    eqns[p+nc*j] = p <= i ? 0 : eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n                } while (--np);\n            }\n        }\n    } while (--n);\n\n    // eliminate the upper left triangle of the matrix\n    i = 2;\n    do {\n        j = i-1;\n        do {\n            var multiplier = eqns[i+nc*j] / eqns[i+nc*i];\n            np = nc;\n            do {\n                p = nc - np;\n                eqns[p+nc*j] =  eqns[p+nc*j] - eqns[p+nc*i] * multiplier ;\n            } while (--np);\n        } while (j--);\n    } while (--i);\n\n    // operations on the diagonal\n    i = 2;\n    do {\n        var multiplier = 1 / eqns[i+nc*i];\n        np = nc;\n        do {\n            p = nc - np;\n            eqns[p+nc*i] = eqns[p+nc*i] * multiplier ;\n        } while (--np);\n    } while (i--);\n\n    i = 2;\n    do {\n        j = 2;\n        do {\n            p = eqns[nr+j+nc*i];\n            if( isNaN( p ) || p ===Infinity ){\n                throw \"Could not reverse! A=[\"+this.toString()+\"]\";\n            }\n            target.e( i , j , p );\n        } while (j--);\n    } while (i--);\n\n    return target;\n};\n\n/**\n * Set the matrix from a quaterion\n * @method setRotationFromQuaternion\n * @param {Quaternion} q\n */\nMat3.prototype.setRotationFromQuaternion = function( q ) {\n    var x = q.x, y = q.y, z = q.z, w = q.w,\n        x2 = x + x, y2 = y + y, z2 = z + z,\n        xx = x * x2, xy = x * y2, xz = x * z2,\n        yy = y * y2, yz = y * z2, zz = z * z2,\n        wx = w * x2, wy = w * y2, wz = w * z2,\n        e = this.elements;\n\n    e[3*0 + 0] = 1 - ( yy + zz );\n    e[3*0 + 1] = xy - wz;\n    e[3*0 + 2] = xz + wy;\n\n    e[3*1 + 0] = xy + wz;\n    e[3*1 + 1] = 1 - ( xx + zz );\n    e[3*1 + 2] = yz - wx;\n\n    e[3*2 + 0] = xz - wy;\n    e[3*2 + 1] = yz + wx;\n    e[3*2 + 2] = 1 - ( xx + yy );\n\n    return this;\n};\n\n/**\n * Transpose the matrix\n * @method transpose\n * @param  {Mat3} target Where to store the result.\n * @return {Mat3} The target Mat3, or a new Mat3 if target was omitted.\n */\nMat3.prototype.transpose = function( target ) {\n    target = target || new Mat3();\n\n    var Mt = target.elements,\n        M = this.elements;\n\n    for(var i=0; i!==3; i++){\n        for(var j=0; j!==3; j++){\n            Mt[3*i + j] = M[3*j + i];\n        }\n    }\n\n    return target;\n};\n\n},{\"./Vec3\":30}],28:[function(_dereq_,module,exports){\nmodule.exports = Quaternion;\n\nvar Vec3 = _dereq_('./Vec3');\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @class Quaternion\n * @constructor\n * @param {Number} x Multiplier of the imaginary basis vector i.\n * @param {Number} y Multiplier of the imaginary basis vector j.\n * @param {Number} z Multiplier of the imaginary basis vector k.\n * @param {Number} w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\nfunction Quaternion(x,y,z,w){\n    /**\n     * @property {Number} x\n     */\n    this.x = x!==undefined ? x : 0;\n\n    /**\n     * @property {Number} y\n     */\n    this.y = y!==undefined ? y : 0;\n\n    /**\n     * @property {Number} z\n     */\n    this.z = z!==undefined ? z : 0;\n\n    /**\n     * The multiplier of the real quaternion basis vector.\n     * @property {Number} w\n     */\n    this.w = w!==undefined ? w : 1;\n}\n\n/**\n * Set the value of the quaternion.\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {Number} w\n */\nQuaternion.prototype.set = function(x,y,z,w){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n};\n\n/**\n * Convert to a readable format\n * @method toString\n * @return string\n */\nQuaternion.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z+\",\"+this.w;\n};\n\n/**\n * Convert to an Array\n * @method toArray\n * @return Array\n */\nQuaternion.prototype.toArray = function(){\n    return [this.x, this.y, this.z, this.w];\n};\n\n/**\n * Set the quaternion components given an axis and an angle.\n * @method setFromAxisAngle\n * @param {Vec3} axis\n * @param {Number} angle in radians\n */\nQuaternion.prototype.setFromAxisAngle = function(axis,angle){\n    var s = Math.sin(angle*0.5);\n    this.x = axis.x * s;\n    this.y = axis.y * s;\n    this.z = axis.z * s;\n    this.w = Math.cos(angle*0.5);\n};\n\n/**\n * Converts the quaternion to axis/angle representation.\n * @method toAxisAngle\n * @param {Vec3} targetAxis Optional. A vector object to reuse for storing the axis.\n * @return Array An array, first elemnt is the axis and the second is the angle in radians.\n */\nQuaternion.prototype.toAxisAngle = function(targetAxis){\n    targetAxis = targetAxis || new Vec3();\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n    var angle = 2 * Math.acos(this.w);\n    var s = Math.sqrt(1-this.w*this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n    if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n        // if s close to zero then direction of axis not important\n        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n        targetAxis.y = this.y;\n        targetAxis.z = this.z;\n    } else {\n        targetAxis.x = this.x / s; // normalise axis\n        targetAxis.y = this.y / s;\n        targetAxis.z = this.z / s;\n    }\n    return [targetAxis,angle];\n};\n\nvar sfv_t1 = new Vec3(),\n    sfv_t2 = new Vec3();\n\n/**\n * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n * @method setFromVectors\n * @param {Vec3} u\n * @param {Vec3} v\n */\nQuaternion.prototype.setFromVectors = function(u,v){\n    if(u.isAntiparallelTo(v)){\n        var t1 = sfv_t1;\n        var t2 = sfv_t2;\n\n        u.tangents(t1,t2);\n        this.setFromAxisAngle(t1,Math.PI);\n    } else {\n        var a = u.cross(v);\n        this.x = a.x;\n        this.y = a.y;\n        this.z = a.z;\n        this.w = Math.sqrt(Math.pow(u.norm(),2) * Math.pow(v.norm(),2)) + u.dot(v);\n        this.normalize();\n    }\n};\n\n/**\n * Quaternion multiplication\n * @method mult\n * @param {Quaternion} q\n * @param {Quaternion} target Optional.\n * @return {Quaternion}\n */\nvar Quaternion_mult_va = new Vec3();\nvar Quaternion_mult_vb = new Vec3();\nvar Quaternion_mult_vaxvb = new Vec3();\nQuaternion.prototype.mult = function(q,target){\n    target = target || new Quaternion();\n    var w = this.w,\n        va = Quaternion_mult_va,\n        vb = Quaternion_mult_vb,\n        vaxvb = Quaternion_mult_vaxvb;\n\n    va.set(this.x,this.y,this.z);\n    vb.set(q.x,q.y,q.z);\n    target.w = w*q.w - va.dot(vb);\n    va.cross(vb,vaxvb);\n\n    target.x = w * vb.x + q.w*va.x + vaxvb.x;\n    target.y = w * vb.y + q.w*va.y + vaxvb.y;\n    target.z = w * vb.z + q.w*va.z + vaxvb.z;\n\n    return target;\n};\n\n/**\n * Get the inverse quaternion rotation.\n * @method inverse\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.inverse = function(target){\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n    target = target || new Quaternion();\n\n    this.conjugate(target);\n    var inorm2 = 1/(x*x + y*y + z*z + w*w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n\n    return target;\n};\n\n/**\n * Get the quaternion conjugate\n * @method conjugate\n * @param {Quaternion} target\n * @return {Quaternion}\n */\nQuaternion.prototype.conjugate = function(target){\n    target = target || new Quaternion();\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n\n    return target;\n};\n\n/**\n * Normalize the quaternion. Note that this changes the values of the quaternion.\n * @method normalize\n */\nQuaternion.prototype.normalize = function(){\n    var l = Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);\n    if ( l === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        l = 1 / l;\n        this.x *= l;\n        this.y *= l;\n        this.z *= l;\n        this.w *= l;\n    }\n};\n\n/**\n * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n * @method normalizeFast\n * @see http://jsperf.com/fast-quaternion-normalization\n * @author unphased, https://github.com/unphased\n */\nQuaternion.prototype.normalizeFast = function () {\n    var f = (3.0-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2.0;\n    if ( f === 0 ) {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n    } else {\n        this.x *= f;\n        this.y *= f;\n        this.z *= f;\n        this.w *= f;\n    }\n};\n\n/**\n * Multiply the quaternion by a vector\n * @method vmult\n * @param {Vec3} v\n * @param {Vec3} target Optional\n * @return {Vec3}\n */\nQuaternion.prototype.vmult = function(v,target){\n    target = target || new Vec3();\n\n    var x = v.x,\n        y = v.y,\n        z = v.z;\n\n    var qx = this.x,\n        qy = this.y,\n        qz = this.z,\n        qw = this.w;\n\n    // q*v\n    var ix =  qw * x + qy * z - qz * y,\n    iy =  qw * y + qz * x - qx * z,\n    iz =  qw * z + qx * y - qy * x,\n    iw = -qx * x - qy * y - qz * z;\n\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return target;\n};\n\n/**\n * Copies value of source to this quaternion.\n * @method copy\n * @param {Quaternion} source\n * @return {Quaternion} this\n */\nQuaternion.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    this.w = source.w;\n    return this;\n};\n\n/**\n * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: http://www.euclideanspace.com/maths/standards/index.htm\n * @method toEuler\n * @param {Vec3} target\n * @param string order Three-character string e.g. \"YZX\", which also is default.\n */\nQuaternion.prototype.toEuler = function(target,order){\n    order = order || \"YZX\";\n\n    var heading, attitude, bank;\n    var x = this.x, y = this.y, z = this.z, w = this.w;\n\n    switch(order){\n    case \"YZX\":\n        var test = x*y + z*w;\n        if (test > 0.499) { // singularity at north pole\n            heading = 2 * Math.atan2(x,w);\n            attitude = Math.PI/2;\n            bank = 0;\n        }\n        if (test < -0.499) { // singularity at south pole\n            heading = -2 * Math.atan2(x,w);\n            attitude = - Math.PI/2;\n            bank = 0;\n        }\n        if(isNaN(heading)){\n            var sqx = x*x;\n            var sqy = y*y;\n            var sqz = z*z;\n            heading = Math.atan2(2*y*w - 2*x*z , 1 - 2*sqy - 2*sqz); // Heading\n            attitude = Math.asin(2*test); // attitude\n            bank = Math.atan2(2*x*w - 2*y*z , 1 - 2*sqx - 2*sqz); // bank\n        }\n        break;\n    default:\n        throw new Error(\"Euler order \"+order+\" not supported yet.\");\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n};\n\n/**\n * See http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m\n * @method setFromEuler\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @param {String} order The order to apply angles: 'XYZ' or 'YXZ' or any other combination\n */\nQuaternion.prototype.setFromEuler = function ( x, y, z, order ) {\n    order = order || \"XYZ\";\n\n    var c1 = Math.cos( x / 2 );\n    var c2 = Math.cos( y / 2 );\n    var c3 = Math.cos( z / 2 );\n    var s1 = Math.sin( x / 2 );\n    var s2 = Math.sin( y / 2 );\n    var s3 = Math.sin( z / 2 );\n\n    if ( order === 'XYZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'YXZ' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'ZXY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'ZYX' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    } else if ( order === 'YZX' ) {\n\n        this.x = s1 * c2 * c3 + c1 * s2 * s3;\n        this.y = c1 * s2 * c3 + s1 * c2 * s3;\n        this.z = c1 * c2 * s3 - s1 * s2 * c3;\n        this.w = c1 * c2 * c3 - s1 * s2 * s3;\n\n    } else if ( order === 'XZY' ) {\n\n        this.x = s1 * c2 * c3 - c1 * s2 * s3;\n        this.y = c1 * s2 * c3 - s1 * c2 * s3;\n        this.z = c1 * c2 * s3 + s1 * s2 * c3;\n        this.w = c1 * c2 * c3 + s1 * s2 * s3;\n\n    }\n\n    return this;\n\n};\n\nQuaternion.prototype.clone = function(){\n    return new Quaternion(this.x, this.y, this.z, this.w);\n};\n},{\"./Vec3\":30}],29:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('./Vec3');\nvar Quaternion = _dereq_('./Quaternion');\n\nmodule.exports = Transform;\n\n/**\n * @class Transform\n * @constructor\n */\nfunction Transform(options) {\n    options = options || {};\n\n\t/**\n\t * @property {Vec3} position\n\t */\n\tthis.position = new Vec3();\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n\t/**\n\t * @property {Quaternion} quaternion\n\t */\n\tthis.quaternion = new Quaternion();\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n}\n\nvar tmpQuat = new Quaternion();\n\n/**\n * @static\n * @method pointToLocaFrame\n * @param {Vec3} position\n * @param {Quaternion} quaternion\n * @param {Vec3} worldPoint\n * @param {Vec3} result\n */\nTransform.pointToLocalFrame = function(position, quaternion, worldPoint, result){\n    var result = result || new Vec3();\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat);\n    tmpQuat.vmult(result, result);\n    return result;\n};\n\n/**\n * Get a global point in local transform coordinates.\n * @method pointToLocal\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToLocal = function(worldPoint, result){\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n};\n\n/**\n * @static\n * @method pointToWorldFrame\n * @param {Vec3} position\n * @param {Vec3} quaternion\n * @param {Vec3} localPoint\n * @param {Vec3} result\n */\nTransform.pointToWorldFrame = function(position, quaternion, localPoint, result){\n    var result = result || new Vec3();\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n};\n\n/**\n * Get a local point in global transform coordinates.\n * @method pointToWorld\n * @param  {Vec3} point\n * @param  {Vec3} result\n * @return {Vec3} The \"result\" vector object\n */\nTransform.prototype.pointToWorld = function(localPoint, result){\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n};\n\n\nTransform.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToWorldFrame = function(quaternion, localVector, result){\n    quaternion.vmult(localVector, result);\n    return result;\n};\n\nTransform.vectorToLocalFrame = function(position, quaternion, worldVector, result){\n    var result = result || new Vec3();\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n};\n\n},{\"./Quaternion\":28,\"./Vec3\":30}],30:[function(_dereq_,module,exports){\nmodule.exports = Vec3;\n\nvar Mat3 = _dereq_('./Mat3');\n\n/**\n * 3-dimensional vector\n * @class Vec3\n * @constructor\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @author schteppe\n * @example\n *     var v = new Vec3(1, 2, 3);\n *     console.log('x=' + v.x); // x=1\n */\nfunction Vec3(x,y,z){\n    /**\n     * @property x\n     * @type {Number}\n     */\n    this.x = x||0.0;\n\n    /**\n     * @property y\n     * @type {Number}\n     */\n    this.y = y||0.0;\n\n    /**\n     * @property z\n     * @type {Number}\n     */\n    this.z = z||0.0;\n}\n\n/**\n * @static\n * @property {Vec3} ZERO\n */\nVec3.ZERO = new Vec3(0, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_X\n */\nVec3.UNIT_X = new Vec3(1, 0, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Y\n */\nVec3.UNIT_Y = new Vec3(0, 1, 0);\n\n/**\n * @static\n * @property {Vec3} UNIT_Z\n */\nVec3.UNIT_Z = new Vec3(0, 0, 1);\n\n/**\n * Vector cross product\n * @method cross\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.cross = function(v,target){\n    var vx=v.x, vy=v.y, vz=v.z, x=this.x, y=this.y, z=this.z;\n    target = target || new Vec3();\n\n    target.x = (y * vz) - (z * vy);\n    target.y = (z * vx) - (x * vz);\n    target.z = (x * vy) - (y * vx);\n\n    return target;\n};\n\n/**\n * Set the vectors' 3 elements\n * @method set\n * @param {Number} x\n * @param {Number} y\n * @param {Number} z\n * @return Vec3\n */\nVec3.prototype.set = function(x,y,z){\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n};\n\n/**\n * Set all components of the vector to zero.\n * @method setZero\n */\nVec3.prototype.setZero = function(){\n    this.x = this.y = this.z = 0;\n};\n\n/**\n * Vector addition\n * @method vadd\n * @param {Vec3} v\n * @param {Vec3} target Optional.\n * @return {Vec3}\n */\nVec3.prototype.vadd = function(v,target){\n    if(target){\n        target.x = v.x + this.x;\n        target.y = v.y + this.y;\n        target.z = v.z + this.z;\n    } else {\n        return new Vec3(this.x + v.x,\n                               this.y + v.y,\n                               this.z + v.z);\n    }\n};\n\n/**\n * Vector subtraction\n * @method vsub\n * @param {Vec3} v\n * @param {Vec3} target Optional. Target to save in.\n * @return {Vec3}\n */\nVec3.prototype.vsub = function(v,target){\n    if(target){\n        target.x = this.x - v.x;\n        target.y = this.y - v.y;\n        target.z = this.z - v.z;\n    } else {\n        return new Vec3(this.x-v.x,\n                               this.y-v.y,\n                               this.z-v.z);\n    }\n};\n\n/**\n * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n * @method crossmat\n * @see http://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf\n * @return {Mat3}\n */\nVec3.prototype.crossmat = function(){\n    return new Mat3([     0,  -this.z,   this.y,\n                            this.z,        0,  -this.x,\n                           -this.y,   this.x,        0]);\n};\n\n/**\n * Normalize the vector. Note that this changes the values in the vector.\n * @method normalize\n * @return {Number} Returns the norm of the vector\n */\nVec3.prototype.normalize = function(){\n    var x=this.x, y=this.y, z=this.z;\n    var n = Math.sqrt(x*x + y*y + z*z);\n    if(n>0.0){\n        var invN = 1/n;\n        this.x *= invN;\n        this.y *= invN;\n        this.z *= invN;\n    } else {\n        // Make something up\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n    }\n    return n;\n};\n\n/**\n * Get the version of this vector that is of length 1.\n * @method unit\n * @param {Vec3} target Optional target to save in\n * @return {Vec3} Returns the unit vector\n */\nVec3.prototype.unit = function(target){\n    target = target || new Vec3();\n    var x=this.x, y=this.y, z=this.z;\n    var ninv = Math.sqrt(x*x + y*y + z*z);\n    if(ninv>0.0){\n        ninv = 1.0/ninv;\n        target.x = x * ninv;\n        target.y = y * ninv;\n        target.z = z * ninv;\n    } else {\n        target.x = 1;\n        target.y = 0;\n        target.z = 0;\n    }\n    return target;\n};\n\n/**\n * Get the length of the vector\n * @method norm\n * @return {Number}\n * @deprecated Use .length() instead\n */\nVec3.prototype.norm = function(){\n    var x=this.x, y=this.y, z=this.z;\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Get the length of the vector\n * @method length\n * @return {Number}\n */\nVec3.prototype.length = Vec3.prototype.norm;\n\n/**\n * Get the squared length of the vector\n * @method norm2\n * @return {Number}\n * @deprecated Use .lengthSquared() instead.\n */\nVec3.prototype.norm2 = function(){\n    return this.dot(this);\n};\n\n/**\n * Get the squared length of the vector.\n * @method lengthSquared\n * @return {Number}\n */\nVec3.prototype.lengthSquared = Vec3.prototype.norm2;\n\n/**\n * Get distance from this point to another point\n * @method distanceTo\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceTo = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return Math.sqrt((px-x)*(px-x)+\n                     (py-y)*(py-y)+\n                     (pz-z)*(pz-z));\n};\n\n/**\n * Get squared distance from this point to another point\n * @method distanceSquared\n * @param  {Vec3} p\n * @return {Number}\n */\nVec3.prototype.distanceSquared = function(p){\n    var x=this.x, y=this.y, z=this.z;\n    var px=p.x, py=p.y, pz=p.z;\n    return (px-x)*(px-x) + (py-y)*(py-y) + (pz-z)*(pz-z);\n};\n\n/**\n * Multiply all the components of the vector with a scalar.\n * @deprecated Use .scale instead\n * @method mult\n * @param {Number} scalar\n * @param {Vec3} target The vector to save the result in.\n * @return {Vec3}\n * @deprecated Use .scale() instead\n */\nVec3.prototype.mult = function(scalar,target){\n    target = target || new Vec3();\n    var x = this.x,\n        y = this.y,\n        z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n};\n\n/**\n * Multiply the vector with a scalar.\n * @method scale\n * @param {Number} scalar\n * @param {Vec3} target\n * @return {Vec3}\n */\nVec3.prototype.scale = Vec3.prototype.mult;\n\n/**\n * Calculate dot product\n * @method dot\n * @param {Vec3} v\n * @return {Number}\n */\nVec3.prototype.dot = function(v){\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n};\n\n/**\n * @method isZero\n * @return bool\n */\nVec3.prototype.isZero = function(){\n    return this.x===0 && this.y===0 && this.z===0;\n};\n\n/**\n * Make the vector point in the opposite direction.\n * @method negate\n * @param {Vec3} target Optional target to save in\n * @return {Vec3}\n */\nVec3.prototype.negate = function(target){\n    target = target || new Vec3();\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n};\n\n/**\n * Compute two artificial tangents to the vector\n * @method tangents\n * @param {Vec3} t1 Vector object to save the first tangent in\n * @param {Vec3} t2 Vector object to save the second tangent in\n */\nvar Vec3_tangents_n = new Vec3();\nvar Vec3_tangents_randVec = new Vec3();\nVec3.prototype.tangents = function(t1,t2){\n    var norm = this.norm();\n    if(norm>0.0){\n        var n = Vec3_tangents_n;\n        var inorm = 1/norm;\n        n.set(this.x*inorm,this.y*inorm,this.z*inorm);\n        var randVec = Vec3_tangents_randVec;\n        if(Math.abs(n.x) < 0.9){\n            randVec.set(1,0,0);\n            n.cross(randVec,t1);\n        } else {\n            randVec.set(0,1,0);\n            n.cross(randVec,t1);\n        }\n        n.cross(t1,t2);\n    } else {\n        // The normal length is zero, make something up\n        t1.set(1, 0, 0);\n        t2.set(0, 1, 0);\n    }\n};\n\n/**\n * Converts to a more readable format\n * @method toString\n * @return string\n */\nVec3.prototype.toString = function(){\n    return this.x+\",\"+this.y+\",\"+this.z;\n};\n\n/**\n * Converts to an array\n * @method toArray\n * @return Array\n */\nVec3.prototype.toArray = function(){\n    return [this.x, this.y, this.z];\n};\n\n/**\n * Copies value of source to this vector.\n * @method copy\n * @param {Vec3} source\n * @return {Vec3} this\n */\nVec3.prototype.copy = function(source){\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    return this;\n};\n\n\n/**\n * Do a linear interpolation between two vectors\n * @method lerp\n * @param {Vec3} v\n * @param {Number} t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n * @param {Vec3} target\n */\nVec3.prototype.lerp = function(v,t,target){\n    var x=this.x, y=this.y, z=this.z;\n    target.x = x + (v.x-x)*t;\n    target.y = y + (v.y-y)*t;\n    target.z = z + (v.z-z)*t;\n};\n\n/**\n * Check if a vector equals is almost equal to another one.\n * @method almostEquals\n * @param {Vec3} v\n * @param {Number} precision\n * @return bool\n */\nVec3.prototype.almostEquals = function(v,precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x-v.x)>precision ||\n        Math.abs(this.y-v.y)>precision ||\n        Math.abs(this.z-v.z)>precision){\n        return false;\n    }\n    return true;\n};\n\n/**\n * Check if a vector is almost zero\n * @method almostZero\n * @param {Number} precision\n */\nVec3.prototype.almostZero = function(precision){\n    if(precision===undefined){\n        precision = 1e-6;\n    }\n    if( Math.abs(this.x)>precision ||\n        Math.abs(this.y)>precision ||\n        Math.abs(this.z)>precision){\n        return false;\n    }\n    return true;\n};\n\nvar antip_neg = new Vec3();\n\n/**\n * Check if the vector is anti-parallel to another vector.\n * @method isAntiparallelTo\n * @param  {Vec3}  v\n * @param  {Number}  precision Set to zero for exact comparisons\n * @return {Boolean}\n */\nVec3.prototype.isAntiparallelTo = function(v,precision){\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(v,precision);\n};\n\n/**\n * Clone the vector\n * @method clone\n * @return {Vec3}\n */\nVec3.prototype.clone = function(){\n    return new Vec3(this.x, this.y, this.z);\n};\n},{\"./Mat3\":27}],31:[function(_dereq_,module,exports){\nmodule.exports = Body;\n\nvar EventTarget = _dereq_('../utils/EventTarget');\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Mat3 = _dereq_('../math/Mat3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Material = _dereq_('../material/Material');\nvar AABB = _dereq_('../collision/AABB');\nvar Box = _dereq_('../shapes/Box');\n\n/**\n * Base class for all body types.\n * @class Body\n * @constructor\n * @extends EventTarget\n * @param {object} [options]\n * @param {Vec3} [options.position]\n * @param {Vec3} [options.velocity]\n * @param {Vec3} [options.angularVelocity]\n * @param {Quaternion} [options.quaternion]\n * @param {number} [options.mass]\n * @param {Material} [options.material]\n * @param {number} [options.type]\n * @param {number} [options.linearDamping=0.01]\n * @param {number} [options.angularDamping=0.01]\n * @param {boolean} [options.allowSleep=true]\n * @param {number} [options.sleepSpeedLimit=0.1]\n * @param {number} [options.sleepTimeLimit=1]\n * @param {number} [options.collisionFilterGroup=1]\n * @param {number} [options.collisionFilterMask=1]\n * @param {boolean} [options.fixedRotation=false]\n * @param {Body} [options.shape]\n * @example\n *     var body = new Body({\n *         mass: 1\n *     });\n *     var shape = new Sphere(1);\n *     body.addShape(shape);\n *     world.add(body);\n */\nfunction Body(options){\n    options = options || {};\n\n    EventTarget.apply(this);\n\n    this.id = Body.idCounter++;\n\n    /**\n     * Reference to the world the body is living in\n     * @property world\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Callback function that is used BEFORE stepping the system. Use it to apply forces, for example. Inside the function, \"this\" will refer to this Body object.\n     * @property preStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.preStep = null;\n\n    /**\n     * Callback function that is used AFTER stepping the system. Inside the function, \"this\" will refer to this Body object.\n     * @property postStep\n     * @type {Function}\n     * @deprecated Use World events instead\n     */\n    this.postStep = null;\n\n    this.vlambda = new Vec3();\n\n    /**\n     * @property {Number} collisionFilterGroup\n     */\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) === 'number' ? options.collisionFilterGroup : 1;\n\n    /**\n     * @property {Number} collisionFilterMask\n     */\n    this.collisionFilterMask = typeof(options.collisionFilterMask) === 'number' ? options.collisionFilterMask : 1;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {Number} collisionResponse\n     */\n\tthis.collisionResponse = true;\n\n    /**\n     * @property position\n     * @type {Vec3}\n     */\n    this.position = new Vec3();\n\n    if(options.position){\n        this.position.copy(options.position);\n    }\n\n    /**\n     * @property {Vec3} previousPosition\n     */\n    this.previousPosition = new Vec3();\n\n    /**\n     * Initial position of the body\n     * @property initPosition\n     * @type {Vec3}\n     */\n    this.initPosition = new Vec3();\n\n    /**\n     * @property velocity\n     * @type {Vec3}\n     */\n    this.velocity = new Vec3();\n\n    if(options.velocity){\n        this.velocity.copy(options.velocity);\n    }\n\n    /**\n     * @property initVelocity\n     * @type {Vec3}\n     */\n    this.initVelocity = new Vec3();\n\n    /**\n     * Linear force on the body\n     * @property force\n     * @type {Vec3}\n     */\n    this.force = new Vec3();\n\n    var mass = typeof(options.mass) === 'number' ? options.mass : 0;\n\n    /**\n     * @property mass\n     * @type {Number}\n     * @default 0\n     */\n    this.mass = mass;\n\n    /**\n     * @property invMass\n     * @type {Number}\n     */\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n\n    /**\n     * @property material\n     * @type {Material}\n     */\n    this.material = options.material || null;\n\n    /**\n     * @property linearDamping\n     * @type {Number}\n     */\n    this.linearDamping = typeof(options.linearDamping) === 'number' ? options.linearDamping : 0.01;\n\n    /**\n     * One of: Body.DYNAMIC, Body.STATIC and Body.KINEMATIC.\n     * @property type\n     * @type {Number}\n     */\n    this.type = (mass <= 0.0 ? Body.STATIC : Body.DYNAMIC);\n    if(typeof(options.type) === typeof(Body.STATIC)){\n        this.type = options.type;\n    }\n\n    /**\n     * If true, the body will automatically fall to sleep.\n     * @property allowSleep\n     * @type {Boolean}\n     * @default true\n     */\n    this.allowSleep = typeof(options.allowSleep) !== 'undefined' ? options.allowSleep : true;\n\n    /**\n     * Current sleep state.\n     * @property sleepState\n     * @type {Number}\n     */\n    this.sleepState = 0;\n\n    /**\n     * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.\n     * @property sleepSpeedLimit\n     * @type {Number}\n     * @default 0.1\n     */\n    this.sleepSpeedLimit = typeof(options.sleepSpeedLimit) !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n\n    /**\n     * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.\n     * @property sleepTimeLimit\n     * @type {Number}\n     * @default 1\n     */\n    this.sleepTimeLimit = typeof(options.sleepTimeLimit) !== 'undefined' ? options.sleepTimeLimit : 1;\n\n    this.timeLastSleepy = 0;\n\n    this._wakeUpAfterNarrowphase = false;\n\n\n    /**\n     * Rotational force on the body, around center of mass\n     * @property {Vec3} torque\n     */\n    this.torque = new Vec3();\n\n    /**\n     * Orientation of the body\n     * @property quaternion\n     * @type {Quaternion}\n     */\n    this.quaternion = new Quaternion();\n\n    if(options.quaternion){\n        this.quaternion.copy(options.quaternion);\n    }\n\n    /**\n     * @property initQuaternion\n     * @type {Quaternion}\n     */\n    this.initQuaternion = new Quaternion();\n\n    /**\n     * @property angularVelocity\n     * @type {Vec3}\n     */\n    this.angularVelocity = new Vec3();\n\n    if(options.angularVelocity){\n        this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    /**\n     * @property initAngularVelocity\n     * @type {Vec3}\n     */\n    this.initAngularVelocity = new Vec3();\n\n    this.interpolatedPosition = new Vec3();\n    this.interpolatedQuaternion = new Quaternion();\n\n    /**\n     * @property shapes\n     * @type {array}\n     */\n    this.shapes = [];\n\n    /**\n     * @property shapeOffsets\n     * @type {array}\n     */\n    this.shapeOffsets = [];\n\n    /**\n     * @property shapeOrientations\n     * @type {array}\n     */\n    this.shapeOrientations = [];\n\n    /**\n     * @property inertia\n     * @type {Vec3}\n     */\n    this.inertia = new Vec3();\n\n    /**\n     * @property {Vec3} invInertia\n     */\n    this.invInertia = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorld\n     */\n    this.invInertiaWorld = new Mat3();\n\n    this.invMassSolve = 0;\n\n    /**\n     * @property {Vec3} invInertiaSolve\n     */\n    this.invInertiaSolve = new Vec3();\n\n    /**\n     * @property {Mat3} invInertiaWorldSolve\n     */\n    this.invInertiaWorldSolve = new Mat3();\n\n    /**\n     * Set to true if you don't want the body to rotate. Make sure to run .updateMassProperties() after changing this.\n     * @property {Boolean} fixedRotation\n     * @default false\n     */\n    this.fixedRotation = typeof(options.fixedRotation) !== \"undefined\" ? options.fixedRotation : false;\n\n    /**\n     * @property {Number} angularDamping\n     */\n    this.angularDamping = typeof(options.angularDamping) !== 'undefined' ? options.angularDamping : 0.01;\n\n    /**\n     * @property aabb\n     * @type {AABB}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * Indicates if the AABB needs to be updated before use.\n     * @property aabbNeedsUpdate\n     * @type {Boolean}\n     */\n    this.aabbNeedsUpdate = true;\n\n    this.wlambda = new Vec3();\n\n    if(options.shape){\n        this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n}\nBody.prototype = new EventTarget();\nBody.prototype.constructor = Body;\n\n/**\n * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n * @static\n * @property DYNAMIC\n * @type {Number}\n */\nBody.DYNAMIC = 1;\n\n/**\n * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n * @static\n * @property STATIC\n * @type {Number}\n */\nBody.STATIC = 2;\n\n/**\n * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n * @static\n * @property KINEMATIC\n * @type {Number}\n */\nBody.KINEMATIC = 4;\n\n\n\n/**\n * @static\n * @property AWAKE\n * @type {number}\n */\nBody.AWAKE = 0;\n\n/**\n * @static\n * @property SLEEPY\n * @type {number}\n */\nBody.SLEEPY = 1;\n\n/**\n * @static\n * @property SLEEPING\n * @type {number}\n */\nBody.SLEEPING = 2;\n\nBody.idCounter = 0;\n\n/**\n * Wake the body up.\n * @method wakeUp\n */\nBody.prototype.wakeUp = function(){\n    var s = this.sleepState;\n    this.sleepState = 0;\n    if(s === Body.SLEEPING){\n        this.dispatchEvent({type:\"wakeup\"});\n    }\n};\n\n/**\n * Force body sleep\n * @method sleep\n */\nBody.prototype.sleep = function(){\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0,0,0);\n    this.angularVelocity.set(0,0,0);\n};\n\nBody.sleepyEvent = {\n    type: \"sleepy\"\n};\n\nBody.sleepEvent = {\n    type: \"sleep\"\n};\n\n/**\n * Called every timestep to update internal sleep timer and change sleep state if needed.\n * @method sleepTick\n * @param {Number} time The world time in seconds\n */\nBody.prototype.sleepTick = function(time){\n    if(this.allowSleep){\n        var sleepState = this.sleepState;\n        var speedSquared = this.velocity.norm2() + this.angularVelocity.norm2();\n        var speedLimitSquared = Math.pow(this.sleepSpeedLimit,2);\n        if(sleepState===Body.AWAKE && speedSquared < speedLimitSquared){\n            this.sleepState = Body.SLEEPY; // Sleepy\n            this.timeLastSleepy = time;\n            this.dispatchEvent(Body.sleepyEvent);\n        } else if(sleepState===Body.SLEEPY && speedSquared > speedLimitSquared){\n            this.wakeUp(); // Wake up\n        } else if(sleepState===Body.SLEEPY && (time - this.timeLastSleepy ) > this.sleepTimeLimit){\n            this.sleep(); // Sleeping\n            this.dispatchEvent(Body.sleepEvent);\n        }\n    }\n};\n\n/**\n * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n * @method updateSolveMassProperties\n */\nBody.prototype.updateSolveMassProperties = function(){\n    if(this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC){\n        this.invMassSolve = 0;\n        this.invInertiaSolve.setZero();\n        this.invInertiaWorldSolve.setZero();\n    } else {\n        this.invMassSolve = this.invMass;\n        this.invInertiaSolve.copy(this.invInertia);\n        this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n};\n\n/**\n * Convert a world point to local body frame.\n * @method pointToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToLocalFrame = function(worldPoint,result){\n    var result = result || new Vec3();\n    worldPoint.vsub(this.position,result);\n    this.quaternion.conjugate().vmult(result,result);\n    return result;\n};\n\n/**\n * Convert a world vector to local body frame.\n * @method vectorToLocalFrame\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToLocalFrame = function(worldVector, result){\n    var result = result || new Vec3();\n    this.quaternion.conjugate().vmult(worldVector,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method pointToWorldFrame\n * @param  {Vec3} localPoint\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.pointToWorldFrame = function(localPoint,result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localPoint,result);\n    result.vadd(this.position,result);\n    return result;\n};\n\n/**\n * Convert a local body point to world frame.\n * @method vectorToWorldFrame\n * @param  {Vec3} localVector\n * @param  {Vec3} result\n * @return {Vec3}\n */\nBody.prototype.vectorToWorldFrame = function(localVector, result){\n    var result = result || new Vec3();\n    this.quaternion.vmult(localVector, result);\n    return result;\n};\n\nvar tmpVec = new Vec3();\nvar tmpQuat = new Quaternion();\n\n/**\n * Add a shape to the body with a local offset and orientation.\n * @method addShape\n * @param {Shape} shape\n * @param {Vec3} offset\n * @param {Quaternion} quaternion\n * @return {Body} The body object, for chainability.\n */\nBody.prototype.addShape = function(shape, _offset, _orientation){\n    var offset = new Vec3();\n    var orientation = new Quaternion();\n\n    if(_offset){\n        offset.copy(_offset);\n    }\n    if(_orientation){\n        orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n\n    this.aabbNeedsUpdate = true;\n\n    return this;\n};\n\n/**\n * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n * @method updateBoundingRadius\n */\nBody.prototype.updateBoundingRadius = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        N = shapes.length,\n        radius = 0;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n        shape.updateBoundingSphereRadius();\n        var offset = shapeOffsets[i].norm(),\n            r = shape.boundingSphereRadius;\n        if(offset + r > radius){\n            radius = offset + r;\n        }\n    }\n\n    this.boundingRadius = radius;\n};\n\nvar computeAABB_shapeAABB = new AABB();\n\n/**\n * Updates the .aabb\n * @method computeAABB\n * @todo rename to updateAABB()\n */\nBody.prototype.computeAABB = function(){\n    var shapes = this.shapes,\n        shapeOffsets = this.shapeOffsets,\n        shapeOrientations = this.shapeOrientations,\n        N = shapes.length,\n        offset = tmpVec,\n        orientation = tmpQuat,\n        bodyQuat = this.quaternion,\n        aabb = this.aabb,\n        shapeAABB = computeAABB_shapeAABB;\n\n    for(var i=0; i!==N; i++){\n        var shape = shapes[i];\n\n        // Get shape world quaternion\n        shapeOrientations[i].mult(bodyQuat, orientation);\n\n        // Get shape world position\n        orientation.vmult(shapeOffsets[i], offset);\n        offset.vadd(this.position, offset);\n\n        // vec2.rotate(offset, shapeOffsets[i], bodyAngle);\n        // vec2.add(offset, offset, this.position);\n\n        // Get shape AABB\n        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n        if(i === 0){\n            aabb.copy(shapeAABB);\n        } else {\n            aabb.extend(shapeAABB);\n        }\n    }\n\n    this.aabbNeedsUpdate = false;\n};\n\nvar uiw_m1 = new Mat3(),\n    uiw_m2 = new Mat3(),\n    uiw_m3 = new Mat3();\n\n/**\n * Update .inertiaWorld and .invInertiaWorld\n * @method updateInertiaWorld\n */\nBody.prototype.updateInertiaWorld = function(force){\n    var I = this.invInertia;\n    if (I.x === I.y && I.y === I.z && !force) {\n        // If inertia M = s*I, where I is identity and s a scalar, then\n        //    R*M*R' = R*(s*I)*R' = s*R*I*R' = s*R*R' = s*I = M\n        // where R is the rotation matrix.\n        // In other words, we don't have to transform the inertia if all\n        // inertia diagonal entries are equal.\n    } else {\n        var m1 = uiw_m1,\n            m2 = uiw_m2,\n            m3 = uiw_m3;\n        m1.setRotationFromQuaternion(this.quaternion);\n        m1.transpose(m2);\n        m1.scale(I,m1);\n        m1.mmult(m2,this.invInertiaWorld);\n        //m3.getTrace(this.invInertiaWorld);\n    }\n\n    /*\n    this.quaternion.vmult(this.inertia,this.inertiaWorld);\n    this.quaternion.vmult(this.invInertia,this.invInertiaWorld);\n    */\n};\n\n/**\n * Apply force to a world point. This could for example be a point on the Body surface. Applying force this way will add to Body.force and Body.torque.\n * @method applyForce\n * @param  {Vec3} force The amount of force to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyForce_r = new Vec3();\nvar Body_applyForce_rotForce = new Vec3();\nBody.prototype.applyForce = function(force,worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyForce_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced rotational force\n    var rotForce = Body_applyForce_rotForce;\n    r.cross(force,rotForce);\n\n    // Add linear force\n    this.force.vadd(force,this.force);\n\n    // Add rotational force\n    this.torque.vadd(rotForce,this.torque);\n};\n\n/**\n * Apply force to a local point in the body.\n * @method applyLocalForce\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalForce_worldForce = new Vec3();\nvar Body_applyLocalForce_worldPoint = new Vec3();\nBody.prototype.applyLocalForce = function(localForce, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldForce = Body_applyLocalForce_worldForce;\n    var worldPoint = Body_applyLocalForce_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyForce(worldForce, worldPoint);\n};\n\n/**\n * Apply impulse to a world point. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.\n * @method applyImpulse\n * @param  {Vec3} impulse The amount of impulse to add.\n * @param  {Vec3} worldPoint A world point to apply the force on.\n */\nvar Body_applyImpulse_r = new Vec3();\nvar Body_applyImpulse_velo = new Vec3();\nvar Body_applyImpulse_rotVelo = new Vec3();\nBody.prototype.applyImpulse = function(impulse, worldPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    // Compute point position relative to the body center\n    var r = Body_applyImpulse_r;\n    worldPoint.vsub(this.position,r);\n\n    // Compute produced central impulse velocity\n    var velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.mult(this.invMass,velo);\n\n    // Add linear impulse\n    this.velocity.vadd(velo, this.velocity);\n\n    // Compute produced rotational impulse velocity\n    var rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse,rotVelo);\n\n    /*\n    rotVelo.x *= this.invInertia.x;\n    rotVelo.y *= this.invInertia.y;\n    rotVelo.z *= this.invInertia.z;\n    */\n    this.invInertiaWorld.vmult(rotVelo,rotVelo);\n\n    // Add rotational Impulse\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n};\n\n/**\n * Apply locally-defined impulse to a local point in the body.\n * @method applyLocalImpulse\n * @param  {Vec3} force The force vector to apply, defined locally in the body frame.\n * @param  {Vec3} localPoint A local point in the body to apply the force on.\n */\nvar Body_applyLocalImpulse_worldImpulse = new Vec3();\nvar Body_applyLocalImpulse_worldPoint = new Vec3();\nBody.prototype.applyLocalImpulse = function(localImpulse, localPoint){\n    if(this.type !== Body.DYNAMIC){\n        return;\n    }\n\n    var worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    var worldPoint = Body_applyLocalImpulse_worldPoint;\n\n    // Transform the force vector to world space\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.pointToWorldFrame(localPoint, worldPoint);\n\n    this.applyImpulse(worldImpulse, worldPoint);\n};\n\nvar Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Should be called whenever you change the body shape or mass.\n * @method updateMassProperties\n */\nBody.prototype.updateMassProperties = function(){\n    var halfExtents = Body_updateMassProperties_halfExtents;\n\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    var I = this.inertia;\n    var fixed = this.fixedRotation;\n\n    // Approximate with AABB box\n    this.computeAABB();\n    halfExtents.set(\n        (this.aabb.upperBound.x-this.aabb.lowerBound.x) / 2,\n        (this.aabb.upperBound.y-this.aabb.lowerBound.y) / 2,\n        (this.aabb.upperBound.z-this.aabb.lowerBound.z) / 2\n    );\n    Box.calculateInertia(halfExtents, this.mass, I);\n\n    this.invInertia.set(\n        I.x > 0 && !fixed ? 1.0 / I.x : 0,\n        I.y > 0 && !fixed ? 1.0 / I.y : 0,\n        I.z > 0 && !fixed ? 1.0 / I.z : 0\n    );\n    this.updateInertiaWorld(true);\n};\n\n/**\n * Get world velocity of a point in the body.\n * @method getVelocityAtWorldPoint\n * @param  {Vec3} worldPoint\n * @param  {Vec3} result\n * @return {Vec3} The result vector.\n */\nBody.prototype.getVelocityAtWorldPoint = function(worldPoint, result){\n    var r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n};\n\n},{\"../collision/AABB\":3,\"../material/Material\":25,\"../math/Mat3\":27,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/Shape\":43,\"../utils/EventTarget\":49}],32:[function(_dereq_,module,exports){\nvar Body = _dereq_('./Body');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Ray = _dereq_('../collision/Ray');\nvar WheelInfo = _dereq_('../objects/WheelInfo');\n\nmodule.exports = RaycastVehicle;\n\n/**\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n * @class RaycastVehicle\n * @constructor\n * @param {object} [options]\n * @param {Body} [options.chassisBody] The car chassis body.\n * @param {integer} [options.indexRightAxis] Axis to use for right. x=0, y=1, z=2\n * @param {integer} [options.indexLeftAxis]\n * @param {integer} [options.indexUpAxis]\n */\nfunction RaycastVehicle(options){\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    /**\n     * An array of WheelInfo objects.\n     * @property {array} wheelInfos\n     */\n    this.wheelInfos = [];\n\n    /**\n     * Will be set to true if the car is sliding.\n     * @property {boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * @property {World} world\n     */\n    this.world = null;\n\n    /**\n     * Index of the right axis, 0=x, 1=y, 2=z\n     * @property {integer} indexRightAxis\n     * @default 1\n     */\n    this.indexRightAxis = typeof(options.indexRightAxis) !== 'undefined' ? options.indexRightAxis : 1;\n\n    /**\n     * Index of the forward axis, 0=x, 1=y, 2=z\n     * @property {integer} indexForwardAxis\n     * @default 0\n     */\n    this.indexForwardAxis = typeof(options.indexForwardAxis) !== 'undefined' ? options.indexForwardAxis : 0;\n\n    /**\n     * Index of the up axis, 0=x, 1=y, 2=z\n     * @property {integer} indexUpAxis\n     * @default 2\n     */\n    this.indexUpAxis = typeof(options.indexUpAxis) !== 'undefined' ? options.indexUpAxis : 2;\n}\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpVec3 = new Vec3();\nvar tmpVec4 = new Vec3();\nvar tmpVec5 = new Vec3();\nvar tmpVec6 = new Vec3();\nvar tmpRay = new Ray();\n\n/**\n * Add a wheel. For information about the options, see WheelInfo.\n * @method addWheel\n * @param {object} [options]\n */\nRaycastVehicle.prototype.addWheel = function(options){\n    options = options || {};\n\n    var info = new WheelInfo(options);\n    var index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n\n    return index;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    var wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method applyEngineForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRaycastVehicle.prototype.applyEngineForce = function(value, wheelIndex){\n    this.wheelInfos[wheelIndex].engineForce = value;\n};\n\n/**\n * Set the braking force of a wheel\n * @method setBrake\n * @param {number} brake\n * @param {integer} wheelIndex\n */\nRaycastVehicle.prototype.setBrake = function(brake, wheelIndex){\n    this.wheelInfos[wheelIndex].brake = brake;\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    world.add(this.chassisBody);\n    var that = this;\n    this.preStepCallback = function(){\n        that.updateVehicle(world.dt);\n    };\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n};\n\n/**\n * Get one of the wheel axles, world-oriented.\n * @private\n * @method getVehicleAxisWorld\n * @param  {integer} axisIndex\n * @param  {Vec3} result\n */\nRaycastVehicle.prototype.getVehicleAxisWorld = function(axisIndex, result){\n    result.set(\n        axisIndex === 0 ? 1 : 0,\n        axisIndex === 1 ? 1 : 0,\n        axisIndex === 2 ? 1 : 0\n    );\n    this.chassisBody.vectorToWorldFrame(result, result);\n};\n\nRaycastVehicle.prototype.updateVehicle = function(timeStep){\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n\n    for (var i = 0; i < numWheels; i++) {\n        this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.norm();\n\n    var forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0){\n        this.currentVehicleSpeedKmHour *= -1;\n    }\n\n    // simulate suspension\n    for (var i = 0; i < numWheels; i++) {\n        this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n\n    var impulse = new Vec3();\n    var relpos = new Vec3();\n    for (var i = 0; i < numWheels; i++) {\n        //apply suspension force\n        var wheel = wheelInfos[i];\n        var suspensionForce = wheel.suspensionForce;\n        if (suspensionForce > wheel.maxSuspensionForce) {\n            suspensionForce = wheel.maxSuspensionForce;\n        }\n        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n\n        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.applyImpulse(impulse, wheel.raycastResult.hitPointWorld/*relpos*/);\n    }\n\n    this.updateFriction(timeStep);\n\n    var hitNormalWorldScaledWithProj = new Vec3();\n    var fwd  = new Vec3();\n    var vel = new Vec3();\n    for (i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        //var relpos = new Vec3();\n        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n        chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel);\n\n        // Hack to get the rotation in the correct direction\n        var m = 1;\n        switch(this.indexUpAxis){\n        case 1:\n            m = -1;\n            break;\n        }\n\n        if (wheel.isInContact) {\n\n            this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n            var proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n            wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n\n            fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n\n            var proj2 = fwd.dot(vel);\n            wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n        }\n\n        if((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed){\n            // Apply custom rotation when accelerating and sliding\n            wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n        }\n\n        // Lock wheels\n        if(Math.abs(wheel.brake) > Math.abs(wheel.engineForce)){\n            wheel.deltaRotation = 0;\n        }\n\n        wheel.rotation += wheel.deltaRotation; // Use the old value\n        wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n};\n\nRaycastVehicle.prototype.updateSuspension = function(deltaTime) {\n    var chassisBody = this.chassisBody;\n    var chassisMass = chassisBody.mass;\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n\n    for (var w_it = 0; w_it < numWheels; w_it++){\n        var wheel = wheelInfos[w_it];\n\n        if (wheel.isInContact){\n            var force;\n\n            // Spring\n            var susp_length = wheel.suspensionRestLength;\n            var current_length = wheel.suspensionLength;\n            var length_diff = (susp_length - current_length);\n\n            force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension;\n\n            // Damper\n            var projected_rel_vel = wheel.suspensionRelativeVelocity;\n            var susp_damping;\n            if (projected_rel_vel < 0) {\n                susp_damping = wheel.dampingCompression;\n            } else {\n                susp_damping = wheel.dampingRelaxation;\n            }\n            force -= susp_damping * projected_rel_vel;\n\n            wheel.suspensionForce = force * chassisMass;\n            if (wheel.suspensionForce < 0) {\n                wheel.suspensionForce = 0;\n            }\n        } else {\n            wheel.suspensionForce = 0;\n        }\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRaycastVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    world.remove(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n};\n\nvar castRay_rayvector = new Vec3();\nvar castRay_target = new Vec3();\nRaycastVehicle.prototype.castRay = function(wheel) {\n    var rayvector = castRay_rayvector;\n    var target = castRay_target;\n\n    this.updateWheelTransformWorld(wheel);\n    var chassisBody = this.chassisBody;\n\n    var depth = -1;\n\n    var raylen = wheel.suspensionRestLength + wheel.radius;\n\n    wheel.directionWorld.scale(raylen, rayvector);\n    var source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    var raycastResult = wheel.raycastResult;\n\n    var param = 0;\n\n    raycastResult.reset();\n    // Turn off ray collision with the chassis temporarily\n    var oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false;\n\n    // Cast ray against world\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n\n    var object = raycastResult.body;\n\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n        depth = raycastResult.distance;\n        wheel.raycastResult.hitNormalWorld  = raycastResult.hitNormalWorld;\n        wheel.isInContact = true;\n\n        var hitDistance = raycastResult.distance;\n        wheel.suspensionLength = hitDistance - wheel.radius;\n\n        // clamp on max suspension travel\n        var minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n        var maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n        if (wheel.suspensionLength < minSuspensionLength) {\n            wheel.suspensionLength = minSuspensionLength;\n        }\n        if (wheel.suspensionLength > maxSuspensionLength) {\n            wheel.suspensionLength = maxSuspensionLength;\n            wheel.raycastResult.reset();\n        }\n\n        var denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n\n        var chassis_velocity_at_contactPoint = new Vec3();\n        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n\n        var projVel = wheel.raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n\n        if (denominator >= -0.1) {\n            wheel.suspensionRelativeVelocity = 0;\n            wheel.clippedInvContactDotSuspension = 1 / 0.1;\n        } else {\n            var inv = -1 / denominator;\n            wheel.suspensionRelativeVelocity = projVel * inv;\n            wheel.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n\n        //put wheel info as in rest position\n        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n        wheel.suspensionRelativeVelocity = 0.0;\n        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n        wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n};\n\nRaycastVehicle.prototype.updateWheelTransformWorld = function(wheel){\n    wheel.isInContact = false;\n    var chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n};\n\n\n/**\n * Update one of the wheel transform.\n * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n * @method updateWheelTransform\n * @param {integer} wheelIndex The wheel index to update.\n */\nRaycastVehicle.prototype.updateWheelTransform = function(wheelIndex){\n    var up = tmpVec4;\n    var right = tmpVec5;\n    var fwd = tmpVec6;\n\n    var wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize();\n\n    // Rotate around steering over the wheelAxle\n    var steering = wheel.steering;\n    var steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n\n    var rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation);\n\n    // World rotation of the wheel\n    var q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n\n    q.normalize();\n\n    // world position of the wheel\n    var p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n};\n\nvar directions = [\n    new Vec3(1, 0, 0),\n    new Vec3(0, 1, 0),\n    new Vec3(0, 0, 1)\n];\n\n/**\n * Get the world transform of one of the wheels\n * @method getWheelTransformWorld\n * @param  {integer} wheelIndex\n * @return {Transform}\n */\nRaycastVehicle.prototype.getWheelTransformWorld = function(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n};\n\n\nvar updateFriction_surfNormalWS_scaled_proj = new Vec3();\nvar updateFriction_axle = [];\nvar updateFriction_forwardWS = [];\nvar sideFrictionStiffness2 = 1;\nRaycastVehicle.prototype.updateFriction = function(timeStep) {\n    var surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj;\n\n    //calculate the impulse, so that the wheels don't move sidewards\n    var wheelInfos = this.wheelInfos;\n    var numWheels = wheelInfos.length;\n    var chassisBody = this.chassisBody;\n    var forwardWS = updateFriction_forwardWS;\n    var axle = updateFriction_axle;\n\n    var numWheelsOnGround = 0;\n\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n        if (groundObject){\n            numWheelsOnGround++;\n        }\n\n        wheel.sideImpulse = 0;\n        wheel.forwardImpulse = 0;\n        if(!forwardWS[i]){\n            forwardWS[i] = new Vec3();\n        }\n        if(!axle[i]){\n            axle[i] = new Vec3();\n        }\n    }\n\n    for (var i = 0; i < numWheels; i++){\n        var wheel = wheelInfos[i];\n\n        var groundObject = wheel.raycastResult.body;\n\n        if (groundObject) {\n            var axlei = axle[i];\n            var wheelTrans = this.getWheelTransformWorld(i);\n\n            // Get world axle\n            wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n\n            var surfNormalWS = wheel.raycastResult.hitNormalWorld;\n            var proj = axlei.dot(surfNormalWS);\n            surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n            axlei.vsub(surfNormalWS_scaled_proj, axlei);\n            axlei.normalize();\n\n            surfNormalWS.cross(axlei, forwardWS[i]);\n            forwardWS[i].normalize();\n\n            wheel.sideImpulse = resolveSingleBilateral(\n                chassisBody,\n                wheel.raycastResult.hitPointWorld,\n                groundObject,\n                wheel.raycastResult.hitPointWorld,\n                axlei\n            );\n\n            wheel.sideImpulse *= sideFrictionStiffness2;\n        }\n    }\n\n    var sideFactor = 1;\n    var fwdFactor = 0.5;\n\n    this.sliding = false;\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n        var groundObject = wheel.raycastResult.body;\n\n        var rollingFriction = 0;\n\n        wheel.slipInfo = 1;\n        if (groundObject) {\n            var defaultRollingFrictionImpulse = 0;\n            var maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse;\n\n            // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n            // rollingFriction = calcRollingFriction(contactPt);\n            rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n\n            rollingFriction += wheel.engineForce * timeStep;\n\n            // rollingFriction = 0;\n            var factor = maxImpulse / rollingFriction;\n            wheel.slipInfo *= factor;\n        }\n\n        //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n        wheel.forwardImpulse = 0;\n        wheel.skidInfo = 1;\n\n        if (groundObject) {\n            wheel.skidInfo = 1;\n\n            var maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n            var maximpSide = maximp;\n\n            var maximpSquared = maximp * maximpSide;\n\n            wheel.forwardImpulse = rollingFriction;//wheelInfo.engineForce* timeStep;\n\n            var x = wheel.forwardImpulse * fwdFactor;\n            var y = wheel.sideImpulse * sideFactor;\n\n            var impulseSquared = x * x + y * y;\n\n            wheel.sliding = false;\n            if (impulseSquared > maximpSquared) {\n                this.sliding = true;\n                wheel.sliding = true;\n\n                var factor = maximp / Math.sqrt(impulseSquared);\n\n                wheel.skidInfo *= factor;\n            }\n        }\n    }\n\n    if (this.sliding) {\n        for (var i = 0; i < numWheels; i++) {\n            var wheel = wheelInfos[i];\n            if (wheel.sideImpulse !== 0) {\n                if (wheel.skidInfo < 1){\n                    wheel.forwardImpulse *= wheel.skidInfo;\n                    wheel.sideImpulse *= wheel.skidInfo;\n                }\n            }\n        }\n    }\n\n    // apply the impulses\n    for (var i = 0; i < numWheels; i++) {\n        var wheel = wheelInfos[i];\n\n        var rel_pos = new Vec3();\n        //wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos);\n        // cannons applyimpulse is using world coord for the position\n        rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n        if (wheel.forwardImpulse !== 0) {\n            var impulse = new Vec3();\n            forwardWS[i].scale(wheel.forwardImpulse, impulse);\n            chassisBody.applyImpulse(impulse, rel_pos);\n        }\n\n        if (wheel.sideImpulse !== 0){\n            var groundObject = wheel.raycastResult.body;\n\n            var rel_pos2 = new Vec3();\n            //wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2);\n            rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n            var sideImp = new Vec3();\n            axle[i].scale(wheel.sideImpulse, sideImp);\n\n            // Scale the relative position in the up direction with rollInfluence.\n            // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n            chassisBody.pointToLocalFrame(rel_pos, rel_pos);\n            rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n            chassisBody.pointToWorldFrame(rel_pos, rel_pos);\n            chassisBody.applyImpulse(sideImp, rel_pos);\n\n            //apply friction impulse on the ground\n            sideImp.scale(-1, sideImp);\n            groundObject.applyImpulse(sideImp, rel_pos2);\n        }\n    }\n};\n\nvar calcRollingFriction_vel1 = new Vec3();\nvar calcRollingFriction_vel2 = new Vec3();\nvar calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n    var j1 = 0;\n    var contactPosWorld = frictionPosWorld;\n\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    var vel1 = calcRollingFriction_vel1;\n    var vel2 = calcRollingFriction_vel2;\n    var vel = calcRollingFriction_vel;\n    // contactPosWorld.vsub(body0.position, rel_pos1);\n    // contactPosWorld.vsub(body1.position, rel_pos2);\n\n    body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n    body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n    vel1.vsub(vel2, vel);\n\n    var vrel = frictionDirectionWorld.dot(vel);\n\n    var denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n    var denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n    var relaxation = 1;\n    var jacDiagABInv = relaxation / (denom0 + denom1);\n\n    // calculate j that moves us to zero relative velocity\n    j1 = -vrel * jacDiagABInv;\n\n    if (maxImpulse < j1) {\n        j1 = maxImpulse;\n    }\n    if (j1 < -maxImpulse) {\n        j1 = -maxImpulse;\n    }\n\n    return j1;\n}\n\nvar computeImpulseDenominator_r0 = new Vec3();\nvar computeImpulseDenominator_c0 = new Vec3();\nvar computeImpulseDenominator_vec = new Vec3();\nvar computeImpulseDenominator_m = new Vec3();\nfunction computeImpulseDenominator(body, pos, normal) {\n    var r0 = computeImpulseDenominator_r0;\n    var c0 = computeImpulseDenominator_c0;\n    var vec = computeImpulseDenominator_vec;\n    var m = computeImpulseDenominator_m;\n\n    pos.vsub(body.position, r0);\n    r0.cross(normal, c0);\n    body.invInertiaWorld.vmult(c0, m);\n    m.cross(r0, vec);\n\n    return body.invMass + normal.dot(vec);\n}\n\n\nvar resolveSingleBilateral_vel1 = new Vec3();\nvar resolveSingleBilateral_vel2 = new Vec3();\nvar resolveSingleBilateral_vel = new Vec3();\n\n//bilateral constraint between two dynamic objects\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal, impulse){\n    var normalLenSqr = normal.norm2();\n    if (normalLenSqr > 1.1){\n        return 0; // no impulse\n    }\n    // var rel_pos1 = new Vec3();\n    // var rel_pos2 = new Vec3();\n    // pos1.vsub(body1.position, rel_pos1);\n    // pos2.vsub(body2.position, rel_pos2);\n\n    var vel1 = resolveSingleBilateral_vel1;\n    var vel2 = resolveSingleBilateral_vel2;\n    var vel = resolveSingleBilateral_vel;\n    body1.getVelocityAtWorldPoint(pos1, vel1);\n    body2.getVelocityAtWorldPoint(pos2, vel2);\n\n    vel1.vsub(vel2, vel);\n\n    var rel_vel = normal.dot(vel);\n\n    var contactDamping = 0.2;\n    var massTerm = 1 / (body1.invMass + body2.invMass);\n    var impulse = - contactDamping * rel_vel * massTerm;\n\n    return impulse;\n}\n},{\"../collision/Ray\":9,\"../collision/RaycastResult\":10,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/WheelInfo\":36,\"./Body\":31}],33:[function(_dereq_,module,exports){\nvar Body = _dereq_('./Body');\nvar Sphere = _dereq_('../shapes/Sphere');\nvar Box = _dereq_('../shapes/Box');\nvar Vec3 = _dereq_('../math/Vec3');\nvar HingeConstraint = _dereq_('../constraints/HingeConstraint');\n\nmodule.exports = RigidVehicle;\n\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n * @class RigidVehicle\n * @constructor\n * @param {Body} [options.chassisBody]\n */\nfunction RigidVehicle(options){\n    this.wheelBodies = [];\n\n    /**\n     * @property coordinateSystem\n     * @type {Vec3}\n     */\n    this.coordinateSystem = typeof(options.coordinateSystem)==='undefined' ? new Vec3(1, 2, 3) : options.coordinateSystem.clone();\n\n    /**\n     * @property {Body} chassisBody\n     */\n    this.chassisBody = options.chassisBody;\n\n    if(!this.chassisBody){\n        // No chassis body given. Create it!\n        var chassisShape = new Box(new Vec3(5, 2, 0.5));\n        this.chassisBody = new Body(1, chassisShape);\n    }\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    this.wheelAxes = [];\n    this.wheelForces = [];\n}\n\n/**\n * Add a wheel\n * @method addWheel\n * @param {object} options\n * @param {boolean} [options.isFrontWheel]\n * @param {Vec3} [options.position] Position of the wheel, locally in the chassis body.\n * @param {Vec3} [options.direction] Slide direction of the wheel along the suspension.\n * @param {Vec3} [options.axis] Axis of rotation of the wheel, locally defined in the chassis.\n * @param {Body} [options.body] The wheel body.\n */\nRigidVehicle.prototype.addWheel = function(options){\n    options = options || {};\n    var wheelBody = options.body;\n    if(!wheelBody){\n        wheelBody =  new Body(1, new Sphere(1.2));\n    }\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0);\n\n    // Position constrain wheels\n    var zero = new Vec3();\n    var position = typeof(options.position) !== 'undefined' ? options.position.clone() : new Vec3();\n\n    // Set position locally to the chassis\n    var worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z);\n\n    // Constrain wheel\n    var axis = typeof(options.axis) !== 'undefined' ? options.axis.clone() : new Vec3(0, 1, 0);\n    this.wheelAxes.push(axis);\n\n    var hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n        pivotA: position,\n        axisA: axis,\n        pivotB: Vec3.ZERO,\n        axisB: axis,\n        collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n\n    return this.wheelBodies.length - 1;\n};\n\n/**\n * Set the steering value of a wheel.\n * @method setSteeringValue\n * @param {number} value\n * @param {integer} wheelIndex\n * @todo check coordinateSystem\n */\nRigidVehicle.prototype.setSteeringValue = function(value, wheelIndex){\n    // Set angle of the hinge axis\n    var axis = this.wheelAxes[wheelIndex];\n\n    var c = Math.cos(value),\n        s = Math.sin(value),\n        x = axis.x,\n        y = axis.y;\n    this.constraints[wheelIndex].axisA.set(\n        c*x -s*y,\n        s*x +c*y,\n        0\n    );\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method setMotorSpeed\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.setMotorSpeed = function(value, wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n};\n\n/**\n * Set the target rotational speed of the hinge constraint.\n * @method disableMotor\n * @param {number} value\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.disableMotor = function(wheelIndex){\n    var hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n};\n\nvar torque = new Vec3();\n\n/**\n * Set the wheel force to apply on one of the wheels each time step\n * @method setWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.setWheelForce = function(value, wheelIndex){\n    this.wheelForces[wheelIndex] = value;\n};\n\n/**\n * Apply a torque on one of the wheels.\n * @method applyWheelForce\n * @param  {number} value\n * @param  {integer} wheelIndex\n */\nRigidVehicle.prototype.applyWheelForce = function(value, wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var bodyTorque = wheelBody.torque;\n\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n};\n\n/**\n * Add the vehicle including its constraints to the world.\n * @method addToWorld\n * @param {World} world\n */\nRigidVehicle.prototype.addToWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.add(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n};\n\nRigidVehicle.prototype._update = function(){\n    var wheelForces = this.wheelForces;\n    for (var i = 0; i < wheelForces.length; i++) {\n        this.applyWheelForce(wheelForces[i], i);\n    }\n};\n\n/**\n * Remove the vehicle including its constraints from the world.\n * @method removeFromWorld\n * @param {World} world\n */\nRigidVehicle.prototype.removeFromWorld = function(world){\n    var constraints = this.constraints;\n    var bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (var i = 0; i < bodies.length; i++) {\n        world.remove(bodies[i]);\n    }\n\n    for (var i = 0; i < constraints.length; i++) {\n        world.removeConstraint(constraints[i]);\n    }\n};\n\nvar worldAxis = new Vec3();\n\n/**\n * Get current rotational velocity of a wheel\n * @method getWheelSpeed\n * @param {integer} wheelIndex\n */\nRigidVehicle.prototype.getWheelSpeed = function(wheelIndex){\n    var axis = this.wheelAxes[wheelIndex];\n    var wheelBody = this.wheelBodies[wheelIndex];\n    var w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n};\n\n},{\"../constraints/HingeConstraint\":15,\"../math/Vec3\":30,\"../shapes/Box\":37,\"../shapes/Sphere\":44,\"./Body\":31}],34:[function(_dereq_,module,exports){\nmodule.exports = SPHSystem;\n\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Particle = _dereq_('../shapes/Particle');\nvar Body = _dereq_('../objects/Body');\nvar Material = _dereq_('../material/Material');\n\n/**\n * Smoothed-particle hydrodynamics system\n * @class SPHSystem\n * @constructor\n */\nfunction SPHSystem(){\n    this.particles = [];\n\t\n    /**\n     * Density of the system (kg/m3).\n     * @property {number} density\n     */\n    this.density = 1;\n\t\n    /**\n     * Distance below which two particles are considered to be neighbors.\n     * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n     * @property {number} smoothingRadius\n     */\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n\t\n    /**\n     * Viscosity of the system.\n     * @property {number} viscosity\n     */\n    this.viscosity = 0.01;\n    this.eps = 0.000001;\n\n    // Stuff Computed per particle\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n}\n\n/**\n * Add a particle to the system.\n * @method add\n * @param {Body} particle\n */\nSPHSystem.prototype.add = function(particle){\n    this.particles.push(particle);\n    if(this.neighbors.length < this.particles.length){\n        this.neighbors.push([]);\n    }\n};\n\n/**\n * Remove a particle from the system.\n * @method remove\n * @param {Body} particle\n */\nSPHSystem.prototype.remove = function(particle){\n    var idx = this.particles.indexOf(particle);\n    if(idx !== -1){\n        this.particles.splice(idx,1);\n        if(this.neighbors.length > this.particles.length){\n            this.neighbors.pop();\n        }\n    }\n};\n\n/**\n * Get neighbors within smoothing volume, save in the array neighbors\n * @method getNeighbors\n * @param {Body} particle\n * @param {Array} neighbors\n */\nvar SPHSystem_getNeighbors_dist = new Vec3();\nSPHSystem.prototype.getNeighbors = function(particle,neighbors){\n    var N = this.particles.length,\n        id = particle.id,\n        R2 = this.smoothingRadius * this.smoothingRadius,\n        dist = SPHSystem_getNeighbors_dist;\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i];\n        p.position.vsub(particle.position,dist);\n        if(id!==p.id && dist.norm2() < R2){\n            neighbors.push(p);\n        }\n    }\n};\n\n// Temp vectors for calculation\nvar SPHSystem_update_dist = new Vec3(),\n    SPHSystem_update_a_pressure = new Vec3(),\n    SPHSystem_update_a_visc = new Vec3(),\n    SPHSystem_update_gradW = new Vec3(),\n    SPHSystem_update_r_vec = new Vec3(),\n    SPHSystem_update_u = new Vec3(); // Relative velocity\nSPHSystem.prototype.update = function(){\n    var N = this.particles.length,\n        dist = SPHSystem_update_dist,\n        cs = this.speedOfSound,\n        eps = this.eps;\n\n    for(var i=0; i!==N; i++){\n        var p = this.particles[i]; // Current particle\n        var neighbors = this.neighbors[i];\n\n        // Get neighbors\n        neighbors.length = 0;\n        this.getNeighbors(p,neighbors);\n        neighbors.push(this.particles[i]); // Add current too\n        var numNeighbors = neighbors.length;\n\n        // Accumulate density for the particle\n        var sum = 0.0;\n        for(var j=0; j!==numNeighbors; j++){\n\n            //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n            p.position.vsub(neighbors[j].position, dist);\n            var len = dist.norm();\n\n            var weight = this.w(len);\n            sum += neighbors[j].mass * weight;\n        }\n\n        // Save\n        this.densities[i] = sum;\n        this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    }\n\n    // Add forces\n\n    // Sum to these accelerations\n    var a_pressure= SPHSystem_update_a_pressure;\n    var a_visc =    SPHSystem_update_a_visc;\n    var gradW =     SPHSystem_update_gradW;\n    var r_vec =     SPHSystem_update_r_vec;\n    var u =         SPHSystem_update_u;\n\n    for(var i=0; i!==N; i++){\n\n        var particle = this.particles[i];\n\n        a_pressure.set(0,0,0);\n        a_visc.set(0,0,0);\n\n        // Init vars\n        var Pij;\n        var nabla;\n        var Vij;\n\n        // Sum up for all other neighbors\n        var neighbors = this.neighbors[i];\n        var numNeighbors = neighbors.length;\n\n        //printf(\"Neighbors: \");\n        for(var j=0; j!==numNeighbors; j++){\n\n            var neighbor = neighbors[j];\n            //printf(\"%d \",nj);\n\n            // Get r once for all..\n            particle.position.vsub(neighbor.position,r_vec);\n            var r = r_vec.norm();\n\n            // Pressure contribution\n            Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i]*this.densities[i] + eps) + this.pressures[j] / (this.densities[j]*this.densities[j] + eps));\n            this.gradw(r_vec, gradW);\n            // Add to pressure acceleration\n            gradW.mult(Pij , gradW);\n            a_pressure.vadd(gradW, a_pressure);\n\n            // Viscosity contribution\n            neighbor.velocity.vsub(particle.velocity, u);\n            u.mult( 1.0 / (0.0001+this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass , u );\n            nabla = this.nablaw(r);\n            u.mult(nabla,u);\n            // Add to viscosity acceleration\n            a_visc.vadd( u, a_visc );\n        }\n\n        // Calculate force\n        a_visc.mult(particle.mass, a_visc);\n        a_pressure.mult(particle.mass, a_pressure);\n\n        // Add force to particles\n        particle.force.vadd(a_visc, particle.force);\n        particle.force.vadd(a_pressure, particle.force);\n    }\n};\n\n// Calculate the weight using the W(r) weightfunction\nSPHSystem.prototype.w = function(r){\n    // 315\n    var h = this.smoothingRadius;\n    return 315.0/(64.0*Math.PI*Math.pow(h,9)) * Math.pow(h*h-r*r,3);\n};\n\n// calculate gradient of the weight function\nSPHSystem.prototype.gradw = function(rVec,resultVec){\n    var r = rVec.norm(),\n        h = this.smoothingRadius;\n    rVec.mult(945.0/(32.0*Math.PI*Math.pow(h,9)) * Math.pow((h*h-r*r),2) , resultVec);\n};\n\n// Calculate nabla(W)\nSPHSystem.prototype.nablaw = function(r){\n    var h = this.smoothingRadius;\n    var nabla = 945.0/(32.0*Math.PI*Math.pow(h,9)) * (h*h-r*r)*(7*r*r - 3*h*h);\n    return nabla;\n};\n\n},{\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Particle\":41,\"../shapes/Shape\":43}],35:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = Spring;\n\n/**\n * A spring, connecting two bodies.\n *\n * @class Spring\n * @constructor\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Object} [options]\n * @param {number} [options.restLength]   A number > 0. Default: 1\n * @param {number} [options.stiffness]    A number >= 0. Default: 100\n * @param {number} [options.damping]      A number >= 0. Default: 1\n * @param {Vec3}  [options.worldAnchorA] Where to hook the spring to body A, in world coordinates.\n * @param {Vec3}  [options.worldAnchorB]\n * @param {Vec3}  [options.localAnchorA] Where to hook the spring to body A, in local body coordinates.\n * @param {Vec3}  [options.localAnchorB]\n */\nfunction Spring(bodyA,bodyB,options){\n    options = options || {};\n\n    /**\n     * Rest length of the spring.\n     * @property restLength\n     * @type {number}\n     */\n    this.restLength = typeof(options.restLength) === \"number\" ? options.restLength : 1;\n\n    /**\n     * Stiffness of the spring.\n     * @property stiffness\n     * @type {number}\n     */\n    this.stiffness = options.stiffness || 100;\n\n    /**\n     * Damping of the spring.\n     * @property damping\n     * @type {number}\n     */\n    this.damping = options.damping || 1;\n\n    /**\n     * First connected body.\n     * @property bodyA\n     * @type {Body}\n     */\n    this.bodyA = bodyA;\n\n    /**\n     * Second connected body.\n     * @property bodyB\n     * @type {Body}\n     */\n    this.bodyB = bodyB;\n\n    /**\n     * Anchor for bodyA in local bodyA coordinates.\n     * @property localAnchorA\n     * @type {Vec3}\n     */\n    this.localAnchorA = new Vec3();\n\n    /**\n     * Anchor for bodyB in local bodyB coordinates.\n     * @property localAnchorB\n     * @type {Vec3}\n     */\n    this.localAnchorB = new Vec3();\n\n    if(options.localAnchorA){\n        this.localAnchorA.copy(options.localAnchorA);\n    }\n    if(options.localAnchorB){\n        this.localAnchorB.copy(options.localAnchorB);\n    }\n    if(options.worldAnchorA){\n        this.setWorldAnchorA(options.worldAnchorA);\n    }\n    if(options.worldAnchorB){\n        this.setWorldAnchorB(options.worldAnchorB);\n    }\n}\n\n/**\n * Set the anchor point on body A, using world coordinates.\n * @method setWorldAnchorA\n * @param {Vec3} worldAnchorA\n */\nSpring.prototype.setWorldAnchorA = function(worldAnchorA){\n    this.bodyA.pointToLocalFrame(worldAnchorA,this.localAnchorA);\n};\n\n/**\n * Set the anchor point on body B, using world coordinates.\n * @method setWorldAnchorB\n * @param {Vec3} worldAnchorB\n */\nSpring.prototype.setWorldAnchorB = function(worldAnchorB){\n    this.bodyB.pointToLocalFrame(worldAnchorB,this.localAnchorB);\n};\n\n/**\n * Get the anchor point on body A, in world coordinates.\n * @method getWorldAnchorA\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorA = function(result){\n    this.bodyA.pointToWorldFrame(this.localAnchorA,result);\n};\n\n/**\n * Get the anchor point on body B, in world coordinates.\n * @method getWorldAnchorB\n * @param {Vec3} result The vector to store the result in.\n */\nSpring.prototype.getWorldAnchorB = function(result){\n    this.bodyB.pointToWorldFrame(this.localAnchorB,result);\n};\n\nvar applyForce_r =              new Vec3(),\n    applyForce_r_unit =         new Vec3(),\n    applyForce_u =              new Vec3(),\n    applyForce_f =              new Vec3(),\n    applyForce_worldAnchorA =   new Vec3(),\n    applyForce_worldAnchorB =   new Vec3(),\n    applyForce_ri =             new Vec3(),\n    applyForce_rj =             new Vec3(),\n    applyForce_ri_x_f =         new Vec3(),\n    applyForce_rj_x_f =         new Vec3(),\n    applyForce_tmp =            new Vec3();\n\n/**\n * Apply the spring force to the connected bodies.\n * @method applyForce\n */\nSpring.prototype.applyForce = function(){\n    var k = this.stiffness,\n        d = this.damping,\n        l = this.restLength,\n        bodyA = this.bodyA,\n        bodyB = this.bodyB,\n        r = applyForce_r,\n        r_unit = applyForce_r_unit,\n        u = applyForce_u,\n        f = applyForce_f,\n        tmp = applyForce_tmp;\n\n    var worldAnchorA = applyForce_worldAnchorA,\n        worldAnchorB = applyForce_worldAnchorB,\n        ri = applyForce_ri,\n        rj = applyForce_rj,\n        ri_x_f = applyForce_ri_x_f,\n        rj_x_f = applyForce_rj_x_f;\n\n    // Get world anchors\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB);\n\n    // Get offset points\n    worldAnchorA.vsub(bodyA.position,ri);\n    worldAnchorB.vsub(bodyB.position,rj);\n\n    // Compute distance vector between world anchor points\n    worldAnchorB.vsub(worldAnchorA,r);\n    var rlen = r.norm();\n    r_unit.copy(r);\n    r_unit.normalize();\n\n    // Compute relative velocity of the anchor points, u\n    bodyB.velocity.vsub(bodyA.velocity,u);\n    // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj,tmp);\n    u.vadd(tmp,u);\n    bodyA.angularVelocity.cross(ri,tmp);\n    u.vsub(tmp,u);\n\n    // F = - k * ( x - L ) - D * ( u )\n    r_unit.mult(-k*(rlen-l) - d*u.dot(r_unit), f);\n\n    // Add forces to bodies\n    bodyA.force.vsub(f,bodyA.force);\n    bodyB.force.vadd(f,bodyB.force);\n\n    // Angular force\n    ri.cross(f,ri_x_f);\n    rj.cross(f,rj_x_f);\n    bodyA.torque.vsub(ri_x_f,bodyA.torque);\n    bodyB.torque.vadd(rj_x_f,bodyB.torque);\n};\n\n},{\"../math/Vec3\":30}],36:[function(_dereq_,module,exports){\nvar Vec3 = _dereq_('../math/Vec3');\nvar Transform = _dereq_('../math/Transform');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = WheelInfo;\n\n/**\n * @class WheelInfo\n * @constructor\n * @param {Object} [options]\n *\n * @param {Vec3} [options.chassisConnectionPointLocal]\n * @param {Vec3} [options.chassisConnectionPointWorld]\n * @param {Vec3} [options.directionLocal]\n * @param {Vec3} [options.directionWorld]\n * @param {Vec3} [options.axleLocal]\n * @param {Vec3} [options.axleWorld]\n * @param {number} [options.suspensionRestLength=1]\n * @param {number} [options.suspensionMaxLength=2]\n * @param {number} [options.radius=1]\n * @param {number} [options.suspensionStiffness=100]\n * @param {number} [options.dampingCompression=10]\n * @param {number} [options.dampingRelaxation=10]\n * @param {number} [options.frictionSlip=10000]\n * @param {number} [options.steering=0]\n * @param {number} [options.rotation=0]\n * @param {number} [options.deltaRotation=0]\n * @param {number} [options.rollInfluence=0.01]\n * @param {number} [options.maxSuspensionForce]\n * @param {boolean} [options.isFrontWheel=true]\n * @param {number} [options.clippedInvContactDotSuspension=1]\n * @param {number} [options.suspensionRelativeVelocity=0]\n * @param {number} [options.suspensionForce=0]\n * @param {number} [options.skidInfo=0]\n * @param {number} [options.suspensionLength=0]\n * @param {number} [options.maxSuspensionTravel=1]\n * @param {boolean} [options.useCustomSlidingRotationalSpeed=false]\n * @param {number} [options.customSlidingRotationalSpeed=-0.1]\n */\nfunction WheelInfo(options){\n    options = Utils.defaults(options, {\n        chassisConnectionPointLocal: new Vec3(),\n        chassisConnectionPointWorld: new Vec3(),\n        directionLocal: new Vec3(),\n        directionWorld: new Vec3(),\n        axleLocal: new Vec3(),\n        axleWorld: new Vec3(),\n        suspensionRestLength: 1,\n        suspensionMaxLength: 2,\n        radius: 1,\n        suspensionStiffness: 100,\n        dampingCompression: 10,\n        dampingRelaxation: 10,\n        frictionSlip: 10000,\n        steering: 0,\n        rotation: 0,\n        deltaRotation: 0,\n        rollInfluence: 0.01,\n        maxSuspensionForce: Number.MAX_VALUE,\n        isFrontWheel: true,\n        clippedInvContactDotSuspension: 1,\n        suspensionRelativeVelocity: 0,\n        suspensionForce: 0,\n        skidInfo: 0,\n        suspensionLength: 0,\n        maxSuspensionTravel: 1,\n        useCustomSlidingRotationalSpeed: false,\n        customSlidingRotationalSpeed: -0.1\n    });\n\n    /**\n     * Max travel distance of the suspension, in meters.\n     * @property {number} maxSuspensionTravel\n     */\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n\n    /**\n     * Speed to apply to the wheel rotation when the wheel is sliding.\n     * @property {number} customSlidingRotationalSpeed\n     */\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n\n    /**\n     * If the customSlidingRotationalSpeed should be used.\n     * @property {Boolean} useCustomSlidingRotationalSpeed\n     */\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n\n    /**\n     * @property {Boolean} sliding\n     */\n    this.sliding = false;\n\n    /**\n     * Connection point, defined locally in the chassis body frame.\n     * @property {Vec3} chassisConnectionPointLocal\n     */\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n\n    /**\n     * @property {Vec3} chassisConnectionPointWorld\n     */\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n\n    /**\n     * @property {Vec3} directionLocal\n     */\n    this.directionLocal = options.directionLocal.clone();\n\n    /**\n     * @property {Vec3} directionWorld\n     */\n    this.directionWorld = options.directionWorld.clone();\n\n    /**\n     * @property {Vec3} axleLocal\n     */\n    this.axleLocal = options.axleLocal.clone();\n\n    /**\n     * @property {Vec3} axleWorld\n     */\n    this.axleWorld = options.axleWorld.clone();\n\n    /**\n     * @property {number} suspensionRestLength\n     */\n    this.suspensionRestLength = options.suspensionRestLength;\n\n    /**\n     * @property {number} suspensionMaxLength\n     */\n    this.suspensionMaxLength = options.suspensionMaxLength;\n\n    /**\n     * @property {number} radius\n     */\n    this.radius = options.radius;\n\n    /**\n     * @property {number} suspensionStiffness\n     */\n    this.suspensionStiffness = options.suspensionStiffness;\n\n    /**\n     * @property {number} dampingCompression\n     */\n    this.dampingCompression = options.dampingCompression;\n\n    /**\n     * @property {number} dampingRelaxation\n     */\n    this.dampingRelaxation = options.dampingRelaxation;\n\n    /**\n     * @property {number} frictionSlip\n     */\n    this.frictionSlip = options.frictionSlip;\n\n    /**\n     * @property {number} steering\n     */\n    this.steering = 0;\n\n    /**\n     * Rotation value, in radians.\n     * @property {number} rotation\n     */\n    this.rotation = 0;\n\n    /**\n     * @property {number} deltaRotation\n     */\n    this.deltaRotation = 0;\n\n    /**\n     * @property {number} rollInfluence\n     */\n    this.rollInfluence = options.rollInfluence;\n\n    /**\n     * @property {number} maxSuspensionForce\n     */\n    this.maxSuspensionForce = options.maxSuspensionForce;\n\n    /**\n     * @property {number} engineForce\n     */\n    this.engineForce = 0;\n\n    /**\n     * @property {number} brake\n     */\n    this.brake = 0;\n\n    /**\n     * @property {number} isFrontWheel\n     */\n    this.isFrontWheel = options.isFrontWheel;\n\n    /**\n     * @property {number} clippedInvContactDotSuspension\n     */\n    this.clippedInvContactDotSuspension = 1;\n\n    /**\n     * @property {number} suspensionRelativeVelocity\n     */\n    this.suspensionRelativeVelocity = 0;\n\n    /**\n     * @property {number} suspensionForce\n     */\n    this.suspensionForce = 0;\n\n    /**\n     * @property {number} skidInfo\n     */\n    this.skidInfo = 0;\n\n    /**\n     * @property {number} suspensionLength\n     */\n    this.suspensionLength = 0;\n\n    /**\n     * @property {number} sideImpulse\n     */\n    this.sideImpulse = 0;\n\n    /**\n     * @property {number} forwardImpulse\n     */\n    this.forwardImpulse = 0;\n\n    /**\n     * The result from raycasting\n     * @property {RaycastResult} raycastResult\n     */\n    this.raycastResult = new RaycastResult();\n\n    /**\n     * Wheel world transform\n     * @property {Transform} worldTransform\n     */\n    this.worldTransform = new Transform();\n\n    /**\n     * @property {boolean} isInContact\n     */\n    this.isInContact = false;\n}\n\nvar chassis_velocity_at_contactPoint = new Vec3();\nvar relpos = new Vec3();\nvar chassis_velocity_at_contactPoint = new Vec3();\nWheelInfo.prototype.updateWheel = function(chassis){\n    var raycastResult = this.raycastResult;\n\n    if (this.isInContact){\n        var project= raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n        raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n        var projVel = raycastResult.hitNormalWorld.dot( chassis_velocity_at_contactPoint );\n        if (project >= -0.1) {\n            this.suspensionRelativeVelocity = 0.0;\n            this.clippedInvContactDotSuspension = 1.0 / 0.1;\n        } else {\n            var inv = -1 / project;\n            this.suspensionRelativeVelocity = projVel * inv;\n            this.clippedInvContactDotSuspension = inv;\n        }\n\n    } else {\n        // Not in contact : position wheel in a nice (rest length) position\n        raycastResult.suspensionLength = this.suspensionRestLength;\n        this.suspensionRelativeVelocity = 0.0;\n        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n        this.clippedInvContactDotSuspension = 1.0;\n    }\n};\n},{\"../collision/RaycastResult\":10,\"../math/Transform\":29,\"../math/Vec3\":30,\"../utils/Utils\":53}],37:[function(_dereq_,module,exports){\nmodule.exports = Box;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\n\n/**\n * A 3d box shape.\n * @class Box\n * @constructor\n * @param {Vec3} halfExtents\n * @author schteppe\n * @extends Shape\n */\nfunction Box(halfExtents){\n    Shape.call(this);\n\n    this.type = Shape.types.BOX;\n\n    /**\n     * @property halfExtents\n     * @type {Vec3}\n     */\n    this.halfExtents = halfExtents;\n\n    /**\n     * Used by the contact generator to make contacts with other convex polyhedra for example\n     * @property convexPolyhedronRepresentation\n     * @type {ConvexPolyhedron}\n     */\n    this.convexPolyhedronRepresentation = null;\n\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n}\nBox.prototype = new Shape();\nBox.prototype.constructor = Box;\n\n/**\n * Updates the local convex polyhedron representation used for some collisions.\n * @method updateConvexPolyhedronRepresentation\n */\nBox.prototype.updateConvexPolyhedronRepresentation = function(){\n    var sx = this.halfExtents.x;\n    var sy = this.halfExtents.y;\n    var sz = this.halfExtents.z;\n    var V = Vec3;\n\n    var vertices = [\n        new V(-sx,-sy,-sz),\n        new V( sx,-sy,-sz),\n        new V( sx, sy,-sz),\n        new V(-sx, sy,-sz),\n        new V(-sx,-sy, sz),\n        new V( sx,-sy, sz),\n        new V( sx, sy, sz),\n        new V(-sx, sy, sz)\n    ];\n\n    var indices = [\n        [3,2,1,0], // -z\n        [4,5,6,7], // +z\n        [5,4,0,1], // -y\n        [2,3,7,6], // +y\n        [0,4,7,3], // -x\n        [1,2,6,5], // +x\n    ];\n\n    var axes = [\n        new V(0, 0, 1),\n        new V(0, 1, 0),\n        new V(1, 0, 0)\n    ];\n\n    var h = new ConvexPolyhedron(vertices, indices);\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n};\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nBox.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n};\n\nBox.calculateInertia = function(halfExtents,mass,target){\n    var e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.z*2*e.z );\n    target.y = 1.0 / 12.0 * mass * (   2*e.x*2*e.x + 2*e.z*2*e.z );\n    target.z = 1.0 / 12.0 * mass * (   2*e.y*2*e.y + 2*e.x*2*e.x );\n};\n\n/**\n * Get the box 6 side normals\n * @method getSideNormals\n * @param {array}      sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n * @param {Quaternion} quat             Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n * @return {array}\n */\nBox.prototype.getSideNormals = function(sixTargetVectors,quat){\n    var sides = sixTargetVectors;\n    var ex = this.halfExtents;\n    sides[0].set(  ex.x,     0,     0);\n    sides[1].set(     0,  ex.y,     0);\n    sides[2].set(     0,     0,  ex.z);\n    sides[3].set( -ex.x,     0,     0);\n    sides[4].set(     0, -ex.y,     0);\n    sides[5].set(     0,     0, -ex.z);\n\n    if(quat!==undefined){\n        for(var i=0; i!==sides.length; i++){\n            quat.vmult(sides[i],sides[i]);\n        }\n    }\n\n    return sides;\n};\n\nBox.prototype.volume = function(){\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n};\n\nBox.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.halfExtents.norm();\n};\n\nvar worldCornerTempPos = new Vec3();\nvar worldCornerTempNeg = new Vec3();\nBox.prototype.forEachWorldCorner = function(pos,quat,callback){\n\n    var e = this.halfExtents;\n    var corners = [[  e.x,  e.y,  e.z],\n                   [ -e.x,  e.y,  e.z],\n                   [ -e.x, -e.y,  e.z],\n                   [ -e.x, -e.y, -e.z],\n                   [  e.x, -e.y, -e.z],\n                   [  e.x,  e.y, -e.z],\n                   [ -e.x,  e.y, -e.z],\n                   [  e.x, -e.y,  e.z]];\n    for(var i=0; i<corners.length; i++){\n        worldCornerTempPos.set(corners[i][0],corners[i][1],corners[i][2]);\n        quat.vmult(worldCornerTempPos,worldCornerTempPos);\n        pos.vadd(worldCornerTempPos,worldCornerTempPos);\n        callback(worldCornerTempPos.x,\n                 worldCornerTempPos.y,\n                 worldCornerTempPos.z);\n    }\n};\n\nvar worldCornersTemp = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\nBox.prototype.calculateWorldAABB = function(pos,quat,min,max){\n\n    var e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x,  e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x,  e.y, -e.z);\n    worldCornersTemp[6].set(-e.x,  e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y,  e.z);\n\n    var wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n    for(var i=1; i<8; i++){\n        var wc = worldCornersTemp[i];\n        quat.vmult(wc, wc);\n        pos.vadd(wc, wc);\n        var x = wc.x;\n        var y = wc.y;\n        var z = wc.z;\n        if(x > max.x){\n            max.x = x;\n        }\n        if(y > max.y){\n            max.y = y;\n        }\n        if(z > max.z){\n            max.z = z;\n        }\n\n        if(x < min.x){\n            min.x = x;\n        }\n        if(y < min.y){\n            min.y = y;\n        }\n        if(z < min.z){\n            min.z = z;\n        }\n    }\n\n    // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n};\n\n},{\"../math/Vec3\":30,\"./ConvexPolyhedron\":38,\"./Shape\":43}],38:[function(_dereq_,module,exports){\nmodule.exports = ConvexPolyhedron;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\n\n/**\n * A set of polygons describing a convex shape.\n * @class ConvexPolyhedron\n * @constructor\n * @extends Shape\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @param {array} points An array of Vec3's\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n */\nfunction ConvexPolyhedron(points, faces, uniqueAxes) {\n    var that = this;\n    Shape.call(this);\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n\n    /**\n     * Array of Vec3\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = points||[];\n\n    this.worldVertices = []; // World transformed version of .vertices\n    this.worldVerticesNeedsUpdate = true;\n\n    /**\n     * Array of integer arrays, indicating which vertices each face consists of\n     * @property faces\n     * @type {Array}\n     */\n    this.faces = faces||[];\n\n    /**\n     * Array of Vec3\n     * @property faceNormals\n     * @type {Array}\n     */\n    this.faceNormals = [];\n    this.computeNormals();\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    /**\n     * Array of Vec3\n     * @property uniqueEdges\n     * @type {Array}\n     */\n    this.uniqueEdges = [];\n\n    /**\n     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n     * @property {Array} uniqueAxes\n     */\n    this.uniqueAxes = uniqueAxes ? uniqueAxes.slice() : null;\n\n    this.computeEdges();\n    this.updateBoundingSphereRadius();\n}\nConvexPolyhedron.prototype = new Shape();\nConvexPolyhedron.prototype.constructor = ConvexPolyhedron;\n\nvar computeEdges_tmpEdge = new Vec3();\n/**\n * Computes uniqueEdges\n * @method computeEdges\n */\nConvexPolyhedron.prototype.computeEdges = function(){\n    var faces = this.faces;\n    var vertices = this.vertices;\n    var nv = vertices.length;\n    var edges = this.uniqueEdges;\n\n    edges.length = 0;\n\n    var edge = computeEdges_tmpEdge;\n\n    for(var i=0; i !== faces.length; i++){\n        var face = faces[i];\n        var numVertices = face.length;\n        for(var j = 0; j !== numVertices; j++){\n            var k = ( j+1 ) % numVertices;\n            vertices[face[j]].vsub(vertices[face[k]], edge);\n            edge.normalize();\n            var found = false;\n            for(var p=0; p !== edges.length; p++){\n                if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)){\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found){\n                edges.push(edge.clone());\n            }\n        }\n    }\n};\n\n/**\n * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\n * @method computeNormals\n */\nConvexPolyhedron.prototype.computeNormals = function(){\n    this.faceNormals.length = this.faces.length;\n\n    // Generate normals\n    for(var i=0; i<this.faces.length; i++){\n\n        // Check so all vertices exists for this face\n        for(var j=0; j<this.faces[i].length; j++){\n            if(!this.vertices[this.faces[i][j]]){\n                throw new Error(\"Vertex \"+this.faces[i][j]+\" not found!\");\n            }\n        }\n\n        var n = this.faceNormals[i] || new Vec3();\n        this.getFaceNormal(i,n);\n        n.negate(n);\n        this.faceNormals[i] = n;\n        var vertex = this.vertices[this.faces[i][0]];\n        if(n.dot(vertex) < 0){\n            console.error(\".faceNormals[\" + i + \"] = Vec3(\"+n.toString()+\") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n            for(var j=0; j<this.faces[i].length; j++){\n                console.warn(\".vertices[\"+this.faces[i][j]+\"] = Vec3(\"+this.vertices[this.faces[i][j]].toString()+\")\");\n            }\n        }\n    }\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method getFaceNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nConvexPolyhedron.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\n/**\n * Compute the normal of a face from its vertices\n * @method getFaceNormal\n * @param  {Number} i\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.getFaceNormal = function(i,target){\n    var f = this.faces[i];\n    var va = this.vertices[f[0]];\n    var vb = this.vertices[f[1]];\n    var vc = this.vertices[f[2]];\n    return ConvexPolyhedron.computeNormal(va,vb,vc,target);\n};\n\n/**\n * @method clipAgainstHull\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} separatingNormal\n * @param {Number} minDist Clamp distance\n * @param {Number} maxDist\n * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n */\nvar cah_WorldNormal = new Vec3();\nConvexPolyhedron.prototype.clipAgainstHull = function(posA,quatA,hullB,posB,quatB,separatingNormal,minDist,maxDist,result){\n    var WorldNormal = cah_WorldNormal;\n    var hullA = this;\n    var curMaxDist = maxDist;\n    var closestFaceB = -1;\n    var dmax = -Number.MAX_VALUE;\n    for(var face=0; face < hullB.faces.length; face++){\n        WorldNormal.copy(hullB.faceNormals[face]);\n        quatB.vmult(WorldNormal,WorldNormal);\n        //posB.vadd(WorldNormal,WorldNormal);\n        var d = WorldNormal.dot(separatingNormal);\n        if (d > dmax){\n            dmax = d;\n            closestFaceB = face;\n        }\n    }\n    var worldVertsB1 = [];\n    var polyB = hullB.faces[closestFaceB];\n    var numVertices = polyB.length;\n    for(var e0=0; e0<numVertices; e0++){\n        var b = hullB.vertices[polyB[e0]];\n        var worldb = new Vec3();\n        worldb.copy(b);\n        quatB.vmult(worldb,worldb);\n        posB.vadd(worldb,worldb);\n        worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB>=0){\n        this.clipFaceAgainstHull(separatingNormal,\n                                 posA,\n                                 quatA,\n                                 worldVertsB1,\n                                 minDist,\n                                 maxDist,\n                                 result);\n    }\n};\n\n/**\n * Find the separating axis between this hull and another\n * @method findSeparatingAxis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} target The target vector to save the axis in\n * @return {bool} Returns false if a separation is found, else true\n */\nvar fsa_faceANormalWS3 = new Vec3(),\n    fsa_Worldnormal1 = new Vec3(),\n    fsa_deltaC = new Vec3(),\n    fsa_worldEdge0 = new Vec3(),\n    fsa_worldEdge1 = new Vec3(),\n    fsa_Cross = new Vec3();\nConvexPolyhedron.prototype.findSeparatingAxis = function(hullB,posA,quatA,posB,quatB,target, faceListA, faceListB){\n    var faceANormalWS3 = fsa_faceANormalWS3,\n        Worldnormal1 = fsa_Worldnormal1,\n        deltaC = fsa_deltaC,\n        worldEdge0 = fsa_worldEdge0,\n        worldEdge1 = fsa_worldEdge1,\n        Cross = fsa_Cross;\n\n    var dmin = Number.MAX_VALUE;\n    var hullA = this;\n    var curPlaneTests=0;\n\n    if(!hullA.uniqueAxes){\n\n        var numFacesA = faceListA ? faceListA.length : hullA.faces.length;\n\n        // Test face normals from hullA\n        for(var i=0; i<numFacesA; i++){\n            var fi = faceListA ? faceListA[i] : i;\n\n            // Get world face normal\n            faceANormalWS3.copy(hullA.faceNormals[fi]);\n            quatA.vmult(faceANormalWS3,faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n\n    } else {\n\n        // Test unique axes\n        for(var i = 0; i !== hullA.uniqueAxes.length; i++){\n\n            // Get world axis\n            quatA.vmult(hullA.uniqueAxes[i],faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n    }\n\n    if(!hullB.uniqueAxes){\n\n        // Test face normals from hullB\n        var numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n        for(var i=0;i<numFacesB;i++){\n\n            var fi = faceListB ? faceListB[i] : i;\n\n            Worldnormal1.copy(hullB.faceNormals[fi]);\n            quatB.vmult(Worldnormal1,Worldnormal1);\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    } else {\n\n        // Test unique axes in B\n        for(var i = 0; i !== hullB.uniqueAxes.length; i++){\n            quatB.vmult(hullB.uniqueAxes[i],Worldnormal1);\n\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    }\n\n    // Test edges\n    for(var e0=0; e0 !== hullA.uniqueEdges.length; e0++){\n\n        // Get world edge\n        quatA.vmult(hullA.uniqueEdges[e0],worldEdge0);\n\n        for(var e1=0; e1 !== hullB.uniqueEdges.length; e1++){\n\n            // Get world edge 2\n            quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n            worldEdge0.cross(worldEdge1,Cross);\n\n            if(!Cross.almostZero()){\n                Cross.normalize();\n                var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n                if(dist === false){\n                    return false;\n                }\n                if(dist < dmin){\n                    dmin = dist;\n                    target.copy(Cross);\n                }\n            }\n        }\n    }\n\n    posB.vsub(posA,deltaC);\n    if((deltaC.dot(target))>0.0){\n        target.negate(target);\n    }\n\n    return true;\n};\n\nvar maxminA=[], maxminB=[];\n\n/**\n * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n * @method testSepAxis\n * @param {Vec3} axis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @return {number} The overlap depth, or FALSE if no penetration.\n */\nConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB){\n    var hullA=this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    var maxA = maxminA[0];\n    var minA = maxminA[1];\n    var maxB = maxminB[0];\n    var minB = maxminB[1];\n    if(maxA<minB || maxB<minA){\n        return false; // Separated\n    }\n    var d0 = maxA - minB;\n    var d1 = maxB - minA;\n    var depth = d0<d1 ? d0:d1;\n    return depth;\n};\n\nvar cli_aabbmin = new Vec3(),\n    cli_aabbmax = new Vec3();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabbmin,cli_aabbmax);\n    var x = cli_aabbmax.x - cli_aabbmin.x,\n        y = cli_aabbmax.y - cli_aabbmin.y,\n        z = cli_aabbmax.z - cli_aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z );\n    target.y = 1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z );\n    target.z = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x );\n};\n\n/**\n * @method getPlaneConstantOfFace\n * @param  {Number} face_i Index of the face\n * @return {Number}\n */\nConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i){\n    var f = this.faces[face_i];\n    var n = this.faceNormals[face_i];\n    var v = this.vertices[f[0]];\n    var c = -n.dot(v);\n    return c;\n};\n\n/**\n * Clip a face against a hull.\n * @method clipFaceAgainstHull\n * @param {Vec3} separatingNormal\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\n * @param {Number} minDist Distance clamping\n * @param {Number} maxDist\n * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n */\nvar cfah_faceANormalWS = new Vec3(),\n    cfah_edge0 = new Vec3(),\n    cfah_WorldEdge0 = new Vec3(),\n    cfah_worldPlaneAnormal1 = new Vec3(),\n    cfah_planeNormalWS1 = new Vec3(),\n    cfah_worldA1 = new Vec3(),\n    cfah_localPlaneNormal = new Vec3(),\n    cfah_planeNormalWS = new Vec3();\nConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist,result){\n    var faceANormalWS = cfah_faceANormalWS,\n        edge0 = cfah_edge0,\n        WorldEdge0 = cfah_WorldEdge0,\n        worldPlaneAnormal1 = cfah_worldPlaneAnormal1,\n        planeNormalWS1 = cfah_planeNormalWS1,\n        worldA1 = cfah_worldA1,\n        localPlaneNormal = cfah_localPlaneNormal,\n        planeNormalWS = cfah_planeNormalWS;\n\n    var hullA = this;\n    var worldVertsB2 = [];\n    var pVtxIn = worldVertsB1;\n    var pVtxOut = worldVertsB2;\n    // Find the face with normal closest to the separating axis\n    var closestFaceA = -1;\n    var dmin = Number.MAX_VALUE;\n    for(var face=0; face<hullA.faces.length; face++){\n        faceANormalWS.copy(hullA.faceNormals[face]);\n        quatA.vmult(faceANormalWS,faceANormalWS);\n        //posA.vadd(faceANormalWS,faceANormalWS);\n        var d = faceANormalWS.dot(separatingNormal);\n        if (d < dmin){\n            dmin = d;\n            closestFaceA = face;\n        }\n    }\n    if (closestFaceA < 0){\n        // console.log(\"--- did not find any closest face... ---\");\n        return;\n    }\n    //console.log(\"closest A: \",closestFaceA);\n    // Get the face and construct connected faces\n    var polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n    for(var i=0; i<hullA.faces.length; i++){\n        for(var j=0; j<hullA.faces[i].length; j++){\n            if(polyA.indexOf(hullA.faces[i][j])!==-1 /* Sharing a vertex*/ && i!==closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i)===-1 /* Not already added */ ){\n                polyA.connectedFaces.push(i);\n            }\n        }\n    }\n    // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face\n    var numContacts = pVtxIn.length;\n    var numVerticesA = polyA.length;\n    var res = [];\n    for(var e0=0; e0<numVerticesA; e0++){\n        var a = hullA.vertices[polyA[e0]];\n        var b = hullA.vertices[polyA[(e0+1)%numVerticesA]];\n        a.vsub(b,edge0);\n        WorldEdge0.copy(edge0);\n        quatA.vmult(WorldEdge0,WorldEdge0);\n        posA.vadd(WorldEdge0,WorldEdge0);\n        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);\n        quatA.vmult(worldPlaneAnormal1,worldPlaneAnormal1);\n        posA.vadd(worldPlaneAnormal1,worldPlaneAnormal1);\n        WorldEdge0.cross(worldPlaneAnormal1,planeNormalWS1);\n        planeNormalWS1.negate(planeNormalWS1);\n        worldA1.copy(a);\n        quatA.vmult(worldA1,worldA1);\n        posA.vadd(worldA1,worldA1);\n        var planeEqWS1 = -worldA1.dot(planeNormalWS1);\n        var planeEqWS;\n        if(true){\n            var otherFace = polyA.connectedFaces[e0];\n            localPlaneNormal.copy(this.faceNormals[otherFace]);\n            var localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n\n            planeNormalWS.copy(localPlaneNormal);\n            quatA.vmult(planeNormalWS,planeNormalWS);\n            //posA.vadd(planeNormalWS,planeNormalWS);\n            var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n        } else  {\n            planeNormalWS.copy(planeNormalWS1);\n            planeEqWS = planeEqWS1;\n        }\n\n        // Clip face against our constructed plane\n        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);\n\n        // Throw away all clipped points, but save the reamining until next clip\n        while(pVtxIn.length){\n            pVtxIn.shift();\n        }\n        while(pVtxOut.length){\n            pVtxIn.push(pVtxOut.shift());\n        }\n    }\n\n    //console.log(\"Resulting points after clip:\",pVtxIn);\n\n    // only keep contact points that are behind the witness face\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n\n    var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS,planeNormalWS);\n\n    var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n    for (var i=0; i<pVtxIn.length; i++){\n        var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???\n        /*console.log(\"depth calc from normal=\",planeNormalWS.toString(),\" and constant \"+planeEqWS+\" and vertex \",pVtxIn[i].toString(),\" gives \"+depth);*/\n        if (depth <=minDist){\n            console.log(\"clamped: depth=\"+depth+\" to minDist=\"+(minDist+\"\"));\n            depth = minDist;\n        }\n\n        if (depth <=maxDist){\n            var point = pVtxIn[i];\n            if(depth<=0){\n                /*console.log(\"Got contact point \",point.toString(),\n                  \", depth=\",depth,\n                  \"contact normal=\",separatingNormal.toString(),\n                  \"plane\",planeNormalWS.toString(),\n                  \"planeConstant\",planeEqWS);*/\n                var p = {\n                    point:point,\n                    normal:planeNormalWS,\n                    depth: depth,\n                };\n                result.push(p);\n            }\n        }\n    }\n};\n\n/**\n * Clip a face in a hull against the back of a plane.\n * @method clipFaceAgainstPlane\n * @param {Array} inVertices\n * @param {Array} outVertices\n * @param {Vec3} planeNormal\n * @param {Number} planeConstant The constant in the mathematical plane equation\n */\nConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices,outVertices, planeNormal, planeConstant){\n    var n_dot_first, n_dot_last;\n    var numVerts = inVertices.length;\n\n    if(numVerts < 2){\n        return outVertices;\n    }\n\n    var firstVertex = inVertices[inVertices.length-1],\n        lastVertex =   inVertices[0];\n\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for(var vi = 0; vi < numVerts; vi++){\n        lastVertex = inVertices[vi];\n        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n        if(n_dot_first < 0){\n            if(n_dot_last < 0){\n                // Start < 0, end < 0, so output lastVertex\n                var newv = new Vec3();\n                newv.copy(lastVertex);\n                outVertices.push(newv);\n            } else {\n                // Start < 0, end >= 0, so output intersection\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n            }\n        } else {\n            if(n_dot_last<0){\n                // Start >= 0, end < 0 so output intersection and end\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n                outVertices.push(lastVertex);\n            }\n        }\n        firstVertex = lastVertex;\n        n_dot_first = n_dot_last;\n    }\n    return outVertices;\n};\n\n// Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\nConvexPolyhedron.prototype.computeWorldVertices = function(position,quat){\n    var N = this.vertices.length;\n    while(this.worldVertices.length < N){\n        this.worldVertices.push( new Vec3() );\n    }\n\n    var verts = this.vertices,\n        worldVerts = this.worldVertices;\n    for(var i=0; i!==N; i++){\n        quat.vmult( verts[i] , worldVerts[i] );\n        position.vadd( worldVerts[i] , worldVerts[i] );\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\nConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin,aabbmax){\n    var n = this.vertices.length,\n        vertices = this.vertices,\n        worldVert = computeLocalAABB_worldVert;\n\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for(var i=0; i<n; i++){\n        var v = vertices[i];\n        if     (v.x < aabbmin.x){\n            aabbmin.x = v.x;\n        } else if(v.x > aabbmax.x){\n            aabbmax.x = v.x;\n        }\n        if     (v.y < aabbmin.y){\n            aabbmin.y = v.y;\n        } else if(v.y > aabbmax.y){\n            aabbmax.y = v.y;\n        }\n        if     (v.z < aabbmin.z){\n            aabbmin.z = v.z;\n        } else if(v.z > aabbmax.z){\n            aabbmax.z = v.z;\n        }\n    }\n};\n\n/**\n * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n * @method computeWorldFaceNormals\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat){\n    var N = this.faceNormals.length;\n    while(this.worldFaceNormals.length < N){\n        this.worldFaceNormals.push( new Vec3() );\n    }\n\n    var normals = this.faceNormals,\n        worldNormals = this.worldFaceNormals;\n    for(var i=0; i!==N; i++){\n        quat.vmult( normals[i] , worldNormals[i] );\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n};\n\n/**\n * @method updateBoundingSphereRadius\n */\nConvexPolyhedron.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var verts = this.vertices;\n    for(var i=0, N=verts.length; i!==N; i++) {\n        var norm2 = verts[i].norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nConvexPolyhedron.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var n = this.vertices.length, verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n    for(var i=0; i<n; i++){\n        tempWorldVertex.copy(verts[i]);\n        quat.vmult(tempWorldVertex,tempWorldVertex);\n        pos.vadd(tempWorldVertex,tempWorldVertex);\n        var v = tempWorldVertex;\n        if     (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if     (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if     (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n};\n\n/**\n * Get approximate convex volume\n * @method volume\n * @return {Number}\n */\nConvexPolyhedron.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Get an average of all the vertices positions\n * @method getAveragePointLocal\n * @param  {Vec3} target\n * @return {Vec3}\n */\nConvexPolyhedron.prototype.getAveragePointLocal = function(target){\n    target = target || new Vec3();\n    var n = this.vertices.length,\n        verts = this.vertices;\n    for(var i=0; i<n; i++){\n        target.vadd(verts[i],target);\n    }\n    target.mult(1/n,target);\n    return target;\n};\n\n/**\n * Transform all local points. Will change the .vertices\n * @method transformAllPoints\n * @param  {Vec3} offset\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.transformAllPoints = function(offset,quat){\n    var n = this.vertices.length,\n        verts = this.vertices;\n\n    // Apply rotation\n    if(quat){\n        // Rotate vertices\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            quat.vmult(v,v);\n        }\n        // Rotate face normals\n        for(var i=0; i<this.faceNormals.length; i++){\n            var v = this.faceNormals[i];\n            quat.vmult(v,v);\n        }\n        /*\n        // Rotate edges\n        for(var i=0; i<this.uniqueEdges.length; i++){\n            var v = this.uniqueEdges[i];\n            quat.vmult(v,v);\n        }*/\n    }\n\n    // Apply offset\n    if(offset){\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            v.vadd(offset,v);\n        }\n    }\n};\n\n/**\n * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.\n * @method pointIsInside\n * @param  {Vec3} p      A point given in local coordinates\n * @return {Boolean}\n */\nvar ConvexPolyhedron_pointIsInside = new Vec3();\nvar ConvexPolyhedron_vToP = new Vec3();\nvar ConvexPolyhedron_vToPointInside = new Vec3();\nConvexPolyhedron.prototype.pointIsInside = function(p){\n    var n = this.vertices.length,\n        verts = this.vertices,\n        faces = this.faces,\n        normals = this.faceNormals;\n    var positiveResult = null;\n    var N = this.faces.length;\n    var pointInside = ConvexPolyhedron_pointIsInside;\n    this.getAveragePointLocal(pointInside);\n    for(var i=0; i<N; i++){\n        var numVertices = this.faces[i].length;\n        var n = normals[i];\n        var v = verts[faces[i][0]]; // We only need one point in the face\n\n        // This dot product determines which side of the edge the point is\n        var vToP = ConvexPolyhedron_vToP;\n        p.vsub(v,vToP);\n        var r1 = n.dot(vToP);\n\n        var vToPointInside = ConvexPolyhedron_vToPointInside;\n        pointInside.vsub(v,vToPointInside);\n        var r2 = n.dot(vToPointInside);\n\n        if((r1<0 && r2>0) || (r1>0 && r2<0)){\n            return false; // Encountered some other sign. Exit.\n        } else {\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return positiveResult ? 1 : -1;\n};\n\n/**\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.\n * @static\n * @method project\n * @param {ConvexPolyhedron} hull\n * @param {Vec3} axis\n * @param {Vec3} pos\n * @param {Quaternion} quat\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\n */\nvar project_worldVertex = new Vec3();\nvar project_localAxis = new Vec3();\nvar project_localOrigin = new Vec3();\nConvexPolyhedron.project = function(hull, axis, pos, quat, result){\n    var n = hull.vertices.length,\n        worldVertex = project_worldVertex,\n        localAxis = project_localAxis,\n        max = 0,\n        min = 0,\n        localOrigin = project_localOrigin,\n        vs = hull.vertices;\n\n    localOrigin.setZero();\n\n    // Transform the axis to local\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    var add = localOrigin.dot(localAxis);\n\n    min = max = vs[0].dot(localAxis);\n\n    for(var i = 1; i < n; i++){\n        var val = vs[i].dot(localAxis);\n\n        if(val > max){\n            max = val;\n        }\n\n        if(val < min){\n            min = val;\n        }\n    }\n\n    min -= add;\n    max -= add;\n\n    if(min > max){\n        // Inconsistent - swap\n        var temp = min;\n        min = max;\n        max = temp;\n    }\n    // Output\n    result[0] = max;\n    result[1] = min;\n};\n\n},{\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"./Shape\":43}],39:[function(_dereq_,module,exports){\nmodule.exports = Cylinder;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\n\n/**\n * @class Cylinder\n * @constructor\n * @extends ConvexPolyhedron\n * @author schteppe / https://github.com/schteppe\n * @param {Number} radiusTop\n * @param {Number} radiusBottom\n * @param {Number} height\n * @param {Number} numSegments The number of segments to build the cylinder out of\n */\nfunction Cylinder( radiusTop, radiusBottom, height , numSegments ) {\n    var N = numSegments,\n        verts = [],\n        axes = [],\n        faces = [],\n        bottomface = [],\n        topface = [],\n        cos = Math.cos,\n        sin = Math.sin;\n\n    // First bottom point\n    verts.push(new Vec3(radiusBottom*cos(0),\n                               radiusBottom*sin(0),\n                               -height*0.5));\n    bottomface.push(0);\n\n    // First top point\n    verts.push(new Vec3(radiusTop*cos(0),\n                               radiusTop*sin(0),\n                               height*0.5));\n    topface.push(1);\n\n    for(var i=0; i<N; i++){\n        var theta = 2*Math.PI/N * (i+1);\n        var thetaN = 2*Math.PI/N * (i+0.5);\n        if(i<N-1){\n            // Bottom\n            verts.push(new Vec3(radiusBottom*cos(theta),\n                                       radiusBottom*sin(theta),\n                                       -height*0.5));\n            bottomface.push(2*i+2);\n            // Top\n            verts.push(new Vec3(radiusTop*cos(theta),\n                                       radiusTop*sin(theta),\n                                       height*0.5));\n            topface.push(2*i+3);\n\n            // Face\n            faces.push([2*i+2, 2*i+3, 2*i+1,2*i]);\n        } else {\n            faces.push([0,1, 2*i+1, 2*i]); // Connect\n        }\n\n        // Axis: we can cut off half of them if we have even number of segments\n        if(N % 2 === 1 || i < N / 2){\n            axes.push(new Vec3(cos(thetaN), sin(thetaN), 0));\n        }\n    }\n    faces.push(topface);\n    axes.push(new Vec3(0,0,1));\n\n    // Reorder bottom face\n    var temp = [];\n    for(var i=0; i<bottomface.length; i++){\n        temp.push(bottomface[bottomface.length - i - 1]);\n    }\n    faces.push(temp);\n\n    this.type = Shape.types.CONVEXPOLYHEDRON;\n    ConvexPolyhedron.call( this, verts, faces, axes );\n}\n\nCylinder.prototype = new ConvexPolyhedron();\n\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./ConvexPolyhedron\":38,\"./Shape\":43}],40:[function(_dereq_,module,exports){\nvar Shape = _dereq_('./Shape');\nvar ConvexPolyhedron = _dereq_('./ConvexPolyhedron');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Utils = _dereq_('../utils/Utils');\n\nmodule.exports = Heightfield;\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @class Heightfield\n * @extends Shape\n * @constructor\n * @param {Array} data An array of Y values that will be used to construct the terrain.\n * @param {object} options\n * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.\n * @param {Number} [options.maxValue] Maximum value.\n * @param {Number} [options.elementSize=0.1] World spacing between the data points in X direction.\n * @todo Should be possible to use along all axes, not just y\n *\n * @example\n *     // Generate some height data (y-values).\n *     var data = [];\n *     for(var i = 0; i < 1000; i++){\n *         var y = 0.5 * Math.cos(0.2 * i);\n *         data.push(y);\n *     }\n *\n *     // Create the heightfield shape\n *     var heightfieldShape = new Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     });\n *     var heightfieldBody = new Body();\n *     heightfieldBody.addShape(heightfieldShape);\n *     world.addBody(heightfieldBody);\n */\nfunction Heightfield(data, options){\n    options = Utils.defaults(options, {\n        maxValue : null,\n        minValue : null,\n        elementSize : 1\n    });\n\n    /**\n     * An array of numbers, or height values, that are spread out along the x axis.\n     * @property {array} data\n     */\n    this.data = data;\n\n    /**\n     * Max value of the data\n     * @property {number} maxValue\n     */\n    this.maxValue = options.maxValue;\n\n    /**\n     * Max value of the data\n     * @property {number} minValue\n     */\n    this.minValue = options.minValue;\n\n    /**\n     * The width of each element\n     * @property {number} elementSize\n     * @todo elementSizeX and Y\n     */\n    this.elementSize = options.elementSize;\n\n    if(options.minValue === null){\n        this.updateMinValue();\n    }\n    if(options.maxValue === null){\n        this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n\n    Shape.call(this);\n\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n\n    this.type = Shape.types.HEIGHTFIELD;\n    this.updateBoundingSphereRadius();\n\n    // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n    this._cachedPillars = {};\n}\nHeightfield.prototype = new Shape();\n\n/**\n * Call whenever you change the data array.\n * @method update\n */\nHeightfield.prototype.update = function(){\n    this._cachedPillars = {};\n};\n\n/**\n * Update the .minValue property\n * @method updateMinValue\n */\nHeightfield.prototype.updateMinValue = function(){\n    var data = this.data;\n    var minValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v < minValue){\n                minValue = v;\n            }\n        }\n    }\n    this.minValue = minValue;\n};\n\n/**\n * Update the .maxValue property\n * @method updateMaxValue\n */\nHeightfield.prototype.updateMaxValue = function(){\n    var data = this.data;\n    var maxValue = data[0][0];\n    for(var i=0; i !== data.length; i++){\n        for(var j=0; j !== data[i].length; j++){\n            var v = data[i][j];\n            if(v > maxValue){\n                maxValue = v;\n            }\n        }\n    }\n    this.maxValue = maxValue;\n};\n\n/**\n * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n * @method setHeightValueAtIndex\n * @param {integer} xi\n * @param {integer} yi\n * @param {number} value\n */\nHeightfield.prototype.setHeightValueAtIndex = function(xi, yi, value){\n    var data = this.data;\n    data[xi][yi] = value;\n\n    // Invalidate cache\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n    if(xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n    if(yi > 0){\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n    if(yi > 0 && xi > 0){\n        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n};\n\n/**\n * Get max/min in a rectangle in the matrix data\n * @method getRectMinMax\n * @param  {integer} iMinX\n * @param  {integer} iMinY\n * @param  {integer} iMaxX\n * @param  {integer} iMaxY\n * @param  {array} [result] An array to store the results in.\n * @return {array} The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n */\nHeightfield.prototype.getRectMinMax = function (iMinX, iMinY, iMaxX, iMaxY, result) {\n    result = result || [];\n\n    // Get max and min of the data\n    var data = this.data,\n        max = this.minValue; // Set first value\n    for(var i = iMinX; i <= iMaxX; i++){\n        for(var j = iMinY; j <= iMaxY; j++){\n            var height = data[i][j];\n            if(height > max){\n                max = height;\n            }\n        }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n};\n\n/**\n * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n * @method getIndexOfPosition\n * @param  {number} x\n * @param  {number} y\n * @param  {array} result Two-element array\n * @param  {boolean} clamp If the position should be clamped to the heightfield edge.\n * @return {boolean}\n */\nHeightfield.prototype.getIndexOfPosition = function (x, y, result, clamp) {\n\n    // Get the index of the data points to test against\n    var w = this.elementSize;\n    var data = this.data;\n    var xi = Math.floor(x / w);\n    var yi = Math.floor(y / w);\n\n    result[0] = xi;\n    result[1] = yi;\n\n    if(clamp){\n        // Clamp index to edges\n        if(xi < 0){ xi = 0; }\n        if(yi < 0){ yi = 0; }\n        if(xi >= data.length - 1){ xi = data.length - 1; }\n        if(yi >= data[0].length - 1){ yi = data[0].length - 1; }\n    }\n\n    // Bail out if we are out of the terrain\n    if(xi < 0 || yi < 0 || xi >= data.length-1 || yi >= data[0].length-1){\n        return false;\n    }\n\n    return true;\n};\n\nHeightfield.prototype.getHeightAt = function(x, y, edgeClamp){\n    var idx = [];\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n\n    // TODO: get upper or lower triangle, then use barycentric interpolation to get the height in the triangle.\n    var minmax = [];\n    this.getRectMinMax(idx[0], idx[1] + 1, idx[0], idx[1] + 1, minmax);\n\n    return (minmax[0] + minmax[1]) / 2; // average\n};\n\nHeightfield.prototype.getCacheConvexTrianglePillarKey = function(xi, yi, getUpperTriangle){\n    return xi + '_' + yi + '_' + (getUpperTriangle ? 1 : 0);\n};\n\nHeightfield.prototype.getCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\nHeightfield.prototype.setCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle, convex, offset){\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n        convex: convex,\n        offset: offset\n    };\n};\n\nHeightfield.prototype.clearCachedConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n};\n\n/**\n * Get a triangle in the terrain in the form of a triangular convex shape.\n * @method getConvexTrianglePillar\n * @param  {integer} i\n * @param  {integer} j\n * @param  {boolean} getUpperTriangle\n */\nHeightfield.prototype.getConvexTrianglePillar = function(xi, yi, getUpperTriangle){\n    var result = this.pillarConvex;\n    var offsetResult = this.pillarOffset;\n\n    if(this.cacheEnabled){\n        var data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n        if(data){\n            this.pillarConvex = data.convex;\n            this.pillarOffset = data.offset;\n            return;\n        }\n\n        result = new ConvexPolyhedron();\n        offsetResult = new Vec3();\n\n        this.pillarConvex = result;\n        this.pillarOffset = offsetResult;\n    }\n\n    var data = this.data;\n    var elementSize = this.elementSize;\n    var faces = result.faces;\n\n    // Reuse verts if possible\n    result.vertices.length = 6;\n    for (var i = 0; i < 6; i++) {\n        if(!result.vertices[i]){\n            result.vertices[i] = new Vec3();\n        }\n    }\n\n    // Reuse faces if possible\n    faces.length = 5;\n    for (var i = 0; i < 5; i++) {\n        if(!faces[i]){\n            faces[i] = [];\n        }\n    }\n\n    var verts = result.vertices;\n\n    var h = (Math.min(\n        data[xi][yi],\n        data[xi+1][yi],\n        data[xi][yi+1],\n        data[xi+1][yi+1]\n    ) - this.minValue ) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.25) * elementSize, // sort of center of a triangle\n            (yi + 0.25) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            data[xi][yi] - h\n        );\n        verts[1].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            data[xi + 1][yi] - h\n        );\n        verts[2].set(\n            -0.25 * elementSize,\n            0.75 * elementSize,\n            data[xi][yi + 1] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            -0.25 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[4].set(\n            0.75 * elementSize,\n            -0.25 * elementSize,\n            -h-1\n        );\n        verts[5].set(\n            -0.25 * elementSize,\n            0.75  * elementSize,\n            -h-1\n        );\n\n        // top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // -x facing quad\n        faces[2][0] = 0;\n        faces[2][1] = 2;\n        faces[2][2] = 5;\n        faces[2][3] = 3;\n\n        // -y facing quad\n        faces[3][0] = 1;\n        faces[3][1] = 0;\n        faces[3][2] = 3;\n        faces[3][3] = 4;\n\n        // +xy facing quad\n        faces[4][0] = 4;\n        faces[4][1] = 5;\n        faces[4][2] = 2;\n        faces[4][3] = 1;\n\n\n    } else {\n\n        // Center of the triangle pillar - all polygons are given relative to this one\n        offsetResult.set(\n            (xi + 0.75) * elementSize, // sort of center of a triangle\n            (yi + 0.75) * elementSize,\n            h // vertical center\n        );\n\n        // Top triangle verts\n        verts[0].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            data[xi + 1][yi + 1] - h\n        );\n        verts[1].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            data[xi][yi + 1] - h\n        );\n        verts[2].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            data[xi + 1][yi] - h\n        );\n\n        // bottom triangle verts\n        verts[3].set(\n            0.25 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[4].set(\n            -0.75 * elementSize,\n            0.25 * elementSize,\n            - h-1\n        );\n        verts[5].set(\n            0.25 * elementSize,\n            -0.75 * elementSize,\n            - h-1\n        );\n\n        // Top triangle\n        faces[0][0] = 0;\n        faces[0][1] = 1;\n        faces[0][2] = 2;\n\n        // bottom triangle\n        faces[1][0] = 5;\n        faces[1][1] = 4;\n        faces[1][2] = 3;\n\n        // +x facing quad\n        faces[2][0] = 2;\n        faces[2][1] = 5;\n        faces[2][2] = 3;\n        faces[2][3] = 0;\n\n        // +y facing quad\n        faces[3][0] = 3;\n        faces[3][1] = 4;\n        faces[3][2] = 1;\n        faces[3][3] = 0;\n\n        // -xy facing quad\n        faces[4][0] = 1;\n        faces[4][1] = 4;\n        faces[4][2] = 5;\n        faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n};\n\nHeightfield.prototype.calculateLocalInertia = function(mass, target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nHeightfield.prototype.volume = function(){\n    return Number.MAX_VALUE; // The terrain is infinite\n};\n\nHeightfield.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // TODO: do it properly\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n};\n\nHeightfield.prototype.updateBoundingSphereRadius = function(){\n    // Use the bounding box of the min/max values\n    var data = this.data,\n        s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).norm();\n};\n\n},{\"../math/Vec3\":30,\"../utils/Utils\":53,\"./ConvexPolyhedron\":38,\"./Shape\":43}],41:[function(_dereq_,module,exports){\nmodule.exports = Particle;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Particle shape.\n * @class Particle\n * @constructor\n * @author schteppe\n * @extends Shape\n */\nfunction Particle(){\n    Shape.call(this);\n\n    this.type = Shape.types.PARTICLE;\n}\nParticle.prototype = new Shape();\nParticle.prototype.constructor = Particle;\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3}\n */\nParticle.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    target.set(0, 0, 0);\n    return target;\n};\n\nParticle.prototype.volume = function(){\n    return 0;\n};\n\nParticle.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = 0;\n};\n\nParticle.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n};\n\n},{\"../math/Vec3\":30,\"./Shape\":43}],42:[function(_dereq_,module,exports){\nmodule.exports = Plane;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a RigidBody and rotate that body. See the demos.\n * @class Plane\n * @constructor\n * @extends Shape\n * @author schteppe\n */\nfunction Plane(){\n    Shape.call(this);\n    this.type = Shape.types.PLANE;\n\n    // World oriented normal\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n\n    this.boundingSphereRadius = Number.MAX_VALUE;\n}\nPlane.prototype = new Shape();\nPlane.prototype.constructor = Plane;\n\nPlane.prototype.computeWorldNormal = function(quat){\n    var n = this.worldNormal;\n    n.set(0,0,1);\n    quat.vmult(n,n);\n    this.worldNormalNeedsUpdate = false;\n};\n\nPlane.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    return target;\n};\n\nPlane.prototype.volume = function(){\n    return Number.MAX_VALUE; // The plane is infinite...\n};\n\nvar tempNormal = new Vec3();\nPlane.prototype.calculateWorldAABB = function(pos, quat, min, max){\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0,0,1); // Default plane normal is z\n    quat.vmult(tempNormal,tempNormal);\n    var maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if(tempNormal.x === 1){ max.x = pos.x; }\n    if(tempNormal.y === 1){ max.y = pos.y; }\n    if(tempNormal.z === 1){ max.z = pos.z; }\n\n    if(tempNormal.x === -1){ min.x = pos.x; }\n    if(tempNormal.y === -1){ min.y = pos.y; }\n    if(tempNormal.z === -1){ min.z = pos.z; }\n};\n\nPlane.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = Number.MAX_VALUE;\n};\n},{\"../math/Vec3\":30,\"./Shape\":43}],43:[function(_dereq_,module,exports){\nmodule.exports = Shape;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Material = _dereq_('../material/Material');\n\n/**\n * Base class for shapes\n * @class Shape\n * @constructor\n * @author schteppe\n * @todo Should have a mechanism for caching bounding sphere radius instead of calculating it each time\n */\nfunction Shape(){\n\n    /**\n     * Identifyer of the Shape.\n     * @property {number} id\n     */\n    this.id = Shape.idCounter++;\n\n    /**\n     * The type of this shape. Must be set to an int > 0 by subclasses.\n     * @property type\n     * @type {Number}\n     * @see Shape.types\n     */\n    this.type = 0;\n\n    /**\n     * The local bounding sphere radius of this shape.\n     * @property {Number} boundingSphereRadius\n     */\n    this.boundingSphereRadius = 0;\n\n    /**\n     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n     * @property {boolean} collisionResponse\n     */\n    this.collisionResponse = true;\n\n    /**\n     * @property {Material} material\n     */\n    this.material = null;\n}\nShape.prototype.constructor = Shape;\n\n/**\n * Computes the bounding sphere radius. The result is stored in the property .boundingSphereRadius\n * @method updateBoundingSphereRadius\n * @return {Number}\n */\nShape.prototype.updateBoundingSphereRadius = function(){\n    throw \"computeBoundingSphereRadius() not implemented for shape type \"+this.type;\n};\n\n/**\n * Get the volume of this shape\n * @method volume\n * @return {Number}\n */\nShape.prototype.volume = function(){\n    throw \"volume() not implemented for shape type \"+this.type;\n};\n\n/**\n * Calculates the inertia in the local frame for this shape.\n * @method calculateLocalInertia\n * @return {Vec3}\n * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n */\nShape.prototype.calculateLocalInertia = function(mass,target){\n    throw \"calculateLocalInertia() not implemented for shape type \"+this.type;\n};\n\nShape.idCounter = 0;\n\n/**\n * The available shape types.\n * @static\n * @property types\n * @type {Object}\n */\nShape.types = {\n    SPHERE:1,\n    PLANE:2,\n    BOX:4,\n    COMPOUND:8,\n    CONVEXPOLYHEDRON:16,\n    HEIGHTFIELD:32,\n    PARTICLE:64,\n    CYLINDER:128,\n    TRIMESH:256\n};\n\n\n},{\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./Shape\":43}],44:[function(_dereq_,module,exports){\nmodule.exports = Sphere;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\n\n/**\n * Spherical shape\n * @class Sphere\n * @constructor\n * @extends Shape\n * @param {Number} radius The radius of the sphere, a non-negative number.\n * @author schteppe / http://github.com/schteppe\n */\nfunction Sphere(radius){\n    Shape.call(this);\n\n    /**\n     * @property {Number} radius\n     */\n    this.radius = radius!==undefined ? Number(radius) : 1.0;\n    this.type = Shape.types.SPHERE;\n\n    if(this.radius < 0){\n        throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n}\nSphere.prototype = new Shape();\nSphere.prototype.constructor = Sphere;\n\nSphere.prototype.calculateLocalInertia = function(mass,target){\n    target = target || new Vec3();\n    var I = 2.0*mass*this.radius*this.radius/5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n};\n\nSphere.prototype.volume = function(){\n    return 4.0 * Math.PI * this.radius / 3.0;\n};\n\nSphere.prototype.updateBoundingSphereRadius = function(){\n    this.boundingSphereRadius = this.radius;\n};\n\nSphere.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var r = this.radius;\n    var axes = ['x','y','z'];\n    for(var i=0; i<axes.length; i++){\n        var ax = axes[i];\n        min[ax] = pos[ax] - r;\n        max[ax] = pos[ax] + r;\n    }\n};\n\n},{\"../math/Vec3\":30,\"./Shape\":43}],45:[function(_dereq_,module,exports){\nmodule.exports = Trimesh;\n\nvar Shape = _dereq_('./Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Transform = _dereq_('../math/Transform');\nvar AABB = _dereq_('../collision/AABB');\nvar Octree = _dereq_('../utils/Octree');\n\n/**\n * @class Trimesh\n * @constructor\n * @param {array} vertices\n * @param {array} indices\n * @extends Shape\n * @example\n *     // How to make a mesh with a single triangle\n *     var vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ];\n *     var indices = [\n *         0, 1, 2  // triangle 0\n *     ];\n *     var trimeshShape = new Trimesh(vertices, indices);\n */\nfunction Trimesh(vertices, indices) {\n    Shape.call(this);\n    this.type = Shape.types.TRIMESH;\n\n    /**\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = new Float32Array(vertices);\n\n    /**\n     * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n     * @property indices\n     * @type {Array}\n     */\n    this.indices = new Int16Array(indices);\n\n    /**\n     * The normals data.\n     * @property normals\n     * @type {Array}\n     */\n    this.normals = new Float32Array(indices.length);\n\n    /**\n     * The local AABB of the mesh.\n     * @property aabb\n     * @type {Array}\n     */\n    this.aabb = new AABB();\n\n    /**\n     * References to vertex pairs, making up all unique edges in the trimesh.\n     * @property {array} edges\n     */\n    this.edges = null;\n\n    /**\n     * Local scaling of the mesh. Use .setScale() to set it.\n     * @property {Vec3} scale\n     */\n    this.scale = new Vec3(1, 1, 1);\n\n    /**\n     * The indexed triangles. Use .updateTree() to update it.\n     * @property {Octree} tree\n     */\n    this.tree = new Octree();\n\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n}\nTrimesh.prototype = new Shape();\nTrimesh.prototype.constructor = Trimesh;\n\nvar computeNormals_n = new Vec3();\n\n/**\n * @method updateTree\n */\nTrimesh.prototype.updateTree = function(){\n    var tree = this.tree;\n\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    var scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z;\n\n    // Insert all triangles\n    var triangleAABB = new AABB();\n    var a = new Vec3();\n    var b = new Vec3();\n    var c = new Vec3();\n    var points = [a, b, c];\n    for (var i = 0; i < this.indices.length / 3; i++) {\n        //this.getTriangleVertices(i, a, b, c);\n\n        // Get unscaled triangle verts\n        var i3 = i * 3;\n        this._getUnscaledVertex(this.indices[i3], a);\n        this._getUnscaledVertex(this.indices[i3 + 1], b);\n        this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n        triangleAABB.setFromPoints(points);\n        tree.insert(triangleAABB, i);\n    }\n    tree.removeEmptyNodes();\n};\n\nvar unscaledAABB = new AABB();\n\n/**\n * Get triangles in a local AABB from the trimesh.\n * @method getTrianglesInAABB\n * @param  {AABB} aabb\n * @param  {array} result An array of integers, referencing the queried triangles.\n */\nTrimesh.prototype.getTrianglesInAABB = function(aabb, result){\n    unscaledAABB.copy(aabb);\n\n    // Scale it to local\n    var scale = this.scale;\n    var isx = scale.x;\n    var isy = scale.y;\n    var isz = scale.z;\n    var l = unscaledAABB.lowerBound;\n    var u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n\n    return this.tree.aabbQuery(unscaledAABB, result);\n};\n\n/**\n * @method setScale\n * @param {Vec3} scale\n */\nTrimesh.prototype.setScale = function(scale){\n    var wasUniform = this.scale.x === this.scale.y === this.scale.z;\n    var isUniform = scale.x === scale.y === scale.z;\n\n    if(!(wasUniform && isUniform)){\n        // Non-uniform scaling. Need to update normals.\n        this.updateNormals();\n    }\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n};\n\n/**\n * Compute the normals of the faces. Will save in the .normals array.\n * @method updateNormals\n */\nTrimesh.prototype.updateNormals = function(){\n    var n = computeNormals_n;\n\n    // Generate normals\n    var normals = this.normals;\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n\n        this.getVertex(a, va);\n        this.getVertex(b, vb);\n        this.getVertex(c, vc);\n\n        Trimesh.computeNormal(vb, va, vc, n);\n\n        normals[i3] = n.x;\n        normals[i3 + 1] = n.y;\n        normals[i3 + 2] = n.z;\n    }\n};\n\n/**\n * Update the .edges property\n * @method updateEdges\n */\nTrimesh.prototype.updateEdges = function(){\n    var edges = {};\n    var add = function(indexA, indexB){\n        var key = a < b ? a + '_' + b : b + '_' + a;\n        edges[key] = true;\n    };\n    for(var i=0; i < this.indices.length / 3; i++){\n        var i3 = i * 3;\n        var a = this.indices[i3],\n            b = this.indices[i3 + 1],\n            c = this.indices[i3 + 2];\n        add(a,b);\n        add(b,c);\n        add(c,a);\n    }\n    var keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n    for (var i = 0; i < keys.length; i++) {\n        var indices = keys[i].split('_');\n        this.edges[2 * i] = parseInt(indices[0], 10);\n        this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n};\n\n/**\n * Get an edge vertex\n * @method getEdgeVertex\n * @param  {number} edgeIndex\n * @param  {number} firstOrSecond 0 or 1, depending on which one of the vertices you need.\n * @param  {Vec3} vertexStore Where to store the result\n */\nTrimesh.prototype.getEdgeVertex = function(edgeIndex, firstOrSecond, vertexStore){\n    var vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n};\n\nvar getEdgeVector_va = new Vec3();\nvar getEdgeVector_vb = new Vec3();\n\n/**\n * Get a vector along an edge.\n * @method getEdgeVector\n * @param  {number} edgeIndex\n * @param  {Vec3} vectorStore\n */\nTrimesh.prototype.getEdgeVector = function(edgeIndex, vectorStore){\n    var va = getEdgeVector_va;\n    var vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method computeNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nTrimesh.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\nvar va = new Vec3();\nvar vb = new Vec3();\nvar vc = new Vec3();\n\n/**\n * Get vertex i.\n * @method getVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getVertex = function(i, out){\n    var scale = this.scale;\n    this._getUnscaledVertex(i, out);\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n};\n\n/**\n * Get raw vertex i\n * @private\n * @method _getUnscaledVertex\n * @param  {number} i\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype._getUnscaledVertex = function(i, out){\n    var i3 = i * 3;\n    var vertices = this.vertices;\n    return out.set(\n        vertices[i3],\n        vertices[i3 + 1],\n        vertices[i3 + 2]\n    );\n};\n\n/**\n * Get a vertex from the trimesh,transformed by the given position and quaternion.\n * @method getWorldVertex\n * @param  {number} i\n * @param  {Vec3} pos\n * @param  {Quaternion} quat\n * @param  {Vec3} out\n * @return {Vec3} The \"out\" vector object\n */\nTrimesh.prototype.getWorldVertex = function(i, pos, quat, out){\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n};\n\n/**\n * Get the three vertices for triangle i.\n * @method getTriangleVertices\n * @param  {number} i\n * @param  {Vec3} a\n * @param  {Vec3} b\n * @param  {Vec3} c\n */\nTrimesh.prototype.getTriangleVertices = function(i, a, b, c){\n    var i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n};\n\n/**\n * Compute the normal of triangle i.\n * @method getNormal\n * @param  {Number} i\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.getNormal = function(i, target){\n    var i3 = i * 3;\n    return target.set(\n        this.normals[i3],\n        this.normals[i3 + 1],\n        this.normals[i3 + 2]\n    );\n};\n\nvar cli_aabb = new AABB();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n * @return {Vec3} The \"target\" vector object\n */\nTrimesh.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    var x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x,\n        y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y,\n        z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z ),\n        1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x )\n    );\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\n\n/**\n * Compute the local AABB for the trimesh\n * @method computeLocalAABB\n * @param  {AABB} aabb\n */\nTrimesh.prototype.computeLocalAABB = function(aabb){\n    var l = aabb.lowerBound,\n        u = aabb.upperBound,\n        n = this.vertices.length,\n        vertices = this.vertices,\n        v = computeLocalAABB_worldVert;\n\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for(var i=0; i !== n; i++){\n        this.getVertex(i, v);\n\n        if(v.x < l.x){\n            l.x = v.x;\n        } else if(v.x > u.x){\n            u.x = v.x;\n        }\n\n        if(v.y < l.y){\n            l.y = v.y;\n        } else if(v.y > u.y){\n            u.y = v.y;\n        }\n\n        if(v.z < l.z){\n            l.z = v.z;\n        } else if(v.z > u.z){\n            u.z = v.z;\n        }\n    }\n};\n\n\n/**\n * Update the .aabb property\n * @method updateAABB\n */\nTrimesh.prototype.updateAABB = function(){\n    this.computeLocalAABB(this.aabb);\n};\n\n/**\n * Will update the .boundingSphereRadius property\n * @method updateBoundingSphereRadius\n */\nTrimesh.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var vertices = this.vertices;\n    var v = new Vec3();\n    for(var i=0, N=vertices.length / 3; i !== N; i++) {\n        this.getVertex(i, v);\n        var norm2 = v.norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\nvar calculateWorldAABB_frame = new Transform();\nvar calculateWorldAABB_aabb = new AABB();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nTrimesh.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    /*\n    var n = this.vertices.length / 3,\n        verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n\n    var v = tempWorldVertex;\n    for(var i=0; i<n; i++){\n        this.getVertex(i, v);\n        quat.vmult(v, v);\n        pos.vadd(v, v);\n        if (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n    */\n\n    // Faster approximation using local AABB\n    var frame = calculateWorldAABB_frame;\n    var result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n};\n\n/**\n * Get approximate volume\n * @method volume\n * @return {Number}\n */\nTrimesh.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Create a Trimesh instance, shaped as a torus.\n * @static\n * @method createTorus\n * @param  {number} [radius=1]\n * @param  {number} [tube=0.5]\n * @param  {number} [radialSegments=8]\n * @param  {number} [tubularSegments=6]\n * @param  {number} [arc=6.283185307179586]\n * @return {Trimesh} A torus\n */\nTrimesh.createTorus = function (radius, tube, radialSegments, tubularSegments, arc) {\n    radius = radius || 1;\n    tube = tube || 0.5;\n    radialSegments = radialSegments || 8;\n    tubularSegments = tubularSegments || 6;\n    arc = arc || Math.PI * 2;\n\n    var vertices = [];\n    var indices = [];\n\n    for ( var j = 0; j <= radialSegments; j ++ ) {\n        for ( var i = 0; i <= tubularSegments; i ++ ) {\n            var u = i / tubularSegments * arc;\n            var v = j / radialSegments * Math.PI * 2;\n\n            var x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n            var y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n            var z = tube * Math.sin( v );\n\n            vertices.push( x, y, z );\n        }\n    }\n\n    for ( var j = 1; j <= radialSegments; j ++ ) {\n        for ( var i = 1; i <= tubularSegments; i ++ ) {\n            var a = ( tubularSegments + 1 ) * j + i - 1;\n            var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n            var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n            var d = ( tubularSegments + 1 ) * j + i;\n\n            indices.push(a, b, d);\n            indices.push(b, c, d);\n        }\n    }\n\n    return new Trimesh(vertices, indices);\n};\n\n},{\"../collision/AABB\":3,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../utils/Octree\":50,\"./Shape\":43}],46:[function(_dereq_,module,exports){\nmodule.exports = GSSolver;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('./Solver');\n\n/**\n * Constraint equation Gauss-Seidel solver.\n * @class GSSolver\n * @constructor\n * @todo The spook parameters should be specified for each constraint, not globally.\n * @author schteppe / https://github.com/schteppe\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n * @extends Solver\n */\nfunction GSSolver(){\n    Solver.call(this);\n\n    /**\n     * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n     * @property iterations\n     * @type {Number}\n     * @todo write more about solver and iterations in the wiki\n     */\n    this.iterations = 10;\n\n    /**\n     * When tolerance is reached, the system is assumed to be converged.\n     * @property tolerance\n     * @type {Number}\n     */\n    this.tolerance = 1e-7;\n}\nGSSolver.prototype = new Solver();\n\nvar GSSolver_solve_lambda = []; // Just temporary number holders that we want to reuse each solve.\nvar GSSolver_solve_invCs = [];\nvar GSSolver_solve_Bs = [];\nGSSolver.prototype.solve = function(dt,world){\n    var iter = 0,\n        maxIter = this.iterations,\n        tolSquared = this.tolerance*this.tolerance,\n        equations = this.equations,\n        Neq = equations.length,\n        bodies = world.bodies,\n        Nbodies = bodies.length,\n        h = dt,\n        q, B, invC, deltalambda, deltalambdaTot, GWlambda, lambdaj;\n\n    // Update solve mass\n    if(Neq !== 0){\n        for(var i=0; i!==Nbodies; i++){\n            bodies[i].updateSolveMassProperties();\n        }\n    }\n\n    // Things that does not change during iteration can be computed once\n    var invCs = GSSolver_solve_invCs,\n        Bs = GSSolver_solve_Bs,\n        lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n    for(var i=0; i!==Neq; i++){\n        var c = equations[i];\n        lambda[i] = 0.0;\n        Bs[i] = c.computeB(h);\n        invCs[i] = 1.0 / c.computeC();\n    }\n\n    if(Neq !== 0){\n\n        // Reset vlambda\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                vlambda=b.vlambda,\n                wlambda=b.wlambda;\n            vlambda.set(0,0,0);\n            if(wlambda){\n                wlambda.set(0,0,0);\n            }\n        }\n\n        // Iterate over equations\n        for(iter=0; iter!==maxIter; iter++){\n\n            // Accumulate the total error for each iteration.\n            deltalambdaTot = 0.0;\n\n            for(var j=0; j!==Neq; j++){\n\n                var c = equations[j];\n\n                // Compute iteration\n                B = Bs[j];\n                invC = invCs[j];\n                lambdaj = lambda[j];\n                GWlambda = c.computeGWlambda();\n                deltalambda = invC * ( B - GWlambda - c.eps * lambdaj );\n\n                // Clamp if we are not within the min/max interval\n                if(lambdaj + deltalambda < c.minForce){\n                    deltalambda = c.minForce - lambdaj;\n                } else if(lambdaj + deltalambda > c.maxForce){\n                    deltalambda = c.maxForce - lambdaj;\n                }\n                lambda[j] += deltalambda;\n\n                deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n                c.addToWlambda(deltalambda);\n            }\n\n            // If the total error is small enough - stop iterate\n            if(deltalambdaTot*deltalambdaTot < tolSquared){\n                break;\n            }\n        }\n\n        // Add result to velocity\n        for(var i=0; i!==Nbodies; i++){\n            var b=bodies[i],\n                v=b.velocity,\n                w=b.angularVelocity;\n            v.vadd(b.vlambda, v);\n            if(w){\n                w.vadd(b.wlambda, w);\n            }\n        }\n    }\n\n    return iter;\n};\n\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"./Solver\":47}],47:[function(_dereq_,module,exports){\nmodule.exports = Solver;\n\n/**\n * Constraint equation solver base class.\n * @class Solver\n * @constructor\n * @author schteppe / https://github.com/schteppe\n */\nfunction Solver(){\n    /**\n     * All equations to be solved\n     * @property {Array} equations\n     */\n    this.equations = [];\n}\n\n/**\n * Should be implemented in subclasses!\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSolver.prototype.solve = function(dt,world){\n    // Should return the number of iterations done!\n    return 0;\n};\n\n/**\n * Add an equation\n * @method addEquation\n * @param {Equation} eq\n */\nSolver.prototype.addEquation = function(eq){\n    if (eq.enabled) {\n        this.equations.push(eq);\n    }\n};\n\n/**\n * Remove an equation\n * @method removeEquation\n * @param {Equation} eq\n */\nSolver.prototype.removeEquation = function(eq){\n    var eqs = this.equations;\n    var i = eqs.indexOf(eq);\n    if(i !== -1){\n        eqs.splice(i,1);\n    }\n};\n\n/**\n * Add all equations\n * @method removeAllEquations\n */\nSolver.prototype.removeAllEquations = function(){\n    this.equations.length = 0;\n};\n\n\n},{}],48:[function(_dereq_,module,exports){\nmodule.exports = SplitSolver;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('./Solver');\nvar Body = _dereq_('../objects/Body');\n\n/**\n * Splits the equations into islands and solves them independently. Can improve performance.\n * @class SplitSolver\n * @constructor\n * @extends Solver\n * @param {Solver} subsolver\n */\nfunction SplitSolver(subsolver){\n    Solver.call(this);\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = [];\n\n    // Create needed nodes, reuse if possible\n    while(this.nodePool.length < 128){\n        this.nodePool.push(this.createNode());\n    }\n}\nSplitSolver.prototype = new Solver();\n\n// Returns the number of subsystems\nvar SplitSolver_solve_nodes = []; // All allocated node objects\nvar SplitSolver_solve_nodePool = []; // All allocated node objects\nvar SplitSolver_solve_eqs = [];   // Temp array\nvar SplitSolver_solve_bds = [];   // Temp array\nvar SplitSolver_solve_dummyWorld = {bodies:[]}; // Temp object\n\nvar STATIC = Body.STATIC;\nfunction getUnvisitedNode(nodes){\n    var Nnodes = nodes.length;\n    for(var i=0; i!==Nnodes; i++){\n        var node = nodes[i];\n        if(!node.visited && !(node.body.type & STATIC)){\n            return node;\n        }\n    }\n    return false;\n}\n\nvar queue = [];\nfunction bfs(root,visitFunc,bds,eqs){\n    queue.push(root);\n    root.visited = true;\n    visitFunc(root,bds,eqs);\n    while(queue.length) {\n        var node = queue.pop();\n        // Loop over unvisited child nodes\n        var child;\n        while((child = getUnvisitedNode(node.children))) {\n            child.visited = true;\n            visitFunc(child,bds,eqs);\n            queue.push(child);\n        }\n    }\n}\n\nfunction visitFunc(node,bds,eqs){\n    bds.push(node.body);\n    var Neqs = node.eqs.length;\n    for(var i=0; i!==Neqs; i++){\n        var eq = node.eqs[i];\n        if(eqs.indexOf(eq) === -1){\n            eqs.push(eq);\n        }\n    }\n}\n\nSplitSolver.prototype.createNode = function(){\n    return { body:null, children:[], eqs:[], visited:false };\n};\n\n/**\n * Solve the subsystems\n * @method solve\n * @param  {Number} dt\n * @param  {World} world\n */\nSplitSolver.prototype.solve = function(dt,world){\n    var nodes=SplitSolver_solve_nodes,\n        nodePool=this.nodePool,\n        bodies=world.bodies,\n        equations=this.equations,\n        Neq=equations.length,\n        Nbodies=bodies.length,\n        subsolver=this.subsolver;\n\n    // Create needed nodes, reuse if possible\n    while(nodePool.length < Nbodies){\n        nodePool.push(this.createNode());\n    }\n    nodes.length = Nbodies;\n    for (var i = 0; i < Nbodies; i++) {\n        nodes[i] = nodePool[i];\n    }\n\n    // Reset node values\n    for(var i=0; i!==Nbodies; i++){\n        var node = nodes[i];\n        node.body = bodies[i];\n        node.children.length = 0;\n        node.eqs.length = 0;\n        node.visited = false;\n    }\n    for(var k=0; k!==Neq; k++){\n        var eq=equations[k],\n            i=bodies.indexOf(eq.bi),\n            j=bodies.indexOf(eq.bj),\n            ni=nodes[i],\n            nj=nodes[j];\n        ni.children.push(nj);\n        ni.eqs.push(eq);\n        nj.children.push(ni);\n        nj.eqs.push(eq);\n    }\n\n    var child, n=0, eqs=SplitSolver_solve_eqs;\n\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n\n    var dummyWorld = SplitSolver_solve_dummyWorld;\n    while((child = getUnvisitedNode(nodes))){\n        eqs.length = 0;\n        dummyWorld.bodies.length = 0;\n        bfs(child, visitFunc, dummyWorld.bodies, eqs);\n\n        var Neqs = eqs.length;\n\n        eqs = eqs.sort(sortById);\n\n        for(var i=0; i!==Neqs; i++){\n            subsolver.addEquation(eqs[i]);\n        }\n\n        var iter = subsolver.solve(dt,dummyWorld);\n        subsolver.removeAllEquations();\n        n++;\n    }\n\n    return n;\n};\n\nfunction sortById(a, b){\n    return b.id - a.id;\n}\n},{\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"./Solver\":47}],49:[function(_dereq_,module,exports){\n/**\n * Base class for objects that dispatches events.\n * @class EventTarget\n * @constructor\n */\nvar EventTarget = function () {\n\n};\n\nmodule.exports = EventTarget;\n\nEventTarget.prototype = {\n    constructor: EventTarget,\n\n    /**\n     * Add an event listener\n     * @method addEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    addEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ this._listeners = {}; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] === undefined ) {\n            listeners[ type ] = [];\n        }\n        if ( listeners[ type ].indexOf( listener ) === - 1 ) {\n            listeners[ type ].push( listener );\n        }\n        return this;\n    },\n\n    /**\n     * Check if an event listener is added\n     * @method hasEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {Boolean}\n     */\n    hasEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return false; }\n        var listeners = this._listeners;\n        if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Remove an event listener\n     * @method removeEventListener\n     * @param  {String} type\n     * @param  {Function} listener\n     * @return {EventTarget} The self object, for chainability.\n     */\n    removeEventListener: function ( type, listener ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        if ( listeners[type] === undefined ){ return this; }\n        var index = listeners[ type ].indexOf( listener );\n        if ( index !== - 1 ) {\n            listeners[ type ].splice( index, 1 );\n        }\n        return this;\n    },\n\n    /**\n     * Emit an event.\n     * @method dispatchEvent\n     * @param  {Object} event\n     * @param  {String} event.type\n     * @return {EventTarget} The self object, for chainability.\n     */\n    dispatchEvent: function ( event ) {\n        if ( this._listeners === undefined ){ return this; }\n        var listeners = this._listeners;\n        var listenerArray = listeners[ event.type ];\n        if ( listenerArray !== undefined ) {\n            event.target = this;\n            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {\n                listenerArray[ i ].call( this, event );\n            }\n        }\n        return this;\n    }\n};\n\n},{}],50:[function(_dereq_,module,exports){\nvar AABB = _dereq_('../collision/AABB');\nvar Vec3 = _dereq_('../math/Vec3');\n\nmodule.exports = Octree;\n\n/**\n * @class OctreeNode\n * @param {object} [options]\n * @param {Octree} [options.root]\n * @param {AABB} [options.aabb]\n */\nfunction OctreeNode(options){\n    options = options || {};\n\n    /**\n     * The root node\n     * @property {OctreeNode} root\n     */\n    this.root = options.root || null;\n\n    /**\n     * Boundary of this node\n     * @property {AABB} aabb\n     */\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n\n    /**\n     * Contained data at the current node level.\n     * @property {Array} data\n     */\n    this.data = [];\n\n    /**\n     * Children to this node\n     * @property {Array} children\n     */\n    this.children = [];\n}\n\n/**\n * @class Octree\n * @param {AABB} aabb The total AABB of the tree\n * @param {object} [options]\n * @param {number} [options.maxDepth=8]\n * @extends OctreeNode\n */\nfunction Octree(aabb, options){\n    options = options || {};\n    options.root = null;\n    options.aabb = aabb;\n    OctreeNode.call(this, options);\n\n    /**\n     * Maximum subdivision depth\n     * @property {number} maxDepth\n     */\n    this.maxDepth = typeof(options.maxDepth) !== 'undefined' ? options.maxDepth : 8;\n}\nOctree.prototype = new OctreeNode();\n\nOctreeNode.prototype.reset = function(aabb, options){\n    this.children.length = this.data.length = 0;\n};\n\n/**\n * Insert data into this node\n * @method insert\n * @param  {AABB} aabb\n * @param  {object} elementData\n * @return {boolean} True if successful, otherwise false\n */\nOctreeNode.prototype.insert = function(aabb, elementData, level){\n    var nodeData = this.data;\n    level = level || 0;\n\n    // Ignore objects that do not belong in this node\n    if (!this.aabb.contains(aabb)){\n        return false; // object cannot be added\n    }\n\n    var children = this.children;\n\n    if(level < (this.maxDepth || this.root.maxDepth)){\n        // Subdivide if there are no children yet\n        var subdivided = false;\n        if (!children.length){\n            this.subdivide();\n            subdivided = true;\n        }\n\n        // add to whichever node will accept it\n        for (var i = 0; i !== 8; i++) {\n            if (children[i].insert(aabb, elementData, level + 1)){\n                return true;\n            }\n        }\n\n        if(subdivided){\n            // No children accepted! Might as well just remove em since they contain none\n            children.length = 0;\n        }\n    }\n\n    // Too deep, or children didnt want it. add it in current node\n    nodeData.push(elementData);\n\n    return true;\n};\n\nvar halfDiagonal = new Vec3();\n\n/**\n * Create 8 equally sized children nodes and put them in the .children array.\n * @method subdivide\n */\nOctreeNode.prototype.subdivide = function() {\n    var aabb = this.aabb;\n    var l = aabb.lowerBound;\n    var u = aabb.upperBound;\n\n    var children = this.children;\n\n    children.push(\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,0) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(1,0,1) }) }),\n        new OctreeNode({ aabb: new AABB({ lowerBound: new Vec3(0,1,0) }) })\n    );\n\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n\n    var root = this.root || this;\n\n    for (var i = 0; i !== 8; i++) {\n        var child = children[i];\n\n        // Set current node as root\n        child.root = root;\n\n        // Compute bounds\n        var lowerBound = child.aabb.lowerBound;\n        lowerBound.x *= halfDiagonal.x;\n        lowerBound.y *= halfDiagonal.y;\n        lowerBound.z *= halfDiagonal.z;\n\n        lowerBound.vadd(l, lowerBound);\n\n        // Upper bound is always lower bound + halfDiagonal\n        lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n};\n\n/**\n * Get all data, potentially within an AABB\n * @method aabbQuery\n * @param  {AABB} aabb\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.aabbQuery = function(aabb, result) {\n\n    var nodeData = this.data;\n\n    // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n    var children = this.children;\n\n\n    // for (var i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        if (node.aabb.overlaps(aabb)){\n            Array.prototype.push.apply(result, node.data);\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n};\n\nvar tmpAABB = new AABB();\n\n/**\n * Get all data, potentially intersected by a ray.\n * @method rayQuery\n * @param  {Ray} ray\n * @param  {Transform} treeTransform\n * @param  {array} result\n * @return {array} The \"result\" object\n */\nOctreeNode.prototype.rayQuery = function(ray, treeTransform, result) {\n\n    // Use aabb query for now.\n    // @todo implement real ray query which needs less lookups\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n\n    return result;\n};\n\n/**\n * @method removeEmptyNodes\n */\nOctreeNode.prototype.removeEmptyNodes = function() {\n    var queue = [this];\n    while (queue.length) {\n        var node = queue.pop();\n        for (var i = node.children.length - 1; i >= 0; i--) {\n            if(!node.children[i].data.length){\n                node.children.splice(i, 1);\n            }\n        }\n        Array.prototype.push.apply(queue, node.children);\n    }\n};\n\n},{\"../collision/AABB\":3,\"../math/Vec3\":30}],51:[function(_dereq_,module,exports){\nmodule.exports = Pool;\n\n/**\n * For pooling objects that can be reused.\n * @class Pool\n * @constructor\n */\nfunction Pool(){\n    /**\n     * The pooled objects\n     * @property {Array} objects\n     */\n    this.objects = [];\n\n    /**\n     * Constructor of the objects\n     * @property {mixed} type\n     */\n    this.type = Object;\n}\n\n/**\n * Release an object after use\n * @method release\n * @param {Object} obj\n */\nPool.prototype.release = function(){\n    var Nargs = arguments.length;\n    for(var i=0; i!==Nargs; i++){\n        this.objects.push(arguments[i]);\n    }\n};\n\n/**\n * Get an object\n * @method get\n * @return {mixed}\n */\nPool.prototype.get = function(){\n    if(this.objects.length===0){\n        return this.constructObject();\n    } else {\n        return this.objects.pop();\n    }\n};\n\n/**\n * Construct an object. Should be implmented in each subclass.\n * @method constructObject\n * @return {mixed}\n */\nPool.prototype.constructObject = function(){\n    throw new Error(\"constructObject() not implemented in this Pool subclass yet!\");\n};\n\n},{}],52:[function(_dereq_,module,exports){\nmodule.exports = TupleDictionary;\n\n/**\n * @class TupleDictionary\n * @constructor\n */\nfunction TupleDictionary() {\n\n    /**\n     * The data storage\n     * @property data\n     * @type {Object}\n     */\n    this.data = { keys:[] };\n}\n\n/**\n * @method get\n * @param  {Number} i\n * @param  {Number} j\n * @return {Number}\n */\nTupleDictionary.prototype.get = function(i, j) {\n    if (i > j) {\n        // swap\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    return this.data[i+'-'+j];\n};\n\n/**\n * @method set\n * @param  {Number} i\n * @param  {Number} j\n * @param {Number} value\n */\nTupleDictionary.prototype.set = function(i, j, value) {\n    if (i > j) {\n        var temp = j;\n        j = i;\n        i = temp;\n    }\n    var key = i+'-'+j;\n\n    // Check if key already exists\n    if(!this.get(i,j)){\n        this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n};\n\n/**\n * @method reset\n */\nTupleDictionary.prototype.reset = function() {\n    var data = this.data,\n        keys = data.keys;\n    while(keys.length > 0){\n        var key = keys.pop();\n        delete data[key];\n    }\n};\n\n},{}],53:[function(_dereq_,module,exports){\nfunction Utils(){}\n\nmodule.exports = Utils;\n\n/**\n * Extend an options object with default values.\n * @static\n * @method defaults\n * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.\n * @param  {object} defaults An object containing default values.\n * @return {object} The modified options object.\n */\nUtils.defaults = function(options, defaults){\n    options = options || {};\n\n    for(var key in defaults){\n        if(!(key in options)){\n            options[key] = defaults[key];\n        }\n    }\n\n    return options;\n};\n\n},{}],54:[function(_dereq_,module,exports){\nmodule.exports = Vec3Pool;\n\nvar Vec3 = _dereq_('../math/Vec3');\nvar Pool = _dereq_('./Pool');\n\n/**\n * @class Vec3Pool\n * @constructor\n * @extends Pool\n */\nfunction Vec3Pool(){\n    Pool.call(this);\n    this.type = Vec3;\n}\nVec3Pool.prototype = new Pool();\n\n/**\n * Construct a vector\n * @method constructObject\n * @return {Vec3}\n */\nVec3Pool.prototype.constructObject = function(){\n    return new Vec3();\n};\n\n},{\"../math/Vec3\":30,\"./Pool\":51}],55:[function(_dereq_,module,exports){\nmodule.exports = Narrowphase;\n\nvar AABB = _dereq_('../collision/AABB');\nvar Shape = _dereq_('../shapes/Shape');\nvar Ray = _dereq_('../collision/Ray');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Transform = _dereq_('../math/Transform');\nvar ConvexPolyhedron = _dereq_('../shapes/ConvexPolyhedron');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar Solver = _dereq_('../solver/Solver');\nvar Vec3Pool = _dereq_('../utils/Vec3Pool');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar FrictionEquation = _dereq_('../equations/FrictionEquation');\n\n/**\n * Helper class for the World. Generates ContactEquations.\n * @class Narrowphase\n * @constructor\n * @todo Sphere-ConvexPolyhedron contacts\n * @todo Contact reduction\n * @todo  should move methods to prototype\n */\nfunction Narrowphase(world){\n\n    /**\n     * Internal storage of pooled contact points.\n     * @property {Array} contactPointPool\n     */\n    this.contactPointPool = [];\n\n    this.frictionEquationPool = [];\n\n    this.result = [];\n    this.frictionResult = [];\n\n    /**\n     * Pooled vectors.\n     * @property {Vec3Pool} v3pool\n     */\n    this.v3pool = new Vec3Pool();\n\n    this.world = world;\n    this.currentContactMaterial = null;\n\n    /**\n     * @property {Boolean} enableFrictionReduction\n     */\n    this.enableFrictionReduction = false;\n}\n\n/**\n * Make a contact object, by using the internal pool or creating a new one.\n * @method createContactEquation\n * @return {ContactEquation}\n */\nNarrowphase.prototype.createContactEquation = function(bi, bj, si, sj, rsi, rsj){\n    var c;\n    if(this.contactPointPool.length){\n        c = this.contactPointPool.pop();\n        c.bi = bi;\n        c.bj = bj;\n    } else {\n        c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n    var cm = this.currentContactMaterial;\n\n    c.restitution = cm.restitution;\n\n    c.setSpookParams(\n        cm.contactEquationStiffness,\n        cm.contactEquationRelaxation,\n        this.world.dt\n    );\n\n    var matA = si.material || bi.material;\n    var matB = sj.material || bj.material;\n    if(matA && matB && matA.restitution >= 0 && matB.restitution >= 0){\n        c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = rsi || si;\n    c.sj = rsj || sj;\n\n    return c;\n};\n\nNarrowphase.prototype.createFrictionEquationsFromContact = function(contactEquation, outArray){\n    var bodyA = contactEquation.bi;\n    var bodyB = contactEquation.bj;\n    var shapeA = contactEquation.si;\n    var shapeB = contactEquation.sj;\n\n    var world = this.world;\n    var cm = this.currentContactMaterial;\n\n    // If friction or restitution were specified in the material, use them\n    var friction = cm.friction;\n    var matA = shapeA.material || bodyA.material;\n    var matB = shapeB.material || bodyB.material;\n    if(matA && matB && matA.friction >= 0 && matB.friction >= 0){\n        friction = matA.friction * matB.friction;\n    }\n\n    if(friction > 0){\n\n        // Create 2 tangent equations\n        var mug = friction * world.gravity.length();\n        var reducedMass = (bodyA.invMass + bodyB.invMass);\n        if(reducedMass > 0){\n            reducedMass = 1/reducedMass;\n        }\n        var pool = this.frictionEquationPool;\n        var c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n        var c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA,bodyB,mug*reducedMass);\n\n        c1.bi = c2.bi = bodyA;\n        c1.bj = c2.bj = bodyB;\n        c1.minForce = c2.minForce = -mug*reducedMass;\n        c1.maxForce = c2.maxForce = mug*reducedMass;\n\n        // Copy over the relative vectors\n        c1.ri.copy(contactEquation.ri);\n        c1.rj.copy(contactEquation.rj);\n        c2.ri.copy(contactEquation.ri);\n        c2.rj.copy(contactEquation.rj);\n\n        // Construct tangents\n        contactEquation.ni.tangents(c1.t, c2.t);\n\n        // Set spook params\n        c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n        c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n\n        c1.enabled = c2.enabled = contactEquation.enabled;\n\n        outArray.push(c1, c2);\n\n        return true;\n    }\n\n    return false;\n};\n\nvar averageNormal = new Vec3();\nvar averageContactPointA = new Vec3();\nvar averageContactPointB = new Vec3();\n\n// Take the average N latest contact point on the plane.\nNarrowphase.prototype.createFrictionFromAverage = function(numContacts){\n    // The last contactEquation\n    var c = this.result[this.result.length - 1];\n\n    // Create the result: two \"average\" friction equations\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n        return;\n    }\n\n    var f1 = this.frictionResult[this.frictionResult.length - 2];\n    var f2 = this.frictionResult[this.frictionResult.length - 1];\n\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n\n    var bodyA = c.bi;\n    var bodyB = c.bj;\n    for(var i=0; i!==numContacts; i++){\n        c = this.result[this.result.length - 1 - i];\n        if(c.bodyA !== bodyA){\n            averageNormal.vadd(c.ni, averageNormal); // vec2.add(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.ri, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.rj, averageContactPointB);\n        } else {\n            averageNormal.vsub(c.ni, averageNormal); // vec2.sub(eq.t, eq.t, c.normalA);\n            averageContactPointA.vadd(c.rj, averageContactPointA); // vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);\n            averageContactPointB.vadd(c.ri, averageContactPointB);\n        }\n    }\n\n    var invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri); // vec2.scale(eq.contactPointA, eq.contactPointA, invNumContacts);\n    averageContactPointB.scale(invNumContacts, f1.rj); // vec2.scale(eq.contactPointB, eq.contactPointB, invNumContacts);\n    f2.ri.copy(f1.ri); // Should be the same\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t);\n    // return eq;\n};\n\n\nvar tmpVec1 = new Vec3();\nvar tmpVec2 = new Vec3();\nvar tmpQuat1 = new Quaternion();\nvar tmpQuat2 = new Quaternion();\n\n/**\n * Generate all contacts between a list of body pairs\n * @method getContacts\n * @param {array} p1 Array of body indices\n * @param {array} p2 Array of body indices\n * @param {World} world\n * @param {array} result Array to store generated contacts\n * @param {array} oldcontacts Optional. Array of reusable contact objects\n */\nNarrowphase.prototype.getContacts = function(p1, p2, world, result, oldcontacts, frictionResult, frictionPool){\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n\n    var qi = tmpQuat1;\n    var qj = tmpQuat2;\n    var xi = tmpVec1;\n    var xj = tmpVec2;\n\n    for(var k=0, N=p1.length; k!==N; k++){\n\n        // Get current collision bodies\n        var bi = p1[k],\n            bj = p2[k];\n\n        // Get contact material\n        var bodyContactMaterial = null;\n        if(bi.material && bj.material){\n            bodyContactMaterial = world.getContactMaterial(bi.material,bj.material) || null;\n        }\n\n        for (var i = 0; i < bi.shapes.length; i++) {\n            bi.quaternion.mult(bi.shapeOrientations[i], qi);\n            bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n            xi.vadd(bi.position, xi);\n            var si = bi.shapes[i];\n\n            for (var j = 0; j < bj.shapes.length; j++) {\n\n                // Compute world transform of shapes\n                bj.quaternion.mult(bj.shapeOrientations[j], qj);\n                bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n                xj.vadd(bj.position, xj);\n                var sj = bj.shapes[j];\n\n                if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n                    continue;\n                }\n\n                // Get collision material\n                var shapeContactMaterial = null;\n                if(si.material && sj.material){\n                    shapeContactMaterial = world.getContactMaterial(si.material,sj.material) || null;\n                }\n\n                this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial;\n\n                // Get contacts\n                var resolver = this[si.type | sj.type];\n                if(resolver){\n                    if (si.type < sj.type) {\n                        resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj);\n                    } else {\n                        resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj);\n                    }\n                }\n            }\n        }\n    }\n};\n\nvar numWarnings = 0;\nvar maxWarnings = 10;\n\nfunction warn(msg){\n    if(numWarnings > maxWarnings){\n        return;\n    }\n\n    numWarnings++;\n\n    console.warn(msg);\n}\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.BOX] =\nNarrowphase.prototype.boxBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.boxConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexConvex(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.PARTICLE] =\nNarrowphase.prototype.boxParticle = function(si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexParticle(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj,si,sj);\n};\n\n/**\n * @method sphereSphere\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE] =\nNarrowphase.prototype.sphereSphere = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have only one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    xj.vsub(xi, r.ni);\n    r.ni.normalize();\n\n    // Contact point locations\n    r.ri.copy(r.ni);\n    r.rj.copy(r.ni);\n    r.ri.mult(si.radius, r.ri);\n    r.rj.mult(-sj.radius, r.rj);\n\n    r.ri.vadd(xi, r.ri);\n    r.ri.vsub(bi.position, r.ri);\n\n    r.rj.vadd(xj, r.rj);\n    r.rj.vsub(bj.position, r.rj);\n\n    this.result.push(r);\n\n    this.createFrictionEquationsFromContact(r, this.frictionResult);\n};\n\n/**\n * @method planeTrimesh\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nvar planeTrimesh_normal = new Vec3();\nvar planeTrimesh_relpos = new Vec3();\nvar planeTrimesh_projected = new Vec3();\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.TRIMESH] =\nNarrowphase.prototype.planeTrimesh = function(\n    planeShape,\n    trimeshShape,\n    planePos,\n    trimeshPos,\n    planeQuat,\n    trimeshQuat,\n    planeBody,\n    trimeshBody\n){\n    // Make contacts!\n    var v = new Vec3();\n\n    var normal = planeTrimesh_normal;\n    normal.set(0,0,1);\n    planeQuat.vmult(normal,normal); // Turn normal according to plane\n\n    for(var i=0; i<trimeshShape.vertices.length / 3; i++){\n\n        // Get world vertex from trimesh\n        trimeshShape.getVertex(i, v);\n\n        // Safe up\n        var v2 = new Vec3();\n        v2.copy(v);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n        // Check plane side\n        var relpos = planeTrimesh_relpos;\n        v.vsub(planePos, relpos);\n        var dot = normal.dot(relpos);\n\n        if(dot <= 0.0){\n            var r = this.createContactEquation(planeBody,trimeshBody,planeShape,trimeshShape);\n\n            r.ni.copy(normal); // Contact normal is the plane normal\n\n            // Get vertex position projected on plane\n            var projected = planeTrimesh_projected;\n            normal.scale(relpos.dot(normal), projected);\n            v.vsub(projected,projected);\n\n            // ri is the projected world position minus plane position\n            r.ri.copy(projected);\n            r.ri.vsub(planeBody.position, r.ri);\n\n            r.rj.copy(v);\n            r.rj.vsub(trimeshBody.position, r.rj);\n\n            // Store result\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n};\n\n/**\n * @method sphereTrimesh\n * @param  {Shape}      sphereShape\n * @param  {Shape}      trimeshShape\n * @param  {Vec3}       spherePos\n * @param  {Vec3}       trimeshPos\n * @param  {Quaternion} sphereQuat\n * @param  {Quaternion} trimeshQuat\n * @param  {Body}       sphereBody\n * @param  {Body}       trimeshBody\n */\nvar sphereTrimesh_normal = new Vec3();\nvar sphereTrimesh_relpos = new Vec3();\nvar sphereTrimesh_projected = new Vec3();\nvar sphereTrimesh_v = new Vec3();\nvar sphereTrimesh_v2 = new Vec3();\nvar sphereTrimesh_edgeVertexA = new Vec3();\nvar sphereTrimesh_edgeVertexB = new Vec3();\nvar sphereTrimesh_edgeVector = new Vec3();\nvar sphereTrimesh_edgeVectorUnit = new Vec3();\nvar sphereTrimesh_localSpherePos = new Vec3();\nvar sphereTrimesh_tmp = new Vec3();\nvar sphereTrimesh_va = new Vec3();\nvar sphereTrimesh_vb = new Vec3();\nvar sphereTrimesh_vc = new Vec3();\nvar sphereTrimesh_localSphereAABB = new AABB();\nvar sphereTrimesh_triangles = [];\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.TRIMESH] =\nNarrowphase.prototype.sphereTrimesh = function (\n    sphereShape,\n    trimeshShape,\n    spherePos,\n    trimeshPos,\n    sphereQuat,\n    trimeshQuat,\n    sphereBody,\n    trimeshBody\n) {\n\n    var edgeVertexA = sphereTrimesh_edgeVertexA;\n    var edgeVertexB = sphereTrimesh_edgeVertexB;\n    var edgeVector = sphereTrimesh_edgeVector;\n    var edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    var localSpherePos = sphereTrimesh_localSpherePos;\n    var tmp = sphereTrimesh_tmp;\n    var localSphereAABB = sphereTrimesh_localSphereAABB;\n    var v2 = sphereTrimesh_v2;\n    var relpos = sphereTrimesh_relpos;\n    var triangles = sphereTrimesh_triangles;\n\n    // Convert sphere position to local in the trimesh\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos);\n\n    // Get the aabb of the sphere locally in the trimesh\n    var sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(\n        localSpherePos.x - sphereRadius,\n        localSpherePos.y - sphereRadius,\n        localSpherePos.z - sphereRadius\n    );\n    localSphereAABB.upperBound.set(\n        localSpherePos.x + sphereRadius,\n        localSpherePos.y + sphereRadius,\n        localSpherePos.z + sphereRadius\n    );\n\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles);\n    //for (var i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n\n    // Vertices\n    var v = sphereTrimesh_v;\n    var radiusSquared = sphereShape.radius * sphereShape.radius;\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v);\n\n            // Check vertex overlap in sphere\n            v.vsub(localSpherePos, relpos);\n\n            if(relpos.norm2() <= radiusSquared){\n\n                // Safe up\n                v2.copy(v);\n                Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n\n                v.vsub(spherePos, relpos);\n\n                var r = this.createContactEquation(sphereBody,trimeshBody,sphereShape,trimeshShape);\n                r.ni.copy(relpos);\n                r.ni.normalize();\n\n                // ri is the vector from sphere center to the sphere surface\n                r.ri.copy(r.ni);\n                r.ri.scale(sphereShape.radius, r.ri);\n                r.ri.vadd(spherePos, r.ri);\n                r.ri.vsub(sphereBody.position, r.ri);\n\n                r.rj.copy(v);\n                r.rj.vsub(trimeshBody.position, r.rj);\n\n                // Store result\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    // Check all edges\n    for(var i=0; i<triangles.length; i++){\n        for (var j = 0; j < 3; j++) {\n\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n            trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + ((j+1)%3)], edgeVertexB);\n            edgeVertexB.vsub(edgeVertexA, edgeVector);\n\n            // Project sphere position to the edge\n            localSpherePos.vsub(edgeVertexB, tmp);\n            var positionAlongEdgeB = tmp.dot(edgeVector);\n\n            localSpherePos.vsub(edgeVertexA, tmp);\n            var positionAlongEdgeA = tmp.dot(edgeVector);\n\n            if(positionAlongEdgeA > 0 && positionAlongEdgeB < 0){\n\n                // Now check the orthogonal distance from edge to sphere center\n                localSpherePos.vsub(edgeVertexA, tmp);\n\n                edgeVectorUnit.copy(edgeVector);\n                edgeVectorUnit.normalize();\n                positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n\n                edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n                tmp.vadd(edgeVertexA, tmp);\n\n                // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n                var dist = tmp.distanceTo(localSpherePos);\n                if(dist < sphereShape.radius){\n                    var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n                    tmp.vsub(localSpherePos, r.ni);\n                    r.ni.normalize();\n                    r.ni.scale(sphereShape.radius, r.ri);\n\n                    Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n                    tmp.vsub(trimeshBody.position, r.rj);\n\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n                    Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n\n    // Triangle faces\n    var va = sphereTrimesh_va;\n    var vb = sphereTrimesh_vb;\n    var vc = sphereTrimesh_vc;\n    var normal = sphereTrimesh_normal;\n    for(var i=0, N = triangles.length; i !== N; i++){\n        trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n        trimeshShape.getNormal(triangles[i], normal);\n        localSpherePos.vsub(va, tmp);\n        var dist = tmp.dot(normal);\n        normal.scale(dist, tmp);\n        localSpherePos.vsub(tmp, tmp);\n\n        // tmp is now the sphere position projected to the triangle plane\n        dist = tmp.distanceTo(localSpherePos);\n        if(Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius){\n            var r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape);\n\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n    }\n\n    triangles.length = 0;\n};\n\nvar point_on_plane_to_sphere = new Vec3();\nvar plane_to_sphere_ortho = new Vec3();\n\n/**\n * @method spherePlane\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.PLANE] =\nNarrowphase.prototype.spherePlane = function(si,sj,xi,xj,qi,qj,bi,bj){\n    // We will have one contact in this case\n    var r = this.createContactEquation(bi,bj,si,sj);\n\n    // Contact normal\n    r.ni.set(0,0,1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n    r.ni.normalize(); // Needed?\n\n    // Vector from sphere center to contact point\n    r.ni.mult(si.radius, r.ri);\n\n    // Project down sphere on plane\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.mult(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho,r.rj); // The sphere position projected to plane\n\n    if(-point_on_plane_to_sphere.dot(r.ni) <= si.radius){\n\n        // Make it relative to the body\n        var ri = r.ri;\n        var rj = r.rj;\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\nvar pointInPolygon_edge = new Vec3();\nvar pointInPolygon_edge_x_normal = new Vec3();\nvar pointInPolygon_vtp = new Vec3();\nfunction pointInPolygon(verts, normal, p){\n    var positiveResult = null;\n    var N = verts.length;\n    for(var i=0; i!==N; i++){\n        var v = verts[i];\n\n        // Get edge to the next vertex\n        var edge = pointInPolygon_edge;\n        verts[(i+1) % (N)].vsub(v,edge);\n\n        // Get cross product between polygon normal and the edge\n        var edge_x_normal = pointInPolygon_edge_x_normal;\n        //var edge_x_normal = new Vec3();\n        edge.cross(normal,edge_x_normal);\n\n        // Get vector between point and current vertex\n        var vertex_to_p = pointInPolygon_vtp;\n        p.vsub(v,vertex_to_p);\n\n        // This dot product determines which side of the edge the point is\n        var r = edge_x_normal.dot(vertex_to_p);\n\n        // If all such dot products have same sign, we are inside the polygon.\n        if(positiveResult===null || (r>0 && positiveResult===true) || (r<=0 && positiveResult===false)){\n            if(positiveResult===null){\n                positiveResult = r>0;\n            }\n            continue;\n        } else {\n            return false; // Encountered some other sign. Exit.\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return true;\n}\n\nvar box_to_sphere = new Vec3();\nvar sphereBox_ns = new Vec3();\nvar sphereBox_ns1 = new Vec3();\nvar sphereBox_ns2 = new Vec3();\nvar sphereBox_sides = [new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3(),new Vec3()];\nvar sphereBox_sphere_to_corner = new Vec3();\nvar sphereBox_side_ns = new Vec3();\nvar sphereBox_side_ns1 = new Vec3();\nvar sphereBox_side_ns2 = new Vec3();\n\n/**\n * @method sphereBox\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.BOX] =\nNarrowphase.prototype.sphereBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n\n    // we refer to the box as body j\n    var sides = sphereBox_sides;\n    xi.vsub(xj,box_to_sphere);\n    sj.getSideNormals(sides,qj);\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // Check side (plane) intersections\n    var found = false;\n\n    // Store the resulting side penetration info\n    var side_ns = sphereBox_side_ns;\n    var side_ns1 = sphereBox_side_ns1;\n    var side_ns2 = sphereBox_side_ns2;\n    var side_h = null;\n    var side_penetrations = 0;\n    var side_dot1 = 0;\n    var side_dot2 = 0;\n    var side_distance = null;\n    for(var idx=0,nsides=sides.length; idx!==nsides && found===false; idx++){\n        // Get the plane side normal (ns)\n        var ns = sphereBox_ns;\n        ns.copy(sides[idx]);\n\n        var h = ns.norm();\n        ns.normalize();\n\n        // The normal/distance dot product tells which side of the plane we are\n        var dot = box_to_sphere.dot(ns);\n\n        if(dot<h+R && dot>0){\n            // Intersects plane. Now check the other two dimensions\n            var ns1 = sphereBox_ns1;\n            var ns2 = sphereBox_ns2;\n            ns1.copy(sides[(idx+1)%3]);\n            ns2.copy(sides[(idx+2)%3]);\n            var h1 = ns1.norm();\n            var h2 = ns2.norm();\n            ns1.normalize();\n            ns2.normalize();\n            var dot1 = box_to_sphere.dot(ns1);\n            var dot2 = box_to_sphere.dot(ns2);\n            if(dot1<h1 && dot1>-h1 && dot2<h2 && dot2>-h2){\n                var dist = Math.abs(dot-h-R);\n                if(side_distance===null || dist < side_distance){\n                    side_distance = dist;\n                    side_dot1 = dot1;\n                    side_dot2 = dot2;\n                    side_h = h;\n                    side_ns.copy(ns);\n                    side_ns1.copy(ns1);\n                    side_ns2.copy(ns2);\n                    side_penetrations++;\n                }\n            }\n        }\n    }\n    if(side_penetrations){\n        found = true;\n        var r = this.createContactEquation(bi,bj,si,sj);\n        side_ns.mult(-R,r.ri); // Sphere r\n        r.ni.copy(side_ns);\n        r.ni.negate(r.ni); // Normal should be out of sphere\n        side_ns.mult(side_h,side_ns);\n        side_ns1.mult(side_dot1,side_ns1);\n        side_ns.vadd(side_ns1,side_ns);\n        side_ns2.mult(side_dot2,side_ns2);\n        side_ns.vadd(side_ns2,r.rj);\n\n        // Make relative to bodies\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri);\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n\n    // Check corners\n    var rj = v3pool.get();\n    var sphere_to_corner = sphereBox_sphere_to_corner;\n    for(var j=0; j!==2 && !found; j++){\n        for(var k=0; k!==2 && !found; k++){\n            for(var l=0; l!==2 && !found; l++){\n                rj.set(0,0,0);\n                if(j){\n                    rj.vadd(sides[0],rj);\n                } else {\n                    rj.vsub(sides[0],rj);\n                }\n                if(k){\n                    rj.vadd(sides[1],rj);\n                } else {\n                    rj.vsub(sides[1],rj);\n                }\n                if(l){\n                    rj.vadd(sides[2],rj);\n                } else {\n                    rj.vsub(sides[2],rj);\n                }\n\n                // World position of corner\n                xj.vadd(rj,sphere_to_corner);\n                sphere_to_corner.vsub(xi,sphere_to_corner);\n\n                if(sphere_to_corner.norm2() < R*R){\n                    found = true;\n                    var r = this.createContactEquation(bi,bj,si,sj);\n                    r.ri.copy(sphere_to_corner);\n                    r.ri.normalize();\n                    r.ni.copy(r.ri);\n                    r.ri.mult(R,r.ri);\n                    r.rj.copy(rj);\n\n                    // Make relative to bodies\n                    r.ri.vadd(xi, r.ri);\n                    r.ri.vsub(bi.position, r.ri);\n                    r.rj.vadd(xj, r.rj);\n                    r.rj.vsub(bj.position, r.rj);\n\n                    this.result.push(r);\n                    this.createFrictionEquationsFromContact(r, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(rj);\n    rj = null;\n\n    // Check edges\n    var edgeTangent = v3pool.get();\n    var edgeCenter = v3pool.get();\n    var r = v3pool.get(); // r = edge center to sphere center\n    var orthogonal = v3pool.get();\n    var dist = v3pool.get();\n    var Nsides = sides.length;\n    for(var j=0; j!==Nsides && !found; j++){\n        for(var k=0; k!==Nsides && !found; k++){\n            if(j%3 !== k%3){\n                // Get edge tangent\n                sides[k].cross(sides[j],edgeTangent);\n                edgeTangent.normalize();\n                sides[j].vadd(sides[k], edgeCenter);\n                r.copy(xi);\n                r.vsub(edgeCenter,r);\n                r.vsub(xj,r);\n                var orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n                edgeTangent.mult(orthonorm,orthogonal); // Vector from edge center to sphere center in the tangent direction\n\n                // Find the third side orthogonal to this one\n                var l = 0;\n                while(l===j%3 || l===k%3){\n                    l++;\n                }\n\n                // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n                dist.copy(xi);\n                dist.vsub(orthogonal,dist);\n                dist.vsub(edgeCenter,dist);\n                dist.vsub(xj,dist);\n\n                // Distances in tangent direction and distance in the plane orthogonal to it\n                var tdist = Math.abs(orthonorm);\n                var ndist = dist.norm();\n\n                if(tdist < sides[l].norm() && ndist<R){\n                    found = true;\n                    var res = this.createContactEquation(bi,bj,si,sj);\n                    edgeCenter.vadd(orthogonal,res.rj); // box rj\n                    res.rj.copy(res.rj);\n                    dist.negate(res.ni);\n                    res.ni.normalize();\n\n                    res.ri.copy(res.rj);\n                    res.ri.vadd(xj,res.ri);\n                    res.ri.vsub(xi,res.ri);\n                    res.ri.normalize();\n                    res.ri.mult(R,res.ri);\n\n                    // Make relative to bodies\n                    res.ri.vadd(xi, res.ri);\n                    res.ri.vsub(bi.position, res.ri);\n                    res.rj.vadd(xj, res.rj);\n                    res.rj.vsub(bj.position, res.rj);\n\n                    this.result.push(res);\n                    this.createFrictionEquationsFromContact(res, this.frictionResult);\n                }\n            }\n        }\n    }\n    v3pool.release(edgeTangent,edgeCenter,r,orthogonal,dist);\n};\n\nvar convex_to_sphere = new Vec3();\nvar sphereConvex_edge = new Vec3();\nvar sphereConvex_edgeUnit = new Vec3();\nvar sphereConvex_sphereToCorner = new Vec3();\nvar sphereConvex_worldCorner = new Vec3();\nvar sphereConvex_worldNormal = new Vec3();\nvar sphereConvex_worldPoint = new Vec3();\nvar sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nvar sphereConvex_penetrationVec = new Vec3();\nvar sphereConvex_sphereToWorldPoint = new Vec3();\n\n/**\n * @method sphereConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.sphereConvex = function(si,sj,xi,xj,qi,qj,bi,bj){\n    var v3pool = this.v3pool;\n    xi.vsub(xj,convex_to_sphere);\n    var normals = sj.faceNormals;\n    var faces = sj.faces;\n    var verts = sj.vertices;\n    var R =     si.radius;\n    var penetrating_sides = [];\n\n    // if(convex_to_sphere.norm2() > si.boundingSphereRadius + sj.boundingSphereRadius){\n    //     return;\n    // }\n\n    // Check corners\n    for(var i=0; i!==verts.length; i++){\n        var v = verts[i];\n\n        // World position of corner\n        var worldCorner = sphereConvex_worldCorner;\n        qj.vmult(v,worldCorner);\n        xj.vadd(worldCorner,worldCorner);\n        var sphere_to_corner = sphereConvex_sphereToCorner;\n        worldCorner.vsub(xi, sphere_to_corner);\n        if(sphere_to_corner.norm2() < R * R){\n            found = true;\n            var r = this.createContactEquation(bi,bj,si,sj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.mult(R,r.ri);\n            worldCorner.vsub(xj,r.rj);\n\n            // Should be relative to the body.\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n\n            // Should be relative to the body.\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n            return;\n        }\n    }\n\n    // Check side (plane) intersections\n    var found = false;\n    for(var i=0, nfaces=faces.length; i!==nfaces && found===false; i++){\n        var normal = normals[i];\n        var face = faces[i];\n\n        // Get world-transformed normal of the face\n        var worldNormal = sphereConvex_worldNormal;\n        qj.vmult(normal,worldNormal);\n\n        // Get a world vertex from the face\n        var worldPoint = sphereConvex_worldPoint;\n        qj.vmult(verts[face[0]],worldPoint);\n        worldPoint.vadd(xj,worldPoint);\n\n        // Get a point on the sphere, closest to the face normal\n        var worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n        worldNormal.mult(-R, worldSpherePointClosestToPlane);\n        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane);\n\n        // Vector from a face point to the closest point on the sphere\n        var penetrationVec = sphereConvex_penetrationVec;\n        worldSpherePointClosestToPlane.vsub(worldPoint,penetrationVec);\n\n        // The penetration. Negative value means overlap.\n        var penetration = penetrationVec.dot(worldNormal);\n\n        var worldPointToSphere = sphereConvex_sphereToWorldPoint;\n        xi.vsub(worldPoint, worldPointToSphere);\n\n        if(penetration < 0 && worldPointToSphere.dot(worldNormal)>0){\n            // Intersects plane. Now check if the sphere is inside the face polygon\n            var faceVerts = []; // Face vertices, in world coords\n            for(var j=0, Nverts=face.length; j!==Nverts; j++){\n                var worldVertex = v3pool.get();\n                qj.vmult(verts[face[j]], worldVertex);\n                xj.vadd(worldVertex,worldVertex);\n                faceVerts.push(worldVertex);\n            }\n\n            if(pointInPolygon(faceVerts,worldNormal,xi)){ // Is the sphere center in the face polygon?\n                found = true;\n                var r = this.createContactEquation(bi,bj,si,sj);\n\n                worldNormal.mult(-R, r.ri); // Contact offset, from sphere center to contact\n                worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n                var penetrationVec2 = v3pool.get();\n                worldNormal.mult(-penetration, penetrationVec2);\n                var penetrationSpherePoint = v3pool.get();\n                worldNormal.mult(-R, penetrationSpherePoint);\n\n                //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n                xi.vsub(xj,r.rj);\n                r.rj.vadd(penetrationSpherePoint,r.rj);\n                r.rj.vadd(penetrationVec2 , r.rj);\n\n                // Should be relative to the body.\n                r.rj.vadd(xj, r.rj);\n                r.rj.vsub(bj.position, r.rj);\n\n                // Should be relative to the body.\n                r.ri.vadd(xi, r.ri);\n                r.ri.vsub(bi.position, r.ri);\n\n                v3pool.release(penetrationVec2);\n                v3pool.release(penetrationSpherePoint);\n\n                this.result.push(r);\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                // Release world vertices\n                for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                    v3pool.release(faceVerts[j]);\n                }\n\n                return; // We only expect *one* face contact\n            } else {\n                // Edge?\n                for(var j=0; j!==face.length; j++){\n\n                    // Get two world transformed vertices\n                    var v1 = v3pool.get();\n                    var v2 = v3pool.get();\n                    qj.vmult(verts[face[(j+1)%face.length]], v1);\n                    qj.vmult(verts[face[(j+2)%face.length]], v2);\n                    xj.vadd(v1, v1);\n                    xj.vadd(v2, v2);\n\n                    // Construct edge vector\n                    var edge = sphereConvex_edge;\n                    v2.vsub(v1,edge);\n\n                    // Construct the same vector, but normalized\n                    var edgeUnit = sphereConvex_edgeUnit;\n                    edge.unit(edgeUnit);\n\n                    // p is xi projected onto the edge\n                    var p = v3pool.get();\n                    var v1_to_xi = v3pool.get();\n                    xi.vsub(v1, v1_to_xi);\n                    var dot = v1_to_xi.dot(edgeUnit);\n                    edgeUnit.mult(dot, p);\n                    p.vadd(v1, p);\n\n                    // Compute a vector from p to the center of the sphere\n                    var xi_to_p = v3pool.get();\n                    p.vsub(xi, xi_to_p);\n\n                    // Collision if the edge-sphere distance is less than the radius\n                    // AND if p is in between v1 and v2\n                    if(dot > 0 && dot*dot<edge.norm2() && xi_to_p.norm2() < R*R){ // Collision if the edge-sphere distance is less than the radius\n                        // Edge contact!\n                        var r = this.createContactEquation(bi,bj,si,sj);\n                        p.vsub(xj,r.rj);\n\n                        p.vsub(xi,r.ni);\n                        r.ni.normalize();\n\n                        r.ni.mult(R,r.ri);\n\n                        // Should be relative to the body.\n                        r.rj.vadd(xj, r.rj);\n                        r.rj.vsub(bj.position, r.rj);\n\n                        // Should be relative to the body.\n                        r.ri.vadd(xi, r.ri);\n                        r.ri.vsub(bi.position, r.ri);\n\n                        this.result.push(r);\n                        this.createFrictionEquationsFromContact(r, this.frictionResult);\n\n                        // Release world vertices\n                        for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                            v3pool.release(faceVerts[j]);\n                        }\n\n                        v3pool.release(v1);\n                        v3pool.release(v2);\n                        v3pool.release(p);\n                        v3pool.release(xi_to_p);\n                        v3pool.release(v1_to_xi);\n\n                        return;\n                    }\n\n                    v3pool.release(v1);\n                    v3pool.release(v2);\n                    v3pool.release(p);\n                    v3pool.release(xi_to_p);\n                    v3pool.release(v1_to_xi);\n                }\n            }\n\n            // Release world vertices\n            for(var j=0, Nfaceverts=faceVerts.length; j!==Nfaceverts; j++){\n                v3pool.release(faceVerts[j]);\n            }\n        }\n    }\n};\n\nvar planeBox_normal = new Vec3();\nvar plane_to_corner = new Vec3();\n\n/**\n * @method planeBox\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.BOX] =\nNarrowphase.prototype.planeBox = function(si,sj,xi,xj,qi,qj,bi,bj){\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    this.planeConvex(si,sj.convexPolyhedronRepresentation,xi,xj,qi,qj,bi,bj);\n};\n\nvar planeConvex_v = new Vec3();\nvar planeConvex_normal = new Vec3();\nvar planeConvex_relpos = new Vec3();\nvar planeConvex_projected = new Vec3();\n\n/**\n * @method planeConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.planeConvex = function(\n    planeShape,\n    convexShape,\n    planePosition,\n    convexPosition,\n    planeQuat,\n    convexQuat,\n    planeBody,\n    convexBody\n){\n    // Simply return the points behind the plane.\n    var worldVertex = planeConvex_v,\n        worldNormal = planeConvex_normal;\n    worldNormal.set(0,0,1);\n    planeQuat.vmult(worldNormal,worldNormal); // Turn normal according to plane orientation\n\n    var numContacts = 0;\n    var relpos = planeConvex_relpos;\n    for(var i = 0; i !== convexShape.vertices.length; i++){\n\n        // Get world convex vertex\n        worldVertex.copy(convexShape.vertices[i]);\n        convexQuat.vmult(worldVertex, worldVertex);\n        convexPosition.vadd(worldVertex, worldVertex);\n        worldVertex.vsub(planePosition, relpos);\n\n        var dot = worldNormal.dot(relpos);\n        if(dot <= 0.0){\n\n            var r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape);\n\n            // Get vertex position projected on plane\n            var projected = planeConvex_projected;\n            worldNormal.mult(worldNormal.dot(relpos),projected);\n            worldVertex.vsub(projected, projected);\n            projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n            r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n\n            // rj is now just the vector from the convex center to the vertex\n            worldVertex.vsub(convexPosition, r.rj);\n\n            // Make it relative to the body\n            r.ri.vadd(planePosition, r.ri);\n            r.ri.vsub(planeBody.position, r.ri);\n            r.rj.vadd(convexPosition, r.rj);\n            r.rj.vsub(convexBody.position, r.rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n    }\n\n    if(this.enableFrictionReduction && numContacts){\n        this.createFrictionFromAverage(numContacts);\n    }\n};\n\nvar convexConvex_sepAxis = new Vec3();\nvar convexConvex_q = new Vec3();\n\n/**\n * @method convexConvex\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexConvex = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n    var sepAxis = convexConvex_sepAxis;\n\n    if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n        return;\n    }\n\n    if(si.findSeparatingAxis(sj,xi,qi,xj,qj,sepAxis,faceListA,faceListB)){\n        var res = [];\n        var q = convexConvex_q;\n        si.clipAgainstHull(xi,qi,sj,xj,qj,sepAxis,-100,100,res);\n        var numContacts = 0;\n        for(var j = 0; j !== res.length; j++){\n            var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n                ri = r.ri,\n                rj = r.rj;\n            sepAxis.negate(r.ni);\n            res[j].normal.negate(q);\n            q.mult(res[j].depth, q);\n            res[j].point.vadd(q, ri);\n            rj.copy(res[j].point);\n\n            // Contact points are in world coordinates. Transform back to relative\n            ri.vsub(xi,ri);\n            rj.vsub(xj,rj);\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            numContacts++;\n            if(!this.enableFrictionReduction){\n                this.createFrictionEquationsFromContact(r, this.frictionResult);\n            }\n        }\n        if(this.enableFrictionReduction && numContacts){\n            this.createFrictionFromAverage(numContacts);\n        }\n    }\n};\n\n\n/**\n * @method convexTrimesh\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\n// Narrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.TRIMESH] =\n// Narrowphase.prototype.convexTrimesh = function(si,sj,xi,xj,qi,qj,bi,bj,rsi,rsj,faceListA,faceListB){\n//     var sepAxis = convexConvex_sepAxis;\n\n//     if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n//         return;\n//     }\n\n//     // Construct a temp hull for each triangle\n//     var hullB = new ConvexPolyhedron();\n\n//     hullB.faces = [[0,1,2]];\n//     var va = new Vec3();\n//     var vb = new Vec3();\n//     var vc = new Vec3();\n//     hullB.vertices = [\n//         va,\n//         vb,\n//         vc\n//     ];\n\n//     for (var i = 0; i < sj.indices.length / 3; i++) {\n\n//         var triangleNormal = new Vec3();\n//         sj.getNormal(i, triangleNormal);\n//         hullB.faceNormals = [triangleNormal];\n\n//         sj.getTriangleVertices(i, va, vb, vc);\n\n//         var d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n//         if(!d){\n//             triangleNormal.scale(-1, triangleNormal);\n//             d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n\n//             if(!d){\n//                 continue;\n//             }\n//         }\n\n//         var res = [];\n//         var q = convexConvex_q;\n//         si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n//         for(var j = 0; j !== res.length; j++){\n//             var r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n//                 ri = r.ri,\n//                 rj = r.rj;\n//             r.ni.copy(triangleNormal);\n//             r.ni.negate(r.ni);\n//             res[j].normal.negate(q);\n//             q.mult(res[j].depth, q);\n//             res[j].point.vadd(q, ri);\n//             rj.copy(res[j].point);\n\n//             // Contact points are in world coordinates. Transform back to relative\n//             ri.vsub(xi,ri);\n//             rj.vsub(xj,rj);\n\n//             // Make relative to bodies\n//             ri.vadd(xi, ri);\n//             ri.vsub(bi.position, ri);\n//             rj.vadd(xj, rj);\n//             rj.vsub(bj.position, rj);\n\n//             result.push(r);\n//         }\n//     }\n// };\n\nvar particlePlane_normal = new Vec3();\nvar particlePlane_relpos = new Vec3();\nvar particlePlane_projected = new Vec3();\n\n/**\n * @method particlePlane\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PLANE | Shape.types.PARTICLE] =\nNarrowphase.prototype.planeParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var normal = particlePlane_normal;\n    normal.set(0,0,1);\n    bj.quaternion.vmult(normal,normal); // Turn normal according to plane orientation\n    var relpos = particlePlane_relpos;\n    xi.vsub(bj.position,relpos);\n    var dot = normal.dot(relpos);\n    if(dot <= 0.0){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n\n        // Get particle position projected on plane\n        var projected = particlePlane_projected;\n        normal.mult(normal.dot(xi),projected);\n        xi.vsub(projected,projected);\n        //projected.vadd(bj.position,projected);\n\n        // rj is now the projected world position minus plane position\n        r.rj.copy(projected);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\nvar particleSphere_normal = new Vec3();\n\n/**\n * @method particleSphere\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.SPHERE] =\nNarrowphase.prototype.sphereParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    // The normal is the unit vector from sphere center to particle center\n    var normal = particleSphere_normal;\n    normal.set(0,0,1);\n    xi.vsub(xj,normal);\n    var lengthSquared = normal.norm2();\n\n    if(lengthSquared <= sj.radius * sj.radius){\n        var r = this.createContactEquation(bi,bj,si,sj);\n        normal.normalize();\n        r.rj.copy(normal);\n        r.rj.mult(sj.radius,r.rj);\n        r.ni.copy(normal); // Contact normal\n        r.ni.negate(r.ni);\n        r.ri.set(0,0,0); // Center of particle\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n};\n\n// WIP\nvar cqj = new Quaternion();\nvar convexParticle_local = new Vec3();\nvar convexParticle_normal = new Vec3();\nvar convexParticle_penetratedFaceNormal = new Vec3();\nvar convexParticle_vertexToParticle = new Vec3();\nvar convexParticle_worldPenetrationVec = new Vec3();\n\n/**\n * @method convexParticle\n * @param  {Array}      result\n * @param  {Shape}      si\n * @param  {Shape}      sj\n * @param  {Vec3}       xi\n * @param  {Vec3}       xj\n * @param  {Quaternion} qi\n * @param  {Quaternion} qj\n * @param  {Body}       bi\n * @param  {Body}       bj\n */\nNarrowphase.prototype[Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON] =\nNarrowphase.prototype.convexParticle = function(sj,si,xj,xi,qj,qi,bj,bi){\n    var penetratedFaceIndex = -1;\n    var penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    var worldPenetrationVec = convexParticle_worldPenetrationVec;\n    var minPenetration = null;\n    var numDetectedFaces = 0;\n\n    // Convert particle position xi to local coords in the convex\n    var local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj,local); // Convert position to relative the convex origin\n    qj.conjugate(cqj);\n    cqj.vmult(local,local);\n\n    if(sj.pointIsInside(local)){\n\n        if(sj.worldVerticesNeedsUpdate){\n            sj.computeWorldVertices(xj,qj);\n        }\n        if(sj.worldFaceNormalsNeedsUpdate){\n            sj.computeWorldFaceNormals(qj);\n        }\n\n        // For each world polygon in the polyhedra\n        for(var i=0,nfaces=sj.faces.length; i!==nfaces; i++){\n\n            // Construct world face vertices\n            var verts = [ sj.worldVertices[ sj.faces[i][0] ] ];\n            var normal = sj.worldFaceNormals[i];\n\n            // Check how much the particle penetrates the polygon plane.\n            xi.vsub(verts[0],convexParticle_vertexToParticle);\n            var penetration = -normal.dot(convexParticle_vertexToParticle);\n            if(minPenetration===null || Math.abs(penetration)<Math.abs(minPenetration)){\n                minPenetration = penetration;\n                penetratedFaceIndex = i;\n                penetratedFaceNormal.copy(normal);\n                numDetectedFaces++;\n            }\n        }\n\n        if(penetratedFaceIndex!==-1){\n            // Setup contact\n            var r = this.createContactEquation(bi,bj,si,sj);\n            penetratedFaceNormal.mult(minPenetration, worldPenetrationVec);\n\n            // rj is the particle position projected to the face\n            worldPenetrationVec.vadd(xi,worldPenetrationVec);\n            worldPenetrationVec.vsub(xj,worldPenetrationVec);\n            r.rj.copy(worldPenetrationVec);\n            //var projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n            //projectedToFace.copy(r.rj);\n\n            //qj.vmult(r.rj,r.rj);\n            penetratedFaceNormal.negate( r.ni ); // Contact normal\n            r.ri.set(0,0,0); // Center of particle\n\n            var ri = r.ri,\n                rj = r.rj;\n\n            // Make relative to bodies\n            ri.vadd(xi, ri);\n            ri.vsub(bi.position, ri);\n            rj.vadd(xj, rj);\n            rj.vsub(bj.position, rj);\n\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n        } else {\n            console.warn(\"Point found inside convex, but did not find penetrating face!\");\n        }\n    }\n};\n\nNarrowphase.prototype[Shape.types.BOX | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.boxHeightfield = function (si,sj,xi,xj,qi,qj,bi,bj){\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    this.convexHeightfield(si.convexPolyhedronRepresentation,sj,xi,xj,qi,qj,bi,bj);\n};\n\nvar convexHeightfield_tmp1 = new Vec3();\nvar convexHeightfield_tmp2 = new Vec3();\nvar convexHeightfield_faceList = [0];\n\n/**\n * @method convexHeightfield\n */\nNarrowphase.prototype[Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.convexHeightfield = function (\n    convexShape,\n    hfShape,\n    convexPos,\n    hfPos,\n    convexQuat,\n    hfQuat,\n    convexBody,\n    hfBody\n){\n    var data = hfShape.data,\n        w = hfShape.elementSize,\n        radius = convexShape.boundingSphereRadius,\n        worldPillarOffset = convexHeightfield_tmp2,\n        faceList = convexHeightfield_faceList;\n\n    // Get sphere position to heightfield local!\n    var localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localConvexPos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1,\n        iMinY = Math.floor((localConvexPos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localConvexPos.z - radius > max || localConvexPos.z + radius < min){\n        return;\n    }\n\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n                this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, faceList, null);\n            }\n        }\n    }\n};\n\nvar sphereHeightfield_tmp1 = new Vec3();\nvar sphereHeightfield_tmp2 = new Vec3();\n\n/**\n * @method sphereHeightfield\n */\nNarrowphase.prototype[Shape.types.SPHERE | Shape.types.HEIGHTFIELD] =\nNarrowphase.prototype.sphereHeightfield = function (\n    sphereShape,\n    hfShape,\n    spherePos,\n    hfPos,\n    sphereQuat,\n    hfQuat,\n    sphereBody,\n    hfBody\n){\n    var data = hfShape.data,\n        radius = sphereShape.radius,\n        w = hfShape.elementSize,\n        worldPillarOffset = sphereHeightfield_tmp2;\n\n    // Get sphere position to heightfield local!\n    var localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos);\n\n    // Get the index of the data points to test against\n    var iMinX = Math.floor((localSpherePos.x - radius) / w) - 1,\n        iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1,\n        iMinY = Math.floor((localSpherePos.y - radius) / w) - 1,\n        iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1;\n\n    // Bail out if we are out of the terrain\n    if(iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMaxY > data[0].length){\n        return;\n    }\n\n    // Clamp index to edges\n    if(iMinX < 0){ iMinX = 0; }\n    if(iMaxX < 0){ iMaxX = 0; }\n    if(iMinY < 0){ iMinY = 0; }\n    if(iMaxY < 0){ iMaxY = 0; }\n    if(iMinX >= data.length){ iMinX = data.length - 1; }\n    if(iMaxX >= data.length){ iMaxX = data.length - 1; }\n    if(iMaxY >= data[0].length){ iMaxY = data[0].length - 1; }\n    if(iMinY >= data[0].length){ iMinY = data[0].length - 1; }\n\n    var minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    var min = minMax[0];\n    var max = minMax[1];\n\n    // Bail out if we're cant touch the bounding height box\n    if(localSpherePos.z - radius > max || localSpherePos.z + radius < min){\n        return;\n    }\n\n    var result = this.result;\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            var numContactsBefore = result.length;\n\n            // Lower triangle\n            hfShape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            // Upper triangle\n            hfShape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n            if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n                this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody);\n            }\n\n            var numContacts = result.length - numContactsBefore;\n\n            if(numContacts > 2){\n                return;\n            }\n            /*\n            // Skip all but 1\n            for (var k = 0; k < numContacts - 1; k++) {\n                result.pop();\n            }\n            */\n        }\n    }\n};\n\n},{\"../collision/AABB\":3,\"../collision/Ray\":9,\"../equations/ContactEquation\":19,\"../equations/FrictionEquation\":21,\"../math/Quaternion\":28,\"../math/Transform\":29,\"../math/Vec3\":30,\"../shapes/ConvexPolyhedron\":38,\"../shapes/Shape\":43,\"../solver/Solver\":47,\"../utils/Vec3Pool\":54}],56:[function(_dereq_,module,exports){\n/* global performance */\n\nmodule.exports = World;\n\nvar Shape = _dereq_('../shapes/Shape');\nvar Vec3 = _dereq_('../math/Vec3');\nvar Quaternion = _dereq_('../math/Quaternion');\nvar GSSolver = _dereq_('../solver/GSSolver');\nvar Vec3Pool = _dereq_('../utils/Vec3Pool');\nvar ContactEquation = _dereq_('../equations/ContactEquation');\nvar FrictionEquation = _dereq_('../equations/FrictionEquation');\nvar Narrowphase = _dereq_('./Narrowphase');\nvar EventTarget = _dereq_('../utils/EventTarget');\nvar ArrayCollisionMatrix = _dereq_('../collision/ArrayCollisionMatrix');\nvar Material = _dereq_('../material/Material');\nvar ContactMaterial = _dereq_('../material/ContactMaterial');\nvar Body = _dereq_('../objects/Body');\nvar TupleDictionary = _dereq_('../utils/TupleDictionary');\nvar RaycastResult = _dereq_('../collision/RaycastResult');\nvar AABB = _dereq_('../collision/AABB');\nvar Ray = _dereq_('../collision/Ray');\nvar NaiveBroadphase = _dereq_('../collision/NaiveBroadphase');\n\n/**\n * The physics world\n * @class World\n * @constructor\n * @extends EventTarget\n */\nfunction World(){\n    EventTarget.apply(this);\n\n    /**\n     * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n     * @property {Number} dt\n     */\n    this.dt = -1;\n\n    /**\n     * Makes bodies go to sleep when they've been inactive\n     * @property allowSleep\n     * @type {Boolean}\n     */\n    this.allowSleep = false;\n\n    /**\n     * All the current contacts (instances of ContactEquation) in the world.\n     * @property contacts\n     * @type {Array}\n     */\n    this.contacts = [];\n    this.frictionEquations = [];\n\n    /**\n     * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n     * @property quatNormalizeSkip\n     * @type {Number}\n     */\n    this.quatNormalizeSkip = 0;\n\n    /**\n     * Set to true to use fast quaternion normalization. It is often enough accurate to use. If bodies tend to explode, set to false.\n     * @property quatNormalizeFast\n     * @type {Boolean}\n     * @see Quaternion.normalizeFast\n     * @see Quaternion.normalize\n     */\n    this.quatNormalizeFast = false;\n\n    /**\n     * The wall-clock time since simulation start\n     * @property time\n     * @type {Number}\n     */\n    this.time = 0.0;\n\n    /**\n     * Number of timesteps taken since start\n     * @property stepnumber\n     * @type {Number}\n     */\n    this.stepnumber = 0;\n\n    /// Default and last timestep sizes\n    this.default_dt = 1/60;\n\n    this.nextId = 0;\n    /**\n     * @property gravity\n     * @type {Vec3}\n     */\n    this.gravity = new Vec3();\n\n    /**\n     * @property broadphase\n     * @type {Broadphase}\n     */\n    this.broadphase = new NaiveBroadphase();\n\n    /**\n     * @property bodies\n     * @type {Array}\n     */\n    this.bodies = [];\n\n    /**\n     * @property solver\n     * @type {Solver}\n     */\n    this.solver = new GSSolver();\n\n    /**\n     * @property constraints\n     * @type {Array}\n     */\n    this.constraints = [];\n\n    /**\n     * @property narrowphase\n     * @type {Narrowphase}\n     */\n    this.narrowphase = new Narrowphase(this);\n\n    /**\n     * @property {ArrayCollisionMatrix} collisionMatrix\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrix = new ArrayCollisionMatrix();\n\n    /**\n     * CollisionMatrix from the previous step.\n     * @property {ArrayCollisionMatrix} collisionMatrixPrevious\n\t * @type {ArrayCollisionMatrix}\n\t */\n\tthis.collisionMatrixPrevious = new ArrayCollisionMatrix();\n\n    /**\n     * All added materials\n     * @property materials\n     * @type {Array}\n     */\n    this.materials = [];\n\n    /**\n     * @property contactmaterials\n     * @type {Array}\n     */\n    this.contactmaterials = [];\n\n    /**\n     * Used to look up a ContactMaterial given two instances of Material.\n     * @property {TupleDictionary} contactMaterialTable\n     */\n    this.contactMaterialTable = new TupleDictionary();\n\n    this.defaultMaterial = new Material(\"default\");\n\n    /**\n     * This contact material is used if no suitable contactmaterial is found for a contact.\n     * @property defaultContactMaterial\n     * @type {ContactMaterial}\n     */\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, { friction: 0.3, restitution: 0.0 });\n\n    /**\n     * @property doProfiling\n     * @type {Boolean}\n     */\n    this.doProfiling = false;\n\n    /**\n     * @property profile\n     * @type {Object}\n     */\n    this.profile = {\n        solve:0,\n        makeContactConstraints:0,\n        broadphase:0,\n        integrate:0,\n        narrowphase:0,\n    };\n\n    /**\n     * @property subsystems\n     * @type {Array}\n     */\n    this.subsystems = [];\n\n    this.addBodyEvent = {\n        type:\"addBody\",\n        body : null,\n    };\n\n    this.removeBodyEvent = {\n        type:\"removeBody\",\n        body : null,\n    };\n}\nWorld.prototype = new EventTarget();\n\n// Temp stuff\nvar tmpAABB1 = new AABB();\nvar tmpArray1 = [];\nvar tmpRay = new Ray();\n\n/**\n * Get the contact material between materials m1 and m2\n * @method getContactMaterial\n * @param {Material} m1\n * @param {Material} m2\n * @return {ContactMaterial} The contact material if it was found.\n */\nWorld.prototype.getContactMaterial = function(m1,m2){\n    return this.contactMaterialTable.get(m1.id,m2.id); //this.contactmaterials[this.mats2cmat[i+j*this.materials.length]];\n};\n\n/**\n * Get number of objects in the world.\n * @method numObjects\n * @return {Number}\n * @deprecated\n */\nWorld.prototype.numObjects = function(){\n    return this.bodies.length;\n};\n\n/**\n * Store old collision state info\n * @method collisionMatrixTick\n */\nWorld.prototype.collisionMatrixTick = function(){\n\tvar temp = this.collisionMatrixPrevious;\n\tthis.collisionMatrixPrevious = this.collisionMatrix;\n\tthis.collisionMatrix = temp;\n\tthis.collisionMatrix.reset();\n};\n\n/**\n * Add a rigid body to the simulation.\n * @method add\n * @param {Body} body\n * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n * @todo Adding an array of bodies should be possible. This would save some loops too\n * @deprecated Use .addBody instead\n */\nWorld.prototype.add = World.prototype.addBody = function(body){\n    if(this.bodies.indexOf(body) !== -1){\n        return;\n    }\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n    if(body instanceof Body){\n        body.initAngularVelocity.copy(body.angularVelocity);\n        body.initQuaternion.copy(body.quaternion);\n    }\n\tthis.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.dispatchEvent(this.addBodyEvent);\n};\n\n/**\n * Add a constraint to the simulation.\n * @method addConstraint\n * @param {Constraint} c\n */\nWorld.prototype.addConstraint = function(c){\n    this.constraints.push(c);\n};\n\n/**\n * Removes a constraint\n * @method removeConstraint\n * @param {Constraint} c\n */\nWorld.prototype.removeConstraint = function(c){\n    var idx = this.constraints.indexOf(c);\n    if(idx!==-1){\n        this.constraints.splice(idx,1);\n    }\n};\n\n/**\n * Raycast test\n * @method rayTest\n * @param {Vec3} from\n * @param {Vec3} to\n * @param {Function|RaycastResult} result\n * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n */\nWorld.prototype.rayTest = function(from, to, result){\n    if(result instanceof RaycastResult){\n        // Do raycastclosest\n        this.raycastClosest(from, to, {\n            skipBackfaces: true\n        }, result);\n    } else {\n        // Do raycastAll\n        this.raycastAll(from, to, {\n            skipBackfaces: true\n        }, result);\n    }\n};\n\n/**\n * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n * @method raycastAll\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {Function} callback\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAll = function(from, to, options, callback){\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n * @method raycastAny\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastAny = function(from, to, options, result){\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Ray cast, and return information of the closest hit.\n * @method raycastClosest\n * @param  {Vec3} from\n * @param  {Vec3} to\n * @param  {Object} options\n * @param  {number} [options.collisionFilterMask=-1]\n * @param  {number} [options.collisionFilterGroup=-1]\n * @param  {boolean} [options.skipBackfaces=false]\n * @param  {boolean} [options.checkCollisionResponse=true]\n * @param  {RaycastResult} result\n * @return {boolean} True if any body was hit.\n */\nWorld.prototype.raycastClosest = function(from, to, options, result){\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method remove\n * @param {Body} body\n * @deprecated Use .removeBody instead\n */\nWorld.prototype.remove = function(body){\n    body.world = null;\n    var n = this.bodies.length-1,\n        bodies = this.bodies,\n        idx = bodies.indexOf(body);\n    if(idx !== -1){\n        bodies.splice(idx, 1); // Todo: should use a garbage free method\n\n        // Recompute index\n        for(var i=0; i!==bodies.length; i++){\n            bodies[i].index = i;\n        }\n\n        this.collisionMatrix.setNumObjects(n);\n        this.removeBodyEvent.body = body;\n        this.dispatchEvent(this.removeBodyEvent);\n    }\n};\n\n/**\n * Remove a rigid body from the simulation.\n * @method removeBody\n * @param {Body} body\n */\nWorld.prototype.removeBody = World.prototype.remove;\n\n/**\n * Adds a material to the World.\n * @method addMaterial\n * @param {Material} m\n * @todo Necessary?\n */\nWorld.prototype.addMaterial = function(m){\n    this.materials.push(m);\n};\n\n/**\n * Adds a contact material to the World\n * @method addContactMaterial\n * @param {ContactMaterial} cmat\n */\nWorld.prototype.addContactMaterial = function(cmat) {\n\n    // Add contact material\n    this.contactmaterials.push(cmat);\n\n    // Add current contact material to the material table\n    this.contactMaterialTable.set(cmat.materials[0].id,cmat.materials[1].id,cmat);\n};\n\n// performance.now()\nif(typeof performance === 'undefined'){\n    performance = {};\n}\nif(!performance.now){\n    var nowOffset = Date.now();\n    if (performance.timing && performance.timing.navigationStart){\n        nowOffset = performance.timing.navigationStart;\n    }\n    performance.now = function(){\n        return Date.now() - nowOffset;\n    };\n}\n\nvar step_tmp1 = new Vec3();\n\n/**\n * Step the physics world forward in time.\n *\n * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n *\n * @method step\n * @param {Number} dt                       The fixed time step size to use.\n * @param {Number} [timeSinceLastCalled]    The time elapsed since the function was last called.\n * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.\n *\n * @example\n *     // fixed timestepping without interpolation\n *     world.step(1/60);\n *\n * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\n */\nWorld.prototype.step = function(dt, timeSinceLastCalled, maxSubSteps){\n    maxSubSteps = maxSubSteps || 10;\n    timeSinceLastCalled = timeSinceLastCalled || 0;\n\n    if(timeSinceLastCalled === 0){ // Fixed, simple stepping\n\n        this.internalStep(dt);\n\n        // Increment time\n        this.time += dt;\n\n    } else {\n\n        // Compute the number of fixed steps we should have taken since the last step\n        var internalSteps = Math.floor((this.time + timeSinceLastCalled) / dt) - Math.floor(this.time / dt);\n        internalSteps = Math.min(internalSteps,maxSubSteps);\n\n        // Do some fixed steps to catch up\n        var t0 = performance.now();\n        for(var i=0; i!==internalSteps; i++){\n            this.internalStep(dt);\n            if(performance.now() - t0 > dt * 1000){\n                // We are slower than real-time. Better bail out.\n                break;\n            }\n        }\n\n        // Increment internal clock\n        this.time += timeSinceLastCalled;\n\n        // Compute \"Left over\" time step\n        var h = this.time % dt;\n        var h_div_dt = h / dt;\n        var interpvelo = step_tmp1;\n        var bodies = this.bodies;\n\n        for(var j=0; j !== bodies.length; j++){\n            var b = bodies[j];\n            if(b.type !== Body.STATIC && b.sleepState !== Body.SLEEPING){\n\n                // Interpolate\n                b.position.vsub(b.previousPosition, interpvelo);\n                interpvelo.scale(h_div_dt, interpvelo);\n                b.position.vadd(interpvelo, b.interpolatedPosition);\n\n                // TODO: interpolate quaternion\n                // b.interpolatedAngle = b.angle + (b.angle - b.previousAngle) * h_div_dt;\n\n            } else {\n\n                // For static bodies, just copy. Who else will do it?\n                b.interpolatedPosition.copy(b.position);\n                b.interpolatedQuaternion.copy(b.quaternion);\n            }\n        }\n    }\n};\n\n/**\n * Step the simulation\n * @method step\n * @param {Number} dt\n */\nvar World_step_postStepEvent = {type:\"postStep\"}, // Reusable event objects to save memory\n    World_step_preStepEvent = {type:\"preStep\"},\n    World_step_collideEvent = {type:\"collide\", body:null, contact:null },\n    World_step_oldContacts = [], // Pools for unused objects\n    World_step_frictionEquationPool = [],\n    World_step_p1 = [], // Reusable arrays for collision pairs\n    World_step_p2 = [],\n    World_step_gvec = new Vec3(), // Temporary vectors and quats\n    World_step_vi = new Vec3(),\n    World_step_vj = new Vec3(),\n    World_step_wi = new Vec3(),\n    World_step_wj = new Vec3(),\n    World_step_t1 = new Vec3(),\n    World_step_t2 = new Vec3(),\n    World_step_rixn = new Vec3(),\n    World_step_rjxn = new Vec3(),\n    World_step_step_q = new Quaternion(),\n    World_step_step_w = new Quaternion(),\n    World_step_step_wq = new Quaternion(),\n    invI_tau_dt = new Vec3();\nWorld.prototype.internalStep = function(dt){\n    this.dt = dt;\n\n    var world = this,\n        that = this,\n        contacts = this.contacts,\n        p1 = World_step_p1,\n        p2 = World_step_p2,\n        N = this.numObjects(),\n        bodies = this.bodies,\n        solver = this.solver,\n        gravity = this.gravity,\n        doProfiling = this.doProfiling,\n        profile = this.profile,\n        DYNAMIC = Body.DYNAMIC,\n        profilingStart,\n        constraints = this.constraints,\n        frictionEquationPool = World_step_frictionEquationPool,\n        gnorm = gravity.norm(),\n        gx = gravity.x,\n        gy = gravity.y,\n        gz = gravity.z,\n        i=0;\n\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add gravity to all objects\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var f = bi.force, m = bi.mass;\n            f.x += m*gx;\n            f.y += m*gy;\n            f.z += m*gz;\n        }\n    }\n\n    // Update subsystems\n    for(var i=0, Nsubsystems=this.subsystems.length; i!==Nsubsystems; i++){\n        this.subsystems[i].update();\n    }\n\n    // Collision detection\n    if(doProfiling){ profilingStart = performance.now(); }\n    p1.length = 0; // Clean up pair arrays from last step\n    p2.length = 0;\n    this.broadphase.collisionPairs(this,p1,p2);\n    if(doProfiling){ profile.broadphase = performance.now() - profilingStart; }\n\n    // Remove constrained pairs with collideConnected == false\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        if(!c.collideConnected){\n            for(var j = p1.length-1; j>=0; j-=1){\n                if( (c.bodyA === p1[j] && c.bodyB === p2[j]) ||\n                    (c.bodyB === p1[j] && c.bodyA === p2[j])){\n                    p1.splice(j, 1);\n                    p2.splice(j, 1);\n                }\n            }\n        }\n    }\n\n    this.collisionMatrixTick();\n\n    // Generate contacts\n    if(doProfiling){ profilingStart = performance.now(); }\n    var oldcontacts = World_step_oldContacts;\n    var NoldContacts = contacts.length;\n\n    for(i=0; i!==NoldContacts; i++){\n        oldcontacts.push(contacts[i]);\n    }\n    contacts.length = 0;\n\n    // Transfer FrictionEquation from current list to the pool for reuse\n    var NoldFrictionEquations = this.frictionEquations.length;\n    for(i=0; i!==NoldFrictionEquations; i++){\n        frictionEquationPool.push(this.frictionEquations[i]);\n    }\n    this.frictionEquations.length = 0;\n\n    this.narrowphase.getContacts(\n        p1,\n        p2,\n        this,\n        contacts,\n        oldcontacts, // To be reused\n        this.frictionEquations,\n        frictionEquationPool\n    );\n\n    if(doProfiling){\n        profile.narrowphase = performance.now() - profilingStart;\n    }\n\n    // Loop over all collisions\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n\n    // Add all friction eqs\n    for (var i = 0; i < this.frictionEquations.length; i++) {\n        solver.addEquation(this.frictionEquations[i]);\n    }\n\n    var ncontacts = contacts.length;\n    for(var k=0; k!==ncontacts; k++){\n\n        // Current contact\n        var c = contacts[k];\n\n        // Get current collision indeces\n        var bi = c.bi,\n            bj = c.bj,\n            si = c.si,\n            sj = c.sj;\n\n        // Get collision properties\n        var cm;\n        if(bi.material && bj.material){\n            cm = this.getContactMaterial(bi.material,bj.material) || this.defaultContactMaterial;\n        } else {\n            cm = this.defaultContactMaterial;\n        }\n\n        // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n        var mu = cm.friction;\n        // c.restitution = cm.restitution;\n\n        // If friction or restitution were specified in the material, use them\n        if(bi.material && bj.material){\n            if(bi.material.friction >= 0 && bj.material.friction >= 0){\n                mu = bi.material.friction * bj.material.friction;\n            }\n\n            if(bi.material.restitution >= 0 && bj.material.restitution >= 0){\n                c.restitution = bi.material.restitution * bj.material.restitution;\n            }\n        }\n\n\t\t// c.setSpookParams(\n  //           cm.contactEquationStiffness,\n  //           cm.contactEquationRelaxation,\n  //           dt\n  //       );\n\n\t\tsolver.addEquation(c);\n\n\t\t// // Add friction constraint equation\n\t\t// if(mu > 0){\n\n\t\t// \t// Create 2 tangent equations\n\t\t// \tvar mug = mu * gnorm;\n\t\t// \tvar reducedMass = (bi.invMass + bj.invMass);\n\t\t// \tif(reducedMass > 0){\n\t\t// \t\treducedMass = 1/reducedMass;\n\t\t// \t}\n\t\t// \tvar pool = frictionEquationPool;\n\t\t// \tvar c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tvar c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n\t\t// \tthis.frictionEquations.push(c1, c2);\n\n\t\t// \tc1.bi = c2.bi = bi;\n\t\t// \tc1.bj = c2.bj = bj;\n\t\t// \tc1.minForce = c2.minForce = -mug*reducedMass;\n\t\t// \tc1.maxForce = c2.maxForce = mug*reducedMass;\n\n\t\t// \t// Copy over the relative vectors\n\t\t// \tc1.ri.copy(c.ri);\n\t\t// \tc1.rj.copy(c.rj);\n\t\t// \tc2.ri.copy(c.ri);\n\t\t// \tc2.rj.copy(c.rj);\n\n\t\t// \t// Construct tangents\n\t\t// \tc.ni.tangents(c1.t, c2.t);\n\n  //           // Set spook params\n  //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n  //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n\n  //           c1.enabled = c2.enabled = c.enabled;\n\n\t\t// \t// Add equations to solver\n\t\t// \tsolver.addEquation(c1);\n\t\t// \tsolver.addEquation(c2);\n\t\t// }\n\n        if( bi.allowSleep &&\n            bi.type === Body.DYNAMIC &&\n            bi.sleepState  === Body.SLEEPING &&\n            bj.sleepState  === Body.AWAKE &&\n            bj.type !== Body.STATIC\n        ){\n            var speedSquaredB = bj.velocity.norm2() + bj.angularVelocity.norm2();\n            var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit,2);\n            if(speedSquaredB >= speedLimitSquaredB*2){\n                bi._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        if( bj.allowSleep &&\n            bj.type === Body.DYNAMIC &&\n            bj.sleepState  === Body.SLEEPING &&\n            bi.sleepState  === Body.AWAKE &&\n            bi.type !== Body.STATIC\n        ){\n            var speedSquaredA = bi.velocity.norm2() + bi.angularVelocity.norm2();\n            var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit,2);\n            if(speedSquaredA >= speedLimitSquaredA*2){\n                bj._wakeUpAfterNarrowphase = true;\n            }\n        }\n\n        // Now we know that i and j are in contact. Set collision matrix state\n\t\tthis.collisionMatrix.set(bi, bj, true);\n\n        if (!this.collisionMatrixPrevious.get(bi, bj)) {\n            // First contact!\n            // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n            World_step_collideEvent.body = bj;\n            World_step_collideEvent.contact = c;\n            bi.dispatchEvent(World_step_collideEvent);\n\n            World_step_collideEvent.body = bi;\n            bj.dispatchEvent(World_step_collideEvent);\n        }\n    }\n    if(doProfiling){\n        profile.makeContactConstraints = performance.now() - profilingStart;\n        profilingStart = performance.now();\n    }\n\n    // Wake up bodies\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi._wakeUpAfterNarrowphase){\n            bi.wakeUp();\n            bi._wakeUpAfterNarrowphase = false;\n        }\n    }\n\n    // Add user-added constraints\n    var Nconstraints = constraints.length;\n    for(i=0; i!==Nconstraints; i++){\n        var c = constraints[i];\n        c.update();\n        for(var j=0, Neq=c.equations.length; j!==Neq; j++){\n            var eq = c.equations[j];\n            solver.addEquation(eq);\n        }\n    }\n\n    // Solve the constrained system\n    solver.solve(dt,this);\n\n    if(doProfiling){\n        profile.solve = performance.now() - profilingStart;\n    }\n\n    // Remove all contacts from solver\n    solver.removeAllEquations();\n\n    // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n    var pow = Math.pow;\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.type & DYNAMIC){ // Only for dynamic bodies\n            var ld = pow(1.0 - bi.linearDamping,dt);\n            var v = bi.velocity;\n            v.mult(ld,v);\n            var av = bi.angularVelocity;\n            if(av){\n                var ad = pow(1.0 - bi.angularDamping,dt);\n                av.mult(ad,av);\n            }\n        }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent);\n\n    // Invoke pre-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        if(bi.preStep){\n            bi.preStep.call(bi);\n        }\n    }\n\n    // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n    if(doProfiling){\n        profilingStart = performance.now();\n    }\n    var q = World_step_step_q;\n    var w = World_step_step_w;\n    var wq = World_step_step_wq;\n    var stepnumber = this.stepnumber;\n    var DYNAMIC_OR_KINEMATIC = Body.DYNAMIC | Body.KINEMATIC;\n    var quatNormalize = stepnumber % (this.quatNormalizeSkip+1) === 0;\n    var quatNormalizeFast = this.quatNormalizeFast;\n    var half_dt = dt * 0.5;\n    var PLANE = Shape.types.PLANE,\n        CONVEX = Shape.types.CONVEXPOLYHEDRON;\n\n    for(i=0; i!==N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n        if((b.type & DYNAMIC_OR_KINEMATIC) && b.sleepState !== Body.SLEEPING){ // Only for dynamic\n            var velo = b.velocity,\n                angularVelo = b.angularVelocity,\n                pos = b.position,\n                quat = b.quaternion,\n                invMass = b.invMass,\n                invInertia = b.invInertiaWorld;\n\n            velo.x += force.x * invMass * dt;\n            velo.y += force.y * invMass * dt;\n            velo.z += force.z * invMass * dt;\n\n            if(b.angularVelocity){\n                invInertia.vmult(tau,invI_tau_dt);\n                invI_tau_dt.mult(dt,invI_tau_dt);\n                invI_tau_dt.vadd(angularVelo,angularVelo);\n            }\n\n            // Use new velocity  - leap frog\n            pos.x += velo.x * dt;\n            pos.y += velo.y * dt;\n            pos.z += velo.z * dt;\n\n            if(b.angularVelocity){\n                w.set(angularVelo.x, angularVelo.y, angularVelo.z, 0);\n                w.mult(quat,wq);\n                quat.x += half_dt * wq.x;\n                quat.y += half_dt * wq.y;\n                quat.z += half_dt * wq.z;\n                quat.w += half_dt * wq.w;\n                if(quatNormalize){\n                    if(quatNormalizeFast){\n                        quat.normalizeFast();\n                    } else {\n                        quat.normalize();\n                    }\n                }\n            }\n\n            if(b.aabb){\n                b.aabbNeedsUpdate = true;\n            }\n\n            // Update world inertia\n            if(b.updateInertiaWorld){\n                b.updateInertiaWorld();\n            }\n        }\n    }\n    this.clearForces();\n\n    this.broadphase.dirty = true;\n\n    if(doProfiling){\n        profile.integrate = performance.now() - profilingStart;\n    }\n\n    // Update world time\n    this.time += dt;\n    this.stepnumber += 1;\n\n    this.dispatchEvent(World_step_postStepEvent);\n\n    // Invoke post-step callbacks\n    for(i=0; i!==N; i++){\n        var bi = bodies[i];\n        var postStep = bi.postStep;\n        if(postStep){\n            postStep.call(bi);\n        }\n    }\n\n    // Sleeping update\n    if(this.allowSleep){\n        for(i=0; i!==N; i++){\n            bodies[i].sleepTick(this.time);\n        }\n    }\n};\n\n/**\n * Sets all body forces in the world to zero.\n * @method clearForces\n */\nWorld.prototype.clearForces = function(){\n    var bodies = this.bodies;\n    var N = bodies.length;\n    for(var i=0; i !== N; i++){\n        var b = bodies[i],\n            force = b.force,\n            tau = b.torque;\n\n        b.force.set(0,0,0);\n        b.torque.set(0,0,0);\n    }\n};\n\n},{\"../collision/AABB\":3,\"../collision/ArrayCollisionMatrix\":4,\"../collision/NaiveBroadphase\":7,\"../collision/Ray\":9,\"../collision/RaycastResult\":10,\"../equations/ContactEquation\":19,\"../equations/FrictionEquation\":21,\"../material/ContactMaterial\":24,\"../material/Material\":25,\"../math/Quaternion\":28,\"../math/Vec3\":30,\"../objects/Body\":31,\"../shapes/Shape\":43,\"../solver/GSSolver\":46,\"../utils/EventTarget\":49,\"../utils/TupleDictionary\":52,\"../utils/Vec3Pool\":54,\"./Narrowphase\":55}]},{},[2])\n(2)\n});","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof globalThis === \"object\" ? globalThis :\n            typeof global === \"object\" ? global :\n                typeof self === \"object\" ? self :\n                    typeof this === \"object\" ? this :\n                        sloppyModeThis();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect !== \"undefined\") {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter, root);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                if (previous)\n                    previous(key, value);\n            };\n        }\n        function functionThis() {\n            try {\n                return Function(\"return this;\")();\n            }\n            catch (_) { }\n        }\n        function indirectEvalThis() {\n            try {\n                return (void 0, eval)(\"(function() { return this; })()\");\n            }\n            catch (_) { }\n        }\n        function sloppyModeThis() {\n            return functionThis() || indirectEvalThis();\n        }\n    })(function (exporter, root) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var _Map = typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        var registrySymbol = supportsSymbol ? Symbol.for(\"@reflect-metadata:registry\") : undefined;\n        var metadataRegistry = GetOrCreateMetadataRegistry();\n        var metadataProvider = CreateMetadataProvider(metadataRegistry);\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var provider = GetMetadataProvider(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return provider.OrdinaryDeleteMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return ToBoolean(provider.OrdinaryHasOwnMetadata(MetadataKey, O, P));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return;\n            return provider.OrdinaryGetOwnMetadata(MetadataKey, O, P);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ true);\n            provider.OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var provider = GetMetadataProvider(O, P, /*create*/ false);\n            if (!provider) {\n                return [];\n            }\n            return provider.OrdinaryOwnMetadataKeys(O, P);\n        }\n        // 6 ECMAScript Data Types and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        function SameValueZero(x, y) {\n            return x === y || x !== x && y !== y;\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // Global metadata registry\n        // - Allows `import \"reflect-metadata\"` and `import \"reflect-metadata/no-conflict\"` to interoperate.\n        // - Uses isolated metadata if `Reflect` is frozen before the registry can be installed.\n        /**\n         * Creates a registry used to allow multiple `reflect-metadata` providers.\n         */\n        function CreateMetadataRegistry() {\n            var fallback;\n            if (!IsUndefined(registrySymbol) &&\n                typeof root.Reflect !== \"undefined\" &&\n                !(registrySymbol in root.Reflect) &&\n                typeof root.Reflect.defineMetadata === \"function\") {\n                // interoperate with older version of `reflect-metadata` that did not support a registry.\n                fallback = CreateFallbackProvider(root.Reflect);\n            }\n            var first;\n            var second;\n            var rest;\n            var targetProviderMap = new _WeakMap();\n            var registry = {\n                registerProvider: registerProvider,\n                getProvider: getProvider,\n                setProvider: setProvider,\n            };\n            return registry;\n            function registerProvider(provider) {\n                if (!Object.isExtensible(registry)) {\n                    throw new Error(\"Cannot add provider to a frozen registry.\");\n                }\n                switch (true) {\n                    case fallback === provider: break;\n                    case IsUndefined(first):\n                        first = provider;\n                        break;\n                    case first === provider: break;\n                    case IsUndefined(second):\n                        second = provider;\n                        break;\n                    case second === provider: break;\n                    default:\n                        if (rest === undefined)\n                            rest = new _Set();\n                        rest.add(provider);\n                        break;\n                }\n            }\n            function getProviderNoCache(O, P) {\n                if (!IsUndefined(first)) {\n                    if (first.isProviderFor(O, P))\n                        return first;\n                    if (!IsUndefined(second)) {\n                        if (second.isProviderFor(O, P))\n                            return first;\n                        if (!IsUndefined(rest)) {\n                            var iterator = GetIterator(rest);\n                            while (true) {\n                                var next = IteratorStep(iterator);\n                                if (!next) {\n                                    return undefined;\n                                }\n                                var provider = IteratorValue(next);\n                                if (provider.isProviderFor(O, P)) {\n                                    IteratorClose(iterator);\n                                    return provider;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!IsUndefined(fallback) && fallback.isProviderFor(O, P)) {\n                    return fallback;\n                }\n                return undefined;\n            }\n            function getProvider(O, P) {\n                var providerMap = targetProviderMap.get(O);\n                var provider;\n                if (!IsUndefined(providerMap)) {\n                    provider = providerMap.get(P);\n                }\n                if (!IsUndefined(provider)) {\n                    return provider;\n                }\n                provider = getProviderNoCache(O, P);\n                if (!IsUndefined(provider)) {\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return provider;\n            }\n            function hasProvider(provider) {\n                if (IsUndefined(provider))\n                    throw new TypeError();\n                return first === provider || second === provider || !IsUndefined(rest) && rest.has(provider);\n            }\n            function setProvider(O, P, provider) {\n                if (!hasProvider(provider)) {\n                    throw new Error(\"Metadata provider not registered.\");\n                }\n                var existingProvider = getProvider(O, P);\n                if (existingProvider !== provider) {\n                    if (!IsUndefined(existingProvider)) {\n                        return false;\n                    }\n                    var providerMap = targetProviderMap.get(O);\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return true;\n            }\n        }\n        /**\n         * Gets or creates the shared registry of metadata providers.\n         */\n        function GetOrCreateMetadataRegistry() {\n            var metadataRegistry;\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                metadataRegistry = root.Reflect[registrySymbol];\n            }\n            if (IsUndefined(metadataRegistry)) {\n                metadataRegistry = CreateMetadataRegistry();\n            }\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                Object.defineProperty(root.Reflect, registrySymbol, {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: metadataRegistry\n                });\n            }\n            return metadataRegistry;\n        }\n        function CreateMetadataProvider(registry) {\n            // [[Metadata]] internal slot\n            // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n            var metadata = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var targetMetadata = metadata.get(O);\n                    if (IsUndefined(targetMetadata))\n                        return false;\n                    return targetMetadata.has(P);\n                },\n                OrdinaryDefineOwnMetadata: OrdinaryDefineOwnMetadata,\n                OrdinaryHasOwnMetadata: OrdinaryHasOwnMetadata,\n                OrdinaryGetOwnMetadata: OrdinaryGetOwnMetadata,\n                OrdinaryOwnMetadataKeys: OrdinaryOwnMetadataKeys,\n                OrdinaryDeleteMetadata: OrdinaryDeleteMetadata,\n            };\n            metadataRegistry.registerProvider(provider);\n            return provider;\n            function GetOrCreateMetadataMap(O, P, Create) {\n                var targetMetadata = metadata.get(O);\n                var createdTargetMetadata = false;\n                if (IsUndefined(targetMetadata)) {\n                    if (!Create)\n                        return undefined;\n                    targetMetadata = new _Map();\n                    metadata.set(O, targetMetadata);\n                    createdTargetMetadata = true;\n                }\n                var metadataMap = targetMetadata.get(P);\n                if (IsUndefined(metadataMap)) {\n                    if (!Create)\n                        return undefined;\n                    metadataMap = new _Map();\n                    targetMetadata.set(P, metadataMap);\n                    if (!registry.setProvider(O, P, provider)) {\n                        targetMetadata.delete(P);\n                        if (createdTargetMetadata) {\n                            metadata.delete(O);\n                        }\n                        throw new Error(\"Wrong provider for target.\");\n                    }\n                }\n                return metadataMap;\n            }\n            // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n            function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                return ToBoolean(metadataMap.has(MetadataKey));\n            }\n            // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n            function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return undefined;\n                return metadataMap.get(MetadataKey);\n            }\n            // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n            function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n                metadataMap.set(MetadataKey, MetadataValue);\n            }\n            // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n            function OrdinaryOwnMetadataKeys(O, P) {\n                var keys = [];\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return keys;\n                var keysObj = metadataMap.keys();\n                var iterator = GetIterator(keysObj);\n                var k = 0;\n                while (true) {\n                    var next = IteratorStep(iterator);\n                    if (!next) {\n                        keys.length = k;\n                        return keys;\n                    }\n                    var nextValue = IteratorValue(next);\n                    try {\n                        keys[k] = nextValue;\n                    }\n                    catch (e) {\n                        try {\n                            IteratorClose(iterator);\n                        }\n                        finally {\n                            throw e;\n                        }\n                    }\n                    k++;\n                }\n            }\n            function OrdinaryDeleteMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                if (!metadataMap.delete(MetadataKey))\n                    return false;\n                if (metadataMap.size === 0) {\n                    var targetMetadata = metadata.get(O);\n                    if (!IsUndefined(targetMetadata)) {\n                        targetMetadata.delete(P);\n                        if (targetMetadata.size === 0) {\n                            metadata.delete(targetMetadata);\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        function CreateFallbackProvider(reflect) {\n            var defineMetadata = reflect.defineMetadata, hasOwnMetadata = reflect.hasOwnMetadata, getOwnMetadata = reflect.getOwnMetadata, getOwnMetadataKeys = reflect.getOwnMetadataKeys, deleteMetadata = reflect.deleteMetadata;\n            var metadataOwner = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var metadataPropertySet = metadataOwner.get(O);\n                    if (!IsUndefined(metadataPropertySet) && metadataPropertySet.has(P)) {\n                        return true;\n                    }\n                    if (getOwnMetadataKeys(O, P).length) {\n                        if (IsUndefined(metadataPropertySet)) {\n                            metadataPropertySet = new _Set();\n                            metadataOwner.set(O, metadataPropertySet);\n                        }\n                        metadataPropertySet.add(P);\n                        return true;\n                    }\n                    return false;\n                },\n                OrdinaryDefineOwnMetadata: defineMetadata,\n                OrdinaryHasOwnMetadata: hasOwnMetadata,\n                OrdinaryGetOwnMetadata: getOwnMetadata,\n                OrdinaryOwnMetadataKeys: getOwnMetadataKeys,\n                OrdinaryDeleteMetadata: deleteMetadata,\n            };\n            return provider;\n        }\n        /**\n         * Gets the metadata provider for an object. If the object has no metadata provider and this is for a create operation,\n         * then this module's metadata provider is assigned to the object.\n         */\n        function GetMetadataProvider(O, P, Create) {\n            var registeredProvider = metadataRegistry.getProvider(O, P);\n            if (!IsUndefined(registeredProvider)) {\n                return registeredProvider;\n            }\n            if (Create) {\n                if (metadataRegistry.setProvider(O, P, metadataProvider)) {\n                    return metadataProvider;\n                }\n                throw new Error(\"Illegal state.\");\n            }\n            return undefined;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            var Map = /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (SameValueZero(key, this._cacheKey)) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (!SameValueZero(this._cacheKey, key)) {\n                        this._cacheIndex = -1;\n                        for (var i = 0; i < this._keys.length; i++) {\n                            if (SameValueZero(this._keys[i], key)) {\n                                this._cacheIndex = i;\n                                break;\n                            }\n                        }\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            return Map;\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            var Set = /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.keys(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n            return Set;\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    var array = new Uint8Array(size);\n                    if (typeof crypto !== \"undefined\") {\n                        crypto.getRandomValues(array);\n                    }\n                    else if (typeof msCrypto !== \"undefined\") {\n                        msCrypto.getRandomValues(array);\n                    }\n                    else {\n                        FillRandomBytes(array, size);\n                    }\n                    return array;\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","import { Engine } from \"../Core/Engine\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Collider } from \"./Collider\";\nimport { MeshRenderer } from \"./MeshRenderer\";\n\nexport interface BoxColliderData {\n    size: Vector3;\n}\n\nexport class BoxCollider extends Collider {\n    private _size: Vector3;\n\n    public get size(): Vector3 {\n        return this._size?.clone();\n    }\n\n    public set size(newSize: Vector3) {\n        if (this._size !== newSize) {\n            this._size = newSize;\n            // 通常需要重新初始化碰撞体\n            Engine.physics.RebuildColliders(this);\n        }\n    }\n\n    public getColliderData(): BoxColliderData {\n        if (this.center == null || this.size == null) {\n            this.updateSizeFromMeshBounds();\n        }\n\n        const size = this.size.multiply(this.transform.worldScale);\n\n        // 不允许为0的尺寸，否则无法正常碰撞，例如高度为0的平面，高度设置成一个极低的数值\n        if (size.x <= 0) size.x = 0.01;\n        if (size.y <= 0) size.y = 0.01;\n        if (size.z <= 0) size.z = 0.01;\n\n        return {\n            size: size,\n        };\n    }\n\n    private updateSizeFromMeshBounds() {\n        // 获取MeshRenderer组件\n        const meshRenderer = this.gameObject.getComponent(MeshRenderer);\n        // 获取网格包围盒\n        const bounds = meshRenderer?.mesh?.bounds[0];\n\n        if (bounds) {\n            // 如果有包围盒数据，使用包围盒的尺寸和中心点\n            const x = bounds.halfExtents.x * 2;\n            const y = bounds.halfExtents.y * 2;\n            const z = bounds.halfExtents.z * 2;\n            this.size = new Vector3(x, y, z);\n            this.center = bounds.center;\n        } else {\n            // 如果没有包围盒数据，使用默认值\n            this.size = Vector3.ONE;\n            this.center = Vector3.ZERO;\n        }\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Component } from \"./Component\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Time } from \"../Core/Time\";\nimport { DisallowMultipleComponent } from \"../Core/Decorators\";\nimport { EngineConfig } from \"../Core/Setting\";\nimport { Texture } from \"../Resources/Texture\";\nimport { Plane } from \"../Math/Panel\";\n\nexport enum CameraClearFlags {\n    None = 0,\n    Skybox = 1,\n    Color = 2,\n    DepthOnly = 3,\n}\n\nexport enum Projection {\n    Perspective = 0,\n    Orthographic = 1,\n}\n\nexport enum RenderingPath {\n    VertexLit = 0,\n    Forward = 1,\n    Deferred = 2,\n}\n\n@DisallowMultipleComponent\nexport class Camera extends Component {\n    public static mainCamera: Camera;\n    public static cameras: Array<Camera> = new Array<Camera>();\n\n    public targetTexture: Texture;\n    public backGroundColor: Color = Color.GRAY;\n    public clearFlags: CameraClearFlags = CameraClearFlags.Skybox;\n    private _nearClip: number = 1;\n    private _farClip: number = 128;\n    private _fov: number = 60;\n    public depth: number = -1;\n    private _viewPort: Vector4 = new Vector4(0, 0, 1, 1);\n    private _projection: Projection = Projection.Perspective;\n    private _orthographicSize: number = 5;\n    public renderingPath: RenderingPath = RenderingPath.Forward;\n    public occlusionCulling: boolean = false;\n\n    // 缓存矩阵和视锥体平面\n    private _viewMatrix: Matrix4x4 | null = null;\n    private _projectionMatrix: Matrix4x4 | null = null;\n    private _frustumPlanes: Plane[] | null = null;\n\n    // 脏标记\n    private _viewMatrixDirty: boolean = true;\n    private _projectionMatrixDirty: boolean = true;\n    private _frustumPlanesDirty: boolean = true;\n\n    public get aspect(): number {\n        const v = this.viewPort;\n        return (v.z * EngineConfig.canvasWidth) / (v.w * EngineConfig.canvasHeight);\n    }\n\n    public get nearClip(): number {\n        return this._nearClip;\n    }\n\n    public set nearClip(value: number) {\n        if (this._nearClip !== value) {\n            this._nearClip = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get farClip(): number {\n        return this._farClip;\n    }\n\n    public set farClip(value: number) {\n        if (this._farClip !== value) {\n            this._farClip = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get fov(): number {\n        return this._fov;\n    }\n\n    public set fov(value: number) {\n        if (this._fov !== value) {\n            this._fov = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get viewPort(): Vector4 {\n        return this._viewPort;\n    }\n\n    public set viewPort(value: Vector4) {\n        if (!this._viewPort.equals(value)) {\n            this._viewPort = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get projection(): Projection {\n        return this._projection;\n    }\n\n    public set projection(value: Projection) {\n        if (this._projection !== value) {\n            this._projection = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public get orthographicSize(): number {\n        return this._orthographicSize;\n    }\n\n    public set orthographicSize(value: number) {\n        if (this._orthographicSize !== value) {\n            this._orthographicSize = value;\n            this._projectionMatrixDirty = true;\n            this._frustumPlanesDirty = true;\n        }\n    }\n\n    public onAwake(): void {\n        if (Camera.mainCamera == null) {\n            Camera.mainCamera = this;\n        }\n        Camera.cameras.push(this);\n    }\n\n    private timer: number = 0;\n    public counter: number = 0;\n    public onUpdate(): void {\n        if (Time.time - this.timer >= 1) {\n            this.timer = Time.time;\n            this.counter++;\n        }\n    }\n\n    public onDestroy() {\n        const index = Camera.cameras.indexOf(this, 0);\n        if (index > -1) {\n            Camera.cameras.splice(index, 1);\n        }\n\n        if (Camera.mainCamera === this) {\n            Camera.mainCamera = Camera.cameras.length > 0 ? Camera.cameras[0] : (undefined as unknown as Camera);\n        }\n    }\n\n    public getViewMatrix(): Matrix4x4 {\n        if (this._viewMatrixDirty || !this._viewMatrix) {\n            // 1. 获取相机的世界变换矩阵\n            const worldMatrix = this.transform.localToWorldMatrix;\n            // 2. 计算逆矩阵（世界空间 → 视图空间）\n            this._viewMatrix = worldMatrix.invert();\n            this._viewMatrixDirty = false;\n        }\n        // 返回矩阵的副本，防止外部修改\n        return this._viewMatrix!.clone();\n    }\n\n    public getProjectionMatrix(): Matrix4x4 {\n        if (this._projectionMatrixDirty || !this._projectionMatrix) {\n            if (this.projection === Projection.Orthographic) {\n                this._projectionMatrix = Matrix4x4.orthographic(\n                    -this.orthographicSize,\n                    this.orthographicSize,\n                    -this.orthographicSize * (this.aspect ? 1 / this.aspect : 1), // 修复正交投影宽高比\n                    this.orthographicSize * (this.aspect ? 1 / this.aspect : 1),\n                    this.nearClip,\n                    this.farClip\n                );\n            } else {\n                this._projectionMatrix = Matrix4x4.perspective(\n                    this.fov,\n                    this.aspect,\n                    this.nearClip,\n                    this.farClip\n                );\n            }\n            this._projectionMatrixDirty = false;\n        }\n        // 返回矩阵的副本，防止外部修改\n        return this._projectionMatrix.clone();\n    }\n\n    // 当Transform发生变化时，需要更新视图矩阵\n    public onTransformChanged(): void {\n        this._viewMatrixDirty = true;\n        this._frustumPlanesDirty = true;\n    }\n\n    /**\n     * 获取视锥体的6个平面（左、右、下、上、近、远）\n     * @returns 归一化后的平面数组，顺序为 [左平面, 右平面, 下平面, 上平面, 近平面, 远平面]\n     */\n    public getFrustumPlanes(): Plane[] {\n        // 若平面未过期且已缓存，直接返回副本（避免外部修改）\n        if (!this._frustumPlanesDirty && this._frustumPlanes) {\n            return this._frustumPlanes;\n        }\n\n        // 1. 获取视图矩阵和投影矩阵，计算复合矩阵（投影 × 视图）\n        const viewMatrix = this.getViewMatrix();\n        const projMatrix = this.getProjectionMatrix();\n        const viewProjMatrix = projMatrix.multiply(viewMatrix); // 复合矩阵：世界空间 → 裁剪空间\n        const m = viewProjMatrix.matrix;\n\n        // 2. 推导6个视锥体平面（公式来自图形学标准，适配列主序矩阵）\n        const planes: Plane[] = [\n            // 左平面\n            new Plane(m[3][0] + m[0][0], m[3][1] + m[0][1], m[3][2] + m[0][2], m[3][3] + m[0][3]),\n            // 右平面\n            new Plane(m[3][0] - m[0][0], m[3][1] - m[0][1], m[3][2] - m[0][2], m[3][3] - m[0][3]),\n            // 下平面\n            new Plane(m[3][0] + m[1][0], m[3][1] + m[1][1], m[3][2] + m[1][2], m[3][3] + m[1][3]),\n            // 上平面\n            new Plane(m[3][0] - m[1][0], m[3][1] - m[1][1], m[3][2] - m[1][2], m[3][3] - m[1][3]),\n            // 近平面\n            new Plane(m[3][0] + m[2][0], m[3][1] + m[2][1], m[3][2] + m[2][2], m[3][3] + m[2][3]),\n            // 远平面\n            new Plane(m[3][0] - m[2][0], m[3][1] - m[2][1], m[3][2] - m[2][2], m[3][3] - m[2][3])\n        ];\n\n        // 3. 归一化所有平面（确保法向量长度为1，保证后续距离计算精度）\n        planes.forEach(plane => plane.normalize());\n\n        // 4. 缓存平面并标记为未过期\n        this._frustumPlanes = planes;\n        this._frustumPlanesDirty = false;\n\n        // 5. 返回平面副本（避免外部修改缓存的内部数据）\n        return planes;\n    }\n\n    /**\n     * 判断世界空间中的点是否在视锥体内\n     * @param worldPoint 待判断的世界空间点\n     * @returns true：点在视锥体内；false：点在视锥体外\n     */\n    public isPointInFrustum(worldPoint: Vector3): boolean {\n        // 1. 获取视锥体6个平面（若未缓存则自动计算，已处理归一化）\n        const frustumPlanes = this.getFrustumPlanes();\n\n        // 2. 遍历所有平面，判断点是否在平面外侧\n        for (const plane of frustumPlanes) {\n            // 计算点到平面的距离（平面已归一化，距离公式简化为 Ax+By+Cz+D）\n            // 视锥体平面的法线方向遵循 “指向视锥体内部”，若点到平面的距离 > 0，则点在平面内侧（视锥体内部）\n            const distance = plane.distanceToPoint(worldPoint);\n\n            // 若点到任意平面的距离 < 0（严格外侧，考虑浮点误差用-1e-6容差），则点在视锥体外\n            if (distance < -1e-6) {\n                return false;\n            }\n        }\n\n        // 3. 点到所有平面的距离 ≥ -1e-6，判定在视锥体内\n        return true;\n    }\n}","import { Engine } from \"../Core/Engine\";\nimport { Bounds } from \"../Math/Bounds\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { PhysicMaterial } from \"../Physics/PhysicMaterial\";\nimport { Component } from \"./Component\";\nimport { Rigidbody } from \"./RigidBody\";\n\nexport abstract class Collider extends Component {\n    public attachedRigidbody: Rigidbody | null;\n    public bounds: Bounds;\n    public isTrigger: Boolean;\n    public physicMaterial: PhysicMaterial;\n\n    private _center: Vector3 = Vector3.ZERO;\n\n    public get center(): Vector3 {\n        return this._center.clone();\n    }\n\n    public set center(newCenter: Vector3) {\n        if (!this._center.equals(newCenter)) {\n            this._center = newCenter.clone();\n            // 通常需要重新初始化碰撞体\n            Engine.physics.RebuildColliders(this);\n        }\n    }\n\n    private _lastScale: Vector3 = Vector3.ZERO;\n\n    public abstract getColliderData(): any;\n\n    public onEnable(): void {\n        // if (this.attachedRigidbody == null || this.connonShape == null) {\n        //     this.attachedRigidbody = this.gameObject.getComponetInParent(Rigidbody);\n        //     if (this.attachedRigidbody == null) return;\n        //     this.connonShape = this.createCollider(this.attachedRigidbody);\n        // }\n    }\n\n    public onTransformChanged(): void {\n        if (this.transform.scale.equals(this._lastScale)) return;\n        this._lastScale = this.transform.scale;\n        Engine.physics.RebuildColliders(this);\n    }\n\n    public onDestroy(): void {\n        Engine.physics.RemoveCollider(this);\n    }\n}","import { DISALLOW_COMPONENTS_KEY, DISALLOW_MULTIPLE_COMPONENT_KEY, REQUIRED_COMPONENTS_KEY } from \"../Core/Decorators\";\nimport { GameObject } from \"../Core/GameObject\";\nimport { Transform } from \"../Core/Transform\";\nimport { UObject } from \"../Core/UObject\";\n\nexport abstract class Component extends UObject {\n    public readonly gameObject: GameObject;\n\n    public get transform(): Transform {\n        return this.gameObject.transform;\n    }\n\n    private _enabled: boolean = true;\n    public get enabled(): boolean {\n        return this._enabled;\n    }\n    public set enabled(value: boolean) {\n        this._enabled = value;\n        if (value) {\n            this.onEnable();\n        } else {\n            this.onDisable();\n        }\n    }\n\n    constructor(gameObject: GameObject) {\n        super();\n        this.gameObject = gameObject;\n        this.checkRequiredComponents();\n        this.checkComponentUniqueness();\n        this.checkComponentCompatibility();\n        this.onAwake();\n    }\n\n    // 生命周期方法\n    // 当组件被创建时调用\n    public onAwake(): void { }\n\n    // 在启用组件的第一帧调用\n    public onStart(): void { }\n\n    // 每帧更新前调用\n    public onUpdate(): void { }\n\n    // 每帧更新后调用\n    //public lateUpdate(): void {}\n\n    // 当组件被启用时调用\n    public onEnable(): void { }\n\n    // 当组件被禁用时调用\n    public onDisable(): void { }\n\n    // 当组件被销毁时调用\n    public onDestroy(): void { }\n\n    // 绘制调试信息\n    // public onDrawGizmos(): void { }\n\n    /**\n     * 检查通过@RequireComponent装饰器声明的依赖组件是否存在\n     */\n    public checkRequiredComponents(): Boolean {\n        // 1. 获取通过装饰器声明的依赖组件类型数组\n        const requiredComponents: (new (gameObject: GameObject) => Component)[] | undefined =\n            Reflect.getMetadata(REQUIRED_COMPONENTS_KEY, this.constructor);\n\n        // 如果没有声明任何依赖，则直接返回\n        if (!requiredComponents || requiredComponents.length === 0) {\n            return true;\n        }\n\n        // 2. 遍历所有必需的组件类型\n        for (const compType of requiredComponents) {\n            // 跳过未定义的组件类型\n            if (compType == null) {\n                continue;\n            }\n\n            // 3. 检查该GameObject上是否已挂载所需的组件类型\n            const existingComponent = this.gameObject.getComponent(compType);\n            if (existingComponent == null) {\n                // 4. 如果依赖组件不存在，输出错误信息\n                console.error(`Component ${this.constructor.name} requires a ${compType.name} on the same GameObject.`);\n\n                // 5. 自动添加缺失的组件（使用类型断言确保类型安全）\n                try {\n                    this.gameObject.addComponent(compType as new (gameObject: GameObject) => Component);\n                    console.log(`Auto-added missing component: ${compType.name}`);\n                } catch (error) {\n                    console.error(`Failed to auto-add component ${compType.name}:`, error);\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 检查是否存在多个不允许同时存在的组件\n     */\n    public checkComponentUniqueness(): Boolean {\n        const componentType = this.constructor;\n        const isDisallowed = Reflect.getMetadata(DISALLOW_MULTIPLE_COMPONENT_KEY, componentType);\n\n        if (isDisallowed) {\n            // 查找同类型组件\n            const sameTypeComponents = this.gameObject.getAllComponents().filter(\n                comp => comp instanceof componentType && comp !== this\n            );\n\n            if (sameTypeComponents.length > 0) {\n                console.error(`Component ${componentType.name} is marked with @DisallowMultipleComponent, but multiple instances were found. This may cause unexpected behavior.`);\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 检查组件共存限制\n     */\n    public checkComponentCompatibility(): Boolean {\n        // 获取当前组件类上通过@DisallowComponent声明的禁止共存组件类型\n        const disallowedComponents: Function[] | undefined =\n            Reflect.getMetadata(DISALLOW_COMPONENTS_KEY, this.constructor);\n\n        if (!disallowedComponents || disallowedComponents.length === 0) {\n            return true; // 如果没有声明任何禁止共存的组件，直接返回\n        }\n\n        // 检查所有被禁止的组件类型\n        for (const disallowedType of disallowedComponents) {\n            if (disallowedType == null) continue;\n\n            // 检查是否存在被禁止的组件\n            const foundComponent = this.gameObject.getComponent(disallowedType);\n            if (foundComponent) {\n                // 如果找到被禁止的组件，抛出错误或警告\n                console.error(\n                    `Component ${this.constructor.name} cannot coexist with ${disallowedType.name} ` +\n                    `on the same GameObject. Please remove one of them.`\n                );\n\n                // 自动移除冲突组件\n                this.gameObject.removeComponent(disallowedType);\n\n                // 或者抛出异常阻止游戏运行\n                // throw new Error(`Component compatibility error: ${this.constructor.name} vs ${disallowedType.name}`);\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Gizmo } from \"../Utils/Gizmo\";\nimport { Component } from \"./Component\";\n\nexport enum LightType {\n    Directional = 0,\n    Point = 1,\n    Spot = 2,\n}\n\nexport enum ShadowType {\n    None = 0,\n    Hard = 1,\n    Soft = 2,\n}\n\nexport class Light extends Component {\n    public static sunLight: Light;\n    public type: LightType = LightType.Directional;\n    public color: Color = Color.WHITE;\n    public intensity: number = 1;\n    public shadowType: ShadowType = ShadowType.None;\n\n    public onDrawGizmos(): void {\n        Gizmo.matrix = this.transform.localToWorldMatrix;\n        Gizmo.DrawAxis(Vector3.ZERO, 0.1);\n        Gizmo.color = Color.WHITE;\n        Gizmo.DrawCube(Vector3.ZERO, new Vector3(0.1, 0.1, 0.5));\n        Gizmo.color = Color.RED;\n        Gizmo.DrawCube(new Vector3(0, 0, 0.3), Vector3.ONE.multiplyScalar(0.1));\n    }\n}","import { Renderer } from \"./Renderer\";\nimport { Mesh } from \"../Resources/Mesh\";\nimport { Gizmo } from \"../Utils/Gizmo\";\nimport { Color } from \"../Math/Color\";\nimport { Vector3 } from \"../Math/Vector3\";\n\nexport class MeshRenderer extends Renderer {\n    public mesh: Mesh | null = null;\n\n    public render(): void {\n    }\n\n    public onDestroy(): void {\n        super.onDestroy();\n        // 清理资源\n        this.mesh = null;\n    }\n\n    // public onDrawGizmos(): void {\n    //     Gizmo.matrix = this.transform.localToWorldMatrix;\n    //     Gizmo.DrawAxis(Vector3.ZERO, 0.1);\n    // }\n}","import { Component } from \"./Component\";\nimport { Material } from \"../Resources/Material\";\nimport { Bounds } from \"../Math/Bounds\";\nimport { DisallowMultipleComponent } from \"../Core/Decorators\";\n\n@DisallowMultipleComponent\nexport abstract class Renderer extends Component {\n    private _bounds: Bounds = new Bounds();\n    private _material: Material = new Material();\n    private _sortingLayerID: number = 0;\n    private _sortingOrder: number = 0;\n    private _castShadows: boolean = true;\n    private _receiveShadows: boolean = true;\n\n    // 材质属性\n    public get material(): Material {\n        return this._material;\n    }\n\n    public set material(value: Material) {\n        this._material = value;\n    }\n\n    // 排序层ID\n    public get sortingLayerID(): number {\n        return this._sortingLayerID;\n    }\n\n    public set sortingLayerID(value: number) {\n        this._sortingLayerID = value;\n    }\n\n    // 排序顺序\n    public get sortingOrder(): number {\n        return this._sortingOrder;\n    }\n\n    public set sortingOrder(value: number) {\n        this._sortingOrder = value;\n    }\n\n    // 是否投射阴影\n    public get castShadows(): boolean {\n        return this._castShadows;\n    }\n\n    public set castShadows(value: boolean) {\n        this._castShadows = value;\n    }\n\n    // 是否接收阴影\n    public get receiveShadows(): boolean {\n        return this._receiveShadows;\n    }\n\n    public set receiveShadows(value: boolean) {\n        this._receiveShadows = value;\n    }\n\n    // 是否应该被渲染\n    public get shouldRender(): boolean {\n        return this.enabled && this.gameObject.active;\n    }\n\n    // 渲染方法，子类需要实现\n    public abstract render(): void;\n\n    public onDestroy(): void {\n    }\n}","import { Engine } from \"../Core/Engine\";\nimport { LayerMask } from \"../Core/LayerMask\";\nimport { UObject } from \"../Core/UObject\";\nimport { Time } from \"../Core/Time\";\nimport { Quaternion } from \"../Math/Quaternion\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { RaycastHit } from \"../Physics/RaycastHit\";\nimport { Collider } from \"./Collider\";\nimport { Component } from \"./Component\";\nimport { DisallowMultipleComponent } from \"../Core/Decorators\";\n\nexport enum ForceMode {\n    Force,\n    Acceleration,\n    Impulse,\n    VelocityChange\n}\n\nexport enum RigidbodyInterpolation {\n    None,\n    Interpolate,\n    Extrapolate\n}\n\nexport enum CollisionDetectionMode {\n    Discrete,\n    Continuous,\n    ContinuousDynamic,\n    ContinuousSpeculative\n}\n\nexport enum RigidbodyConstraints {\n    None = 0,\n    FreezePositionX = 1,\n    FreezePositionY = 2,\n    FreezePositionZ = 4,\n    FreezeRotationX = 8,\n    FreezeRotationY = 16,\n    FreezeRotationZ = 32,\n    FreezePosition = FreezePositionX | FreezePositionY | FreezePositionZ,\n    FreezeRotation = FreezeRotationX | FreezeRotationY | FreezeRotationZ,\n    FreezeAll = FreezePosition | FreezeRotation\n}\n\nexport enum QueryTriggerInteraction {\n    UseGlobal,\n    Ignore,\n    Collide\n}\n\n@DisallowMultipleComponent\nexport class Rigidbody extends Component {\n    public velocity: Vector3;\n    public angularVelocity: Vector3;\n    public drag: number;\n    public angularDrag: number;\n    public mass: number = 1;\n    public useGravity: boolean;\n    public maxDepenetrationVelocity: number;\n    public isKinematic: boolean = false;\n    public freezeRotation: boolean;\n    public constraints: RigidbodyConstraints;\n    public collisionDetectionMode: CollisionDetectionMode;\n    public automaticCenterOfMass: boolean;\n    public centerOfMass: Vector3;\n    public automaticInertiaTensor: boolean;\n    public inertiaTensorRotation: Quaternion;\n    public inertiaTensor: Vector3;\n    public detectCollisions: boolean;\n    public position: Vector3;\n    public rotation: Quaternion;\n    public interpolation: RigidbodyInterpolation;\n    public solverIterations: number;\n    public sleepThreshold: number;\n    public maxAngularVelocity: number;\n    public maxLinearVelocity: number;\n    public solverVelocityIterations: number;\n    public excludeLayers: LayerMask;\n    public includeLayers: LayerMask;\n\n\n    public onStart(): void {\n        const parentRigidbody = this.gameObject.getComponetInParent(Rigidbody);\n        if (parentRigidbody && parentRigidbody != this) {\n            console.warn(\"一个节点层级只能拥有一个Rigidbody组件\");\n            UObject.Destroy(this);\n            return;\n        }\n\n        const childRigidbodies = this.gameObject.getComponentsInChildren(Rigidbody);\n        for (const childRigidbody of childRigidbodies) {\n            if (childRigidbody == this) continue;\n            console.warn(\"一个节点层级只能拥有一个Rigidbody组件\");\n            UObject.Destroy(childRigidbody);\n        }\n\n        Engine.physics.CreateRigidbody(this);\n\n        const colliders = this.gameObject.getComponentsInChildren(Collider);\n        for (const collider of colliders) {\n            collider.attachedRigidbody = this;\n            Engine.physics.CreateCollider(collider);\n        }\n    }\n\n    public onUpdate(): void {\n    }\n\n    public onDestroy(): void {\n        Engine.physics.RemoveRigidbody(this);\n    }\n\n    // 只读属性\n    public get worldCenterOfMass(): Vector3 {\n        // 实现获取世界坐标系下的质心\n        return new Vector3();\n    }\n\n    // 方法\n    public setDensity(density: number): void {\n        // 根据密度设置质量\n    }\n\n    public movePosition(position: Vector3): void {\n        // 移动刚体到指定位置\n    }\n\n    public moveRotation(rotation: Quaternion): void {\n        // 旋转刚体到指定方向\n    }\n\n    public move(position: Vector3, rotation: Quaternion): void {\n        // 同时移动和旋转刚体\n    }\n\n    public sleep(): void {\n        // 让刚体进入睡眠状态\n    }\n\n    public isSleeping(): boolean {\n        // 检查刚体是否在睡眠状态\n        return false;\n    }\n\n    public wakeUp(): void {\n        // 唤醒刚体\n    }\n\n    public resetCenterOfMass(): void {\n        // 重置质心\n    }\n\n    public resetInertiaTensor(): void {\n        // 重置惯性张量\n    }\n\n    public getRelativePointVelocity(relativePoint: Vector3): Vector3 {\n        // 获取相对点的速度\n        return new Vector3();\n    }\n\n    public getPointVelocity(worldPoint: Vector3): Vector3 {\n        // 获取世界点的速度\n        return new Vector3();\n    }\n\n    public getAccumulatedForce(step: number = Time.fixedDeltaTime): Vector3 {\n        // 获取累积的力\n        return new Vector3();\n    }\n\n    public getAccumulatedTorque(step: number = Time.fixedDeltaTime): Vector3 {\n        // 获取累积的扭矩\n        return new Vector3();\n    }\n\n    // 力的添加方法\n    public addForce(force: Vector3, mode: ForceMode): void;\n    public addForce(x: number, y: number, z: number, mode: ForceMode): void;\n    public addForce(forceOrX: Vector3 | number, modeOrY?: ForceMode | number, z?: number, mode?: ForceMode): void {\n    }\n\n    public addRelativeForce(force: Vector3, mode: ForceMode): void;\n    public addRelativeForce(x: number, y: number, z: number, mode: ForceMode): void;\n    public addRelativeForce(forceOrX: Vector3 | number, modeOrY?: ForceMode | number, z?: number, mode?: ForceMode): void {\n        // 实现添加相对力的重载\n    }\n\n    public addTorque(torque: Vector3, mode: ForceMode): void;\n    public addTorque(x: number, y: number, z: number, mode: ForceMode): void;\n    public addTorque(torqueOrX: Vector3 | number, modeOrY?: ForceMode | number, z?: number, mode?: ForceMode): void {\n        // 实现添加扭矩的重载\n    }\n\n    public addRelativeTorque(torque: Vector3, mode: ForceMode): void;\n    public addRelativeTorque(x: number, y: number, z: number, mode: ForceMode): void;\n    public addRelativeTorque(torqueOrX: Vector3 | number, modeOrY?: ForceMode | number, z?: number, mode?: ForceMode): void {\n        // 实现添加相对扭矩的重载\n    }\n\n    public addForceAtPosition(force: Vector3, position: Vector3, mode: ForceMode = ForceMode.Force): void {\n        // 在指定位置添加力\n    }\n\n    public addExplosionForce(explosionForce: number, explosionPosition: Vector3, explosionRadius: number, upwardsModifier: number = 0, mode: ForceMode = ForceMode.Force): void {\n        // 添加爆炸力\n    }\n\n    public closestPointOnBounds(position: Vector3): Vector3 {\n        // 获取边界上最近的点\n        return new Vector3();\n    }\n\n    public sweepTest(direction: Vector3, hitInfo: RaycastHit, maxDistance: number = Number.POSITIVE_INFINITY, queryTriggerInteraction: QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal): boolean {\n        // 扫描测试\n        return false;\n    }\n\n    public sweepTestAll(direction: Vector3, maxDistance: number = Number.POSITIVE_INFINITY, queryTriggerInteraction: QueryTriggerInteraction = QueryTriggerInteraction.UseGlobal): RaycastHit[] {\n        // 扫描测试所有碰撞\n        return [];\n    }\n\n    // 已废弃的方法（保持兼容性）\n    public setMaxAngularVelocity(a: number): void {\n        this.maxAngularVelocity = a;\n    }\n}","import { Engine } from \"../Core/Engine\";\nimport { Collider } from \"./Collider\";\n\nexport interface SphereColliderData {\n    radius: number;\n}\n\nexport class SphereCollider extends Collider {\n    public _radius: number = 0.5;\n\n    public get radius(): number {\n        return this._radius;\n    }\n\n    public set radius(newRadius: number) {\n        if (this._radius !== newRadius) {\n            this._radius = newRadius;\n            // 通常需要重新初始化碰撞体\n            Engine.physics.RebuildColliders(this);\n        }\n    }\n\n    public getColliderData(): SphereColliderData {\n        return {\n            radius: this._radius * this.transform.worldScale.x,\n        }\n    }\n\n    /**\n     * 返回球的体积（用于计算质量等）\n     */\n    public getVolume(): number {\n        return (4.0 / 3.0) * Math.PI * Math.pow(this.radius, 3);\n    }\n}","/*\n * 相机控制可以参考three.js的OrbitControls.js：https://github.com/mrdoob/three.js/blob/r108/examples/js/controls/OrbitControls.js#L390-L395\n */\n\nimport { RequireComponent } from \"../../Core/Decorators\";\nimport { Engine } from \"../../Core/Engine\";\nimport { Input, InputAxis } from \"../../Core/Input\";\nimport { Time } from \"../../Core/Time\";\nimport { Quaternion } from \"../../Math/Quaternion\";\nimport { Vector3 } from \"../../Math/Vector3\";\nimport { Camera, Projection } from \"../Camera\";\nimport { Component } from \"../Component\";\n\n@RequireComponent(Camera)\nexport class CameraController extends Component {\n    public moveSpeed = 0.5;\n    public moveSpeedShiftScale = 2.5;\n    public dragSpeed = 0.3;\n    public damp = 0.2;\n    public rotateSpeed = 1;\n\n    private _camera: Camera | null;\n    private _euler = new Vector3();\n    private _velocity = new Vector3();\n    private _position = new Vector3();\n    private _speedScale = 1;\n    private _rotateCamera = false;\n    private _rotateCenter = new Vector3();\n\n    public onStart(): void {\n        this._camera = this.gameObject.getComponent(Camera);\n        this._euler = this.transform.rotation.eulerAngles;\n        this._position = this.transform.position;\n    }\n\n    private updateInput(): void {\n        // WSADQE+SHIFT相机移动以及加速\n        this._velocity.x = Input.GetAxis(InputAxis.Horizontal);\n        this._velocity.z = Input.GetAxis(InputAxis.Vertical);\n        this._velocity.y = Input.GetKey(Input.KeyCode.Q) ? -1 : Input.GetKey(Input.KeyCode.E) ? 1 : 0;\n        this._speedScale = Input.GetKey(Input.KeyCode.Shift) ? this.moveSpeedShiftScale : 1;\n\n        // 鼠标中键相机拖动\n        if (Input.GetMouseButton(1)) {\n            const moveDelta = Input.mouseDelta;\n            //TODO:这里应该是托多少就移动多少，而不是乘一个系数\n            this._velocity.x -= moveDelta.x * this.dragSpeed;\n            this._velocity.y += moveDelta.y * this.dragSpeed;\n        }\n\n        // 鼠标滚轮相机缩放\n        const scrollDelta = Input.mouseScrollDelta.y * this.moveSpeed;\n        if (this._camera?.projection == Projection.Orthographic) {\n            this._camera.orthographicSize += scrollDelta * 0.01;\n        }\n        else {\n            var pos = this.transform.rotation.transformQuat(Vector3.BACK);\n            this._position = this.scaleAndAdd(this.transform.position, pos, scrollDelta * 0.1);\n        }\n\n        // 鼠标右键相机旋转\n        if (Input.GetMouseButtonDown(0)) {\n            Engine.canvas.requestPointerLock();\n            this._rotateCamera = true;\n        }\n        if (Input.GetMouseButtonUp(2)) {\n            if (document.exitPointerLock) document.exitPointerLock();\n            this._rotateCamera = false;\n        }\n        if (this._rotateCamera) {\n            const moveDelta = Input.mouseDelta;\n            this._euler.y += moveDelta.x * this.rotateSpeed * 0.1;\n            this._euler.x += moveDelta.y * this.rotateSpeed * 0.1;\n        }\n\n        // ALT+鼠标左键相机绕中心点旋转\n        // if (Input.GetKey(Input.KeyCode.Alt) && Input.GetMouseButton(0)) {\n        //     const moveDelta = Input.mouseDelta;\n        //     this._euler.y -= moveDelta.x * this.rotateSpeed * 0.1;\n        //     this._euler.x += moveDelta.y * this.rotateSpeed * 0.1;\n        // }\n    }\n\n    private scaleAndAdd(a: Vector3, b: Vector3, scale: number): Vector3 {\n        var out = new Vector3();\n        out.x = a.x + b.x * scale;\n        out.y = a.y + b.y * scale;\n        out.z = a.z + b.z * scale;\n        return out;\n    }\n\n    public onUpdate(): void {\n        this.updateInput();\n\n        // position\n        var v = this.transform.rotation.transformQuat(this._velocity);\n        this._position = this.scaleAndAdd(this._position, v, this.moveSpeed * this._speedScale);\n        v = Vector3.lerp(this.transform.position, this._position, Time.deltaTime / this.damp);\n        this.transform.position = v;\n\n        // rotation\n        var q = new Quaternion(new Vector3(this._euler.x, this._euler.y, this._euler.z));\n        q = Quaternion.slerp(this.transform.rotation, q, Time.deltaTime / this.damp);\n        this.transform.rotation = q;\n    }\n}","import { DisallowComponent } from \"../../Core/Decorators\";\nimport { Input } from \"../../Core/Input\";\nimport { Quaternion } from \"../../Math/Quaternion\";\nimport { Vector3 } from \"../../Math/Vector3\";\nimport { Debug } from \"../../Utils/Debug\";\nimport { Component } from \"../Component\";\nimport { Rigidbody } from \"../RigidBody\";\n\n@DisallowComponent(Rigidbody)\nexport class ObjAutoRotate extends Component {\n    private angleX = 0;\n    private angleY = 0;\n\n    public onStart(): void {\n        this.angleX = this.transform.rotation.eulerAngles.x;\n        this.angleY = this.transform.rotation.eulerAngles.y;\n    }\n\n    public onUpdate(): void {\n        this.angleY += 1;\n        this.transform.rotation = new Quaternion(new Vector3(this.angleX, this.angleY, 0));\n    }\n}","import { DisallowComponent } from \"../../Core/Decorators\";\nimport { Input } from \"../../Core/Input\";\nimport { Quaternion } from \"../../Math/Quaternion\";\nimport { Vector3 } from \"../../Math/Vector3\";\nimport { Debug } from \"../../Utils/Debug\";\nimport { Component } from \"../Component\";\nimport { Rigidbody } from \"../RigidBody\";\n\n@DisallowComponent(Rigidbody)\nexport class ObjRotate extends Component {\n    private angleX = 0;\n    private angleY = 0;\n\n    public onStart(): void {\n        this.angleX = this.transform.rotation.eulerAngles.x;\n        this.angleY = this.transform.rotation.eulerAngles.y;\n    }\n\n    public onUpdate(): void {\n        // // 键盘输入\n        // const horizontalInput = Input.GetAxis(InputAxis.Horizontal);\n        // const verticalInput = Input.GetAxis(InputAxis.Vertical);\n        // this.angleX += verticalInput;\n        // this.angleY += horizontalInput;\n        // this.transform.rotation = new Quaternion(new Vector3(this.angleX, this.angleY, 0));\n\n        // // 鼠标滚轮\n        // if (Input.mouseScrollDelta.y !== 0) {\n        //     // 缩放\n        //     const zoomFactor = Input.mouseScrollDelta.y > 0 ? 0.9 : 1.1;\n        //     const sacle = this.transform.scale;\n        //     sacle.multiply(zoomFactor);\n        //     this.transform.scale = sacle;\n        // }\n        \n        if(Input.GetKey(Input.KeyCode.Numpad4)) this.angleY -= 1;\n        if(Input.GetKey(Input.KeyCode.Numpad6)) this.angleY += 1;\n        if(Input.GetKey(Input.KeyCode.Numpad8)) this.angleX -= 1;\n        if(Input.GetKey(Input.KeyCode.Numpad2)) this.angleX += 1;\n        this.transform.rotation = new Quaternion(new Vector3(this.angleX, this.angleY, 0));\n\n        Debug.Log(this.gameObject.name + \" X:\" + Math.floor(this.angleX) + \" Y:\" + Math.floor(this.angleY));\n    }\n}","import 'reflect-metadata';\n\nexport const REQUIRED_COMPONENTS_KEY = Symbol('requiredComponents');\nexport const DISALLOW_MULTIPLE_COMPONENT_KEY = Symbol('DisallowMultipleComponent');\nexport const DISALLOW_COMPONENTS_KEY = Symbol('DisallowedComponents');\n\n/**\n * 装饰器：标记当前组件需要依赖的其他组件类型\n * @param componentTypes 需要依赖的组件类型数组\n */\nexport function RequireComponent(...componentTypes: Function[]) {\n    return function (target: Function) {\n        // 将依赖的组件类型元数据存储在目标组件上\n        Reflect.defineMetadata(REQUIRED_COMPONENTS_KEY, componentTypes, target);\n    };\n}\n\n/**\n * 装饰器：标记当前组件不允许与指定类型的组件共存于同一个GameObject上\n * @param disallowedComponentTypes 不允许共存的组件类型数组\n */\nexport function DisallowComponent(...disallowedComponentTypes: Function[]) {\n    return function (target: Function) {\n        // 存储被禁止的组件类型数组到元数据中\n        Reflect.defineMetadata(DISALLOW_COMPONENTS_KEY, disallowedComponentTypes, target);\n    };\n}\n\n/**\n * 用于标记一个组件在一个GameObject上只能存在一个实例\n * 使用反射元数据存储该标记\n */\nexport function DisallowMultipleComponent(target: Function) {\n    // 设置元数据，标记这个类不允许重复添加\n    Reflect.defineMetadata(DISALLOW_MULTIPLE_COMPONENT_KEY, true, target);\n}","import { Input } from \"./Input\";\nimport { RasterizationPipeline } from \"../Renderer/RasterizationPipeline\";\nimport { MainScene } from \"../Scene/MainScene\";\nimport { SceneManager } from \"../Scene/SceneManager\";\nimport { Debug } from \"../Utils/Debug\";\nimport { Time } from \"./Time\";\nimport { TweenManager } from \"./TweenManager\";\nimport { Physics } from \"../Physics/Physics\";\nimport { EngineConfig } from \"./Setting\";\n\nexport class Engine {\n    public static sceneManager: SceneManager = new SceneManager();\n    public static physics: Physics = new Physics();\n    public static canvas: HTMLCanvasElement;\n    public static context: CanvasRenderingContext2D;\n    public static pipeline: RasterizationPipeline;\n    public static imageData: ImageData;\n\n    public static async Init() {\n        // 获取canvas元素和2D渲染上下文\n        this.canvas = document.getElementById('canvas') as HTMLCanvasElement;\n        this.context = this.canvas.getContext('2d') as CanvasRenderingContext2D;\n        // 设置canvas尺寸\n        this.canvas.width = EngineConfig.canvasWidth;\n        this.canvas.height = EngineConfig.canvasHeight;\n        // 设置文本样式\n        this.context.font = 'Arial';\n        this.context.textAlign = 'left';\n\n        // 创建图像数据对象\n        this.imageData = Engine.context.createImageData(EngineConfig.canvasWidth, EngineConfig.canvasHeight);\n        // 创建32位无符号整型数组视图，用于直接操作像素数据\n        const uint32View = new Uint32Array(this.imageData.data.buffer);\n        // 创建渲染器实例\n        this.pipeline = new RasterizationPipeline(uint32View);\n\n        // 初始化物理引擎\n        this.physics.init();\n        // 初始化场景\n        await this.sceneManager.loadScene(MainScene);\n        // 初始化输入系统\n        Input.initialize();\n    }\n\n    public static Loop(time: number) {\n        Debug.Log(Math.floor(1 / Time.deltaTime).toString());\n\n        // 1. 更新时间数据：判断当前帧是否需要执行（受 maxFps 影响）\n        const shouldExecuteFrame = Time.updateFrame();\n        // if (!shouldExecuteFrame) {\n        //     return;\n        // }\n\n        // 2. 固定更新（对应 Unity FixedUpdate，例如物理引擎、AI逻辑）\n        Time.updateFixedTime(() => {\n            Engine.FixedUpdate(); // 你的固定逻辑更新（如物理碰撞、技能CD）\n        });\n\n        // 3. 普通逻辑更新（对应 Unity Update，受 deltaTime 影响）\n        Engine.Update(); // 例如：角色移动（速度 * Time.deltaTime 确保帧率无关）\n\n        // 4. 更新输入状态(注：输入已经由WEB引擎在每帧开始之前获取了，这里是更新输入的上一帧状态)\n        Input.update();\n\n        // 5. 渲染\n        Engine.Render();\n\n        // 6. 屏幕输出日志\n        Debug.PrintLogs();\n    }\n\n    private static Update() {\n        // 使用场景的update方法更新所有游戏对象\n        this.sceneManager.getActiveScene()?.update();\n        // 更新动画\n        TweenManager.update();\n    }\n\n    private static FixedUpdate() {\n        this.physics.update();\n    }\n\n    private static Render() {\n        this.pipeline.Render();\n        // 将图像数据绘制到canvas上\n        this.context.putImageData(this.imageData, 0, 0);\n    }\n}","import { Transform } from \"./Transform\";\nimport { Component } from \"../Component/Component\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Quaternion } from \"../Math/Quaternion\";\nimport { UObject } from \"./UObject\";\nimport { DISALLOW_COMPONENTS_KEY, DISALLOW_MULTIPLE_COMPONENT_KEY } from \"./Decorators\";\nimport { Engine } from \"./Engine\";\n\nexport class GameObject extends UObject {\n    public name: string;\n    public transform: Transform;\n    public tag: string = \"Untagged\";\n    public layer: number = 0;\n\n    private components: Component[] = [];\n    private startedComponents: Set<Component> = new Set<Component>();\n\n    constructor(name: string, parent?: GameObject) {\n        super();\n        this.name = name;\n        this.transform = new Transform(this);\n\n        if (parent) {\n            this.transform.setParent(parent.transform);\n        }\n        else {\n            const p = Engine.sceneManager.getActiveScene()?.getRootGameObject();\n            if (p) {\n                this.transform.setParent(p.transform);\n            }\n        }\n    }\n\n    private _active: boolean = true;\n    // 设置游戏对象的激活状态\n    public set active(value: boolean) {\n        if (this._active !== value) {\n            this._active = value;\n\n            // 处理组件的启用/禁用\n            for (const component of this.components) {\n                if (value) {\n                    component.onEnable();\n                } else {\n                    component.onDisable();\n                }\n            }\n        }\n    }\n    // 检查游戏对象是否处于活动状态（考虑父对象）\n    public get active(): boolean {\n        if (!this._active) return false;\n\n        // 检查父对象的激活状态\n        let parent = this.transform.parent;\n        while (parent) {\n            const parentGameObject = parent.gameObject;\n            if (parentGameObject && !parentGameObject.active) {\n                return false;\n            }\n            parent = parent.parent;\n        }\n\n        return true;\n    }\n\n    // 调用所有组件的Start方法（如果尚未调用）\n    public startComponents(): void {\n        if (!this.active) return;\n\n        for (const component of this.components) {\n            if (!this.startedComponents.has(component) && component.enabled) {\n                component.onStart();\n                component.onEnable();\n                this.startedComponents.add(component);\n            }\n        }\n\n        // 递归调用子对象的startComponents\n        for (const child of this.transform.children) {\n            if (child.gameObject) {\n                child.gameObject.startComponents();\n            }\n        }\n    }\n\n    // 更新所有组件\n    public updateComponents(): void {\n        if (!this.active) return;\n\n        for (const component of this.components) {\n            if (component.enabled) {\n                component.onUpdate();\n            }\n        }\n\n        // 递归调用子对象的updateComponents\n        for (const child of this.transform.children) {\n            if (child.gameObject) {\n                child.gameObject.updateComponents();\n            }\n        }\n    }\n\n    /**\n     * 添加组件到游戏对象\n     * @param componentType 组件类型\n     * @returns 添加的组件实例\n     */\n    public addComponent<T extends Component>(componentType: new (gameObject: GameObject) => T): T | null {\n        // 1.检查是否已经存在该类型的组件\n        const existingComponent = this.getComponent(componentType);\n        if (existingComponent) {\n            if (!existingComponent.checkComponentUniqueness()) {\n                // 不允许添加多个相同的组件，返回已经存在的\n                return existingComponent;\n            }\n        }\n\n        // 2.判断是否有与该组件排斥的组件\n        for (const existingComponent of this.components) {\n            const existingDisallowed: Function[] | undefined =\n                Reflect.getMetadata(DISALLOW_COMPONENTS_KEY, existingComponent.constructor);\n\n            if (existingDisallowed && existingDisallowed.includes(componentType)) {\n                console.error(\n                    `Cannot add ${componentType.name}: existing ${existingComponent.constructor.name} ` +\n                    `forbids this component type`\n                );\n                return null;\n            }\n        }\n\n        // 创建新组件实例\n        const comp = new componentType(this);\n\n        // 3.判断是否有依赖组件，有的话添加\n        if (comp.checkRequiredComponents()) {\n            this.components.push(comp);\n            // 4.检查是否有冲突的组件，有的话移除它们\n            comp.checkComponentCompatibility();\n            return comp;\n        }\n        else {\n            // 添加失败，则该组件也销毁，避免出现逻辑问题\n            comp.Destroy();\n            return null;\n        }\n    }\n\n    public getAllComponents(): Component[] {\n        return this.components;\n    }\n\n    // 获取指定类型的组件\n    public getComponent<T extends Component>(componentType: Function & { prototype: T }): T | null {\n        for (const component of this.components) {\n            if (component instanceof componentType) {\n                return component as T;\n            }\n        }\n        return null;\n    }\n\n    // 获取所有指定类型的组件\n    public getComponents<T extends Component>(componentType: Function & { prototype: T }): T[] {\n        const result: T[] = [];\n        for (const component of this.components) {\n            if (component instanceof componentType) {\n                result.push(component as T);\n            }\n        }\n        return result;\n    }\n\n    public getComponetInParent<T extends Component>(componentType: Function & { prototype: T }): T | null {\n        // 先检查自身\n        const comp = this.getComponent(componentType);\n        if (comp != null) {\n            return comp;\n        }\n\n        let parent = this.transform.parent;\n        while (parent) {\n            const parentGameObject = parent.gameObject;\n            if (parentGameObject) {\n                const component = parentGameObject.getComponent(componentType);\n                if (component) {\n                    return component;\n                }\n            }\n            parent = parent.parent;\n        }\n        return null;\n    }\n\n    // 获取子节点上的组件\n    public getComponentInChildren<T extends Component>(componentType: Function & { prototype: T }): T | null {\n        // 先检查自身\n        const comp = this.getComponent(componentType);\n        if (comp != null) {\n            return comp;\n        }\n\n        // 遍历所有子节点\n        for (const child of this.transform.children) {\n            const childGameObject = child.gameObject;\n            if (childGameObject) {\n                const childComp = childGameObject.getComponent(componentType);\n                if (childComp != null) {\n                    return childComp;\n                }\n\n                // 递归检查子节点的子节点\n                const deepChildComp = childGameObject.getComponentInChildren(componentType);\n                if (deepChildComp != null) {\n                    return deepChildComp;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    // 获取子节点上的所有组件\n    public getComponentsInChildren<T extends Component>(componentType: Function & { prototype: T }): T[] {\n        const result: T[] = [];\n\n        // 添加自身的组件\n        result.push(...this.getComponents(componentType));\n\n        // 遍历所有子节点\n        for (const child of this.transform.children) {\n            // 假设每个Transform都有对应的GameObject\n            const childGameObject = child.gameObject;\n            if (childGameObject) {\n                // 递归获取子节点的所有组件\n                result.push(...childGameObject.getComponentsInChildren(componentType));\n            }\n        }\n\n        return result;\n    }\n\n    // 移除组件\n    public removeComponent<T extends Component>(componentType: Function & { prototype: T }): boolean {\n        const index = this.components.findIndex(component => component instanceof componentType);\n        if (index !== -1) {\n            const component = this.components[index];\n            component.onDestroy();\n            this.components.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    public removeComponentInstance<T extends Component>(component: T): boolean {\n        // 查找组件实例在数组中的索引\n        const index = this.components.indexOf(component);\n        if (index !== -1) {\n            // 调用组件的销毁生命周期方法\n            component.onDestroy();\n            // 从数组中移除该实例\n            this.components.splice(index, 1);\n            return true; // 移除成功\n        }\n        return false; // 未找到该组件实例\n    }\n\n    // 静态方法：通过名称查找GameObject\n    public static find(name: string): GameObject | null {\n        // 实现查找逻辑\n        // 这需要一个全局的GameObject注册表\n        return null;\n    }\n\n    // 静态方法：通过标签查找第一个GameObject\n    public static findWithTag(tag: string): GameObject | null {\n        // 实现查找逻辑\n        // 这需要一个标签系统\n        return null;\n    }\n\n    // 静态方法：通过标签查找所有GameObject\n    public static findGameObjectsWithTag(tag: string): GameObject[] {\n        // 实现查找逻辑\n        return [];\n    }\n\n    // 静态方法：查找特定类型的第一个组件\n    public static findObjectOfType<T extends Component>(type: new (...args: any[]) => T): T | null {\n        // 实现查找逻辑\n        return null;\n    }\n\n    // 静态方法：查找特定类型的所有组件\n    public static findObjectsOfType<T extends Component>(type: new (...args: any[]) => T): T[] {\n        // 实现查找逻辑\n        return [];\n    }\n\n    // 静态方法：实例化游戏对象\n    public static instantiate(original: GameObject, position?: Vector3, rotation?: Quaternion): GameObject {\n        // 创建新的游戏对象\n        const clone = new GameObject(original.name);\n\n        // 复制属性\n        clone.tag = original.tag;\n        clone.layer = original.layer;\n        clone.active = original.active;\n        clone.transform.position = original.transform.worldPosition;\n        clone.transform.rotation = original.transform.worldRotation;\n        clone.transform.scale = original.transform.worldScale;\n\n        if (position) clone.transform.position = position;\n        if (rotation) clone.transform.rotation = rotation;\n\n        // 复制组件（这需要一个深度复制机制）\n        const comps = original.getAllComponents();\n        for(let i = 0; i < comps.length; i++){\n            const comp = comps[i];\n            //clone.addComponent()\n        }\n\n        return clone;\n    }\n\n    // 销毁游戏对象\n    public onDestroy(): void {\n        // 调用所有组件的onDestroy方法\n        for (const component of this.components) {\n            component.onDestroy();\n        }\n        // 这里可以添加从场景中移除游戏对象的逻辑\n    }\n}","import { Vector2 } from \"../Math/Vector2\";\n\nexport class Input {\n    // 键盘状态\n    private static currentKeys: Map<string, boolean> = new Map<string, boolean>();\n    private static previousKeys: Map<string, boolean> = new Map<string, boolean>();\n\n    // 鼠标状态\n    private static currentMouseButtons: boolean[] = [false, false, false]; // 左、中、右键\n    private static previousMouseButtons: boolean[] = [false, false, false];\n    public static mousePosition: Vector2 = Vector2.ZERO;\n    public static mouseDelta: Vector2 = Vector2.ZERO;\n    public static mouseScrollDelta: Vector2 = Vector2.ZERO;\n\n    // 触摸状态\n    private static touches: Touch[] = [];\n\n    // 按键常量\n    public static readonly KeyCode = {\n        // 字母键\n        A: 'KeyA', B: 'KeyB', C: 'KeyC', D: 'KeyD', E: 'KeyE', F: 'KeyF', G: 'KeyG',\n        H: 'KeyH', I: 'KeyI', J: 'KeyJ', K: 'KeyK', L: 'KeyL', M: 'KeyM', N: 'KeyN',\n        O: 'KeyO', P: 'KeyP', Q: 'KeyQ', R: 'KeyR', S: 'KeyS', T: 'KeyT', U: 'KeyU',\n        V: 'KeyV', W: 'KeyW', X: 'KeyX', Y: 'KeyY', Z: 'KeyZ',\n\n        // 数字键\n        Alpha0: 'Digit0', Alpha1: 'Digit1', Alpha2: 'Digit2', Alpha3: 'Digit3', Alpha4: 'Digit4',\n        Alpha5: 'Digit5', Alpha6: 'Digit6', Alpha7: 'Digit7', Alpha8: 'Digit8', Alpha9: 'Digit9',\n\n        // 小键盘数字键\n        Numpad0: 'Numpad0', Numpad1: 'Numpad1', Numpad2: 'Numpad2', Numpad3: 'Numpad3',\n        Numpad4: 'Numpad4', Numpad5: 'Numpad5', Numpad6: 'Numpad6', Numpad7: 'Numpad7',\n        Numpad8: 'Numpad8', Numpad9: 'Numpad9',\n\n        // 小键盘功能键（可选添加）\n        NumpadMultiply: 'NumpadMultiply',    // 乘号 *\n        NumpadAdd: 'NumpadAdd',              // 加号 +\n        NumpadSubtract: 'NumpadSubtract',    // 减号 -\n        NumpadDecimal: 'NumpadDecimal',      // 小数点 .\n        NumpadDivide: 'NumpadDivide',        // 除号 /\n        NumpadEnter: 'NumpadEnter',          // 回车键\n\n        // 功能键\n        F1: 'F1', F2: 'F2', F3: 'F3', F4: 'F4', F5: 'F5', F6: 'F6',\n        F7: 'F7', F8: 'F8', F9: 'F9', F10: 'F10', F11: 'F11', F12: 'F12',\n\n        // 特殊键\n        Space: 'Space',\n        Enter: 'Enter',\n        Tab: 'Tab',\n        Escape: 'Escape',\n        Backspace: 'Backspace',\n        Shift: 'ShiftLeft',\n        Control: 'ControlLeft',\n        Alt: 'AltLeft',\n        CapsLock: 'CapsLock',\n\n        // 方向键\n        UpArrow: 'ArrowUp',\n        DownArrow: 'ArrowDown',\n        LeftArrow: 'ArrowLeft',\n        RightArrow: 'ArrowRight',\n    };\n\n    // 初始化输入系统\n    public static initialize(): void {\n        // 键盘事件\n        document.addEventListener('keydown', (event) => {\n            Input.currentKeys.set(event.code, true);\n        });\n\n        document.addEventListener('keyup', (event) => {\n            Input.currentKeys.set(event.code, false);\n        });\n\n        // 鼠标事件\n        document.addEventListener('mousedown', (event) => {\n            if (event.button >= 0 && event.button < 3) {\n                Input.currentMouseButtons[event.button] = true;\n            }\n        });\n\n        document.addEventListener('mouseup', (event) => {\n            if (event.button >= 0 && event.button < 3) {\n                Input.currentMouseButtons[event.button] = false;\n            }\n        });\n\n        document.addEventListener('mousemove', (event) => {\n            const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n            const rect = canvas.getBoundingClientRect();\n            Input.mousePosition.x = event.clientX - rect.left;\n            Input.mousePosition.y = event.clientY - rect.top;\n            Input.mouseDelta.x = event.movementX;\n            Input.mouseDelta.y = event.movementY;\n        });\n\n        document.addEventListener('wheel', (event) => {\n            Input.mouseScrollDelta.y = event.deltaY;\n        });\n\n        document.addEventListener('scrollend', () => {\n            Input.mouseScrollDelta.y = 0;\n        });\n\n        // 触摸事件\n        document.addEventListener('touchstart', (event) => {\n            Input.updateTouches(event.touches);\n        });\n\n        document.addEventListener('touchmove', (event) => {\n            Input.updateTouches(event.touches);\n        });\n\n        document.addEventListener('touchend', (event) => {\n            Input.updateTouches(event.touches);\n        });\n\n        document.addEventListener('touchcancel', (event) => {\n            Input.updateTouches(event.touches);\n        });\n    }\n\n    // 更新输入状态（在每帧开始时调用）\n    public static update(): void {\n        // 更新键盘状态\n        Input.previousKeys = new Map(Input.currentKeys);\n\n        // 更新鼠标状态\n        Input.previousMouseButtons = [...Input.currentMouseButtons];\n\n        // 复位鼠标滚轮\n        Input.mouseScrollDelta.y = 0;\n\n        // 复位鼠标移动\n        Input.mouseDelta.x = 0;\n        Input.mouseDelta.y = 0;\n    }\n\n    //#region 键盘输入检测\n\n    // 检查按键是否被按下（持续触发）\n    public static GetKey(keyCode: string): boolean {\n        return Input.currentKeys.get(keyCode) === true;\n    }\n\n    // 检查按键是否在当前帧被按下（仅一帧触发）\n    public static GetKeyDown(keyCode: string): boolean {\n        return Input.currentKeys.get(keyCode) === true && Input.previousKeys.get(keyCode) !== true;\n    }\n\n    // 检查按键是否在当前帧被释放（仅一帧触发）\n    public static GetKeyUp(keyCode: string): boolean {\n        return Input.currentKeys.get(keyCode) !== true && Input.previousKeys.get(keyCode) === true;\n    }\n\n    // 获取指定轴向的输入值\n    public static GetAxis(axis: InputAxis): number {\n        switch (axis) {\n            case InputAxis.Horizontal:\n                // 水平轴 A/D 或 左右方向键\n                if (Input.GetKey(Input.KeyCode.D) || Input.GetKey(Input.KeyCode.RightArrow)) {\n                    return 1;\n                }\n                if (Input.GetKey(Input.KeyCode.A) || Input.GetKey(Input.KeyCode.LeftArrow)) {\n                    return -1;\n                }\n                return 0;\n\n            case InputAxis.Vertical:\n                // 垂直轴 W/S 或 上下方向键\n                if (Input.GetKey(Input.KeyCode.W) || Input.GetKey(Input.KeyCode.UpArrow)) {\n                    return 1;\n                }\n                if (Input.GetKey(Input.KeyCode.S) || Input.GetKey(Input.KeyCode.DownArrow)) {\n                    return -1;\n                }\n                return 0;\n\n            default:\n                return 0;\n        }\n    }\n\n    //#endregion\n\n    //#region 鼠标输入检测\n\n    // 检查鼠标按钮是否被按下（持续触发）\n    public static GetMouseButton(button: number): boolean {\n        return button >= 0 && button < 3 ? Input.currentMouseButtons[button] : false;\n    }\n\n    // 检查鼠标按钮是否在当前帧被按下（仅一帧触发）\n    public static GetMouseButtonDown(button: number): boolean {\n        return button >= 0 && button < 3 ?\n            (Input.currentMouseButtons[button] && !Input.previousMouseButtons[button]) : false;\n    }\n\n    // 检查鼠标按钮是否在当前帧被释放（仅一帧触发）\n    public static GetMouseButtonUp(button: number): boolean {\n        return button >= 0 && button < 3 ?\n            (!Input.currentMouseButtons[button] && Input.previousMouseButtons[button]) : false;\n    }\n\n    //#endregion\n\n    //#region 触摸输入检测\n\n    // 更新触摸状态\n    private static updateTouches(touchList: TouchList): void {\n        Input.touches = [];\n        for (let i = 0; i < touchList.length; i++) {\n            const touch = touchList[i];\n            const canvas = document.getElementById('canvas') as HTMLCanvasElement;\n            const rect = canvas.getBoundingClientRect();\n\n            Input.touches.push({\n                fingerId: touch.identifier,\n                position: {\n                    x: touch.clientX - rect.left,\n                    y: touch.clientY - rect.top\n                },\n                deltaPosition: { x: 0, y: 0 }, // 简化实现，实际应该跟踪前一帧位置\n                phase: TouchPhase.Moved, // 简化实现\n                tapCount: 1 // 简化实现\n            });\n        }\n    }\n\n    // 获取指定索引的触摸\n    public static GetTouch(index: number): Touch | null {\n        return index >= 0 && index < Input.touches.length ? Input.touches[index] : null;\n    }\n\n    // 获取触摸数量\n    public static get touchCount(): number {\n        return Input.touches.length;\n    }\n\n    //#endregion\n}\n\n// 轴向枚举\nexport enum InputAxis {\n    Horizontal,\n    Vertical,\n}\n\n// 触摸阶段枚举\nexport enum TouchPhase {\n    Began,\n    Moved,\n    Stationary,\n    Ended,\n    Canceled\n}\n\n// 触摸信息接口\nexport interface Touch {\n    fingerId: number;\n    position: { x: number, y: number };\n    deltaPosition: { x: number, y: number };\n    phase: TouchPhase;\n    tapCount: number;\n}","import { Color } from \"../Math/Color\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { CubeMap } from \"../Resources/CubeMap\";\nimport { LayerMask } from \"./LayerMask\";\n\nexport enum FogMode {\n    Linear = 0,\n    Exponential = 1,\n    Exp2 = 2,\n}\n\nexport const Layers: string[] = [\n    \"Default\",\n    \"TransparentFX\",\n    \"Ignore Raycast\",\n    \"Water\",\n]\n\nexport class EngineConfig {\n    public static canvasWidth: number = 320;\n    public static canvasHeight: number = 240;\n    public static halfCanvasWidth: number = EngineConfig.canvasWidth >> 1;\n    public static halfCanvasHeight: number = EngineConfig.canvasHeight >> 1;\n    public static aspectRatio: number = EngineConfig.canvasWidth / EngineConfig.canvasHeight;\n}\n\nexport class TimeSettings {\n}\n\nexport class PhysicsSettings {\n    public static gravity: Vector3 = new Vector3(0, -9.8, 0);\n    public static layerCollisionMatrix: LayerMask[][] = [];\n}\n\nexport class RenderSettings {\n    public static fog: boolean = false;\n    public static fogColor: Color;\n    public static fogMode: FogMode = FogMode.Exp2;\n    public static fogDensity: number = 0.01;\n    public static linearFogStart: number = 0;\n    public static linearFogEnd: number = 300;\n    public static ambientLight: Color = new Color(0.2, 0.2, 0.2, 1);\n    public static skybox: CubeMap;\n}","/**\n * 模仿 Unity Time 类：提供时间管理、帧率控制、时间缩放等核心功能\n * 核心特性：\n * 1. deltaTime：上一帧到当前帧的时间间隔（受 timeScale 影响）\n * 2. unscaledDeltaTime：不受 timeScale 影响的原始帧间隔\n * 3. time：游戏启动到现在的总时间（受 timeScale 影响）\n * 4. fixedTime：固定时间步长的累计时间（用于物理/固定逻辑更新）\n * 5. timeScale：时间缩放系数（0=暂停，1=正常，>1=加速，<1=减速）\n */\nexport class Time {\n    // ========================== 静态属性（对应 Unity Time 静态接口）==========================\n    /** 上一帧到当前帧的时间间隔（秒），受 timeScale 影响（暂停时为 0） */\n    public static deltaTime: number = 0;\n\n    /** 上一帧到当前帧的原始时间间隔（秒），不受 timeScale 影响（暂停时仍为真实时间间隔） */\n    public static unscaledDeltaTime: number = 0;\n\n    /** 游戏启动到现在的总时间（秒），受 timeScale 影响（暂停时不增加） */\n    public static time: number = 0;\n\n    /** 游戏启动到现在的原始总时间（秒），不受 timeScale 影响（暂停时仍增加） */\n    public static unscaledTime: number = 0;\n\n    /** 固定时间步长（秒），用于物理更新/固定逻辑更新（默认 0.02 秒 = 50 次/秒，对应 Unity fixedDeltaTime） */\n    public static fixedDeltaTime: number = 0.02;\n\n    /** 固定时间步长的累计时间（秒），用于触发固定更新（对应 Unity fixedTime） */\n    public static fixedTime: number = 0;\n\n    /** 时间缩放系数（0 = 暂停，1 = 正常速度，2 = 2倍速，0.5 = 0.5倍速） */\n    public static timeScale: number = 1;\n\n    /** 帧率限制（默认无限制，设为 30/60 可固定帧率） */\n    public static maxFps: number | null = null;\n\n    // ========================== 私有成员（内部计时逻辑）==========================\n    /** 上一帧的时间戳（毫秒，用于计算帧间隔） */\n    private static lastFrameTime: number = performance.now();\n\n    /** 固定时间步长的累计余数（避免固定更新丢失精度） */\n    private static fixedTimeRemainder: number = 0;\n\n    /** 是否已初始化（确保仅启动一次计时） */\n    private static isInitialized: boolean = false;\n\n\n    // ========================== 核心方法（需集成到渲染循环）==========================\n    /**\n     * 每帧更新时间数据（必须在主循环中调用，对应 Unity 帧生命周期）\n     * @returns 该帧是否需要执行（用于帧率限制）\n     */\n    public static updateFrame(): boolean {\n        // 初始化：记录第一帧时间\n        if (!this.isInitialized) {\n            this.lastFrameTime = performance.now();\n            this.isInitialized = true;\n            return true;\n        }\n\n        // 1. 计算当前帧的原始时间间隔（毫秒转秒）\n        const currentTime = performance.now();\n        const rawDeltaMs = currentTime - this.lastFrameTime;\n        this.unscaledDeltaTime = rawDeltaMs / 1000; // 原始帧间隔（不受 timeScale 影响）\n\n        // 2. 帧率限制逻辑：若设置 maxFps，判断是否达到目标帧间隔\n        if (this.maxFps !== null) {\n            const targetFrameMs = 1000 / this.maxFps; // 目标帧间隔（毫秒）\n            if (rawDeltaMs < targetFrameMs) {\n                return false; // 未达到目标间隔，不执行当前帧\n            }\n        }\n\n        // 3. 更新受 timeScale 影响的时间属性\n        this.deltaTime = this.unscaledDeltaTime * this.timeScale; // 受缩放的帧间隔\n        this.time += this.deltaTime; // 总时间（受缩放）\n        this.unscaledTime += this.unscaledDeltaTime; // 原始总时间（不受缩放）\n\n        // 4. 更新固定时间步长累计（用于物理/固定更新）\n        this.updateFixedTime();\n\n        // 5. 记录当前时间，为下一帧做准备\n        this.lastFrameTime = currentTime;\n        return true; // 允许执行当前帧逻辑\n    }\n\n    /**\n     * 固定时间步长更新（用于物理引擎、固定频率逻辑，对应 Unity FixedUpdate）\n     * @param fixedUpdateCallback 固定更新回调（每累计一个 fixedDeltaTime 执行一次）\n     */\n    public static updateFixedTime(fixedUpdateCallback?: () => void): void {\n        // 累计原始时间（不受 timeScale 影响，确保物理更新稳定）\n        const totalFixedDelta = this.unscaledDeltaTime + this.fixedTimeRemainder;\n        const fixedStep = this.fixedDeltaTime;\n\n        // 计算需要执行多少次固定更新（例如：累计 0.05 秒，固定步长 0.02 秒 → 执行 2 次，余数 0.01 秒）\n        const fixedUpdateCount = Math.floor(totalFixedDelta / fixedStep);\n        this.fixedTimeRemainder = totalFixedDelta % fixedStep;\n\n        // 执行固定更新回调\n        for (let i = 0; i < fixedUpdateCount; i++) {\n            this.fixedTime += fixedStep; // 更新固定时间累计\n            fixedUpdateCallback?.();\n        }\n    }\n\n    /**\n     * 重置时间状态（用于游戏重启、场景切换）\n     */\n    public static reset(): void {\n        this.deltaTime = 0;\n        this.unscaledDeltaTime = 0;\n        this.time = 0;\n        this.unscaledTime = 0;\n        this.fixedTime = 0;\n        this.fixedTimeRemainder = 0;\n        this.lastFrameTime = performance.now();\n    }\n\n    /**\n     * 暂停游戏（等价于设置 timeScale = 0）\n     */\n    public static pause(): void {\n        this.timeScale = 0;\n    }\n\n    /**\n     * 恢复游戏正常速度（等价于设置 timeScale = 1）\n     */\n    public static resume(): void {\n        this.timeScale = 1;\n    }\n}","import { GameObject } from \"./GameObject\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Quaternion } from \"../Math/Quaternion\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\n\nexport class Transform {\n    public readonly gameObject: GameObject;\n    public readonly children: Array<Transform>;\n\n    private _parent: Transform | null = null;\n    private _tempPos: Vector3;\n    private _tempRot: Quaternion;\n    private _tempScale: Vector3;\n\n    // 缓存矩阵以提高性能\n    private _selfMatrix: Matrix4x4 | null = null;\n    private _localToWorldNormalMatrix: Matrix4x4 | null = null;\n    private _localToWorldMatrix: Matrix4x4 | null = null;\n    private _worldToLocalMatrix: Matrix4x4 | null = null;\n\n    // 脏标记，用于跟踪变换是否已更改\n    private _isDirty: boolean = true;\n\n    // 方向向量缓存\n    private _forward: Vector3 | null = null;\n    private _up: Vector3 | null = null;\n    private _right: Vector3 | null = null;\n\n    constructor(gameObject: GameObject) {\n        this.gameObject = gameObject;\n        this.children = new Array<Transform>();\n        this._parent = null;\n        this._tempPos = Vector3.ZERO;\n        this._tempRot = Quaternion.identity;\n        this._tempScale = Vector3.ONE;\n    }\n\n    /**\n     * 标记当前变换为脏，需要重新计算矩阵\n     * 同时标记所有子节点为脏\n     */\n    private setDirty(): void {\n        this._isDirty = true;\n        this._selfMatrix = null;\n        this._localToWorldMatrix = null;\n        this._worldToLocalMatrix = null;\n        this._localToWorldNormalMatrix = null;\n\n        // 通知所有组件变换发生了变化\n        const components = this.gameObject.getAllComponents();\n        for (const component of components) {\n            if (typeof (component as any).onTransformChanged === 'function') {\n                (component as any).onTransformChanged();\n            }\n        }\n\n        // 递归标记所有子节点为脏\n        for (const child of this.children) {\n            child.setDirty();\n        }\n    }\n\n    public get selfMatrix(): Matrix4x4 {\n        if (this._selfMatrix === null || this._isDirty) {\n            this._selfMatrix = Matrix4x4.getTRSMatrix(this._tempPos, this._tempRot, this._tempScale);\n            // selfMatrix是最基础的矩阵，当它更新后，所有矩阵都应该被认为是干净的\n            // 注意：localToWorldMatrix和worldToLocalMatrix的计算会自动处理\n            this._isDirty = false;\n        }\n        return this._selfMatrix.clone();\n    }\n\n    public get localToWorldNormalMatrix(): Matrix4x4 {\n        if (this._localToWorldNormalMatrix === null || this._isDirty) {\n            this._localToWorldNormalMatrix = this.localToWorldMatrix.invert().transpose();\n        }\n        return this._localToWorldNormalMatrix.clone();\n    }\n\n    public get localToWorldMatrix(): Matrix4x4 {\n        if (this._localToWorldMatrix === null || this._isDirty) {\n            const p = this.parent != null ? this.parent.localToWorldMatrix : Matrix4x4.identity;\n            this._localToWorldMatrix = p.multiply(this.selfMatrix);\n            // 当selfMatrix被访问时，_isDirty已经被设置为false\n        }\n        return this._localToWorldMatrix.clone();\n    }\n\n    public get worldToLocalMatrix(): Matrix4x4 {\n        if (this._worldToLocalMatrix === null || this._isDirty) {\n            const p = this.parent != null ? this.parent.worldToLocalMatrix : Matrix4x4.identity;\n            this._worldToLocalMatrix = this.selfMatrix.invert().multiply(p);\n            // 当selfMatrix被访问时，_isDirty已经被设置为false\n        }\n        return this._worldToLocalMatrix.clone();\n    }\n\n    public get forward(): Vector3 {\n        // 使用缓存优化，避免重复计算和创建临时对象\n        if (this._isDirty || !this._forward) {\n            this._forward = this.convertToWorldSpace(Vector3.FORWARD, 0);\n        }\n        return this._forward.clone();\n    }\n\n    public get up(): Vector3 {\n        // 使用缓存优化，避免重复计算和创建临时对象\n        if (this._isDirty || !this._up) {\n            this._up = this.convertToWorldSpace(Vector3.UP, 0);\n        }\n        return this._up.clone();\n    }\n\n    public get right(): Vector3 {\n        // 使用缓存优化，避免重复计算和创建临时对象\n        if (this._isDirty || !this._right) {\n            this._right = this.convertToWorldSpace(Vector3.RIGHT, 0);\n        }\n        return this._right.clone();\n    }\n\n    public get position(): Vector3 {\n        return this._tempPos.clone();\n    }\n\n    public set position(pos: Vector3) {\n        if (pos.equals(this._tempPos)) return;\n        this._tempPos = pos;\n        this.setDirty();\n    }\n\n    public get worldPosition(): Vector3 {\n        return this.localToWorldMatrix.getTranslate();\n    }\n\n    public get rotation(): Quaternion {\n        return this._tempRot.clone();\n    }\n\n    public set rotation(q: Quaternion) {\n        if (q.equals(this._tempRot)) return;\n        this._tempRot = q;\n        this.setDirty();\n    }\n\n    public get worldRotation(): Quaternion {\n        return this.localToWorldMatrix.getRotate();\n    }\n\n    public get scale(): Vector3 {\n        return this._tempScale.clone();\n    }\n\n    public set scale(s: Vector3) {\n        if (s.equals(this._tempScale)) return;\n        this._tempScale = s;\n        this.setDirty();\n    }\n\n    public get worldScale(): Vector3 {\n        return this.localToWorldMatrix.getScale();\n    }\n\n    public get parent(): Transform | null {\n        return this._parent;\n    }\n\n    public setParent(parent: Transform, worldPositionStays: boolean = true) {\n        if (parent != null && parent != this && parent != this.parent) {\n            //防止出现：父节点是当前节点的子节点，将子节的设置为自己的父节点，会死循环\n            if (parent.hasParent(this)) {\n                console.error(\"Failed to set parent, this node is the parent node's parent.\");\n                return;\n            }\n\n            //如果当前节点有父节点，要先移除旧的\n            if (this.parent != null) {\n                this.parent.removeChild(this, worldPositionStays);\n            }\n\n            parent.addChild(this, worldPositionStays);\n        }\n        else if (parent == null && this.parent != null) {\n            this.parent.removeChild(this, worldPositionStays);\n        }\n\n        // 设置脏标记，因为父节点关系改变会影响变换矩阵\n        this.setDirty();\n    }\n\n    //节点p是否是当前节点的上级\n    public hasParent(p: Transform): boolean {\n        if (this.parent == null)\n            return false;\n        else if (this.parent == p)\n            return true;\n        else\n            return this.parent.hasParent(p);\n    }\n\n    private addChild(child: Transform, worldPositionStays: boolean = true): boolean {\n        if (child != null && child != this && !this.children.includes(child)) {\n            //防止出现：child节点是当前节点的父节点，将父节的设置为自己的子节点，会死循环\n            if (this.hasParent(child)) {\n                console.error(\"Failed to add child, this node is the child node's child.\");\n                return false;\n            }\n\n            //如果子节点有旧的父节点，要先移除\n            if (child.parent != null) {\n                child.parent.removeChild(child, worldPositionStays);\n            }\n\n            this.children.push(child);\n            child._parent = this;\n\n            if (worldPositionStays) {\n                //保留原世界坐标位置，先朝父节点的变换的反方向移动，然后再添加进去，就能保持世界坐标不变\n                //即变换到父节点的逆矩阵里\n                var m = this.worldToLocalMatrix.multiply(child.selfMatrix);\n                child._tempPos = m.getTranslate();\n                child._tempRot = m.getRotate();\n                child._tempScale = m.getScale();\n            }\n\n            // 设置脏标记，因为父节点关系改变会影响变换矩阵\n            child.setDirty();\n\n            return true;\n        }\n        return false;\n    }\n\n    private removeChild(child: Transform, worldPositionStays: boolean = true): boolean {\n        var index = this.children.indexOf(child, 0);\n\n        if (index > -1) {\n\n            if (worldPositionStays) {\n                //保留世界坐标，直接将本地坐标等同于当前世界坐标即可\n                var m = this.localToWorldMatrix.multiply(child.selfMatrix);\n                child._tempPos = m.getTranslate();\n                child._tempRot = m.getRotate();\n                child._tempScale = m.getScale();\n            }\n\n            this.children.splice(index, 1);\n            child._parent = null;\n            // 设置脏标记，因为父节点关系改变会影响变换矩阵\n            child.setDirty();\n            return true;\n        }\n        return false;\n    }\n\n    public convertToNodeSpace(v: Vector3, w: number = 1): Vector3 {\n        /*\n         *将某个坐标转到自己的局部空间，例如当前的局部坐标原点在世界坐标的（1，1）处\n         *点p在世界坐标（2，1）处，那么将点p相对于当前局部坐标系的位置就是（2，1）-（1，1）= （1， 0）\n         *即将点p反向变换当前的矩阵 \n         */\n        return this.worldToLocalMatrix.multiplyVector4(new Vector4(v, w)).vector3;\n    }\n\n    public convertToWorldSpace(v: Vector3, w: number = 1): Vector3 {\n        return this.localToWorldMatrix.multiplyVector4(new Vector4(v, w)).vector3;\n    }\n\n    public destroy(destroyChildren: boolean = true) {\n        if (destroyChildren) {\n            this.children.forEach(child => {\n                child.destroy(destroyChildren);\n            });\n        }\n        else {\n            this.children.forEach(child => {\n                this.removeChild(child);\n            });\n        }\n    }\n}","import { Group, Tween } from \"@tweenjs/tween.js\";\n\nexport class TweenManager {\n    private static tweenGroup: Group = new Group();\n\n    public static add(tween: Tween) {\n        // 保存用户原有的 onComplete 回调\n        const originalOnComplete = (tween as any)._onCompleteCallback;\n\n        // 设置新的 onComplete 回调\n        tween.onComplete(() => {\n            // 先调用用户原有的回调（如果存在）\n            if (originalOnComplete) {\n                originalOnComplete();\n            }\n            // 然后从管理器中移除\n            this.remove(tween);\n            console.log(\"移除\");\n        });\n\n        this.tweenGroup.add(tween);\n    }\n\n    public static update(time?: number) {\n        this.tweenGroup.update(time);\n    }\n\n    public static remove(tween: Tween) {\n        this.tweenGroup.remove(tween);\n    }\n}\n","export abstract class UObject {\n    public abstract onDestroy(): void;\n\n    public Destroy(): void {\n        this.onDestroy();\n    }\n\n    public static Destroy(obj: UObject): void {\n        obj.Destroy();\n    }\n}","import { GameObject } from \"../Core/GameObject\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Bounds } from \"./Bounds\";\n\n// BVH节点类\nclass BVHNode {\n    public bounds: Bounds;\n    public gameObject: GameObject | null = null;\n    public left: BVHNode | null = null;\n    public right: BVHNode | null = null;\n    public isLeaf: boolean = false;\n\n    constructor(bounds: Bounds) {\n        this.bounds = bounds;\n    }\n}\n\n// BVH树类\nexport class BVHTree {\n    private root: BVHNode | null = null;\n    private maxObjectsPerNode: number = 8; // 每个节点最大对象数量\n    private maxDepth: number = 16; // 最大深度\n\n    /**\n     * 构建BVH树\n     */\n    public build(sceneObjects: GameObject[]): void {\n        if (sceneObjects.length === 0) {\n            this.root = null;\n            return;\n        }\n\n        // 计算所有对象的包围盒\n        const boundsList: Bounds[] = [];\n        for (const obj of sceneObjects) {\n            const bounds = this.calculateObjectBounds(obj);\n            if (bounds) {\n                boundsList.push(bounds);\n            }\n        }\n\n        // 构建BVH树\n        this.root = this.buildRecursive(boundsList, sceneObjects, 0);\n    }\n\n    /**\n     * 递归构建BVH节点\n     */\n    private buildRecursive(\n        boundsList: Bounds[], \n        objects: GameObject[], \n        depth: number\n    ): BVHNode {\n        // 终止条件：对象数量少或达到最大深度\n        if (objects.length <= this.maxObjectsPerNode || depth >= this.maxDepth) {\n            const node = new BVHNode(this.calculateCombinedBounds(boundsList));\n            node.gameObject = objects.length === 1 ? objects[0] : null;\n            node.isLeaf = true;\n            return node;\n        }\n\n        // 选择分割轴（选择方差最大的轴）\n        const axis = this.selectSplitAxis(boundsList);\n        \n        // 按选中轴排序对象\n        const sorted = this.sortObjectsByAxis(objects, boundsList, axis);\n        \n        // 分割点（中位数分割）\n        const mid = Math.floor(objects.length / 2);\n        \n        const leftBounds = boundsList.slice(0, mid);\n        const rightBounds = boundsList.slice(mid);\n        const leftObjects = objects.slice(0, mid);\n        const rightObjects = objects.slice(mid);\n\n        // 创建内部节点\n        const node = new BVHNode(this.calculateCombinedBounds(boundsList));\n        node.left = this.buildRecursive(leftBounds, leftObjects, depth + 1);\n        node.right = this.buildRecursive(rightBounds, rightObjects, depth + 1);\n        node.isLeaf = false;\n\n        return node;\n    }\n\n    /**\n     * 射线检测 - 找到所有相交对象\n     */\n    public raycast(rayOrigin: Vector3, rayDirection: Vector3, maxDistance: number = Infinity): GameObject[] {\n        const results: GameObject[] = [];\n        if (this.root) {\n            this.raycastRecursive(this.root, rayOrigin, rayDirection, maxDistance, results);\n        }\n        return results;\n    }\n\n    /**\n     * 递归射线检测\n     */\n    private raycastRecursive(\n        node: BVHNode, \n        rayOrigin: Vector3, \n        rayDirection: Vector3, \n        maxDistance: number, \n        results: GameObject[]\n    ): void {\n        if (!node.bounds.intersectsRay(rayOrigin, rayDirection, maxDistance)) {\n            return;\n        }\n\n        if (node.isLeaf) {\n            if (node.gameObject) {\n                results.push(node.gameObject);\n            }\n            return;\n        }\n\n        if (node.left) {\n            this.raycastRecursive(node.left, rayOrigin, rayDirection, maxDistance, results);\n        }\n        if (node.right) {\n            this.raycastRecursive(node.right, rayOrigin, rayDirection, maxDistance, results);\n        }\n    }\n\n    /**\n     * 计算对象包围盒\n     */\n    public calculateObjectBounds(obj: GameObject): Bounds | null {\n        // 这里需要实现具体的包围盒计算逻辑\n        // 可以根据对象的变换和渲染组件来计算实际包围盒\n        const transform = obj.transform;\n        if (!transform) return null;\n\n        const position = transform.worldPosition;\n        const scale = transform.worldScale;\n        \n        // 简单实现：假设每个对象都是单位立方体，根据变换缩放和平移\n        const halfSize = new Vector3(0.5 * scale.x, 0.5 * scale.y, 0.5 * scale.z);\n        return new Bounds(\n            position.subtract(halfSize),\n            position.add(halfSize)\n        );\n    }\n\n    /**\n     * 计算多个包围盒的合并包围盒\n     */\n    private calculateCombinedBounds(boundsList: Bounds[]): Bounds {\n        if (boundsList.length === 0) {\n            return new Bounds(new Vector3(0, 0, 0), new Vector3(0, 0, 0));\n        }\n\n        let min = boundsList[0].min.clone();\n        let max = boundsList[0].max.clone();\n\n        for (let i = 1; i < boundsList.length; i++) {\n            min = Vector3.min(min, boundsList[i].min);\n            max = Vector3.max(max, boundsList[i].max);\n        }\n\n        return new Bounds(min, max);\n    }\n\n    /**\n     * 选择最佳分割轴\n     */\n    private selectSplitAxis(boundsList: Bounds[]): number {\n        // 计算每个轴的方差，选择方差最大的轴\n        const variances = this.calculateAxisVariances(boundsList);\n        let bestAxis = 0;\n        let maxVariance = variances[0];\n\n        for (let i = 1; i < 3; i++) {\n            if (variances[i] > maxVariance) {\n                maxVariance = variances[i];\n                bestAxis = i;\n            }\n        }\n\n        return bestAxis;\n    }\n\n    /**\n     * 计算各轴方差\n     */\n    private calculateAxisVariances(boundsList: Bounds[]): number[] {\n        const centers: Vector3[] = [];\n        for (const bounds of boundsList) {\n            centers.push(bounds.center);\n        }\n\n        const variances = [0, 0, 0];\n        for (let axis = 0; axis < 3; axis++) {\n            const mean = centers.reduce((sum, center) => sum + center.getComponent(axis), 0) / centers.length;\n            variances[axis] = centers.reduce((sum, center) => {\n                const diff = center.getComponent(axis) - mean;\n                return sum + diff * diff;\n            }, 0) / centers.length;\n        }\n\n        return variances;\n    }\n\n    /**\n     * 按指定轴排序对象\n     */\n    private sortObjectsByAxis(\n        objects: GameObject[], \n        boundsList: Bounds[], \n        axis: number\n    ): GameObject[] {\n        const sortedIndices = boundsList\n            .map((bounds, index) => ({\n                index,\n                center: bounds.center.getComponent(axis)\n            }))\n            .sort((a, b) => a.center - b.center)\n            .map(item => item.index);\n\n        return sortedIndices.map(index => objects[index]);\n    }\n}","import { Vector3 } from \"./Vector3\";\n\n/**\n * 轴对齐包围盒 (AABB)\n * 最简单的包围盒，边与坐标轴平行\n */\nexport class Bounds {\n    public readonly min: Vector3;\n    public readonly max: Vector3;\n    public readonly center: Vector3;\n    public readonly halfExtents: Vector3;\n    // 定义8个顶点\n    public readonly vertices: Vector3[];\n    // 定义12条边的顶点索引对 (每个面4条边，共6个面，但共享边只画一次)\n    public readonly edges = [\n        [0, 1], [1, 2], [2, 3], [3, 0], // 后面\n        [4, 5], [5, 6], [6, 7], [7, 4], // 前面\n        [0, 4], [1, 5], [2, 6], [3, 7]  // 连接前后的边\n    ];\n\n    constructor(min: Vector3 = Vector3.ZERO, max: Vector3 = Vector3.ZERO) {\n        this.min = min;\n        this.max = max;\n\n        // 计算中心点\n        this.center = new Vector3();\n        this.center.x = (this.min.x + this.max.x) / 2;\n        this.center.y = (this.min.y + this.max.y) / 2;\n        this.center.z = (this.min.z + this.max.z) / 2;\n\n        // 计算半长（从中心到各边的距离）\n        this.halfExtents = new Vector3();\n        this.halfExtents.x = (this.max.x - this.min.x) / 2;\n        this.halfExtents.y = (this.max.y - this.min.y) / 2;\n        this.halfExtents.z = (this.max.z - this.min.z) / 2;\n\n        // 计算8个顶点\n        this.vertices = new Array<Vector3>(8);\n        this.vertices[0] = new Vector3(this.min.x, this.min.y, this.min.z); // 左下后\n        this.vertices[1] = new Vector3(this.max.x, this.min.y, this.min.z); // 右下后\n        this.vertices[2] = new Vector3(this.max.x, this.max.y, this.min.z); // 右上后\n        this.vertices[3] = new Vector3(this.min.x, this.max.y, this.min.z); // 左上后\n        this.vertices[4] = new Vector3(this.min.x, this.min.y, this.max.z); // 左下前\n        this.vertices[5] = new Vector3(this.max.x, this.min.y, this.max.z); // 右下前\n        this.vertices[6] = new Vector3(this.max.x, this.max.y, this.max.z); // 右上前\n        this.vertices[7] = new Vector3(this.min.x, this.max.y, this.max.z); // 左上前\n    }\n\n    /**\n     * 射线与包围盒相交检测\n     */\n    public intersectsRay(rayOrigin: Vector3, rayDirection: Vector3, maxDistance: number): boolean {\n        // 使用slab方法进行射线与AABB相交检测\n        let tmin = 0;\n        let tmax = maxDistance;\n\n        for (let i = 0; i < 3; i++) {\n            const invD = 1.0 / rayDirection.getComponent(i);\n            let t0 = (this.min.getComponent(i) - rayOrigin.getComponent(i)) * invD;\n            let t1 = (this.max.getComponent(i) - rayOrigin.getComponent(i)) * invD;\n\n            if (invD < 0) {\n                [t0, t1] = [t1, t0];\n            }\n\n            tmin = Math.max(tmin, t0);\n            tmax = Math.min(tmax, t1);\n\n            if (tmax <= tmin) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 计算射线与包围盒的相交距离\n     */\n    public rayIntersectDistance(rayOrigin: Vector3, rayDirection: Vector3): number {\n        // 简化的相交距离计算\n        const center = this.center;\n        const toCenter = center.subtract(rayOrigin);\n        return toCenter.dot(rayDirection);\n    }\n\n    // /**\n    //  * 获取包围盒在指定方向上的极值顶点\n    //  * @param bounds 包围盒\n    //  * @param direction 方向向量\n    //  * @param positive 是否获取正方向的极值顶点\n    //  * @returns 极值顶点\n    //  */\n    // public getExtremeVertex(direction: Vector3, positive: boolean): Vector3 {\n    //     // 创建一个新的顶点用于计算\n    //     const vertex = new Vector3();\n        \n    //     // 对于每个轴，根据方向向量的分量符号选择min或max\n    //     vertex.x = direction.x > 0 === positive ? this.max.x : this.min.x;\n    //     vertex.y = direction.y > 0 === positive ? this.max.y : this.min.y;\n    //     vertex.z = direction.z > 0 === positive ? this.max.z : this.min.z;\n        \n    //     return vertex;\n    // }\n\n    public static fromPoints(points: Vector3[]): Bounds {\n        if (points.length === 0) return new Bounds();\n\n        let min = new Vector3(points[0].x, points[0].y, points[0].z);\n        let max = new Vector3(points[0].x, points[0].y, points[0].z);\n\n        for (const p of points) {\n            min.x = Math.min(min.x, p.x);\n            min.y = Math.min(min.y, p.y);\n            min.z = Math.min(min.z, p.z);\n\n            max.x = Math.max(max.x, p.x);\n            max.y = Math.max(max.y, p.y);\n            max.z = Math.max(max.z, p.z);\n        }\n\n        // 假设Bounds有min和max属性\n        const bounds = new Bounds(min, max);\n        return bounds;\n    }\n}\n\n/**\n * 球体包围盒\n * 用球心和半径表示的简化包围体\n */\nclass Sphere {\n    center: Vector3;\n    radius: number;\n\n    constructor(center: Vector3, radius: number) {\n        this.center = center;\n        this.radius = radius;\n    }\n\n    /**\n     * 从顶点列表生成球体包围盒\n     * 算法思路：先计算所有顶点的中心点，再找到离中心点最远的顶点作为半径\n     * @param vertices 三维顶点数组\n     * @returns 生成的球体\n     */\n    static fromVertices(vertices: Vector3[]): Sphere {\n        if (vertices.length === 0) {\n            throw new Error(\"顶点数组不能为空\");\n        }\n\n        // 1. 计算中心点（平均值）\n        const center = new Vector3();\n        for (const v of vertices) {\n            center.x += v.x;\n            center.y += v.y;\n            center.z += v.z;\n        }\n        center.x /= vertices.length;\n        center.y /= vertices.length;\n        center.z /= vertices.length;\n\n        // 2. 找到离中心点最远的顶点，其距离即为半径\n        let maxDistanceSquared = 0;\n        for (const v of vertices) {\n            const dx = v.x - center.x;\n            const dy = v.y - center.y;\n            const dz = v.z - center.z;\n            const distanceSquared = dx * dx + dy * dy + dz * dz;\n\n            if (distanceSquared > maxDistanceSquared) {\n                maxDistanceSquared = distanceSquared;\n            }\n        }\n\n        const radius = Math.sqrt(maxDistanceSquared);\n        return new Sphere(center, radius);\n    }\n\n    /**\n     * 从AABB生成球体包围盒\n     * @param aabb 轴对齐包围盒\n     * @returns 生成的球体\n     */\n    static fromAABB(aabb: Bounds): Sphere {\n        const center = aabb.center;\n        const halfExtents = aabb.halfExtents;\n        // 半径是从中心到角落的距离\n        const radius = halfExtents.magnitude;\n        return new Sphere(center, radius);\n    }\n}","import { BlendOp } from \"../Renderer/RendererDefine\";\n\nexport class Color {\n    // public static readonly WHITE = Object.freeze(new Color(1, 1, 1, 1)) as Readonly<Color>;\n    public static get WHITE() { return new Color(1, 1, 1, 1); }\n    public static get BLACK() { return new Color(0, 0, 0, 1); }\n    public static get GRAY() { return new Color(0.5, 0.5, 0.5, 1); }\n    public static get RED() { return new Color(1, 0, 0, 1); }\n    public static get GREEN() { return new Color(0, 1, 0, 1); }\n    public static get BLUE() { return new Color(0, 0, 1, 1); }\n    public static get YELLOW() { return new Color(1, 1, 0, 1); }\n    public static get CYAN() { return new Color(0, 1, 1, 1); }\n    public static get MAGENTA() { return new Color(1, 0, 1, 1); }\n    public static get ORANGE() { return new Color(1, 0.647, 0, 1); }\n    public static get PURPLE() { return new Color(0.502, 0, 0.502, 1); }\n    public static get BROWN() { return new Color(0.647, 0.165, 0, 1); }\n    public static get MAROON() { return new Color(0.5, 0, 0, 1); }\n    public static get CLEAR() { return new Color(0, 0, 0, 0); }\n\n    public r: number;\n    public g: number;\n    public b: number;\n    public a: number;\n\n\n    constructor(r: number, g: number, b: number, a: number = 1) {\n        this.r = Color.clamp01(r);\n        this.g = Color.clamp01(g);\n        this.b = Color.clamp01(b);\n        this.a = Color.clamp01(a);\n    }\n\n    public clone(): Color {\n        return new Color(this.r, this.g, this.b, this.a);\n    }\n\n    public add(c: Color): Color {\n        this.r = Color.clamp01(this.r + c.r);\n        this.g = Color.clamp01(this.g + c.g);\n        this.b = Color.clamp01(this.b + c.b);\n        this.a = Color.clamp01(this.a + c.a);\n        return this;\n    }\n\n    public subtract(c: Color): Color {\n        this.r = Color.clamp01(this.r - c.r);\n        this.g = Color.clamp01(this.g - c.g);\n        this.b = Color.clamp01(this.b - c.b);\n        this.a = Color.clamp01(this.a - c.a);\n        return this;\n    }\n\n    public multiply(c: Color): Color {\n        this.r = Color.clamp01(this.r * c.r);\n        this.g = Color.clamp01(this.g * c.g);\n        this.b = Color.clamp01(this.b * c.b);\n        this.a = Color.clamp01(this.a * c.a);\n        return this;\n    }\n\n    public multiplyScalar(scalar: number): Color {\n        this.r = Color.clamp01(this.r * scalar);\n        this.g = Color.clamp01(this.g * scalar);\n        this.b = Color.clamp01(this.b * scalar);\n        this.a = Color.clamp01(this.a * scalar);\n        return this;\n    }\n\n    public ToUint32() {\n        return ((this.a * 255) << 24) | ((this.b * 255) << 16) | ((this.g * 255) << 8) | (this.r * 255);\n    }\n\n    public static FromUint32(uint32: number) {\n        return new Color(\n            (uint32 & 0xFF) / 255,\n            ((uint32 >> 8) & 0xFF) / 255,\n            ((uint32 >> 16) & 0xFF) / 255,\n            ((uint32 >> 24) & 0xFF) / 255\n        );\n    }\n\n    public static add(c1: Color, c2: Color): Color {\n        return new Color(\n            Color.clamp01(c1.r + c2.r),\n            Color.clamp01(c1.g + c2.g),\n            Color.clamp01(c1.b + c2.b),\n            Color.clamp01(c1.a + c2.a)\n        );\n    }\n\n    public static subtract(c1: Color, c2: Color): Color {\n        return new Color(\n            Color.clamp01(c1.r - c2.r),\n            Color.clamp01(c1.g - c2.g),\n            Color.clamp01(c1.b - c2.b),\n            Color.clamp01(c1.a - c2.a)\n        );\n    }\n\n    public static multiply(c1: Color, c2: Color): Color {\n        return new Color(\n            Color.clamp01(c1.r * c2.r),\n            Color.clamp01(c1.g * c2.g),\n            Color.clamp01(c1.b * c2.b),\n            Color.clamp01(c1.a * c2.a)\n        );\n    }\n\n    public static multiplyScalar(c: Color, scalar: number): Color {\n        return new Color(\n            Color.clamp01(c.r * scalar),\n            Color.clamp01(c.g * scalar),\n            Color.clamp01(c.b * scalar),\n            Color.clamp01(c.a * scalar)\n        );\n    }\n\n    public static lerp(c1: Color, c2: Color, t: number): Color {\n        t = Color.clamp01(t);\n        return new Color(\n            Color.clamp01(c1.r + (c2.r - c1.r) * t),\n            Color.clamp01(c1.g + (c2.g - c1.g) * t),\n            Color.clamp01(c1.b + (c2.b - c1.b) * t),\n            Color.clamp01(c1.a + (c2.a - c1.a) * t)\n        );\n    }\n\n    /**\n     * 颜色混合方法\n     * 支持多种混合模式\n     */\n    // public static blendColors(dest: Color, src: Color, mode: BlendOp): Color {\n    //     // 提取目标颜色分量 (ARGB格式)\n    //     const destA = dest.a;\n    //     const destR = dest.r;\n    //     const destG = dest.g;\n    //     const destB = dest.b;\n\n    //     // 提取源颜色分量 (ARGB格式)\n    //     const srcA = src.a;\n    //     const srcR = src.r;\n    //     const srcG = src.g;\n    //     const srcB = src.b;\n\n    //     let resultA, resultR, resultG, resultB;\n\n    //     switch (mode) {\n    //         case BlendOp.AlphaBlend:\n    //             // Alpha 混合 (最常用的混合模式)\n    //             const alpha = srcA;\n    //             const invAlpha = 1 - alpha;\n\n    //             resultA = Math.min(1, destA + srcA - (destA * srcA));\n    //             resultR = srcR * alpha + destR * invAlpha;\n    //             resultG = srcG * alpha + destG * invAlpha;\n    //             resultB = srcB * alpha + destB * invAlpha;\n    //             break;\n\n    //         case BlendOp.Additive:\n    //             // 加法混合 (颜色叠加)\n    //             resultA = Math.min(1, destA + srcA);\n    //             resultR = Math.min(1, destR + srcR);\n    //             resultG = Math.min(1, destG + srcG);\n    //             resultB = Math.min(1, destB + srcB);\n    //             break;\n\n    //         case BlendOp.Multiply:\n    //             // 乘法混合 (颜色相乘)\n    //             resultA = Math.min(1, destA);\n    //             resultR = destR * srcR;\n    //             resultG = destG * srcG;\n    //             resultB = destB * srcB;\n    //             break;\n\n    //         case BlendOp.Off:\n    //         default:\n    //             // 直接替换\n    //             return src.clone();\n    //     }\n\n    //     // 组合颜色分量\n    //     return new Color(resultR, resultG, resultB, resultA);\n    // }\n\n    private static clamp01(value: number): number {\n        return Math.max(0, Math.min(1, value));\n    }\n}","import { Vector4 } from \"./Vector4\";\nimport { Vector3 } from \"./Vector3\";\nimport { Quaternion } from \"./Quaternion\";\n\nexport class Matrix4x4 {\n\n    public matrix: Array<Array<number>> = new Array<Array<number>>();\n\n    public constructor();\n    public constructor(column0: Vector4, column1: Vector4, column2: Vector4, column3: Vector4);\n    public constructor() {\n        if (arguments.length == 4) {\n            for (let i = 0; i < 4; i++) {\n                let v = arguments[i] as Vector4;\n                this.matrix[i] = new Array<number>(v.x, v.y, v.z, v.w);\n            }\n        }\n        else {\n            for (let i = 0; i < 4; i++) {\n                this.matrix[i] = new Array<number>(0, 0, 0, 0);\n            }\n        }\n    }\n\n    /**\n     * \n     * @param index 行\n     */\n    public getRow(index: number): Vector4 {\n        var c = this.matrix[index];\n        return new Vector4(c[0], c[1], c[2], c[3]);\n    }\n\n    /**\n     * \n     * @param index 列\n     */\n    public getColumn(index: number): Vector4 {\n        return new Vector4(this.matrix[0][index], this.matrix[1][index], this.matrix[2][index], this.matrix[3][index]);\n    }\n\n    public SetRow(index: number, row: Vector4) {\n        this.matrix[index][0] = row.x;\n        this.matrix[index][1] = row.y;\n        this.matrix[index][2] = row.z;\n        this.matrix[index][3] = row.w;\n    }\n\n    public SetColumn(index: number, column: Vector4) {\n        this.matrix[0][index] = column.x;\n        this.matrix[1][index] = column.y;\n        this.matrix[2][index] = column.z;\n        this.matrix[3][index] = column.w;\n    }\n\n    public multiply(m: Matrix4x4): Matrix4x4 {\n        let lhs = this.matrix;\n        let rhs = m.matrix;\n        let matrix = new Matrix4x4().matrix;\n\n        matrix[0][0] = lhs[0][0] * rhs[0][0] + lhs[0][1] * rhs[1][0] + lhs[0][2] * rhs[2][0] + lhs[0][3] * rhs[3][0];\n        matrix[0][1] = lhs[0][0] * rhs[0][1] + lhs[0][1] * rhs[1][1] + lhs[0][2] * rhs[2][1] + lhs[0][3] * rhs[3][1];\n        matrix[0][2] = lhs[0][0] * rhs[0][2] + lhs[0][1] * rhs[1][2] + lhs[0][2] * rhs[2][2] + lhs[0][3] * rhs[3][2];\n        matrix[0][3] = lhs[0][0] * rhs[0][3] + lhs[0][1] * rhs[1][3] + lhs[0][2] * rhs[2][3] + lhs[0][3] * rhs[3][3];\n        matrix[1][0] = lhs[1][0] * rhs[0][0] + lhs[1][1] * rhs[1][0] + lhs[1][2] * rhs[2][0] + lhs[1][3] * rhs[3][0];\n        matrix[1][1] = lhs[1][0] * rhs[0][1] + lhs[1][1] * rhs[1][1] + lhs[1][2] * rhs[2][1] + lhs[1][3] * rhs[3][1];\n        matrix[1][2] = lhs[1][0] * rhs[0][2] + lhs[1][1] * rhs[1][2] + lhs[1][2] * rhs[2][2] + lhs[1][3] * rhs[3][2];\n        matrix[1][3] = lhs[1][0] * rhs[0][3] + lhs[1][1] * rhs[1][3] + lhs[1][2] * rhs[2][3] + lhs[1][3] * rhs[3][3];\n        matrix[2][0] = lhs[2][0] * rhs[0][0] + lhs[2][1] * rhs[1][0] + lhs[2][2] * rhs[2][0] + lhs[2][3] * rhs[3][0];\n        matrix[2][1] = lhs[2][0] * rhs[0][1] + lhs[2][1] * rhs[1][1] + lhs[2][2] * rhs[2][1] + lhs[2][3] * rhs[3][1];\n        matrix[2][2] = lhs[2][0] * rhs[0][2] + lhs[2][1] * rhs[1][2] + lhs[2][2] * rhs[2][2] + lhs[2][3] * rhs[3][2];\n        matrix[2][3] = lhs[2][0] * rhs[0][3] + lhs[2][1] * rhs[1][3] + lhs[2][2] * rhs[2][3] + lhs[2][3] * rhs[3][3];\n        matrix[3][0] = lhs[3][0] * rhs[0][0] + lhs[3][1] * rhs[1][0] + lhs[3][2] * rhs[2][0] + lhs[3][3] * rhs[3][0];\n        matrix[3][1] = lhs[3][0] * rhs[0][1] + lhs[3][1] * rhs[1][1] + lhs[3][2] * rhs[2][1] + lhs[3][3] * rhs[3][1];\n        matrix[3][2] = lhs[3][0] * rhs[0][2] + lhs[3][1] * rhs[1][2] + lhs[3][2] * rhs[2][2] + lhs[3][3] * rhs[3][2];\n        matrix[3][3] = lhs[3][0] * rhs[0][3] + lhs[3][1] * rhs[1][3] + lhs[3][2] * rhs[2][3] + lhs[3][3] * rhs[3][3];\n\n        this.matrix = matrix;\n        return this;\n    }\n\n    public multiplyVector3(v: Vector3): Vector3 {\n        let res = new Vector3();\n        let m = this.matrix;\n\n        res.x = m[0][0] * v.x + m[0][1] * v.y + m[0][2] * v.z;\n        res.y = m[1][0] * v.x + m[1][1] * v.y + m[1][2] * v.z;\n        res.z = m[2][0] * v.x + m[2][1] * v.y + m[2][2] * v.z;\n\n        return res;\n    }\n\n    // 当w = 1时，齐次坐标(x, y, z, 1)表示 3D 空间中的点(x, y, z)\n    // 当w = 0时，齐次坐标(x, y, z, 0)表示 3D 空间中的方向向量（无位置信息）\n    public multiplyVector4(v: Vector4): Vector4 {\n        let res = new Vector4();\n        let m = this.matrix;\n\n        res.x = m[0][0] * v.x + m[0][1] * v.y + m[0][2] * v.z + m[0][3] * v.w;\n        res.y = m[1][0] * v.x + m[1][1] * v.y + m[1][2] * v.z + m[1][3] * v.w;\n        res.z = m[2][0] * v.x + m[2][1] * v.y + m[2][2] * v.z + m[2][3] * v.w;\n        res.w = m[3][0] * v.x + m[3][1] * v.y + m[3][2] * v.z + m[3][3] * v.w;\n\n        return res;\n    }\n\n    public getTranslate(): Vector3 {\n        let m = this.matrix;\n        return new Vector3(m[0][3], m[1][3], m[2][3]);\n    }\n\n    public setTranslate(v: Vector3) {\n        let m = this.matrix;\n        m[0][3] = v.x;\n        m[1][3] = v.y;\n        m[2][3] = v.z;\n    }\n\n    // public getRotate(): Vector3 {\n    //     let mat = this.matrix;\n\n    //     let x = Math.atan2(mat[1][2], mat[2][2]);\n    //     let y = Math.atan2(-mat[0][2], Math.sqrt(mat[1][2] * mat[1][2] + mat[2][2] * mat[2][2]));\n    //     let z = Math.atan2(mat[0][1], mat[0][0]);\n\n    //     return new Vector3(x / Math.PI * 180, y / Math.PI * 180, z / Math.PI * 180);\n    // }\n\n    public getRotate(): Quaternion {\n        //一定要获取纯净的旋转矩阵，即去除缩放倍率\n        let mat = this.getRotateMatrix().matrix;\n        let q = new Quaternion();\n\n        var trace = mat[0][0] + mat[1][1] + mat[2][2]; // I removed + 1.0f; see discussion with Ethan\n        var s = 0;\n\n        if (trace > 0) {// I changed M_EPSILON to 0\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            q.w = 0.25 / s;\n            q.x = (mat[2][1] - mat[1][2]) * s;\n            q.y = (mat[0][2] - mat[2][0]) * s;\n            q.z = (mat[1][0] - mat[0][1]) * s;\n        } else {\n            if (mat[0][0] > mat[1][1] && mat[0][0] > mat[2][2]) {\n                s = 2.0 * Math.sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]);\n                q.w = (mat[2][1] - mat[1][2]) / s;\n                q.x = 0.25 * s;\n                q.y = (mat[0][1] + mat[1][0]) / s;\n                q.z = (mat[0][2] + mat[2][0]) / s;\n            } else if (mat[1][1] > mat[2][2]) {\n                s = 2.0 * Math.sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]);\n                q.w = (mat[0][2] - mat[2][0]) / s;\n                q.x = (mat[0][1] + mat[1][0]) / s;\n                q.y = 0.25 * s;\n                q.z = (mat[1][2] + mat[2][1]) / s;\n            } else {\n                s = 2.0 * Math.sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]);\n                q.w = (mat[1][0] - mat[0][1]) / s;\n                q.x = (mat[0][2] + mat[2][0]) / s;\n                q.y = (mat[1][2] + mat[2][1]) / s;\n                q.z = 0.25 * s;\n            }\n        }\n\n        return q;\n    }\n\n    public getRotateMatrix(): Matrix4x4 {\n        //https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js\n        //因为旋转矩阵比较特殊，有时候要单独处理，所有拥有一个提取方法\n        //提取方式很简单，先获取缩放值，然后利用获取缩放值的原理，逆向除去缩放值，就得到纯净的旋转矩阵\n        //此方法不支持反射矩阵\n\n        var mat = new Matrix4x4();\n        var te = mat.matrix;\n        var me = this.matrix;\n\n        var scale = this.getScale();\n        var scaleX = 1 / scale.x;\n        var scaleY = 1 / scale.y;\n        var scaleZ = 1 / scale.z;\n\n        te[0][0] = me[0][0] * scaleX;\n        te[1][0] = me[1][0] * scaleX;\n        te[2][0] = me[2][0] * scaleX;\n        te[3][0] = 0;\n\n        te[0][1] = me[0][1] * scaleY;\n        te[1][1] = me[1][1] * scaleY;\n        te[2][1] = me[2][1] * scaleY;\n        te[3][1] = 0;\n\n        te[0][2] = me[0][2] * scaleZ;\n        te[1][2] = me[1][2] * scaleZ;\n        te[2][2] = me[2][2] * scaleZ;\n        te[3][2] = 0;\n\n        te[0][3] = 0;\n        te[1][3] = 0;\n        te[2][3] = 0;\n        te[3][3] = 1;\n\n        return mat;\n    }\n\n    public getEulerAngles(): Vector3 {\n        //https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js\n        //从旋转矩阵里获取欧拉角\n        //必须是纯净的旋转矩阵\n\n        var angle = new Vector3();\n\n        var te = this.getRotateMatrix().matrix;\n        var m11 = te[0][0], m12 = te[0][1], m13 = te[0][2];\n        var m21 = te[1][0], m22 = te[1][1], m23 = te[1][2];\n        var m31 = te[2][0], m32 = te[2][1], m33 = te[2][2];\n\n        m13 = m13 > 1 ? 1 : m13;\n        m13 = m13 < -1 ? -1 : m13;\n        angle.y = Math.asin(m13);\n\n        if (Math.abs(m13) < 0.9999999) {\n            angle.x = Math.atan2(-m23, m33);\n            angle.z = Math.atan2(-m12, m11);\n        } else {\n            angle.x = Math.atan2(m32, m22);\n            angle.z = 0;\n        }\n\n        return new Vector3(angle.x / Math.PI * 180, angle.y / Math.PI * 180, angle.z / Math.PI * 180);\n    }\n\n    public getScale(): Vector3 {\n        let m = this.matrix;\n        let v = new Vector3();\n\n        v.x = Math.sqrt(m[0][0] * m[0][0] + m[1][0] * m[1][0] + m[2][0] * m[2][0]);\n        v.y = Math.sqrt(m[0][1] * m[0][1] + m[1][1] * m[1][1] + m[2][1] * m[2][1]);\n        v.z = Math.sqrt(m[0][2] * m[0][2] + m[1][2] * m[1][2] + m[2][2] * m[2][2]);\n\n        return v;\n    }\n\n    // 转置矩阵\n    public transpose(): Matrix4x4 {\n        let m1 = this.matrix;\n        var m2 = new Matrix4x4().matrix;\n\n        m2[0][0] = m1[0][0]; m2[0][1] = m1[1][0]; m2[0][2] = m1[2][0]; m2[0][3] = m1[3][0];\n        m2[1][0] = m1[0][1]; m2[1][1] = m1[1][1]; m2[1][2] = m1[2][1]; m2[1][3] = m1[3][1];\n        m2[2][0] = m1[0][2]; m2[2][1] = m1[1][2]; m2[2][2] = m1[2][2]; m2[2][3] = m1[3][2];\n        m2[3][0] = m1[0][3]; m2[3][1] = m1[1][3]; m2[3][2] = m1[2][3]; m2[3][3] = m1[3][3];\n\n        this.matrix = m2;\n        return this;\n    }\n\n    public translate(pos: Vector3): Matrix4x4 {\n        let m = Matrix4x4.getTranslateMatrix(pos);\n        this.matrix = m.multiply(this).matrix;\n        return this;\n    }\n\n    public rotate(q: Quaternion): Matrix4x4;\n    public rotate(eulerAngles: Vector3): Matrix4x4;\n    public rotate(angle: number, axis: Vector3): Matrix4x4;\n    public rotate(): Matrix4x4 {\n        let m = new Matrix4x4();\n\n        if (arguments[0] instanceof Quaternion) {\n            m = Matrix4x4.getRotateMatrixByQuaternion(arguments[0]);\n        }\n        else if (arguments[0] instanceof Vector3) {\n            m = Matrix4x4.getRotateMatrixByEulerAngles(arguments[0]);\n        }\n        else {\n            m = Matrix4x4.getRotateMatrixByAxis(arguments[0], arguments[1]);\n        }\n\n        this.matrix = m.multiply(this).matrix;\n        return this;\n    }\n\n    public scale(s: Vector3): Matrix4x4 {\n        let m = Matrix4x4.getScaleMatrix(s);\n        this.matrix = m.multiply(this).matrix;\n        return this;\n    }\n\n    public lookAt(target: Vector3): Matrix4x4 {\n        throw new Error(\"LookRotation not implemented\");\n    }\n\n    //转换到摄影机看向的矩阵里\n    public transformToLookAtSpace(eye: Vector3, targetPoint: Vector3, up: Vector3 = Vector3.UP): Matrix4x4 {\n        //从哪里看向哪里，也可以理解为摄影机视角，即观察空间\n        //若要变换到摄影机空间，可以假设整个观察空间以摄影机位于世界坐标原点，然后将所有物体朝摄影机原先在世界空间中的位置反向移动即可\n        //在纸上画下图就清晰了\n\n        //由于默认矩阵是SRT顺序组成的变换空间，要逆向，则是TRS的顺序，即先移动后旋转\n        //1.向反方向平移\n        this.translate(new Vector3(-eye.x, -eye.y, -eye.z));\n\n        //2.向反方向旋转\n        //先获取摄影世界部坐标轴\n        var zAxis = Vector3.difference(eye, targetPoint).normalize();\n        //因为我们是右手系统，要求X，则必须z乘y\n        var xAxis = Vector3.cross(up, zAxis).normalize();\n        var yAxis = Vector3.cross(zAxis, xAxis).normalize();\n        //构建摄影机反方向旋转矩阵\n        var mat = new Matrix4x4(\n            new Vector4(xAxis),\n            new Vector4(yAxis),\n            new Vector4(zAxis),\n            new Vector4(0, 0, 0, 1));\n\n        this.matrix = mat.multiply(this).matrix;\n        return this;\n    }\n\n    public frustum(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4x4 {\n        const rl = (right - left)\n        const tb = (top - bottom)\n        const fn = (far - near)\n\n        var mat = new Matrix4x4(\n            new Vector4((near * 2) / rl, 0, (right + left) / rl, 0),\n            new Vector4(0, (near * 2) / tb, (top + bottom) / tb, 0),\n            new Vector4(0, 0, -(far + near) / fn, -(far * near * 2) / fn),\n            new Vector4(0, 0, -1, 0)\n        );\n\n        this.matrix = mat.multiply(this).matrix;\n        return this;\n    }\n\n    public orthographic(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4x4 {\n        const rl = (right - left)\n        const tb = (top - bottom)\n        const fn = (far - near)\n\n        var mat = new Matrix4x4(\n            new Vector4(2 / rl, 0, 0, -(left + right) / rl),\n            new Vector4(0, 2 / tb, 0, -(top + bottom) / tb),\n            new Vector4(0, 0, -2 / fn, -(far + near) / fn),\n            new Vector4(0, 0, 0, 1)\n        );\n\n        this.matrix = mat.multiply(this).matrix;\n        return this;\n    }\n\n    public perspective(fov: number, aspect: number, near: number, far: number): Matrix4x4 {\n        const hfov = fov / 180 * Math.PI / 2;\n        const tan = Math.tan(hfov);\n\n        var mat = new Matrix4x4(\n            new Vector4(1 / (aspect * tan), 0, 0, 0),\n            new Vector4(0, 1 / tan, 0, 0),\n            new Vector4(0, 0, -(far + near) / (far - near), -(2 * far * near) / (far - near)),\n            new Vector4(0, 0, -1, 0)\n        );\n\n        this.matrix = mat.multiply(this).matrix;\n        return this;\n    }\n\n    // 通过​​代数余子式法（Cofactor Method）​​ 来计算一个 4x4 方阵的逆矩阵\n    public invert(): Matrix4x4 {\n        var mat = this.matrix;\n\n        const a00 = mat[0][0];\n        const a01 = mat[0][1];\n        const a02 = mat[0][2];\n        const a03 = mat[0][3];\n        const a10 = mat[1][0];\n        const a11 = mat[1][1];\n        const a12 = mat[1][2];\n        const a13 = mat[1][3];\n        const a20 = mat[2][0];\n        const a21 = mat[2][1];\n        const a22 = mat[2][2];\n        const a23 = mat[2][3];\n        const a30 = mat[3][0];\n        const a31 = mat[3][1];\n        const a32 = mat[3][2];\n        const a33 = mat[3][3];\n\n        const det00 = a00 * a11 - a01 * a10\n        const det01 = a00 * a12 - a02 * a10\n        const det02 = a00 * a13 - a03 * a10\n        const det03 = a01 * a12 - a02 * a11\n        const det04 = a01 * a13 - a03 * a11\n        const det05 = a02 * a13 - a03 * a12\n        const det06 = a20 * a31 - a21 * a30\n        const det07 = a20 * a32 - a22 * a30\n        const det08 = a20 * a33 - a23 * a30\n        const det09 = a21 * a32 - a22 * a31\n        const det10 = a21 * a33 - a23 * a31\n        const det11 = a22 * a33 - a23 * a32\n\n        let det = (det00 * det11 - det01 * det10 + det02 * det09 + det03 * det08 - det04 * det07 + det05 * det06);\n\n        if (!det) {\n            console.error(\"Matrix4x4 inverse failed, determinant is 0\");\n            // return null;\n        }\n\n        det = 1.0 / det;\n\n        mat[0][0] = (a11 * det11 - a12 * det10 + a13 * det09) * det\n        mat[0][1] = (-a01 * det11 + a02 * det10 - a03 * det09) * det\n        mat[0][2] = (a31 * det05 - a32 * det04 + a33 * det03) * det\n        mat[0][3] = (-a21 * det05 + a22 * det04 - a23 * det03) * det\n        mat[1][0] = (-a10 * det11 + a12 * det08 - a13 * det07) * det\n        mat[1][1] = (a00 * det11 - a02 * det08 + a03 * det07) * det\n        mat[1][2] = (-a30 * det05 + a32 * det02 - a33 * det01) * det\n        mat[1][3] = (a20 * det05 - a22 * det02 + a23 * det01) * det\n        mat[2][0] = (a10 * det10 - a11 * det08 + a13 * det06) * det\n        mat[2][1] = (-a00 * det10 + a01 * det08 - a03 * det06) * det\n        mat[2][2] = (a30 * det04 - a31 * det02 + a33 * det00) * det\n        mat[2][3] = (-a20 * det04 + a21 * det02 - a23 * det00) * det\n        mat[3][0] = (-a10 * det09 + a11 * det07 - a12 * det06) * det\n        mat[3][1] = (a00 * det09 - a01 * det07 + a02 * det06) * det\n        mat[3][2] = (-a30 * det03 + a31 * det01 - a32 * det00) * det\n        mat[3][3] = (a20 * det03 - a21 * det01 + a22 * det00) * det\n\n        return this;\n    }\n\n    public toFloat32List(): Float32List {\n        let m = this.matrix;\n        //由于OpenGL是列序存储，所以需要转置一下矩阵\n        return new Float32Array([\n            m[0][0], m[1][0], m[2][0], m[3][0],\n            m[0][1], m[1][1], m[2][1], m[3][1],\n            m[0][2], m[1][2], m[2][2], m[3][2],\n            m[0][3], m[1][3], m[2][3], m[3][3]\n        ]);\n    }\n\n    public clone(): Matrix4x4 {\n        return new Matrix4x4(\n            this.getRow(0),\n            this.getRow(1),\n            this.getRow(2),\n            this.getRow(3),\n        );\n    }\n\n    /*\n     STATIC FUNCTIONS\n     */\n\n    public static getTRSMatrix(pos: Vector3, quat: Quaternion, scale: Vector3): Matrix4x4 {\n        let tm = Matrix4x4.getTranslateMatrix(pos);\n        let rm = Matrix4x4.getRotateMatrixByQuaternion(quat);\n        let sm = Matrix4x4.getScaleMatrix(scale);\n\n        //必须严格按照先Scale，再Rotate，再Translate的顺序，否则得到的结果肯定是不满意的\n        //例如有一个1X1正方形在原点，我们想要得到一个1X2，并且斜向45°，而且离坐标原点1个单位处\n        //如果先旋转，再缩放的话，旋转方向是对了，但是我们是将旋转后45°的正方形的Y轴拉伸2倍，得到的是一个被拉长的菱形\n        //如果先平移，再旋转的话，因为我们旋转都是绕着坐标原点的，结果自然是正方形不是自身旋转45°，而是绕着原点旋转\n        return tm.multiply(rm.multiply(sm));\n    }\n\n    public static getTranslateMatrix(pos: Vector3): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n\n        m[0][0] = 1; m[0][1] = 0; m[0][2] = 0; m[0][3] = pos.x;\n        m[1][0] = 0; m[1][1] = 1; m[1][2] = 0; m[1][3] = pos.y;\n        m[2][0] = 0; m[2][1] = 0; m[2][2] = 1; m[2][3] = pos.z;\n        m[3][0] = 0; m[3][1] = 0; m[3][2] = 0; m[3][3] = 1;\n\n        return result;\n    }\n\n    public static getRotateMatrixByQuaternion(q: Quaternion): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n\n        let num = q.x * 2;\n        let num2 = q.y * 2;\n        let num3 = q.z * 2;\n        let num4 = q.x * num;\n        let num5 = q.y * num2;\n        let num6 = q.z * num3;\n        let num7 = q.x * num2;\n        let num8 = q.x * num3;\n        let num9 = q.y * num3;\n        let num10 = q.w * num;\n        let num11 = q.w * num2;\n        let num12 = q.w * num3;\n\n        m[0][0] = 1 - (num5 + num6);\n        m[1][0] = num7 + num12;\n        m[2][0] = num8 - num11;\n        m[3][0] = 0;\n        m[0][1] = num7 - num12;\n        m[1][1] = 1 - (num4 + num6);\n        m[2][1] = num9 + num10;\n        m[3][1] = 0;\n        m[0][2] = num8 + num11;\n        m[1][2] = num9 - num10;\n        m[2][2] = 1 - (num4 + num5);\n        m[3][2] = 0;\n        m[0][3] = 0;\n        m[1][3] = 0;\n        m[2][3] = 0;\n        m[3][3] = 1;\n\n        return result;\n    }\n\n    public static getRotateMatrixByEulerAngles(e: Vector3, order: string = \"XYZ\"): Matrix4x4 {\n        //通过欧拉角获取旋转矩阵\n        //先分别获取XYZ轴上的旋转矩阵，然后合并起来\n        //注意：旋转轴的顺序先后不同，会出现不同的结果，因此必须要指定旋转顺序\n        //http://planning.cs.uiuc.edu/node102.html\n        //https://threejs.org/docs/#api/en/math/Euler.order\n        var x = Matrix4x4.getRotateMatrixByAxis(e.x, Vector3.RIGHT);\n        var y = Matrix4x4.getRotateMatrixByAxis(e.y, Vector3.UP);\n        var z = Matrix4x4.getRotateMatrixByAxis(e.z, Vector3.FORWARD);\n\n        switch (order) {\n            case \"XYZ\":\n                return z.multiply(y.multiply(x));\n            case \"XZY\":\n                return y.multiply(z.multiply(x));\n            case \"YXZ\":\n                return z.multiply(x.multiply(y));\n            case \"YZX\":\n                return x.multiply(z.multiply(y));\n            case \"ZXY\":\n                return y.multiply(x.multiply(z));\n            case \"ZYX\":\n                return x.multiply(y.multiply(z));\n            default:\n                console.error(\"Rotation order error, must be similar to 'XYZ'\");\n                return z.multiply(y.multiply(x));\n        }\n    }\n\n    public static getRotateMatrixByAxis(angle: number, axis: Vector3): Matrix4x4 {\n        var out = new Matrix4x4();\n        var m = out.matrix;\n        var x = axis.x, y = axis.y, z = axis.z;\n        var len = Math.sqrt(x * x + y * y + z * z);\n        var s = 0, c = 0, t = 0;\n\n        angle = Math.PI * angle / 180;\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n        s = Math.sin(angle);\n        c = Math.cos(angle);\n        t = 1 - c;\n        m[0][0] = x * x * t + c;\n        m[1][0] = y * x * t + z * s;\n        m[2][0] = z * x * t - y * s;\n        m[3][0] = 0;\n        m[0][1] = x * y * t - z * s;\n        m[1][1] = y * y * t + c;\n        m[2][1] = z * y * t + x * s;\n        m[3][1] = 0;\n        m[0][2] = x * z * t + y * s;\n        m[1][2] = y * z * t - x * s;\n        m[2][2] = z * z * t + c;\n        m[3][2] = 0;\n        m[0][3] = 0;\n        m[1][3] = 0;\n        m[2][3] = 0;\n        m[3][3] = 1;\n        return out;\n    }\n\n    public static getScaleMatrix(s: Vector3): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n\n        m[0][0] = s.x; m[0][1] = 0; m[0][2] = 0; m[0][3] = 0;\n        m[1][0] = 0; m[1][1] = s.y; m[1][2] = 0; m[1][3] = 0;\n        m[2][0] = 0; m[2][1] = 0; m[2][2] = s.z; m[2][3] = 0;\n        m[3][0] = 0; m[3][1] = 0; m[3][2] = 0; m[3][3] = 1;\n\n        return result;\n    }\n\n    public static perspective(fov: number, aspect: number, near: number, far: number): Matrix4x4 {\n        const fovRad = fov / 180 * Math.PI;\n        const tanHalfFov = Math.tan(fovRad / 2);\n        const mat = new Matrix4x4(\n            new Vector4(1 / (aspect * tanHalfFov), 0, 0, 0),\n            new Vector4(0, 1 / tanHalfFov, 0, 0),\n            // 深度计算符号：对于看向+Z的相机，近裁剪面在 z = near, 远裁剪面在 z = far\n            new Vector4(0, 0, (far + near) / (far - near), -2 * far * near / (far - near)),\n            new Vector4(0, 0, 1, 0)\n        );\n        return mat;\n    }\n\n    public static orthographic(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4x4 {\n        const rl = (right - left)\n        const tb = (top - bottom)\n        const fn = (far - near)\n\n        var mat = new Matrix4x4(\n            new Vector4(2 / rl, 0, 0, -(left + right) / rl),  // X轴缩放与平移\n            new Vector4(0, 2 / tb, 0, -(top + bottom) / tb),  // Y轴缩放与平移\n            new Vector4(0, 0, 2 / fn, -(far + near) / fn),    // Z轴缩放与平移\n            new Vector4(0, 0, 0, 1)                           // 齐次分量\n        );\n        return mat;\n    }\n\n    public static get identity(): Matrix4x4 {\n        let m = new Matrix4x4();\n        m.matrix[0][0] = 1;\n        m.matrix[1][1] = 1;\n        m.matrix[2][2] = 1;\n        m.matrix[3][3] = 1;\n        return m;\n    }\n\n    public static add(m1: Matrix4x4, m2: Matrix4x4): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                m[i][j] = m1.matrix[i][j] + m2.matrix[i][j];\n            }\n        }\n        return result;\n    }\n\n    public static subtract(m1: Matrix4x4, m2: Matrix4x4): Matrix4x4 {\n        let result = new Matrix4x4();\n        let m = result.matrix;\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                m[i][j] = m1.matrix[i][j] - m2.matrix[i][j];\n            }\n        }\n        return result;\n    }\n\n    public static multiplyScalar(m: Matrix4x4, scalar: number): Matrix4x4 {\n        let result = new Matrix4x4();\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                m[i][j] = m.matrix[i][j] * scalar;\n            }\n        }\n        return result;\n    }\n\n    public static lerp(m1: Matrix4x4, m2: Matrix4x4, t: number): Matrix4x4 {\n        let result = new Matrix4x4();\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j < 4; j++) {\n                result.matrix[i][j] = m1.matrix[i][j] + (m2.matrix[i][j] - m1.matrix[i][j]) * t;\n            }\n        }\n        return result;\n    }\n}","import { Vector3 } from \"./Vector3\";\n\n/*\n    平面方程推导：\n    平面方程 ax + by + cz + d = 0 的推导可以通过 “法向量与平面垂直” 的核心性质来完成，步骤如下：\n\n    1. 设定已知条件\n    - 设平面上任意一点为 P(x, y, z)\n    - 设平面的法向量为 n = (a, b, c)（垂直于平面的向量）\n    - 设平面上一个固定点为 P₀(x₀, y₀, z₀)\n\n    2. 利用向量垂直的性质\n    平面上的向量 P₀P = (x - x₀, y - y₀, z - z₀) 与法向量 n 垂直，因此它们的点积为 0：n · P₀P = 0\n\n    3. 展开点积并整理\n    代入点积公式：a(x - x₀) + b(y - y₀) + c(z - z₀) = 0\n\n    展开后：ax + by + cz - (ax₀ + by₀ + cz₀) = 0\n\n    4. 定义常数 d\n    令 d = - (ax₀ + by₀ + cz₀)（因 P₀ 是平面上的固定点，故 d 为常数），代入上式即得平面方程：ax + by + cz + d = 0\n\n\n    平面到原点距离推导：\n    要推导平面到原点的距离，可结合 d = -(ax₀ + by₀ + cz₀) 和向量投影的原理，步骤如下：\n\n    1. 明确已知关系\n    平面方程：ax + by + cz + d = 0\n    平面上固定点 P₀(x₀, y₀, z₀) 满足：ax₀ + by₀ + cz₀ + d = 0，即 d = -(ax₀ + by₀ + cz₀)\n    原点 O(0,0,0) 到平面的距离，等于向量 OP₀（从原点到平面上点 P₀ 的向量）在法向量 n = (a,b,c) 上的投影长度\n\n    2. 计算向量投影长度\n    向量 OP₀ = (x₀, y₀, z₀)，它在法向量 n 上的投影长度公式为：\n    投影长度 = |OP₀ · n| / |n|\n    分子：向量点积的绝对值 |OP₀ · n| = |ax₀ + by₀ + cz₀|\n    分母：法向量的模长 |n| = √(a² + b² + c²)\n\n    3. 代入 d 的表达式\n    由 d = -(ax₀ + by₀ + cz₀)，可得 |ax₀ + by₀ + cz₀| = |-d| = |d|，代入投影长度公式：\n    平面到原点的距离 = |d| / √(a² + b² + c²)\n */\nexport class Plane {\n    /**\n     * 平面方程：ax + by + cz + d = 0\n     * 平面任意点：(x, y, z)\n     * 平面法向量：(a, b, c)\n     * 到原点的距离 = |d| ÷ √(a² + b² + c²)\n     * @param a 平面法向量X分量\n     * @param b 平面法向量Y分量\n     * @param c 平面法向量Z分量\n     * @param d 决定平面与 “坐标原点的距离”，d 的 正负 表示平面在 “法向量方向” 上相对于原点的位置\n     */\n    constructor(\n        public a: number,\n        public b: number,\n        public c: number,\n        public d: number\n    ) { }\n\n    /**\n     * 归一化平面（确保法向量长度为1，保证距离计算精度）\n     */\n    public normalize(): void {\n        const normalLength = Math.sqrt(this.a ** 2 + this.b ** 2 + this.c ** 2);\n        if (normalLength < Number.EPSILON) return; // 避免除以0\n\n        this.a /= normalLength;\n        this.b /= normalLength;\n        this.c /= normalLength;\n        this.d /= normalLength;\n    }\n\n    /**\n     * 计算点到平面的距离（用于视锥体剔除检测）\n     * @param point 世界空间中的点\n     * @returns 距离（正数：点在平面正面；负数：点在平面反面；0：点在平面上）\n     */\n    public distanceToPoint(point: Vector3): number {\n        /*\n            要推导空间中任意点到平面的距离公式，可基于 “向量投影” 的几何原理，结合平面方程的性质进行推导，步骤如下：\n\n            已知条件\n            平面方程：ax + by + cz + d = 0（法向量为 n = (a, b, c)）\n            平面上任意一点：P₀(x₀, y₀, z₀)（满足平面方程：ax₀ + by₀ + cz₀ + d = 0）\n            空间中任意一点：P(x, y, z)（求该点到平面的距离）\n\n            推导核心：距离 = 向量在法向量上的投影长度\n            任意点 P 到平面的距离，等于向量 P₀P 在平面法向量 n 上的投影长度（因法向量垂直于平面，此投影长度即为点到平面的最短距离）。\n\n            向量 P₀P 的坐标：\n            P₀P = (x - x₀, y - y₀, z - z₀)\n\n            投影长度公式：\n            向量在法向量上的投影长度 = |P₀P · n| / |n|\n            （分子为向量点积的绝对值，分母为法向量的模长）\n\n            代入计算并化简\n            计算分子（点积的绝对值）：\n            P₀P · n = a(x - x₀) + b(y - y₀) + c(z - z₀)\n            展开后：\n            = ax + by + cz - (ax₀ + by₀ + cz₀)\n            由平面方程可知 ax₀ + by₀ + cz₀ = -d，代入得：\n            P₀P · n = ax + by + cz + d\n            取绝对值：|P₀P · n| = |ax + by + cz + d|\n\n            计算分母（法向量的模长）：\n            |n| = √(a² + b² + c²)\n\n            合并得距离公式：\n            点到平面的距离 = |ax + by + cz + d| / √(a² + b² + c²)\n         */\n        return this.a * point.x + this.b * point.y + this.c * point.z + this.d;\n    }\n}","import { Vector3 } from \"./Vector3\";\nimport { Matrix4x4 } from \"./Matrix4x4\";\n\nexport class Quaternion {\n    public x: number = 0;\n    public y: number = 0;\n    public z: number = 0;\n    public w: number = 0;\n\n    public constructor();\n    public constructor(x: number, y: number, z: number, w: number);\n    public constructor(angle: number, axis: Vector3);\n    public constructor(euler: Vector3);\n    public constructor() {\n        if (arguments.length == 4) {\n            this.x = arguments[0];\n            this.y = arguments[1];\n            this.z = arguments[2];\n            this.w = arguments[3];\n        }\n        else if (arguments.length == 2) {\n            this.rotateAround(arguments[0], arguments[1]);\n        }\n        else if (arguments.length == 1) {\n            this.eulerAngles = arguments[0];\n        }\n        else {\n            this.x = this.y = this.z = 0;\n            this.w = 1;\n        }\n    }\n\n    public get eulerAngles(): Vector3 {\n        return Matrix4x4.getRotateMatrixByQuaternion(this).getEulerAngles();\n\n        // 或下面直接通过三角函数公式提取欧拉角，无需矩阵\n        // // 四元数转XYZ顺序欧拉角（roll, pitch, yaw）\n        // // 旋转顺序：先绕X轴(roll)，再绕Y轴(pitch)，最后绕Z轴(yaw)\n        // // 计算各分量平方（用于减少重复计算）\n        // const qx2 = this.x * this.x;\n        // const qy2 = this.y * this.y;\n        // const qz2 = this.z * this.z;\n        // // XYZ顺序的转换公式（结果为弧度）\n        // const roll = Math.atan2(2 * (this.w * this.x + this.y * this.z), 1 - 2 * (qx2 + qy2));\n        // const pitch = Math.asin(2 * (this.w * this.y - this.z * this.x));\n        // const yaw = Math.atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (qy2 + qz2));\n        // // 转换为角度（可选，根据需要保留）\n        // const rollDeg = roll * 180 / Math.PI;\n        // const pitchDeg = pitch * 180 / Math.PI;\n        // const yawDeg = yaw * 180 / Math.PI;\n        // return new Vector3(rollDeg, pitchDeg, yawDeg);\n    }\n\n    public set eulerAngles(e: Vector3) {\n        var q = Matrix4x4.getRotateMatrixByEulerAngles(e).getRotate();\n        this.w = q.w;\n        this.x = q.x;\n        this.y = q.y;\n        this.z = q.z;\n\n        // 或下面直接通过三角函数公式计算四元数分量，无需矩阵\n        // // XYZ顺序的欧拉角（roll, pitch, yaw）转四元数\n        // // 旋转顺序：先绕X轴(roll)，再绕Y轴(pitch)，最后绕Z轴(yaw)\n        // const roll = e.x * Math.PI / 180;  // X轴旋转（roll），角度转弧度\n        // const pitch = e.y * Math.PI / 180; // Y轴旋转（pitch），角度转弧度\n        // const yaw = e.z * Math.PI / 180;   // Z轴旋转（yaw），角度转弧度\n        // // 计算半角的三角函数值\n        // const cosRoll = Math.cos(roll / 2);\n        // const sinRoll = Math.sin(roll / 2);\n        // const cosPitch = Math.cos(pitch / 2);\n        // const sinPitch = Math.sin(pitch / 2);\n        // const cosYaw = Math.cos(yaw / 2);\n        // const sinYaw = Math.sin(yaw / 2);\n        // // XYZ顺序的四元数转换公式\n        // this.w = cosRoll * cosPitch * cosYaw + sinRoll * sinPitch * sinYaw;\n        // this.x = sinRoll * cosPitch * cosYaw - cosRoll * sinPitch * sinYaw;\n        // this.y = cosRoll * sinPitch * cosYaw + sinRoll * cosPitch * sinYaw;\n        // this.z = cosRoll * cosPitch * sinYaw - sinRoll * sinPitch * cosYaw;\n    }\n\n    public rotateAround(angle: number, axis: Vector3): Quaternion {\n        let q = Quaternion.angleAxis(angle, axis);\n        this.x = q.x;\n        this.y = q.y;\n        this.z = q.z;\n        this.w = q.w;\n        return this;\n    }\n\n    /**\n    * @zh 向量四元数乘法\n    */\n    public transformQuat(a: Vector3): Vector3 {\n        // benchmarks: http://jsperf.com/quaternion-transform-Vec3-implementations\n\n        let out = new Vector3();\n        let q = this;\n\n        // calculate quat * vec\n        const ix = q.w * a.x + q.y * a.z - q.z * a.y;\n        const iy = q.w * a.y + q.z * a.x - q.x * a.z;\n        const iz = q.w * a.z + q.x * a.y - q.y * a.x;\n        const iw = -q.x * a.x - q.y * a.y - q.z * a.z;\n\n        // calculate result * inverse quat\n        out.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n        out.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n        out.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n        return out;\n    }\n\n    public clone(): Quaternion {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n\n    /**\n     * @zh 检查四元数是否相等\n     */\n    public equals(q: Quaternion): boolean {\n        const epsilon = 1e-6;\n        return Math.abs(this.x - q.x) < epsilon && \n               Math.abs(this.y - q.y) < epsilon && \n               Math.abs(this.z - q.z) < epsilon && \n               Math.abs(this.w - q.w) < epsilon;\n    }\n\n    /**\n     * @zh 四元数球面插值\n     */\n    public static slerp(a: Quaternion, b: Quaternion, t: number): Quaternion {\n        // benchmarks:\n        //    http://jsperf.com/quaternion-slerp-implementations\n\n        let out = new Quaternion();\n\n        let scale0 = 0;\n        let scale1 = 0;\n\n        // calc cosine\n        let cosom = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\n        // adjust signs (if necessary)\n        if (cosom < 0.0) {\n            cosom = -cosom;\n            b.x = -b.x;\n            b.y = -b.y;\n            b.z = -b.z;\n            b.w = -b.w;\n        }\n        // calculate coefficients\n        if ((1.0 - cosom) > 0.000001) {\n            // standard case (slerp)\n            const omega = Math.acos(cosom);\n            const sinom = Math.sin(omega);\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\n            scale1 = Math.sin(t * omega) / sinom;\n        } else {\n            // \"from\" and \"to\" quaternions are very close\n            //  ... so we can do a linear interpolation\n            scale0 = 1.0 - t;\n            scale1 = t;\n        }\n        // calculate final values\n        out.x = scale0 * a.x + scale1 * b.x;\n        out.y = scale0 * a.y + scale1 * b.y;\n        out.z = scale0 * a.z + scale1 * b.z;\n        out.w = scale0 * a.w + scale1 * b.w;\n\n        return out;\n    }\n\n    public static dot(a: Quaternion, b: Quaternion): number {\n        return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;\n    }\n\n    public static angleAxis(angle: number, axis: Vector3): Quaternion {\n        let res = new Quaternion();\n\n        angle = Math.PI * angle / 180;\n        angle *= 0.5;\n        const sin = Math.sin(angle);\n\n        res.x = axis.x * sin;\n        res.y = axis.y * sin;\n        res.z = axis.z * sin;\n        res.w = Math.cos(angle);\n\n        return res;\n    }\n\n    /**\n     * 创建一个旋转，使物体朝向目标方向\n     * @param direction 目标方向向量（世界空间），需要归一化\n     * @param up 上方向向量（世界空间），默认为(0,1,0)\n     * @returns 旋转四元数\n     */\n    public static LookRotation(direction: Vector3, up: Vector3 = Vector3.UP): Quaternion {\n        throw new Error(\"LookRotation not implemented\");\n    }\n\n    public static get identity(): Quaternion {\n        return new Quaternion(0, 0, 0, 1);\n    }\n}","import { Vector3 } from \"./Vector3\"; // 假设的向量类\n\nexport class Ray {\n    public origin: Vector3;\n    public direction: Vector3;\n\n    /**\n     * 构造一条射线\n     * @param origin 射线起点\n     * @param direction 射线方向（通常应是归一化的单位向量）\n     */\n    constructor(origin: Vector3, direction: Vector3) {\n        this.origin = origin.clone(); // 使用克隆避免引用问题\n        this.direction = direction.clone().normalize(); // 确保方向是单位向量\n    }\n\n    /**\n     * 获取射线上某一点的位置\n     * @param t 沿射线方向的参数距离\n     * @returns 射线上对应点的Vector3坐标\n     */\n    public at(t: number): Vector3 {\n        // 公式: point = origin + t * direction\n        return Vector3.add(this.origin, Vector3.multiplyScalar(this.direction, t));\n    }\n\n    /**\n     * 克隆当前射线\n     * @returns 一条新的Ray实例\n     */\n    public clone(): Ray {\n        return new Ray(this.origin.clone(), this.direction.clone());\n    }\n}","import { Camera } from \"../Component/Camera\";\nimport { Light, LightType } from \"../Component/Light\";\nimport { EngineConfig } from \"../Core/Setting\";\nimport { Transform } from \"../Core/Transform\";\nimport { Matrix4x4 } from \"./Matrix4x4\";\nimport { Quaternion } from \"./Quaternion\";\nimport { Ray } from \"./Ray\";\nimport { Vector2 } from \"./Vector2\";\nimport { Vector3 } from \"./Vector3\";\nimport { Vector4 } from \"./Vector4\";\n\nexport class TransformTools {\n\n    /**\n     * 将裁剪空间坐标转换为标准化设备坐标(NDC)\n     * @param clipPos 裁剪空间坐标，包含x, y, z, w四个分量\n     * @returns 标准化设备坐标(NDC)，三个分量范围均为[-1, 1]\n     */\n    public static ClipToNdcPos(clipPos: Vector4): Vector3 {\n        // 获取裁剪坐标的w分量，用于透视除法\n        const w = clipPos.w;\n\n        // 避免除以0（理论上w=0的点在无穷远处，实际中通常返回原点）\n        if (w === 0) {\n            return Vector3.ZERO;\n        }\n\n        // 执行透视除法：裁剪空间坐标各分量除以w分量，得到NDC\n        // 透视投影中，w分量与深度相关，除法会产生近大远小的透视效果\n        const ndcX = clipPos.x / w;\n        const ndcY = clipPos.y / w;\n        const ndcZ = clipPos.z / w;\n\n        // 返回NDC坐标，三个分量均应落在[-1, 1]范围内（超出此范围的点会被裁剪）\n        return new Vector3(ndcX, ndcY, ndcZ);\n    }\n\n    /**\n     * 将NDC坐标转换为视口坐标\n     * @param ndcPos 标准化设备坐标(NDC)，范围为X:[-1,1], Y:[-1,1], Z:[-1,1]\n     * @param viewport 视口参数，格式为[x, y, width, height]，其中(x,y)是视口左上角在屏幕上的坐标\n     * @returns 视口空间中的二维坐标\n     */\n    public static NdcToViewportPos(ndcPos: Vector3, viewport: Vector4): Vector2 {\n        const startX = viewport.x;    // 视口左上角X坐标\n        const startY = viewport.y;    // 视口左上角Y坐标\n        const width = viewport.z;     // 视口宽度\n        const height = viewport.w;    // 视口高度\n\n        // NDC坐标范围是[-1,1]，先转换为[0,1]范围的相对坐标\n        // 公式：[0,1] = (NDC + 1) / 2\n        const normalizedX = (ndcPos.x + 1) * 0.5;\n        const normalizedY = (ndcPos.y + 1) * 0.5;\n\n        // 转换为视口坐标：\n        // X轴：视口起始X + 相对X * 视口宽度\n        // Y轴：由于屏幕坐标系Y轴向下（与NDC的Y轴方向相反），需要用1减去相对Y值后再计算\n        const viewPortX = startX + normalizedX * width;\n        const viewPortY = startY + (1 - normalizedY) * height;\n\n        return new Vector2(viewPortX, viewPortY);\n    }\n\n    public static ViewportToScreenPos(vp: Vector2): Vector2 {\n        const screenX = vp.x * EngineConfig.canvasWidth;\n        const screenY = vp.y * EngineConfig.canvasHeight;\n        return new Vector2(screenX, screenY);\n    }\n\n    public static WorldToClipPos(pos: Vector3, camera: Camera): Vector4 {\n        const viewMatrix = camera.getViewMatrix();\n        const projectionMatrix = camera.getProjectionMatrix();\n        const vpMatrix = projectionMatrix.multiply(viewMatrix);\n        const clipPos = vpMatrix.multiplyVector4(new Vector4(pos, 1));\n        return clipPos;\n    }\n\n    // 世界坐标转为屏幕坐标\n    public static WorldToScreenPos(pos: Vector3, camera: Camera): { screen: Vector2; depth: number } {\n        const clipPos = this.WorldToClipPos(pos, camera);\n        const ndc = this.ClipToNdcPos(clipPos);\n        const vp = this.NdcToViewportPos(ndc, camera.viewPort);\n        const screen = this.ViewportToScreenPos(vp);\n\n        // 深度值：将NDC的z从[-1, 1]映射到[0, 1]的范围，常用于深度缓冲\n        const depth = (ndc.z + 1) / 2;\n\n        return { screen, depth };\n    }\n\n    // 世界坐标到视口坐标\n    public static WorldToViewportPos(worldPos: Vector3, camera: Camera): Vector2 {\n        const clipPos = this.WorldToClipPos(worldPos, camera);\n        const ndc = this.ClipToNdcPos(clipPos);\n        const vp = this.NdcToViewportPos(ndc, camera.viewPort);\n        return vp;\n    }\n\n    // 视口坐标转换\n    public static ScreenToViewportPos(screenPos: Vector2): Vector2 {\n        return new Vector2(\n            screenPos.x / EngineConfig.canvasWidth,\n            screenPos.y / EngineConfig.canvasHeight\n        );\n    }\n\n    // 屏幕坐标转为世界坐标\n    public static ScreenToWorldPos(screenPos: Vector2, camera: Camera, depth: number = 1.0): Vector3 {\n        // 1. 将屏幕坐标转换为NDC坐标（-1到1范围）\n        const ndcX = (screenPos.x / EngineConfig.canvasWidth) * 2 - 1;\n        const ndcY = 1 - (screenPos.y / EngineConfig.canvasHeight) * 2; // Y轴需要翻转\n\n        // 2. 创建齐次裁剪空间坐标\n        const clipPos = new Vector4(ndcX, ndcY, depth, 1.0);\n\n        // 3. 获取视图投影矩阵的逆矩阵\n        const viewMatrix = camera.getViewMatrix();\n        const projectionMatrix = camera.getProjectionMatrix();\n        const vpMatrix = projectionMatrix.multiply(viewMatrix);\n        const inverseVPMatrix = vpMatrix.invert();\n\n        // 4. 将裁剪空间坐标转换到世界空间\n        const worldPos = inverseVPMatrix.multiplyVector4(clipPos);\n\n        // 5. 进行透视除法（齐次坐标归一化）\n        const w = worldPos.w;\n        if (w !== 0) {\n            return new Vector3(\n                worldPos.x / w,\n                worldPos.y / w,\n                worldPos.z / w\n            );\n        }\n\n        return new Vector3(worldPos.x, worldPos.y, worldPos.z);\n    }\n\n    // 使用射线法进行精确的屏幕到世界坐标转换（推荐用于3D拾取）\n    public static ScreenToWorldPosRaycast(screenPos: Vector2, camera: Camera): Ray {\n        // 1. 将屏幕坐标转换为NDC坐标\n        const ndcX = (screenPos.x / EngineConfig.canvasWidth) * 2 - 1;\n        const ndcY = 1 - (screenPos.y / EngineConfig.canvasHeight) * 2;\n\n        // 2. 创建近平面和远平面的点\n        const nearPoint = new Vector4(ndcX, ndcY, -1, 1);\n        const farPoint = new Vector4(ndcX, ndcY, 1, 1);\n\n        // 3. 获取视图投影矩阵的逆矩阵\n        const viewMatrix = camera.getViewMatrix();\n        const projectionMatrix = camera.getProjectionMatrix();\n        const vpMatrix = projectionMatrix.multiply(viewMatrix);\n        const inverseVPMatrix = vpMatrix.invert();\n\n        // 4. 转换到世界空间\n        const worldNear = inverseVPMatrix.multiplyVector4(nearPoint);\n        const worldFar = inverseVPMatrix.multiplyVector4(farPoint);\n\n        // 5. 进行透视除法\n        const nearWorld = new Vector3(\n            worldNear.x / worldNear.w,\n            worldNear.y / worldNear.w,\n            worldNear.z / worldNear.w\n        );\n\n        const farWorld = new Vector3(\n            worldFar.x / worldFar.w,\n            worldFar.y / worldFar.w,\n            worldFar.z / worldFar.w\n        );\n\n        // 6. 创建射线\n        const rayDirection = farWorld.subtract(nearWorld).normalize();\n        const rayOrigin = nearWorld;\n\n        return new Ray(rayOrigin, rayDirection);\n    }\n\n    // 模型坐标转为裁剪坐标\n    public static ModelToClipPos(vertex: Vector3, modelMatrix: Matrix4x4, camera: Camera): Vector4 {\n        // 对顶点应用 MVP 矩阵（Model→View→Projection 矩阵的组合），计算过程为：\n        // 裁剪空间坐标 = projectionMatrix × viewMatrix × modelMatrix × 模型空间顶点\n        const viewMatrix = camera.getViewMatrix();\n        const projectionMatrix = camera.getProjectionMatrix();\n        const mvpMatrix = projectionMatrix.multiply(viewMatrix).multiply(modelMatrix);\n\n        // 另一种构建mv矩阵的方式\n        // 构建一个先朝摄影机反方向移动，再反方向旋转的矩阵，其实得到的也就是上面摄影机的世界坐标矩阵\n        // const cameraForward = camera.transform.forward;\n        // const cameraUp = camera.transform.up;\n        // const modelViewMatrix = modelMatrix.clone().transformToLookAtSpace(camera.transform.position, camera.transform.position.add(cameraForward), cameraUp);\n        // const mvpMatrix = modelViewMatrix.perspective(camera.fov, camera.aspect, camera.nearClip, camera.farClip);\n\n        // 要把Vec3转为齐次坐标点，即w=1\n        return mvpMatrix.multiplyVector4(new Vector4(vertex, 1));\n    }\n\n    // 模型坐标转为屏幕坐标\n    public static ModelToScreenPos(vertex: Vector3, modelMatrix: Matrix4x4, camera: Camera): { screen: Vector2; depth: number } {\n        const clipPos = this.ModelToClipPos(vertex, modelMatrix, camera);\n        const ndc = this.ClipToNdcPos(clipPos);\n        const vp = this.NdcToViewportPos(ndc, camera.viewPort);\n        const screen = this.ViewportToScreenPos(vp);\n        const depth = (ndc.z + 1) / 2;\n        return { screen, depth };\n    }\n\n    public static ClipToScreenPos(clipPos: Vector4, camera: Camera): Vector3 {\n        const ndc = this.ClipToNdcPos(clipPos);\n        const vp = this.NdcToViewportPos(ndc, camera.viewPort);\n        const screen = this.ViewportToScreenPos(vp);\n        const depth = (ndc.z + 1) / 2;\n        return new Vector3(screen.x, screen.y, depth);\n    }\n\n    // 模型法线转为世界法线\n    public static ModelToWorldNormal(normal: Vector3, modelMatrix: Matrix4x4): Vector3 {\n        // 获取模型矩阵（局部到世界空间的变换矩阵）\n\n        // 计算模型矩阵的逆转置矩阵\n        // 逆转置矩阵可以确保法线在非均匀缩放时仍然保持与表面垂直\n        const inverseTransposeModel = modelMatrix.invert().transpose();\n\n        // 使用逆转置矩阵变换法线向量（忽略平移分量，只应用旋转和缩放的逆变换）\n        const worldNormal = inverseTransposeModel.multiplyVector3(normal);\n\n        // 归一化结果，确保法线保持单位长度\n        return worldNormal.normalize();\n    }\n\n    /**\n     * 计算模型空间中从顶点指向光源的方向向量\n     * @param v 模型空间中的顶点坐标\n     * @returns 归一化的方向向量（模型空间）\n     */\n    public static ObjSpaceLightDir(v: Vector3, light: Light, transform: Transform): Vector3 {\n        let lightDir: Vector3;\n\n        if (light.type === LightType.Directional) {\n            // 方向光：直接将世界空间的光线方向转换到模型空间（方向向量用矩阵乘法，忽略平移）\n            lightDir = transform.worldToLocalMatrix.multiplyVector3(light.transform.forward);\n        } else {\n            // 点光源/聚光灯：计算顶点到光源的向量（模型空间）\n            // 1. 将世界空间的光源位置转换到模型空间\n            const lightPosObj = transform.worldToLocalMatrix.multiplyVector4(new Vector4(light.transform.worldPosition, 1));\n            // 2. 模型空间中，从顶点指向光源的向量 = 光源位置 - 顶点位置\n            lightDir = (new Vector3(lightPosObj)).subtract(v);\n        }\n\n        // 归一化并返回\n        return lightDir.normalize();\n    }\n\n    /**\n     * 计算模型空间中从顶点指向摄像机的方向向量\n     * @param v 模型空间中的顶点坐标\n     * @returns 归一化的方向向量（模型空间）\n     */\n    public static ObjSpaceViewDir(v: Vector3, camera: Camera, transform: Transform): Vector3 {\n        // 1. 将世界空间的摄像机位置转换到模型空间\n        const cameraPosObj = transform.worldToLocalMatrix.multiplyVector4(new Vector4(camera.transform.worldPosition, 1));\n\n        // 2. 模型空间中，从顶点指向摄像机的向量 = 摄像机位置 - 顶点位置\n        const viewDir = (new Vector3(cameraPosObj)).subtract(v);\n\n        // 归一化并返回\n        return viewDir.normalize();\n    }\n\n    public static ApplyScaleToVertex(vertex: Vector3, scale: Vector3) {\n        vertex.x *= scale.x;\n        vertex.y *= scale.y;\n        vertex.z *= scale.z;\n    }\n\n    public static ApplyRotationToVertex(vertex: Vector3, quaternion: Quaternion) {\n        // 四元数旋转公式: v' = q * v * q⁻¹\n        const qx = quaternion.x, qy = quaternion.y, qz = quaternion.z, qw = quaternion.w;\n        const x = vertex.x, y = vertex.y, z = vertex.z;\n\n        // 计算 q * v\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n\n        // 计算 (q * v) * q⁻¹ (q⁻¹ 是 q的共轭)\n        const rx = ix * qw + iw * (-qx) + iy * (-qz) - iz * (-qy);\n        const ry = iy * qw + iw * (-qy) + iz * (-qx) - ix * (-qz);\n        const rz = iz * qw + iw * (-qz) + ix * (-qy) - iy * (-qx);\n\n        vertex.x = rx;\n        vertex.y = ry;\n        vertex.z = rz;\n    }\n\n    public static ApplyTranslationToVertex(vertex: Vector3, position: Vector3) {\n        vertex.x += position.x;\n        vertex.y += position.y;\n        vertex.z += position.z;\n    }\n}","import { Vector3 } from \"./Vector3\";\nimport { Vector4 } from \"./Vector4\";\n\nexport class Vector2 {\n\n    public x: number;\n    public y: number;\n\n    public get u(): number { return this.x; }\n    public get v(): number { return this.y; }\n\n    public get width(): number { return this.x; }\n    public get height(): number { return this.y; }\n\n    public constructor();\n    public constructor(x: number, y: number);\n    public constructor(v: Vector3);\n    public constructor(v: Vector4)\n    public constructor() {\n        if (arguments[0] instanceof Vector3) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n        }\n        else if (arguments[0] instanceof Vector4) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n        }\n        else if (arguments.length == 2) {\n            this.x = arguments[0];\n            this.y = arguments[1];\n        }\n        else {\n            this.x = this.y = 0;\n        }\n    }\n\n    /*\n        OPERATIONS ON VECTOR\n     */\n\n    public add(v: Vector2): Vector2 {\n        this.x += v.x;\n        this.y += v.y;\n        return this;\n    }\n\n    public subtract(v: Vector2): Vector2 {\n        this.x -= v.x;\n        this.y -= v.y;\n        return this;\n    }\n\n    public multiply(v: Vector2): Vector2 {\n        this.x *= v.x;\n        this.y *= v.y;\n        return this;\n    }\n\n    public divide(d: number): Vector2 {\n        this.x /= d;\n        this.y /= d;\n        return this;\n    }\n\n    public multiplyScalar(d: number): Vector2 {\n        this.x *= d;\n        this.y *= d;\n        return this;\n    }\n\n    public dot(v: Vector2): number {\n        return (this.x * v.x + this.y * v.y);\n    }\n\n    public negate(): Vector2 {\n        return this.multiplyScalar(-1);\n    }\n\n    public normalize(): Vector2 {\n        var length = this.magnitude;\n\n        if (length === 0)\n            return new Vector2();\n\n        return this.divide(length);\n    }\n\n    public get magnitude(): number {\n        return Math.sqrt(Vector2.dot(this, this));\n    }\n\n    public get sqrMagnitude(): number {\n        return Vector2.dot(this, this);\n    }\n\n    /*\n        ADDITIONAL FUNCTIONS\n     */\n\n    public clone(): Vector2 {\n        return new Vector2(this.x, this.y);\n    }\n\n    public equals(v: Vector2): boolean {\n        return v.x == this.x && v.y == this.y;\n    }\n\n    public toString(): string {\n        return \"[\" + this.x + \", \" + this.y + \"]\";\n    }\n\n    /*\n        STATIC FUNCTIONS\n     */\n\n    public static add(v1: Vector2, v2: Vector2): Vector2 {\n        return new Vector2(v1.x + v2.x, v1.y + v2.y);\n    }\n\n    public static subtract(v1: Vector2, v2: Vector2): Vector2 {\n        return new Vector2(v1.x - v2.x, v1.y - v2.y);\n    }\n\n    public static multiply(v1: Vector2, v2: Vector2): Vector2 {\n        return new Vector2(v1.x * v2.x, v1.y * v2.y);\n    }\n\n    public static divide(v1: Vector2, v2: Vector2): Vector2 {\n        return new Vector2(v1.x / v2.x, v1.y / v2.y);\n    }\n\n    public static multiplyScalar(v1: Vector2, scalar: number): Vector2 {\n        return new Vector2(v1.x * scalar, v1.y * scalar);\n    }\n\n    public static lerp(v1: Vector2, v2: Vector2, t: number): Vector2 {\n        var v = new Vector2();\n        v.x = v1.x + t * (v2.x - v1.x);\n        v.y = v1.y + t * (v2.y - v1.y);\n        return v;\n    }\n\n    public static dot(v1: Vector2, v2: Vector2): number {\n        return (v1.x * v2.x + v1.y * v2.y);\n    }\n\n    public static cross(v1: Vector2, v2: Vector2): number {\n        return (v1.x * v2.y - v1.y * v2.x);\n    }\n\n    public static distance(v1: Vector2, v2: Vector2): number {\n        var x = v2.x - v1.x;\n        var y = v2.y - v1.y;\n        return Math.sqrt(x * x + y * y);\n    }\n\n    public static angle(v1: Vector2, v2: Vector2): number {\n        return Math.acos(Vector2.dot(v1, v2) / (v1.magnitude * v2.magnitude));\n    }\n\n    /*\n        STATIC VARIABLES\n     */\n\n    public static get ZERO() {\n        return new Vector2(0, 0);\n    }\n\n    public static get ONE() {\n        return new Vector2(1, 1);\n    }\n\n    public static get RIGHT() {\n        return new Vector2(1, 0);\n    }\n\n    public static get LEFT() {\n        return new Vector2(-1, 0);\n    }\n\n    public static get UP() {\n        return new Vector2(0, 1);\n    }\n\n    public static get DOWN() {\n        return new Vector2(0, -1);\n    }\n}","import { Vector2 } from \"./Vector2\";\nimport { Vector4 } from \"./Vector4\";\n\nexport class Vector3 {\n    public x: number;\n    public y: number;\n    public z: number;\n\n    public constructor();\n    public constructor(x: number, y: number, z: number);\n    public constructor(v: Vector2);\n    public constructor(v: Vector4);\n    public constructor() {\n        if (arguments[0] instanceof Vector2) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n            this.z = 0;\n        }\n        else if (arguments[0] instanceof Vector4) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n            this.z = arguments[0].z;\n        }\n        else if (arguments.length == 3) {\n            this.x = arguments[0];\n            this.y = arguments[1];\n            this.z = arguments[2];\n        }\n        else {\n            this.x = this.y = this.z = 0;\n        }\n    }\n\n    /*\n     OPERATIONS ON VECTOR\n     */\n\n    public add(v: Vector3): Vector3 {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        return this;\n    }\n\n    public subtract(v: Vector3): Vector3 {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        return this;\n    }\n\n    public multiply(v: Vector3): Vector3 {\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n        return this;\n    }\n\n    public divide(d: number): Vector3 {\n        this.x /= d;\n        this.y /= d;\n        this.z /= d;\n        return this;\n    }\n\n    public multiplyScalar(s: number): Vector3 {\n        this.x *= s;\n        this.y *= s;\n        this.z *= s;\n        return this;\n    }\n\n    public negate(): Vector3 {\n        return this.multiplyScalar(-1);\n    }\n\n    public normalize(): Vector3 {\n        var length = this.magnitude;\n        if (length === 0)\n            return new Vector3();\n        return this.divide(length);\n    }\n\n    public dot(v: Vector3): number {\n        return Vector3.dot(this, v);\n    }\n\n    public cross(v: Vector3): Vector3 {\n        return Vector3.cross(this, v);\n    }\n\n    public get magnitude(): number {\n        return Math.sqrt(Vector3.dot(this, this));\n    }\n\n    public get sqrMagnitude(): number {\n        return Vector3.dot(this, this);\n    }\n\n    /**\n     * 获取向量的指定分量\n     * @param index 分量索引 (0=x, 1=y, 2=z)\n     * @returns 对应分量的值\n     */\n    public getComponent(index: number): number {\n        switch (index) {\n            case 0: return this.x;\n            case 1: return this.y;\n            case 2: return this.z;\n            default:\n                throw new Error(`Invalid component index: ${index}. Must be 0, 1, or 2.`);\n        }\n    }\n\n    /**\n     * 设置向量的指定分量\n     * @param index 分量索引 (0=x, 1=y, 2=z)\n     * @param value 要设置的值\n     */\n    public setComponent(index: number, value: number): void {\n        switch (index) {\n            case 0: this.x = value; break;\n            case 1: this.y = value; break;\n            case 2: this.z = value; break;\n            default:\n                throw new Error(`Invalid component index: ${index}. Must be 0, 1, or 2.`);\n        }\n    }\n\n    /*\n     ADDITIONAL FUNCTIONS\n     */\n\n    public clone(): Vector3 {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    public equals(v: Vector3): boolean {\n        return v.x == this.x && v.y == this.y && v.z == this.z;\n    }\n\n    public toString(): string {\n        return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \"]\";\n    }\n\n    /*\n     STATIC FUNCTIONS\n     */\n\n    public static add(v1: Vector3, v2: Vector3): Vector3 {\n        return new Vector3(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z);\n    }\n\n    public static subtract(v1: Vector3, v2: Vector3): Vector3 {\n        return new Vector3(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);\n    }\n\n    public static multiply(v1: Vector3, v2: Vector3): Vector3 {\n        return new Vector3(v1.x * v2.x, v1.y * v2.y, v1.z * v2.z);\n    }\n\n    public static divide(v1: Vector3, v2: Vector3): Vector3 {\n        return new Vector3(v1.x / v2.x, v1.y / v2.y, v1.z / v2.z);\n    }\n\n    public static multiplyScalar(v1: Vector3, s: number): Vector3 {\n        return new Vector3(v1.x * s, v1.y * s, v1.z * s);\n    }\n\n    public static lerp(v1: Vector3, v2: Vector3, t: number): Vector3 {\n        var v = new Vector3();\n        v.x = v1.x + t * (v2.x - v1.x);\n        v.y = v1.y + t * (v2.y - v1.y);\n        v.z = v1.z + t * (v2.z - v1.z);\n        return v;\n    }\n\n    public static reflect(v: Vector3, n: Vector3): Vector3 {\n        return Vector3.subtract(v, Vector3.multiplyScalar(n, 2 * Vector3.dot(v, n)));\n    }\n\n    public static dot(v1: Vector3, v2: Vector3): number {\n        return (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z);\n    }\n\n    public static cross(v1: Vector3, v2: Vector3): Vector3 {\n        var x = v1.y * v2.z - v1.z * v2.y;\n        var y = v1.z * v2.x - v1.x * v2.z;\n        var z = v1.x * v2.y - v1.y * v2.x;\n        return new Vector3(x, y, z);\n    }\n\n    public static distance(v1: Vector3, v2: Vector3): number {\n        var x = v2.x - v1.x;\n        var y = v2.y - v1.y;\n        var z = v2.z - v1.z;\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n\n    public static difference(v1: Vector3, v2: Vector3): Vector3 {\n        var dest = new Vector3();\n\n        dest.x = v1.x - v2.x\n        dest.y = v1.y - v2.y\n        dest.z = v1.z - v2.z\n\n        return dest\n    }\n\n    public static angle(v1: Vector3, v2: Vector3): number {\n        return Math.acos(Vector3.dot(v1, v2) / (v1.magnitude * v2.magnitude));\n    }\n\n    public static normalize(v: Vector3): Vector3 {\n        var length = v.magnitude;\n        if (length === 0)\n            return new Vector3();\n        return Vector3.multiplyScalar(v, 1 / length);\n    }\n\n    /**\n     * 返回两个向量中每对分量的较小值组成的新向量[1,2](@ref)\n     * @param a 第一个向量\n     * @param b 第二个向量\n     * @returns 由各分量较小值组成的新向量\n     */\n    public static min(a: Vector3, b: Vector3): Vector3 {\n        return new Vector3(\n            Math.min(a.x, b.x),\n            Math.min(a.y, b.y),\n            Math.min(a.z, b.z)\n        );\n    }\n\n    /**\n     * 返回两个向量中每对分量的较大值组成的新向量[3,4](@ref)\n     * @param a 第一个向量\n     * @param b 第二个向量\n     * @returns 由各分量较大值组成的新向量\n     */\n    public static max(a: Vector3, b: Vector3): Vector3 {\n        return new Vector3(\n            Math.max(a.x, b.x),\n            Math.max(a.y, b.y),\n            Math.max(a.z, b.z)\n        );\n    }\n\n    /*\n     STATIC VARIABLES\n     */\n\n    public static get ZERO() {\n        return new Vector3(0, 0, 0);\n    }\n\n    public static get ONE() {\n        return new Vector3(1, 1, 1);\n    }\n\n    public static get RIGHT() {\n        return new Vector3(1, 0, 0);\n    }\n\n    public static get LEFT() {\n        return new Vector3(-1, 0, 0);\n    }\n\n    public static get UP() {\n        return new Vector3(0, 1, 0);\n    }\n\n    public static get DOWN() {\n        return new Vector3(0, -1, 0);\n    }\n\n    public static get FORWARD() {\n        return new Vector3(0, 0, 1);\n    }\n\n    public static get BACK() {\n        return new Vector3(0, 0, -1);\n    }\n}","import { Vector3 } from \"./Vector3\";\nimport { Vector2 } from \"./Vector2\";\n\nexport class Vector4 {\n\n    public x: number;\n    public y: number;\n    public z: number;\n    public w: number;\n\n    public get r(): number { return this.x; }\n    public get g(): number { return this.y; }\n    public get b(): number { return this.z; }\n    public get a(): number { return this.w; }\n\n    public get vector3(): Vector3 { return new Vector3(this); }\n\n    public constructor();\n    public constructor(x: number, y: number, z: number, w: number);\n    public constructor(v: Vector2);\n    public constructor(v: Vector3);\n    public constructor(v: Vector3, w: number);\n    public constructor() {\n        if (arguments[0] instanceof Vector2) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n            this.z = this.w = 0;\n        }\n        else if (arguments[0] instanceof Vector3) {\n            this.x = arguments[0].x;\n            this.y = arguments[0].y;\n            this.z = arguments[0].z;\n            this.w = arguments.length == 2 ? arguments[1] : 0;\n        }\n        else if (arguments.length == 4) {\n            this.x = arguments[0];\n            this.y = arguments[1];\n            this.z = arguments[2];\n            this.w = arguments[3];\n        }\n        else {\n            this.x = this.y = this.z = this.w = 0;\n        }\n    }\n\n    /*\n     OPERATIONS ON VECTOR\n     */\n\n    public add(v: Vector4): Vector4 {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n        this.w += v.w;\n        return this;\n    }\n\n    public subtract(v: Vector4): Vector4 {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n        this.w -= v.w;\n        return this;\n    }\n\n    public multiply(v: Vector4): Vector4 {\n        this.x *= v.x;\n        this.y *= v.y;\n        this.z *= v.z;\n        this.w *= v.w;\n        return this;\n    }\n\n    public divide(d: number): Vector4 {\n        this.x /= d;\n        this.y /= d;\n        this.z /= d;\n        this.w /= d;\n        return this;\n    }\n\n    public multiplyScalar(d: number): Vector4 {\n        this.x *= d;\n        this.y *= d;\n        this.z *= d;\n        this.w *= d;\n        return this;\n    }\n\n    public negate(): Vector4 {\n        return this.multiplyScalar(-1);\n    }\n\n    public normalize(): Vector4 {\n        var length = this.magnitude;\n\n        if (length === 0)\n            return new Vector4();\n\n        return this.divide(length);\n    }\n\n    public get magnitude(): number {\n        return Math.sqrt(Vector4.dot(this, this));\n    }\n\n    public get sqrMagnitude(): number {\n        return Vector4.dot(this, this);\n    }\n\n    /*\n     ADDITIONAL FUNCTIONS\n     */\n\n    public clone(): Vector4 {\n        return new Vector4(this.x, this.y, this.z, this.w);\n    }\n\n    public equals(v: Vector4): boolean {\n        return v.x == this.x && v.y == this.y && v.z == this.z && v.w == this.w;\n    }\n\n    public toString(): string {\n        return \"[\" + this.x + \", \" + this.y + \", \" + this.z + \", \" + this.w + \"]\";\n    }\n\n    /*\n     STATIC FUNCTIONS\n     */\n\n    public static add(v1: Vector4, v2: Vector4): Vector4 {\n        return new Vector4(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z, v1.w + v2.w);\n    }\n\n    public static subtract(v1: Vector4, v2: Vector4): Vector4 {\n        return new Vector4(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z, v1.w - v2.w);\n    }\n\n    public static multiply(v1: Vector4, v2: Vector4): Vector4 {\n        return new Vector4(v1.x * v2.x, v1.y * v2.y, v1.z * v2.z, v1.w * v2.w);\n    }\n\n    public static divide(v1: Vector4, scalar: number): Vector4 {\n        return new Vector4(v1.x / scalar, v1.y / scalar, v1.z / scalar, v1.w / scalar);\n    }\n\n    public static multiplyScalar(v1: Vector4, scalar: number): Vector4 {\n        return new Vector4(v1.x * scalar, v1.y * scalar, v1.z * scalar, v1.w * scalar);\n    }\n\n    public static lerp(v1: Vector4, v2: Vector4, t: number): Vector4 {\n        var v = new Vector4();\n        v.x = v1.x + t * (v2.x - v1.x);\n        v.y = v1.y + t * (v2.y - v1.y);\n        v.z = v1.z + t * (v2.z - v1.z);\n        v.w = v1.w + t * (v2.w - v1.w);\n        return v;\n    }\n\n    public static dot(v1: Vector4, v2: Vector4): number {\n        return (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z + v1.w * v2.w);\n    }\n\n    public static distance(v1: Vector4, v2: Vector4): number {\n        return Math.sqrt(Vector4.dot(v1, v2));\n    }\n\n    /*\n     STATIC VARIABLES\n     */\n\n    public static get ZERO() {\n        return new Vector4(0, 0, 0, 0);\n    }\n\n    public static get ONE() {\n        return new Vector4(1, 1, 1, 1);\n    }\n}","import * as CANNON from 'cannon';\nimport { Time } from '../Core/Time';\nimport { RaycastHit } from './RaycastHit';\nimport { Ray } from '../Math/Ray';\nimport { Vector3 } from '../Math/Vector3';\nimport { Collider } from '../Component/Collider';\nimport { Rigidbody } from '../Component/RigidBody';\nimport { Quaternion } from '../Math/Quaternion';\nimport { BoxCollider, BoxColliderData } from '../Component/BoxCollider';\nimport { SphereCollider, SphereColliderData } from '../Component/SphereCollider';\n\nexport class Physics {\n    private world: CANNON.World;\n    private rigidbodies: Map<Rigidbody, CANNON.Body> = new Map();       // 刚体和物理体的映射\n    private colliders: Map<Collider, CANNON.Shape> = new Map();         // 碰撞体和物理形状的映射\n    private shapes: Map<CANNON.Shape, CANNON.Body> = new Map();         // 物理形状和物理体的映射\n    private shapeIdToColliderMap: Map<number, Collider> = new Map();    // 形状ID和碰撞体的映射\n\n    // 重力\n    public get gravity(): Vector3 {\n        return new Vector3(this.world.gravity.x, this.world.gravity.y, this.world.gravity.z);\n    }\n    public set gravity(value: Vector3) {\n        this.world.gravity.set(value.x, value.y, value.z);\n    }\n\n    // 物理参数\n    public minPenetrationForPenalty: number = 0.05;\n    public bounceThreshold: number = 0.5;\n    public sleepVelocity: number = 0.14;\n    public sleepAngularVelocity: number = 0.14;\n    public maxAngularVelocity: number = 7;\n    public solverIterationCount: number = 6;\n\n    public init(): void {\n        // 创建物理世界\n        this.world = new CANNON.World();\n        this.world.gravity.set(0, -9.82, 0);\n        // @ts-ignore\n        this.world.broadphase = new CANNON.NaiveBroadphase();      // 碰撞检测算法\n        // @ts-ignore\n        this.world.solver.iterations = 10;                         // 约束求解迭代次数，影响精度\n        this.world.allowSleep = true;                              // 允许物体进入睡眠状态 \n    }\n\n    public update(): void {\n        if (!this.world) return;\n        // 更新物理世界\n        this.world.step(Time.fixedDeltaTime);\n        // 更新刚体位置和旋转\n        for (const [rigidbody, body] of this.rigidbodies) {\n            const pos = body.position;\n            const rot = body.quaternion;\n            rigidbody.transform.position = new Vector3(pos.x, pos.y, pos.z);\n            rigidbody.transform.rotation = new Quaternion(rot.x, rot.y, rot.z, rot.w);\n        }\n    }\n\n    public onDestroy(): void {\n    }\n\n    public CreateRigidbody(rigidbody: Rigidbody): void {\n        if (this.rigidbodies.has(rigidbody)) {\n            console.warn('Rigidbody already added:', rigidbody);\n            return;\n        }\n\n        const body = new CANNON.Body({\n            mass: rigidbody.isKinematic ? 0 : rigidbody.mass,\n            position: new CANNON.Vec3(rigidbody.transform.position.x, rigidbody.transform.position.y, rigidbody.transform.position.z),\n            quaternion: new CANNON.Quaternion(rigidbody.transform.rotation.x, rigidbody.transform.rotation.y, rigidbody.transform.rotation.z, rigidbody.transform.rotation.w),\n        })\n\n        if (body) {\n            this.world.addBody(body);\n            this.rigidbodies.set(rigidbody, body);\n        }\n    }\n\n    public RemoveRigidbody(rigidbody: Rigidbody): void {\n        const body = this.rigidbodies.get(rigidbody);\n        if (body) {\n            this.world.remove(body);\n            this.rigidbodies.delete(rigidbody);\n        }\n    }\n\n    public CreateCollider(collider: Collider): void {\n        const rigidbody = collider.attachedRigidbody;\n        if (!rigidbody) {\n            console.error('Collider not attached to a Rigidbody:', collider);\n            return;\n        }\n\n        // 如果已经存在，则先销毁旧的再新建\n        if (this.colliders.has(collider)) {\n            this.RemoveCollider(collider);\n        }\n\n        const body = this.rigidbodies.get(rigidbody);\n        if (body) {\n            let shape: CANNON.Shape | null = null;\n            const colliderData = collider.getColliderData();\n            if (collider instanceof BoxCollider) {\n                const boxData = colliderData as BoxColliderData;\n                shape = new CANNON.Box(new CANNON.Vec3(boxData.size.x / 2, boxData.size.y / 2, boxData.size.z / 2));\n            } else if (collider instanceof SphereCollider) {\n                const sphereData = colliderData as SphereColliderData;\n                shape = new CANNON.Sphere(sphereData.radius);\n            }\n            if (shape != null) {\n                const offset = new CANNON.Vec3(collider.center.x, collider.center.y, collider.center.z);\n                body.addShape(shape, offset);\n                this.shapes.set(shape, body);\n                this.colliders.set(collider, shape);\n                // 这里需要特别注意，碰撞或射线检测的形状，并不一定是现在添加的Shape，例如Box，会有一个凸多边形代理，射线检测是以它为目标计算的\n                if (shape instanceof CANNON.Box) {\n                    this.shapeIdToColliderMap.set((shape as CANNON.Box).convexPolyhedronRepresentation.id, collider);\n                }\n                else {\n                    this.shapeIdToColliderMap.set(shape.id, collider);\n                }\n            }\n        }\n        else {\n            console.error('Rigidbody not found:', rigidbody);\n        }\n    }\n\n    public RebuildColliders(collider: Collider): void {\n        const shape = this.colliders.get(collider);\n        if (shape == null) return;\n\n        this.RemoveCollider(collider);\n        this.CreateCollider(collider);\n        // 强制更新碰撞检测信息\n        //TODO:移除形状后，与它相邻的物体不会被激活，这不符合常理，暂时不知道怎么解决，这里手动唤醒下全部的物体\n        this.world.bodies.forEach(body => {\n            body.wakeUp();\n        });\n    }\n\n    public RemoveCollider(collider: Collider): void {\n        const shape = this.colliders.get(collider);\n        if (shape == null) return;\n        const body = this.shapes.get(shape);\n        if (body == null) return;\n\n        // 1. 找到目标形状的索引\n        const index = body.shapes.indexOf(shape);\n        if (index === -1) return; // 形状不存在则退出\n\n        // 2. 移除形状及对应的偏移和旋转信息\n        body.shapes.splice(index, 1);\n        body.shapeOffsets.splice(index, 1); // 移除对应的偏移\n        body.shapeOrientations.splice(index, 1); // 移除对应的旋转\n\n        // 3. 如果是动态刚体，重新计算惯性\n        if (body.mass > 0) {\n        }\n\n        // 4. 强制更新碰撞检测信息\n        // body.aabbNeedsUpdate = true;\n        //TODO:移除形状后，与它相邻的物体不会被激活，这不符合常理，暂时不知道怎么解决，这里手动唤醒下全部的物体\n        this.world.bodies.forEach(body => {\n            body.wakeUp();\n        });\n\n        this.shapes.delete(shape);\n        this.colliders.delete(collider);\n    }\n\n    public Raycast(\n        ray: Ray,\n        distance: number = 10,\n        layerMask?: number,\n    ): RaycastHit | null {\n        const result = new CANNON.RaycastResult();\n        const from = new CANNON.Vec3(ray.origin.x, ray.origin.y, ray.origin.z);\n        const to = new CANNON.Vec3(ray.at(distance).x, ray.at(distance).y, ray.at(distance).z);\n        this.world.rayTest(from, to, result);\n\n        // this.world.raycastAll(from, to, {\n        // }, (r) => {\n        //     const re = r as CANNON.RaycastResult;\n        //     console.log(re.shape?.id);\n        // });\n\n        if (result.hasHit && result.shape) {\n            // 注意，result.shape并不一定会是原来添加的Shape，例如Box，会有一个凸多边形代理，先前创建Box的时候已经在shapeIdToColliderMap里缓冲这个代理的ID了\n            const collider = this.shapeIdToColliderMap.get(result.shape.id);\n            if (!collider) {\n                console.error('Collider not found for shape:', result.shape);\n                return null;\n            }\n            const hit = RaycastHit.create(\n                new Vector3(result.hitPointWorld.x, result.hitPointWorld.y, result.hitPointWorld.z),\n                new Vector3(result.hitNormalWorld.x, result.hitNormalWorld.y, result.hitNormalWorld.z),\n                result.distance,\n                collider,\n            );\n            return hit;\n        }\n        return null;\n    }\n\n    // 通过 Ray 对象检测所有射线碰撞\n    public RaycastAll(\n        ray: Ray,\n        distance: number = Infinity,\n        layerMask: number\n    ): RaycastHit[] {\n        return [];\n    }\n}","import { Vector3 } from \"../Math/Vector3\";\nimport { Collider } from \"../Component/Collider\";\nimport { Transform } from \"../Core/Transform\";\nimport { Rigidbody } from \"../Component/RigidBody\";\n\n/**\n * Structure used to get information back from a raycast.\n */\nexport class RaycastHit {\n    private m_Point: Vector3 = Vector3.ZERO;\n    private m_Normal: Vector3 = Vector3.ZERO;\n    private m_Distance: number = 0;\n    private m_Collider: Collider;\n\n    /**\n     * The Collider that was hit.\n     */\n    public get collider(): Collider | null {\n        return this.m_Collider;\n    }\n\n    /**\n     * The impact point in world space where the ray hit the collider.\n     */\n    public get point(): Vector3 {\n        return this.m_Point;\n    }\n\n    /**\n     * The normal of the surface the ray hit.\n     */\n    public get normal(): Vector3 {\n        return this.m_Normal;\n    }\n\n    /**\n     * The distance from the ray's origin to the impact point.\n     */\n    public get distance(): number {\n        return this.m_Distance;\n    }\n\n    /**\n     * The Transform of the rigidbody or collider that was hit.\n     */\n    public get transform(): Transform | null {\n        const rb = this.rigidbody;\n        if (rb !== null) {\n            return rb.transform;\n        }\n\n        const col = this.collider;\n        if (col !== null) {\n            return col.transform;\n        }\n\n        return null;\n    }\n\n    /**\n     * The Rigidbody of the collider that was hit. If the collider is not attached to\n     * a rigidbody then it is null.\n     */\n    public get rigidbody(): Rigidbody | null {\n        return this.m_Collider?.attachedRigidbody;\n    }\n\n    /**\n     * Creates a new RaycastHit with default values.\n     */\n    public constructor() { }\n\n    /**\n     * Creates a new RaycastHit with the specified values.\n     * @param point The impact point\n     * @param normal The surface normal\n     * @param distance The distance from origin\n     * @param colliderInstanceID The collider instance ID\n     */\n    public static create(\n        point: Vector3,\n        normal: Vector3,\n        distance: number,\n        collider: Collider,\n    ): RaycastHit {\n        const hit = new RaycastHit();\n        hit.m_Point = point;\n        hit.m_Normal = normal;\n        hit.m_Distance = distance;\n        hit.m_Collider = collider;\n        return hit;\n    }\n\n    /**\n     * Returns a string representation of the RaycastHit.\n     */\n    public toString(): string {\n        return `RaycastHit(point: ${this.point}, normal: ${this.normal}, distance: ${this.distance}, collider: ${this.collider?.gameObject?.name || 'null'})`;\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Fragment, TriangleRasterizer } from \"./TriangleRasterizer\";\nimport { VertexAttributes } from \"../Renderer/RendererDefine\";\n\nexport class BarycentricTriangleRasterizer extends TriangleRasterizer {\n    /**\n     * 计算点 p 在三角形 (v0, v1, v2) 中的重心坐标。\n     * @param p 目标点（2D 坐标）\n     * @param v0 三角形顶点0（2D 坐标）\n     * @param v1 三角形顶点1（2D 坐标）\n     * @param v2 三角形顶点2（2D 坐标）\n     * @returns 重心坐标 [alpha, beta, gamma]\n     */\n    private static computeBarycentricCoords(\n        p: [number, number],\n        v0: Vector3,\n        v1: Vector3,\n        v2: Vector3\n    ): [number, number, number] {\n        const [x, y] = p;\n\n        // 计算整个三角形的面积（的两倍，有符号）\n        const areaABC = (v1.x - v0.x) * (v2.y - v0.y) - (v2.x - v0.x) * (v1.y - v0.y);\n\n        // 计算子三角形 PBC 的面积（的两倍，有符号）\n        const areaPBC = (v1.x - x) * (v2.y - y) - (v2.x - x) * (v1.y - y);\n        const alpha = areaPBC / areaABC;\n\n        // 计算子三角形 PCA 的面积（的两倍，有符号）\n        const areaPCA = (v2.x - x) * (v0.y - y) - (v0.x - x) * (v2.y - y);\n        const beta = areaPCA / areaABC;\n\n        // 计算子三角形 PAB 的面积（的两倍，有符号）\n        const areaPAB = (v0.x - x) * (v1.y - y) - (v1.x - x) * (v0.y - y);\n        const gamma = areaPAB / areaABC;\n        // 或者 gamma = 1 - alpha - beta;\n\n        return [alpha, beta, gamma];\n    }\n\n    /**\n     * 对三角形进行栅格化并插值顶点属性\n     * @param v0 第一个顶点的屏幕坐标\n     * @param v1 第二个顶点的屏幕坐标\n     * @param v2 第三个顶点的屏幕坐标\n     * @param attrs0 第一个顶点的所有属性\n     * @param attrs1 第二个顶点的所有属性\n     * @param attrs2 第三个顶点的所有属性\n     * @returns 所有像素及其插值后的属性\n     */\n    public static rasterizeTriangle(\n        v0: Vector3,\n        v1: Vector3,\n        v2: Vector3,\n        attrs0: VertexAttributes,\n        attrs1: VertexAttributes,\n        attrs2: VertexAttributes\n    ): Fragment[] {\n        const fragments: Fragment[] = [];\n\n        // 1. 计算三角形的包围盒\n        const minX = Math.floor(Math.min(v0.x, v1.x, v2.x));\n        const maxX = Math.ceil(Math.max(v0.x, v1.x, v2.x));\n        const minY = Math.floor(Math.min(v0.y, v1.y, v2.y));\n        const maxY = Math.ceil(Math.max(v0.y, v1.y, v2.y));\n\n        // 2. 遍历边界框内的每一个像素点\n        for (let y = minY; y <= maxY; y++) {\n            for (let x = minX; x <= maxX; x++) {\n                const pixel: [number, number] = [x, y];\n\n                // 3. 计算当前像素点的重心坐标\n                const [alpha, beta, gamma] = this.computeBarycentricCoords(pixel, v0, v1, v2);\n\n                // 4. 判断点是否在三角形内部（重心坐标均非负，且近似和为1）\n                const tolerance = 1e-5; // 浮点数精度容差\n                if (\n                    alpha >= -tolerance &&\n                    beta >= -tolerance &&\n                    gamma >= -tolerance &&\n                    Math.abs(alpha + beta + gamma - 1) < tolerance\n                ) {\n                    // 5. 使用重心坐标作为权重对属性进行插值\n                    // 例如，如果 T 是 number: interpolatedValue = alpha * v0.attr + beta * v1.attr + gamma * v2.attr;\n                    // 如果 T 是数组，需要每个分量分别计算。\n                    const interpolatedAttrs = this.interpolateAttributes(\n                        attrs0, attrs1, attrs2, alpha, beta, gamma\n                    );\n\n                    // 6. 深度值，需要单独额外插值计算\n                    const z = this.interpolateNumber(v0.z, v1.z, v2.z, alpha, beta, gamma);\n\n                    // 添加到片段列表\n                    fragments.push({\n                        x, y, z,\n                        attributes: interpolatedAttrs\n                    });\n                }\n            }\n        }\n\n        return fragments;\n    }\n\n    /**\n     * 基于 barycentric 坐标插值顶点属性，支持多种类型\n     */\n    private static interpolateAttributes(\n        a: VertexAttributes,\n        b: VertexAttributes,\n        c: VertexAttributes,\n        w: number,  // 顶点a的权重\n        u: number, // 顶点b的权重\n        v: number // 顶点c的权重\n    ): VertexAttributes {\n        const result: VertexAttributes = {};\n\n        // 获取所有属性名称并验证\n        const attributeNames = Object.keys(a);\n        this.validateAttributes(attributeNames, b, c);\n\n        // 对每个属性进行插值\n        for (const name of attributeNames) {\n            const valA = a[name];\n            const valB = b[name];\n            const valC = c[name];\n\n            // 根据属性类型执行相应的插值\n            if (typeof valA === 'number') {\n                // 标量插值\n                result[name] = this.interpolateNumber(\n                    valA as number,\n                    valB as number,\n                    valC as number,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Color) {\n                // Color插值\n                result[name] = this.interpolateColor(\n                    valA,\n                    valB as Color,\n                    valC as Color,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Vector2) {\n                // Vector2插值\n                result[name] = this.interpolateVector2(\n                    valA,\n                    valB as Vector2,\n                    valC as Vector2,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Vector3) {\n                // Vector3插值\n                result[name] = this.interpolateVector3(\n                    valA,\n                    valB as Vector3,\n                    valC as Vector3,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Vector4) {\n                // Vector4插值\n                result[name] = this.interpolateVector4(\n                    valA,\n                    valB as Vector4,\n                    valC as Vector4,\n                    w, u, v\n                );\n            }\n            else if (valA instanceof Matrix4x4) {\n                // 矩阵插值 - 对矩阵的每个元素分别插值\n                result[name] = this.interpolateMatrix4x4(\n                    valA,\n                    valB as Matrix4x4,\n                    valC as Matrix4x4,\n                    w, u, v\n                );\n            }\n            else {\n                throw new Error(`不支持的属性类型: ${typeof valA} 用于属性 ${name}`);\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * 验证所有顶点是否具有相同的属性\n     */\n    private static validateAttributes(attributeNames: string[], ...otherAttrs: VertexAttributes[]) {\n        for (const attrs of otherAttrs) {\n            for (const name of attributeNames) {\n                if (!(name in attrs)) {\n                    throw new Error(`顶点属性不匹配: 缺少属性 ${name}`);\n                }\n            }\n\n            for (const name of Object.keys(attrs)) {\n                if (!attributeNames.includes(name)) {\n                    throw new Error(`顶点属性不匹配: 存在额外属性 ${name}`);\n                }\n            }\n        }\n    }\n\n    /**\n     * 插值标量\n     */\n    private static interpolateNumber(a: number, b: number, c: number, w: number, u: number, v: number): number {\n        return a * w + b * u + c * v;\n    }\n\n    /**\n     * 插值Color\n     */\n    private static interpolateColor(a: Color, b: Color, c: Color, w: number, u: number, v: number): Color {\n        return new Color(\n            a.r * w + b.r * u + c.r * v,\n            a.g * w + b.g * u + c.g * v,\n            a.b * w + b.b * u + c.b * v,\n            a.a * w + b.a * u + c.a * v\n        );\n    }\n\n    /**\n     * 插值Vector2\n     */\n    private static interpolateVector2(a: Vector2, b: Vector2, c: Vector2, w: number, u: number, v: number): Vector2 {\n        return new Vector2(\n            a.x * w + b.x * u + c.x * v,\n            a.y * w + b.y * u + c.y * v\n        );\n    }\n\n    /**\n     * 插值Vector3\n     */\n    private static interpolateVector3(a: Vector3, b: Vector3, c: Vector3, w: number, u: number, v: number): Vector3 {\n        return new Vector3(\n            a.x * w + b.x * u + c.x * v,\n            a.y * w + b.y * u + c.y * v,\n            a.z * w + b.z * u + c.z * v\n        );\n    }\n\n    /**\n     * 插值Vector4\n     */\n    private static interpolateVector4(a: Vector4, b: Vector4, c: Vector4, w: number, u: number, v: number): Vector4 {\n        return new Vector4(\n            a.x * w + b.x * u + c.x * v,\n            a.y * w + b.y * u + c.y * v,\n            a.z * w + b.z * u + c.z * v,\n            a.w * w + b.w * u + c.w * v\n        );\n    }\n\n    /**\n     * 插值4x4矩阵 - 对矩阵的每个元素分别进行插值\n     */\n    private static interpolateMatrix4x4(a: Matrix4x4, b: Matrix4x4, c: Matrix4x4, w: number, u: number, v: number): Matrix4x4 {\n        const result = new Matrix4x4();\n        for (let row = 0; row < 4; row++) {\n            for (let col = 0; col < 4; col++) {\n                result.matrix[row][col] = a.matrix[row][col] * w + b.matrix[row][col] * u + c.matrix[row][col] * v;\n            }\n        }\n        return result;\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Transform } from \"../Core/Transform\";\nimport { Renderer } from \"../Component/Renderer\";\nimport { MeshRenderer } from \"../Component/MeshRenderer\";\nimport { Camera, CameraClearFlags } from \"../Component/Camera\";\nimport { Engine } from \"../Core/Engine\";\nimport { EngineConfig, RenderSettings } from \"../Core/Setting\";\nimport { Mesh } from \"../Resources/Mesh\";\nimport { BarycentricTriangleRasterizer } from \"./BarycentricTriangleRasterizer\"\nimport { TransformTools } from \"../Math/TransformTools\";\nimport { Debug } from \"../Utils/Debug\";\nimport { CullMode, depthTest, StencilOp, stencilTest, ZTest, ColorMask, applyColorMask, RenderType, applyStencilOperation, blendColors } from \"./RendererDefine\";\nimport { GameObject } from \"../Core/GameObject\";\nimport { Gizmo } from \"../Utils/Gizmo\";\n\nenum DrawMode {\n    Wireframe = 1,\n    Point = 2,\n    Shader = 4,\n}\n\nexport class RasterizationPipeline {\n    public drawMode: DrawMode = DrawMode.Shader;\n\n    // 缓冲区\n    private frameBuffer: Uint32Array;\n    private depthBuffer: Float32Array;\n    private stencilBuffer: Uint8Array;\n    private overdrawBuffer: Uint32Array;\n\n    // 上下文内容\n    private currentCamera: Camera;\n    private currentRendererObjs: MeshRenderer[];\n\n    constructor(frameBuffer: Uint32Array) {\n        this.frameBuffer = frameBuffer;\n        this.depthBuffer = new Float32Array(EngineConfig.canvasWidth * EngineConfig.canvasHeight);\n        this.stencilBuffer = new Uint8Array(EngineConfig.canvasWidth * EngineConfig.canvasHeight);\n        this.overdrawBuffer = new Uint32Array(EngineConfig.canvasWidth * EngineConfig.canvasHeight);\n    }\n\n    public Render() {\n        const rootObject = Engine.sceneManager.getActiveScene()?.getRootGameObject();\n        if (rootObject) {\n            const cameras = Camera.cameras;\n            // 相机depth越低越早渲染\n            cameras.sort((a, b) => a.depth - b.depth);\n            // 每个相机渲染一遍\n            for (let i = 0, len = cameras.length; i < len; i++) {\n                this.currentCamera = cameras[i];\n                this.Clear(this.currentCamera);\n                this.currentRendererObjs = rootObject.getComponentsInChildren(MeshRenderer);\n\n                const opaqueRendererObjs: MeshRenderer[] = [];\n                const transparentRendererObjs: MeshRenderer[] = [];\n\n                // 渲染管线1.视锥体剔除并对场景物体进行排序\n                const viewMatrix = this.currentCamera.getViewMatrix();\n                for (let j = 0, len = this.currentRendererObjs.length; j < len; j++) {\n                    const renderer = this.currentRendererObjs[j];\n                    const shader = renderer.material.shader;\n                    if (shader == null) continue;\n\n                    // 视锥体剔除\n                    if (this.FrustumCulling(renderer)) continue;\n\n                    // 存储Z值用于后续排序\n                    const viewPos = viewMatrix.multiplyVector4(new Vector4(renderer.transform.worldPosition, 1));\n                    (renderer as any).viewZ = viewPos.z;\n\n                    // 归类\n                    const renderType = shader.renderType;\n                    if (renderType == RenderType.Opaque) {\n                        opaqueRendererObjs.push(renderer);\n                    }\n                    else if (renderType == RenderType.Transparent) {\n                        transparentRendererObjs.push(renderer);\n                    }\n                }\n                // 对不透明物体进行排序：从前往后，降低overdraw\n                opaqueRendererObjs.sort((a, b) => {\n                    return (a as any).viewZ - (b as any).viewZ;\n                });\n                // 对透明物体进行排序：从后往前，先绘制远的，颜色混合才能正确\n                transparentRendererObjs.sort((a, b) => {\n                    return (b as any).viewZ - (a as any).viewZ;\n                });\n\n                // 渲染管线2.绘制阴影贴图\n                for (const obj of opaqueRendererObjs) {\n                    if (obj.castShadows) {\n                        // this.DrawShadowMap(obj);\n                    }\n                }\n\n                // 渲染管线2.按照先不透明再天空盒再透明的顺序绘画\n                for (const obj of opaqueRendererObjs) {\n                    this.DrawObject(obj);\n                }\n                // 绘制天空盒\n                if (this.drawMode == DrawMode.Shader) this.DrawSkybox(this.currentCamera);\n                // 绘制透明物体\n                for (const obj of transparentRendererObjs) {\n                    this.DrawObject(obj);\n                }\n            }\n            // 调试信息\n            this.DebugDraw();\n        }\n    }\n\n    //#region 基础绘制接口\n\n    public Clear(camera: Camera): void {\n\n        const clearFlags = camera.clearFlags;\n        const viewport = camera.viewPort;\n        const backgroundColor = camera.backGroundColor;\n\n        // 1. 计算视口在屏幕缓冲区中的像素范围\n        const viewportPixelX = Math.floor(viewport.x * EngineConfig.canvasWidth);\n        const viewportPixelY = Math.floor(viewport.y * EngineConfig.canvasHeight);\n        const viewportPixelWidth = Math.floor(viewport.z * EngineConfig.canvasWidth);\n        const viewportPixelHeight = Math.floor(viewport.w * EngineConfig.canvasHeight);\n\n        // 2. 根据清除标志，清除视口对应的区域\n        if (camera.clearFlags == CameraClearFlags.Skybox) {\n            this.clearViewportRegion(this.frameBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, 0);\n        }\n        else if (clearFlags == CameraClearFlags.Color) {\n            this.clearViewportRegion(this.frameBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, backgroundColor.ToUint32());\n        }\n\n        if (clearFlags != CameraClearFlags.None) {\n            this.clearViewportRegion(this.depthBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, 1);\n            this.clearViewportRegion(this.stencilBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, 0);\n        }\n\n        this.clearViewportRegion(this.overdrawBuffer, viewportPixelX, viewportPixelY, viewportPixelWidth, viewportPixelHeight, 0);\n    }\n\n    /**\n     * 清除缓冲区中指定矩形区域的辅助方法\n     * @param buffer 目标缓冲区 (Uint32Array 或 Float32Array 等)\n     * @param x 区域起始X坐标 (像素)\n     * @param y 区域起始Y坐标 (像素)\n     * @param width 区域宽度 (像素)\n     * @param height 区域高度 (像素)\n     * @param value 要填充的值\n     */\n    private clearViewportRegion(buffer: Uint32Array | Float32Array | Uint8Array, x: number, y: number, width: number, height: number, value: number): void {\n        // 如果是满屏幕，则快速填充\n        if (x == 0 && y == 0 && width == EngineConfig.canvasWidth && height == EngineConfig.canvasHeight) {\n            buffer.fill(value);\n            return;\n        }\n\n        const canvasWidth = EngineConfig.canvasWidth;\n        for (let row = y; row < y + height; row++) {\n            const startIndex = row * canvasWidth + x;\n            const endIndex = startIndex + width;\n            // 使用 subarray 和 fill 来填充一行中的连续区域，比逐个像素设置更快\n            buffer.subarray(startIndex, endIndex).fill(value);\n        }\n    }\n\n    private DrawSkybox(camera: Camera): void {\n        if (camera.clearFlags !== CameraClearFlags.Skybox) return;\n        if (!RenderSettings.skybox) return;\n\n        // 获取相机的视图和投影矩阵\n        const viewMatrix = camera.getViewMatrix();\n        // 修正视图矩阵：移除平移，只保留旋转\n        viewMatrix.setTranslate(Vector3.ZERO);\n        const projectionMatrix = camera.getProjectionMatrix();\n        // 计算逆视图投影矩阵，用于将屏幕坐标转换为世界方向\n        const invViewProj = projectionMatrix.multiply(viewMatrix).invert();\n\n        // 视口像素范围计算\n        const viewport = camera.viewPort;\n        const viewportPixelX = Math.floor(viewport.x * EngineConfig.canvasWidth);\n        const viewportPixelY = Math.floor(viewport.y * EngineConfig.canvasHeight);\n        const viewportPixelWidth = Math.floor(viewport.z * EngineConfig.canvasWidth);\n        const viewportPixelHeight = Math.floor(viewport.w * EngineConfig.canvasHeight);\n\n        // 遍历视口内的像素\n        for (let y = viewportPixelY; y < viewportPixelY + viewportPixelHeight; y++) {\n            for (let x = viewportPixelX; x < viewportPixelX + viewportPixelWidth; x++) {\n                // 检查深度缓冲，如果该像素已有物体则跳过\n                const depth = this.depthBuffer[y * EngineConfig.canvasWidth + x];\n                if (depth < 0.999) continue; // 使用接近1的值避免精度问题\n\n                // 将屏幕坐标转换为标准化设备坐标(NDC)，基于视口而非整个画布\n                const ndcX = ((x - viewportPixelX) / viewportPixelWidth) * 2 - 1;\n                const ndcY = 1 - ((y - viewportPixelY) / viewportPixelHeight) * 2;\n\n                // 创建NDC空间中的点（远平面）\n                const ndcPos = new Vector4(ndcX, ndcY, 1.0, 1.0);\n\n                // 将NDC坐标转换为世界空间方向\n                const worldDir = invViewProj.multiplyVector4(ndcPos);\n                const direction = new Vector3(worldDir.x, worldDir.y, worldDir.z).normalize();\n\n                // 采样天空盒并绘制像素\n                const skyColor = RenderSettings.skybox.SampleCube(direction);\n                this.DrawPixel(x, y, skyColor);\n            }\n        }\n    }\n\n    public DrawPixel(x: number, y: number, color: Color, countOverdraw: boolean = false) {\n        // 绘制到屏幕上的像素应该是整数的\n        // 优化: 使用位运算代替Math.floor，提升性能\n        x = (x | 0);\n        y = (y | 0);\n        // x = Math.floor(x);\n        // y = Math.floor(y);\n\n        if (x < 0 || x >= EngineConfig.canvasWidth || y < 0 || y >= EngineConfig.canvasHeight) {\n            return;\n        }\n\n        const index = y * EngineConfig.canvasWidth + x;\n        this.frameBuffer[index] = color.ToUint32();\n        // Overdraw计数\n        if (countOverdraw) this.overdrawBuffer[index]++\n    }\n\n    public DrawLine(x1: number, y1: number, x2: number, y2: number, color1: Color, color2?: Color) {\n        // 使用位运算优化边界检查\n        // 画线前要进行边检查，确保线的两端点都在屏幕内，如果线的范围很长并且不在屏幕范围内，都进行计算会造成浪费大量的资源，裁剪掉超出的部分\n        const w = EngineConfig.canvasWidth;\n        const h = EngineConfig.canvasHeight;\n        if (((x1 | y1) < 0) || (x1 >= w) || (y1 >= h) || ((x2 | y2) < 0) || (x2 >= w) || (y2 >= h)) {\n            //TODO:裁剪掉超出屏幕的部分\n            return;\n        }\n\n        // 取整\n        x1 = x1 | 0;\n        y1 = y1 | 0;\n        x2 = x2 | 0;\n        y2 = y2 | 0;\n\n        const dx = x2 - x1;\n        const dy = y2 - y1;\n        const length = Math.max(Math.abs(dx), Math.abs(dy));\n\n        // 为何要区分斜率是否偏水平还是垂直呢？因为如果不区分，例如当斜率大于1时，会导致直线绘制不连续，因为y会跳变，而不是连续的增加。\n        // 只有斜率刚好为1时，x跟y才是连续同步自增的，x+1，则y也+1\n        // 所以，当斜率大于1时，我们需要使用y作为循环变量，而当斜率小于1时，我们需要使用x作为循环变量。\n        // 举个极端例子，当斜率为0时，直线就是一条垂直直线，如果这时候还用x作为循环变量，则会导致这条直线上所有y点都对应一个x，也就是说这条线变成一个点了。\n\n        // 斜率小于1，直线偏水平情况，使用x作为循环变量\n        if (Math.abs(dx) > Math.abs(dy)) {\n            // 下面的循环绘制函数是从左往右的，这里要确保结束点在开始点的右边\n            if (x2 < x1) {\n                [x1, y1, x2, y2] = [x2, y2, x1, y1];\n                // 同时交换颜色\n                if (color2 !== undefined) [color1, color2] = [color2, color1];\n            }\n\n            // 斜率\n            const a = dy / dx;\n            // 截距（y=ax+b，b=y-ax）\n            // const b = y1 - a * x1;\n            let y = y1;\n            // 绘制直线\n            for (let x = x1; x <= x2; x++) {\n                // 计算插值因子 (0 到 1)\n                const t = length > 0 ? (x - x1) / length : 0;\n                // 根据是否有第二个颜色决定使用单一颜色还是插值\n                const color = color2 !== undefined ? this.interpolateColor(color1, color2, t) : color1;\n\n                this.DrawPixel(x, y, color);\n                // 直线公式y=ax+b，这里不必计算这个公式，因为当x加1自增时，y也会加a，所以可以直接用y+a代替ax+b，算是一个性能优化点\n                // y = a * x + b;\n                y = y + a;\n            }\n\n            // 或\n            // const ys = this.Interpolate(x1, y1, x2, y2);\n            // for (let x = x1; x <= x2; x++) {\n            //     this.DrawPixel(x, ys[x - x1], color);\n            // }\n        }\n        // 斜率大于1，直线偏垂直情况，使用y作为循环变量\n        else {\n            if (y2 < y1) {\n                [x1, y1, x2, y2] = [x2, y2, x1, y1];\n                // 同时交换颜色\n                if (color2 !== undefined) [color1, color2] = [color2, color1];\n            }\n\n            const a = dx / dy;\n            let x = x1;\n            for (let y = y1; y <= y2; y++) {\n                // 计算插值因子 (0 到 1)\n                const t = length > 0 ? (y - y1) / length : 0;\n                // 根据是否有第二个颜色决定使用单一颜色还是插值\n                const color = color2 !== undefined ? this.interpolateColor(color1, color2, t) : color1;\n\n                this.DrawPixel(x, y, color);\n                x = x + a;\n            }\n\n            // 或\n            // const xs = this.Interpolate(y1, x1, y2, x2);\n            // for (let y = y1; y <= y2; y++) {\n            //     this.DrawPixel(xs[y - y1], y, color);\n            // }\n        }\n    }\n\n    public DrawTriangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, color: Color) {\n        this.DrawLine(x1, y1, x2, y2, color);\n        this.DrawLine(x2, y2, x3, y3, color);\n        this.DrawLine(x3, y3, x1, y1, color);\n    }\n\n    //#endregion\n\n    //#region 变换\n\n    /*\n     * 顶点处理阶段：模型空间 →（模型矩阵）→ 世界空间 →（视图矩阵）→ 观察空间 →（投影矩阵）→ 裁剪空间 →（透视除法）→ NDC 空间 →（视口变换）→ 屏幕空间 → 光栅化渲染\n     */\n    public VertexProcessingStage(vertices: Vector3[], transform: Transform): Vector3[] {\n        const outVertices = new Array(vertices.length);\n\n        // 1. MVP变换到裁剪空间\n        // 模型空间 -> 世界空间 -> 观察空间 -> 裁剪空间\n        // 2. 透视除法：将裁剪空间坐标转换为标准设备坐标（NDC）\n        // 裁剪空间 -> 标准化设备坐标（NDC 空间）\n        // 3. 视口变换：将NDC坐标映射到屏幕坐标\n        // 标准化设备坐标（NDC 空间） -> 屏幕空间\n        for (let i = 0; i < vertices.length; i += 1) {\n            const out = TransformTools.ModelToScreenPos(vertices[i], transform.localToWorldMatrix, this.currentCamera);\n            outVertices[i] = new Vector3(out.screen.x, out.screen.y, out.depth);\n        }\n\n        return outVertices;\n    }\n\n    //#endregion\n\n    //#region 剔除裁剪\n\n    // 视锥体剔除\n    public FrustumCulling(obj: MeshRenderer): boolean {\n        const bounds = obj.mesh?.bounds;\n        if (bounds == null || bounds.length <= 0) return true;\n\n        const modelMatrix = obj.transform.localToWorldMatrix;\n\n        for (let i = 0; i < bounds.length; i++) {\n            const bound = bounds[i];\n            // TODO:待优化，只使用2个极值点即可，这里用了全部8个点来计算\n            for (let j = 0; j < bound.vertices.length; j++) {\n                const vertex = bound.vertices[j];\n                const worldPos = modelMatrix.multiplyVector4(new Vector4(vertex, 1));\n                if (this.currentCamera.isPointInFrustum(new Vector3(worldPos.x, worldPos.y, worldPos.z))) {\n                    // 只要有任何一个点在视锥体内，则该物体可见，不该被裁剪\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    // 背面剔除\n    public FaceCulling(triangles: number[], mesh: Mesh, renderer: Renderer, cullMode: CullMode) {\n        if (cullMode === CullMode.Off) return triangles;\n\n        // A.屏幕空间三角形顶点顺序法\n        // 这里只是做个示范，实际上这一步骤可以放到顶点着色器之后，就可以少顶点变换计算（但缺点就是多了很多顶点着色器计算，不过在GPU中这都不算什么）\n        // const visibleTriangles: number[] = [];\n        // const modelMatrix = renderer.transform.localToWorldMatrix;\n        // const viewMatrix = this.currentCamera.getViewMatrix();\n        // const projectionMatrix = this.currentCamera.getProjectionMatrix();\n        // const mvpMatrix = projectionMatrix.multiply(viewMatrix).multiply(modelMatrix);\n        // for (let i = 0; i < triangles.length; i += 3) {\n        //     const v1 = mesh.vertices[triangles[i + 0]];\n        //     const v2 = mesh.vertices[triangles[i + 1]];\n        //     const v3 = mesh.vertices[triangles[i + 2]];\n        //     // 转换到裁剪空间\n        //     const p1 = mvpMatrix.multiplyVector4(new Vector4(v1, 1));\n        //     const p2 = mvpMatrix.multiplyVector4(new Vector4(v2, 1));\n        //     const p3 = mvpMatrix.multiplyVector4(new Vector4(v3, 1));\n        //     // 检查 w 分量有效性\n        //     if (p1.w === 0 || p2.w === 0 || p3.w === 0) {\n        //         continue;\n        //     }\n        //     // 裁剪空间转 NDC（透视除法）\n        //     const p1NDC = { x: p1.x / p1.w, y: p1.y / p1.w };\n        //     const p2NDC = { x: p2.x / p2.w, y: p2.y / p2.w };\n        //     const p3NDC = { x: p3.x / p3.w, y: p3.y / p3.w };\n        //     // 计算叉积判断环绕顺序（假设逆时针为正面）\n        //     const cross = (p2NDC.x - p1NDC.x) * (p3NDC.y - p1NDC.y) -\n        //         (p2NDC.y - p1NDC.y) * (p3NDC.x - p1NDC.x);\n        //     // 保留正面三角形（cross < 0 表示逆时针）\n        //     if (cross < 0) {\n        //         visibleTriangles.push(triangles[i + 0], triangles[i + 1], triangles[i + 2]);\n        //     }\n        // }\n\n        // B.观察空间法向量与视线方向的点积判断法\n        const visibleTriangles: number[] = [];\n        const faceNormals = mesh.faceNormals;\n        const faceCenters = mesh.faceCenters;\n        const cameraPosition = this.currentCamera.transform.position;\n\n        // 获取模型矩阵（模型本地空间到世界空间的变换矩阵）\n        const modelMatrix = renderer.transform.localToWorldMatrix;\n        // 计算法线矩阵：模型矩阵的逆矩阵的转置\n        const normalMatrix = renderer.transform.localToWorldNormalMatrix;\n\n        for (let i = 0; i < faceNormals.length; i++) {\n            // 要把Vec3转为齐次坐标点，即w=1\n            const world_center = new Vector3(modelMatrix.multiplyVector4(new Vector4(faceCenters[i], 1)));\n            // 要把Vec3转为齐次坐向量，即w=0\n            const world_normal = normalMatrix.multiplyVector3(faceNormals[i]);\n\n            // 2.获取面的中心到摄像机的向量\n            const centerToCamera = Vector3.subtract(cameraPosition, world_center);\n\n            // 3.计算这2个向量的夹角\n            const dot = world_normal.dot(centerToCamera);\n\n            // 4.判断夹角是否大于等于0°小于90°\n            if ((cullMode === CullMode.Back && dot > 0) || (cullMode === CullMode.Front && dot < 0)) {\n                const triIndex = i * 3;\n                visibleTriangles.push(triangles[triIndex], triangles[triIndex + 1], triangles[triIndex + 2]);\n            }\n        }\n\n        return visibleTriangles;\n    }\n\n    // 遮挡剔除\n    public OcclusionCulling() {\n\n    }\n\n    public ClipTriangle(triangle: Vector3[]) {\n\n    }\n\n    //#endregion\n\n    //#region 绘制物体\n\n    public DrawObject(renderer: MeshRenderer) {\n        const mesh = renderer.mesh;\n        if (!mesh) return;\n\n        const shader = renderer.material.shader;\n        if (!shader) return;\n        shader.init(renderer.transform, this.currentCamera);\n\n        // 渲染所有通道\n        shader.passes.forEach(pass => {\n            const renderType = shader.renderType;\n            const renderState = pass.renderState ?? {};\n            const colorMask = renderState.colorMask ?? ColorMask.All;\n            const cullMode = renderState.cullMode ?? CullMode.Back;\n            const zTest = renderState.zTest ?? ZTest.Less;\n            const zWrite = pass.renderState?.zWrite ?? true;\n            const blend = pass.renderState?.blend;\n            const stencil = pass.renderState?.stencil;\n\n            let triangles = mesh.triangles;\n\n            // 渲染管线3.背面剔除\n            triangles = this.FaceCulling(triangles, mesh, renderer, cullMode);\n            // 渲染管线4.遮挡剔除\n            this.OcclusionCulling();\n\n            for (let i = 0; i < triangles.length; i += 3) {\n                // 渲染管线5.顶点着色器(MVP变换)\n                const { vertexOut: v1, attrOut: v1Attr } = pass.vert({\n                    vertex: mesh.vertices[triangles[i]],\n                    uv: mesh.uv[triangles[i]],\n                    normal: mesh.normals[triangles[i]],\n                    tangent: mesh.tangents[triangles[i]],\n                });\n                const { vertexOut: v2, attrOut: v2Attr } = pass.vert({\n                    vertex: mesh.vertices[triangles[i + 1]],\n                    uv: mesh.uv[triangles[i + 1]],\n                    normal: mesh.normals[triangles[i + 1]],\n                    tangent: mesh.tangents[triangles[i + 1]],\n                });\n                const { vertexOut: v3, attrOut: v3Attr } = pass.vert({\n                    vertex: mesh.vertices[triangles[i + 2]],\n                    uv: mesh.uv[triangles[i + 2]],\n                    normal: mesh.normals[triangles[i + 2]],\n                    tangent: mesh.tangents[triangles[i + 2]],\n                });\n\n                // 渲染管线6.屏幕映射\n                const p1 = TransformTools.ClipToScreenPos(v1, this.currentCamera);\n                const p2 = TransformTools.ClipToScreenPos(v2, this.currentCamera);\n                const p3 = TransformTools.ClipToScreenPos(v3, this.currentCamera);\n\n                // 渲染管线7.裁剪\n                // 画三角形前要进行边检查，确保三角形的三个点都在屏幕内，如果有点超出屏幕范围，则裁剪，并生成新的三角形\n                // 简单粗暴的裁剪，有点在屏幕外直接抛弃\n                const w = EngineConfig.canvasWidth;\n                const h = EngineConfig.canvasHeight;\n                if (((p1.x | p1.y) < 0) || (p1.x >= w) || (p1.y >= h) || ((p2.x | p2.y) < 0) || (p2.x >= w) || (p2.y >= h) || ((p3.x | p3.y) < 0) || (p3.x >= w) || (p3.y >= h)) {\n                    continue;\n                }\n\n                if (this.drawMode & DrawMode.Wireframe) {\n                    this.DrawTriangle(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, Color.WHITE);\n                }\n                if (this.drawMode & DrawMode.Point) {\n                    this.DrawPixel(p1.x, p1.y, Color.WHITE);\n                    this.DrawPixel(p2.x, p2.y, Color.WHITE);\n                    this.DrawPixel(p3.x, p3.y, Color.WHITE);\n                }\n                if (this.drawMode & DrawMode.Shader) {\n                    // 渲染管线8.光栅化\n                    const fragments = BarycentricTriangleRasterizer.rasterizeTriangle(p1, p2, p3, v1Attr, v2Attr, v3Attr);\n\n                    for (let i = 0; i < fragments.length; i++) {\n                        const fragment = fragments[i];\n                        const x = fragment.x;\n                        const y = fragment.y;\n                        const z = fragment.z;\n\n                        // 检查坐标是否在屏幕范围内\n                        if (x < 0 || x >= EngineConfig.canvasWidth ||\n                            y < 0 || y >= EngineConfig.canvasHeight) {\n                            return;\n                        }\n\n                        // 获取当前缓冲区里的值\n                        const index = y * EngineConfig.canvasWidth + x;\n                        const currentBufferColor = Color.FromUint32(this.frameBuffer[index]);\n                        const currentBufferDepth = this.depthBuffer[index];\n                        const currentBufferStencil = this.stencilBuffer[index];\n\n                        // 渲染管线9.早期深度测试\n                        const depthTestResult = depthTest(z, currentBufferDepth, zTest);\n                        if (!depthTestResult) continue;\n\n                        // 渲染管线10.模板测试\n                        if (stencil) {\n                            const stencilTestResult = stencilTest(currentBufferStencil, stencil.ref, stencil.comparisonOperation, stencil.readMask);\n                            // 执行模板操作（根据测试结果和深度测试结果）\n                            let operation: StencilOp | undefined;\n                            if (stencilTestResult) { operation = depthTestResult ? stencil.passOperation : stencil.zFailOperation; }\n                            else { operation = stencil.failOperation; }\n                            // 应用操作更新模板值\n                            const newValue = applyStencilOperation(currentBufferStencil, stencil.ref, operation, stencil.writeMask);\n                            // 更新模板缓冲区\n                            this.stencilBuffer[index] = newValue;\n                            // 模板测试失败跳过像素\n                            if (!stencilTestResult) continue;\n                        }\n\n                        // 渲染管线11.像素着色器\n                        let pixelColor = pass.frag(fragment.attributes);\n                        // 像素被丢弃，可能是Alpha测试失败\n                        if (!pixelColor) continue;\n\n                        // 渲染管线12.根据 zWrite 标志决定是否写入深度缓冲区\n                        // 如果没设置zWrite，则默认允许写入，否则就判断zWrite值\n                        if (zWrite) {\n                            this.depthBuffer[index] = z;\n                        }\n\n                        // 渲染管线13.颜色混合\n                        if (blend) {\n                            const existingColor = Color.FromUint32(this.frameBuffer[index]);\n                            pixelColor = blendColors(pixelColor, existingColor, blend.src, blend.dst, blend.op);\n                        }\n\n                        // 渲染管线13.绘制像素到帧缓冲\n                        // 根据颜色掩码决定最终写入的分量（未启用的通道保留原有值）\n                        applyColorMask(pixelColor, currentBufferColor, colorMask);\n                        // 如果是不透明着色，alpha通道强行输出1\n                        if (renderType === RenderType.Opaque) pixelColor.a = 1;\n                        this.DrawPixel(x, y, pixelColor, true);\n                    }\n                }\n            }\n        });\n    }\n\n    //#endregion\n\n    //#region 工具函数\n\n    private DebugDraw(): void {\n        // 绘制包围盒\n        // this.DrawBounds();\n\n        // 绘制法线跟切线\n        // this.DrawNormal();\n\n        // 绘制深度纹理\n        // this.DrawDepthBuffer();\n\n        // 绘制Overdarw\n        // this.DrawOverdraw();\n\n        // 绘制模板缓冲区\n        // this.DrawStencilBuffer();\n\n        // 绘制物理调试信息\n        // PhysicsDebugDraw.DrawPhysicsDebug(this.DrawLine.bind(this));\n\n        // 绘制Gizmo\n        this.DrawGizmo(Engine.sceneManager.getActiveScene()?.getRootGameObject() || null);\n\n        // 绘制调试线\n        const lines = Debug.GetDebugLines();\n        lines.forEach(line => {\n            this.DrawLine(line.start.x, line.start.y, line.end.x, line.end.y, line.color);\n        });\n    }\n\n    private DrawGizmo(obj: GameObject | null): void {\n        if (!obj) return;\n        const components = obj.getAllComponents();\n        for (const component of components) {\n            if (typeof (component as any).onDrawGizmos === 'function') {\n                (component as any).onDrawGizmos();\n                Gizmo.Reset();\n            }\n        }\n        // 绘制子物体\n        for (const child of obj.transform.children) {\n            this.DrawGizmo(child.gameObject);\n        }\n    }\n\n    private DrawNormal(): void {\n        for (const renderer of this.currentRendererObjs) {\n            const mesh = renderer.mesh;\n            if (!mesh) return;\n            const modelMatrix = renderer.transform.localToWorldMatrix;\n            const camera = Camera.mainCamera;\n\n            // 面法线\n            // for (let i = 0; i < mesh.faceNormals.length; i++) {\n            //     const normal = mesh.faceNormals[i];\n            //     const center = mesh.faceCenters[i];\n            //     const start = TransformTools.ModelToScreenPos(center, renderer.transform, this.currentCamera).screen;\n            //     const end = TransformTools.ModelToScreenPos(Vector3.add(center, Vector3.multiplyScalar(normal, 0.1)), renderer.transform, this.currentCamera).screen;\n            //     this.DrawLine(start.x, start.y, end.x, end.y, Color.RED, Color.GREEN);\n            // }\n\n            // 顶点法线、切线、副切线\n            for (let i = 0; i < mesh.vertices.length; i++) {\n                const vertex = mesh.vertices[i];\n                const normal = mesh.normals[i];\n                const tangent = mesh.tangents[i];\n\n                // 确保我们有必要的数据\n                if (!normal || !tangent) continue;\n                // 从切线向量提取w分量（用于计算副切线方向）\n                const tangentW = tangent.w;\n                // 从切线向量获取xyz分量作为切线方向\n                const tangentDir = new Vector3(tangent.x, tangent.y, tangent.z).normalize();\n                // 计算副切线 (Bitangent) = 法线 × 切线 × w分量\n                const bitangentDir = Vector3.cross(normal, tangentDir).multiplyScalar(tangentW).normalize();\n                // 将顶点位置转换到屏幕空间\n                const vertexScreenPos = TransformTools.ModelToScreenPos(vertex, modelMatrix, camera).screen;\n                // 定义线的长度\n                const lineLength = 0.1;\n\n                // 1. 绘制法线 - 红色\n                const normalEnd = Vector3.add(vertex, Vector3.multiplyScalar(normal, lineLength));\n                const normalScreenEnd = TransformTools.ModelToScreenPos(normalEnd, modelMatrix, camera).screen;\n                this.DrawLine(vertexScreenPos.x, vertexScreenPos.y, normalScreenEnd.x, normalScreenEnd.y, Color.RED);\n\n                // 2. 绘制切线 - 绿色\n                const tangentEnd = Vector3.add(vertex, Vector3.multiplyScalar(tangentDir, lineLength));\n                const tangentScreenEnd = TransformTools.ModelToScreenPos(tangentEnd, modelMatrix, camera).screen;\n                this.DrawLine(vertexScreenPos.x, vertexScreenPos.y, tangentScreenEnd.x, tangentScreenEnd.y, Color.GREEN);\n\n                // 3. 绘制副切线 - 黄色\n                const bitangentEnd = Vector3.add(vertex, Vector3.multiplyScalar(bitangentDir, lineLength));\n                const bitangentScreenEnd = TransformTools.ModelToScreenPos(bitangentEnd, modelMatrix, camera).screen;\n                this.DrawLine(vertexScreenPos.x, vertexScreenPos.y, bitangentScreenEnd.x, bitangentScreenEnd.y, Color.YELLOW);\n            }\n        }\n    }\n\n    private DrawDepthBuffer(): void {\n        for (let x = 0; x < EngineConfig.canvasWidth; x++) {\n            for (let y = 0; y < EngineConfig.canvasHeight; y++) {\n                const index = y * EngineConfig.canvasWidth + x;\n                const currentDepth = this.depthBuffer[index];\n                // 创建灰度颜色对象\n                const depthColor = new Color(currentDepth, currentDepth, currentDepth);\n                this.DrawPixel(x, y, depthColor);\n            }\n        }\n    }\n\n    private DrawStencilBuffer(): void {\n        for (let x = 0; x < EngineConfig.canvasWidth; x++) {\n            for (let y = 0; y < EngineConfig.canvasHeight; y++) {\n                const index = y * EngineConfig.canvasWidth + x;\n                const stencilValue = this.stencilBuffer[index];\n                const stencilColor = new Color(stencilValue, stencilValue, stencilValue);\n                this.DrawPixel(x, y, stencilColor);\n            }\n        }\n    }\n\n    private DrawOverdraw(): void {\n        this.frameBuffer.fill(0);\n        // 使用预设的最大可视化范围来归一化 Overdraw 计数\n        const MAX_VISUALIZATION_RANGE = 8;\n        for (let x = 0; x < EngineConfig.canvasWidth; x++) {\n            for (let y = 0; y < EngineConfig.canvasHeight; y++) {\n                const index = y * EngineConfig.canvasWidth + x;\n                const overdrawCount = this.overdrawBuffer[index];\n                if (overdrawCount > 0) {\n                    // 将 Overdraw 计数限制在可视化范围内并归一化\n                    const normalizedCount = Math.min(overdrawCount, MAX_VISUALIZATION_RANGE) / MAX_VISUALIZATION_RANGE;\n                    // 计算透明度：Overdraw 越多，越不透明\n                    const alpha = normalizedCount;\n                    // 组合颜色（ARGB格式）\n                    const color = Color.ORANGE;\n                    color.a = alpha;\n                    this.DrawPixel(x, y, color);\n                }\n            }\n        }\n    }\n\n    private DrawBounds() {\n        for (const renderer of this.currentRendererObjs) {\n            const mesh = renderer.mesh;\n            if (!mesh) return;\n            const camera = Camera.mainCamera;\n            const modelMatrix = renderer.transform.localToWorldMatrix;\n\n            const bounds = mesh.bounds;\n            const color = Color.WHITE;\n\n            const bound = bounds[0];\n\n            // 将所有顶点转换到屏幕空间\n            const screenVertices = bound.vertices.map(v =>\n                TransformTools.ModelToScreenPos(new Vector3(v.x, v.y, v.z), modelMatrix, camera).screen\n            );\n\n            // 绘制所有边\n            bound.edges.forEach(([i1, i2]) => {\n                const v1 = screenVertices[i1];\n                const v2 = screenVertices[i2];\n                this.DrawLine(v1.x, v1.y, v2.x, v2.y, color);\n            });\n\n            // 绘制中心点\n            const center = bound.center;\n            const screenCenter = TransformTools.ModelToScreenPos(center, modelMatrix, camera).screen;\n            if (screenCenter) {\n                // 绘制一个小十字作为中心点标记\n                const size = 5;\n                this.DrawLine(\n                    screenCenter.x - size, screenCenter.y,\n                    screenCenter.x + size, screenCenter.y,\n                    Color.RED\n                );\n                this.DrawLine(\n                    screenCenter.x, screenCenter.y - size,\n                    screenCenter.x, screenCenter.y + size,\n                    Color.RED\n                );\n            }\n        }\n    }\n\n    /**\n     * 颜色插值辅助函数\n     * @param color1 起始颜色 (32位整数，格式为0xAARRGGBB)\n     * @param color2 结束颜色 (32位整数，格式为0xAARRGGBB)\n     * @param t 插值因子 (0 到 1)\n     * @returns 插值后的颜色\n     */\n    private interpolateColor(color1: Color, color2: Color, t: number): Color {\n        // 提取ARGB分量\n        const a1 = color1.a;\n        const r1 = color1.r;\n        const g1 = color1.g;\n        const b1 = color1.b;\n\n        const a2 = color2.a;\n        const r2 = color2.r;\n        const g2 = color2.g;\n        const b2 = color2.b;\n\n        // 线性插值每个分量\n        const a = Math.round(a1 + (a2 - a1) * t);\n        const r = Math.round(r1 + (r2 - r1) * t);\n        const g = Math.round(g1 + (g2 - g1) * t);\n        const b = Math.round(b1 + (b2 - b1) * t);\n\n        return new Color(r, g, b, a);\n    }\n\n    //#endregion\n}","import { Color } from \"../Math/Color\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { CubeMap } from \"../Resources/CubeMap\";\nimport { Texture } from \"../Resources/Texture\";\n\n// 支持的属性类型\nexport type AttributeType = number | Color | Vector2 | Vector3 | Vector4 | Matrix4x4 | Texture | CubeMap | string;\n\n// 顶点属性集合，键为属性名称，值为任意支持的类型\nexport interface VertexAttributes {\n    [key: string]: AttributeType;\n}\n\n// 着色器Pass接口\nexport interface ShaderPass {\n    name?: string;\n    // 顶点着色器：带默认实现\n    vert: (input: VertexAttributes) => { vertexOut: Vector4; attrOut: VertexAttributes; };\n    // 片段着色器：默认返回洋红色\n    frag: (input: VertexAttributes) => Color | null;\n    // 渲染状态\n    renderState?: ShaderRenderState;\n}\n\nexport interface ShaderRenderState {\n    colorMask?: ColorMask;           // 颜色写入通道掩码，默认值为 All\n    cullMode?: CullMode;             // 剔除模式，默认值 Back\n    zTest?: ZTest;                   // 早期深度测试函数，默认值 LEqual\n    zWrite?: boolean;                // 深度写入，默认值为 true\n    blend?: Blend;                   // 混合状态\n    stencil?: Stencil;               // 模板测试状态\n}\n\nexport interface Blend {\n    op?: BlendOp;            // 混合操作，默认值为 Add\n    src: BlendFactor;\n    dst: BlendFactor;\n    // Unity支持RGB跟A分开计算混合，这里简单实现暂时屏蔽\n    // srcRGB?: BlendFactor;\n    // dstRGB?: BlendFactor;\n    // srcAlpha?: BlendFactor;\n    // dstAlpha?: BlendFactor;\n}\n\nexport interface Stencil {\n    /*\n    Ref:GPU 使用在 compareOperation 中定义的操作将模板缓冲区的当前内容与此值进行比较。\n    此值使用 readMask 或 writeMask 进行遮罩，具体取决于进行的是读取操作还是写入操作。\n    如果 Pass、Fail 或 ZFail 的值为 Replace，则 GPU 也可以将此值写入模板缓冲区。\n    */\n    ref?: number;             // 参考值，0 到 255。默认值为 0\n    readMask?: number;        // GPU 在执行模板测试时使用此值作为遮罩。0 到 255。默认值为 255\n    writeMask?: number;       // GPU 在写入模板缓冲区时使用此值作为遮罩。0 到 255。默认值为 255\n    comparisonOperation?: StencilCompareFunction;   // GPU 为所有像素的模板测试执行的操作。默认值为 Always\n    passOperation?: StencilOp;      // 当像素通过模板测试和深度测试时，GPU 对模板缓冲区执行的操作。默认值为 Keep\n    failOperation?: StencilOp;      // 当像素未通过模板测试时，GPU 对模板缓冲区执行的操作。默认值为 Keep\n    zFailOperation?: StencilOp;     // 当像素通过模板测试但未通过深度测试时，GPU 对模板缓冲区执行的操作。默认值为 Keep\n}\n\nexport enum BlendFactor {\n    One,            // 此输入的值是 one。该值用于使用源或目标的颜色的值。\n    Zero,           // 此输入的值是 zero。该值用于删除源或目标值。\n    SrcColor,       // GPU 将此输入的值乘以源颜色值。\n    SrcAlpha,       // GPU 将此输入的值乘以源 Alpha 值。\n    DstColor,       // GPU 将此输入的值乘以帧缓冲区的源颜色值。\n    DstAlpha,       // GPU 将此输入的值乘以帧缓冲区的源 Alpha 值。\n    OneMinusSrcColor,       // GPU 将此输入的值乘以（1 - 源颜色）。\n    OneMinusSrcAlpha,       // GPU 将此输入的值乘以（1 - 源 Alpha）。\n    OneMinusDstColor,       // GPU 将此输入的值乘以（1 - 目标颜色）。\n    OneMinusDstAlpha,       // GPU 将此输入的值乘以（1 - 目标 Alpha）。\n}\n\nexport enum BlendOp {\n    Add,    // 将源和目标相加。\n    Sub,    // 从源减去目标。\n    RevSub, // 从目标减去源。\n    Min,    // 使用源和目标中的较小者。\n    Max,    // 使用源和目标中的较大者。\n}\n\nexport enum RenderType {\n    Opaque,\n    Transparent\n}\n\nexport enum ColorMask {\n    None = 0,\n    Red = 1,\n    Green = 2,\n    Blue = 4,\n    Alpha = 8,\n    All = Red | Green | Blue | Alpha\n}\n\nexport enum CullMode {\n    Off = 0,\n    Front = 1,\n    Back = 2,\n}\n\nexport enum StencilCompareFunction {\n    Never = 1,\t    // 从不渲染像素。\n    Less = 2,\t    // 在参考值小于模板缓冲区中的当前值时渲染像素。\n    Equal = 3,\t    // 在参考值等于模板缓冲区中的当前值时渲染像素。\n    LEqual = 4,\t    // 在参考值小于或等于模板缓冲区中的当前值时渲染像素。\n    Greater = 5,\t// 在参考值大于模板缓冲区中的当前值时渲染像素。\n    NotEqual = 6,\t// 在参考值与模板缓冲区中的当前值不同时渲染像素。\n    GEqual = 7,\t    // 在参考值大于或等于模板缓冲区中的当前值时渲染像素。\n    Always = 8,\t    // 始终渲染像素。\n}\n\nexport enum StencilOp {\n    Keep = 0,\t    // 保持模板缓冲区的当前内容。\n    Zero = 1,\t    // 将 0 写入模板缓冲区。\n    Replace = 2,\t// 将参考值写入缓冲区。\n    IncrSat = 3,\t// 递增缓冲区中的当前值。如果该值已经是 255，则保持为 255。\n    DecrSat = 4,\t// 递减缓冲区中的当前值。如果该值已经是 0，则保持为 0。\n    Invert = 5,\t    // 将缓冲区中当前值的所有位求反。\n    IncrWrap = 7,\t// 递增缓冲区中的当前值。如果该值已经是 255，则变为 0。\n    DecrWrap = 8,\t// 递减缓冲区中的当前值。如果该值已经是 0，则变为 255。\n}\n\nexport enum ZTest {\n    Less,\t    // 绘制位于现有几何体前面的几何体。不绘制位于现有几何体相同距离或后面的几何体。\n    LEqual,\t    // 绘制位于现有几何体前面或相同距离的几何体。不绘制位于现有几何体后面的几何体。\n    Equal,\t    // 绘制位于现有几何体相同距离的几何体。不绘制位于现有几何体前面的或后面的几何体。\n    GEqual,\t    // 绘制位于现有几何体后面或相同距离的几何体。不绘制位于现有几何体前面的几何体。\n    Greater,\t// 绘制位于现有几何体后面的几何体。不绘制位于现有几何体相同距离或前面的几何体。\n    NotEqual,\t// 绘制不位于现有几何体相同距离的几何体。不绘制位于现有几何体相同距离的几何体。\n    Always,\t    // 不进行深度测试。绘制所有几何体，无论距离如何。\n}\n\n// 模板测试常用配置预设\nexport const StencilPresets = {\n    // 只渲染前面的物体，遮挡后面的物体\n    frontOnly(ref: number): Partial<Stencil> {\n        return {\n            comparisonOperation: StencilCompareFunction.Equal,\n            ref: ref,\n            passOperation: StencilOp.Keep,\n            failOperation: StencilOp.Zero,\n            zFailOperation: StencilOp.Keep\n        }\n    },\n\n    // 只渲染被标记物体的轮廓\n    outline(ref: number): Partial<Stencil> {\n        return {\n            comparisonOperation: StencilCompareFunction.NotEqual,\n            ref: ref,\n            passOperation: StencilOp.Keep,\n            failOperation: StencilOp.Keep,\n            zFailOperation: StencilOp.Keep\n        }\n    },\n\n    // 累积渲染（如渲染透明物体）\n    accumulate(ref: number): Partial<Stencil> {\n        return {\n            comparisonOperation: StencilCompareFunction.Always,\n            ref: ref,\n            passOperation: StencilOp.IncrSat,\n            failOperation: StencilOp.Keep,\n            zFailOperation: StencilOp.Keep\n        }\n    },\n};\n\n/**\n * 执行深度测试\n * @param z 当前片元的深度值\n * @param currentDepth 深度缓冲区中对应位置的深度值\n * @param zTestFunc 深度测试函数（ZTest 枚举值）\n * @returns 是否通过深度测试\n */\nexport function depthTest(z: number, currentDepth: number, zTestFunc: ZTest = ZTest.LEqual): boolean {\n    switch (zTestFunc) {\n        case ZTest.Less:\n            return z < currentDepth; // 小于当前深度则通过\n        case ZTest.Equal:\n            return Math.abs(z - currentDepth) < 1e-6; // 等于当前深度则通过（需考虑浮点精度）\n        case ZTest.LEqual:\n            return z <= currentDepth; // 小于或等于当前深度则通过\n        case ZTest.Greater:\n            return z > currentDepth; // 大于当前深度则通过\n        case ZTest.NotEqual:\n            return Math.abs(z - currentDepth) >= 1e-6; // 不等于当前深度则通过\n        case ZTest.GEqual:\n            return z >= currentDepth; // 大于或等于当前深度则通过\n        case ZTest.Always:\n            return true; // 总是通过\n        default:\n            console.warn(\"Unknown ZTest function, using Less as default.\");\n            return z < currentDepth;\n    }\n}\n\n/**\n * 执行带掩码的模板比较操作\n * @param currentValue 当前模板值\n * @param refValue 参考值\n * @param func 比较函数\n * @param readMask 读取掩码，用于过滤需要比较的位\n * @returns 比较结果（是否通过）\n */\nexport function stencilTest(\n    currentValue: number,\n    refValue: number = 0,\n    func: StencilCompareFunction = StencilCompareFunction.Always,\n    readMask: number = 0xFF\n): boolean {\n    // 应用读取掩码，只保留需要比较的位\n    const maskedCurrent = currentValue & readMask;\n    const maskedRef = refValue & readMask;\n\n    switch (func) {\n        case StencilCompareFunction.Never:\n            return false;\n        case StencilCompareFunction.Less:\n            return maskedCurrent < maskedRef;\n        case StencilCompareFunction.Equal:\n            return maskedCurrent === maskedRef;\n        case StencilCompareFunction.LEqual:\n            return maskedCurrent <= maskedRef;\n        case StencilCompareFunction.Greater:\n            return maskedCurrent > maskedRef;\n        case StencilCompareFunction.NotEqual:\n            return maskedCurrent !== maskedRef;\n        case StencilCompareFunction.GEqual:\n            return maskedCurrent >= maskedRef;\n        case StencilCompareFunction.Always:\n            return true;\n        default:\n            return false;\n    }\n}\n\n/**\n * 应用模板操作\n * @param currentValue 当前模板值\n * @param refValue 参考值\n * @param op 要执行的操作\n * @param writeMask 写入掩码\n * @returns 新的模板值\n */\nexport function applyStencilOperation(\n    currentValue: number,\n    refValue: number = 0,\n    op: StencilOp = StencilOp.Keep,\n    writeMask: number = 0xFF\n): number {\n    let newValue = currentValue;\n\n    switch (op) {\n        case StencilOp.Keep:\n            // 保持当前值\n            newValue = currentValue;\n            break;\n        case StencilOp.Zero:\n            // 设置为0\n            newValue = 0;\n            break;\n        case StencilOp.Replace:\n            // 替换为参考值\n            newValue = refValue;\n            break;\n        case StencilOp.IncrSat:\n            // 递增并饱和（不超过255）\n            newValue = Math.min(currentValue + 1, 255);\n            break;\n        case StencilOp.DecrSat:\n            // 递减并饱和（不低于0）\n            newValue = Math.max(currentValue - 1, 0);\n            break;\n        case StencilOp.Invert:\n            // 反转当前值（仅低8位）\n            newValue = (~currentValue) & 0xFF;\n            break;\n        case StencilOp.IncrWrap:\n            // 递增并循环（超过255则回到0）\n            newValue = (currentValue + 1) % 256;\n            break;\n        case StencilOp.DecrWrap:\n            // 递减并循环（低于0则回到255）\n            newValue = (currentValue - 1 + 256) % 256;\n            break;\n    }\n\n    // 应用写入掩码：只修改掩码允许的位\n    return (newValue & writeMask) | (currentValue & ~writeMask);\n}\n\nexport function applyColorMask(color: Color, bufferColor: Color, mask: ColorMask) {\n    color.r = (mask & ColorMask.Red) ? color.r : bufferColor.r;\n    color.g = (mask & ColorMask.Green) ? color.g : bufferColor.g;\n    color.b = (mask & ColorMask.Blue) ? color.b : bufferColor.b;\n    color.a = (mask & ColorMask.Alpha) ? color.a : bufferColor.a;\n}\n\nexport function blendColors(srcColor: Color, dstColor: Color, srcFactor: BlendFactor, dstFactor: BlendFactor, blendOp: BlendOp = BlendOp.Add): Color {\n    // finalValue = sourceFactor * sourceValue operation destinationFactor * destinationValue\n    // 最终颜色 = 源颜色 × 源因子 [混合操作] 目标颜色 × 目标因子\n\n    // 计算源因子和目标因子的具体值\n    const [srcRFactor, srcGFactor, srcBFactor, srcAFactor] = getBlendFactorValues(srcColor, dstColor, srcFactor);\n    const [dstRFactor, dstGFactor, dstBFactor, dstAFactor] = getBlendFactorValues(srcColor, dstColor, dstFactor);\n\n    // 计算混合后的每个通道值\n    let r = calculateBlendValue(srcColor.r, dstColor.r, srcRFactor, dstRFactor, blendOp);\n    let g = calculateBlendValue(srcColor.g, dstColor.g, srcGFactor, dstGFactor, blendOp);\n    let b = calculateBlendValue(srcColor.b, dstColor.b, srcBFactor, dstBFactor, blendOp);\n    let a = calculateBlendValue(srcColor.a, dstColor.a, srcAFactor, dstAFactor, blendOp);\n\n    // 确保颜色值在0-1范围内并返回新颜色\n    return new Color(r, g, b, a);\n}\n\n/**\n * 根据混合因子获取对应的计算值\n */\nfunction getBlendFactorValues(src: Color, dst: Color, factor: BlendFactor): [number, number, number, number] {\n    switch (factor) {\n        case BlendFactor.One:\n            return [1, 1, 1, 1];\n        case BlendFactor.Zero:\n            return [0, 0, 0, 0];\n        case BlendFactor.SrcColor:\n            return [src.r, src.g, src.b, src.a];\n        case BlendFactor.SrcAlpha:\n            return [src.a, src.a, src.a, src.a];\n        case BlendFactor.DstColor:\n            return [dst.r, dst.g, dst.b, dst.a];\n        case BlendFactor.DstAlpha:\n            return [dst.a, dst.a, dst.a, dst.a];\n        case BlendFactor.OneMinusSrcColor:\n            return [1 - src.r, 1 - src.g, 1 - src.b, 1 - src.a];\n        case BlendFactor.OneMinusSrcAlpha:\n            return [1 - src.a, 1 - src.a, 1 - src.a, 1 - src.a];\n        case BlendFactor.OneMinusDstColor:\n            return [1 - dst.r, 1 - dst.g, 1 - dst.b, 1 - dst.a];\n        case BlendFactor.OneMinusDstAlpha:\n            return [1 - dst.a, 1 - dst.a, 1 - dst.a, 1 - dst.a];\n        default:\n            return [0, 0, 0, 0];\n    }\n}\n\n/**\n * 根据混合操作计算单个通道的混合结果\n */\nfunction calculateBlendValue(src: number, dst: number, srcFactor: number, dstFactor: number, op: BlendOp): number {\n    const srcVal = src * srcFactor;\n    const dstVal = dst * dstFactor;\n\n    switch (op) {\n        case BlendOp.Add:\n            return srcVal + dstVal;\n        case BlendOp.Sub:\n            return srcVal - dstVal;\n        case BlendOp.RevSub:\n            return dstVal - srcVal;\n        case BlendOp.Min:\n            return Math.min(srcVal, dstVal);\n        case BlendOp.Max:\n            return Math.max(srcVal, dstVal);\n        default:\n            return srcVal;\n    }\n}","import { Vector3 } from \"../Math/Vector3\";\nimport { VertexAttributes } from \"./RendererDefine\";\n\n// 片段数据接口，包含像素位置和插值后的属性\nexport interface Fragment {\n    x: number;\n    y: number;\n    z: number;\n    attributes: VertexAttributes;\n}\n\nexport abstract class TriangleRasterizer {\n    public static rasterizeTriangle(v0: Vector3, v1: Vector3, v2: Vector3, attrs0: VertexAttributes, attrs1: VertexAttributes, attrs2: VertexAttributes): Fragment[] {\n        return [];\n    }\n}","import { Vector3 } from \"../Math/Vector3\";\nimport { Color } from \"../Math/Color\";\nimport { Texture } from \"./Texture\";\nimport { UObject } from \"../Core/UObject\";\n\nexport class CubeMap extends UObject {\n    private POSITIVE_X: Texture;\n    private NEGATIVE_X: Texture;\n    private POSITIVE_Y: Texture;\n    private NEGATIVE_Y: Texture;\n    private POSITIVE_Z: Texture;\n    private NEGATIVE_Z: Texture;\n\n    /**\n     * 构造立方体纹理\n     * @param positiveX 正X方向纹理\n     * @param negativeX 负X方向纹理\n     * @param positiveY 正Y方向纹理\n     * @param negativeY 负Y方向纹理\n     * @param positiveZ 正Z方向纹理\n     * @param negativeZ 负Z方向纹理\n     */\n    constructor(\n        positiveX: Texture,\n        negativeX: Texture,\n        positiveY: Texture,\n        negativeY: Texture,\n        positiveZ: Texture,\n        negativeZ: Texture\n    ) {\n        super();\n        this.POSITIVE_X = positiveX;\n        this.NEGATIVE_X = negativeX;\n        this.POSITIVE_Y = positiveY;\n        this.NEGATIVE_Y = negativeY;\n        this.POSITIVE_Z = positiveZ;\n        this.NEGATIVE_Z = negativeZ;\n    }\n\n    /**\n     * 根据方向向量采样立方体贴图\n     * @param direction 归一化的方向向量\n     * @returns 采样得到的颜色\n     */\n    public SampleCube(direction: Vector3): Color {\n        // 确保方向向量已归一化\n        const dir = direction.normalize();\n        const x = dir.x;\n        const y = dir.y;\n        const z = dir.z;\n\n        // 找到绝对值最大的分量，确定要采样的面\n        const absX = Math.abs(x);\n        const absY = Math.abs(y);\n        const absZ = Math.abs(z);\n\n        // 计算各面的UV坐标并采样\n        if (absX >= absY && absX >= absZ) {\n            // X方向为主方向（左右面）\n            const u = 0.5 - z / (2 * absX);\n            const v = 0.5 - y / (2 * absX);\n            return x > 0 ? this.POSITIVE_X.Sample(u, v) : this.NEGATIVE_X.Sample(1 - u, v);\n        } else if (absY >= absX && absY >= absZ) {\n            // Y方向为主方向（上下底面）\n            const u = 0.5 + x / (2 * absY);\n            const v = 0.5 + z / (2 * absY);\n            return y > 0 ? this.POSITIVE_Y.Sample(u, v) : this.NEGATIVE_Y.Sample(1 - u, v);\n        } else {\n            // Z方向为主方向（前后两面）\n            const u = 0.5 + x / (2 * absZ);\n            const v = 0.5 - y / (2 * absZ);\n            return z > 0 ? this.POSITIVE_Z.Sample(u, v) : this.NEGATIVE_Z.Sample(1 -u, v);\n        }\n    }\n\n    /**\n     * 销毁立方体贴图资源\n     */\n    public onDestroy(): void {\n        UObject.Destroy(this.POSITIVE_X);\n        UObject.Destroy(this.NEGATIVE_X);\n        UObject.Destroy(this.POSITIVE_Y);\n        UObject.Destroy(this.NEGATIVE_Y);\n        UObject.Destroy(this.POSITIVE_Z);\n        UObject.Destroy(this.NEGATIVE_Z);\n    }\n}\n","import { UObject } from \"../Core/UObject\";\nimport { Color } from \"../Math/Color\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"../Shader/Shader\";\nimport { Texture } from \"./Texture\";\n\nexport class Material extends UObject {\n    public shader: Shader | null = null;\n    private currentPass: number = -1;\n\n    public onDestroy(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n    * 激活指定索引的Pass，默认-1，表示所有的PASS都会执行，激活后只执行激活的那个PASS\n    * @param passIndex Pass的索引，从0开始\n    * @returns 是否激活成功\n    */\n    public setPass(passIndex: number): boolean {\n        if (!this.shader) {\n            console.warn(\"未指定着色器，无法激活Pass\");\n            return false;\n        }\n\n        // 检查Pass索引是否有效（假设Shader有passCount属性）\n        if (passIndex < 0 || passIndex >= (this.shader as any).passCount) {\n            console.warn(`Pass索引 ${passIndex} 无效`);\n            return false;\n        }\n\n        // 调用Shader的激活Pass方法（假设Shader有activatePass方法）\n        if (typeof (this.shader as any).activatePass === 'function') {\n            (this.shader as any).activatePass(passIndex);\n            this.currentPass = passIndex;\n            return true;\n        }\n\n        console.warn(\"着色器不支持Pass激活操作\");\n        return false;\n    }\n\n    /**\n     * 批量设置多个属性\n     * @param properties 包含多个属性键值对的对象\n     */\n    public setProperties(properties: VertexAttributes): void {\n        if (!this.shader) {\n            console.warn(\"未指定着色器，无法批量设置属性\");\n            return;\n        }\n\n        // 遍历所有属性并设置\n        for (const [propertyName, value] of Object.entries(properties)) {\n            this.setValue(propertyName, value);\n        }\n    }\n\n    /**\n     * 给着色器中的颜色属性设置值\n     * @param propertyName 属性名称\n     * @param color 颜色值\n     */\n    public setColor(propertyName: string, color: Color): void {\n        this.setValue(propertyName, color);\n    }\n\n    /**\n     * 给着色器中的数字属性设置值\n     * @param propertyName 属性名称\n     * @param value 数字值\n     */\n    public setNumber(propertyName: string, value: number): void {\n        this.setValue(propertyName, value);\n    }\n\n    /**\n     * 给着色器中的矩阵属性设置值\n     * @param propertyName 属性名称\n     * @param matrix 矩阵值\n     */\n    public setMatrix4x4(propertyName: string, matrix: Matrix4x4): void {\n        this.setValue(propertyName, matrix);\n    }\n\n    /**\n     * 给着色器中的纹理属性设置值\n     * @param propertyName 属性名称\n     * @param texture 纹理对象\n     */\n    public setTexture(propertyName: string, texture: Texture): void {\n        this.setValue(propertyName, texture);\n    }\n\n    /**\n     * 给着色器中的Vector4属性设置值\n     * @param propertyName 属性名称\n     * @param vector 向量值\n     */\n    public setVector4(propertyName: string, vector: Vector4): void {\n        this.setValue(propertyName, vector);\n    }\n\n    /**\n     * 通用的属性设置方法，用于实际执行设置操作\n     * @param propertyName 属性名称\n     * @param value 要设置的值\n     */\n    private setValue(propertyName: string, value: any): void {\n        if (!this.shader) {\n            console.warn(`未指定着色器，无法设置属性 ${propertyName}`);\n            return;\n        }\n\n        // 检查着色器是否有该属性\n        if (!(propertyName in this.shader)) {\n            console.warn(`着色器中不存在属性 ${propertyName}`);\n            return;\n        }\n\n        // 尝试直接设置着色器的属性值\n        try {\n            (this.shader as any)[propertyName] = value;\n        } catch (error) {\n            console.error(`设置属性 ${propertyName} 失败:`, error);\n        }\n    }\n\n    /**\n     * 获取着色器中属性的当前值\n     * @param propertyName 属性名称\n     * @returns 属性值或null\n     */\n    public getPropertyValue(propertyName: string): any {\n        if (!this.shader || !(propertyName in this.shader)) {\n            return null;\n        }\n\n        return (this.shader as any)[propertyName];\n    }\n}","import { UObject } from \"../Core/UObject\";\nimport { Bounds } from \"../Math/Bounds\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\n\nexport class Mesh extends UObject {\n    public bounds: Bounds[];                       // 包围盒\n    public material: string[];                     // 材质\n    public triangles: number[];                    // 三角形\n    public faceNormals: Vector3[];                 // 面法线\n    public faceCenters: Vector3[];                 // 面中心\n    public vertices: Vector3[];                    // 顶点\n    public uv: Vector2[];                          // UV\n    public normals: Vector3[];                     // 法线\n    public tangents: Vector4[];                    // 切线\n    public subMeshes: SubMesh[];                   // 子网格\n\n    public constructor() {\n        super();\n        this.bounds = [];\n        this.material = [];\n        this.triangles = [];\n        this.faceNormals = [];\n        this.vertices = [];\n        this.uv = [];\n        this.normals = [];\n        this.tangents = [];\n        this.subMeshes = [];\n    }\n\n    // 检查网格是否有效\n    public checkValid(): Boolean {\n        return this.vertices.length !== 0\n            && this.vertices.length === this.uv.length\n            && this.vertices.length === this.normals.length\n            && this.vertices.length === this.tangents.length\n\n            && this.triangles.length !== 0\n            && this.triangles.length % 3 === 0\n            \n            && this.faceNormals.length === this.faceCenters.length\n            && this.faceNormals.length * 3 === this.triangles.length;\n    }\n\n    /**\n     * 均匀缩放网格（以原点为基准）\n     * @param scale 缩放倍数\n     */\n    public scale(scale: number): void {\n        if (scale === 1) return; // 缩放倍数为1时无需处理\n\n        // 缩放所有顶点（直接以原点为基准）\n        for (let i = 0; i < this.vertices.length; i++) {\n            this.vertices[i] = this.vertices[i].clone().multiplyScalar(scale);\n        }\n\n        // 缩放面中心\n        for (let i = 0; i < this.faceCenters.length; i++) {\n            this.faceCenters[i] = this.faceCenters[i].clone().multiplyScalar(scale);\n        }\n\n        // 均匀缩放只需归一化法线（方向不变但长度会受缩放影响）\n        for (let i = 0; i < this.normals.length; i++) {\n            this.normals[i] = this.normals[i].normalize();\n        }\n        for (let i = 0; i < this.faceNormals.length; i++) {\n            this.faceNormals[i] = this.faceNormals[i].normalize();\n        }\n\n        // 重新计算包围盒\n        this.calculateBounds();\n    }\n\n    // 重新计算包围盒和切线等数据\n    public calculateMeshData() {\n        // 计算切线向量\n        this.calculateTangents();\n        // 计算整体包围盒\n        this.calculateBounds();\n        // 计算三角面的法向量\n        this.calculateFaceNormals();\n    }\n\n    public onDestroy(): void {\n        // 清理所有数组引用\n        this.vertices.length = 0;\n        this.uv.length = 0;\n        this.normals.length = 0;\n        this.tangents.length = 0;\n        this.triangles.length = 0;\n        this.faceNormals.length = 0;\n        this.faceCenters.length = 0;\n        this.subMeshes.length = 0;\n        this.bounds.length = 0;\n        this.material.length = 0;\n    }\n\n    /**\n     * 重新计算所有包围盒\n     */\n    private calculateBounds(): void {\n        // 更新子网格信息\n        this.subMeshes.forEach(subMesh => {\n            // 计算子网格包围盒\n            const subVertices = this.vertices.slice(\n                subMesh.firstVertex,\n                subMesh.firstVertex + subMesh.vertexCount\n            );\n            subMesh.bounds = Bounds.fromPoints(subVertices);\n        });\n\n        // 更新整体包围盒\n        this.bounds = this.subMeshes.map(sm => sm.bounds);\n    }\n\n    private calculateFaceNormals() {\n        if (this.vertices.length === 0 || this.triangles.length === 0) return;\n\n        this.faceNormals = [];\n        this.faceCenters = [];\n\n        for (let i = 0; i < this.triangles.length; i += 3) {\n            const i0 = this.triangles[i];\n            const i1 = this.triangles[i + 1];\n            const i2 = this.triangles[i + 2];\n\n            const v0 = this.vertices[i0];\n            const v1 = this.vertices[i1];\n            const v2 = this.vertices[i2];\n\n            const e1 = Vector3.subtract(v1, v0);\n            const e2 = Vector3.subtract(v2, v0);\n            const faceNormal = Vector3.cross(e1, e2).normalize();\n            this.faceNormals.push(faceNormal);\n\n            const center = Vector3.add(v0, v1).add(v2).divide(3);\n            this.faceCenters.push(center);\n        }\n    }\n\n    /**\n     * 计算网格的切线向量\n     */\n    private calculateTangents() {\n        if (this.vertices.length === 0 || this.triangles.length === 0) return;\n\n        const tan1 = new Array(this.vertices.length).fill(0).map(() => new Vector3(0, 0, 0));\n        const tan2 = new Array(this.vertices.length).fill(0).map(() => new Vector3(0, 0, 0));\n\n        for (let i = 0; i < this.triangles.length; i += 3) {\n            const i0 = this.triangles[i];\n            const i1 = this.triangles[i + 1];\n            const i2 = this.triangles[i + 2];\n\n            const v0 = this.vertices[i0];\n            const v1 = this.vertices[i1];\n            const v2 = this.vertices[i2];\n\n            const w0 = this.uv[i0];\n            const w1 = this.uv[i1];\n            const w2 = this.uv[i2];\n\n            const x1 = v1.x - v0.x;\n            const y1 = v1.y - v0.y;\n            const z1 = v1.z - v0.z;\n\n            const x2 = v2.x - v0.x;\n            const y2 = v2.y - v0.y;\n            const z2 = v2.z - v0.z;\n\n            const s1 = w1.x - w0.x;\n            const t1 = w1.y - w0.y;\n            const s2 = w2.x - w0.x;\n            const t2 = w2.y - w0.y;\n\n            const r = 1.0 / (s1 * t2 - s2 * t1);\n            const tx = (t2 * x1 - t1 * x2) * r;\n            const ty = (t2 * y1 - t1 * y2) * r;\n            const tz = (t2 * z1 - t1 * z2) * r;\n\n            tan1[i0].x += tx;\n            tan1[i0].y += ty;\n            tan1[i0].z += tz;\n\n            tan1[i1].x += tx;\n            tan1[i1].y += ty;\n            tan1[i1].z += tz;\n\n            tan1[i2].x += tx;\n            tan1[i2].y += ty;\n            tan1[i2].z += tz;\n\n            const bx = (s1 * x2 - s2 * x1) * r;\n            const by = (s1 * y2 - s2 * y1) * r;\n            const bz = (s1 * z2 - s2 * z1) * r;\n\n            tan2[i0].x += bx;\n            tan2[i0].y += by;\n            tan2[i0].z += bz;\n\n            tan2[i1].x += bx;\n            tan2[i1].y += by;\n            tan2[i1].z += bz;\n\n            tan2[i2].x += bx;\n            tan2[i2].y += by;\n            tan2[i2].z += bz;\n        }\n\n        for (let i = 0; i < this.vertices.length; i++) {\n            const n = this.normals[i];\n            const t = tan1[i];\n\n            const tangent = Vector3.subtract(t, Vector3.multiplyScalar(n, Vector3.dot(n, t))).normalize();\n            const handedness = Vector3.dot(Vector3.cross(n, t), tan2[i]) < 0.0 ? -1 : 1;\n\n            this.tangents[i] = new Vector4(tangent.x, tangent.y, tangent.z, handedness);\n        }\n    }\n}\n\nexport class SubMesh {\n    public vertexCount: number;\n    public firstVertex: number;\n    public indexCount: number;\n    public indexStart: number;\n    public bounds: Bounds;\n    public material: string;\n\n    public constructor() {\n        this.vertexCount = 0;\n        this.firstVertex = 0;\n        this.indexCount = 0;\n        this.indexStart = 0;\n        this.bounds = new Bounds();\n        this.material = \"\";\n    }\n}\n","import { Mesh } from \"./Mesh\";\nimport { OBJParser } from \"../Utils/ObjParser\";\nimport { Texture } from \"./Texture\";\n\nexport class Resources {\n    private static fileCache: Map<string, any> = new Map();\n    private static loadingPromises: Map<string, Promise<any>> = new Map();\n\n    /**\n     * 异步加载资源，模仿Unity的Resources.LoadAsync\n     * @param fileName 资源路径\n     * @returns 包含资源的Promise\n     */\n    public static async loadAsync<T>(fileName: string): Promise<T | null> {\n        // 检查缓存\n        if (Resources.fileCache.has(fileName)) {\n            return Promise.resolve(Resources.fileCache.get(fileName) as T);\n        }\n\n        // 检查是否正在加载，避免重复请求\n        if (Resources.loadingPromises.has(fileName)) {\n            return Resources.loadingPromises.get(fileName) as Promise<T>;\n        }\n\n        // 确定资源类型并加载\n        let promise: Promise<T | null>;\n\n        if (fileName.endsWith('.png') || fileName.endsWith('.jpg') || fileName.endsWith('.jpeg')) {\n            // 加载纹理\n            promise = Resources.loadTextureAsync(fileName) as Promise<T | null>;\n        } else if (fileName.endsWith('.obj')) {\n            // 加载模型\n            promise = Resources.loadModelAsync(fileName) as Promise<T | null>;\n        } else if (fileName.endsWith('.txt') || fileName.endsWith('.json') || fileName.endsWith('.xml')) {\n            // 加载文本\n            promise = Resources.loadTextAsync(fileName) as Promise<T | null>;\n        } else {\n            console.error(`不支持的资源类型: ${fileName}`);\n            return Promise.resolve(null);\n        }\n\n        // 存储加载中的Promise\n        Resources.loadingPromises.set(fileName, promise);\n\n        // 等待加载完成并更新缓存\n        const result = await promise;\n        if (result) {\n            Resources.fileCache.set(fileName, result);\n        }\n\n        // 移除加载中标记\n        Resources.loadingPromises.delete(fileName);\n\n        return result;\n    }\n\n    // /**\n    //  * 同步加载资源（仅支持已缓存的资源）\n    //  * @param fileName 资源路径\n    //  * @returns 资源实例或null\n    //  */\n    // public static load<T>(fileName: string): T | null {\n    //     if (Resources.fileCache.has(fileName)) {\n    //         return Resources.fileCache.get(fileName) as T;\n    //     }\n\n    //     console.warn(`资源 ${fileName} 未缓存，无法同步加载。请先使用loadAsync加载。`);\n    //     return null;\n    // }\n\n    /**\n     * 卸载未使用的资源，模仿Unity的UnloadUnusedAssets\n     */\n    public static unloadUnusedAssets(): void {\n        // 实际项目中应该有引用计数机制\n        // 这里简化处理，仅清除所有缓存\n        Resources.fileCache.clear();\n        console.log(\"已卸载所有未使用的资源\");\n    }\n\n    /**\n     * 卸载特定资源\n     * @param fileName 资源路径\n     */\n    public static unloadAsset(fileName: string): void {\n        if (Resources.fileCache.has(fileName)) {\n            Resources.fileCache.delete(fileName);\n            console.log(`已卸载资源: ${fileName}`);\n        }\n\n        if (Resources.loadingPromises.has(fileName)) {\n            Resources.loadingPromises.delete(fileName);\n        }\n    }\n\n    /**\n     * 加载纹理资源\n     */\n    private static async loadTextureAsync(fileName: string): Promise<Texture | null> {\n        try {\n            const img = await Resources.loadImageFile(fileName);\n\n            // 1. 获取图片原始尺寸\n            const imgWidth = img.width;\n            const imgHeight = img.height;\n\n            // 2. 创建【临时Canvas】（内存中，不显示到页面）\n            const tempCanvas = document.createElement('canvas');\n            const tempCtx = tempCanvas.getContext('2d');\n            if (!tempCtx) {\n                console.error('无法创建临时Canvas上下文');\n                return null;\n            }\n\n            // 3. 让临时Canvas尺寸与图片原始尺寸完全一致（关键：确保像素无失真）\n            tempCanvas.width = imgWidth;\n            tempCanvas.height = imgHeight;\n\n            // 4. 仅在临时Canvas上绘制图片，web的图必须先加载到canvas才能读取它的数据\n            tempCtx.drawImage(img, 0, 0, imgWidth, imgHeight); // 0,0是绘制起点，后两个参数是绘制尺寸（与图片一致）\n\n            // 5. 提取图片的ImageData（此时已获取完整像素数据，无需依赖业务Canvas）\n            const imageData = tempCtx.getImageData(0, 0, imgWidth, imgHeight);\n            const pixelData = imageData.data; // 核心：Uint8ClampedArray类型的像素数组，每个像素占4位（RGBA）\n\n            const texture = new Texture(imgWidth, imgHeight);\n            texture.LoadImage(pixelData);\n            return texture;\n        } catch (error) {\n            console.error(`加载纹理失败: ${fileName}`, error);\n            return null;\n        }\n    }\n\n    /**\n     * 加载图片文件（内部使用）\n     */\n    private static loadImageFile(fileName: string): Promise<HTMLImageElement> {\n        return new Promise<HTMLImageElement>((resolve, reject) => {\n            if (Resources.fileCache.has(fileName)) {\n                resolve(Resources.fileCache.get(fileName));\n                return;\n            }\n\n            const image = new Image();\n            if (!image) {\n                reject(new Error('无法创建图片对象'));\n                return;\n            }\n\n            image.onload = () => {\n                resolve(image);\n            };\n\n            image.onerror = () => {\n                reject(new Error(`无法加载图片: ${fileName}`));\n            };\n\n            // 跨域设置\n            image.crossOrigin = \"anonymous\";\n            image.src = fileName;\n        });\n    }\n\n    /**\n     * 加载文本文件\n     */\n    private static loadTextAsync(fileName: string): Promise<string | null> {\n        return new Promise<string | null>((resolve) => {\n            if (Resources.fileCache.has(fileName)) {\n                resolve(Resources.fileCache.get(fileName));\n                return;\n            }\n\n            const request = new XMLHttpRequest();\n\n            request.onreadystatechange = () => {\n                if (request.readyState === 4) {\n                    if (request.status === 200) {\n                        const text = request.responseText;\n                        resolve(text);\n                    } else {\n                        console.error(`加载文本失败: ${fileName}, 状态码: ${request.status}`);\n                        resolve(null);\n                    }\n                }\n            };\n\n            // 使用异步加载以避免阻塞\n            request.open(\"GET\", fileName, true);\n            request.send();\n        });\n    }\n\n    /**\n     * 加载模型文件\n     */\n    private static async loadModelAsync(modelPath: string, scale: number = 1): Promise<Mesh | null> {\n        try {\n            const objDoc = await Resources.loadTextAsync(modelPath);\n            if (!objDoc) {\n                return null;\n            }\n\n            const mesh = OBJParser.parse(objDoc, scale);\n            return mesh;\n        } catch (error) {\n            console.error(`加载模型失败: ${modelPath}`, error);\n            return null;\n        }\n    }\n}\n","import { UObject } from \"../Core/UObject\";\nimport { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\n\nexport enum FilterMode {\n    Point,\n    Bilinear,\n    Trilinear\n}\n\nexport enum TextureWrapMode {\n    Repeat,\n    Clamp\n}\n\nexport enum TextureFormat {\n    Alpha8 = 1,\n    ARGB4444 = 2,\n    RGB24 = 3,\n    RGBA32 = 4,\n    ARGB32 = 5,\n    RGB565 = 7,\n    DXT1 = 10,\n    DXT5 = 12,\n    RGBA4444 = 13,\n    PVRTC_RGB2 = 30,\n    PVRTC_RGBA2 = 31,\n    PVRTC_RGB4 = 32,\n    PVRTC_RGBA4 = 33,\n    ETC_RGB4 = 34,\n    ATC_RGB4 = 35,\n    ATC_RGBA8 = 36,\n    BGRA32 = 37,\n    ATF_RGB_DXT1 = 38,\n    ATF_RGBA_JPG = 39,\n    ATF_RGB_JPG = 40\n}\n\ninterface MipmapLevel {\n    width: number;\n    height: number;\n    data: Uint8ClampedArray;\n}\n\nexport class Texture extends UObject {\n    public width: number;\n    public height: number;\n    public mipMapBias: number = 0;\n    public mipmapCount: number = 0;\n    public data: Uint8ClampedArray;\n    public filterMode: FilterMode = FilterMode.Point;\n    public wrapMode: TextureWrapMode = TextureWrapMode.Repeat;\n    public format: TextureFormat = TextureFormat.RGBA32;\n    public alphaIsTransparency: boolean;\n    private mipmapLevels: MipmapLevel[];\n\n\n    constructor(width: number, height: number) {\n        super();\n        this.width = width;\n        this.height = height;\n    }\n\n    LoadImage(data: Uint8ClampedArray) {\n        this.data = data;\n        this.generateMipmaps();\n    }\n\n    SetPixel(x: number, y: number, color: number) {\n        const index = (y * this.width + x) * 4;\n        this.data[index] = color & 0xff;\n        this.data[index + 1] = (color >> 8) & 0xff;\n        this.data[index + 2] = (color >> 16) & 0xff;\n        this.data[index + 3] = (color >> 24) & 0xff;\n    }\n\n    // SetPixels(colors: Color[]){\n    //     for(let i = 0; i < colors.length; i++){\n    //         const color = colors[i];\n    //         const x = i % this.width;\n    //         const y = Math.floor(i / this.width);\n    //         this.SetPixel(x, y, color);\n    //     }\n    // }\n\n    // SetPixels2(x: number, y: number, blockWidth: number, blockHeight: number, colors: Color[]){\n    //     throw new Error('LoadImage not implemented');\n    // }\n\n    GetPixel(x: number, y: number): number {\n        const index = (y * this.width + x) * 4;\n        return this.data[index] | (this.data[index + 1] << 8) | (this.data[index + 2] << 16) | (this.data[index + 3] << 24);\n    }\n\n    // GetPixels(x: number, y: number, blockWidth: number, blockHeight: number): number[]{\n    //     const colors = new Array<number>(blockWidth * blockHeight);\n    //     for(let i = 0; i < blockWidth * blockHeight; i++){\n    //         const x0 = x + i % blockWidth;\n    //         const y0 = y + Math.floor(i / blockWidth);\n    //         colors[i] = this.GetPixel(x0, y0);\n    //     }\n    //     return colors;\n    // }\n\n    // GetPixelBilinear(u: number, v: number): Color{\n    //     const x = u * this.width;\n    //     const y = v * this.height;\n    //     const x0 = Math.floor(x);\n    //     const y0 = Math.floor(y);\n    //     const x1 = x0 + 1;\n    //     const y1 = y0 + 1;\n    //     const u0 = x - x0;\n    //     const v0 = y - y0;\n    //     const u1 = 1 - u0;\n    //     const v1 = 1 - v0;\n    //     const c00 = this.GetPixel(x0, y0);\n    //     const c01 = this.GetPixel(x0, y1);\n    //     const c10 = this.GetPixel(x1, y0);\n    //     const c11 = this.GetPixel(x1, y1);\n    //     return new Color(\n    //         c00.r * u1 * v1 + c01.r * u1 * v0 + c10.r * u0 * v1 + c11.r * u0 * v0,  \n    //         c00.g * u1 * v1 + c01.g * u1 * v0 + c10.g * u0 * v1 + c11.g * u0 * v0,  \n    //         c00.b * u1 * v1 + c01.b * u1 * v0 + c10.b * u0 * v1 + c11.b * u0 * v0,  \n    //         c00.a * u1 * v1 + c01.a * u1 * v0 + c10.a * u0 * v1 + c11.a * u0 * v0,  \n    //     );\n    // }\n\n    // Resize(width: number, height: number){\n    //     throw new Error('LoadImage not implemented');\n    // }\n\n    /**\n     * 通过UV坐标和纹理坐标导数获取像素颜色（考虑Mipmap）\n     * @param u 纹理U坐标（0-1）\n     * @param v 纹理V坐标（0-1）\n     * @param du_dx U坐标在屏幕空间X方向的导数\n     * @param dv_dx V坐标在屏幕空间X方向的导数\n     * @param du_dy U坐标在屏幕空间Y方向的导数\n     * @param dv_dy V坐标在屏幕空间Y方向的导数\n     * @returns 颜色值（ARGB格式的32位整数）\n     */\n    public SampleMip(u: number, v: number, du_dx: number = 0.001, dv_dx: number = 0.001, du_dy: number = 0.001, dv_dy: number = 0.001): Color {\n        /* \n        在 3D 渲染中，为了让 Mipmap 层级计算更准确（避免纹理在远处出现锯齿或近处过度模糊），需要传递纹理坐标在屏幕空间的导数。这些导数描述了 UV 坐标在屏幕上每移动 1 像素时的变化率，计算方式如下：\n        // 假设当前片段的UV坐标\n        const currentU = uv.u;\n        const currentV = uv.v;\n\n        // 右侧相邻像素的UV（x方向+1）\n        const rightU = neighborRight.attributes.uv.u;\n        const rightV = neighborRight.attributes.uv.v;\n\n        // 下方相邻像素的UV（y方向+1）\n        const bottomU = neighborBottom.attributes.uv.u;\n        const bottomV = neighborBottom.attributes.uv.v;\n\n        // 计算导数（UV在屏幕空间的变化率）\n        const du_dx = rightU - currentU; // U在X方向的导数\n        const dv_dx = rightV - currentV; // V在X方向的导数\n        const du_dy = bottomU - currentU; // U在Y方向的导数\n        const dv_dy = bottomV - currentV; // V在Y方向的导数\n         */\n\n        // 计算Mipmap层级\n        const mipLevel = this.calculateMipLevel(du_dx, dv_dx, du_dy, dv_dy);\n        return this.Sample(u, v, mipLevel);\n    }\n\n    /**\n     * 通过UV坐标获取像素颜色（根据纹理设置自动处理）\n     * @param u 纹理U坐标（0-1）\n     * @param v 纹理V坐标（0-1）\n     * @returns 颜色值（ARGB格式的32位整数）\n     */\n    public Sample(u: number, v: number, mipLevel: number = 0): Color {\n        // 根据环绕模式处理UV坐标\n        const [clampedU, clampedV] = this.handleWrapMode(u, v);\n\n        // 根据过滤模式采样像素\n        switch (this.filterMode) {\n            case FilterMode.Point:\n                return this.samplePoint(clampedU, clampedV, mipLevel);\n            case FilterMode.Bilinear:\n                return this.sampleBilinear(clampedU, clampedV, mipLevel);\n            case FilterMode.Trilinear:\n                return this.sampleTrilinear(clampedU, clampedV, mipLevel);\n            default:\n                return this.samplePoint(clampedU, clampedV, mipLevel);\n        }\n    }\n\n    /**\n     * 处理UV坐标的环绕模式\n     * @param u 原始U坐标\n     * @param v 原始V坐标\n     * @returns 处理后的UV坐标\n     */\n    private handleWrapMode(u: number, v: number): [number, number] {\n        let handledU = u;\n        let handledV = v;\n\n        switch (this.wrapMode) {\n            case TextureWrapMode.Repeat:\n                // 重复模式：取小数部分实现平铺\n                handledU = handledU - Math.floor(handledU);\n                handledV = handledV - Math.floor(handledV);\n                break;\n            case TextureWrapMode.Clamp:\n                // 拉伸模式：限制在0-1范围内\n                handledU = Math.max(0, Math.min(1, handledU));\n                handledV = Math.max(0, Math.min(1, handledV));\n                break;\n        }\n\n        return [handledU, handledV];\n    }\n\n    /**\n     * 点过滤采样（最近邻）\n     * @param u 处理后的U坐标（0-1）\n     * @param v 处理后的V坐标（0-1）\n     * @returns 颜色值\n     */\n    private samplePoint(u: number, v: number, mipLevel: number = 0): Color {\n        // 选择最接近的Mipmap层级\n        const level = Math.round(mipLevel);\n        const mip = this.getMipmapLevel(level);\n\n        // 将UV坐标转换为像素坐标\n        const x = Math.floor(u * mip.width);\n        const y = Math.floor(v * mip.height);\n\n        // 确保坐标在有效范围内\n        const clampedX = Math.max(0, Math.min(mip.width - 1, x));\n        const clampedY = Math.max(0, Math.min(mip.height - 1, y));\n\n        // 获取像素颜色\n        const index = (clampedY * mip.width + clampedX) * 4;\n        return new Color(\n            mip.data[index] / 255,\n            mip.data[index + 1] / 255,\n            mip.data[index + 2] / 255,\n            mip.data[index + 3] / 255\n        );\n    }\n\n    /**\n     * 双线性过滤采样\n     * @param u 处理后的U坐标（0-1）\n     * @param v 处理后的V坐标（0-1）\n     * @returns 插值后的颜色值\n     */\n    private sampleBilinear(u: number, v: number, mipLevel: number = 0): Color {\n        // 选择最接近的Mipmap层级\n        const level = Math.round(mipLevel);\n        const mip = this.getMipmapLevel(level);\n\n        // 转换为像素坐标（带小数部分）\n        const x = u * mip.width;\n        const y = v * mip.height;\n\n        // 计算周围四个像素的坐标\n        const x0 = Math.floor(x);\n        const y0 = Math.floor(y);\n        const x1 = x0 + 1;\n        const y1 = y0 + 1;\n\n        // 计算插值权重\n        const uWeight = x - x0;\n        const vWeight = y - y0;\n\n        // 获取四个角落的像素颜色\n        const c00 = this.getClampedPixelFromMip(mip, x0, y0);\n        const c01 = this.getClampedPixelFromMip(mip, x0, y1);\n        const c10 = this.getClampedPixelFromMip(mip, x1, y0);\n        const c11 = this.getClampedPixelFromMip(mip, x1, y1);\n\n        // 双线性插值计算\n        const color0 = this.lerpColor(c00, c10, uWeight);\n        const color1 = this.lerpColor(c01, c11, uWeight);\n        const finalColor = this.lerpColor(color0, color1, vWeight);\n\n        return finalColor;\n    }\n\n    /**\n     * 三线性过滤采样，在双线性过滤基础上，找到2个最近的Mipmap层级，根据距离插值\n     */\n    private sampleTrilinear(u: number, v: number, mipLevel: number = 0): Color {\n        // 如果Mipmap层级不足，退化为双线性过滤\n        if (this.mipmapCount < 2) {\n            return this.sampleBilinear(u, v, mipLevel);\n        }\n\n        // 计算上下两个Mipmap层级\n        const levelFloor = Math.floor(mipLevel);\n        const levelCeil = Math.min(levelFloor + 1, this.mipmapCount - 1);\n        const levelWeight = mipLevel - levelFloor;\n\n        // 在两个层级上分别进行双线性过滤\n        const colorFloor = this.sampleBilinear(u, v, levelFloor);\n        const colorCeil = this.sampleBilinear(u, v, levelCeil);\n\n        // 在两个层级结果之间进行线性插值\n        return this.lerpColor(colorFloor, colorCeil, levelWeight);\n    }\n\n    /**\n     * 颜色插值（线性插值）\n     * @param a 起始颜色\n     * @param b 目标颜色\n     * @param t 插值系数（0-1）\n     * @returns 插值后的颜色\n     */\n    private lerpColor(a: Color, b: Color, t: number): Color {\n        // 提取ARGB四个通道\n        const aA = a.a;\n        const aR = a.r;\n        const aG = a.g;\n        const aB = a.b;\n\n        const bA = b.a;\n        const bR = b.r;\n        const bG = b.g;\n        const bB = b.b;\n\n        // 每个通道单独插值\n        const lerpA = Math.round(aA + (bA - aA) * t);\n        const lerpR = Math.round(aR + (bR - aR) * t);\n        const lerpG = Math.round(aG + (bG - aG) * t);\n        const lerpB = Math.round(aB + (bB - aB) * t);\n\n        return new Color(lerpA, lerpR, lerpG, lerpB);\n    }\n\n    /**\n     * 生成Mipmap层级\n     * 从原始纹理开始，逐级缩小为1/2尺寸并进行模糊处理\n     */\n    private generateMipmaps() {\n        // 清空现有Mipmap层级\n        this.mipmapLevels = [];\n\n        // 添加原始纹理作为第0级Mipmap\n        this.mipmapLevels.push({\n            width: this.width,\n            height: this.height,\n            data: new Uint8ClampedArray(this.data)\n        });\n\n        let currentWidth = this.width;\n        let currentHeight = this.height;\n        let currentLevel = 0;\n\n        // 生成后续Mipmap层级，直到1x1像素\n        while (currentWidth > 1 || currentHeight > 1) {\n            currentLevel++;\n            const newWidth = Math.max(1, Math.floor(currentWidth / 2));\n            const newHeight = Math.max(1, Math.floor(currentHeight / 2));\n\n            // 创建新层级数据\n            const newData = new Uint8ClampedArray(newWidth * newHeight * 4);\n            const sourceLevel = this.mipmapLevels[currentLevel - 1];\n\n            // 缩小并模糊处理（简单的2x2区域平均）\n            for (let y = 0; y < newHeight; y++) {\n                for (let x = 0; x < newWidth; x++) {\n                    // 计算源纹理中的对应区域\n                    const srcX = Math.min(x * 2, sourceLevel.width - 1);\n                    const srcY = Math.min(y * 2, sourceLevel.height - 1);\n\n                    // 取2x2区域的四个像素\n                    const pixels = [\n                        this.getPixelFromLevel(sourceLevel, srcX, srcY),\n                        this.getPixelFromLevel(sourceLevel, Math.min(srcX + 1, sourceLevel.width - 1), srcY),\n                        this.getPixelFromLevel(sourceLevel, srcX, Math.min(srcY + 1, sourceLevel.height - 1)),\n                        this.getPixelFromLevel(sourceLevel, Math.min(srcX + 1, sourceLevel.width - 1), Math.min(srcY + 1, sourceLevel.height - 1))\n                    ];\n\n                    // 计算四个像素的平均值\n                    let r = 0, g = 0, b = 0, a = 0;\n                    for (const p of pixels) {\n                        r += p.r;\n                        g += p.g;\n                        b += p.b;\n                        a += p.a;\n                    }\n\n                    r = Math.round(r / 4);\n                    g = Math.round(g / 4);\n                    b = Math.round(b / 4);\n                    a = Math.round(a / 4);\n\n                    // 写入新Mipmap层级\n                    const index = (y * newWidth + x) * 4;\n                    newData[index] = r;\n                    newData[index + 1] = g;\n                    newData[index + 2] = b;\n                    newData[index + 3] = a;\n                }\n            }\n\n            // 添加新层级\n            this.mipmapLevels.push({\n                width: newWidth,\n                height: newHeight,\n                data: newData\n            });\n\n            currentWidth = newWidth;\n            currentHeight = newHeight;\n        }\n\n        this.mipmapCount = this.mipmapLevels.length;\n    }\n\n    /**\n     * 从指定Mipmap层级获取像素颜色（RGBA分量）\n     */\n    private getPixelFromLevel(level: MipmapLevel, x: number, y: number): { r: number, g: number, b: number, a: number } {\n        const index = (y * level.width + x) * 4;\n        return {\n            r: level.data[index],\n            g: level.data[index + 1],\n            b: level.data[index + 2],\n            a: level.data[index + 3]\n        };\n    }\n\n    /**\n     * 计算所需的Mipmap层级\n     * 基于纹理坐标在屏幕空间的变化率（导数）\n     */\n    private calculateMipLevel(du_dx: number, dv_dx: number, du_dy: number, dv_dy: number): number {\n        // 如果没有Mipmap，直接返回0级\n        if (this.mipmapCount <= 1) return 0;\n\n        // 计算纹理空间的偏导数\n        const dx = du_dx * this.width;\n        const dy = dv_dx * this.height;\n        const dz = du_dy * this.width;\n        const dw = dv_dy * this.height;\n\n        // 计算纹理坐标变化的幅度\n        const lenSq = dx * dx + dy * dy + dz * dz + dw * dw;\n        let level = 0.5 * Math.log2(lenSq);\n\n        // 应用Mipmap偏差\n        level += this.mipMapBias;\n\n        // 限制在有效层级范围内\n        return Math.max(0, Math.min(this.mipmapCount - 1, level));\n    }\n\n    /**\n     * 获取指定Mipmap层级（确保有效）\n     */\n    private getMipmapLevel(level: number): MipmapLevel {\n        const clampedLevel = Math.max(0, Math.min(this.mipmapCount - 1, level));\n        return this.mipmapLevels[clampedLevel] || this.mipmapLevels[0];\n    }\n\n    /**\n     * 从Mipmap层级获取范围内的像素（防止越界）\n     */\n    private getClampedPixelFromMip(mip: MipmapLevel, x: number, y: number): Color {\n        const clampedX = Math.max(0, Math.min(mip.width - 1, x));\n        const clampedY = Math.max(0, Math.min(mip.height - 1, y));\n        const index = (clampedY * mip.width + clampedX) * 4;\n\n        return new Color(\n            mip.data[index] / 255,\n            mip.data[index + 1] / 255,\n            mip.data[index + 2] / 255,\n            mip.data[index + 3] / 255\n        );\n    }\n\n    /**\n     * 将RGBA分量打包为32位整数\n     */\n    private packColor(r: number, g: number, b: number, a: number): number {\n        return r | (g << 8) | (b << 16) | (a << 24);\n    }\n\n    public onDestroy(): void {\n        // 清理Mipmap数据\n        this.mipmapLevels = [];\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Texture } from \"./Texture\";\n\nexport class TextureCreator {\n\n    /**\n     * 生成棋盘纹理\n     * @param tileSize 每个棋盘格的大小（像素）\n     * @param color1 第一种颜色（默认白色）\n     * @param color2 第二种颜色（默认黑色）\n     */\n    public static CheckerboardTexture(\n        width: number = 64,\n        height: number = 64,\n        tileSize: number = 8,\n        color1: Color = Color.WHITE,\n        color2: Color = Color.GRAY\n    ): Texture {\n        const texture = new Texture(width, height);\n        const data = new Uint8ClampedArray(width * height * 4);\n\n        // 填充棋盘格\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                // 计算当前位置属于哪个棋盘格\n                const tileX = Math.floor(x / tileSize);\n                const tileY = Math.floor(y / tileSize);\n\n                // 交替选择颜色\n                const color = (tileX + tileY) % 2 === 0 ? color1 : color2;\n\n                // 设置像素颜色\n                const index = (y * width + x) * 4;\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                data[index + 3] = color.a * 255;\n            }\n        }\n\n        texture.LoadImage(data);\n        return texture;\n    }\n\n    /**\n     * 生成噪声纹理\n     * @param width 纹理宽度\n     * @param height 纹理高度\n     * @param type 噪声类型：'random'（随机噪声）、'perlin'（柏林噪声）、'fibrous'（纤维噪声）\n     * @param scale 噪声缩放比例（值越小噪声越密集）\n     * @param monochrome 是否生成单色噪声（否则为彩色）\n     * @returns 生成的噪声纹理\n     */\n    public static NoiseTexture(\n        width: number = 64,\n        height: number = 64,\n        type: 'random' | 'perlin' | 'fibrous' = 'perlin',\n        scale: number = 4,\n        monochrome: boolean = true\n    ): Texture {\n        // 参数验证和边界检查\n        width = Math.max(1, Math.min(2048, width));\n        height = Math.max(1, Math.min(2048, height));\n        scale = Math.max(0.1, scale);\n\n        const texture = new Texture(width, height);\n        const data = new Uint8ClampedArray(width * height * 4);\n\n        // 更高效的随机噪声生成函数（使用位运算优化）\n        const generateRandomNoise = (x: number, y: number): number => {\n            let hash = x << 12 ^ y;\n            hash = (hash ^ (hash >> 16)) * 0x45d9f3b;\n            hash = (hash ^ (hash >> 13)) * 0x45d9f3b;\n            return (hash & 0x7fffffff) / 0x7fffffff; // 直接使用位运算代替Math.abs\n        };\n\n        // 优化的插值函数（使用缓动函数提高视觉质量）\n        const fade = (t: number): number => {\n            return t * t * t * (t * (t * 6 - 15) + 10); // 平滑的缓动函数\n        };\n\n        const interpolate = (a: number, b: number, t: number): number => {\n            return a + fade(t) * (b - a);\n        };\n\n        // 预先计算随机偏移（避免每次生成噪声都创建新变量）\n        const randomOffsetX = Math.random() * 10000;\n        const randomOffsetY = Math.random() * 10000;\n\n        // 缓存1/scale值，避免重复除法运算\n        const invScale = 1 / scale;\n\n        // 优化的柏林噪声生成（减少重复计算）\n        const generatePerlinNoise = (x: number, y: number): number => {\n            // 添加随机偏移，使每次生成的噪声不同\n            x += randomOffsetX;\n            y += randomOffsetY;\n\n            // 使用缓存的invScale进行计算\n            const xGrid = Math.floor(x * invScale);\n            const yGrid = Math.floor(y * invScale);\n            const xFrac = (x * invScale) - xGrid;\n            const yFrac = (y * invScale) - yGrid;\n\n            // 四个角的随机值\n            const c00 = generateRandomNoise(xGrid, yGrid);\n            const c10 = generateRandomNoise(xGrid + 1, yGrid);\n            const c01 = generateRandomNoise(xGrid, yGrid + 1);\n            const c11 = generateRandomNoise(xGrid + 1, yGrid + 1);\n\n            // 双线性插值\n            const x1 = interpolate(c00, c10, xFrac);\n            const x2 = interpolate(c01, c11, xFrac);\n            return interpolate(x1, x2, yFrac);\n        };\n\n        // 纤维噪声生成（使用一次柏林噪声计算结果）\n        const generateFibrousNoise = (x: number, y: number): number => {\n            // 减少三角函数计算，使用更简单的角度计算\n            const angle = (Math.sin(x * invScale) * Math.cos(y * invScale)) * Math.PI;\n            const dx = Math.cos(angle) * scale;\n            const dy = Math.sin(angle) * scale;\n\n            // 计算一次基础噪声值，避免重复调用\n            const baseNoise = generatePerlinNoise(x, y);\n            // 使用基础噪声值与偏移后的噪声值混合\n            return generatePerlinNoise(x + dx, y + dy) * 0.7 + baseNoise * 0.3;\n        };\n\n        // 填充纹理数据的主要逻辑（优化内存访问模式）\n        const generateNoiseForPixel = (x: number, y: number): number => {\n            switch (type) {\n                case 'random':\n                    return generateRandomNoise(x, y);\n                case 'fibrous':\n                    return generateFibrousNoise(x, y);\n                default: // perlin\n                    return generatePerlinNoise(x, y);\n            }\n        };\n\n        // 优化的彩色噪声生成函数（减少重复计算）\n        const getRGBFromNoise = (value: number): [number, number, number] => {\n            // HSV转RGB的高效实现\n            const hue = (value * 360) % 360;\n            const sat = 0.5 + value * 0.5;\n            const val = 0.3 + value * 0.7;\n\n            const c = val * sat;\n            const x = c * (1 - Math.abs((hue / 60) % 2 - 1));\n            const m = val - c;\n\n            let r = 0, g = 0, b = 0;\n\n            if (hue < 60) {\n                [r, g, b] = [c, x, 0];\n            } else if (hue < 120) {\n                [r, g, b] = [x, c, 0];\n            } else if (hue < 180) {\n                [r, g, b] = [0, c, x];\n            } else if (hue < 240) {\n                [r, g, b] = [0, x, c];\n            } else if (hue < 300) {\n                [r, g, b] = [x, 0, c];\n            } else {\n                [r, g, b] = [c, 0, x];\n            }\n\n            return [r + m, g + m, b + m];\n        };\n\n        // 主要循环：按行主序填充纹理数据，提高缓存命中率\n        for (let y = 0; y < height; y++) {\n            const rowOffset = y * width * 4; // 预计算行偏移量\n            for (let x = 0; x < width; x++) {\n                // 根据噪声类型生成值（0-1范围）\n                let value = generateNoiseForPixel(x, y);\n\n                // 确保值在0-1范围内（使用一次clamp操作）\n                value = Math.max(0, Math.min(1, value));\n\n                let r: number, g: number, b: number;\n\n                if (monochrome) {\n                    // 单色噪声（灰度）\n                    r = g = b = value;\n                } else {\n                    // 彩色噪声（使用优化的HSV转RGB函数）\n                    [r, g, b] = getRGBFromNoise(value);\n                }\n\n                // 写入纹理数据（RGBA）\n                const index = rowOffset + x * 4;\n                data[index] = r * 255;       // 红色通道\n                data[index + 1] = g * 255;   // 绿色通道\n                data[index + 2] = b * 255;   // 蓝色通道\n                data[index + 3] = 255;       // alpha通道（完全不透明）\n            }\n        }\n\n        texture.LoadImage(data);\n        return texture;\n    }\n\n    /**\n     * 生成渐变纹理\n     * @param width 纹理宽度\n     * @param height 纹理高度\n     * @param type 渐变类型：'linear'（线性）、'radial'（径向）、'angular'（角度）\n     * @param colorStops 颜色断点数组，格式如[{offset: 0, color: 0xffffff}, {offset: 1, color: 0x000000}]\n     * @param start 渐变起点（线性渐变有效，相对坐标[0,1]）\n     * @param end 渐变终点（线性渐变有效，相对坐标[0,1]）\n     * @param center 渐变中心（径向/角度渐变有效，相对坐标[0,1]）\n     * @param radius 渐变半径（径向渐变有效，相对值）\n     * @returns 生成的渐变纹理\n     */\n    public static GradientTexture(\n        width: number = 64,\n        height: number = 64,\n        type: 'linear' | 'radial' | 'angular' = 'linear',\n        colorStops: Array<{ offset: number, color: Color }> = [\n            { offset: 0, color: Color.WHITE },\n            { offset: 1, color: Color.BLACK }\n        ],\n        start: Vector2 = new Vector2(0, 0.5),\n        end: Vector2 = new Vector2(1, 0.5),\n        center: Vector2 = new Vector2(0.5, 0.5),\n        radius: number = 0.5\n    ): Texture {\n        const texture = new Texture(width, height);\n        const data = new Uint8ClampedArray(width * height * 4);\n\n        // 确保颜色断点按offset排序\n        colorStops.sort((a, b) => a.offset - b.offset);\n\n        // 提取颜色通道值\n        const getColorChannels = (color: Color) => ({\n            r: color.r,\n            g: color.g,\n            b: color.b,\n            a: color.a || 1 // 默认为不透明\n        });\n\n        // 颜色插值函数\n        const interpolateColor = (t: number) => {\n            // 处理边界情况\n            if (t <= colorStops[0].offset) {\n                return getColorChannels(colorStops[0].color);\n            }\n            if (t >= colorStops[colorStops.length - 1].offset) {\n                return getColorChannels(colorStops[colorStops.length - 1].color);\n            }\n\n            // 找到当前t所在的颜色区间\n            let i = 0;\n            while (colorStops[i + 1].offset < t) {\n                i++;\n            }\n\n            const start = colorStops[i];\n            const end = colorStops[i + 1];\n            const range = end.offset - start.offset;\n            const ratio = (t - start.offset) / range;\n\n            const startColor = getColorChannels(start.color);\n            const endColor = getColorChannels(end.color);\n\n            // 线性插值每个颜色通道\n            return {\n                r: startColor.r + (endColor.r - startColor.r) * ratio,\n                g: startColor.g + (endColor.g - startColor.g) * ratio,\n                b: startColor.b + (endColor.b - startColor.b) * ratio,\n                a: startColor.a + (endColor.a - startColor.a) * ratio\n            };\n        };\n\n        // 填充纹理数据\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                // 计算相对坐标[0,1]\n                const u = x / (width - 1);\n                const v = y / (height - 1);\n                let t = 0;\n\n                switch (type) {\n                    case 'linear':\n                        // 线性渐变：计算点到起点的投影长度与总长度的比例\n                        const startToEnd = new Vector2(end.x - start.x, end.y - start.y);\n                        const startToPoint = new Vector2(u - start.x, v - start.y);\n                        const lengthSq = startToEnd.x * startToEnd.x + startToEnd.y * startToEnd.y;\n\n                        if (lengthSq > 0) {\n                            const dot = startToPoint.x * startToEnd.x + startToPoint.y * startToEnd.y;\n                            t = Math.max(0, Math.min(1, dot / lengthSq));\n                        }\n                        break;\n\n                    case 'radial':\n                        // 径向渐变：计算点到中心的距离与半径的比例\n                        const dx = u - center.x;\n                        const dy = v - center.y;\n                        const distance = Math.sqrt(dx * dx + dy * dy);\n                        t = Math.max(0, Math.min(1, distance / radius));\n                        break;\n\n                    case 'angular':\n                        // 角度渐变：计算点相对于中心的角度\n                        let angle = Math.atan2(v - center.y, u - center.x) + Math.PI;\n                        t = (angle / (Math.PI * 2)) % 1;\n                        break;\n                }\n\n                // 获取插值颜色并写入数据\n                const color = interpolateColor(t);\n                const index = (y * width + x) * 4;\n                data[index] = color.r * 255;\n                data[index + 1] = color.g * 255;\n                data[index + 2] = color.b * 255;\n                data[index + 3] = color.a * 255;\n            }\n        }\n\n        texture.LoadImage(data);\n        return texture;\n    }\n}","import { BoxCollider } from \"../Component/BoxCollider\";\nimport { Camera, CameraClearFlags } from \"../Component/Camera\";\nimport { CameraController } from \"../Component/TestComp/CameraController\";\nimport { Component } from \"../Component/Component\";\nimport { Light } from \"../Component/Light\";\nimport { MeshRenderer } from \"../Component/MeshRenderer\";\nimport { RayTest } from \"../Component/TestComp/RayTest\";\nimport { Rigidbody } from \"../Component/RigidBody\";\nimport { SphereCollider } from \"../Component/SphereCollider\";\nimport { Engine } from \"../Core/Engine\";\nimport { GameObject } from \"../Core/GameObject\";\nimport { Color } from \"../Math/Color\";\nimport { Quaternion } from \"../Math/Quaternion\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Material } from \"../Resources/Material\";\nimport { Mesh } from \"../Resources/Mesh\";\nimport { Resources } from \"../Resources/Resources\";\nimport { Texture } from \"../Resources/Texture\";\nimport { LitShader } from \"../Shader/LitShader\";\nimport { Scene } from \"./Scene\";\nimport { ObjRotate } from \"../Component/TestComp/ObjRotate\";\nimport { ObjAutoRotate } from \"../Component/TestComp/ObjAutoRotate\";\nimport { Shader } from \"../Shader/Shader\";\nimport { ToonShader } from \"../Shader/ToonShader\";\nimport { CubeMap } from \"../Resources/CubeMap\";\nimport { RenderSettings } from \"../Core/Setting\";\nimport { ScrollTexture } from \"../Component/TestComp/ScrollTexture\";\nimport { TextureCreator } from \"../Resources/TextureCreator\";\nimport { MeshCreator } from \"../Resources/MeshCreator\";\nimport { PBRShader } from \"../Shader/PBRShader\";\nimport { AlphaCutOffShader } from \"../Shader/AlphaCutOffShader\";\nimport { BillBoard } from \"../Component/TestComp/BillBoard\";\nimport { VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { StencilOutlineShader } from \"../Shader/StencilOutlineShader\";\nimport { TransparentShader } from \"../Shader/TransparentShader\";\nimport { ScreenDoorShader } from \"../Shader/ScreenDoorShader\";\n\nexport const MainScene = {\n    name: \"MainScene\",\n    initfun: async (scene: Scene) => {\n        // 相机\n        const cameraObj = await createObj({\n            name: \"camera\",\n            position: new Vector3(0, 0, -5),\n            rotation: new Quaternion(new Vector3(0, 0, 0)),\n            components: [Camera, CameraController]\n        });\n        // const camera = cameraObj.getComponent(Camera);\n        // if (camera) {\n        //     camera.viewPort = new Vector4(0, 0, 0.5, 1);\n        // }\n\n        // // 相机2\n        // const camera2Obj = await createObj({\n        //     name: \"camera\",\n        //     position: new Vector3(0, 0, 5),\n        //     rotation: new Quaternion(new Vector3(0, 180, 0)),\n        //     components: [Camera]\n        // });\n        // const camera2 = camera2Obj.getComponent(Camera);\n        // if (camera2) {\n        //     camera2.viewPort = new Vector4(0.5, 0, 0.5, 0.5);\n        // }\n\n        // 灯\n        const lightObj = await createObj({\n            name: \"light\",\n            position: new Vector3(0, 3, 0),\n            rotation: new Quaternion(new Vector3(0, 0, 0)),\n            components: [Light, ObjRotate]\n        });\n        const light = lightObj.getComponent(Light);\n        if (light) {\n            Light.sunLight = light;\n        }\n\n        // 天空盒\n        const POSITIVE_X = await Resources.loadAsync<Texture>(\"resources/skybox/POSITIVE_X.jpg\");\n        const NEGATIVE_X = await Resources.loadAsync<Texture>(\"resources/skybox/NEGATIVE_X.jpg\");\n        const POSITIVE_Y = await Resources.loadAsync<Texture>(\"resources/skybox/POSITIVE_Y.jpg\");\n        const NEGATIVE_Y = await Resources.loadAsync<Texture>(\"resources/skybox/NEGATIVE_Y.jpg\");\n        const POSITIVE_Z = await Resources.loadAsync<Texture>(\"resources/skybox/POSITIVE_Z.jpg\");\n        const NEGATIVE_Z = await Resources.loadAsync<Texture>(\"resources/skybox/NEGATIVE_Z.jpg\");\n        if (POSITIVE_X && NEGATIVE_X && POSITIVE_Y && NEGATIVE_Y && POSITIVE_Z && NEGATIVE_Z) {\n            RenderSettings.skybox = new CubeMap(\n                POSITIVE_X,\n                NEGATIVE_X,\n                POSITIVE_Y,\n                NEGATIVE_Y,\n                POSITIVE_Z,\n                NEGATIVE_Z,\n            );\n        }\n\n        // const testObj = await createObj({\n        //     name: \"obj\",\n        //     modelPath: 'resources/assets/meshes/suzanne_low.obj',\n        //     components: [ObjRotate, ScrollTexture],\n        // });\n\n        // const leeObj = await createObj({\n        //     name: \"lee\",\n        //     model: 'resources/assets/meshes/lee.obj',\n        //     // shader: PBRShader,\n        //     shaderProp: {\n        //         mainTexture: \"resources/assets/textures/texture/lee.jpg\",\n        //         // normalTexture: \"resources/assets/textures/texture/lee_normal.jpg\",\n        //         // gloss: 1000\n        //     }\n        // });\n\n        // const female02Obj = await createObj({\n        //     name: \"female02\",\n        //     modelPath: 'resources/female02/female02.obj',\n        //     modelScale: 0.01,\n        //     texture: Texture.CheckerboardTexture(),\n        //     components: [ObjRotate],\n        // });\n\n        // const groundObj = await createObj({\n        //     name: \"ground\",\n        //     scale: Vector3.ONE.multiplyScalar(1.5),\n        //     rotation: Quaternion.angleAxis(-90, Vector3.RIGHT),\n        //     model: \"resources/panel.obj\",\n        //     // model: MeshCreator.createPanel(),\n        //     shader: AlphaCutOffShader,\n        //     shaderProp: {\n        //         // mainTexture: \"resources/assets/textures/texture/ancientbrick_albedo.jpg\",\n        //         mainTexture: \"resources/texture/transparent_texture.png\",\n        //     }\n        // });\n        // const groundObj = panelObj.getComponent(Rigidbody);\n        // if (groundObj) groundObj.isKinematic = true;\n\n        // 随机生成20颗树，它们的位置在[-5, 5]的水平范围内随机分布\n        // for (let i = 0; i < 30; i++) {\n        //     const randomX = (Math.random() * 5) - 2.5;\n        //     const randomZ = (Math.random() * 5) - 2.5;\n        //     const randomH = 1 + (Math.random() * 0.4) - 0.2;\n        //     const panelObj = await createObj({\n        //         name: `tree_${i}`,\n        //         position: new Vector3(randomX, 0.5 * randomH, randomZ),\n        //         scale: Vector3.ONE.multiplyScalar(randomH),\n        //         model: MeshCreator.createQuad(),\n        //         components: [BillBoard],\n        //         shader: AlphaCutOffShader,\n        //         shaderProp: {\n        //             mainTexture: \"resources/texture/tree.png\",\n        //         }\n        //     });\n        // }\n\n        // // 左\n        // await createObj({\n        //     name: \"cube\",\n        //     position: new Vector3(-2, 0, 0),\n        //     model: \"resources/cube.obj\",\n        //     shaderProp: {\n        //         baseColor: Color.YELLOW,\n        //     }\n        // });\n        // // 右\n        // await createObj({\n        //     name: \"cube\",\n        //     position: new Vector3(2, 0, 0),\n        //     model: \"resources/cube.obj\",\n        //     shaderProp: {\n        //         baseColor: Color.RED,\n        //     }\n        // });\n        // // 前\n        // await createObj({\n        //     name: \"cube\",\n        //     position: new Vector3(0, 0, 2),\n        //     model: \"resources/cube.obj\",\n        //     shaderProp: {\n        //         baseColor: Color.GREEN,\n        //     }\n        // });\n        // // 后\n        // await createObj({\n        //     name: \"cube\",\n        //     position: new Vector3(0, 0, -2),\n        //     model: \"resources/cube.obj\",\n        //     shaderProp: {\n        //         baseColor: Color.BLUE,\n        //     }\n        // });\n\n        const spheresObj = await createObj({\n            name: \"spheres\",\n            position: new Vector3(0, 1.5, 1.5),\n            model: \"resources/sphere.obj\",\n            // components: [Rigidbody, SphereCollider]\n            components: [ObjAutoRotate],\n            // shader: ScreenDoorShader,\n            shaderProp: {\n                mainTexture: TextureCreator.CheckerboardTexture(),\n                // mainTexture: \"resources/texture/Brick_Diffuse.jpg\",\n                // normalTexture: \"resources/texture/Brick_Normal.jpg\",\n                // mainTexture: \"resources/texture/Road_Diffuse.jpg\",\n                // normalTexture: \"resources/texture/Road_Normal.jpg\",\n            }\n        });\n\n        await createObj({\n            name: \"cube\",\n            position: new Vector3(-2, 0, 0),\n            model: \"resources/cube.obj\",\n            shader: TransparentShader,\n            shaderProp: {\n                mainTexture: \"resources/texture/transparent_texture.png\",\n            }\n        });\n\n        // const bunnyObj = await createObj({\n        //     name: \"bunny\",\n        //     model: 'resources/models/bunny2.obj',\n        //     modelScale: 10,\n        //     shaderProp: {\n        //         mainTexture: TextureCreator.CheckerboardTexture(),\n        //     }\n        // });\n\n        const toukuiObj = await createObj({\n            name: \"toukui\",\n            model: 'resources/toukui/Construction_Helmet.obj',\n            modelScale: 0.1,\n            components: [ObjRotate],\n            shader: StencilOutlineShader,\n            shaderProp: {\n                mainTexture: \"resources/toukui/Construction_Helmet_M_Helmet_BaseColor.png\",\n                // normalTexture: \"resources/toukui/Construction_Helmet_M_Helmet_Normal.png\",\n            }\n        });\n        // spheresObj.transform.setParent(toukuiObj.transform);\n    }\n}\n\ninterface CreateObjConfig {\n    name: string;\n    position?: Vector3;\n    rotation?: Quaternion;\n    scale?: Vector3;\n    model?: string | Mesh;\n    modelScale?: number;\n    shader?: new (...args: any[]) => Shader;\n    shaderProp?: VertexAttributes;\n    components?: (new (gameObject: GameObject) => Component)[];\n}\n\nasync function createObj(config: CreateObjConfig): Promise<GameObject> {\n    const obj = new GameObject(config.name);\n    obj.transform.position = config.position || Vector3.ZERO;\n    obj.transform.rotation = config.rotation || Quaternion.identity;\n    obj.transform.scale = config.scale || Vector3.ONE;\n\n    if (config.model) {\n        const model = typeof config.model === 'string' ? await Resources.loadAsync<Mesh>(config.model) : config.model;\n        if (config.modelScale) model?.scale(config.modelScale);\n\n        const renderer = obj.addComponent(MeshRenderer);\n        if (renderer) {\n            renderer.mesh = model;\n            const mat = renderer.material;\n            mat.shader = config.shader ? new config.shader() : new LitShader();\n            // 设置纹理\n            if (config.shaderProp) {\n                for (const prop of Object.entries(config.shaderProp)) {\n                    if (typeof prop[1] === 'string') {\n                        const t = await Resources.loadAsync<Texture>(prop[1]);\n                        if (t) mat.setTexture(prop[0], t);\n                        delete config.shaderProp[prop[0]];\n                    }\n                }\n                // 设置其他属性\n                mat.setProperties(config.shaderProp);\n            }\n        }\n    }\n\n    if (config.components && config.components.length > 0) {\n        for (const ComponentClass of config.components) {\n            try {\n                obj.addComponent(ComponentClass);\n            } catch (error) {\n                console.error(`Failed to add component ${ComponentClass.name}:`, error);\n            }\n        }\n    }\n\n    return obj;\n}","import { Camera } from \"../Component/Camera\";\nimport { Renderer } from \"../Component/Renderer\";\nimport { GameObject } from \"../Core/GameObject\";\nimport { BVHTree } from \"../Math/BVHTree\";\nimport { TransformTools } from \"../Math/TransformTools\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\n\nexport class Scene {\n    public name: string;\n    private rootGameObject: GameObject;\n    private bvhTree: BVHTree;\n    private needsRebuild: boolean = true;\n\n    constructor(name: string) {\n        this.name = name;\n        this.rootGameObject = new GameObject(\"root\");\n        this.bvhTree = new BVHTree();\n    }\n\n    public getRootGameObject(): GameObject {\n        return this.rootGameObject;\n    }\n\n    public update(): void {\n        if (this.rootGameObject) {\n            this.rootGameObject.startComponents();\n            this.rootGameObject.updateComponents();\n        }\n\n        // 需要时重建BVH\n        if (this.needsRebuild) {\n            this.rebuildBVH();\n            this.needsRebuild = false;\n        }\n    }\n\n    /**\n     * 标记需要重建BVH\n     */\n    public markDirty(): void {\n        this.needsRebuild = true;\n    }\n\n    /**\n     * 重建BVH树\n     */\n    private rebuildBVH(): void {\n        const allObjects = this.collectAllObjects(this.rootGameObject);\n        this.bvhTree.build(allObjects);\n    }\n\n    /**\n     * 收集场景中所有对象\n     */\n    private collectAllObjects(root: GameObject): GameObject[] {\n        const objects: GameObject[] = [];\n        this.traverseGameObjects(root, objects);\n        return objects;\n    }\n\n    /**\n     * 遍历游戏对象树\n     */\n    private traverseGameObjects(node: GameObject, collection: GameObject[]): void {\n        if (node.getComponent(Renderer)) {\n            collection.push(node);\n        }\n\n        const children = node.transform.children;\n        for (const child of children) {\n            this.traverseGameObjects(child.gameObject, collection);\n        }\n    }\n\n    /**\n     * 射线检测接口\n     */\n    public raycast(rayOrigin: Vector3, rayDirection: Vector3, maxDistance: number = Infinity): GameObject[] {\n        return this.bvhTree.raycast(rayOrigin, rayDirection, maxDistance);\n    }\n\n    /**\n     * 点击屏幕选取最前面对象\n     */\n    public pickObject(screenX: number, screenY: number, camera: Camera): GameObject | null {\n        // 将屏幕坐标转换为世界空间射线\n        const ray = TransformTools.ScreenToWorldPosRaycast(new Vector2(screenX, screenY), camera);\n\n        // 进行射线检测\n        const hitObjects = this.raycast(ray.origin, ray.direction);\n\n        if (hitObjects.length === 0) {\n            return null;\n        }\n\n        // 找到距离最近的对象\n        let closestObject: GameObject | null = null;\n        let closestDistance = Infinity;\n\n        for (const obj of hitObjects) {\n            const distance = this.calculateHitDistance(obj, ray.origin, ray.direction);\n            if (distance < closestDistance) {\n                closestDistance = distance;\n                closestObject = obj;\n            }\n        }\n\n        return closestObject;\n    }\n\n    /**\n     * 计算命中距离（需要根据具体对象形状实现）\n     */\n    private calculateHitDistance(obj: GameObject, rayOrigin: Vector3, rayDirection: Vector3): number {\n        // 这里需要实现具体的射线与对象相交检测\n        // 可以使用对象的包围盒或更精确的网格相交检测\n        const bounds = this.bvhTree.calculateObjectBounds(obj);\n        if (bounds) {\n            return bounds.rayIntersectDistance(rayOrigin, rayDirection);\n        }\n        return Infinity;\n    }\n}","import { Scene } from \"./Scene\";\n\nexport class SceneManager {\n    private scenes: Map<string, Scene> = new Map<string, Scene>();\n    private activeScene: Scene | null = null;\n\n    public createScene(name: string): Scene {\n        const scene = new Scene(name);\n        this.scenes.set(name, scene);\n        return scene;\n    }\n\n    public getScene(name: string): Scene | undefined {\n        return this.scenes.get(name);\n    }\n\n    public setActiveScene(scene: Scene | string): void {\n        if (typeof scene === 'string') {\n            const foundScene = this.scenes.get(scene);\n            if (foundScene) {\n                this.activeScene = foundScene;\n            }\n        } else {\n            this.activeScene = scene;\n        }\n    }\n\n    public getActiveScene(): Scene | null {\n        return this.activeScene;\n    }\n\n    public updateActiveScene(): void {\n        if (this.activeScene) {\n            this.activeScene.update();\n        }\n    }\n\n    public async loadScene(data: any) {\n        if (!data.name || !data.initfun) {\n            return;\n        }\n        // 初始化场景\n        const mainScene = this.createScene(data.name);\n        this.setActiveScene(mainScene);\n        await data.initfun(mainScene);\n    }\n}","import { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { ShaderPass, VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"./Shader\";\n\nexport class LitShader extends Shader {\n\n    public passes: ShaderPass[] = [\n        {\n            name: \"Forward\",\n            vert: this.vertexShader.bind(this),\n            frag: this.fragmentShader.bind(this),\n        }\n    ];\n\n    public fragmentShader(v2fAttr: VertexAttributes): Color | null {\n        const uv = v2fAttr.uv as Vector2;\n        const normal = v2fAttr.normal as Vector3;\n\n        // 采样基础颜色\n        const surfaceColor = this.mainTexture?.Sample(\n            uv.u * this.mainTextureST.x + this.mainTextureST.z,\n            uv.v * this.mainTextureST.y + this.mainTextureST.w\n        ) || Color.WHITE;\n        surfaceColor.multiply(this.baseColor);\n\n        // 高光系数，值越大高光越集中\n        const shininess: number = 100\n\n        // 确保法向量归一化\n        const normalizedNormal = normal.normalize();\n\n        // 计算漫反射（半兰伯特）部分\n        const dotProduct = Math.max(0, Vector3.dot(normalizedNormal, this.lightDirection)) * 0.5 + 0.5;\n\n        // 计算高光（Phong）部分\n        // 1. 计算反射光方向 = 2*(法向量·光源方向)*法向量 - 光源方向\n        const reflectDir = normalizedNormal.clone()\n            .multiplyScalar(2 * Vector3.dot(normalizedNormal, this.lightDirection))\n            .subtract(this.lightDirection)\n            .normalize();\n\n        // 2. 计算反射方向与视角方向的点积\n        const specDot = Math.max(0, Vector3.dot(reflectDir, this.viewDir));\n\n        // 3. 计算高光因子（使用高光系数控制高光范围）\n        const specularFactor = Math.pow(specDot, shininess);\n\n        // 4. 计算高光颜色（通常使用光源颜色，可添加高光强度参数）\n        const specularIntensity = 0.5; // 高光强度\n        const specularR = this.lightColor.r * specularIntensity * specularFactor;\n        const specularG = this.lightColor.g * specularIntensity * specularFactor;\n        const specularB = this.lightColor.b * specularIntensity * specularFactor;\n\n        // 计算漫反射颜色\n        const diffR = surfaceColor.r * this.lightColor.r * this.lightIntensity * dotProduct;\n        const diffG = surfaceColor.g * this.lightColor.g * this.lightIntensity * dotProduct;\n        const diffB = surfaceColor.b * this.lightColor.b * this.lightIntensity * dotProduct;\n\n        // 合并所有光照贡献（漫反射 + 高光）\n        const totalR = diffR + specularR;\n        const totalG = diffG + specularG;\n        const totalB = diffB + specularB;\n\n        // 确保颜色值在0-1范围内\n        const clampedR = Math.min(1, Math.max(0, totalR));\n        const clampedG = Math.min(1, Math.max(0, totalG));\n        const clampedB = Math.min(1, Math.max(0, totalB));\n\n        // 组合成32位颜色值（保留原始Alpha）\n        return new Color(clampedR, clampedG, clampedB, surfaceColor.a);\n    }\n}","import { Camera } from \"../Component/Camera\";\nimport { Light } from \"../Component/Light\";\nimport { RenderSettings } from \"../Core/Setting\";\nimport { Transform } from \"../Core/Transform\";\nimport { UObject } from \"../Core/UObject\";\nimport { Color } from \"../Math/Color\";\nimport { Matrix4x4 } from \"../Math/Matrix4x4\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { RenderType, ShaderPass, VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { Texture } from \"../Resources/Texture\";\n\nexport abstract class Shader extends UObject {\n    public renderType: RenderType = RenderType.Opaque;\n    public renderQueue: number = 0;\n\n    // 一些全局参数，CPU传给GPU\n    protected transform: Transform;\n    protected camera: Camera;\n    protected viewDir: Vector3;\n    protected modelMatrix: Matrix4x4;\n    protected viewMatrix: Matrix4x4;\n    protected projectionMatrix: Matrix4x4;\n    protected mvpMatrix: Matrix4x4;\n    protected normalMatrix: Matrix4x4;\n    protected light: Light;\n    protected lightColor: Color;\n    protected lightDirection: Vector3;\n    protected lightIntensity: number;\n    protected ambientLight: Color;\n\n    public passes: ShaderPass[] = [];\n\n    public init(transform: Transform, camera: Camera): void {\n        this.transform = transform;\n        this.camera = camera;\n        this.viewDir = camera.transform.forward.negate().normalize();\n\n        this.modelMatrix = this.transform.localToWorldMatrix;\n        this.viewMatrix = this.camera.getViewMatrix();\n        this.projectionMatrix = this.camera.getProjectionMatrix();\n        this.mvpMatrix = this.projectionMatrix.clone().multiply(this.viewMatrix).multiply(this.modelMatrix);\n\n        this.normalMatrix = this.transform.localToWorldNormalMatrix;\n\n        this.light = Light.sunLight;\n        this.ambientLight = RenderSettings.ambientLight;\n        this.lightColor = this.light.color;\n        this.lightDirection = this.light.transform.forward.normalize();\n        this.lightIntensity = this.light.intensity;\n    }\n\n    public onDestroy(): void {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    //#region 着色器通用模板\n    public baseColor: Color = Color.WHITE;\n    public mainTexture: Texture | null = null;\n    public mainTextureST: Vector4 = new Vector4(1, 1, 0, 0);\n\n    // 通用顶点函数，将顶点坐标以及法线变换到裁剪空间\n    protected vertexShader(inAttr: VertexAttributes): { vertexOut: Vector4; attrOut: VertexAttributes } {\n        return {\n            vertexOut: this.mvpMatrix.multiplyVector4(new Vector4(inAttr.vertex as Vector3, 1)),\n            attrOut: {\n                uv: inAttr.uv,\n                normal: this.normalMatrix.multiplyVector3(inAttr.normal as Vector3),\n            }\n        };\n    }\n\n    // 通用着色器函数，采样纹理与基础颜色相乘\n    protected fragmentShader(v2fAttr: VertexAttributes): Color | null {\n        if (!this.mainTexture) return Color.MAGENTA;\n        const uv = v2fAttr.uv as Vector2;\n        const sampledColor = this.mainTexture.Sample(\n            uv.u * this.mainTextureST.x + this.mainTextureST.z,\n            uv.v * this.mainTextureST.y + this.mainTextureST.w\n        );\n        return Color.multiply(sampledColor, this.baseColor);\n    }\n    //#endregion\n}","import { Color } from \"../Math/Color\";\nimport { CullMode, ShaderPass, StencilCompareFunction, StencilOp, StencilPresets } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"./Shader\";\nimport { ToonShader } from \"./ToonShader\";\n\nexport class StencilOutlineShader extends Shader {\n\n    // 基础着色参数\n    public shadowThreshold: number = 0.3;\n    public midtoneThreshold: number = 0.7;\n    public highlightIntensity: number = 1.2;\n\n    // 描边参数\n    public outlineColor: Color = Color.BLACK;          // 描边颜色\n    public outlineThickness: number = 0.05;            // 描边厚度\n    public outlineStencilRef: number = 1;              // 模板测试参考值\n\n    public passes: ShaderPass[] = [\n        // 第一遍：正常渲染物体并标记模板缓冲区\n        {\n            name: \"RenderObjectAndMarkStencil\",\n            vert: this.vertexShader.bind(this),\n            frag: ToonShader.prototype.fragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Back,\n                // 模板测试配置：标记物体区域\n                stencil: {\n                    ref: this.outlineStencilRef,\n                    comparisonOperation: StencilCompareFunction.Always,\n                    passOperation: StencilOp.Replace,    // 通过时替换为参考值\n                    failOperation: StencilOp.Keep,      // 失败时保持原值\n                    zFailOperation: StencilOp.Keep      // 深度失败时保持原值\n                }\n            }\n        },\n        // 第二遍：渲染外扩的模型作为描边，只在未被标记的区域绘制\n        {\n            name: \"RenderOutline\",\n            vert: ToonShader.prototype.outlineVertexShader.bind(this),\n            frag: ToonShader.prototype.outlineFragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Back,\n                // 模板测试配置：只在非物体区域绘制描边\n                stencil: StencilPresets.outline(this.outlineStencilRef),\n            }\n        }\n    ];\n}\n","import { Color } from \"../Math/Color\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { CullMode, ShaderPass, VertexAttributes } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"./Shader\";\n\nexport class ToonShader extends Shader {\n\n    // 卡通着色特有的参数\n    public shadowThreshold: number = 0.3;               // 阴影阈值\n    public midtoneThreshold: number = 0.7;              // 中间调阈值\n    public highlightIntensity: number = 1.2;            // 高光强度\n    public outlineColor: Color = new Color(0, 0, 0, 1); // 轮廓颜色\n    public outlineThickness: number = 0.05;             // 轮廓厚度\n\n    public passes: ShaderPass[] = [\n        {\n            name: \"Forward\",\n            vert: this.vertexShader.bind(this),\n            frag: this.fragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Back,\n            }\n        },\n        {\n            name: \"Outline\",\n            vert: this.outlineVertexShader.bind(this),\n            frag: this.outlineFragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Front,\n            }\n        }\n    ];\n\n    public fragmentShader(v2fAttr: VertexAttributes): Color | null {\n        if (!this.mainTexture) { return Color.MAGENTA; }\n\n        const uv = v2fAttr.uv as Vector2;\n        const normal = v2fAttr.normal as Vector3;\n\n        // 采样纹理颜色\n        const surfaceColor = this.mainTexture.Sample(uv.u, uv.v);\n\n        // 确保法向量归一化\n        const normalizedNormal = normal.normalize();\n\n        // 计算法向量与光源方向的点积\n        const dotProduct = Vector3.dot(normalizedNormal, this.lightDirection);\n\n        // 卡通着色的核心：将光照分为几个离散的层次\n        let lightIntensity = 0;\n        if (dotProduct > this.midtoneThreshold) {\n            // 高光区域\n            lightIntensity = this.highlightIntensity;\n        } else if (dotProduct > this.shadowThreshold) {\n            // 中间调区域\n            lightIntensity = 0.7;\n        } else {\n            // 阴影区域\n            lightIntensity = 0.3;\n        }\n\n        // 计算漫反射颜色（卡通风格通常不使用复杂的光照公式）\n        const diffR = surfaceColor.r * this.lightColor.r * this.lightIntensity * lightIntensity;\n        const diffG = surfaceColor.g * this.lightColor.g * this.lightIntensity * lightIntensity;\n        const diffB = surfaceColor.b * this.lightColor.b * this.lightIntensity * lightIntensity;\n\n        // 添加环境光\n        const totalR = this.ambientLight.r + diffR;\n        const totalG = this.ambientLight.g + diffG;\n        const totalB = this.ambientLight.b + diffB;\n\n        // 确保颜色值在0-1范围内\n        const clampedR = Math.min(1, Math.max(0, totalR));\n        const clampedG = Math.min(1, Math.max(0, totalG));\n        const clampedB = Math.min(1, Math.max(0, totalB));\n\n        // 返回最终颜色，保留原始Alpha\n        return new Color(clampedR, clampedG, clampedB, surfaceColor.a);\n    }\n\n    // 轮廓线顶点着色器\n    public outlineVertexShader(inAttr: VertexAttributes): { vertexOut: Vector4; attrOut: VertexAttributes } {\n        // 沿法线方向外推顶点来创建轮廓\n        const normal = inAttr.normal as Vector3;\n        const offsetVertex = (inAttr.vertex as Vector3).clone()\n            .add(normal.clone().multiplyScalar(this.outlineThickness));\n\n        return {\n            vertexOut: this.mvpMatrix.multiplyVector4(new Vector4(offsetVertex, 1)),\n            attrOut: {}\n        };\n    }\n\n    // 轮廓线片段着色器\n    public outlineFragmentShader(): Color | null {\n        return this.outlineColor;\n    }\n}","import { BlendFactor, CullMode, RenderType, ShaderPass } from \"../Renderer/RendererDefine\";\nimport { Shader } from \"./Shader\";\n\nexport class TransparentShader extends Shader {\n\n    public renderType: RenderType = RenderType.Transparent;\n    \n    public passes: ShaderPass[] = [\n        {\n            name: \"Forward\",\n            vert: this.vertexShader.bind(this),\n            frag: this.fragmentShader.bind(this),\n            renderState: {\n                cullMode: CullMode.Back,\n                zWrite: false,\n                blend: {\n                    src: BlendFactor.SrcAlpha,\n                    dst: BlendFactor.OneMinusSrcAlpha,\n                },\n            },\n        }\n    ];\n}","import { Camera } from \"../Component/Camera\";\nimport { Engine } from \"../Core/Engine\";\nimport { Color } from \"../Math/Color\";\nimport { TransformTools } from \"../Math/TransformTools\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\n\nenum LogType {\n    Info,\n    Warning,\n    Error,\n}\n\ninterface ILog {\n    message: string;\n    type: LogType;\n    duration: number;\n}\n\ninterface ILine {\n    start: Vector2;\n    end: Vector2;\n    color: Color;\n    duration: number;\n}\n\nexport class Debug {\n    private static logs: ILog[] = [];\n    private static lines: ILine[] = [];\n\n    private static readonly logColors = {\n        [LogType.Info]: 'white',\n        [LogType.Warning]: 'orange',\n        [LogType.Error]: 'red'\n    };\n\n    static PrintLogs() {\n        for (let i = 0; i < this.logs.length; i++) {\n            const log = this.logs[i];\n            Engine.context.fillStyle = Debug.logColors[log.type];\n            Engine.context.fillText(log.message, 10, 20 + i * 15);\n        }\n        this.logs = [];\n    }\n\n    static GetDebugLines() {\n        const lines = this.lines;\n        this.lines = [];\n        return lines;\n    }\n\n    static Log(message: string, duration?: number) {\n        this.push(message, LogType.Info, duration);\n    }\n\n    static LogWarning(message: string, duration?: number) {\n        this.push(message, LogType.Warning, duration);\n    }\n\n    static LogError(message: string, duration?: number) {\n        this.push(message, LogType.Error, duration);\n    }\n\n    static DrawLine(start: Vector2, end: Vector2, color: Color, duration?: number) {\n        const line: ILine = {\n            start,\n            end,\n            color,\n            duration: duration ?? 0,\n        }\n        this.lines.push(line);\n    }\n\n    static DrawLine3D(start: Vector3, end: Vector3, color: Color, duration?: number) {\n        const a = TransformTools.WorldToScreenPos(start, Camera.mainCamera).screen;\n        const b = TransformTools.WorldToScreenPos(end, Camera.mainCamera).screen;\n        this.DrawLine(a, b, color, duration);\n    }\n\n    private static push(message: string, type: LogType, duration?: number) {\n        const log: ILog = {\n            message,\n            type,\n            duration: duration ?? 0,\n        }\n        this.logs.push(log);\n    }\n}","import { Color } from '../Math/Color';\nimport { Vector3 } from '../Math/Vector3';\nimport { Matrix4x4 } from '../Math/Matrix4x4';\nimport { TransformTools } from '../Math/TransformTools';\nimport { Camera } from '../Component/Camera';\nimport { Engine } from '../Core/Engine';\n\n/**\n * Gizmo工具类，用于绘制各种调试图形\n * 参考Unity的Gizmo系统实现\n */\nexport class Gizmo {\n    // 当前绘制颜色\n    private static _color: Color = Color.WHITE;\n\n    // 当前矩阵变换\n    private static _matrix: Matrix4x4 = Matrix4x4.identity;\n\n    /**\n     * 设置当前绘制颜色\n     */\n    public static set color(color: Color) {\n        this._color = color;\n    }\n\n    /**\n     * 获取当前绘制颜色\n     */\n    public static get color(): Color {\n        return this._color;\n    }\n\n    /**\n     * 设置当前变换矩阵\n     */\n    public static set matrix(matrix: Matrix4x4) {\n        this._matrix = matrix;\n    }\n\n    /**\n     * 获取当前变换矩阵\n     */\n    public static get matrix(): Matrix4x4 {\n        return this._matrix;\n    }\n\n    public static Reset(): void {\n        this._color = Color.WHITE;\n        this._matrix = Matrix4x4.identity;\n    }\n\n    /**\n     * 绘制一条从start到end的线\n     */\n    public static DrawLine(start: Vector3, end: Vector3): void {\n        const a = TransformTools.ModelToScreenPos(start, this._matrix, Camera.mainCamera).screen;\n        const b = TransformTools.ModelToScreenPos(end, this._matrix, Camera.mainCamera).screen;\n        Engine.pipeline.DrawLine(a.x, a.y, b.x, b.y, this._color);\n    }\n\n    /**\n     * 绘制一条从position开始，沿direction方向的射线\n     */\n    public static DrawRay(position: Vector3, direction: Vector3): void {\n        const end = Vector3.add(position, direction);\n        this.DrawLine(position, end);\n    }\n\n    /**\n     * 绘制一个立方体线框\n     */\n    public static DrawCube(center: Vector3, size: Vector3): void {\n        // 计算立方体的8个顶点\n        const halfSize = Vector3.multiplyScalar(size, 0.5);\n        const vertices = [\n            new Vector3(-halfSize.x, -halfSize.y, -halfSize.z),\n            new Vector3(halfSize.x, -halfSize.y, -halfSize.z),\n            new Vector3(halfSize.x, halfSize.y, -halfSize.z),\n            new Vector3(-halfSize.x, halfSize.y, -halfSize.z),\n            new Vector3(-halfSize.x, -halfSize.y, halfSize.z),\n            new Vector3(halfSize.x, -halfSize.y, halfSize.z),\n            new Vector3(halfSize.x, halfSize.y, halfSize.z),\n            new Vector3(-halfSize.x, halfSize.y, halfSize.z)\n        ];\n\n        // 定义立方体的12条边\n        const edges = [\n            [0, 1], [1, 2], [2, 3], [3, 0],  // 前面\n            [4, 5], [5, 6], [6, 7], [7, 4],  // 后面\n            [0, 4], [1, 5], [2, 6], [3, 7]   // 连接线\n        ];\n\n        // 应用变换并绘制所有边\n        for (const [i1, i2] of edges) {\n            const p1 = Vector3.add(center, vertices[i1]);\n            const p2 = Vector3.add(center, vertices[i2]);\n            this.DrawLine(p1, p2);\n        }\n    }\n\n    /**\n     * 绘制一个坐标轴\n     */\n    public static DrawAxis(position: Vector3, size: number = 1.0): void {\n        // X轴 (红色)\n        const originalColor = this._color;\n        this._color = Color.RED;\n        const xEnd = Vector3.add(position, new Vector3(size, 0, 0));\n        this.DrawLine(position, xEnd);\n\n        // Y轴 (绿色)\n        this._color = Color.GREEN;\n        const yEnd = Vector3.add(position, new Vector3(0, size, 0));\n        this.DrawLine(position, yEnd);\n\n        // Z轴 (蓝色)\n        this._color = Color.BLUE;\n        const zEnd = Vector3.add(position, new Vector3(0, 0, size));\n        this.DrawLine(position, zEnd);\n\n        // 恢复原始颜色\n        this._color = originalColor;\n    }\n}","import { Mesh } from \"../Resources/Mesh\";\nimport { SubMesh } from \"../Resources/Mesh\";\nimport { Vector2 } from \"../Math/Vector2\";\nimport { Vector3 } from \"../Math/Vector3\";\nimport { Vector4 } from \"../Math/Vector4\";\nimport { Bounds } from \"../Math/Bounds\";\n\nexport class OBJParser {\n    /**\n     * 解析OBJ文件内容并生成Mesh对象\n     * @param content OBJ文件的文本内容\n     * @param scale 模型缩放比例，默认1.0\n     * @returns 解析后的Mesh对象\n     */\n    static parse(content: string, scale: number = 1): Mesh {\n        const mesh = new Mesh();\n        mesh.vertices = [];\n        mesh.uv = [];\n        mesh.normals = [];\n        mesh.tangents = [];\n        mesh.triangles = [];\n        mesh.bounds = [];\n        mesh.subMeshes = [];\n        mesh.material = []; // 初始化材质数组\n\n        // 临时存储OBJ文件中的原始数据（索引从1开始）\n        const tempVertices: Vector3[] = [];\n        const tempUvs: Vector2[] = [];\n        const tempNormals: Vector3[] = [];\n\n        // 顶点索引映射表：用于去重 (格式: \"vIndex/vtIndex/vnIndex\" => 合并后的索引)\n        const vertexMap = new Map<string, number>();\n\n        // 材质相关变量\n        let currentMaterial = \"\"; // 当前使用的材质名称\n        const materialSet = new Set<string>(); // 用于收集所有唯一材质\n\n        // 按行分割内容并处理\n        const lines = content.split(/\\r?\\n/);\n        let currentSubMesh: SubMesh | null = null;\n\n        for (const line of lines) {\n            const trimmedLine = line.trim();\n            if (!trimmedLine || trimmedLine.startsWith('#')) {\n                continue; // 跳过空行和注释\n            }\n\n            const parts = trimmedLine.split(/\\s+/);\n            const type = parts[0];\n            const data = parts.slice(1);\n\n            switch (type) {\n                case 'v': // 顶点坐标 (x, y, z) - 应用缩放\n                    if (data.length >= 3) {\n                        tempVertices.push(new Vector3(\n                            parseFloat(data[0]) * scale,\n                            parseFloat(data[1]) * scale,\n                            parseFloat(data[2]) * scale\n                        ));\n                    }\n                    break;\n\n                case 'vt': // 纹理坐标 (u, v)\n                    if (data.length >= 2) {\n                        tempUvs.push(new Vector2(\n                            parseFloat(data[0]),\n                            1 - parseFloat(data[1]) // 翻转V轴\n                        ));\n                    }\n                    break;\n\n                case 'vn': // 法线 (x, y, z)\n                    if (data.length >= 3) {\n                        tempNormals.push(new Vector3(\n                            parseFloat(data[0]),\n                            parseFloat(data[1]),\n                            parseFloat(data[2])\n                        ));\n                    }\n                    break;\n\n                case 'mtllib': // 材质库引用（暂存材质库文件名，实际加载需额外实现）\n                    // 这里可以记录材质库文件路径，用于后续加载材质\n                    // 示例: const mtlPath = data.join(' ');\n                    break;\n\n                case 'usemtl': // 使用材质\n                    if (data.length > 0) {\n                        currentMaterial = data.join(' '); // 支持带空格的材质名\n                        materialSet.add(currentMaterial);\n\n                        if (currentSubMesh) {\n                            currentSubMesh.material = currentMaterial; // 关联材质\n                        }\n                    }\n                    break;\n\n                case 'g': // 处理组指令，创建新的子网格\n                    // 结算当前子网格\n                    if (currentSubMesh) {\n                        currentSubMesh.vertexCount = mesh.vertices.length - currentSubMesh.firstVertex;\n                        currentSubMesh.indexCount = mesh.triangles.length - currentSubMesh.indexStart;\n                    }\n                    // 创建新子网格并继承当前材质\n                    currentSubMesh = new SubMesh();\n                    currentSubMesh.firstVertex = mesh.vertices.length;\n                    currentSubMesh.indexStart = mesh.triangles.length;\n                    currentSubMesh.vertexCount = 0;\n                    currentSubMesh.indexCount = 0;\n                    currentSubMesh.bounds = new Bounds();\n                    currentSubMesh.material = currentMaterial; // 继承当前材质\n                    mesh.subMeshes.push(currentSubMesh);\n                    break;\n\n                case 'f': // 面\n                    if (data.length < 3) break;\n\n                    // 初始化当前子网格（如果没有）\n                    if (!currentSubMesh) {\n                        currentSubMesh = new SubMesh();\n                        currentSubMesh.firstVertex = mesh.vertices.length;\n                        currentSubMesh.indexStart = mesh.triangles.length;\n                        currentSubMesh.vertexCount = 0;\n                        currentSubMesh.indexCount = 0;\n                        currentSubMesh.bounds = new Bounds();\n                        currentSubMesh.material = currentMaterial; // 使用当前材质\n                        mesh.subMeshes.push(currentSubMesh);\n                    }\n\n                    // 处理面的顶点数据\n                    const faceVertices = data.map(vertexStr => {\n                        const indices = vertexStr.split('/').map(idx => parseInt(idx) || 0);\n                        return {\n                            v: indices[0] - 1, // 转换为0基索引\n                            vt: indices[1] - 1,\n                            vn: indices[2] - 1\n                        };\n                    });\n\n                    // 处理三角形化和顶点去重\n                    for (let i = 2; i < faceVertices.length; i++) {\n                        [0, i - 1, i].forEach(idx => {\n                            const { v, vt, vn } = faceVertices[idx];\n\n                            // 创建唯一标识键 (处理可能的负数索引和默认值)\n                            const key = `${v >= 0 ? v : -1}/${vt >= 0 ? vt : -1}/${vn >= 0 ? vn : -1}`;\n\n                            if (vertexMap.has(key)) {\n                                // 复用已存在的顶点索引\n                                mesh.triangles.push(vertexMap.get(key)!);\n                            } else {\n                                // 添加新顶点数据\n                                const newIndex = mesh.vertices.length;\n                                vertexMap.set(key, newIndex);\n\n                                // 顶点数据\n                                mesh.vertices.push(v >= 0 && v < tempVertices.length ? tempVertices[v] : new Vector3(0, 0, 0));\n\n                                // UV数据\n                                mesh.uv.push(vt >= 0 && vt < tempUvs.length ? tempUvs[vt] : new Vector2(0, 0));\n\n                                // 法线数据\n                                mesh.normals.push(vn >= 0 && vn < tempNormals.length ? tempNormals[vn] : new Vector3(0, 0, 1));\n\n                                // 先初始化切线为零向量，后续会计算\n                                mesh.tangents.push(new Vector4(0, 0, 0, 1));\n\n                                // 添加索引\n                                mesh.triangles.push(newIndex);\n                            }\n                        });\n                    }\n                    break;\n            }\n        }\n\n        // 更新子网格信息\n        mesh.subMeshes.forEach(subMesh => {\n            subMesh.vertexCount = mesh.vertices.length - subMesh.firstVertex;\n            subMesh.indexCount = mesh.triangles.length - subMesh.indexStart;\n        });\n\n        // 收集所有材质到mesh.material数组\n        mesh.material = Array.from(materialSet);\n\n        mesh.calculateMeshData();\n\n        if (!mesh.checkValid()) {\n            console.error(\"Mesh check valid faild.\");\n        }\n\n        return mesh;\n    }\n}","import { Engine } from \"./Core/Engine\";\n\n// 当DOM内容加载完成后执行\ndocument.addEventListener('DOMContentLoaded', async () => {\n    // 初始化引擎\n    await Engine.Init();\n    // 主循环\n    function mainLoop(time: number) {\n        Engine.Loop(time);\n        // 请求下一帧动画\n        requestAnimationFrame(mainLoop);\n    }\n    // 开始动画循环\n    requestAnimationFrame(mainLoop);\n});"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}